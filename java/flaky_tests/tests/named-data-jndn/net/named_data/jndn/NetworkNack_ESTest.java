/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:33:42 GMT 2022
 */

package net.named_data.jndn;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.NetworkNack;
import net.named_data.jndn.lp.LpPacket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NetworkNack_ESTest extends NetworkNack_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NetworkNack networkNack0 = new NetworkNack();
      assertEquals((-1), networkNack0.getOtherReasonCode());
      
      NetworkNack networkNack1 = networkNack0.setOtherReasonCode((byte)0);
      NetworkNack.Reason networkNack_Reason0 = NetworkNack.Reason.CONGESTION;
      networkNack1.setReason(networkNack_Reason0);
      assertEquals(0, networkNack0.getOtherReasonCode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NetworkNack networkNack0 = new NetworkNack();
      NetworkNack.Reason networkNack_Reason0 = NetworkNack.Reason.OTHER_CODE;
      networkNack0.setReason(networkNack_Reason0);
      networkNack0.getReason();
      assertEquals((-1), networkNack0.getOtherReasonCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NetworkNack networkNack0 = new NetworkNack();
      assertEquals((-1), networkNack0.getOtherReasonCode());
      
      networkNack0.setOtherReasonCode(0);
      int int0 = networkNack0.getOtherReasonCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NetworkNack networkNack0 = new NetworkNack();
      networkNack0.setOtherReasonCode(2);
      int int0 = networkNack0.getOtherReasonCode();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LpPacket lpPacket0 = new LpPacket();
      NetworkNack networkNack0 = new NetworkNack();
      assertEquals((-1), networkNack0.getOtherReasonCode());
      
      NetworkNack networkNack1 = networkNack0.setOtherReasonCode((byte)0);
      lpPacket0.addHeaderField(networkNack1);
      assertEquals(0, networkNack0.getOtherReasonCode());
      
      NetworkNack networkNack2 = NetworkNack.getFirstHeader(lpPacket0);
      assertEquals(0, networkNack2.getOtherReasonCode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LpPacket lpPacket0 = new LpPacket();
      NetworkNack networkNack0 = new NetworkNack();
      networkNack0.setOtherReasonCode((byte)43);
      lpPacket0.addHeaderField(networkNack0);
      assertEquals(43, networkNack0.getOtherReasonCode());
      
      NetworkNack networkNack1 = NetworkNack.getFirstHeader(lpPacket0);
      assertEquals(43, networkNack1.getOtherReasonCode());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        NetworkNack.getFirstHeader((LpPacket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.NetworkNack", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LpPacket lpPacket0 = new LpPacket();
      Object object0 = new Object();
      lpPacket0.addHeaderField(object0);
      NetworkNack networkNack0 = NetworkNack.getFirstHeader(lpPacket0);
      assertNull(networkNack0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LpPacket lpPacket0 = new LpPacket();
      NetworkNack networkNack0 = new NetworkNack();
      lpPacket0.addHeaderField(networkNack0);
      NetworkNack networkNack1 = NetworkNack.getFirstHeader(lpPacket0);
      assertNotNull(networkNack1);
      assertEquals((-1), networkNack1.getOtherReasonCode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NetworkNack networkNack0 = new NetworkNack();
      // Undeclared exception!
      try { 
        networkNack0.setOtherReasonCode((-1761));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // NetworkNack other reason code must be non-negative
         //
         verifyException("net.named_data.jndn.NetworkNack", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NetworkNack networkNack0 = new NetworkNack();
      NetworkNack networkNack1 = networkNack0.setOtherReasonCode((byte)43);
      NetworkNack.Reason networkNack_Reason0 = NetworkNack.Reason.CONGESTION;
      networkNack1.setReason(networkNack_Reason0);
      assertEquals(43, networkNack0.getOtherReasonCode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NetworkNack.Reason networkNack_Reason0 = NetworkNack.Reason.NO_ROUTE;
      int int0 = networkNack_Reason0.getNumericType();
      assertEquals(150, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NetworkNack networkNack0 = new NetworkNack();
      networkNack0.getReason();
      assertEquals((-1), networkNack0.getOtherReasonCode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NetworkNack networkNack0 = new NetworkNack();
      int int0 = networkNack0.getOtherReasonCode();
      assertEquals((-1), int0);
  }
}
