/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 01:00:00 GMT 2022
 */

package net.named_data.jndn.security.v2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.Interest;
import net.named_data.jndn.security.v2.CertificateFetcher;
import net.named_data.jndn.security.v2.CertificateFetcherOffline;
import net.named_data.jndn.security.v2.CertificateRequest;
import net.named_data.jndn.security.v2.InterestValidationFailureCallback;
import net.named_data.jndn.security.v2.InterestValidationState;
import net.named_data.jndn.security.v2.InterestValidationSuccessCallback;
import net.named_data.jndn.security.v2.ValidationState;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CertificateFetcherOffline_ESTest extends CertificateFetcherOffline_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CertificateFetcherOffline certificateFetcherOffline0 = new CertificateFetcherOffline();
      CertificateRequest certificateRequest0 = new CertificateRequest();
      // Undeclared exception!
      try { 
        certificateFetcherOffline0.doFetch(certificateRequest0, (ValidationState) null, (CertificateFetcher.ValidationContinuation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.CertificateFetcherOffline", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CertificateFetcherOffline certificateFetcherOffline0 = new CertificateFetcherOffline();
      Interest interest0 = new Interest("iTT`~m{T!7N3");
      CertificateRequest certificateRequest0 = new CertificateRequest(interest0);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(certificateRequest0.interest_, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      CertificateFetcher.ValidationContinuation certificateFetcher_ValidationContinuation0 = mock(CertificateFetcher.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      certificateFetcherOffline0.doFetch(certificateRequest0, interestValidationState0, certificateFetcher_ValidationContinuation0);
      CertificateFetcher.ValidationContinuation certificateFetcher_ValidationContinuation1 = mock(CertificateFetcher.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        certificateFetcherOffline0.doFetch(certificateRequest0, interestValidationState0, certificateFetcher_ValidationContinuation1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ValidationState already has an outcome
         //
         verifyException("net.named_data.jndn.security.v2.ValidationState", e);
      }
  }
}
