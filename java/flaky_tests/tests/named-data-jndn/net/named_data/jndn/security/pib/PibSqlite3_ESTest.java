/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:18:55 GMT 2022
 */

package net.named_data.jndn.security.pib;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import net.named_data.jndn.security.pib.PibSqlite3;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PibSqlite3_ESTest extends PibSqlite3_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PibSqlite3 pibSqlite3_0 = null;
      try {
        pibSqlite3_0 = new PibSqlite3("", "decodeInterest is not implemented");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".ndn/pib.db");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "...");
      File file0 = PibSqlite3.getDefaultDatabaseFilePath();
      assertEquals(4L, file0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".ndn");
      FileSystemHandling.createFolder(evoSuiteFile0);
      File file0 = PibSqlite3.getDefaultDatabaseDirectoryPath();
      assertEquals("/home/user", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".ndn");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@no#^2TZ5");
      File file0 = PibSqlite3.getDefaultDatabaseDirectoryPath();
      assertEquals(".ndn", file0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PibSqlite3 pibSqlite3_0 = null;
      try {
        pibSqlite3_0 = new PibSqlite3((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PibSqlite3 pibSqlite3_0 = null;
      try {
        pibSqlite3_0 = new PibSqlite3((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = PibSqlite3.getDefaultDatabaseDirectoryPath();
      assertEquals(".ndn", file0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PibSqlite3 pibSqlite3_0 = null;
      try {
        pibSqlite3_0 = new PibSqlite3("IMPLICIT_SHA256_DIGEST");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = PibSqlite3.getScheme();
      assertEquals("pib-sqlite3", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PibSqlite3 pibSqlite3_0 = null;
      try {
        pibSqlite3_0 = new PibSqlite3();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = PibSqlite3.getDefaultDatabaseFilePath();
      assertEquals("/home/user/.ndn", file0.getParent());
  }
}
