/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 01:11:54 GMT 2022
 */

package net.named_data.jndn.security.certificate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.encoding.OID;
import net.named_data.jndn.encoding.der.DerNode;
import net.named_data.jndn.security.certificate.CertificateSubjectDescription;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CertificateSubjectDescription_ESTest extends CertificateSubjectDescription_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CertificateSubjectDescription certificateSubjectDescription0 = new CertificateSubjectDescription("0.0.-3774.-1053.2", "");
      assertEquals("", certificateSubjectDescription0.getValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[5];
      OID oID0 = new OID(intArray0);
      CertificateSubjectDescription certificateSubjectDescription0 = new CertificateSubjectDescription(oID0, "");
      DerNode derNode0 = certificateSubjectDescription0.toDer();
      assertNotNull(derNode0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[4];
      OID oID0 = new OID(intArray0);
      CertificateSubjectDescription certificateSubjectDescription0 = new CertificateSubjectDescription(oID0, (String) null);
      String string0 = certificateSubjectDescription0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[1];
      OID oID0 = new OID(intArray0);
      CertificateSubjectDescription certificateSubjectDescription0 = new CertificateSubjectDescription(oID0, "H:c{!Jv`K+6-oa|");
      String string0 = certificateSubjectDescription0.getValue();
      assertEquals("H:c{!Jv`K+6-oa|", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[0];
      OID oID0 = new OID(intArray0);
      CertificateSubjectDescription certificateSubjectDescription0 = new CertificateSubjectDescription(oID0, "net.named_data.jndn.util.DynamicByteBuffer");
      String string0 = certificateSubjectDescription0.getOidString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CertificateSubjectDescription certificateSubjectDescription0 = new CertificateSubjectDescription((OID) null, "");
      // Undeclared exception!
      try { 
        certificateSubjectDescription0.toDer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.der.DerNode$DerOid", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CertificateSubjectDescription certificateSubjectDescription0 = null;
      try {
        certificateSubjectDescription0 = new CertificateSubjectDescription("", "");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CertificateSubjectDescription certificateSubjectDescription0 = null;
      try {
        certificateSubjectDescription0 = new CertificateSubjectDescription((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.OID", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[5];
      OID oID0 = new OID(intArray0);
      CertificateSubjectDescription certificateSubjectDescription0 = new CertificateSubjectDescription(oID0, "");
      String string0 = certificateSubjectDescription0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CertificateSubjectDescription certificateSubjectDescription0 = new CertificateSubjectDescription("8", "8");
      String string0 = certificateSubjectDescription0.getOidString();
      assertEquals("8", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CertificateSubjectDescription certificateSubjectDescription0 = new CertificateSubjectDescription("7", "7");
      try { 
        certificateSubjectDescription0.toDer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // First integer in OID is out of range
         //
         verifyException("net.named_data.jndn.encoding.der.DerNode$DerOid", e);
      }
  }
}
