/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 01:00:55 GMT 2022
 */

package net.named_data.jndn.security.certificate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.encoding.OID;
import net.named_data.jndn.security.certificate.CertificateExtension;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CertificateExtension_ESTest extends CertificateExtension_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[4];
      OID oID0 = new OID(intArray0);
      Blob blob0 = new Blob();
      CertificateExtension certificateExtension0 = new CertificateExtension(oID0, false, blob0);
      certificateExtension0.toDerBlob();
      assertFalse(certificateExtension0.getIsCritical());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Blob blob0 = new Blob(byteArray0, true);
      CertificateExtension certificateExtension0 = new CertificateExtension("0", true, blob0);
      certificateExtension0.toDer();
      assertTrue(certificateExtension0.getIsCritical());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CertificateExtension certificateExtension0 = new CertificateExtension((OID) null, true, (Blob) null);
      certificateExtension0.getValue();
      assertTrue(certificateExtension0.getIsCritical());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[4];
      OID oID0 = new OID(intArray0);
      Blob blob0 = new Blob();
      CertificateExtension certificateExtension0 = new CertificateExtension(oID0, false, blob0);
      Blob blob1 = certificateExtension0.getValue();
      assertFalse(certificateExtension0.getIsCritical());
      assertNotNull(blob1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[4];
      OID oID0 = new OID(intArray0);
      Blob blob0 = new Blob();
      CertificateExtension certificateExtension0 = new CertificateExtension(oID0, false, blob0);
      OID oID1 = certificateExtension0.getOid();
      assertFalse(certificateExtension0.getIsCritical());
      assertNotNull(oID1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CertificateExtension certificateExtension0 = new CertificateExtension((OID) null, false, (Blob) null);
      boolean boolean0 = certificateExtension0.getIsCritical();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CertificateExtension certificateExtension0 = new CertificateExtension("0", false, (Blob) null);
      // Undeclared exception!
      try { 
        certificateExtension0.toDerBlob();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.certificate.CertificateExtension", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CertificateExtension certificateExtension0 = null;
      try {
        certificateExtension0 = new CertificateExtension("", false, (Blob) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CertificateExtension certificateExtension0 = null;
      try {
        certificateExtension0 = new CertificateExtension((String) null, true, (Blob) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.OID", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CertificateExtension certificateExtension0 = new CertificateExtension("5", true, (Blob) null);
      try { 
        certificateExtension0.toDerBlob();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // First integer in OID is out of range
         //
         verifyException("net.named_data.jndn.encoding.der.DerNode$DerOid", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CertificateExtension certificateExtension0 = new CertificateExtension((OID) null, true, (Blob) null);
      boolean boolean0 = certificateExtension0.getIsCritical();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CertificateExtension certificateExtension0 = new CertificateExtension((OID) null, true, (Blob) null);
      certificateExtension0.getOid();
      assertTrue(certificateExtension0.getIsCritical());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[0];
      OID oID0 = new OID(intArray0);
      Blob blob0 = new Blob(intArray0);
      CertificateExtension certificateExtension0 = new CertificateExtension(oID0, true, blob0);
      Blob blob1 = certificateExtension0.getValue();
      assertTrue(certificateExtension0.getIsCritical());
      assertNotNull(blob1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CertificateExtension certificateExtension0 = new CertificateExtension((OID) null, false, (Blob) null);
      // Undeclared exception!
      try { 
        certificateExtension0.toDer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.der.DerNode$DerOid", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CertificateExtension certificateExtension0 = new CertificateExtension(".", true, (Blob) null);
      try { 
        certificateExtension0.toDer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No integer in OID
         //
         verifyException("net.named_data.jndn.encoding.der.DerNode$DerOid", e);
      }
  }
}
