/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:13:32 GMT 2022
 */

package net.named_data.jndn.security.v2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.security.v2.ValidationError;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValidationError_ESTest extends ValidationError_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ValidationError validationError0 = new ValidationError(3, (String) null);
      validationError0.getInfo();
      assertEquals(3, validationError0.getCode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ValidationError validationError0 = new ValidationError(5, "bbyS9%W");
      validationError0.getInfo();
      assertEquals(5, validationError0.getCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValidationError validationError0 = new ValidationError(0);
      int int0 = validationError0.getCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ValidationError validationError0 = new ValidationError((-2943), "Malformed certificate");
      int int0 = validationError0.getCode();
      assertEquals((-2943), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ValidationError validationError0 = new ValidationError(3915, (String) null);
      // Undeclared exception!
      try { 
        validationError0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.ValidationError", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ValidationError validationError0 = new ValidationError((-1974), ",-ti#$]\"{qC6l1?b");
      String string0 = validationError0.toString();
      assertEquals("Unrecognized error code -1974 (,-ti#$]\"{qC6l1?b)", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ValidationError validationError0 = new ValidationError(255);
      String string0 = validationError0.toString();
      assertEquals("Internal implementation error", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ValidationError validationError0 = new ValidationError(8);
      String string0 = validationError0.toString();
      assertEquals("Key locator violates validation policy", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ValidationError validationError0 = new ValidationError(7);
      String string0 = validationError0.toString();
      assertEquals("Exceeded validation depth limit", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ValidationError validationError0 = new ValidationError(6);
      String string0 = validationError0.toString();
      assertEquals("Malformed certificate", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ValidationError validationError0 = new ValidationError(9);
      String string0 = validationError0.toString();
      assertEquals("Validation policy error", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ValidationError validationError0 = new ValidationError(4);
      String string0 = validationError0.toString();
      assertEquals("Certificate expired", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ValidationError validationError0 = new ValidationError(3);
      String string0 = validationError0.toString();
      assertEquals("Cannot retrieve certificate", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ValidationError validationError0 = new ValidationError(2);
      String string0 = validationError0.toString();
      assertEquals("Missing signature", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ValidationError validationError0 = new ValidationError(1);
      String string0 = validationError0.toString();
      assertEquals("Invalid signature", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ValidationError validationError0 = new ValidationError(0);
      String string0 = validationError0.toString();
      assertEquals("No error", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ValidationError validationError0 = new ValidationError(5, "bbyS9%W");
      String string0 = validationError0.toString();
      assertEquals("Loop detected in certification chain (bbyS9%W)", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ValidationError validationError0 = new ValidationError((-2058));
      validationError0.getInfo();
      assertEquals((-2058), validationError0.getCode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ValidationError validationError0 = new ValidationError(5, "bbyS9%W");
      int int0 = validationError0.getCode();
      assertEquals(5, int0);
  }
}
