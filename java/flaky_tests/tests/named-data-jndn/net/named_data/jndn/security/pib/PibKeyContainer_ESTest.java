/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:01:02 GMT 2022
 */

package net.named_data.jndn.security.pib;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import net.named_data.jndn.ComponentType;
import net.named_data.jndn.Name;
import net.named_data.jndn.security.pib.PibImpl;
import net.named_data.jndn.security.pib.PibKeyContainer;
import net.named_data.jndn.security.pib.PibMemory;
import net.named_data.jndn.security.pib.detail.PibKeyImpl;
import net.named_data.jndn.security.v2.CertificateV2;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PibKeyContainer_ESTest extends PibKeyContainer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Name.Component name_Component0 = CertificateV2.KEY_COMPONENT;
      PibMemory pibMemory0 = new PibMemory();
      Name.Component[] name_ComponentArray0 = new Name.Component[7];
      name_ComponentArray0[0] = name_Component0;
      name_ComponentArray0[1] = name_Component0;
      name_ComponentArray0[2] = name_Component0;
      name_ComponentArray0[3] = name_Component0;
      name_ComponentArray0[4] = name_Component0;
      name_ComponentArray0[5] = name_Component0;
      name_ComponentArray0[6] = name_Component0;
      Name name0 = new Name(name_ComponentArray0);
      Name name1 = CertificateV2.extractKeyNameFromCertName(name0);
      PibKeyContainer pibKeyContainer0 = new PibKeyContainer(name1, pibMemory0);
      pibKeyContainer0.remove(name0);
      assertNotSame(name0, name1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Name.Component name_Component0 = CertificateV2.KEY_COMPONENT;
      Name.Component[] name_ComponentArray0 = new Name.Component[9];
      name_ComponentArray0[0] = name_Component0;
      name_ComponentArray0[1] = name_Component0;
      name_ComponentArray0[2] = name_ComponentArray0[0];
      name_ComponentArray0[3] = name_Component0;
      name_ComponentArray0[4] = name_Component0;
      name_ComponentArray0[5] = name_Component0;
      name_ComponentArray0[6] = name_Component0;
      name_ComponentArray0[7] = name_Component0;
      name_ComponentArray0[8] = name_Component0;
      Name name0 = new Name(name_ComponentArray0);
      PibMemory pibMemory0 = new PibMemory();
      PibKeyContainer pibKeyContainer0 = new PibKeyContainer(name0, pibMemory0);
      // Undeclared exception!
      try { 
        pibKeyContainer0.remove(name0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key name `/KEY/KEY/KEY/KEY/KEY/KEY/KEY/KEY/KEY` does not match identity `/KEY/KEY/KEY/KEY/KEY/KEY/KEY/KEY/KEY`
         //
         verifyException("net.named_data.jndn.security.pib.PibKeyContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Name.Component[] name_ComponentArray0 = new Name.Component[4];
      ComponentType componentType0 = ComponentType.PARAMETERS_SHA256_DIGEST;
      Name.Component name_Component0 = Name.Component.fromNumber(1L, componentType0);
      name_ComponentArray0[0] = name_Component0;
      name_ComponentArray0[1] = name_ComponentArray0[0];
      Name.Component name_Component1 = CertificateV2.KEY_COMPONENT;
      name_ComponentArray0[2] = name_Component1;
      name_ComponentArray0[3] = name_Component1;
      Name name0 = new Name(name_ComponentArray0);
      PibMemory pibMemory0 = new PibMemory();
      PibKeyContainer pibKeyContainer0 = new PibKeyContainer(name0, pibMemory0);
      // Undeclared exception!
      try { 
        pibKeyContainer0.get(name0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key name `/params-sha256=01/params-sha256=01/KEY/KEY` does not match identity `/params-sha256=01/params-sha256=01/KEY/KEY`
         //
         verifyException("net.named_data.jndn.security.pib.PibKeyContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Name.Component name_Component0 = CertificateV2.KEY_COMPONENT;
      PibMemory pibMemory0 = new PibMemory();
      Name.Component[] name_ComponentArray0 = new Name.Component[5];
      name_ComponentArray0[0] = name_Component0;
      name_ComponentArray0[1] = name_Component0;
      name_ComponentArray0[2] = name_Component0;
      name_ComponentArray0[3] = name_Component0;
      name_ComponentArray0[4] = name_Component0;
      Name name0 = new Name(name_ComponentArray0);
      Name name1 = CertificateV2.extractKeyNameFromCertName(name0);
      PibKeyContainer pibKeyContainer0 = new PibKeyContainer(name1, pibMemory0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(480);
      // Undeclared exception!
      try { 
        pibKeyContainer0.add(byteBuffer0, name0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid key encoding
         //
         verifyException("net.named_data.jndn.security.pib.detail.PibKeyImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Name name0 = new Name();
      PibMemory pibMemory0 = new PibMemory();
      Name.Component name_Component0 = CertificateV2.KEY_COMPONENT;
      Name.Component[] name_ComponentArray0 = new Name.Component[3];
      name_ComponentArray0[0] = name_Component0;
      name_ComponentArray0[1] = name_Component0;
      name_ComponentArray0[2] = name_Component0;
      Name name1 = new Name(name_ComponentArray0);
      PibKeyContainer pibKeyContainer0 = new PibKeyContainer(name0, pibMemory0);
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        pibKeyContainer0.add(byteBuffer0, name1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key name `/KEY/KEY/KEY` does not match the identity name `/`
         //
         verifyException("net.named_data.jndn.security.pib.PibKeyContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      Name name0 = new Name(arrayList0);
      PibMemory pibMemory0 = new PibMemory();
      PibKeyContainer pibKeyContainer0 = new PibKeyContainer(name0, pibMemory0);
      // Undeclared exception!
      try { 
        pibKeyContainer0.remove(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.Name$Component (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @b1d1ae0)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      Name name0 = new Name(arrayList0);
      PibMemory pibMemory0 = new PibMemory();
      PibKeyContainer pibKeyContainer0 = new PibKeyContainer(name0, pibMemory0);
      // Undeclared exception!
      try { 
        pibKeyContainer0.get(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.Name$Component (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @b1d1ae0)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      PibKeyContainer pibKeyContainer0 = null;
      try {
        pibKeyContainer0 = new PibKeyContainer((Name) null, pibMemory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Name name0 = new Name();
      PibMemory pibMemory0 = new PibMemory();
      pibMemory0.addKey(name0, name0, (ByteBuffer) null);
      PibKeyContainer pibKeyContainer0 = null;
      try {
        pibKeyContainer0 = new PibKeyContainer(name0, pibMemory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key name `/` does not follow the naming conventions
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Name name0 = new Name();
      PibKeyContainer pibKeyContainer0 = null;
      try {
        pibKeyContainer0 = new PibKeyContainer(name0, (PibImpl) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // The pibImpl is null
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Name name0 = new Name();
      PibMemory pibMemory0 = new PibMemory();
      PibKeyContainer pibKeyContainer0 = new PibKeyContainer(name0, pibMemory0);
      ArrayList<Name> arrayList0 = pibKeyContainer0.getKeyNames();
      arrayList0.add(name0);
      Name name1 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        pibKeyContainer0.add((ByteBuffer) null, name1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.Name cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.Name and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @b1d1ae0)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Name.Component name_Component0 = CertificateV2.KEY_COMPONENT;
      PibMemory pibMemory0 = new PibMemory();
      Name.Component[] name_ComponentArray0 = new Name.Component[7];
      name_ComponentArray0[0] = name_Component0;
      name_ComponentArray0[1] = name_Component0;
      name_ComponentArray0[2] = name_Component0;
      name_ComponentArray0[3] = name_Component0;
      name_ComponentArray0[4] = name_Component0;
      name_ComponentArray0[5] = name_Component0;
      name_ComponentArray0[6] = name_Component0;
      Name name0 = new Name(name_ComponentArray0);
      Name name1 = CertificateV2.extractKeyNameFromCertName(name0);
      PibKeyContainer pibKeyContainer0 = new PibKeyContainer(name1, pibMemory0);
      try { 
        pibKeyContainer0.get(name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Key `/KEY/KEY/KEY/KEY/KEY/KEY/KEY` not found
         //
         verifyException("net.named_data.jndn.security.pib.PibMemory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Name.Component name_Component0 = CertificateV2.KEY_COMPONENT;
      Name.Component[] name_ComponentArray0 = new Name.Component[3];
      name_ComponentArray0[1] = name_Component0;
      Name name0 = new Name(name_ComponentArray0);
      PibMemory pibMemory0 = new PibMemory();
      PibKeyContainer pibKeyContainer0 = new PibKeyContainer(name0, pibMemory0);
      // Undeclared exception!
      try { 
        pibKeyContainer0.get(name0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Name.Component name_Component0 = CertificateV2.KEY_COMPONENT;
      Name.Component[] name_ComponentArray0 = new Name.Component[3];
      name_ComponentArray0[1] = name_Component0;
      Name name0 = new Name(name_ComponentArray0);
      PibMemory pibMemory0 = new PibMemory();
      PibKeyContainer pibKeyContainer0 = new PibKeyContainer(name0, pibMemory0);
      // Undeclared exception!
      try { 
        pibKeyContainer0.remove(name0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Name.Component name_Component0 = CertificateV2.KEY_COMPONENT;
      Name.Component[] name_ComponentArray0 = new Name.Component[3];
      name_ComponentArray0[1] = name_Component0;
      Name name0 = new Name(name_ComponentArray0);
      PibMemory pibMemory0 = new PibMemory();
      PibKeyContainer pibKeyContainer0 = new PibKeyContainer(name0, pibMemory0);
      // Undeclared exception!
      try { 
        pibKeyContainer0.add((ByteBuffer) null, name0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      PibMemory pibMemory0 = new PibMemory();
      PibKeyContainer pibKeyContainer0 = new PibKeyContainer(name0, pibMemory0);
      HashMap<Name, PibKeyImpl> hashMap0 = pibKeyContainer0.getKeys_();
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Name name0 = new Name("*!or.v)");
      PibMemory pibMemory0 = new PibMemory();
      PibKeyContainer pibKeyContainer0 = new PibKeyContainer(name0, pibMemory0);
      int int0 = pibKeyContainer0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      PibMemory pibMemory0 = new PibMemory();
      PibKeyContainer pibKeyContainer0 = new PibKeyContainer(name0, pibMemory0);
      boolean boolean0 = pibKeyContainer0.isConsistent();
      assertTrue(boolean0);
  }
}
