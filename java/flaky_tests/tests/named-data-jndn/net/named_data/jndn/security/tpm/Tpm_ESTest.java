/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:50:40 GMT 2022
 */

package net.named_data.jndn.security.tpm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import net.named_data.jndn.Name;
import net.named_data.jndn.security.DigestAlgorithm;
import net.named_data.jndn.security.KeyIdType;
import net.named_data.jndn.security.KeyParams;
import net.named_data.jndn.security.KeyType;
import net.named_data.jndn.security.tpm.Tpm;
import net.named_data.jndn.security.tpm.TpmBackEnd;
import net.named_data.jndn.security.tpm.TpmBackEndFile;
import net.named_data.jndn.security.tpm.TpmBackEndMemory;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Tpm_ESTest extends Tpm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      Tpm tpm0 = new Tpm("net.named_data.jndn.security.tpm.Tpm", "net.named_data.jndn.security.tpm.Tpm", tpmBackEndMemory0);
      boolean boolean0 = tpm0.isTerminalMode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tpm tpm0 = new Tpm("createKey: Unsupported key type", "RsaOaep", (TpmBackEnd) null);
      TpmBackEnd tpmBackEnd0 = tpm0.getBackEnd_();
      assertNull(tpmBackEnd0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tpm tpm0 = new Tpm("l$_j[0wt ?H9^>Xdi\"j", "l$_j[0wt ?H9^>Xdi\"j", (TpmBackEnd) null);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      // Undeclared exception!
      try { 
        tpm0.unlockTpm(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.tpm.Tpm", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      Tpm tpm0 = new Tpm("^", "^", (TpmBackEnd) null);
      // Undeclared exception!
      try { 
        tpm0.sign((ByteBuffer) null, (Name) null, digestAlgorithm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.tpm.Tpm", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tpm tpm0 = new Tpm("}1,b", "}1,b", (TpmBackEnd) null);
      // Undeclared exception!
      try { 
        tpm0.setTerminalMode(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.tpm.Tpm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tpm tpm0 = new Tpm("", "", (TpmBackEnd) null);
      // Undeclared exception!
      try { 
        tpm0.isTpmLocked();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.tpm.Tpm", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      Tpm tpm0 = new Tpm("javax.xml.bind.DatatypeConverter", "@)XT", tpmBackEndMemory0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(12);
      try { 
        tpm0.importPrivateKey_((Name) null, byteBuffer0, byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot import private key: org.evosuite.runtime.mock.java.lang.MockThrowable: Cannot decode the PKCS #8 EncryptedPrivateKeyInfo: org.evosuite.runtime.mock.java.lang.MockThrowable: Unimplemented DER type 0
         //
         verifyException("net.named_data.jndn.security.tpm.TpmBackEndMemory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      Tpm tpm0 = new Tpm("xb5", "xb5", tpmBackEndMemory0);
      Name name0 = new Name("xb5");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)125;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        tpm0.importPrivateKey_(name0, byteBuffer0, (ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newLimit > capacity: (127 > 8)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile("");
      Tpm tpm0 = new Tpm("\n92`&E,c<E${Am9@", "", tpmBackEndFile0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      Name name0 = new Name(arrayList0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(224);
      // Undeclared exception!
      try { 
        tpm0.importPrivateKey_(name0, byteBuffer0, byteBuffer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.Name$Component (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6cec275f)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile("decodeEncryptedContent is not implemented");
      Tpm tpm0 = new Tpm("decodeEncryptedContent is not implemented", "decodeEncryptedContent is not implemented", tpmBackEndFile0);
      // Undeclared exception!
      try { 
        tpm0.hasKey((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.tpm.TpmBackEndFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tpm.Error tpm_Error0 = new Tpm.Error("l$_j[0wt ?H9^>Xdi\"j");
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile();
      Tpm tpm0 = new Tpm((String) null, "", tpmBackEndFile0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) tpm_Error0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        tpm0.hasKey(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.security.tpm.Tpm$Error cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.security.tpm.Tpm$Error and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6cec275f)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile();
      Tpm tpm0 = new Tpm("", "", tpmBackEndFile0);
      // Undeclared exception!
      try { 
        tpm0.getPublicKey((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.tpm.TpmBackEndFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      Tpm tpm0 = new Tpm("Em:!,><V%", "Em:!,><V%", tpmBackEndMemory0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        tpm0.getPublicKey(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.Name$Component (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6cec275f)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Name name0 = new Name();
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      Tpm tpm0 = new Tpm((String) null, (String) null, tpmBackEndMemory0);
      try { 
        tpm0.exportPrivateKey_(name0, (ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Key `/` does not exist
         //
         verifyException("net.named_data.jndn.security.tpm.TpmBackEnd", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile();
      Tpm tpm0 = new Tpm("decodeEncryptedContent is not implemented", "T7m%+b%", tpmBackEndFile0);
      // Undeclared exception!
      try { 
        tpm0.deleteKey_((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.tpm.TpmBackEndFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      Tpm tpm0 = new Tpm("net.named_data.jndn.security.tpm.Tpm", "", tpmBackEndMemory0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add(0, (Object) tpm0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        tpm0.deleteKey_(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.security.tpm.Tpm cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.security.tpm.Tpm and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6cec275f)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tpm tpm0 = new Tpm("ZCIykR/csp|s.NgH)s", "ZCIykR/csp|s.NgH)s", (TpmBackEnd) null);
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        tpm0.decrypt((ByteBuffer) null, name0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.tpm.Tpm", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      Tpm tpm0 = new Tpm("createKey: Unsupported key type", "createKey: Unsupported key type", tpmBackEndMemory0);
      // Undeclared exception!
      try { 
        tpm0.createKey_((Name) null, (KeyParams) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.tpm.Tpm", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      Tpm tpm0 = new Tpm("decodeEncryptedContent is not implemented", "decodeEncryptedContent is not implemented", tpmBackEndMemory0);
      KeyType keyType0 = KeyType.RSA;
      KeyIdType keyIdType0 = KeyIdType.SHA256;
      KeyType keyType1 = KeyType.AES;
      KeyParams keyParams0 = mock(KeyParams.class, new ViolatedAssumptionAnswer());
      doReturn(keyIdType0, keyIdType0).when(keyParams0).getKeyIdType();
      doReturn(keyType0, keyType1, (KeyType) null, (KeyType) null).when(keyParams0).getKeyType();
      // Undeclared exception!
      try { 
        tpm0.createKey_((Name) null, keyParams0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot generate a key pair of type null
         //
         verifyException("net.named_data.jndn.security.tpm.TpmPrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      Tpm tpm0 = new Tpm("decodeEncryptedContent is not implemented", "decodeEncryptedContent is not implemented", tpmBackEndMemory0);
      KeyType keyType0 = KeyType.RSA;
      KeyIdType keyIdType0 = KeyIdType.SHA256;
      KeyParams keyParams0 = mock(KeyParams.class, new ViolatedAssumptionAnswer());
      doReturn((KeyIdType) null, (KeyIdType) null, (KeyIdType) null).when(keyParams0).getKeyIdType();
      doReturn(keyType0).when(keyParams0).getKeyType();
      try { 
        tpm0.createKey_((Name) null, keyParams0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported key id type
         //
         verifyException("net.named_data.jndn.security.tpm.TpmBackEnd", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tpm.Error tpm_Error0 = new Tpm.Error("l$_j[0wt ?H9^>Xdi\"j");
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile();
      Tpm tpm0 = new Tpm((String) null, "", tpmBackEndFile0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) tpm_Error0);
      Name name0 = new Name(arrayList0);
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        tpm0.decrypt(byteBuffer0, name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.security.tpm.Tpm$Error cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.security.tpm.Tpm$Error and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6cec275f)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      Tpm tpm0 = new Tpm("decodeEncryptedContent is not implemented", "decodeEncryptedContent is not implemented", tpmBackEndMemory0);
      KeyType keyType0 = KeyType.EC;
      KeyParams keyParams0 = mock(KeyParams.class, new ViolatedAssumptionAnswer());
      doReturn(keyType0, (KeyType) null).when(keyParams0).getKeyType();
      try { 
        tpm0.createKey_((Name) null, keyParams0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // createKey: Unsupported key type
         //
         verifyException("net.named_data.jndn.security.tpm.Tpm", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      Tpm tpm0 = new Tpm("net.named_data.jndn.security.tpm.Tpm", "net.named_data.jndn.security.tpm.Tpm", tpmBackEndMemory0);
      Blob blob0 = tpm0.decrypt((ByteBuffer) null, (Name) null);
      assertTrue(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile();
      Tpm tpm0 = new Tpm("v.9,?5Z:N'", "", tpmBackEndFile0);
      byte[] byteArray0 = new byte[3];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Name name0 = new Name();
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      Blob blob0 = tpm0.sign(byteBuffer0, name0, digestAlgorithm0);
      assertTrue(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile();
      Tpm tpm0 = new Tpm("createKey: Unsupported key type", "createKey: Unsupported key type", tpmBackEndFile0);
      Name name0 = new Name();
      Blob blob0 = tpm0.getPublicKey(name0);
      assertTrue(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile();
      Tpm tpm0 = new Tpm("v.9,?5Z:N'", "", tpmBackEndFile0);
      Name name0 = new Name();
      KeyType keyType0 = KeyType.EC;
      KeyParams keyParams0 = mock(KeyParams.class, new ViolatedAssumptionAnswer());
      doReturn(keyType0, (KeyType) null).when(keyParams0).getKeyType();
      try { 
        tpm0.createKey_(name0, keyParams0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // createKey: Unsupported key type
         //
         verifyException("net.named_data.jndn.security.tpm.Tpm", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile((String) null);
      Tpm tpm0 = new Tpm("#?]0", "ta+4K8@Lu", tpmBackEndFile0);
      tpm0.setTerminalMode(false);
      assertFalse(tpm0.isTpmLocked());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      Tpm tpm0 = new Tpm("xb5", "xb5", tpmBackEndMemory0);
      boolean boolean0 = tpm0.isTpmLocked();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Tpm tpm0 = new Tpm("l$_j[0wt ?H9^>Xdi\"j", "l$_j[0wt ?H9^>Xdi\"j", (TpmBackEnd) null);
      // Undeclared exception!
      try { 
        tpm0.isTerminalMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.tpm.Tpm", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      Tpm tpm0 = new Tpm("net.named_data.jndn.security.tpm.Tpm", "net.named_data.jndn.security.tpm.Tpm", tpmBackEndMemory0);
      Name name0 = new Name();
      tpm0.deleteKey_(name0);
      assertTrue(tpm0.isTerminalMode());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      Tpm tpm0 = new Tpm((String) null, (String) null, tpmBackEndMemory0);
      String string0 = tpm0.getTpmLocator();
      assertEquals("null:null", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      Tpm tpm0 = new Tpm("", "", tpmBackEndMemory0);
      boolean boolean0 = tpm0.unlockTpm((ByteBuffer) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile();
      Tpm tpm0 = new Tpm("createKey: Unsupported key type", "createKey: Unsupported key type", tpmBackEndFile0);
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        tpm0.importPrivateKey_(name0, (ByteBuffer) null, (ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.der.DerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      Tpm tpm0 = new Tpm("&O>Iex-4W@p@5", "&O>Iex-4W@p@5", tpmBackEndMemory0);
      // Undeclared exception!
      try { 
        tpm0.exportPrivateKey_((Name) null, (ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.tpm.TpmBackEnd", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile();
      Tpm tpm0 = new Tpm("v.9,?5Z:N'", "", tpmBackEndFile0);
      TpmBackEnd tpmBackEnd0 = tpm0.getBackEnd_();
      assertSame(tpmBackEnd0, tpmBackEndFile0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile();
      Tpm tpm0 = new Tpm("v.9,?5Z:N'", "", tpmBackEndFile0);
      Name name0 = new Name();
      boolean boolean0 = tpm0.hasKey(name0);
      assertFalse(boolean0);
  }
}
