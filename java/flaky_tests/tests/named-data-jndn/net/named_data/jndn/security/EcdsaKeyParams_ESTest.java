/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 01:00:13 GMT 2022
 */

package net.named_data.jndn.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.Name;
import net.named_data.jndn.security.EcdsaKeyParams;
import net.named_data.jndn.security.KeyIdType;
import net.named_data.jndn.security.KeyType;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EcdsaKeyParams_ESTest extends EcdsaKeyParams_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Name.Component name_Component0 = new Name.Component();
      EcdsaKeyParams ecdsaKeyParams0 = null;
      try {
        ecdsaKeyParams0 = new EcdsaKeyParams(name_Component0, (-2613));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // KeyParams: keyId is empty
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EcdsaKeyParams ecdsaKeyParams0 = null;
      try {
        ecdsaKeyParams0 = new EcdsaKeyParams((Name.Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.KeyParams", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Blob blob0 = new Blob();
      Name.Component name_Component0 = new Name.Component(blob0);
      EcdsaKeyParams ecdsaKeyParams0 = null;
      try {
        ecdsaKeyParams0 = new EcdsaKeyParams(name_Component0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // KeyParams: keyId is empty
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      KeyIdType keyIdType0 = KeyIdType.USER_SPECIFIED;
      EcdsaKeyParams ecdsaKeyParams0 = null;
      try {
        ecdsaKeyParams0 = new EcdsaKeyParams(152, keyIdType0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // KeyParams: KeyIdType is USER_SPECIFIED
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromVersion(57L);
      EcdsaKeyParams ecdsaKeyParams0 = new EcdsaKeyParams(name_Component0);
      assertEquals(KeyType.EC, ecdsaKeyParams0.getType());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      KeyIdType keyIdType0 = KeyIdType.RANDOM;
      EcdsaKeyParams ecdsaKeyParams0 = new EcdsaKeyParams(0, keyIdType0);
      assertEquals(256, ecdsaKeyParams0.getDefaultSize());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EcdsaKeyParams ecdsaKeyParams0 = new EcdsaKeyParams(0);
      assertEquals(0, ecdsaKeyParams0.getKeySize());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromSequenceNumber(0L);
      EcdsaKeyParams ecdsaKeyParams0 = new EcdsaKeyParams(name_Component0, (-2613));
      assertEquals((-2613), ecdsaKeyParams0.getKeySize());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      EcdsaKeyParams ecdsaKeyParams0 = new EcdsaKeyParams();
      assertEquals(KeyType.EC, ecdsaKeyParams0.getKeyType());
  }
}
