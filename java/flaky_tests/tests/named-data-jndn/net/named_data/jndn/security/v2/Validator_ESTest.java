/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:28:06 GMT 2022
 */

package net.named_data.jndn.security.v2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.Data;
import net.named_data.jndn.Face;
import net.named_data.jndn.Interest;
import net.named_data.jndn.security.certificate.IdentityCertificate;
import net.named_data.jndn.security.v2.CertificateFetcher;
import net.named_data.jndn.security.v2.CertificateFetcherFromNetwork;
import net.named_data.jndn.security.v2.CertificateFetcherOffline;
import net.named_data.jndn.security.v2.DataValidationFailureCallback;
import net.named_data.jndn.security.v2.DataValidationSuccessCallback;
import net.named_data.jndn.security.v2.InterestValidationFailureCallback;
import net.named_data.jndn.security.v2.InterestValidationSuccessCallback;
import net.named_data.jndn.security.v2.ValidationPolicy;
import net.named_data.jndn.security.v2.ValidationPolicyAcceptAll;
import net.named_data.jndn.security.v2.ValidationPolicyCommandInterest;
import net.named_data.jndn.security.v2.ValidationPolicyConfig;
import net.named_data.jndn.security.v2.ValidationPolicySimpleHierarchy;
import net.named_data.jndn.security.v2.Validator;
import net.named_data.jndn.transport.Transport;
import net.named_data.jndn.transport.UdpTransport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Validator_ESTest extends Validator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyAcceptAll0);
      Validator validator0 = new Validator(validationPolicyCommandInterest0);
      validator0.getPolicy();
      assertEquals(25, validator0.getMaxDepth());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      Validator validator0 = new Validator(validationPolicySimpleHierarchy0);
      assertEquals(25, validator0.getMaxDepth());
      
      validator0.setMaxDepth(0);
      int int0 = validator0.getMaxDepth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      Validator validator0 = new Validator(validationPolicyAcceptAll0);
      // Undeclared exception!
      try { 
        validator0.validate((Interest) null, (InterestValidationSuccessCallback) null, (InterestValidationFailureCallback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Interest", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      Interest interest0 = new Interest();
      Validator validator0 = new Validator(validationPolicyAcceptAll0);
      // Undeclared exception!
      try { 
        validator0.validate(interest0, (InterestValidationSuccessCallback) null, (InterestValidationFailureCallback) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The successCallback is null
         //
         verifyException("net.named_data.jndn.security.v2.InterestValidationState", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      IdentityCertificate identityCertificate0 = new IdentityCertificate();
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      Validator validator0 = new Validator(validationPolicyConfig0);
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyAcceptAll0);
      validationPolicyConfig0.setInnerPolicy(validationPolicyCommandInterest0);
      DataValidationSuccessCallback dataValidationSuccessCallback0 = mock(DataValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      DataValidationFailureCallback dataValidationFailureCallback0 = mock(DataValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      try { 
        validator0.validate((Data) identityCertificate0, dataValidationSuccessCallback0, dataValidationFailureCallback0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ValidationPolicyConfig must be a terminal inner policy
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicyConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      Validator validator0 = new Validator(validationPolicyAcceptAll0);
      // Undeclared exception!
      try { 
        validator0.validate((Data) null, (DataValidationSuccessCallback) null, (DataValidationFailureCallback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Data", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      IdentityCertificate identityCertificate0 = new IdentityCertificate();
      Validator validator0 = new Validator(validationPolicyAcceptAll0);
      // Undeclared exception!
      try { 
        validator0.validate((Data) identityCertificate0, (DataValidationSuccessCallback) null, (DataValidationFailureCallback) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The successCallback is null
         //
         verifyException("net.named_data.jndn.security.v2.DataValidationState", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options0 = new ValidationPolicyCommandInterest.Options();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyAcceptAll0, validationPolicyCommandInterest_Options0);
      validationPolicyAcceptAll0.setInnerPolicy(validationPolicyCommandInterest0);
      CertificateFetcherOffline certificateFetcherOffline0 = new CertificateFetcherOffline();
      Validator validator0 = null;
      try {
        validator0 = new Validator(validationPolicyCommandInterest0, certificateFetcherOffline0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyAcceptAll0);
      validationPolicyAcceptAll0.innerPolicy_ = (ValidationPolicy) validationPolicyCommandInterest0;
      Validator validator0 = null;
      try {
        validator0 = new Validator(validationPolicyAcceptAll0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Validator validator0 = null;
      try {
        validator0 = new Validator((ValidationPolicy) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The policy is null
         //
         verifyException("net.named_data.jndn.security.v2.Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      Validator validator0 = null;
      try {
        validator0 = new Validator(validationPolicySimpleHierarchy0, (CertificateFetcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The certificateFetcher is null
         //
         verifyException("net.named_data.jndn.security.v2.Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CertificateFetcherOffline certificateFetcherOffline0 = new CertificateFetcherOffline();
      Validator validator0 = null;
      try {
        validator0 = new Validator((ValidationPolicy) null, certificateFetcherOffline0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The policy is null
         //
         verifyException("net.named_data.jndn.security.v2.Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      Validator validator0 = new Validator(validationPolicyAcceptAll0);
      validator0.getPolicy();
      assertEquals(25, validator0.getMaxDepth());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      IdentityCertificate identityCertificate0 = new IdentityCertificate();
      Validator validator0 = new Validator(validationPolicyAcceptAll0);
      DataValidationSuccessCallback dataValidationSuccessCallback0 = mock(DataValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      DataValidationFailureCallback dataValidationFailureCallback0 = mock(DataValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      validator0.validate((Data) identityCertificate0, dataValidationSuccessCallback0, dataValidationFailureCallback0);
      assertEquals(25, validator0.getMaxDepth());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      Validator validator0 = new Validator(validationPolicyAcceptAll0);
      int int0 = validator0.getMaxDepth();
      assertEquals(25, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      Validator validator0 = new Validator(validationPolicyAcceptAll0);
      validator0.setMaxDepth((-700));
      int int0 = validator0.getMaxDepth();
      assertEquals((-700), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      UdpTransport udpTransport0 = new UdpTransport();
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(udpTransport0, transport_ConnectionInfo0);
      CertificateFetcherFromNetwork certificateFetcherFromNetwork0 = new CertificateFetcherFromNetwork(face0);
      Validator validator0 = new Validator(validationPolicyAcceptAll0, certificateFetcherFromNetwork0);
      validator0.getFetcher();
      assertEquals(25, validator0.getMaxDepth());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      Interest interest0 = new Interest();
      Validator validator0 = new Validator(validationPolicyAcceptAll0);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      validator0.validate(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      assertEquals(25, validator0.getMaxDepth());
  }
}
