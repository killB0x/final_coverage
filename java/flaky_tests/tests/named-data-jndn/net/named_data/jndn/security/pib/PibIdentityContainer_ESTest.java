/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:34:42 GMT 2022
 */

package net.named_data.jndn.security.pib;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import net.named_data.jndn.KeyLocator;
import net.named_data.jndn.Name;
import net.named_data.jndn.Sha256WithEcdsaSignature;
import net.named_data.jndn.security.pib.PibIdentity;
import net.named_data.jndn.security.pib.PibIdentityContainer;
import net.named_data.jndn.security.pib.PibImpl;
import net.named_data.jndn.security.pib.PibMemory;
import net.named_data.jndn.security.pib.detail.PibIdentityImpl;
import net.named_data.jndn.security.v2.CertificateV2;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PibIdentityContainer_ESTest extends PibIdentityContainer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityContainer pibIdentityContainer0 = new PibIdentityContainer(pibMemory0);
      KeyLocator keyLocator0 = new KeyLocator();
      Name name0 = keyLocator0.getKeyName();
      pibMemory0.setDefaultIdentity(name0);
      PibIdentity pibIdentity0 = pibIdentityContainer0.get(name0);
      assertNotNull(pibIdentity0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityContainer pibIdentityContainer0 = new PibIdentityContainer(pibMemory0);
      Name name0 = new Name("");
      pibIdentityContainer0.add(name0);
      int int0 = pibIdentityContainer0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityContainer pibIdentityContainer0 = new PibIdentityContainer(pibMemory0);
      KeyLocator keyLocator0 = new KeyLocator();
      Name name0 = keyLocator0.getKeyName();
      pibMemory0.setDefaultIdentity(name0);
      boolean boolean0 = pibIdentityContainer0.isConsistent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityContainer pibIdentityContainer0 = new PibIdentityContainer(pibMemory0);
      Name.Component[] name_ComponentArray0 = new Name.Component[2];
      Name.Component name_Component0 = CertificateV2.KEY_COMPONENT;
      name_ComponentArray0[0] = name_Component0;
      name_ComponentArray0[1] = name_ComponentArray0[0];
      Name name0 = new Name(name_ComponentArray0);
      pibIdentityContainer0.add(name0);
      HashMap<Name, PibIdentityImpl> hashMap0 = pibIdentityContainer0.getIdentities_();
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityContainer pibIdentityContainer0 = new PibIdentityContainer(pibMemory0);
      Name name0 = new Name();
      pibIdentityContainer0.add(name0);
      // Undeclared exception!
      try { 
        pibIdentityContainer0.remove((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.pib.PibMemory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityContainer pibIdentityContainer0 = new PibIdentityContainer(pibMemory0);
      // Undeclared exception!
      try { 
        pibIdentityContainer0.get((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      Name name0 = new Name("/AGqZP9{>]IQF");
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(28);
      pibMemory0.addKey(name0, name0, byteBuffer0);
      PibIdentityContainer pibIdentityContainer0 = new PibIdentityContainer(pibMemory0);
      // Undeclared exception!
      try { 
        pibIdentityContainer0.get(name0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key name `/AGqZP9%7B%3E%5DIQF` does not follow the naming conventions
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityContainer pibIdentityContainer0 = new PibIdentityContainer(pibMemory0);
      // Undeclared exception!
      try { 
        pibIdentityContainer0.add((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityContainer pibIdentityContainer0 = new PibIdentityContainer(pibMemory0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        pibIdentityContainer0.add(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.Name$Component (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @11f9b2d6)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityContainer pibIdentityContainer0 = new PibIdentityContainer(pibMemory0);
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator0 = KeyLocator.getFromSignature(sha256WithEcdsaSignature0);
      Name name0 = keyLocator0.getKeyName();
      PibIdentity pibIdentity0 = pibIdentityContainer0.add(name0);
      PibIdentity pibIdentity1 = pibIdentityContainer0.get(name0);
      assertNotSame(pibIdentity1, pibIdentity0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityContainer pibIdentityContainer0 = new PibIdentityContainer(pibMemory0);
      KeyLocator keyLocator0 = new KeyLocator();
      Name name0 = keyLocator0.getKeyName();
      try { 
        pibIdentityContainer0.get(name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Identity / does not exist
         //
         verifyException("net.named_data.jndn.security.pib.detail.PibIdentityImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PibIdentityContainer pibIdentityContainer0 = null;
      try {
        pibIdentityContainer0 = new PibIdentityContainer((PibImpl) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // The pibImpl is null
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      KeyLocator keyLocator0 = new KeyLocator();
      Name name0 = keyLocator0.getKeyName();
      pibMemory0.addKey(name0, name0, (ByteBuffer) null);
      PibIdentityContainer pibIdentityContainer0 = new PibIdentityContainer(pibMemory0);
      // Undeclared exception!
      try { 
        pibIdentityContainer0.add(name0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key name `/` does not follow the naming conventions
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityContainer pibIdentityContainer0 = new PibIdentityContainer(pibMemory0);
      int int0 = pibIdentityContainer0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityContainer pibIdentityContainer0 = new PibIdentityContainer(pibMemory0);
      pibIdentityContainer0.reset();
      assertEquals(0, pibIdentityContainer0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityContainer pibIdentityContainer0 = new PibIdentityContainer(pibMemory0);
      HashMap<Name, PibIdentityImpl> hashMap0 = pibIdentityContainer0.getIdentities_();
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityContainer pibIdentityContainer0 = new PibIdentityContainer(pibMemory0);
      pibIdentityContainer0.remove((Name) null);
      assertEquals(0, pibIdentityContainer0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityContainer pibIdentityContainer0 = new PibIdentityContainer(pibMemory0);
      boolean boolean0 = pibIdentityContainer0.isConsistent();
      assertTrue(boolean0);
  }
}
