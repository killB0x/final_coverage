/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:23:27 GMT 2022
 */

package net.named_data.jndn.security.pib;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import net.named_data.jndn.Name;
import net.named_data.jndn.security.pib.PibKey;
import net.named_data.jndn.security.pib.detail.PibKeyImpl;
import net.named_data.jndn.security.v2.CertificateV2;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PibKey_ESTest extends PibKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) null);
      Name name0 = new Name(arrayList0);
      Name name1 = name0.appendSegment(0L);
      boolean boolean0 = PibKey.isValidKeyName(name1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        PibKey.isValidKeyName((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        PibKey.extractIdentityFromKeyName((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        PibKey.extractIdentityFromKeyName(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.Name$Component (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @5ccca123)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = arrayList0.add((Object) null);
      Name name0 = new Name(arrayList0);
      Name name1 = PibKey.constructKeyName(name0, (Name.Component) null);
      boolean boolean1 = PibKey.isValidKeyName(name1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        PibKey.extractIdentityFromKeyName(name0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key name `/` does not follow the naming conventions
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) null);
      Name name0 = new Name(arrayList0);
      Name name1 = name0.appendSegment(0L);
      name1.appendSegment(43L);
      boolean boolean0 = PibKey.isValidKeyName(name0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Name name0 = new Name("JAVAX");
      Name.Component name_Component0 = new Name.Component();
      Name name1 = PibKey.constructKeyName(name0, name_Component0);
      assertEquals(3, name1.size());
      
      Name name2 = PibKey.extractIdentityFromKeyName(name1);
      assertEquals(1, name2.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PibKey pibKey0 = new PibKey((PibKeyImpl) null);
      CertificateV2 certificateV2_0 = new CertificateV2();
      // Undeclared exception!
      try { 
        pibKey0.setDefaultCertificate_(certificateV2_0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid key instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PibKey pibKey0 = new PibKey((PibKeyImpl) null);
      // Undeclared exception!
      try { 
        pibKey0.getKeyType();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid key instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PibKey pibKey0 = new PibKey((PibKeyImpl) null);
      // Undeclared exception!
      try { 
        pibKey0.addCertificate_((CertificateV2) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid key instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PibKey pibKey0 = new PibKey((PibKeyImpl) null);
      // Undeclared exception!
      try { 
        pibKey0.removeCertificate_((Name) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid key instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PibKey pibKey0 = new PibKey((PibKeyImpl) null);
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        pibKey0.getCertificate(name0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid key instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PibKey pibKey0 = new PibKey((PibKeyImpl) null);
      // Undeclared exception!
      try { 
        pibKey0.getDefaultCertificate();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid key instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PibKey pibKey0 = new PibKey((PibKeyImpl) null);
      // Undeclared exception!
      try { 
        pibKey0.getIdentityName();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid key instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PibKey pibKey0 = new PibKey((PibKeyImpl) null);
      // Undeclared exception!
      try { 
        pibKey0.getPublicKey();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid key instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PibKey pibKey0 = new PibKey((PibKeyImpl) null);
      // Undeclared exception!
      try { 
        pibKey0.getCertificates_();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid key instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PibKey pibKey0 = new PibKey((PibKeyImpl) null);
      // Undeclared exception!
      try { 
        pibKey0.getName();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid key instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PibKey pibKey0 = new PibKey((PibKeyImpl) null);
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        pibKey0.setDefaultCertificate_(name0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid key instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        PibKey.constructKeyName((Name) null, (Name.Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }
}
