/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:32:10 GMT 2022
 */

package net.named_data.jndn.security.v2.validator_config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import net.named_data.jndn.Interest;
import net.named_data.jndn.Name;
import net.named_data.jndn.security.v2.InterestValidationFailureCallback;
import net.named_data.jndn.security.v2.InterestValidationState;
import net.named_data.jndn.security.v2.InterestValidationSuccessCallback;
import net.named_data.jndn.security.v2.ValidationState;
import net.named_data.jndn.security.v2.validator_config.ConfigNameRelation;
import net.named_data.jndn.security.v2.validator_config.ConfigNameRelationChecker;
import net.named_data.jndn.security.v2.validator_config.ConfigRelationNameFilter;
import net.named_data.jndn.security.v2.validator_config.ConfigRule;
import net.named_data.jndn.util.BoostInfoTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConfigRule_ESTest extends ConfigRule_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BoostInfoTree boostInfoTree0 = new BoostInfoTree();
      boostInfoTree0.createSubtree("for");
      boostInfoTree0.createSubtree("id", "id");
      try { 
        ConfigRule.create(boostInfoTree0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized <rule.for>:  in rule: id
         //
         verifyException("net.named_data.jndn.security.v2.validator_config.ConfigRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConfigRule configRule0 = new ConfigRule("", false);
      Name name0 = new Name();
      Name.Component name_Component0 = Name.Component.fromSegmentOffset(1);
      Name.Component[] name_ComponentArray0 = new Name.Component[1];
      name_ComponentArray0[0] = name_Component0;
      Name name1 = new Name(name_ComponentArray0);
      ConfigNameRelation.Relation configNameRelation_Relation0 = ConfigNameRelation.Relation.EQUAL;
      ConfigNameRelationChecker configNameRelationChecker0 = new ConfigNameRelationChecker(name0, configNameRelation_Relation0);
      configRule0.addChecker(configNameRelationChecker0);
      // Undeclared exception!
      try { 
        configRule0.check(false, name1, name0, (ValidationState) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key name `/` does not follow the naming conventions
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConfigRule configRule0 = new ConfigRule("", false);
      Name name0 = new Name();
      Name.Component name_Component0 = Name.Component.fromSegmentOffset(1);
      Name.Component[] name_ComponentArray0 = new Name.Component[1];
      name_ComponentArray0[0] = name_Component0;
      Name name1 = new Name(name_ComponentArray0);
      boolean boolean0 = configRule0.check(false, name1, name0, (ValidationState) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConfigRule configRule0 = new ConfigRule("", false);
      Name name0 = new Name();
      Name.Component[] name_ComponentArray0 = new Name.Component[1];
      Name name1 = new Name(name_ComponentArray0);
      // Undeclared exception!
      try { 
        configRule0.check(false, name1, name0, (ValidationState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConfigRule configRule0 = new ConfigRule("No <rule.checker> is specified in rule: ", true);
      boolean boolean0 = configRule0.getIsForInterest();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConfigRule configRule0 = new ConfigRule((String) null, false);
      String string0 = configRule0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConfigRule configRule0 = new ConfigRule("base64Encode: Error invoking method: ", false);
      String string0 = configRule0.getId();
      assertEquals("base64Encode: Error invoking method: ", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConfigRule configRule0 = new ConfigRule("id", true);
      // Undeclared exception!
      try { 
        configRule0.match(true, (Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.validator_config.ConfigRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConfigRule configRule0 = new ConfigRule("n~k28m{:*", true);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        configRule0.match(true, name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.Name$Component (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @4c120e3f)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConfigRule.create((BoostInfoTree) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.validator_config.ConfigRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BoostInfoTree boostInfoTree0 = new BoostInfoTree();
      ConfigRule configRule0 = new ConfigRule("", true);
      ArrayList<BoostInfoTree> arrayList0 = boostInfoTree0.get("");
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        configRule0.check(true, name0, name0, (ValidationState) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.util.BoostInfoTree cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.util.BoostInfoTree and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @4c120e3f)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BoostInfoTree boostInfoTree0 = new BoostInfoTree();
      boostInfoTree0.createSubtree("id", "id");
      BoostInfoTree boostInfoTree1 = new BoostInfoTree("data");
      boostInfoTree0.addSubtree("for", boostInfoTree1);
      try { 
        ConfigRule.create(boostInfoTree0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No <rule.checker> is specified in rule: id
         //
         verifyException("net.named_data.jndn.security.v2.validator_config.ConfigRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BoostInfoTree boostInfoTree0 = new BoostInfoTree("net.named_data.jndn.Signature");
      try { 
        ConfigRule.create(boostInfoTree0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expecting <rule.id>
         //
         verifyException("net.named_data.jndn.security.v2.validator_config.ConfigRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BoostInfoTree boostInfoTree0 = new BoostInfoTree();
      boostInfoTree0.createSubtree("id", "id");
      try { 
        ConfigRule.create(boostInfoTree0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expecting <rule.for> in rule: id
         //
         verifyException("net.named_data.jndn.security.v2.validator_config.ConfigRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConfigRule configRule0 = new ConfigRule("?kx'r/&)St}FLg", false);
      Name name0 = new Name();
      try { 
        configRule0.check(true, name0, name0, (ValidationState) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid packet type supplied ( interest != data)
         //
         verifyException("net.named_data.jndn.security.v2.validator_config.ConfigRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConfigRule configRule0 = new ConfigRule("", true);
      Name name0 = new Name("");
      try { 
        configRule0.check(false, name0, name0, (ValidationState) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid packet type supplied ( data != interest)
         //
         verifyException("net.named_data.jndn.security.v2.validator_config.ConfigRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BoostInfoTree boostInfoTree0 = new BoostInfoTree();
      ArrayList<BoostInfoTree> arrayList0 = boostInfoTree0.get("  Key Locator: ");
      Name name0 = new Name(arrayList0);
      ConfigRule configRule0 = new ConfigRule("qu%", true);
      Interest interest0 = new Interest(name0);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      boolean boolean0 = configRule0.check(true, name0, name0, interestValidationState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConfigRule configRule0 = new ConfigRule("Expected <filter.type>", false);
      Name name0 = new Name();
      ConfigNameRelation.Relation configNameRelation_Relation0 = ConfigNameRelation.Relation.EQUAL;
      ConfigRelationNameFilter configRelationNameFilter0 = new ConfigRelationNameFilter(name0, configNameRelation_Relation0);
      configRule0.addFilter(configRelationNameFilter0);
      boolean boolean0 = configRule0.match(false, name0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConfigRule configRule0 = new ConfigRule("}s&", true);
      Name name0 = new Name("}s&");
      try { 
        configRule0.match(false, name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid packet type supplied ( data != interest)
         //
         verifyException("net.named_data.jndn.security.v2.validator_config.ConfigRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConfigRule configRule0 = new ConfigRule((String) null, false);
      Name name0 = new Name();
      try { 
        configRule0.match(true, name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid packet type supplied ( interest != data)
         //
         verifyException("net.named_data.jndn.security.v2.validator_config.ConfigRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BoostInfoTree boostInfoTree0 = new BoostInfoTree();
      ArrayList<BoostInfoTree> arrayList0 = boostInfoTree0.get("  Key Locator: ");
      Name name0 = new Name(arrayList0);
      ConfigRule configRule0 = new ConfigRule("qu%", true);
      boolean boolean0 = configRule0.match(true, name0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BoostInfoTree boostInfoTree0 = new BoostInfoTree();
      ConfigNameRelation.Relation configNameRelation_Relation0 = ConfigNameRelation.Relation.IS_PREFIX_OF;
      ArrayList<BoostInfoTree> arrayList0 = boostInfoTree0.get("  Key Locator: ");
      Name name0 = new Name(arrayList0);
      ConfigRule configRule0 = new ConfigRule("qu%", true);
      ConfigNameRelationChecker configNameRelationChecker0 = new ConfigNameRelationChecker(name0, configNameRelation_Relation0);
      configRule0.addChecker(configNameRelationChecker0);
      Interest interest0 = new Interest(name0);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      boolean boolean0 = configRule0.check(true, name0, name0, interestValidationState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BoostInfoTree boostInfoTree0 = new BoostInfoTree();
      ConfigNameRelation.Relation configNameRelation_Relation0 = ConfigNameRelation.Relation.IS_PREFIX_OF;
      ArrayList<BoostInfoTree> arrayList0 = boostInfoTree0.get("  Key Locator: ");
      Name name0 = new Name(arrayList0);
      ConfigRelationNameFilter configRelationNameFilter0 = new ConfigRelationNameFilter(name0, configNameRelation_Relation0);
      ConfigRule configRule0 = new ConfigRule("qu%", true);
      configRule0.addFilter(configRelationNameFilter0);
      assertTrue(configRule0.getIsForInterest());
      
      boolean boolean0 = configRule0.match(true, name0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConfigRule configRule0 = new ConfigRule("", false);
      configRule0.getId();
      assertFalse(configRule0.getIsForInterest());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConfigRule configRule0 = new ConfigRule("lNAYd9m:.", false);
      boolean boolean0 = configRule0.getIsForInterest();
      assertFalse(boolean0);
  }
}
