/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:46:14 GMT 2022
 */

package net.named_data.jndn.security.v2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import net.named_data.jndn.Face;
import net.named_data.jndn.Interest;
import net.named_data.jndn.security.v2.CertificateFetcher;
import net.named_data.jndn.security.v2.CertificateFetcherFromNetwork;
import net.named_data.jndn.security.v2.CertificateRequest;
import net.named_data.jndn.security.v2.CertificateStorage;
import net.named_data.jndn.security.v2.ValidationState;
import net.named_data.jndn.transport.AsyncTcpTransport;
import net.named_data.jndn.transport.TcpTransport;
import net.named_data.jndn.transport.Transport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CertificateFetcher_ESTest extends CertificateFetcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face((Transport) null, transport_ConnectionInfo0);
      CertificateFetcherFromNetwork certificateFetcherFromNetwork0 = new CertificateFetcherFromNetwork(face0);
      CertificateStorage certificateStorage0 = new CertificateStorage();
      certificateFetcherFromNetwork0.setCertificateStorage(certificateStorage0);
      CertificateRequest certificateRequest0 = new CertificateRequest();
      // Undeclared exception!
      try { 
        certificateFetcherFromNetwork0.fetch(certificateRequest0, (ValidationState) null, (CertificateFetcher.ValidationContinuation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport(scheduledThreadPoolExecutor0);
      Face face0 = new Face(asyncTcpTransport0, transport_ConnectionInfo0);
      CertificateFetcherFromNetwork certificateFetcherFromNetwork0 = new CertificateFetcherFromNetwork(face0);
      CertificateStorage certificateStorage0 = new CertificateStorage();
      certificateFetcherFromNetwork0.setCertificateStorage(certificateStorage0);
      CertificateRequest certificateRequest0 = new CertificateRequest();
      // Undeclared exception!
      try { 
        certificateFetcherFromNetwork0.fetch(certificateRequest0, (ValidationState) null, (CertificateFetcher.ValidationContinuation) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.channels.spi.AsynchronousChannelProvider$ProviderHolder
         //
         verifyException("java.nio.channels.spi.AsynchronousChannelProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Face face0 = new Face((String) null, 322);
      CertificateFetcherFromNetwork certificateFetcherFromNetwork0 = new CertificateFetcherFromNetwork(face0);
      CertificateStorage certificateStorage0 = new CertificateStorage();
      certificateFetcherFromNetwork0.setCertificateStorage(certificateStorage0);
      CertificateRequest certificateRequest0 = new CertificateRequest();
      // Undeclared exception!
      try { 
        certificateFetcherFromNetwork0.fetch(certificateRequest0, (ValidationState) null, (CertificateFetcher.ValidationContinuation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(tcpTransport0, transport_ConnectionInfo0);
      CertificateFetcherFromNetwork certificateFetcherFromNetwork0 = new CertificateFetcherFromNetwork(face0);
      CertificateStorage certificateStorage0 = new CertificateStorage();
      certificateFetcherFromNetwork0.setCertificateStorage(certificateStorage0);
      CertificateRequest certificateRequest0 = new CertificateRequest();
      // Undeclared exception!
      try { 
        certificateFetcherFromNetwork0.fetch(certificateRequest0, (ValidationState) null, (CertificateFetcher.ValidationContinuation) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.TcpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.TcpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6ef5df2a)
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(tcpTransport0, transport_ConnectionInfo0);
      CertificateFetcherFromNetwork certificateFetcherFromNetwork0 = new CertificateFetcherFromNetwork(face0);
      Interest interest0 = new Interest("net.named_data.jndn.security.v2.CertificateFetcher$1");
      CertificateRequest certificateRequest0 = new CertificateRequest(interest0);
      CertificateFetcher.ValidationContinuation certificateFetcher_ValidationContinuation0 = mock(CertificateFetcher.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        certificateFetcherFromNetwork0.fetch(certificateRequest0, (ValidationState) null, certificateFetcher_ValidationContinuation0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // CertificateFetcher.fetch: You must first call setCertificateStorage
         //
         verifyException("net.named_data.jndn.security.v2.CertificateFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CertificateFetcherFromNetwork certificateFetcherFromNetwork0 = new CertificateFetcherFromNetwork((Face) null);
      CertificateStorage certificateStorage0 = new CertificateStorage();
      certificateFetcherFromNetwork0.setCertificateStorage(certificateStorage0);
      CertificateRequest certificateRequest0 = new CertificateRequest();
      // Undeclared exception!
      try { 
        certificateFetcherFromNetwork0.fetch(certificateRequest0, (ValidationState) null, (CertificateFetcher.ValidationContinuation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.CertificateFetcherFromNetwork", e);
      }
  }
}
