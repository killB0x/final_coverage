/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:21:37 GMT 2022
 */

package net.named_data.jndn.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.HmacWithSha256Signature;
import net.named_data.jndn.Sha256WithEcdsaSignature;
import net.named_data.jndn.Sha256WithRsaSignature;
import net.named_data.jndn.security.ValidityPeriod;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValidityPeriod_ESTest extends ValidityPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      ValidityPeriod validityPeriod0 = sha256WithEcdsaSignature0.getValidityPeriod();
      validityPeriod0.setPeriod(0.0, 0.0);
      boolean boolean0 = validityPeriod0.isValid(0.0);
      assertEquals(1L, validityPeriod0.getChangeCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ValidityPeriod validityPeriod0 = new ValidityPeriod(3648L, (-1.0));
      ValidityPeriod validityPeriod1 = new ValidityPeriod(3648L, 3648L);
      boolean boolean0 = validityPeriod0.equals(validityPeriod1);
      assertEquals(4000.0, validityPeriod0.getNotBefore(), 0.01);
      assertFalse(boolean0);
      assertFalse(validityPeriod1.equals((Object)validityPeriod0));
      assertEquals(1L, validityPeriod1.getChangeCount());
      assertEquals(3000.0, validityPeriod1.getNotAfter(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      ValidityPeriod validityPeriod0 = sha256WithEcdsaSignature0.getValidityPeriod();
      ValidityPeriod validityPeriod1 = validityPeriod0.setPeriod(0.0, 0.0);
      double double0 = validityPeriod1.getNotBefore();
      assertEquals(1L, validityPeriod0.getChangeCount());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ValidityPeriod validityPeriod0 = new ValidityPeriod();
      validityPeriod0.setPeriod((-1896.357), (-1896.357));
      double double0 = validityPeriod0.getNotBefore();
      assertEquals(1L, validityPeriod0.getChangeCount());
      assertEquals((-1000.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      ValidityPeriod validityPeriod0 = sha256WithEcdsaSignature0.getValidityPeriod();
      validityPeriod0.setPeriod(32.673245684163, 0.0);
      double double0 = validityPeriod0.getNotAfter();
      assertEquals(1L, validityPeriod0.getChangeCount());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ValidityPeriod validityPeriod0 = new ValidityPeriod();
      validityPeriod0.setPeriod((-3723.579980804), 9000.0);
      double double0 = validityPeriod0.getNotAfter();
      assertEquals(9000.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      ValidityPeriod validityPeriod0 = sha256WithEcdsaSignature0.getValidityPeriod();
      validityPeriod0.setPeriod(0.0, 0.0);
      assertEquals(1L, validityPeriod0.getChangeCount());
      
      ValidityPeriod validityPeriod1 = ValidityPeriod.getFromSignature(sha256WithEcdsaSignature0);
      assertEquals(0.0, validityPeriod1.getNotAfter(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      ValidityPeriod validityPeriod0 = sha256WithEcdsaSignature0.getValidityPeriod();
      validityPeriod0.setPeriod((-1.7976931348623157E308), 1.7976931348623157E308);
      assertEquals(1L, validityPeriod0.getChangeCount());
      
      ValidityPeriod validityPeriod1 = ValidityPeriod.getFromSignature(sha256WithEcdsaSignature0);
      assertEquals((-9.223372036854776E18), validityPeriod1.getNotBefore(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      ValidityPeriod validityPeriod0 = sha256WithRsaSignature0.getValidityPeriod();
      long long0 = validityPeriod0.getChangeCount();
      assertFalse(validityPeriod0.hasPeriod());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ValidityPeriod validityPeriod0 = new ValidityPeriod();
      validityPeriod0.clear();
      long long0 = validityPeriod0.getChangeCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ValidityPeriod validityPeriod0 = new ValidityPeriod();
      // Undeclared exception!
      try { 
        validityPeriod0.equals((ValidityPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.ValidityPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ValidityPeriod validityPeriod0 = null;
      try {
        validityPeriod0 = new ValidityPeriod((ValidityPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.ValidityPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ValidityPeriod validityPeriod0 = new ValidityPeriod();
      ValidityPeriod validityPeriod1 = validityPeriod0.setPeriod((-3723.579980804), 9000.0);
      boolean boolean0 = validityPeriod1.isValid(1000.0);
      assertEquals(1L, validityPeriod0.getChangeCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      ValidityPeriod validityPeriod0 = sha256WithEcdsaSignature0.getValidityPeriod();
      boolean boolean0 = validityPeriod0.isValid(0.0);
      assertFalse(boolean0);
      assertFalse(validityPeriod0.hasPeriod());
      assertEquals(0L, validityPeriod0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ValidityPeriod validityPeriod0 = new ValidityPeriod();
      validityPeriod0.setPeriod(893.2236516, 893.2236516);
      boolean boolean0 = validityPeriod0.isValid(1000.0);
      assertEquals(1L, validityPeriod0.getChangeCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ValidityPeriod validityPeriod0 = new ValidityPeriod();
      ValidityPeriod validityPeriod1 = new ValidityPeriod((-4003.7506684814007), (-4003.7506684814007));
      boolean boolean0 = validityPeriod0.equals(validityPeriod1);
      assertEquals(1L, validityPeriod1.getChangeCount());
      assertFalse(validityPeriod0.hasPeriod());
      assertEquals(0L, validityPeriod0.getChangeCount());
      assertEquals((-5000.0), validityPeriod1.getNotAfter(), 0.01);
      assertEquals((-4000.0), validityPeriod1.getNotBefore(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      // Undeclared exception!
      try { 
        ValidityPeriod.getFromSignature(hmacWithSha256Signature0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ValidityPeriod.getFromSignature: Signature type does not have a ValidityPeriod
         //
         verifyException("net.named_data.jndn.security.ValidityPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      ValidityPeriod validityPeriod0 = ValidityPeriod.getFromSignature(sha256WithRsaSignature0);
      assertFalse(validityPeriod0.hasPeriod());
      assertEquals(0L, validityPeriod0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      boolean boolean0 = ValidityPeriod.canGetFromSignature(hmacWithSha256Signature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      boolean boolean0 = ValidityPeriod.canGetFromSignature(sha256WithEcdsaSignature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      boolean boolean0 = ValidityPeriod.canGetFromSignature(sha256WithRsaSignature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ValidityPeriod validityPeriod0 = new ValidityPeriod();
      ValidityPeriod validityPeriod1 = validityPeriod0.setPeriod(893.2236516, 893.2236516);
      boolean boolean0 = validityPeriod1.isValid();
      assertEquals(1L, validityPeriod0.getChangeCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      ValidityPeriod validityPeriod0 = sha256WithEcdsaSignature0.getValidityPeriod();
      ValidityPeriod validityPeriod1 = validityPeriod0.setPeriod((-1.7976931348623157E308), 1.7976931348623157E308);
      boolean boolean0 = validityPeriod1.isValid();
      assertEquals(9.223372036854776E18, validityPeriod0.getNotAfter(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ValidityPeriod validityPeriod0 = new ValidityPeriod();
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      boolean boolean0 = validityPeriod0.equals((Object) sha256WithEcdsaSignature0);
      assertFalse(boolean0);
      assertFalse(validityPeriod0.hasPeriod());
      assertEquals(0L, validityPeriod0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ValidityPeriod validityPeriod0 = new ValidityPeriod(1000.0, 1000.0);
      ValidityPeriod validityPeriod1 = new ValidityPeriod(1000.0, (-1923.68));
      boolean boolean0 = validityPeriod0.equals(validityPeriod1);
      assertEquals((-2000.0), validityPeriod1.getNotAfter(), 0.01);
      assertEquals(1000.0, validityPeriod0.getNotAfter(), 0.01);
      assertFalse(validityPeriod1.equals((Object)validityPeriod0));
      assertEquals(1000.0, validityPeriod1.getNotBefore(), 0.01);
      assertEquals(1L, validityPeriod1.getChangeCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      ValidityPeriod validityPeriod0 = sha256WithEcdsaSignature0.getValidityPeriod();
      boolean boolean0 = validityPeriod0.equals(validityPeriod0);
      assertTrue(boolean0);
      assertEquals(0L, validityPeriod0.getChangeCount());
      assertFalse(validityPeriod0.hasPeriod());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ValidityPeriod validityPeriod0 = new ValidityPeriod();
      ValidityPeriod validityPeriod1 = new ValidityPeriod(validityPeriod0);
      validityPeriod0.setPeriod(9000.0, (-3723.579980804));
      boolean boolean0 = validityPeriod0.equals((Object) validityPeriod1);
      assertEquals((-4000.0), validityPeriod0.getNotAfter(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      ValidityPeriod validityPeriod0 = sha256WithEcdsaSignature0.getValidityPeriod();
      boolean boolean0 = validityPeriod0.hasPeriod();
      assertFalse(boolean0);
      assertEquals(0L, validityPeriod0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ValidityPeriod validityPeriod0 = new ValidityPeriod();
      ValidityPeriod validityPeriod1 = validityPeriod0.setPeriod(893.2236516, 893.2236516);
      boolean boolean0 = validityPeriod1.hasPeriod();
      assertEquals(1L, validityPeriod0.getChangeCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      ValidityPeriod validityPeriod0 = sha256WithEcdsaSignature0.getValidityPeriod();
      double double0 = validityPeriod0.getNotAfter();
      assertEquals((-1.7976931348623157E308), double0, 0.01);
      assertFalse(validityPeriod0.hasPeriod());
      assertEquals(0L, validityPeriod0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      ValidityPeriod validityPeriod0 = sha256WithEcdsaSignature0.getValidityPeriod();
      double double0 = validityPeriod0.getNotBefore();
      assertFalse(validityPeriod0.hasPeriod());
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(0L, validityPeriod0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ValidityPeriod validityPeriod0 = new ValidityPeriod(1.0, 1.0);
      boolean boolean0 = validityPeriod0.equals((Object) validityPeriod0);
      assertEquals(1L, validityPeriod0.getChangeCount());
      assertTrue(boolean0);
      assertEquals(1000.0, validityPeriod0.getNotBefore(), 0.01);
      assertEquals(0.0, validityPeriod0.getNotAfter(), 0.01);
  }
}
