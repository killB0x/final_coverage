/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:57:27 GMT 2022
 */

package net.named_data.jndn.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import net.named_data.jndn.Data;
import net.named_data.jndn.HmacWithSha256Signature;
import net.named_data.jndn.Interest;
import net.named_data.jndn.KeyLocator;
import net.named_data.jndn.MetaInfo;
import net.named_data.jndn.Name;
import net.named_data.jndn.Sha256WithEcdsaSignature;
import net.named_data.jndn.encoding.WireFormat;
import net.named_data.jndn.lp.LpPacket;
import net.named_data.jndn.security.CommandInterestPreparer;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CommandInterestPreparer_ESTest extends CommandInterestPreparer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CommandInterestPreparer commandInterestPreparer0 = new CommandInterestPreparer();
      Interest interest0 = new Interest();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      arrayList0.containsAll(arrayList1);
      Data data0 = new Data(name0);
      wireFormat0.encodeData(data0);
      WireFormat.setDefaultWireFormat(wireFormat0);
      Interest interest1 = interest0.setInterestLifetimeMilliseconds(0.0);
      WireFormat wireFormat1 = new WireFormat();
      interest0.getLinkWireEncoding();
      interest0.unsetLink();
      Data data1 = new Data();
      Data data2 = new Data(data1);
      interest0.matchesData(data2);
      commandInterestPreparer0.prepareCommandInterestName(interest0, wireFormat1);
      commandInterestPreparer0.prepareCommandInterestName(interest0);
      commandInterestPreparer0.setNowOffsetMilliseconds_((-5420.92759454929));
      commandInterestPreparer0.setNowOffsetMilliseconds_((-5420.92759454929));
      commandInterestPreparer0.prepareCommandInterestName(interest1, wireFormat1);
      interest1.getLinkWireEncoding();
      // Undeclared exception!
      commandInterestPreparer0.prepareCommandInterestName(interest1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CommandInterestPreparer commandInterestPreparer0 = new CommandInterestPreparer();
      Interest interest0 = null;
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      WireFormat.setDefaultWireFormat(wireFormat0);
      // Undeclared exception!
      try { 
        commandInterestPreparer0.prepareCommandInterestName((Interest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CommandInterestPreparer commandInterestPreparer0 = new CommandInterestPreparer();
      KeyLocator keyLocator0 = new KeyLocator();
      Name name0 = keyLocator0.getKeyName();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      WireFormat.setDefaultWireFormat(wireFormat0);
      Interest interest0 = new Interest(name0, 0.0);
      commandInterestPreparer0.prepareCommandInterestName(interest0);
      keyLocator0.clear();
      commandInterestPreparer0.setNowOffsetMilliseconds_((-1.7976931348623157E308));
      interest0.getIncomingFaceId();
      WireFormat wireFormat1 = WireFormat.getDefaultWireFormat();
      Data data0 = new Data();
      Blob blob0 = wireFormat1.encodeData(data0);
      interest0.setParameters(blob0);
      // Undeclared exception!
      commandInterestPreparer0.prepareCommandInterestName(interest0, wireFormat1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CommandInterestPreparer commandInterestPreparer0 = new CommandInterestPreparer();
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      KeyLocator keyLocator0 = hmacWithSha256Signature0.getKeyLocator();
      Name name0 = keyLocator0.getKeyName();
      Interest interest0 = new Interest(name0);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      commandInterestPreparer0.prepareCommandInterestName(interest0, wireFormat0);
      assertEquals((-1), interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CommandInterestPreparer commandInterestPreparer0 = new CommandInterestPreparer();
      commandInterestPreparer0.setNowOffsetMilliseconds_((-472.46877885));
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Name name0 = new Name(arrayList0);
      name0.toUri();
      Interest interest0 = new Interest(name0, (-1810.825704536));
      commandInterestPreparer0.prepareCommandInterestName(interest0);
      assertEquals((-1), interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CommandInterestPreparer commandInterestPreparer0 = new CommandInterestPreparer();
      commandInterestPreparer0.setNowOffsetMilliseconds_((-1428.95596056));
      Interest interest0 = new Interest("{b[jjt/DjV");
      interest0.setCanBePrefix(false);
      commandInterestPreparer0.prepareCommandInterestName(interest0);
      Interest interest1 = null;
      WireFormat wireFormat0 = new WireFormat();
      // Undeclared exception!
      try { 
        interest0.wireEncode(wireFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // encodeInterest is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CommandInterestPreparer commandInterestPreparer0 = new CommandInterestPreparer();
      Name.Component[] name_ComponentArray0 = new Name.Component[2];
      byte[] byteArray0 = new byte[0];
      Name.Component name_Component0 = new Name.Component(byteArray0);
      name_ComponentArray0[0] = name_Component0;
      MetaInfo metaInfo0 = new MetaInfo();
      MetaInfo metaInfo1 = new MetaInfo(metaInfo0);
      Name.Component name_Component1 = metaInfo1.getFinalBlockId();
      name_ComponentArray0[1] = name_Component1;
      Name name0 = new Name(name_ComponentArray0);
      Interest interest0 = new Interest(name0);
      commandInterestPreparer0.prepareCommandInterestName(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CommandInterestPreparer commandInterestPreparer0 = new CommandInterestPreparer();
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator0 = KeyLocator.getFromSignature(sha256WithEcdsaSignature0);
      KeyLocator keyLocator1 = new KeyLocator(keyLocator0);
      keyLocator1.clear();
      keyLocator1.getKeyName();
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        Name.fromHex(":T#CC@", 110, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-55 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CommandInterestPreparer commandInterestPreparer0 = new CommandInterestPreparer();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      Interest interest0 = new Interest();
      interest0.wireEncode(wireFormat0);
      commandInterestPreparer0.prepareCommandInterestName(interest0);
      assertFalse(interest0.getDidSetCanBePrefix_());
  }
}
