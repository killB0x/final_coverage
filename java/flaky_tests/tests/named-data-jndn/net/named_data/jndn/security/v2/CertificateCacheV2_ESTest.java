/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:59:45 GMT 2022
 */

package net.named_data.jndn.security.v2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import net.named_data.jndn.ComponentType;
import net.named_data.jndn.DigestSha256Signature;
import net.named_data.jndn.Interest;
import net.named_data.jndn.Name;
import net.named_data.jndn.security.v2.CertificateCacheV2;
import net.named_data.jndn.security.v2.CertificateV2;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CertificateCacheV2_ESTest extends CertificateCacheV2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2();
      Interest interest0 = new Interest();
      interest0.setChildSelector(2935);
      certificateCacheV2_0.find(interest0);
      assertEquals(3600000.0, certificateCacheV2_0.getDefaultLifetime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2((-1.7976931348623157E308));
      certificateCacheV2_0.setNowOffsetMilliseconds_((-1.7976931348623157E308));
      CertificateV2 certificateV2_0 = new CertificateV2();
      try { 
        certificateCacheV2_0.insert(certificateV2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The Data Name does not follow the certificate naming convention
         //
         verifyException("net.named_data.jndn.security.v2.CertificateV2", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2();
      // Undeclared exception!
      try { 
        certificateCacheV2_0.insert((CertificateV2) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.CertificateCacheV2", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2();
      CertificateV2 certificateV2_0 = new CertificateV2();
      DigestSha256Signature digestSha256Signature0 = new DigestSha256Signature();
      certificateV2_0.setSignature(digestSha256Signature0);
      // Undeclared exception!
      try { 
        certificateCacheV2_0.insert(certificateV2_0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The SignatureInfo does not have a ValidityPeriod
         //
         verifyException("net.named_data.jndn.security.v2.CertificateV2", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2();
      // Undeclared exception!
      try { 
        certificateCacheV2_0.find((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.CertificateCacheV2", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        certificateCacheV2_0.find(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.Name$Component (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @3e1781a)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2();
      // Undeclared exception!
      try { 
        certificateCacheV2_0.find((Interest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.CertificateCacheV2", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0, (-3686.207991004966));
      // Undeclared exception!
      try { 
        certificateCacheV2_0.find(interest0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.Name$Component (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @3e1781a)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2();
      // Undeclared exception!
      try { 
        certificateCacheV2_0.deleteCertificate((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = CertificateCacheV2.getDefaultLifetime();
      assertEquals(3600000.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2();
      Name name0 = new Name("net.named_data.jndn.Sha256WithRsaSignature");
      int[] intArray0 = new int[6];
      Blob blob0 = new Blob(intArray0);
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      name0.append(blob0, componentType0, (-3));
      Interest interest0 = new Interest(name0);
      certificateCacheV2_0.find(interest0);
      assertEquals(3600000.0, certificateCacheV2_0.getDefaultLifetime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2();
      Name name0 = new Name("T+{b:*{K^GN^mD");
      Interest interest0 = new Interest(name0, 0.0);
      interest0.setChildSelector(0);
      certificateCacheV2_0.find(interest0);
      assertEquals(3600000.0, certificateCacheV2_0.getDefaultLifetime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2();
      Name name0 = new Name();
      byte[] byteArray0 = new byte[6];
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      name0.append(byteArray0, componentType0);
      certificateCacheV2_0.find(name0);
      assertEquals(3600000.0, certificateCacheV2_0.getDefaultLifetime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2();
      Name name0 = new Name("T+{b:*{K^GN^mD");
      certificateCacheV2_0.find(name0);
      assertEquals(3600000.0, certificateCacheV2_0.getDefaultLifetime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Name name0 = new Name();
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2();
      certificateCacheV2_0.find(name0);
      assertEquals(3600000.0, certificateCacheV2_0.getDefaultLifetime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CertificateV2 certificateV2_0 = new CertificateV2();
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2((-1));
      certificateCacheV2_0.insert(certificateV2_0);
      assertEquals(3600000.0, certificateCacheV2_0.getDefaultLifetime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2();
      certificateCacheV2_0.setNowOffsetMilliseconds_((-1.7976931348623157E308));
      CertificateV2 certificateV2_0 = new CertificateV2();
      try { 
        certificateCacheV2_0.insert(certificateV2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The Data Name does not follow the certificate naming convention
         //
         verifyException("net.named_data.jndn.security.v2.CertificateV2", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2();
      certificateCacheV2_0.setNowOffsetMilliseconds_(1.7976931348623157E308);
      Interest interest0 = new Interest();
      certificateCacheV2_0.find(interest0);
      assertEquals(3600000.0, certificateCacheV2_0.getDefaultLifetime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2();
      Name name0 = new Name("Not adding {0}: already expired at {1}");
      certificateCacheV2_0.deleteCertificate(name0);
      assertEquals(3600000.0, certificateCacheV2_0.getDefaultLifetime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2();
      certificateCacheV2_0.clear();
      assertEquals(3600000.0, certificateCacheV2_0.getDefaultLifetime(), 0.01);
  }
}
