/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:55:36 GMT 2022
 */

package net.named_data.jndn.security.v2.validator_config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.ComponentType;
import net.named_data.jndn.Interest;
import net.named_data.jndn.KeyLocator;
import net.named_data.jndn.Name;
import net.named_data.jndn.Sha256WithEcdsaSignature;
import net.named_data.jndn.encoding.WireFormat;
import net.named_data.jndn.security.v2.CertificateV2;
import net.named_data.jndn.security.v2.DataValidationFailureCallback;
import net.named_data.jndn.security.v2.DataValidationState;
import net.named_data.jndn.security.v2.DataValidationSuccessCallback;
import net.named_data.jndn.security.v2.InterestValidationFailureCallback;
import net.named_data.jndn.security.v2.InterestValidationState;
import net.named_data.jndn.security.v2.InterestValidationSuccessCallback;
import net.named_data.jndn.security.v2.ValidationState;
import net.named_data.jndn.security.v2.validator_config.ConfigChecker;
import net.named_data.jndn.security.v2.validator_config.ConfigNameRelation;
import net.named_data.jndn.security.v2.validator_config.ConfigNameRelationChecker;
import net.named_data.jndn.security.v2.validator_config.ConfigRegexChecker;
import net.named_data.jndn.util.BoostInfoTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConfigChecker_ESTest extends ConfigChecker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Name name0 = new Name("");
      ConfigNameRelation.Relation configNameRelation_Relation0 = ConfigNameRelation.Relation.EQUAL;
      ConfigNameRelationChecker configNameRelationChecker0 = new ConfigNameRelationChecker(name0, configNameRelation_Relation0);
      Interest interest0 = new Interest();
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      // Undeclared exception!
      try { 
        configNameRelationChecker0.check(false, name0, (Name) null, interestValidationState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Name name0 = new Name("");
      byte[] byteArray0 = new byte[4];
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      Name name1 = name0.append(byteArray0, componentType0);
      ConfigNameRelation.Relation configNameRelation_Relation0 = ConfigNameRelation.Relation.EQUAL;
      ConfigNameRelationChecker configNameRelationChecker0 = new ConfigNameRelationChecker(name0, configNameRelation_Relation0);
      name1.append(byteArray0, componentType0);
      Interest interest0 = new Interest();
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator0 = sha256WithEcdsaSignature0.getKeyLocator();
      Name name2 = keyLocator0.getKeyName();
      // Undeclared exception!
      try { 
        configNameRelationChecker0.check(true, name1, name2, interestValidationState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key name `/` does not follow the naming conventions
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Name name0 = new Name("");
      ConfigNameRelation.Relation configNameRelation_Relation0 = ConfigNameRelation.Relation.IS_PREFIX_OF;
      ConfigNameRelationChecker configNameRelationChecker0 = new ConfigNameRelationChecker(name0, configNameRelation_Relation0);
      Interest interest0 = new Interest();
      Name.Component[] name_ComponentArray0 = new Name.Component[3];
      Name name1 = new Name(name_ComponentArray0);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      // Undeclared exception!
      try { 
        configNameRelationChecker0.check(true, name1, name1, interestValidationState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Name name0 = new Name("");
      ConfigNameRelation.Relation configNameRelation_Relation0 = ConfigNameRelation.Relation.EQUAL;
      ConfigNameRelationChecker configNameRelationChecker0 = new ConfigNameRelationChecker(name0, configNameRelation_Relation0);
      Interest interest0 = new Interest();
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator0 = sha256WithEcdsaSignature0.getKeyLocator();
      Name name1 = keyLocator0.getKeyName();
      boolean boolean0 = configNameRelationChecker0.check(true, name0, name1, interestValidationState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConfigRegexChecker configRegexChecker0 = new ConfigRegexChecker("<.*>*");
      CertificateV2 certificateV2_0 = new CertificateV2();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      Name name0 = certificateV2_0.getFullName(wireFormat0);
      DataValidationSuccessCallback dataValidationSuccessCallback0 = mock(DataValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      DataValidationFailureCallback dataValidationFailureCallback0 = mock(DataValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      DataValidationState dataValidationState0 = new DataValidationState(certificateV2_0, dataValidationSuccessCallback0, dataValidationFailureCallback0);
      boolean boolean0 = configRegexChecker0.check(false, name0, name0, dataValidationState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConfigChecker.create((BoostInfoTree) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.validator_config.ConfigChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BoostInfoTree boostInfoTree0 = new BoostInfoTree();
      boostInfoTree0.createSubtree("key-locator");
      boostInfoTree0.createSubtree("type", "customized");
      try { 
        ConfigChecker.create(boostInfoTree0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected <checker.key-locator.type>
         //
         verifyException("net.named_data.jndn.security.v2.validator_config.ConfigChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BoostInfoTree boostInfoTree0 = new BoostInfoTree();
      boostInfoTree0.createSubtree("type", "type");
      try { 
        ConfigChecker.create(boostInfoTree0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported checker type: type
         //
         verifyException("net.named_data.jndn.security.v2.validator_config.ConfigChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BoostInfoTree boostInfoTree0 = new BoostInfoTree();
      boostInfoTree0.createSubtree("type", "customized");
      try { 
        ConfigChecker.create(boostInfoTree0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected one <checker.key-locator>
         //
         verifyException("net.named_data.jndn.security.v2.validator_config.ConfigChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BoostInfoTree boostInfoTree0 = new BoostInfoTree();
      try { 
        ConfigChecker.create(boostInfoTree0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected <checker.type>
         //
         verifyException("net.named_data.jndn.security.v2.validator_config.ConfigChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BoostInfoTree boostInfoTree0 = new BoostInfoTree();
      boostInfoTree0.createSubtree("type", "hierarchical");
      ConfigChecker configChecker0 = ConfigChecker.create(boostInfoTree0);
      CertificateV2 certificateV2_0 = new CertificateV2();
      Name name0 = certificateV2_0.getFullName();
      // Undeclared exception!
      try { 
        configChecker0.check(false, name0, name0, (ValidationState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.validator_config.ConfigHyperRelationChecker", e);
      }
  }
}
