/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:49:46 GMT 2022
 */

package net.named_data.jndn.security.pib;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import net.named_data.jndn.Name;
import net.named_data.jndn.security.pib.PibIdentity;
import net.named_data.jndn.security.pib.PibKeyContainer;
import net.named_data.jndn.security.pib.PibMemory;
import net.named_data.jndn.security.pib.detail.PibIdentityImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PibIdentity_ESTest extends PibIdentity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Name.Component[] name_ComponentArray0 = new Name.Component[1];
      Name.Component name_Component0 = Name.Component.fromTimestamp((-1231L));
      name_ComponentArray0[0] = name_Component0;
      Name name0 = new Name(name_ComponentArray0);
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityImpl pibIdentityImpl0 = new PibIdentityImpl(name0, pibMemory0, true);
      PibIdentity pibIdentity0 = new PibIdentity(pibIdentityImpl0);
      Name name1 = pibIdentity0.getName();
      assertNotSame(name1, name0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PibIdentity pibIdentity0 = new PibIdentity((PibIdentityImpl) null);
      // Undeclared exception!
      try { 
        pibIdentity0.setDefaultKey_((Name) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid Identity instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Name name0 = new Name();
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityImpl pibIdentityImpl0 = new PibIdentityImpl(name0, pibMemory0, true);
      PibIdentity pibIdentity0 = new PibIdentity(pibIdentityImpl0);
      // Undeclared exception!
      try { 
        pibIdentity0.removeKey_((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Name.Component[] name_ComponentArray0 = new Name.Component[1];
      Name name0 = new Name(name_ComponentArray0);
      PibIdentity pibIdentity0 = new PibIdentity((PibIdentityImpl) null);
      // Undeclared exception!
      try { 
        pibIdentity0.removeKey_(name0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid Identity instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PibIdentity pibIdentity0 = new PibIdentity((PibIdentityImpl) null);
      // Undeclared exception!
      try { 
        pibIdentity0.getName();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid Identity instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PibIdentity pibIdentity0 = new PibIdentity((PibIdentityImpl) null);
      // Undeclared exception!
      try { 
        pibIdentity0.getKeys_();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid Identity instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PibIdentity pibIdentity0 = new PibIdentity((PibIdentityImpl) null);
      // Undeclared exception!
      try { 
        pibIdentity0.getKey((Name) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid Identity instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PibIdentity pibIdentity0 = new PibIdentity((PibIdentityImpl) null);
      // Undeclared exception!
      try { 
        pibIdentity0.getDefaultKey();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid Identity instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PibIdentity pibIdentity0 = new PibIdentity((PibIdentityImpl) null);
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        pibIdentity0.addKey_((ByteBuffer) null, name0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid Identity instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PibIdentity pibIdentity0 = new PibIdentity((PibIdentityImpl) null);
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        pibIdentity0.setDefaultKey_((ByteBuffer) null, name0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid Identity instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Name name0 = new Name();
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityImpl pibIdentityImpl0 = new PibIdentityImpl(name0, pibMemory0, true);
      PibIdentity pibIdentity0 = new PibIdentity(pibIdentityImpl0);
      // Undeclared exception!
      try { 
        pibIdentity0.setDefaultKey_(name0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key name `/` does not follow the naming conventions
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Name name0 = new Name();
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityImpl pibIdentityImpl0 = new PibIdentityImpl(name0, pibMemory0, true);
      PibIdentity pibIdentity0 = new PibIdentity(pibIdentityImpl0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        pibIdentity0.addKey_(byteBuffer0, name0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key name `/` does not follow the naming conventions
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Name name0 = new Name();
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityImpl pibIdentityImpl0 = new PibIdentityImpl(name0, pibMemory0, true);
      PibIdentity pibIdentity0 = new PibIdentity(pibIdentityImpl0);
      PibKeyContainer pibKeyContainer0 = pibIdentity0.getKeys_();
      assertEquals(0, pibKeyContainer0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Name name0 = new Name("c{@1l?|U_h");
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityImpl pibIdentityImpl0 = new PibIdentityImpl(name0, pibMemory0, true);
      PibIdentity pibIdentity0 = new PibIdentity(pibIdentityImpl0);
      // Undeclared exception!
      try { 
        pibIdentity0.setDefaultKey_((ByteBuffer) null, name0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key name `/c%7B%401l%3F%7CU_h` does not follow the naming conventions
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Name name0 = new Name();
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityImpl pibIdentityImpl0 = new PibIdentityImpl(name0, pibMemory0, true);
      PibIdentity pibIdentity0 = new PibIdentity(pibIdentityImpl0);
      // Undeclared exception!
      try { 
        pibIdentity0.removeKey_(name0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key name `/` does not follow the naming conventions
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Name name0 = new Name();
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityImpl pibIdentityImpl0 = new PibIdentityImpl(name0, pibMemory0, true);
      PibIdentity pibIdentity0 = new PibIdentity(pibIdentityImpl0);
      // Undeclared exception!
      try { 
        pibIdentity0.getKey(name0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key name `/` does not follow the naming conventions
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      Name name0 = new Name();
      PibIdentityImpl pibIdentityImpl0 = new PibIdentityImpl(name0, pibMemory0, true);
      PibIdentity pibIdentity0 = new PibIdentity(pibIdentityImpl0);
      try { 
        pibIdentity0.getDefaultKey();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No default key for identity `/`
         //
         verifyException("net.named_data.jndn.security.pib.PibMemory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Name name0 = new Name();
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityImpl pibIdentityImpl0 = new PibIdentityImpl(name0, pibMemory0, true);
      PibIdentity pibIdentity0 = new PibIdentity(pibIdentityImpl0);
      Name name1 = pibIdentity0.getName();
      assertEquals(0L, name1.getChangeCount());
  }
}
