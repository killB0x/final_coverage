/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:50:28 GMT 2022
 */

package net.named_data.jndn.security.v2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.Data;
import net.named_data.jndn.Interest;
import net.named_data.jndn.Name;
import net.named_data.jndn.security.SigningInfo;
import net.named_data.jndn.security.pib.PibKey;
import net.named_data.jndn.security.v2.CertificateV2;
import net.named_data.jndn.security.v2.DataValidationFailureCallback;
import net.named_data.jndn.security.v2.DataValidationState;
import net.named_data.jndn.security.v2.DataValidationSuccessCallback;
import net.named_data.jndn.security.v2.InterestValidationFailureCallback;
import net.named_data.jndn.security.v2.InterestValidationState;
import net.named_data.jndn.security.v2.InterestValidationSuccessCallback;
import net.named_data.jndn.security.v2.ValidationPolicy;
import net.named_data.jndn.security.v2.ValidationPolicyAcceptAll;
import net.named_data.jndn.security.v2.ValidationPolicyCommandInterest;
import net.named_data.jndn.security.v2.ValidationPolicyConfig;
import net.named_data.jndn.security.v2.ValidationPolicySimpleHierarchy;
import net.named_data.jndn.security.v2.ValidationState;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValidationPolicyCommandInterest_ESTest extends ValidationPolicyCommandInterest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicySimpleHierarchy0);
      Name name0 = SigningInfo.getDigestSha256Identity();
      name0.appendSequenceNumber(1976L);
      Interest interest0 = new Interest(name0, (-213.5516));
      // Undeclared exception!
      try { 
        validationPolicyCommandInterest0.checkPolicy(interest0, (ValidationState) null, (ValidationPolicy.ValidationContinuation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options0 = new ValidationPolicyCommandInterest.Options(0.0);
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyAcceptAll0, validationPolicyCommandInterest_Options0);
      assertEquals(3600000.0, validationPolicyCommandInterest_Options0.recordLifetime_, 0.01);
      assertEquals(0.0, validationPolicyCommandInterest_Options0.gracePeriod_, 0.01);
      assertEquals(1000, validationPolicyCommandInterest_Options0.maxRecords_);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options0 = new ValidationPolicyCommandInterest.Options(2289.490202334, 255, (-1.0));
      assertEquals((-1.0), validationPolicyCommandInterest_Options0.recordLifetime_, 0.01);
      assertEquals(2289.490202334, validationPolicyCommandInterest_Options0.gracePeriod_, 0.01);
      assertEquals(255, validationPolicyCommandInterest_Options0.maxRecords_);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      Data data0 = new Data();
      DataValidationSuccessCallback dataValidationSuccessCallback0 = mock(DataValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      DataValidationFailureCallback dataValidationFailureCallback0 = mock(DataValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      DataValidationState dataValidationState0 = new DataValidationState(data0, dataValidationSuccessCallback0, dataValidationFailureCallback0);
      validationPolicyCommandInterest0.checkPolicy(data0, (ValidationState) dataValidationState0, (ValidationPolicy.ValidationContinuation) null);
      assertTrue(validationPolicyCommandInterest0.hasInnerPolicy());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicySimpleHierarchy0);
      Interest interest0 = new Interest();
      // Undeclared exception!
      try { 
        validationPolicyCommandInterest0.checkPolicy(interest0, (ValidationState) null, (ValidationPolicy.ValidationContinuation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicyCommandInterest", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      Interest interest0 = new Interest();
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicySimpleHierarchy0);
      ValidationPolicy.getKeyLocatorName(interest0, (ValidationState) interestValidationState0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        validationPolicyCommandInterest0.checkPolicy(interest0, (ValidationState) interestValidationState0, validationPolicy_ValidationContinuation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ValidationState already has an outcome
         //
         verifyException("net.named_data.jndn.security.v2.ValidationState", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      Data data0 = new Data();
      DataValidationSuccessCallback dataValidationSuccessCallback0 = mock(DataValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      DataValidationFailureCallback dataValidationFailureCallback0 = mock(DataValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      DataValidationState dataValidationState0 = new DataValidationState(data0, dataValidationSuccessCallback0, dataValidationFailureCallback0);
      Name name0 = new Name();
      Interest interest0 = new Interest(name0);
      ValidationPolicy.getKeyLocatorName(interest0, (ValidationState) dataValidationState0);
      // Undeclared exception!
      try { 
        validationPolicyCommandInterest0.checkPolicy(data0, (ValidationState) dataValidationState0, (ValidationPolicy.ValidationContinuation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ValidationState already has an outcome
         //
         verifyException("net.named_data.jndn.security.v2.ValidationState", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = null;
      try {
        validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicySimpleHierarchy0, (ValidationPolicyCommandInterest.Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicyCommandInterest$Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyAcceptAll0);
      int int0 = validationPolicyCommandInterest0.findByKeyName((Name) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CertificateV2 certificateV2_0 = new CertificateV2();
      DataValidationSuccessCallback dataValidationSuccessCallback0 = mock(DataValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      DataValidationFailureCallback dataValidationFailureCallback0 = mock(DataValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      DataValidationState dataValidationState0 = new DataValidationState(certificateV2_0, dataValidationSuccessCallback0, dataValidationFailureCallback0);
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyAcceptAll0);
      Name name0 = SigningInfo.getDigestSha256Identity();
      Name name1 = PibKey.constructKeyName(name0, certificateV2_0.KEY_COMPONENT);
      Interest interest0 = new Interest(name1, (-3));
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      validationPolicyCommandInterest0.checkPolicy(interest0, (ValidationState) dataValidationState0, validationPolicy_ValidationContinuation0);
      assertFalse(interest0.getDidSetCanBePrefix_());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CertificateV2 certificateV2_0 = new CertificateV2();
      DataValidationSuccessCallback dataValidationSuccessCallback0 = mock(DataValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      DataValidationFailureCallback dataValidationFailureCallback0 = mock(DataValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      DataValidationState dataValidationState0 = new DataValidationState(certificateV2_0, dataValidationSuccessCallback0, dataValidationFailureCallback0);
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyAcceptAll0);
      Name name0 = SigningInfo.getDigestSha256Identity();
      Interest interest0 = new Interest(name0, (-3));
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      validationPolicyCommandInterest0.checkPolicy(interest0, (ValidationState) dataValidationState0, validationPolicy_ValidationContinuation0);
      assertFalse(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = null;
      try {
        validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest((ValidationPolicy) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // inner policy is missing
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options0 = new ValidationPolicyCommandInterest.Options((-909.7126392295432));
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicySimpleHierarchy0, validationPolicyCommandInterest_Options0);
      assertEquals(1000, validationPolicyCommandInterest_Options0.maxRecords_);
      assertEquals(3600000.0, validationPolicyCommandInterest_Options0.recordLifetime_, 0.01);
      assertEquals((-909.7126392295432), validationPolicyCommandInterest_Options0.gracePeriod_, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options0 = new ValidationPolicyCommandInterest.Options();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = null;
      try {
        validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest((ValidationPolicy) null, validationPolicyCommandInterest_Options0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // inner policy is missing
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options0 = new ValidationPolicyCommandInterest.Options();
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyAcceptAll0, validationPolicyCommandInterest_Options0);
      assertEquals(3600000.0, validationPolicyCommandInterest_Options0.recordLifetime_, 0.01);
      assertEquals(1000, validationPolicyCommandInterest_Options0.maxRecords_);
      assertEquals(120000.0, validationPolicyCommandInterest_Options0.gracePeriod_, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options0 = new ValidationPolicyCommandInterest.Options(2155.3, 2146857611);
      assertEquals(2155.3, validationPolicyCommandInterest_Options0.gracePeriod_, 0.01);
      assertEquals(3600000.0, validationPolicyCommandInterest_Options0.recordLifetime_, 0.01);
      assertEquals(2146857611, validationPolicyCommandInterest_Options0.maxRecords_);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options0 = new ValidationPolicyCommandInterest.Options(1);
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options1 = new ValidationPolicyCommandInterest.Options(validationPolicyCommandInterest_Options0);
      assertEquals(1.0, validationPolicyCommandInterest_Options1.gracePeriod_, 0.01);
      assertEquals(1000, validationPolicyCommandInterest_Options1.maxRecords_);
      assertEquals(3600000.0, validationPolicyCommandInterest_Options1.recordLifetime_, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicySimpleHierarchy0);
      validationPolicyCommandInterest0.setNowOffsetMilliseconds_(0.0);
      assertTrue(validationPolicyCommandInterest0.hasInnerPolicy());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicySimpleHierarchy0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        validationPolicyCommandInterest0.checkPolicy((Data) null, (ValidationState) null, validationPolicy_ValidationContinuation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicy", e);
      }
  }
}
