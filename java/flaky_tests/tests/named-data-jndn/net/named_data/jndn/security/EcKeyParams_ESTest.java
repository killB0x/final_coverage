/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:59:10 GMT 2022
 */

package net.named_data.jndn.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.Name;
import net.named_data.jndn.security.EcKeyParams;
import net.named_data.jndn.security.KeyIdType;
import net.named_data.jndn.security.KeyType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EcKeyParams_ESTest extends EcKeyParams_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KeyType keyType0 = EcKeyParams.getType();
      assertEquals(KeyType.EC, keyType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EcKeyParams ecKeyParams0 = new EcKeyParams((-2182));
      int int0 = ecKeyParams0.getKeySize();
      assertEquals((-2182), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Name.Component name_Component0 = new Name.Component();
      EcKeyParams ecKeyParams0 = null;
      try {
        ecKeyParams0 = new EcKeyParams(name_Component0, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // KeyParams: keyId is empty
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EcKeyParams ecKeyParams0 = null;
      try {
        ecKeyParams0 = new EcKeyParams((Name.Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.KeyParams", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KeyIdType keyIdType0 = KeyIdType.USER_SPECIFIED;
      EcKeyParams ecKeyParams0 = null;
      try {
        ecKeyParams0 = new EcKeyParams(885, keyIdType0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // KeyParams: KeyIdType is USER_SPECIFIED
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromTimestamp(14L);
      EcKeyParams ecKeyParams0 = new EcKeyParams(name_Component0);
      assertEquals(256, ecKeyParams0.getDefaultSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromTimestamp(0L);
      EcKeyParams ecKeyParams0 = new EcKeyParams(name_Component0, 0);
      assertEquals(0, ecKeyParams0.getKeySize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = EcKeyParams.getDefaultSize();
      assertEquals(256, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EcKeyParams ecKeyParams0 = null;
      try {
        ecKeyParams0 = new EcKeyParams((Name.Component) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.KeyParams", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Name.Component name_Component0 = new Name.Component("");
      EcKeyParams ecKeyParams0 = null;
      try {
        ecKeyParams0 = new EcKeyParams(name_Component0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // KeyParams: keyId is empty
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KeyIdType keyIdType0 = KeyIdType.SHA256;
      EcKeyParams ecKeyParams0 = new EcKeyParams(0, keyIdType0);
      int int0 = ecKeyParams0.getKeySize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EcKeyParams ecKeyParams0 = new EcKeyParams();
      int int0 = ecKeyParams0.getKeySize();
      assertEquals(256, int0);
  }
}
