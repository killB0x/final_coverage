/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:37:05 GMT 2022
 */

package net.named_data.jndn.security.identity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.nio.ByteBuffer;
import java.security.InvalidParameterException;
import java.util.ArrayList;
import net.named_data.jndn.KeyLocator;
import net.named_data.jndn.Name;
import net.named_data.jndn.security.DigestAlgorithm;
import net.named_data.jndn.security.EcKeyParams;
import net.named_data.jndn.security.KeyClass;
import net.named_data.jndn.security.KeyParams;
import net.named_data.jndn.security.KeyType;
import net.named_data.jndn.security.RsaKeyParams;
import net.named_data.jndn.security.certificate.PublicKey;
import net.named_data.jndn.security.identity.FilePrivateKeyStorage;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FilePrivateKeyStorage_ESTest extends FilePrivateKeyStorage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      Name name0 = new Name();
      EcKeyParams ecKeyParams0 = new EcKeyParams();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".ndn/ndnsec-tpm-file/il7asoJjJEMhngUeSt4tHVu8Zxx4EFG%FDeJfL3+oPE=.pub");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        filePrivateKeyStorage0.generateKeyPair(name0, ecKeyParams0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // FilePrivateKeyStorage: Failed to write key: Simulated IOException
         //
         verifyException("net.named_data.jndn.security.identity.FilePrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      RsaKeyParams rsaKeyParams0 = new RsaKeyParams();
      Name name0 = new Name(arrayList0);
      filePrivateKeyStorage0.generateKeyPair(name0, rsaKeyParams0);
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        filePrivateKeyStorage0.sign((ByteBuffer) null, name0, digestAlgorithm0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // FilePrivateKeyStorage: Failed to read key: Simulated IOException
         //
         verifyException("net.named_data.jndn.security.identity.FilePrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyLocator keyLocator0 = new KeyLocator();
      Name name0 = keyLocator0.getKeyName();
      EcKeyParams ecKeyParams0 = new EcKeyParams();
      try { 
        filePrivateKeyStorage0.generateKeyPair(name0, ecKeyParams0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // FilePrivateKeyStorage: Failed to write key: FilePrivateKeyStorage: Failed to write to mapping.txt: Simulated IOException
         //
         verifyException("net.named_data.jndn.security.identity.FilePrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      RsaKeyParams rsaKeyParams0 = new RsaKeyParams();
      Name name0 = new Name(arrayList0);
      filePrivateKeyStorage0.generateKeyPair(name0, rsaKeyParams0);
      filePrivateKeyStorage0.deleteKeyPair(name0);
      assertEquals(0, name0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage("PUBLIC");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(32);
      KeyLocator keyLocator0 = new KeyLocator();
      Name name0 = keyLocator0.getKeyName();
      EcKeyParams ecKeyParams0 = new EcKeyParams();
      filePrivateKeyStorage0.generateKeyPair(name0, ecKeyParams0);
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      Blob blob0 = filePrivateKeyStorage0.sign(byteBuffer0, name0, digestAlgorithm0);
      assertFalse(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = FilePrivateKeyStorage.getDefaultDirecoryPath("&ndn.MustBeFresh=");
      assertEquals("/home/user/&ndn.MustBeFresh=/.ndn/ndnsec-tpm-file", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      RsaKeyParams rsaKeyParams0 = new RsaKeyParams();
      Name name0 = new Name(arrayList0);
      filePrivateKeyStorage0.generateKeyPair(name0, rsaKeyParams0);
      KeyClass keyClass0 = KeyClass.PRIVATE;
      boolean boolean0 = filePrivateKeyStorage0.doesKeyExist(name0, keyClass0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      Name name0 = new Name();
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      try { 
        filePrivateKeyStorage0.sign((ByteBuffer) null, name0, digestAlgorithm0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // FilePrivateKeyStorage.sign: private key doesn't exist
         //
         verifyException("net.named_data.jndn.security.identity.FilePrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      Name name0 = new Name();
      RsaKeyParams rsaKeyParams0 = new RsaKeyParams();
      filePrivateKeyStorage0.generateKeyPair(name0, rsaKeyParams0);
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      // Undeclared exception!
      try { 
        filePrivateKeyStorage0.sign((ByteBuffer) null, name0, digestAlgorithm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      // Undeclared exception!
      try { 
        filePrivateKeyStorage0.getPublicKey((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.FilePrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilePrivateKeyStorage.getDefaultDirecoryPath((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.FilePrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Name name0 = new Name();
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      EcKeyParams ecKeyParams0 = new EcKeyParams(2147483645);
      // Undeclared exception!
      try { 
        filePrivateKeyStorage0.generateKeyPair(name0, ecKeyParams0);
        fail("Expecting exception: InvalidParameterException");
      
      } catch(InvalidParameterException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      // Undeclared exception!
      try { 
        filePrivateKeyStorage0.generateKeyPair((Name) null, (KeyParams) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.FilePrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Name name0 = new Name();
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      // Undeclared exception!
      try { 
        filePrivateKeyStorage0.encrypt(name0, (ByteBuffer) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilePrivateKeyStorage.encrypt is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.FilePrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      KeyClass keyClass0 = KeyClass.PRIVATE;
      // Undeclared exception!
      try { 
        filePrivateKeyStorage0.doesKeyExist((Name) null, keyClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.FilePrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) filePrivateKeyStorage0);
      Name name0 = new Name(arrayList0);
      KeyClass keyClass0 = KeyClass.SYMMETRIC;
      // Undeclared exception!
      try { 
        filePrivateKeyStorage0.doesKeyExist(name0, keyClass0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.security.identity.FilePrivateKeyStorage cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.security.identity.FilePrivateKeyStorage and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @5a314cb1)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      // Undeclared exception!
      try { 
        filePrivateKeyStorage0.deleteKeyPair((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.FilePrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      // Undeclared exception!
      try { 
        filePrivateKeyStorage0.deleteKey((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.FilePrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      Name name0 = new Name();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        filePrivateKeyStorage0.decrypt(name0, byteBuffer0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilePrivateKeyStorage.decrypt is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.FilePrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = null;
      try {
        filePrivateKeyStorage0 = new FilePrivateKeyStorage((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      KeyClass keyClass0 = KeyClass.PRIVATE;
      boolean boolean0 = filePrivateKeyStorage0.doesKeyExist(name0, keyClass0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Name name0 = new Name();
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      try { 
        filePrivateKeyStorage0.deleteKey(name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No key files found to delete
         //
         verifyException("net.named_data.jndn.security.identity.FilePrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilePrivateKeyStorage.getDefaultDirecoryPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      File file0 = MockFile.createTempFile("PUBLIC", "PUBLIC");
      String string0 = FilePrivateKeyStorage.getDefaultDirecoryPath(file0);
      assertEquals("/tmp/PUBLIC0PUBLIC/.ndn/ndnsec-tpm-file", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage("PUBLIC");
      KeyLocator keyLocator0 = new KeyLocator();
      Name name0 = keyLocator0.getKeyName();
      EcKeyParams ecKeyParams0 = new EcKeyParams();
      filePrivateKeyStorage0.generateKeyPair(name0, ecKeyParams0);
      filePrivateKeyStorage0.deleteKey(name0);
      assertEquals(0, name0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      Name name0 = new Name("erlH(\"XCV1.");
      try { 
        filePrivateKeyStorage0.getPublicKey(name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Public key does not exist.
         //
         verifyException("net.named_data.jndn.security.identity.FilePrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      Name name0 = new Name();
      RsaKeyParams rsaKeyParams0 = new RsaKeyParams();
      filePrivateKeyStorage0.generateKeyPair(name0, rsaKeyParams0);
      PublicKey publicKey0 = filePrivateKeyStorage0.getPublicKey(name0);
      assertEquals(KeyType.RSA, publicKey0.getKeyType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      Name name0 = new Name();
      EcKeyParams ecKeyParams0 = new EcKeyParams();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".ndn/ndnsec-tpm-file/il7asoJjJEMhngUeSt4tHVu8Zxx4EFG%FDeJfL3+oPE=.pri");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "0@");
      try { 
        filePrivateKeyStorage0.generateKeyPair(name0, ecKeyParams0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Private Key already exists
         //
         verifyException("net.named_data.jndn.security.identity.FilePrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      Name name0 = new Name();
      EcKeyParams ecKeyParams0 = new EcKeyParams();
      filePrivateKeyStorage0.generateKeyPair(name0, ecKeyParams0);
      try { 
        filePrivateKeyStorage0.generateKeyPair(name0, ecKeyParams0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Public Key already exists
         //
         verifyException("net.named_data.jndn.security.identity.FilePrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Name name0 = new Name();
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      EcKeyParams ecKeyParams0 = new EcKeyParams();
      // Undeclared exception!
      try { 
        filePrivateKeyStorage0.generateKey(name0, ecKeyParams0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilePrivateKeyStorage.generateKey is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.FilePrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage("PUBLIC");
      KeyLocator keyLocator0 = new KeyLocator();
      Name name0 = keyLocator0.getKeyName();
      filePrivateKeyStorage0.deleteKeyPair(name0);
      assertEquals(0, name0.size());
  }
}
