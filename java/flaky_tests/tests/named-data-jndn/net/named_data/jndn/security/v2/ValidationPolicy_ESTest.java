/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:38:57 GMT 2022
 */

package net.named_data.jndn.security.v2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.nio.ByteBuffer;
import net.named_data.jndn.Data;
import net.named_data.jndn.DigestSha256Signature;
import net.named_data.jndn.Face;
import net.named_data.jndn.GenericSignature;
import net.named_data.jndn.HmacWithSha256Signature;
import net.named_data.jndn.Interest;
import net.named_data.jndn.InterestFilter;
import net.named_data.jndn.KeyLocator;
import net.named_data.jndn.Name;
import net.named_data.jndn.OnInterestCallback;
import net.named_data.jndn.security.KeyChain;
import net.named_data.jndn.security.SigningInfo;
import net.named_data.jndn.security.certificate.Certificate;
import net.named_data.jndn.security.certificate.IdentityCertificate;
import net.named_data.jndn.security.pib.Pib;
import net.named_data.jndn.security.pib.PibKey;
import net.named_data.jndn.security.pib.PibMemory;
import net.named_data.jndn.security.pib.PibSqlite3;
import net.named_data.jndn.security.pib.detail.PibKeyImpl;
import net.named_data.jndn.security.v2.CertificateCacheV2;
import net.named_data.jndn.security.v2.CertificateFetcherFromNetwork;
import net.named_data.jndn.security.v2.CertificateFetcherOffline;
import net.named_data.jndn.security.v2.CertificateV2;
import net.named_data.jndn.security.v2.DataValidationFailureCallback;
import net.named_data.jndn.security.v2.DataValidationState;
import net.named_data.jndn.security.v2.DataValidationSuccessCallback;
import net.named_data.jndn.security.v2.InterestValidationFailureCallback;
import net.named_data.jndn.security.v2.InterestValidationState;
import net.named_data.jndn.security.v2.InterestValidationSuccessCallback;
import net.named_data.jndn.security.v2.ValidationError;
import net.named_data.jndn.security.v2.ValidationPolicy;
import net.named_data.jndn.security.v2.ValidationPolicyAcceptAll;
import net.named_data.jndn.security.v2.ValidationPolicyCommandInterest;
import net.named_data.jndn.security.v2.ValidationPolicyConfig;
import net.named_data.jndn.security.v2.ValidationPolicyFromPib;
import net.named_data.jndn.security.v2.ValidationPolicySimpleHierarchy;
import net.named_data.jndn.security.v2.ValidationState;
import net.named_data.jndn.security.v2.Validator;
import net.named_data.jndn.transport.Transport;
import net.named_data.jndn.transport.UdpTransport;
import net.named_data.jndn.util.Blob;
import net.named_data.jndn.util.BoostInfoTree;
import net.named_data.jndn.util.MemoryContentCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValidationPolicy_ESTest extends ValidationPolicy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      assertFalse(validationPolicyConfig0.hasInnerPolicy());
      
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      Data data0 = new Data();
      Name.Component[] name_ComponentArray0 = new Name.Component[0];
      Name name0 = new Name(name_ComponentArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      Name.Component name_Component0 = Name.Component.fromSegmentOffset((-3356L));
      Name name1 = PibKey.constructKeyName(name0, name_Component0);
      Interest interest0 = new Interest(name1, 1000.0);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      name1.isPrefixOf(name0);
      ValidationPolicy.getKeyLocatorName(data0, (ValidationState) interestValidationState0);
      InterestValidationSuccessCallback interestValidationSuccessCallback1 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback1 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      InterestValidationState interestValidationState1 = new InterestValidationState(interest0, interestValidationSuccessCallback1, interestValidationFailureCallback1);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      validationPolicyConfig0.setInnerPolicy(validationPolicyCommandInterest0);
      try { 
        validationPolicyConfig0.checkPolicy(interest0, (ValidationState) interestValidationState1, validationPolicy_ValidationContinuation0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ValidationPolicyConfig must be a terminal inner policy
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicyConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      IdentityCertificate identityCertificate0 = new IdentityCertificate();
      Interest interest0 = new Interest("Get new key ID");
      // Undeclared exception!
      try { 
        validationPolicyConfig0.checkPolicy(interest0, (ValidationState) null, (ValidationPolicy.ValidationContinuation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      Validator validator0 = new Validator(validationPolicyCommandInterest0);
      validator0.resetVerifiedCertificates();
      validationPolicyConfig0.setValidator(validator0);
      validator0.setMaxDepth((-1790));
      validationPolicyConfig0.getValidator_();
      validationPolicyCommandInterest0.setValidator(validator0);
      validationPolicyConfig0.getValidator_();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      Data data0 = new Data();
      UdpTransport udpTransport0 = new UdpTransport();
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(udpTransport0, transport_ConnectionInfo0);
      CertificateFetcherFromNetwork certificateFetcherFromNetwork0 = new CertificateFetcherFromNetwork((Face) null);
      Validator validator0 = new Validator(validationPolicyConfig0, certificateFetcherFromNetwork0);
      Interest interest0 = new Interest("The innerPolicy argument cannot be null");
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      validator0.validate(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      InterestValidationSuccessCallback interestValidationSuccessCallback1 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback1 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      validator0.validate(interest0, interestValidationSuccessCallback1, interestValidationFailureCallback1);
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options0 = new ValidationPolicyCommandInterest.Options(2056.0, 8, 1);
      ValidationPolicyCommandInterest validationPolicyCommandInterest1 = new ValidationPolicyCommandInterest(validationPolicyAcceptAll0, validationPolicyCommandInterest_Options0);
      validationPolicyCommandInterest1.setValidator(validator0);
      InterestValidationSuccessCallback interestValidationSuccessCallback2 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback2 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback2, interestValidationFailureCallback2);
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options1 = new ValidationPolicyCommandInterest.Options(1.0);
      ValidationPolicyCommandInterest validationPolicyCommandInterest2 = new ValidationPolicyCommandInterest(validationPolicyConfig0, validationPolicyCommandInterest_Options0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      validationPolicyCommandInterest1.checkCertificatePolicy((CertificateV2) null, interestValidationState0, validationPolicy_ValidationContinuation0);
      ValidationPolicyConfig validationPolicyConfig1 = new ValidationPolicyConfig();
      validationPolicyConfig0.getValidator_();
      BoostInfoTree boostInfoTree0 = new BoostInfoTree("3j!-/RLxoNHCzI54");
      try { 
        validationPolicyConfig0.load(boostInfoTree0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ValidationPolicyConfig: Expected one validator section
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicyConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      IdentityCertificate identityCertificate0 = new IdentityCertificate();
      Interest interest0 = new Interest();
      DataValidationSuccessCallback dataValidationSuccessCallback0 = mock(DataValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      DataValidationFailureCallback dataValidationFailureCallback0 = mock(DataValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      DataValidationState dataValidationState0 = new DataValidationState(identityCertificate0, dataValidationSuccessCallback0, dataValidationFailureCallback0);
      ValidationPolicy.getKeyLocatorName(interest0, (ValidationState) dataValidationState0);
      ValidationPolicyConfig validationPolicyConfig1 = new ValidationPolicyConfig();
      // Undeclared exception!
      try { 
        ValidationPolicy.getKeyLocatorName((Data) identityCertificate0, (ValidationState) dataValidationState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ValidationState already has an outcome
         //
         verifyException("net.named_data.jndn.security.v2.ValidationState", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Interest interest0 = new Interest("e5Xr{dJg,M/!A0I>");
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      ValidationPolicy.getKeyLocatorName(interest0, (ValidationState) interestValidationState0);
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        validationPolicySimpleHierarchy0.checkPolicy(interest0, (ValidationState) interestValidationState0, validationPolicy_ValidationContinuation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ValidationState already has an outcome
         //
         verifyException("net.named_data.jndn.security.v2.ValidationState", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      CertificateV2 certificateV2_0 = new CertificateV2();
      Name.Component[] name_ComponentArray0 = new Name.Component[0];
      Name name0 = new Name(name_ComponentArray0);
      Object object0 = new Object();
      name0.equals(object0);
      Interest interest0 = new Interest(name0, 4);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = null;
      InterestValidationSuccessCallback interestValidationSuccessCallback1 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback1 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState1 = new InterestValidationState(interest0, interestValidationSuccessCallback1, interestValidationFailureCallback1);
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options0 = new ValidationPolicyCommandInterest.Options((-2302.829), (-234), 0.0);
      ValidationPolicyCommandInterest validationPolicyCommandInterest1 = new ValidationPolicyCommandInterest(validationPolicyCommandInterest0, validationPolicyCommandInterest_Options0);
      validationPolicyCommandInterest1.checkPolicy((Data) certificateV2_0, (ValidationState) interestValidationState1, (ValidationPolicy.ValidationContinuation) null);
      DataValidationSuccessCallback dataValidationSuccessCallback0 = mock(DataValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      DataValidationFailureCallback dataValidationFailureCallback0 = mock(DataValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      DataValidationState dataValidationState0 = new DataValidationState(certificateV2_0, dataValidationSuccessCallback0, dataValidationFailureCallback0);
      validationPolicyConfig0.checkPolicy(interest0, (ValidationState) dataValidationState0, (ValidationPolicy.ValidationContinuation) null);
      validationPolicyCommandInterest1.setNowOffsetMilliseconds_((-17L));
      interestValidationState0.verifyCertificateChain_(certificateV2_0);
      // Undeclared exception!
      try { 
        validationPolicyCommandInterest1.checkCertificatePolicy(certificateV2_0, interestValidationState1, (ValidationPolicy.ValidationContinuation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ValidationState already has an outcome
         //
         verifyException("net.named_data.jndn.security.v2.ValidationState", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      Data data0 = new Data();
      Name.Component[] name_ComponentArray0 = new Name.Component[0];
      Name name0 = new Name(name_ComponentArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      name0.equals(object1);
      Name.Component name_Component0 = Name.Component.fromSegmentOffset((-3356L));
      Name name1 = PibKey.constructKeyName(name0, name_Component0);
      Interest interest0 = new Interest(name1, 1000.0);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      InterestValidationSuccessCallback interestValidationSuccessCallback1 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback1 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState1 = new InterestValidationState(interest0, interestValidationSuccessCallback1, interestValidationFailureCallback1);
      DigestSha256Signature digestSha256Signature0 = new DigestSha256Signature();
      data0.setSignature(digestSha256Signature0);
      validationPolicyCommandInterest0.checkPolicy(data0, (ValidationState) interestValidationState1, (ValidationPolicy.ValidationContinuation) null);
      interestValidationState0.hasSeenCertificateName(name1);
      validationPolicyConfig0.checkPolicy(interest0, (ValidationState) interestValidationState0, (ValidationPolicy.ValidationContinuation) null);
      ValidationPolicyConfig validationPolicyConfig1 = new ValidationPolicyConfig();
      Face face0 = new Face();
      CertificateFetcherFromNetwork certificateFetcherFromNetwork0 = new CertificateFetcherFromNetwork(face0);
      Validator validator0 = new Validator(validationPolicyConfig1, certificateFetcherFromNetwork0);
      validationPolicyConfig1.setValidator(validator0);
      validationPolicyConfig1.getValidator_();
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      // Undeclared exception!
      try { 
        validationPolicySimpleHierarchy0.checkPolicy(data0, (ValidationState) interestValidationState0, (ValidationPolicy.ValidationContinuation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ValidationState already has an outcome
         //
         verifyException("net.named_data.jndn.security.v2.ValidationState", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      IdentityCertificate identityCertificate0 = new IdentityCertificate();
      identityCertificate0.getIncomingFaceId();
      GenericSignature genericSignature0 = new GenericSignature();
      identityCertificate0.setSignature(genericSignature0);
      // Undeclared exception!
      try { 
        ValidationPolicy.getKeyLocatorName((Data) identityCertificate0, (ValidationState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      Name.Component[] name_ComponentArray0 = new Name.Component[0];
      Name name0 = new Name(name_ComponentArray0);
      Object object0 = new Object();
      name0.equals(object0);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      InterestValidationSuccessCallback interestValidationSuccessCallback1 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback1 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      ValidationPolicyCommandInterest validationPolicyCommandInterest1 = new ValidationPolicyCommandInterest(validationPolicyCommandInterest0);
      ValidationPolicyCommandInterest validationPolicyCommandInterest2 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      validationPolicyCommandInterest2.setNowOffsetMilliseconds_((-1126.902741105));
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation1 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      ValidationPolicyConfig validationPolicyConfig1 = new ValidationPolicyConfig();
      validationPolicyConfig1.getValidator_();
      validationPolicyCommandInterest0.getInnerPolicy();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      Data data0 = new Data();
      Name.Component[] name_ComponentArray0 = new Name.Component[0];
      Name name0 = new Name(name_ComponentArray0);
      long long0 = 0L;
      DataValidationSuccessCallback dataValidationSuccessCallback0 = mock(DataValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      DataValidationFailureCallback dataValidationFailureCallback0 = mock(DataValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      DataValidationState dataValidationState0 = new DataValidationState(data0, dataValidationSuccessCallback0, dataValidationFailureCallback0);
      ValidationPolicy.getKeyLocatorName(data0, (ValidationState) dataValidationState0);
      Object object0 = new Object();
      Interest interest0 = new Interest(name0);
      DataValidationSuccessCallback dataValidationSuccessCallback1 = mock(DataValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Object object2 = new Object();
      name0.equals(object2);
      Name.Component name_Component0 = Name.Component.fromSegmentOffset(104L);
      Name name1 = PibKey.constructKeyName(name0, name_Component0);
      Interest interest1 = new Interest(name1, 0.0);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest1, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      validationPolicyCommandInterest0.checkPolicy(data0, (ValidationState) interestValidationState0, validationPolicy_ValidationContinuation0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation1 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        validationPolicyConfig0.checkPolicy(interest0, (ValidationState) interestValidationState0, validationPolicy_ValidationContinuation1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ValidationState already has an outcome
         //
         verifyException("net.named_data.jndn.security.v2.ValidationState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Interest interest0 = new Interest("e5Xr{dJg,M/!A0I>");
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      ValidationPolicy.getKeyLocatorName(interest0, (ValidationState) interestValidationState0);
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      Certificate certificate0 = new Certificate();
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        validationPolicySimpleHierarchy0.checkPolicy((Data) certificate0, (ValidationState) interestValidationState0, validationPolicy_ValidationContinuation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ValidationState already has an outcome
         //
         verifyException("net.named_data.jndn.security.v2.ValidationState", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Interest interest0 = new Interest("e5XrXdJg,M/!A0I>");
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      ValidationError validationError0 = new ValidationError(1);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      interestValidationState0.fail(validationError0);
      // Undeclared exception!
      try { 
        ValidationPolicy.getKeyLocatorName(interest0, (ValidationState) interestValidationState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ValidationState already has an outcome
         //
         verifyException("net.named_data.jndn.security.v2.ValidationState", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      Validator validator0 = new Validator(validationPolicyCommandInterest0);
      validationPolicySimpleHierarchy0.setValidator(validator0);
      validationPolicySimpleHierarchy0.hasInnerPolicy();
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy1 = new ValidationPolicySimpleHierarchy();
      Interest interest0 = new Interest();
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options0 = new ValidationPolicyCommandInterest.Options(0);
      ValidationPolicyCommandInterest validationPolicyCommandInterest1 = new ValidationPolicyCommandInterest(validationPolicyCommandInterest0, validationPolicyCommandInterest_Options0);
      ValidationPolicyConfig validationPolicyConfig1 = new ValidationPolicyConfig();
      validationPolicyConfig0.getValidator_();
      KeyLocator keyLocator0 = new KeyLocator();
      KeyLocator keyLocator1 = new KeyLocator(keyLocator0);
      keyLocator1.getKeyName();
      ByteBuffer.allocateDirect(0);
      PibSqlite3 pibSqlite3_0 = null;
      try {
        pibSqlite3_0 = new PibSqlite3();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      Data data0 = new Data();
      Name.Component[] name_ComponentArray0 = new Name.Component[0];
      Name name0 = new Name(name_ComponentArray0);
      Object object0 = new Object();
      name0.equals(object0);
      Name.Component name_Component0 = Name.Component.fromNumberWithMarker(0L, 224);
      Name name1 = PibKey.constructKeyName(name0, name_Component0);
      Interest interest0 = new Interest(name1, 1000.0);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      DataValidationSuccessCallback dataValidationSuccessCallback0 = mock(DataValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      DataValidationFailureCallback dataValidationFailureCallback0 = mock(DataValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      DataValidationState dataValidationState0 = new DataValidationState(data0, dataValidationSuccessCallback0, dataValidationFailureCallback0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = null;
      validationPolicyConfig0.checkPolicy(interest0, (ValidationState) dataValidationState0, (ValidationPolicy.ValidationContinuation) null);
      validationPolicyCommandInterest0.setNowOffsetMilliseconds_(473.9);
      PibMemory pibMemory0 = new PibMemory();
      try { 
        pibMemory0.getCertificate(name1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Certificate `/KEY/%E0%00` does not exist
         //
         verifyException("net.named_data.jndn.security.pib.PibMemory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Interest interest0 = new Interest("KeyLocator is missing");
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      Interest interest1 = new Interest();
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      CertificateV2 certificateV2_0 = null;
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options0 = new ValidationPolicyCommandInterest.Options(1);
      validationPolicyCommandInterest_Options0.recordLifetime_ = 1330.24052;
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicySimpleHierarchy0, validationPolicyCommandInterest_Options0);
      // Undeclared exception!
      try { 
        ValidationPolicy.getKeyLocatorName((Data) null, (ValidationState) interestValidationState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      Data data0 = new Data();
      validationPolicyConfig0.setInnerPolicy(validationPolicyCommandInterest0);
      Name.Component[] name_ComponentArray0 = new Name.Component[0];
      Name name0 = new Name(name_ComponentArray0);
      Object object0 = new Object();
      name0.equals(object0);
      Name.Component name_Component0 = Name.Component.fromNumberWithMarker(0L, 224);
      Name name1 = PibKey.constructKeyName(name0, name_Component0);
      Interest interest0 = new Interest(name1, 1000.0);
      validationPolicyCommandInterest0.setNowOffsetMilliseconds_(1000.0);
      // Undeclared exception!
      try { 
        validationPolicyCommandInterest0.setInnerPolicy(validationPolicyConfig0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyConfig validationPolicyConfig1 = new ValidationPolicyConfig();
      validationPolicyConfig0.innerPolicy_ = (ValidationPolicy) validationPolicyConfig1;
      IdentityCertificate identityCertificate0 = new IdentityCertificate();
      try { 
        validationPolicyConfig0.checkPolicy((Data) identityCertificate0, (ValidationState) null, (ValidationPolicy.ValidationContinuation) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ValidationPolicyConfig must be a terminal inner policy
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicyConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      Data data0 = new Data();
      Object object0 = new Object();
      Name.Component.fromNumberWithMarker(0L, 224);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation1 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation2 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      validationPolicyCommandInterest0.setNowOffsetMilliseconds_(1000.0);
      validationPolicyConfig0.getValidator_();
      validationPolicyCommandInterest0.hasInnerPolicy();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      validationPolicyCommandInterest0.setNowOffsetMilliseconds_(200.0);
      validationPolicyCommandInterest0.setInnerPolicy(validationPolicyConfig0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      Data data0 = new Data();
      Name.Component[] name_ComponentArray0 = new Name.Component[4];
      Name name0 = new Name(name_ComponentArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      name0.equals(object1);
      Name.Component name_Component0 = Name.Component.fromNumberWithMarker(0L, 136);
      Name name1 = PibKey.constructKeyName(name0, name_Component0);
      Interest interest0 = new Interest(name1, 0.0);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      name_Component0.isTimestamp();
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      validationPolicyCommandInterest0.checkPolicy(data0, (ValidationState) interestValidationState0, validationPolicy_ValidationContinuation0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation1 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        validationPolicyConfig0.checkPolicy(interest0, (ValidationState) interestValidationState0, validationPolicy_ValidationContinuation1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ValidationState already has an outcome
         //
         verifyException("net.named_data.jndn.security.v2.ValidationState", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      Validator validator0 = new Validator(validationPolicyCommandInterest0);
      validationPolicyConfig0.setValidator(validator0);
      validationPolicyConfig0.setInnerPolicy(validationPolicyCommandInterest0);
      try { 
        validationPolicyConfig0.load("net.named_data.jndn.Node$ConnectStatus");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      Validator validator0 = new Validator(validationPolicyCommandInterest0);
      validationPolicyCommandInterest0.setValidator(validator0);
      assertTrue(validationPolicyCommandInterest0.hasInnerPolicy());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      CertificateCacheV2 certificateCacheV2_0 = new CertificateCacheV2(182.0);
      Interest interest0 = new Interest();
      certificateCacheV2_0.find(interest0);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        validationPolicyConfig0.checkCertificatePolicy((CertificateV2) null, interestValidationState0, validationPolicy_ValidationContinuation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      Validator validator0 = new Validator(validationPolicySimpleHierarchy0);
      validationPolicySimpleHierarchy0.setValidator(validator0);
      validationPolicySimpleHierarchy0.validator_ = validator0;
      validationPolicySimpleHierarchy0.hasInnerPolicy();
      Interest interest0 = new Interest("KeyLocator is missing");
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy1 = new ValidationPolicySimpleHierarchy();
      Interest interest1 = new Interest();
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options0 = new ValidationPolicyCommandInterest.Options(1);
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicySimpleHierarchy1, validationPolicyCommandInterest_Options0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        validationPolicyCommandInterest0.checkCertificatePolicy((CertificateV2) null, interestValidationState0, validationPolicy_ValidationContinuation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      CertificateV2 certificateV2_0 = new CertificateV2();
      DataValidationSuccessCallback dataValidationSuccessCallback0 = mock(DataValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      DataValidationFailureCallback dataValidationFailureCallback0 = mock(DataValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      DataValidationState dataValidationState0 = new DataValidationState(certificateV2_0, dataValidationSuccessCallback0, dataValidationFailureCallback0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      validationPolicyConfig0.checkCertificatePolicy(certificateV2_0, dataValidationState0, validationPolicy_ValidationContinuation0);
      assertEquals((-4), CertificateV2.KEY_COMPONENT_OFFSET);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      Data data0 = new Data();
      Name.Component[] name_ComponentArray0 = new Name.Component[0];
      Name name0 = new Name(name_ComponentArray0);
      Object object0 = new Object();
      name0.equals(object0);
      int int0 = 224;
      Name.Component name_Component0 = Name.Component.fromNumberWithMarker(0L, 224);
      Name name1 = PibKey.constructKeyName(name0, name_Component0);
      Interest interest0 = new Interest(name1, 1000.0);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      validationPolicyCommandInterest0.checkPolicy(data0, (ValidationState) interestValidationState0, validationPolicy_ValidationContinuation0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation1 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation2 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation3 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        validationPolicyConfig0.checkPolicy(interest0, (ValidationState) interestValidationState0, validationPolicy_ValidationContinuation3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ValidationState already has an outcome
         //
         verifyException("net.named_data.jndn.security.v2.ValidationState", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Interest interest0 = new Interest("e5XrXdJg,M/!A0I>");
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      Name name0 = ValidationPolicy.getKeyLocatorName(interest0, (ValidationState) interestValidationState0);
      assertEquals(0, name0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options0 = new ValidationPolicyCommandInterest.Options(2587.813);
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      BoostInfoTree boostInfoTree0 = new BoostInfoTree();
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      validationPolicySimpleHierarchy0.getInnerPolicy();
      // Undeclared exception!
      try { 
        validationPolicyConfig0.setInnerPolicy((ValidationPolicy) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The innerPolicy argument cannot be null
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Name name0 = new Name("");
      Interest interest0 = new Interest(name0);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      name0.toString();
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      interest0.getForwardingHint();
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      Blob blob0 = hmacWithSha256Signature0.getSignature();
      interest0.setApplicationParameters(blob0);
      interestValidationState0.verifyCertificateChain_((CertificateV2) null);
      ValidationPolicy.getKeyLocatorName(interest0, (ValidationState) interestValidationState0);
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      try { 
        validationPolicyConfig0.load("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicy validationPolicy0 = validationPolicyConfig0.getInnerPolicy();
      assertNull(validationPolicy0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IdentityCertificate identityCertificate0 = new IdentityCertificate();
      // Undeclared exception!
      try { 
        ValidationPolicy.getKeyLocatorName((Data) identityCertificate0, (ValidationState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      Data data0 = new Data();
      Name.Component[] name_ComponentArray0 = new Name.Component[0];
      Name name0 = new Name(name_ComponentArray0);
      Object object0 = new Object();
      name0.equals(object0);
      Name.Component name_Component0 = Name.Component.fromNumberWithMarker(0L, 224);
      Name name1 = PibKey.constructKeyName(name0, name_Component0);
      Interest interest0 = new Interest(name1, 1000.0);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      validationPolicyCommandInterest0.checkPolicy(data0, (ValidationState) interestValidationState0, validationPolicy_ValidationContinuation0);
      String string0 = "x}$mOQk";
      KeyChain keyChain0 = null;
      try {
        keyChain0 = new KeyChain("x}$mOQk", "Invalid signed Interest: ");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // PIB scheme `x}$mOQk` is not supported
         //
         verifyException("net.named_data.jndn.security.KeyChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      Validator validator0 = validationPolicyConfig0.getValidator_();
      assertNull(validator0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options0 = new ValidationPolicyCommandInterest.Options(0.0, 2295);
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      validationPolicyConfig0.getValidator_();
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      Interest interest0 = new Interest();
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      validationPolicySimpleHierarchy0.checkPolicy(interest0, (ValidationState) interestValidationState0, validationPolicy_ValidationContinuation0);
      assertEquals((-1), interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      Data data0 = new Data();
      UdpTransport udpTransport0 = new UdpTransport();
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(udpTransport0, transport_ConnectionInfo0);
      CertificateFetcherFromNetwork certificateFetcherFromNetwork0 = new CertificateFetcherFromNetwork(face0);
      Validator validator0 = new Validator(validationPolicyConfig0, certificateFetcherFromNetwork0);
      validationPolicyCommandInterest0.setValidator(validator0);
      Name.Component[] name_ComponentArray0 = new Name.Component[0];
      Name name0 = new Name(name_ComponentArray0);
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      Face face1 = new Face();
      InterestFilter interestFilter0 = new InterestFilter("");
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, 0.0);
      face1.setInterestFilter(interestFilter0, (OnInterestCallback) memoryContentCache0);
      CertificateFetcherFromNetwork certificateFetcherFromNetwork1 = new CertificateFetcherFromNetwork(face1);
      Validator validator1 = new Validator(validationPolicyCommandInterest0, certificateFetcherFromNetwork1);
      validationPolicySimpleHierarchy0.setValidator(validator1);
      assertTrue(validationPolicyCommandInterest0.hasInnerPolicy());
      
      boolean boolean0 = validationPolicySimpleHierarchy0.hasInnerPolicy();
      assertFalse(boolean0);
      
      Interest interest0 = new Interest("KeyLocator is missing");
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy1 = new ValidationPolicySimpleHierarchy();
      Interest interest1 = new Interest();
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest1, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      validationPolicySimpleHierarchy0.checkPolicy(interest1, (ValidationState) interestValidationState0, validationPolicy_ValidationContinuation0);
      assertFalse(validationPolicySimpleHierarchy0.hasInnerPolicy());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0);
      validationPolicyCommandInterest0.innerPolicy_ = (ValidationPolicy) validationPolicyConfig0;
      validationPolicyCommandInterest0.setNowOffsetMilliseconds_(200.0);
      validationPolicyCommandInterest0.setInnerPolicy(validationPolicyConfig0);
      assertTrue(validationPolicyConfig0.hasInnerPolicy());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      validationPolicySimpleHierarchy0.hasInnerPolicy();
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options0 = new ValidationPolicyCommandInterest.Options(0.0, 0);
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicySimpleHierarchy0, validationPolicyCommandInterest_Options0);
      Name name0 = SigningInfo.getDigestSha256Identity();
      validationPolicyCommandInterest0.findByKeyName(name0);
      PibSqlite3 pibSqlite3_0 = null;
      try {
        pibSqlite3_0 = new PibSqlite3();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      Validator validator0 = new Validator(validationPolicySimpleHierarchy0);
      validationPolicySimpleHierarchy0.setValidator(validator0);
      validationPolicySimpleHierarchy0.validator_ = validator0;
      boolean boolean0 = validationPolicySimpleHierarchy0.hasInnerPolicy();
      assertFalse(boolean0);
      
      Interest interest0 = new Interest("KeyLocator is missing");
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy1 = new ValidationPolicySimpleHierarchy();
      Interest interest1 = new Interest();
      validationPolicySimpleHierarchy0.setInnerPolicy(validationPolicySimpleHierarchy1);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      Interest.setDefaultCanBePrefix(false);
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      validationPolicySimpleHierarchy0.checkPolicy(interest0, (ValidationState) interestValidationState0, validationPolicy_ValidationContinuation0);
      assertTrue(validationPolicySimpleHierarchy0.hasInnerPolicy());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicySimpleHierarchy0);
      ValidationPolicy validationPolicy0 = validationPolicyCommandInterest0.getInnerPolicy();
      assertNotNull(validationPolicy0);
      assertTrue(validationPolicyCommandInterest0.hasInnerPolicy());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options0 = new ValidationPolicyCommandInterest.Options(1.0, 0);
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      validationPolicyConfig0.innerPolicy_ = (ValidationPolicy) validationPolicySimpleHierarchy0;
      ValidationPolicyCommandInterest validationPolicyCommandInterest0 = new ValidationPolicyCommandInterest(validationPolicyConfig0, validationPolicyCommandInterest_Options0);
      Interest interest0 = new Interest();
      ValidationState validationState0 = null;
      BoostInfoTree boostInfoTree0 = new BoostInfoTree();
      try { 
        validationPolicyConfig0.load(boostInfoTree0, "The incoming packet exceeds the maximum limit Face.getMaxNdnPacketSize()");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ValidationPolicyConfig: Expected one validator section
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicyConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      Validator validator0 = new Validator(validationPolicyConfig0);
      validationPolicyConfig0.setValidator(validator0);
      assertEquals(25, validator0.getMaxDepth());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ValidationPolicyAcceptAll validationPolicyAcceptAll0 = new ValidationPolicyAcceptAll();
      Interest interest0 = new Interest();
      CertificateFetcherOffline certificateFetcherOffline0 = new CertificateFetcherOffline();
      Validator validator0 = new Validator(validationPolicyAcceptAll0, certificateFetcherOffline0);
      CertificateCacheV2 certificateCacheV2_0 = validator0.unverifiedCertificateCache_;
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = null;
      try {
        interestValidationState0 = new InterestValidationState(interest0, (InterestValidationSuccessCallback) null, interestValidationFailureCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The successCallback is null
         //
         verifyException("net.named_data.jndn.security.v2.InterestValidationState", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      IdentityCertificate identityCertificate0 = new IdentityCertificate();
      // Undeclared exception!
      try { 
        validationPolicyConfig0.checkPolicy((Data) identityCertificate0, (ValidationState) null, (ValidationPolicy.ValidationContinuation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      boolean boolean0 = validationPolicyConfig0.hasInnerPolicy();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ValidationPolicyCommandInterest.Options validationPolicyCommandInterest_Options0 = new ValidationPolicyCommandInterest.Options(0.0, 0, 0.0);
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      ValidationPolicyConfig validationPolicyConfig0 = new ValidationPolicyConfig();
      IdentityCertificate identityCertificate0 = new IdentityCertificate();
      identityCertificate0.getChangeCount();
      DataValidationSuccessCallback dataValidationSuccessCallback0 = mock(DataValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      DataValidationFailureCallback dataValidationFailureCallback0 = mock(DataValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      DataValidationState dataValidationState0 = new DataValidationState(identityCertificate0, dataValidationSuccessCallback0, dataValidationFailureCallback0);
      dataValidationState0.bypassValidation_();
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = null;
      Interest interest0 = new Interest();
      // Undeclared exception!
      try { 
        validationPolicyConfig0.checkPolicy(interest0, (ValidationState) dataValidationState0, (ValidationPolicy.ValidationContinuation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ValidationState already has an outcome
         //
         verifyException("net.named_data.jndn.security.v2.ValidationState", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IdentityCertificate identityCertificate0 = new IdentityCertificate();
      Interest interest0 = new Interest();
      Interest interest1 = new Interest(interest0);
      // Undeclared exception!
      try { 
        ValidationPolicy.getKeyLocatorName(interest1, (ValidationState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      SigningInfo.getDigestSha256Identity();
      PibSqlite3 pibSqlite3_0 = null;
      try {
        pibSqlite3_0 = new PibSqlite3();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }
}
