/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:23:30 GMT 2022
 */

package net.named_data.jndn.security.identity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.security.InvalidParameterException;
import java.util.ArrayList;
import net.named_data.jndn.ComponentType;
import net.named_data.jndn.KeyLocator;
import net.named_data.jndn.Name;
import net.named_data.jndn.Sha256WithEcdsaSignature;
import net.named_data.jndn.Sha256WithRsaSignature;
import net.named_data.jndn.security.DigestAlgorithm;
import net.named_data.jndn.security.EcKeyParams;
import net.named_data.jndn.security.KeyClass;
import net.named_data.jndn.security.KeyIdType;
import net.named_data.jndn.security.KeyParams;
import net.named_data.jndn.security.KeyType;
import net.named_data.jndn.security.RsaKeyParams;
import net.named_data.jndn.security.certificate.PublicKey;
import net.named_data.jndn.security.identity.MemoryPrivateKeyStorage;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MemoryPrivateKeyStorage_ESTest extends MemoryPrivateKeyStorage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Name name0 = new Name();
      EcKeyParams ecKeyParams0 = new EcKeyParams();
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      memoryPrivateKeyStorage0.generateKeyPair(name0, ecKeyParams0);
      assertEquals(KeyType.EC, ecKeyParams0.getKeyType());
      
      KeyType keyType0 = KeyType.EC;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.setKeyPairForKeyName(name0, keyType0, byteBuffer0, byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newLimit > capacity: (25 > 7)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      EcKeyParams ecKeyParams0 = new EcKeyParams();
      memoryPrivateKeyStorage0.generateKeyPair(name0, ecKeyParams0);
      KeyType keyType0 = KeyType.RSA;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)1;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0, (int) (byte)7, (int) (byte)1);
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.setKeyPairForKeyName(name0, keyType0, byteBuffer0, byteBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Name name0 = new Name();
      RsaKeyParams rsaKeyParams0 = new RsaKeyParams();
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      memoryPrivateKeyStorage0.generateKeyPair(name0, rsaKeyParams0);
      assertEquals(KeyType.RSA, rsaKeyParams0.getType());
      
      KeyType keyType0 = KeyType.RSA;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.setPublicKeyForKeyName(name0, keyType0, byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newLimit > capacity: (15 > 3)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Name name0 = new Name();
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      RsaKeyParams rsaKeyParams0 = new RsaKeyParams();
      memoryPrivateKeyStorage0.generateKeyPair(name0, rsaKeyParams0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      Name name1 = new Name();
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator0 = KeyLocator.getFromSignature(sha256WithEcdsaSignature0);
      keyLocator0.getChangeCount();
      Name name2 = keyLocator0.getKeyName();
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      memoryPrivateKeyStorage0.sign(byteBuffer0, name2, digestAlgorithm0);
      try { 
        memoryPrivateKeyStorage0.generateKeyPair(name2, rsaKeyParams0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Public Key already exists
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Name name0 = new Name();
      RsaKeyParams rsaKeyParams0 = new RsaKeyParams();
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      memoryPrivateKeyStorage0.generateKeyPair(name0, rsaKeyParams0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      Blob blob0 = memoryPrivateKeyStorage0.sign(byteBuffer0, name0);
      assertFalse(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Name name0 = new Name();
      EcKeyParams ecKeyParams0 = new EcKeyParams();
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      memoryPrivateKeyStorage0.generateKeyPair(name0, ecKeyParams0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      Name name1 = new Name();
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator0 = KeyLocator.getFromSignature(sha256WithEcdsaSignature0);
      keyLocator0.getKeyName();
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      Blob blob0 = memoryPrivateKeyStorage0.sign(byteBuffer0, name0, digestAlgorithm0);
      assertFalse(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Name name0 = new Name();
      EcKeyParams ecKeyParams0 = new EcKeyParams();
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      memoryPrivateKeyStorage0.generateKeyPair(name0, ecKeyParams0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      Blob blob0 = memoryPrivateKeyStorage0.sign(byteBuffer0, name0);
      assertFalse(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Name name0 = new Name();
      EcKeyParams ecKeyParams0 = new EcKeyParams();
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      memoryPrivateKeyStorage0.generateKeyPair(name0, ecKeyParams0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.encrypt(name0, byteBuffer0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryPrivateKeyStorage.encrypt is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      KeyType keyType0 = KeyType.EC;
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.setKeyPairForKeyName(name0, keyType0, (ByteBuffer) null, (ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.der.DerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Name name0 = new Name();
      RsaKeyParams rsaKeyParams0 = new RsaKeyParams();
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name1 = new Name();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)126;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.setKeyPairForKeyName(name1, byteBuffer0, byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newLimit > capacity: (128 > 2)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      KeyType keyType0 = KeyType.EC;
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.setPrivateKeyForKeyName(name0, keyType0, (ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.spec.EncodedKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      KeyType keyType0 = KeyType.RSA;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(45);
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.setPrivateKeyForKeyName(name0, keyType0, byteBuffer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      byte[] byteArray0 = new byte[1];
      Name name0 = new Name();
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.sign(byteBuffer0, (Name) null, digestAlgorithm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.generateKeyPair(name0, (KeyParams) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      ByteBuffer.wrap(byteArray0);
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0);
      RsaKeyParams rsaKeyParams0 = new RsaKeyParams(name_Component0);
      Name.Component[] name_ComponentArray0 = new Name.Component[7];
      name_ComponentArray0[0] = name_Component0;
      name_ComponentArray0[1] = name_Component0;
      name_ComponentArray0[2] = name_Component0;
      name_ComponentArray0[3] = name_Component0;
      name_ComponentArray0[4] = name_Component0;
      name_ComponentArray0[5] = name_Component0;
      Name.Component name_Component1 = new Name.Component("!gkA", componentType0);
      name_ComponentArray0[6] = name_Component1;
      Name name0 = new Name(name_ComponentArray0);
      memoryPrivateKeyStorage0.generateKeyPair(name0, rsaKeyParams0);
      int int0 = (-2423);
      KeyIdType keyIdType0 = KeyIdType.RANDOM;
      EcKeyParams ecKeyParams0 = new EcKeyParams(2, keyIdType0);
      try { 
        memoryPrivateKeyStorage0.generateKeyPair(name0, ecKeyParams0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Public Key already exists
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Name name0 = new Name();
      EcKeyParams ecKeyParams0 = new EcKeyParams();
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      memoryPrivateKeyStorage0.generateKeyPair(name0, ecKeyParams0);
      try { 
        memoryPrivateKeyStorage0.generateKeyPair(name0, ecKeyParams0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Public Key already exists
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Name name0 = new Name();
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(802);
      try { 
        memoryPrivateKeyStorage0.setKeyPairForKeyName(name0, byteBuffer0, byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PublicKey: Error decoding the public key: Unimplemented DER type 0
         //
         verifyException("net.named_data.jndn.security.certificate.PublicKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      Name name0 = new Name(arrayList1);
      ByteBuffer byteBuffer1 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.setKeyPairForKeyName(name0, byteBuffer1, byteBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name("Bc[gPeef");
      KeyType keyType0 = KeyType.RSA;
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.setPublicKeyForKeyName(name0, keyType0, (ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.der.DerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Name name0 = new Name();
      EcKeyParams ecKeyParams0 = new EcKeyParams();
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      memoryPrivateKeyStorage0.generateKeyPair(name0, ecKeyParams0);
      PublicKey publicKey0 = memoryPrivateKeyStorage0.getPublicKey(name0);
      assertEquals(KeyType.EC, publicKey0.getKeyType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Name name0 = new Name();
      EcKeyParams ecKeyParams0 = new EcKeyParams();
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.setKeyPairForKeyName(name0, byteBuffer0, byteBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Name name0 = new Name("");
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0);
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.setKeyPairForKeyName(name0, byteBuffer0, byteBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      KeyLocator keyLocator0 = new KeyLocator();
      Name name0 = keyLocator0.getKeyName();
      Name name1 = new Name(name0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte) (-96);
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0);
      RsaKeyParams rsaKeyParams0 = new RsaKeyParams(name_Component0);
      memoryPrivateKeyStorage0.generateKeyPair(name1, rsaKeyParams0);
      assertTrue(name0.equals((Object)name1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      RsaKeyParams rsaKeyParams0 = new RsaKeyParams(0);
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.generateKeyPair(name0, rsaKeyParams0);
        fail("Expecting exception: InvalidParameterException");
      
      } catch(InvalidParameterException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      ByteBuffer.wrap(byteArray0);
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0);
      RsaKeyParams rsaKeyParams0 = new RsaKeyParams(name_Component0);
      Name.Component[] name_ComponentArray0 = new Name.Component[9];
      name_ComponentArray0[0] = name_Component0;
      name_ComponentArray0[1] = name_Component0;
      name_ComponentArray0[2] = name_Component0;
      name_ComponentArray0[3] = name_Component0;
      name_ComponentArray0[4] = name_Component0;
      name_ComponentArray0[5] = name_Component0;
      name_ComponentArray0[6] = name_Component0;
      name_ComponentArray0[7] = name_Component0;
      name_ComponentArray0[8] = name_Component0;
      Name name0 = new Name(name_ComponentArray0);
      KeyIdType keyIdType0 = KeyIdType.RANDOM;
      EcKeyParams ecKeyParams0 = new EcKeyParams((-2423), keyIdType0);
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.generateKeyPair(name0, ecKeyParams0);
        fail("Expecting exception: InvalidParameterException");
      
      } catch(InvalidParameterException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      KeyLocator keyLocator0 = new KeyLocator();
      Name name0 = keyLocator0.getKeyName();
      KeyType keyType0 = KeyType.AES;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      try { 
        memoryPrivateKeyStorage0.setPrivateKeyForKeyName(name0, keyType0, byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PrivateKey constructor: Unrecognized keyType
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage$PrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      Name name0 = new Name();
      KeyType keyType0 = KeyType.EC;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      try { 
        memoryPrivateKeyStorage0.setPrivateKeyForKeyName(name0, keyType0, byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // KeyFactory: PKCS8EncodedKeySpec is not supported for EC: java.security.InvalidKeyException: IOException : Short read of DER length
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage$PrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteBuffer byteBuffer0 = null;
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      KeyClass keyClass0 = KeyClass.PUBLIC;
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.doesKeyExist((Name) null, keyClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-21);
      KeyClass keyClass0 = KeyClass.PRIVATE;
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.doesKeyExist((Name) null, keyClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name.Component[] name_ComponentArray0 = new Name.Component[0];
      Name name0 = new Name(name_ComponentArray0);
      KeyClass keyClass0 = KeyClass.SYMMETRIC;
      boolean boolean0 = memoryPrivateKeyStorage0.doesKeyExist(name0, keyClass0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      KeyClass keyClass0 = KeyClass.SYMMETRIC;
      boolean boolean0 = memoryPrivateKeyStorage0.doesKeyExist(name0, keyClass0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      KeyLocator keyLocator0 = new KeyLocator();
      Name name0 = keyLocator0.getKeyName();
      Name name1 = new Name(name0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte) (-96);
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0);
      RsaKeyParams rsaKeyParams0 = new RsaKeyParams(name_Component0);
      memoryPrivateKeyStorage0.generateKeyPair(name1, rsaKeyParams0);
      assertEquals(0L, name1.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      KeyClass keyClass0 = KeyClass.PUBLIC;
      boolean boolean0 = memoryPrivateKeyStorage0.doesKeyExist(name0, keyClass0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name.Component[] name_ComponentArray0 = new Name.Component[0];
      Name name0 = new Name(name_ComponentArray0);
      KeyType keyType0 = KeyType.AES;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      try { 
        memoryPrivateKeyStorage0.setPublicKeyForKeyName(name0, keyType0, byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PublicKey: Error decoding the public key: Unimplemented DER type 0
         //
         verifyException("net.named_data.jndn.security.certificate.PublicKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      MemoryPrivateKeyStorage memoryPrivateKeyStorage1 = new MemoryPrivateKeyStorage();
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage1.getPublicKey((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      KeyType keyType0 = KeyType.AES;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      MemoryPrivateKeyStorage.PrivateKey memoryPrivateKeyStorage_PrivateKey0 = null;
      try {
        memoryPrivateKeyStorage_PrivateKey0 = memoryPrivateKeyStorage0.new PrivateKey(keyType0, byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // PrivateKey constructor: Unrecognized keyType
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage$PrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      KeyType keyType0 = KeyType.AES;
      MemoryPrivateKeyStorage.PrivateKey memoryPrivateKeyStorage_PrivateKey0 = null;
      try {
        memoryPrivateKeyStorage_PrivateKey0 = memoryPrivateKeyStorage0.new PrivateKey(keyType0, (ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // PrivateKey constructor: Unrecognized keyType
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage$PrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      KeyType keyType0 = KeyType.RSA;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(472);
      MemoryPrivateKeyStorage.PrivateKey memoryPrivateKeyStorage_PrivateKey0 = null;
      try {
        memoryPrivateKeyStorage_PrivateKey0 = memoryPrivateKeyStorage0.new PrivateKey(keyType0, byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // KeyFactory: PKCS8EncodedKeySpec is not supported for RSA: java.security.InvalidKeyException: invalid key format
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage$PrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Name name0 = new Name();
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.encrypt(name0, byteBuffer0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryPrivateKeyStorage.encrypt is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name("");
      int int0 = 0;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.encrypt(name0, byteBuffer0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryPrivateKeyStorage.encrypt is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Name name0 = new Name();
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.encrypt(name0, byteBuffer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryPrivateKeyStorage.encrypt is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.decrypt(name0, (ByteBuffer) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryPrivateKeyStorage.decrypt is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.decrypt(name0, (ByteBuffer) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryPrivateKeyStorage.decrypt is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name("net.named_data.jndn.security.KeyIdType");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)29;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.decrypt(name0, byteBuffer0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryPrivateKeyStorage.decrypt is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Name name0 = new Name();
      RsaKeyParams rsaKeyParams0 = new RsaKeyParams();
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.generateKey(name0, rsaKeyParams0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryPrivateKeyStorage.generateKey is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      Name name1 = new Name();
      KeyParams keyParams0 = null;
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.generateKey(name1, (KeyParams) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryPrivateKeyStorage.generateKey is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      ByteBuffer.wrap(byteArray0);
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0);
      RsaKeyParams rsaKeyParams0 = new RsaKeyParams(name_Component0);
      Name.Component[] name_ComponentArray0 = new Name.Component[9];
      name_ComponentArray0[0] = name_Component0;
      name_ComponentArray0[1] = name_Component0;
      name_ComponentArray0[2] = name_Component0;
      ByteBuffer.wrap(byteArray0);
      Name name0 = new Name("");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-72);
      byteArray1[1] = (byte) (-72);
      byteArray1[2] = (byte) (-72);
      byteArray1[3] = (byte) (-72);
      byteArray1[4] = (byte) (-72);
      Name.Component name_Component1 = new Name.Component(byteArray1, componentType0);
      RsaKeyParams rsaKeyParams1 = new RsaKeyParams(name_Component0);
      memoryPrivateKeyStorage0.generateKeyPair(name0, rsaKeyParams0);
      memoryPrivateKeyStorage0.getPublicKey(name0);
      KeyClass keyClass0 = KeyClass.PUBLIC;
      boolean boolean0 = memoryPrivateKeyStorage0.doesKeyExist(name0, keyClass0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      try { 
        memoryPrivateKeyStorage0.getPublicKey(name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MemoryPrivateKeyStorage: Cannot find public key /
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.deleteKeyPair((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Name name1 = new Name(name0);
      memoryPrivateKeyStorage0.deleteKeyPair(name1);
      KeyType keyType0 = KeyType.AES;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      PublicKey publicKey0 = new PublicKey();
      MemoryPrivateKeyStorage memoryPrivateKeyStorage1 = new MemoryPrivateKeyStorage();
      try { 
        memoryPrivateKeyStorage1.getPublicKey(name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MemoryPrivateKeyStorage: Cannot find public key /
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      try { 
        memoryPrivateKeyStorage0.sign((ByteBuffer) null, name0, digestAlgorithm0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MemoryPrivateKeyStorage: Cannot find private key /
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EcKeyParams ecKeyParams0 = new EcKeyParams();
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      KeyLocator keyLocator0 = new KeyLocator();
      Name name0 = keyLocator0.getKeyName();
      memoryPrivateKeyStorage0.generateKeyPair(name0, ecKeyParams0);
      ByteBuffer.allocateDirect(0);
      Name name1 = new Name();
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator1 = KeyLocator.getFromSignature(sha256WithEcdsaSignature0);
      keyLocator1.getKeyName();
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.sign((ByteBuffer) null, name1, digestAlgorithm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Name name0 = new Name("Ax");
      Name name1 = new Name(name0);
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      try { 
        memoryPrivateKeyStorage0.sign(byteBuffer0, name1, digestAlgorithm0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MemoryPrivateKeyStorage: Cannot find private key /Ax
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      try { 
        memoryPrivateKeyStorage0.sign((ByteBuffer) null, name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MemoryPrivateKeyStorage: Cannot find private key /
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      KeyType keyType0 = KeyType.AES;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(137);
      try { 
        memoryPrivateKeyStorage0.setKeyPairForKeyName(name0, keyType0, byteBuffer0, byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PublicKey: Error decoding the public key: Unimplemented DER type 0
         //
         verifyException("net.named_data.jndn.security.certificate.PublicKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      ArrayList<PublicKey> arrayList0 = new ArrayList<PublicKey>();
      Name name0 = new Name(arrayList0);
      KeyType keyType0 = KeyType.RSA;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      KeyType keyType1 = KeyType.EC;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      try { 
        memoryPrivateKeyStorage0.setKeyPairForKeyName(name0, keyType1, byteBuffer0, byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PublicKey: Error decoding the public key: Unimplemented DER type 0
         //
         verifyException("net.named_data.jndn.security.certificate.PublicKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.setKeyPairForKeyName(name0, (ByteBuffer) null, (ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.der.DerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      KeyType keyType0 = KeyType.EC;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)13;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      MemoryPrivateKeyStorage.PrivateKey memoryPrivateKeyStorage_PrivateKey0 = null;
      try {
        memoryPrivateKeyStorage_PrivateKey0 = memoryPrivateKeyStorage0.new PrivateKey(keyType0, byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // KeyFactory: PKCS8EncodedKeySpec is not supported for EC: java.security.InvalidKeyException: IOException : null
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage$PrivateKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      KeyType keyType0 = KeyType.EC;
      MemoryPrivateKeyStorage.PrivateKey memoryPrivateKeyStorage_PrivateKey0 = null;
      try {
        memoryPrivateKeyStorage_PrivateKey0 = memoryPrivateKeyStorage0.new PrivateKey(keyType0, (ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.spec.EncodedKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      KeyType keyType0 = KeyType.RSA;
      MemoryPrivateKeyStorage.PrivateKey memoryPrivateKeyStorage_PrivateKey0 = null;
      try {
        memoryPrivateKeyStorage_PrivateKey0 = memoryPrivateKeyStorage0.new PrivateKey(keyType0, (ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.spec.EncodedKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name.Component[] name_ComponentArray0 = new Name.Component[2];
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      Sha256WithRsaSignature sha256WithRsaSignature1 = new Sha256WithRsaSignature(sha256WithRsaSignature0);
      Blob blob0 = sha256WithRsaSignature1.getSignature();
      try { 
        Name.Component.fromImplicitSha256Digest(blob0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Name.Component.fromImplicitSha256Digest: The digest length must be 32 bytes
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }
}
