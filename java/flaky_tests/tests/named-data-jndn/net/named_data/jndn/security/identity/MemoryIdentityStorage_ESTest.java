/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:57:42 GMT 2022
 */

package net.named_data.jndn.security.identity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import net.named_data.jndn.ComponentType;
import net.named_data.jndn.DigestSha256Signature;
import net.named_data.jndn.HmacWithSha256Signature;
import net.named_data.jndn.Interest;
import net.named_data.jndn.KeyLocator;
import net.named_data.jndn.Name;
import net.named_data.jndn.encoding.WireFormat;
import net.named_data.jndn.security.KeyType;
import net.named_data.jndn.security.certificate.IdentityCertificate;
import net.named_data.jndn.security.identity.MemoryIdentityStorage;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MemoryIdentityStorage_ESTest extends MemoryIdentityStorage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name("NACK");
      KeyType keyType0 = KeyType.EC;
      Name name1 = new Name("NACK");
      memoryIdentityStorage0.addKey(name0, keyType0, (Blob) null);
      memoryIdentityStorage0.setDefaultCertificateNameForKey(name1, name0);
      assertEquals(2L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name("NACK");
      Name name1 = new Name("NACK");
      memoryIdentityStorage0.setDefaultCertificateNameForKey(name1, name0);
      assertNotSame(name1, name0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      Name.Component[] name_ComponentArray0 = new Name.Component[1];
      byte[] byteArray0 = new byte[0];
      ComponentType componentType0 = ComponentType.GENERIC;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0);
      name_ComponentArray0[0] = name_Component0;
      Name name0 = new Name(name_ComponentArray0);
      Interest interest0 = new Interest(name0);
      KeyType keyType0 = KeyType.AES;
      Blob blob0 = wireFormat0.encodeInterest(interest0);
      memoryIdentityStorage0.addKey(name0, keyType0, blob0);
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      KeyLocator keyLocator0 = hmacWithSha256Signature0.getKeyLocator();
      Name name1 = keyLocator0.getKeyName();
      memoryIdentityStorage0.setDefaultKeyNameForIdentity(name0, name1);
      assertEquals(0L, name1.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      Name.Component[] name_ComponentArray0 = new Name.Component[1];
      byte[] byteArray0 = new byte[0];
      ComponentType componentType0 = ComponentType.GENERIC;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0);
      name_ComponentArray0[0] = name_Component0;
      Name name0 = new Name(name_ComponentArray0);
      Interest interest0 = new Interest(name0);
      name0.set("js_/F3u,P-N");
      KeyType keyType0 = KeyType.AES;
      Blob blob0 = wireFormat0.encodeInterest(interest0);
      memoryIdentityStorage0.addKey(name0, keyType0, blob0);
      assertEquals("tpm-memory:", memoryIdentityStorage0.getTpmLocator());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name("zu1*FTWP#h");
      KeyType keyType0 = KeyType.RSA;
      Blob blob0 = new Blob();
      memoryIdentityStorage0.addKey(name0, keyType0, blob0);
      Blob blob1 = memoryIdentityStorage0.getKey(name0);
      assertSame(blob1, blob0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name("vJek,");
      KeyType keyType0 = KeyType.AES;
      Blob blob0 = new Blob("vJek,");
      memoryIdentityStorage0.addKey(name0, keyType0, blob0);
      Blob blob1 = memoryIdentityStorage0.getKey(name0);
      assertFalse(blob1.isNull());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name("NACK");
      KeyType keyType0 = KeyType.RSA;
      memoryIdentityStorage0.addKey(name0, keyType0, (Blob) null);
      boolean boolean0 = memoryIdentityStorage0.doesKeyExist(name0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Name name0 = new Name("]( @\"tUf3nn.e?N");
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      boolean boolean0 = memoryIdentityStorage0.doesKeyExist(name0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      KeyLocator keyLocator0 = hmacWithSha256Signature0.getKeyLocator();
      Name name0 = keyLocator0.getKeyName();
      memoryIdentityStorage0.addIdentity(name0);
      boolean boolean0 = memoryIdentityStorage0.doesIdentityExist(name0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name();
      boolean boolean0 = memoryIdentityStorage0.doesIdentityExist(name0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      IdentityCertificate identityCertificate0 = new IdentityCertificate();
      memoryIdentityStorage0.addCertificate(identityCertificate0);
      Name name0 = new Name();
      boolean boolean0 = memoryIdentityStorage0.doesCertificateExist(name0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name();
      boolean boolean0 = memoryIdentityStorage0.doesCertificateExist(name0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.setDefaultKeyNameForIdentity((Name) null, (Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.setDefaultIdentity((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      Name name0 = new Name(arrayList0);
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.setDefaultIdentity(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.Name$Component (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6d1a1d9a)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.setDefaultCertificateNameForKey((Name) null, (Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      Name name0 = new Name(arrayList0);
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.setDefaultCertificateNameForKey(name0, name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.Name$Component (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6d1a1d9a)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.getKey((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) memoryIdentityStorage0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.getKey(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.security.identity.MemoryIdentityStorage cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.security.identity.MemoryIdentityStorage and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6d1a1d9a)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.getDefaultKeyNameForIdentity((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) memoryIdentityStorage0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.getDefaultKeyNameForIdentity(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.security.identity.MemoryIdentityStorage cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.security.identity.MemoryIdentityStorage and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6d1a1d9a)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.getDefaultCertificateNameForKey((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) memoryIdentityStorage0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.getDefaultCertificateNameForKey(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.security.identity.MemoryIdentityStorage cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.security.identity.MemoryIdentityStorage and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6d1a1d9a)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.getCertificate((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) memoryIdentityStorage0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.getCertificate(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.security.identity.MemoryIdentityStorage cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.security.identity.MemoryIdentityStorage and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6d1a1d9a)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) memoryIdentityStorage0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.doesKeyExist(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.security.identity.MemoryIdentityStorage cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.security.identity.MemoryIdentityStorage and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6d1a1d9a)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) memoryIdentityStorage0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.doesIdentityExist(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.security.identity.MemoryIdentityStorage cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.security.identity.MemoryIdentityStorage and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6d1a1d9a)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) memoryIdentityStorage0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.doesCertificateExist(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.security.identity.MemoryIdentityStorage cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.security.identity.MemoryIdentityStorage and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6d1a1d9a)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      KeyType keyType0 = KeyType.EC;
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.addKey((Name) null, keyType0, (Blob) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) memoryIdentityStorage0);
      Name name0 = new Name(arrayList0);
      KeyType keyType0 = KeyType.EC;
      Blob blob0 = new Blob((Blob) null);
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.addKey(name0, keyType0, blob0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.security.identity.MemoryIdentityStorage cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.security.identity.MemoryIdentityStorage and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6d1a1d9a)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.addIdentity((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) memoryIdentityStorage0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.addIdentity(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.security.identity.MemoryIdentityStorage cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.security.identity.MemoryIdentityStorage and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6d1a1d9a)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.addCertificate((IdentityCertificate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      KeyType keyType0 = KeyType.RSA;
      DigestSha256Signature digestSha256Signature0 = new DigestSha256Signature();
      Blob blob0 = digestSha256Signature0.getSignature();
      memoryIdentityStorage0.addKey(name0, keyType0, blob0);
      assertEquals("tpm-memory:", memoryIdentityStorage0.getTpmLocator());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name("NACK");
      Name name1 = memoryIdentityStorage0.getNewKeyName(name0, false);
      memoryIdentityStorage0.setDefaultKeyNameForIdentity(name1, name0);
      assertFalse(name1.equals((Object)name0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name("net.named_data.jndn.secuity.identity.MemoryIdentityStorage$1");
      try { 
        memoryIdentityStorage0.setDefaultKeyNameForIdentity(name0, name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The specified identity name does not match the key name
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name();
      memoryIdentityStorage0.addIdentity(name0);
      memoryIdentityStorage0.setDefaultIdentity(name0);
      assertEquals(0L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name();
      memoryIdentityStorage0.setDefaultIdentity(name0);
      assertEquals("tpm-memory:", memoryIdentityStorage0.getTpmLocator());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name("net.named_data.jndn.security.identity.MemoryIdentityStorage$1");
      KeyType keyType0 = KeyType.AES;
      memoryIdentityStorage0.addKey(name0, keyType0, (Blob) null);
      try { 
        memoryIdentityStorage0.getDefaultCertificateNameForKey(name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No default certificate set.
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name();
      try { 
        memoryIdentityStorage0.getDefaultCertificateNameForKey(name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Key not found.
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name();
      memoryIdentityStorage0.addIdentity(name0);
      try { 
        memoryIdentityStorage0.getDefaultKeyNameForIdentity(name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No default key set.
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name();
      try { 
        memoryIdentityStorage0.getDefaultCertificateNameForIdentity(name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Identity not found.
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      try { 
        memoryIdentityStorage0.getDefaultIdentity();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MemoryIdentityStorage.getDefaultIdentity: The default identity is not defined
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name();
      try { 
        memoryIdentityStorage0.getCertificate(name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MemoryIdentityStorage.getKey: The certificate does not exist
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name();
      IdentityCertificate identityCertificate0 = new IdentityCertificate();
      memoryIdentityStorage0.addCertificate(identityCertificate0);
      try { 
        memoryIdentityStorage0.getCertificate(name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MemoryIdentityStorage.getKey: The certificate cannot be decoded
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name("vJek,");
      try { 
        memoryIdentityStorage0.getKey(name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MemoryIdentityStorage.getKey: The key does not exist
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name();
      try { 
        memoryIdentityStorage0.getKey(name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MemoryIdentityStorage.getKey: Empty keyName
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name("vJek,");
      KeyType keyType0 = KeyType.AES;
      Blob blob0 = new Blob("vJek,");
      memoryIdentityStorage0.addKey(name0, keyType0, blob0);
      memoryIdentityStorage0.addKey(name0, keyType0, blob0);
      assertEquals(1, name0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      IdentityCertificate identityCertificate0 = new IdentityCertificate();
      memoryIdentityStorage0.addCertificate(identityCertificate0);
      memoryIdentityStorage0.addCertificate(identityCertificate0);
      assertTrue(identityCertificate0.isTooEarly());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name("UTC");
      memoryIdentityStorage0.addIdentity(name0);
      memoryIdentityStorage0.addIdentity(name0);
      assertEquals(2L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name("NACK");
      KeyType keyType0 = KeyType.RSA;
      memoryIdentityStorage0.addKey(name0, keyType0, (Blob) null);
      Blob blob0 = memoryIdentityStorage0.getKey(name0);
      assertNull(blob0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name("NACK");
      KeyType keyType0 = KeyType.EC;
      memoryIdentityStorage0.addKey(name0, keyType0, (Blob) null);
      memoryIdentityStorage0.setDefaultCertificateNameForKey(name0, name0);
      Name name1 = memoryIdentityStorage0.getDefaultCertificateNameForKey(name0);
      assertNotSame(name1, name0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name();
      memoryIdentityStorage0.addIdentity(name0);
      memoryIdentityStorage0.setDefaultKeyNameForIdentity(name0, name0);
      Name name1 = memoryIdentityStorage0.getDefaultKeyNameForIdentity(name0);
      assertEquals(0, name1.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.doesCertificateExist((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Name name0 = new Name();
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.deletePublicKeyInfo(name0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryIdentityStorage.deletePublicKeyInfo is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Name name0 = new Name();
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.deleteIdentityInfo(name0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryIdentityStorage.deleteIdentityInfo is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      ArrayList<Blob> arrayList0 = new ArrayList<Blob>();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.getAllIdentities(arrayList0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryIdentityStorage.getAllIdentities not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.deleteCertificateInfo(name0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryIdentityStorage.deleteCertificateInfo is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      String string0 = memoryIdentityStorage0.getTpmLocator();
      assertEquals("tpm-memory:", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.activateKey(name0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryIdentityStorage.activateKey not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Name name0 = new Name();
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.getAllKeyNamesOfIdentity(name0, (ArrayList) null, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryIdentityStorage.getAllKeyNamesOfIdentity not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.doesIdentityExist((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ArrayList<Blob> arrayList0 = new ArrayList<Blob>();
      Name name0 = new Name(arrayList0);
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.getAllCertificateNamesOfKey(name0, arrayList0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryIdentityStorage.getAllCertificateNamesOfKey not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.deactivateKey((Name) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryIdentityStorage.deactivateKey not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.revokeIdentity();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryIdentityStorage.revokeIdentity not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      // Undeclared exception!
      try { 
        memoryIdentityStorage0.doesKeyExist((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryIdentityStorage", e);
      }
  }
}
