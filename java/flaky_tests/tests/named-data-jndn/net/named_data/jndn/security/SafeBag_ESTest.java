/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:44:26 GMT 2022
 */

package net.named_data.jndn.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import net.named_data.jndn.ControlParameters;
import net.named_data.jndn.Data;
import net.named_data.jndn.HmacWithSha256Signature;
import net.named_data.jndn.KeyLocator;
import net.named_data.jndn.Name;
import net.named_data.jndn.Sha256WithEcdsaSignature;
import net.named_data.jndn.Sha256WithRsaSignature;
import net.named_data.jndn.encoding.WireFormat;
import net.named_data.jndn.security.DigestAlgorithm;
import net.named_data.jndn.security.SafeBag;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SafeBag_ESTest extends SafeBag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Name name0 = new Name("y>9s$Ps9?>U7fu");
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      Blob blob0 = sha256WithEcdsaSignature0.getSignature();
      ControlParameters controlParameters0 = new ControlParameters();
      Blob blob1 = controlParameters0.wireEncode();
      SafeBag safeBag0 = null;
      try {
        safeBag0 = new SafeBag(name0, blob0, blob1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Error decoding public key org.evosuite.runtime.mock.java.lang.MockThrowable: PublicKey: Error decoding the public key: Unimplemented DER type 104
         //
         verifyException("net.named_data.jndn.security.SafeBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Data data0 = new Data();
      Blob blob0 = new Blob("");
      SafeBag safeBag0 = new SafeBag(data0, blob0);
      byte[] byteArray0 = blob0.getImmutableArray();
      Blob blob1 = safeBag0.wireEncode();
      WireFormat wireFormat0 = new WireFormat();
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      KeyLocator keyLocator0 = sha256WithRsaSignature0.getKeyLocator();
      Name name0 = keyLocator0.getKeyName();
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      SafeBag safeBag1 = null;
      try {
        safeBag1 = new SafeBag(name0, blob1, blob0, byteBuffer0, digestAlgorithm0, wireFormat0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Error decoding public key org.evosuite.runtime.mock.java.lang.MockThrowable: PublicKey: Error decoding the public key: DerNode.parse: The input length is too small
         //
         verifyException("net.named_data.jndn.security.SafeBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Data data0 = new Data();
      Blob blob0 = new Blob("");
      SafeBag safeBag0 = new SafeBag(data0, blob0);
      Blob blob1 = safeBag0.wireEncode();
      safeBag0.wireDecode(blob1);
      assertFalse(blob1.isNull());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Data data0 = new Data();
      Blob blob0 = Name.fromEscapedString("SESs|[-Mn");
      SafeBag safeBag0 = new SafeBag(data0, blob0);
      Blob blob1 = safeBag0.wireEncode();
      byte[] byteArray0 = blob1.getImmutableArray();
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      safeBag0.wireDecode(byteBuffer0);
      assertTrue(byteBuffer0.hasArray());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Data data0 = new Data();
      Blob blob0 = Name.fromEscapedString("");
      SafeBag safeBag0 = new SafeBag(data0, blob0);
      Blob blob1 = safeBag0.wireEncode();
      byte[] byteArray0 = blob1.getImmutableArray();
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      SafeBag safeBag1 = new SafeBag(byteBuffer0);
      assertFalse(safeBag1.equals((Object)safeBag0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Name name0 = new Name();
      Data data0 = new Data(name0);
      SafeBag safeBag0 = new SafeBag(data0, (Blob) null);
      Blob blob0 = safeBag0.getPrivateKeyBag();
      assertNull(blob0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ControlParameters controlParameters0 = new ControlParameters();
      Blob blob0 = controlParameters0.wireEncode();
      Data data0 = new Data();
      SafeBag safeBag0 = new SafeBag(data0, blob0);
      Blob blob1 = safeBag0.getPrivateKeyBag();
      assertFalse(blob1.isNull());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Data data0 = new Data();
      SafeBag safeBag0 = new SafeBag(data0, (Blob) null);
      // Undeclared exception!
      try { 
        safeBag0.wireEncode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.SafeBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Blob blob0 = new Blob();
      Data data0 = new Data();
      SafeBag safeBag0 = new SafeBag(data0, blob0);
      // Undeclared exception!
      try { 
        safeBag0.wireDecode(blob0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Name name0 = new Name();
      Data data0 = new Data(name0);
      SafeBag safeBag0 = new SafeBag(data0, (Blob) null);
      // Undeclared exception!
      try { 
        safeBag0.wireDecode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Blob blob0 = new Blob();
      SafeBag safeBag0 = null;
      try {
        safeBag0 = new SafeBag(blob0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Name name0 = new Name();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      SafeBag safeBag0 = null;
      try {
        safeBag0 = new SafeBag(name0, (Blob) null, (Blob) null, (ByteBuffer) null, digestAlgorithm0, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.certificate.PublicKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Name name0 = new Name();
      Blob blob0 = new Blob("pjTsd+oI4O");
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      SafeBag safeBag0 = null;
      try {
        safeBag0 = new SafeBag(name0, blob0, blob0, (ByteBuffer) null, digestAlgorithm0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Error decoding public key org.evosuite.runtime.mock.java.lang.MockThrowable: PublicKey: Error decoding the public key: Unimplemented DER type 112
         //
         verifyException("net.named_data.jndn.security.SafeBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Blob blob0 = new Blob();
      Name name0 = new Name();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      Blob blob1 = new Blob(byteArray0);
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      SafeBag safeBag0 = null;
      try {
        safeBag0 = new SafeBag(name0, blob0, blob1, (ByteBuffer) null, digestAlgorithm0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Name name0 = new Name();
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      Blob blob0 = hmacWithSha256Signature0.getSignature();
      int[] intArray0 = new int[7];
      intArray0[0] = (-91);
      intArray0[1] = (-899);
      Blob blob1 = new Blob(intArray0);
      SafeBag safeBag0 = null;
      try {
        safeBag0 = new SafeBag(name0, blob0, blob1, (ByteBuffer) null, digestAlgorithm0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newLimit > capacity: (127 > 7)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Name name0 = new Name();
      SafeBag safeBag0 = null;
      try {
        safeBag0 = new SafeBag(name0, (Blob) null, (Blob) null, (ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.certificate.PublicKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Name name0 = new Name();
      Blob blob0 = new Blob("net.named_data.jndn.security.DigestAlgorithm");
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      intArray0[1] = 36;
      Blob blob1 = new Blob(intArray0);
      SafeBag safeBag0 = null;
      try {
        safeBag0 = new SafeBag(name0, blob0, blob1, (ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newLimit > capacity: (38 > 3)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Name name0 = new Name();
      int[] intArray0 = new int[1];
      intArray0[0] = (-3152);
      Blob blob0 = new Blob(intArray0);
      SafeBag safeBag0 = null;
      try {
        safeBag0 = new SafeBag(name0, blob0, blob0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SafeBag safeBag0 = null;
      try {
        safeBag0 = new SafeBag((Data) null, (Blob) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Data", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SafeBag safeBag0 = null;
      try {
        safeBag0 = new SafeBag((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Blob blob0 = new Blob(":A9&:2+Aiv5-F=");
      Data data0 = new Data();
      SafeBag safeBag0 = new SafeBag(data0, blob0);
      try { 
        safeBag0.wireDecode(blob0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Did not get the expected TLV type
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Data data0 = new Data();
      Blob blob0 = Name.fromEscapedString("SESs|[-Mn");
      SafeBag safeBag0 = new SafeBag(data0, blob0);
      byte[] byteArray0 = blob0.getImmutableArray();
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      try { 
        safeBag0.wireDecode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Did not get the expected TLV type
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Data data0 = new Data();
      Blob blob0 = new Blob("");
      SafeBag safeBag0 = new SafeBag(data0, blob0);
      Data data1 = safeBag0.getCertificate();
      assertNotSame(data0, data1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Blob blob0 = new Blob("");
      SafeBag safeBag0 = null;
      try {
        safeBag0 = new SafeBag(blob0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Read past the end of the input
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Blob blob0 = new Blob();
      Name name0 = new Name();
      SafeBag safeBag0 = null;
      try {
        safeBag0 = new SafeBag(name0, blob0, blob0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.der.DerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Blob blob0 = new Blob();
      Name name0 = new Name();
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      SafeBag safeBag0 = null;
      try {
        safeBag0 = new SafeBag(name0, blob0, blob0, (ByteBuffer) null, digestAlgorithm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.der.DerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Name name0 = new Name();
      Blob blob0 = new Blob("net.named_data.jndn.security.DigestAlgorithm");
      SafeBag safeBag0 = null;
      try {
        safeBag0 = new SafeBag(name0, blob0, blob0, (ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Error decoding public key org.evosuite.runtime.mock.java.lang.MockThrowable: PublicKey: Error decoding the public key: Unimplemented DER type 110
         //
         verifyException("net.named_data.jndn.security.SafeBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Blob blob0 = new Blob();
      Data data0 = new Data();
      SafeBag safeBag0 = new SafeBag(data0, blob0);
      Blob blob1 = safeBag0.getPrivateKeyBag();
      assertTrue(blob1.isNull());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Blob blob0 = Name.fromEscapedString("SESs|[-Mn");
      byte[] byteArray0 = blob0.getImmutableArray();
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      SafeBag safeBag0 = null;
      try {
        safeBag0 = new SafeBag(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Did not get the expected TLV type
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Data data0 = new Data();
      Blob blob0 = new Blob("");
      SafeBag safeBag0 = new SafeBag(data0, blob0);
      Blob blob1 = safeBag0.wireEncode();
      SafeBag safeBag1 = new SafeBag(blob1);
      assertFalse(safeBag1.equals((Object)safeBag0));
  }
}
