/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 01:02:30 GMT 2022
 */

package net.named_data.jndn.security.identity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import net.named_data.jndn.KeyLocator;
import net.named_data.jndn.Name;
import net.named_data.jndn.Sha256WithRsaSignature;
import net.named_data.jndn.security.DigestAlgorithm;
import net.named_data.jndn.security.KeyClass;
import net.named_data.jndn.security.KeyParams;
import net.named_data.jndn.security.KeyType;
import net.named_data.jndn.security.identity.FilePrivateKeyStorage;
import net.named_data.jndn.security.identity.MemoryPrivateKeyStorage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PrivateKeyStorage_ESTest extends PrivateKeyStorage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage("X");
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      KeyLocator keyLocator0 = sha256WithRsaSignature0.getKeyLocator();
      Name name0 = keyLocator0.getKeyName();
      KeyClass keyClass0 = KeyClass.PRIVATE;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("X/il7asoJjJEMhngUeSt4tHVu8Zxx4EFG%FDeJfL3+oPE=.pri");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "X");
      boolean boolean1 = filePrivateKeyStorage0.doesKeyExist(name0, keyClass0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      try { 
        memoryPrivateKeyStorage0.sign((ByteBuffer) null, name0, digestAlgorithm0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MemoryPrivateKeyStorage: Cannot find private key /
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.sign((ByteBuffer) null, (Name) null, digestAlgorithm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      try { 
        memoryPrivateKeyStorage0.sign((ByteBuffer) null, name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MemoryPrivateKeyStorage: Cannot find private key /
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage("Name.Component.fromImplicitSha256Digest: The digest length must be 32 bytes");
      byte[] byteArray0 = new byte[6];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) "Name.Component.fromImplicitSha256Digest: The digest length must be 32 bytes");
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        filePrivateKeyStorage0.sign(byteBuffer0, name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.String cannot be cast to class net.named_data.jndn.Name$Component (java.lang.String is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @426010fa)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      try { 
        memoryPrivateKeyStorage0.getPublicKey(name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MemoryPrivateKeyStorage: Cannot find public key /
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.getPublicKey((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      KeyParams keyParams0 = mock(KeyParams.class, new ViolatedAssumptionAnswer());
      doReturn((KeyType) null, (KeyType) null, (KeyType) null).when(keyParams0).getKeyType();
      try { 
        memoryPrivateKeyStorage0.generateKeyPair(name0, keyParams0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot generate a key pair of type null
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.generateKeyPair(name0, (KeyParams) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      KeyType keyType0 = KeyType.EC;
      KeyParams keyParams0 = mock(KeyParams.class, new ViolatedAssumptionAnswer());
      doReturn(keyType0, keyType0).when(keyParams0).getKeyType();
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.generateKeyPair(name0, keyParams0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.security.KeyParams$MockitoMock$1206458636 cannot be cast to class net.named_data.jndn.security.EcKeyParams (net.named_data.jndn.security.KeyParams$MockitoMock$1206458636 and net.named_data.jndn.security.EcKeyParams are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @426010fa)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.generateKey((Name) null, (KeyParams) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryPrivateKeyStorage.generateKey is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.encrypt(name0, (ByteBuffer) null, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryPrivateKeyStorage.encrypt is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      KeyClass keyClass0 = KeyClass.PUBLIC;
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.doesKeyExist((Name) null, keyClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.deleteKeyPair((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-914));
      arrayList0.add(integer0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        filePrivateKeyStorage0.deleteKeyPair(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Integer cannot be cast to class net.named_data.jndn.Name$Component (java.lang.Integer is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @426010fa)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.decrypt((Name) null, (ByteBuffer) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MemoryPrivateKeyStorage.decrypt is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        filePrivateKeyStorage0.encrypt(name0, (ByteBuffer) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilePrivateKeyStorage.encrypt is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.FilePrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MemoryPrivateKeyStorage memoryPrivateKeyStorage0 = new MemoryPrivateKeyStorage();
      // Undeclared exception!
      try { 
        memoryPrivateKeyStorage0.sign((ByteBuffer) null, (Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.MemoryPrivateKeyStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage();
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        filePrivateKeyStorage0.decrypt(name0, (ByteBuffer) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilePrivateKeyStorage.decrypt is not implemented
         //
         verifyException("net.named_data.jndn.security.identity.FilePrivateKeyStorage", e);
      }
  }
}
