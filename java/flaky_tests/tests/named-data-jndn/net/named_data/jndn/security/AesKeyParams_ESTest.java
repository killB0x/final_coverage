/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 01:17:46 GMT 2022
 */

package net.named_data.jndn.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.Name;
import net.named_data.jndn.security.AesKeyParams;
import net.named_data.jndn.security.KeyIdType;
import net.named_data.jndn.security.KeyType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AesKeyParams_ESTest extends AesKeyParams_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KeyType keyType0 = AesKeyParams.getType();
      assertEquals(128, keyType0.getNumericType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AesKeyParams aesKeyParams0 = new AesKeyParams((-873));
      int int0 = aesKeyParams0.getKeySize();
      assertEquals((-873), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AesKeyParams aesKeyParams0 = null;
      try {
        aesKeyParams0 = new AesKeyParams((Name.Component) null, 1226);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.KeyParams", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AesKeyParams aesKeyParams0 = null;
      try {
        aesKeyParams0 = new AesKeyParams((Name.Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.KeyParams", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Name.Component name_Component0 = new Name.Component();
      AesKeyParams aesKeyParams0 = null;
      try {
        aesKeyParams0 = new AesKeyParams(name_Component0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // KeyParams: keyId is empty
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Name.Component name_Component0 = new Name.Component("javax.xml.bind.DatatypeConverter");
      AesKeyParams aesKeyParams0 = new AesKeyParams(name_Component0, (-2406));
      assertEquals((-2406), aesKeyParams0.getKeySize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = AesKeyParams.getDefaultSize();
      assertEquals(64, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KeyIdType keyIdType0 = KeyIdType.RANDOM;
      AesKeyParams aesKeyParams0 = new AesKeyParams(64, keyIdType0);
      assertEquals(64, aesKeyParams0.getKeySize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AesKeyParams aesKeyParams0 = new AesKeyParams();
      assertEquals(64, aesKeyParams0.getDefaultSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Name.Component name_Component0 = new Name.Component();
      AesKeyParams aesKeyParams0 = null;
      try {
        aesKeyParams0 = new AesKeyParams(name_Component0, (-2406));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // KeyParams: keyId is empty
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KeyIdType keyIdType0 = KeyIdType.USER_SPECIFIED;
      AesKeyParams aesKeyParams0 = null;
      try {
        aesKeyParams0 = new AesKeyParams(64, keyIdType0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // KeyParams: KeyIdType is USER_SPECIFIED
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AesKeyParams aesKeyParams0 = new AesKeyParams(0);
      int int0 = aesKeyParams0.getKeySize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromTimestamp(64);
      AesKeyParams aesKeyParams0 = new AesKeyParams(name_Component0);
      int int0 = aesKeyParams0.getKeySize();
      assertEquals(64, int0);
  }
}
