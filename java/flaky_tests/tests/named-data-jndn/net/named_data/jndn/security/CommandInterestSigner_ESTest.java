/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 01:17:04 GMT 2022
 */

package net.named_data.jndn.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import net.named_data.jndn.Interest;
import net.named_data.jndn.Name;
import net.named_data.jndn.encoding.WireFormat;
import net.named_data.jndn.security.CommandInterestSigner;
import net.named_data.jndn.security.KeyChain;
import net.named_data.jndn.security.KeyType;
import net.named_data.jndn.security.SigningInfo;
import net.named_data.jndn.security.identity.IdentityManager;
import net.named_data.jndn.security.identity.IdentityStorage;
import net.named_data.jndn.security.identity.PrivateKeyStorage;
import net.named_data.jndn.security.pib.PibKey;
import net.named_data.jndn.security.pib.PibMemory;
import net.named_data.jndn.security.pib.detail.PibKeyImpl;
import net.named_data.jndn.security.policy.SelfVerifyPolicyManager;
import net.named_data.jndn.security.tpm.TpmBackEndMemory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CommandInterestSigner_ESTest extends CommandInterestSigner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      KeyChain keyChain0 = new KeyChain(pibMemory0, tpmBackEndMemory0);
      CommandInterestSigner commandInterestSigner0 = new CommandInterestSigner(keyChain0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Name name0 = new Name(arrayList0);
      SigningInfo.SignerType signingInfo_SignerType0 = SigningInfo.SignerType.NULL;
      SigningInfo signingInfo0 = new SigningInfo(signingInfo_SignerType0, name0);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      Interest interest0 = commandInterestSigner0.makeCommandInterest(name0, signingInfo0, wireFormat0);
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      KeyChain keyChain0 = new KeyChain(pibMemory0, tpmBackEndMemory0);
      SigningInfo signingInfo0 = new SigningInfo();
      CommandInterestSigner commandInterestSigner0 = new CommandInterestSigner(keyChain0);
      Interest interest0 = commandInterestSigner0.makeCommandInterest((Name) null, signingInfo0);
      assertFalse(interest0.getDidSetCanBePrefix_());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      KeyChain keyChain0 = new KeyChain(pibMemory0, tpmBackEndMemory0);
      CommandInterestSigner commandInterestSigner0 = new CommandInterestSigner(keyChain0);
      Name name0 = new Name();
      Interest interest0 = commandInterestSigner0.makeCommandInterest(name0);
      assertEquals((-1), interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CommandInterestSigner commandInterestSigner0 = new CommandInterestSigner((KeyChain) null);
      System.setCurrentTimeMillis((-2));
      SigningInfo.SignerType signingInfo_SignerType0 = SigningInfo.SignerType.ID;
      SigningInfo signingInfo0 = new SigningInfo(signingInfo_SignerType0);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      // Undeclared exception!
      commandInterestSigner0.makeCommandInterest((Name) null, signingInfo0, wireFormat0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      KeyChain keyChain0 = new KeyChain(pibMemory0, tpmBackEndMemory0);
      CommandInterestSigner commandInterestSigner0 = new CommandInterestSigner(keyChain0);
      SigningInfo signingInfo0 = new SigningInfo("");
      WireFormat wireFormat0 = new WireFormat();
      // Undeclared exception!
      try { 
        commandInterestSigner0.makeCommandInterest((Name) null, signingInfo0, wireFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // encodeSignatureInfo is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      KeyChain keyChain0 = new KeyChain(pibMemory0, tpmBackEndMemory0);
      CommandInterestSigner commandInterestSigner0 = new CommandInterestSigner(keyChain0);
      SigningInfo.SignerType signingInfo_SignerType0 = SigningInfo.SignerType.KEY;
      SigningInfo signingInfo0 = new SigningInfo(signingInfo_SignerType0);
      // Undeclared exception!
      try { 
        commandInterestSigner0.makeCommandInterest((Name) null, signingInfo0, (WireFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key name `/` does not follow the naming conventions
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      KeyChain keyChain0 = new KeyChain(pibMemory0, tpmBackEndMemory0);
      CommandInterestSigner commandInterestSigner0 = new CommandInterestSigner(keyChain0);
      PibKeyImpl pibKeyImpl0 = mock(PibKeyImpl.class, new ViolatedAssumptionAnswer());
      doReturn((KeyType) null, (KeyType) null).when(pibKeyImpl0).getKeyType();
      doReturn((Name) null).when(pibKeyImpl0).getName();
      PibKey pibKey0 = new PibKey(pibKeyImpl0);
      SigningInfo signingInfo0 = new SigningInfo(pibKey0);
      try { 
        commandInterestSigner0.makeCommandInterest((Name) null, signingInfo0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported key type
         //
         verifyException("net.named_data.jndn.security.KeyChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CommandInterestSigner commandInterestSigner0 = new CommandInterestSigner((KeyChain) null);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      commandInterestSigner0.makeCommandInterest((Name) null, (SigningInfo) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      KeyChain keyChain0 = new KeyChain(pibMemory0, tpmBackEndMemory0);
      CommandInterestSigner commandInterestSigner0 = new CommandInterestSigner(keyChain0);
      Name name0 = new Name("");
      SigningInfo signingInfo0 = new SigningInfo();
      signingInfo0.setSigningIdentity(name0);
      try { 
        commandInterestSigner0.makeCommandInterest(name0, signingInfo0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Signing identity `/` does not exist
         //
         verifyException("net.named_data.jndn.security.KeyChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      KeyChain keyChain0 = new KeyChain(pibMemory0, tpmBackEndMemory0);
      CommandInterestSigner commandInterestSigner0 = new CommandInterestSigner(keyChain0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Name name0 = new Name(arrayList0);
      SigningInfo.SignerType signingInfo_SignerType0 = SigningInfo.SignerType.KEY;
      SigningInfo signingInfo0 = new SigningInfo(signingInfo_SignerType0);
      // Undeclared exception!
      try { 
        commandInterestSigner0.makeCommandInterest(name0, signingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key name `/` does not follow the naming conventions
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IdentityManager identityManager0 = new IdentityManager((IdentityStorage) null, (PrivateKeyStorage) null);
      SelfVerifyPolicyManager selfVerifyPolicyManager0 = new SelfVerifyPolicyManager();
      KeyChain keyChain0 = new KeyChain(identityManager0, selfVerifyPolicyManager0);
      System.setCurrentTimeMillis((-3900L));
      CommandInterestSigner commandInterestSigner0 = new CommandInterestSigner(keyChain0);
      SigningInfo signingInfo0 = new SigningInfo("");
      // Undeclared exception!
      try { 
        commandInterestSigner0.makeCommandInterest((Name) null, signingInfo0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // TLV integer value may not be negative
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CommandInterestSigner commandInterestSigner0 = new CommandInterestSigner((KeyChain) null);
      System.setCurrentTimeMillis((-4));
      // Undeclared exception!
      commandInterestSigner0.makeCommandInterest((Name) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      Name name0 = new Name();
      pibMemory0.addIdentity(name0);
      KeyChain keyChain0 = new KeyChain(pibMemory0, tpmBackEndMemory0);
      CommandInterestSigner commandInterestSigner0 = new CommandInterestSigner(keyChain0);
      try { 
        commandInterestSigner0.makeCommandInterest(name0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Signing identity `/` does not have default certificate
         //
         verifyException("net.named_data.jndn.security.KeyChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PibMemory pibMemory0 = new PibMemory();
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      KeyChain keyChain0 = new KeyChain(pibMemory0, tpmBackEndMemory0);
      CommandInterestSigner commandInterestSigner0 = new CommandInterestSigner(keyChain0);
      WireFormat wireFormat0 = new WireFormat();
      WireFormat.setDefaultWireFormat(wireFormat0);
      // Undeclared exception!
      try { 
        commandInterestSigner0.makeCommandInterest((Name) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // encodeSignatureInfo is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IdentityManager identityManager0 = new IdentityManager((IdentityStorage) null, (PrivateKeyStorage) null);
      SelfVerifyPolicyManager selfVerifyPolicyManager0 = new SelfVerifyPolicyManager();
      KeyChain keyChain0 = new KeyChain(identityManager0, selfVerifyPolicyManager0);
      System.setCurrentTimeMillis((-3900L));
      CommandInterestSigner commandInterestSigner0 = new CommandInterestSigner(keyChain0);
      // Undeclared exception!
      try { 
        commandInterestSigner0.makeCommandInterest((Name) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // TLV integer value may not be negative
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CommandInterestSigner commandInterestSigner0 = new CommandInterestSigner((KeyChain) null);
      WireFormat wireFormat0 = new WireFormat();
      // Undeclared exception!
      try { 
        commandInterestSigner0.makeCommandInterest((Name) null, (SigningInfo) null, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.CommandInterestSigner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CommandInterestSigner commandInterestSigner0 = new CommandInterestSigner((KeyChain) null);
      Name name0 = SigningInfo.getDigestSha256Identity();
      // Undeclared exception!
      try { 
        commandInterestSigner0.makeCommandInterest(name0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.CommandInterestSigner", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CommandInterestSigner commandInterestSigner0 = new CommandInterestSigner((KeyChain) null);
      // Undeclared exception!
      try { 
        commandInterestSigner0.makeCommandInterest((Name) null, (SigningInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.CommandInterestSigner", e);
      }
  }
}
