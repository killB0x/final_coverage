/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:45:26 GMT 2022
 */

package net.named_data.jndn.security.certificate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import net.named_data.jndn.encrypt.algo.EncryptAlgorithmType;
import net.named_data.jndn.security.DigestAlgorithm;
import net.named_data.jndn.security.certificate.PublicKey;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PublicKey_ESTest extends PublicKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 48;
      Blob blob0 = new Blob(intArray0);
      PublicKey publicKey0 = null;
      try {
        publicKey0 = new PublicKey(blob0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // PublicKey: Error decoding the public key: getSequence: Child index is out of bounds
         //
         verifyException("net.named_data.jndn.security.certificate.PublicKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PublicKey publicKey0 = new PublicKey();
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.RsaOaep;
      // Undeclared exception!
      try { 
        publicKey0.encrypt((byte[]) null, encryptAlgorithmType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.spec.EncodedKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.AesEcb;
      PublicKey publicKey0 = new PublicKey();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      Blob blob0 = new Blob(byteBuffer0, false);
      // Undeclared exception!
      try { 
        publicKey0.encrypt(blob0, encryptAlgorithmType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PublicKey publicKey0 = null;
      try {
        publicKey0 = new PublicKey((Blob) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.certificate.PublicKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Blob blob0 = new Blob("0");
      PublicKey publicKey0 = null;
      try {
        publicKey0 = new PublicKey(blob0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)6;
      Blob blob0 = new Blob(byteArray0);
      PublicKey publicKey0 = null;
      try {
        publicKey0 = new PublicKey(blob0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newLimit > capacity: (8 > 2)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PublicKey publicKey0 = new PublicKey();
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      // Undeclared exception!
      try { 
        publicKey0.getDigest(digestAlgorithm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.Common", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PublicKey publicKey0 = new PublicKey();
      // Undeclared exception!
      try { 
        publicKey0.toDer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.der.DerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PublicKey publicKey0 = new PublicKey();
      // Undeclared exception!
      try { 
        publicKey0.getDigest();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.Common", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PublicKey publicKey0 = new PublicKey();
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.RsaPkcs;
      // Undeclared exception!
      try { 
        publicKey0.encrypt((Blob) null, encryptAlgorithmType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.certificate.PublicKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PublicKey publicKey0 = new PublicKey();
      Blob blob0 = publicKey0.getKeyDer();
      assertTrue(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PublicKey publicKey0 = new PublicKey();
      publicKey0.getKeyType();
  }
}
