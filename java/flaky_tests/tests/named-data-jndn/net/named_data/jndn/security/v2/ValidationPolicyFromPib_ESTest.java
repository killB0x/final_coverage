/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:41:51 GMT 2022
 */

package net.named_data.jndn.security.v2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.Data;
import net.named_data.jndn.Interest;
import net.named_data.jndn.security.certificate.Certificate;
import net.named_data.jndn.security.pib.Pib;
import net.named_data.jndn.security.v2.CertificateV2;
import net.named_data.jndn.security.v2.DataValidationFailureCallback;
import net.named_data.jndn.security.v2.DataValidationState;
import net.named_data.jndn.security.v2.DataValidationSuccessCallback;
import net.named_data.jndn.security.v2.InterestValidationFailureCallback;
import net.named_data.jndn.security.v2.InterestValidationState;
import net.named_data.jndn.security.v2.InterestValidationSuccessCallback;
import net.named_data.jndn.security.v2.ValidationPolicy;
import net.named_data.jndn.security.v2.ValidationPolicyFromPib;
import net.named_data.jndn.security.v2.ValidationState;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValidationPolicyFromPib_ESTest extends ValidationPolicyFromPib_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ValidationPolicyFromPib validationPolicyFromPib0 = new ValidationPolicyFromPib((Pib) null);
      Interest interest0 = new Interest("I/.Zk|C%u)j/");
      // Undeclared exception!
      try { 
        validationPolicyFromPib0.checkPolicy(interest0, (ValidationState) null, (ValidationPolicy.ValidationContinuation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Interest interest0 = new Interest();
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      ValidationPolicyFromPib validationPolicyFromPib0 = new ValidationPolicyFromPib((Pib) null);
      ValidationPolicy.getKeyLocatorName(interest0, (ValidationState) interestValidationState0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        validationPolicyFromPib0.checkPolicy(interest0, (ValidationState) interestValidationState0, validationPolicy_ValidationContinuation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ValidationState already has an outcome
         //
         verifyException("net.named_data.jndn.security.v2.ValidationState", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ValidationPolicyFromPib validationPolicyFromPib0 = new ValidationPolicyFromPib((Pib) null);
      CertificateV2 certificateV2_0 = new CertificateV2();
      // Undeclared exception!
      try { 
        validationPolicyFromPib0.checkPolicy((Data) certificateV2_0, (ValidationState) null, (ValidationPolicy.ValidationContinuation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ValidationPolicyFromPib validationPolicyFromPib0 = new ValidationPolicyFromPib((Pib) null);
      Certificate certificate0 = new Certificate();
      DataValidationSuccessCallback dataValidationSuccessCallback0 = mock(DataValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      DataValidationFailureCallback dataValidationFailureCallback0 = mock(DataValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      DataValidationState dataValidationState0 = new DataValidationState(certificate0, dataValidationSuccessCallback0, dataValidationFailureCallback0);
      dataValidationState0.bypassValidation_();
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        validationPolicyFromPib0.checkPolicy((Data) certificate0, (ValidationState) dataValidationState0, validationPolicy_ValidationContinuation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ValidationState already has an outcome
         //
         verifyException("net.named_data.jndn.security.v2.ValidationState", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Interest interest0 = new Interest();
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      ValidationPolicyFromPib validationPolicyFromPib0 = new ValidationPolicyFromPib((Pib) null);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      validationPolicyFromPib0.checkPolicy(interest0, (ValidationState) interestValidationState0, validationPolicy_ValidationContinuation0);
      assertFalse(interestValidationState0.isOutcomeSuccess());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ValidationPolicyFromPib validationPolicyFromPib0 = new ValidationPolicyFromPib((Pib) null);
      Certificate certificate0 = new Certificate();
      DataValidationSuccessCallback dataValidationSuccessCallback0 = mock(DataValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      DataValidationFailureCallback dataValidationFailureCallback0 = mock(DataValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      DataValidationState dataValidationState0 = new DataValidationState(certificate0, dataValidationSuccessCallback0, dataValidationFailureCallback0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      validationPolicyFromPib0.checkPolicy((Data) certificate0, (ValidationState) dataValidationState0, validationPolicy_ValidationContinuation0);
      assertTrue(dataValidationState0.hasOutcome());
  }
}
