/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:34:28 GMT 2022
 */

package net.named_data.jndn.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.Name;
import net.named_data.jndn.security.DigestAlgorithm;
import net.named_data.jndn.security.SigningInfo;
import net.named_data.jndn.security.ValidityPeriod;
import net.named_data.jndn.security.pib.PibIdentity;
import net.named_data.jndn.security.pib.PibKey;
import net.named_data.jndn.security.pib.PibMemory;
import net.named_data.jndn.security.pib.detail.PibIdentityImpl;
import net.named_data.jndn.security.pib.detail.PibKeyImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SigningInfo_ESTest extends SigningInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SigningInfo signingInfo0 = null;
      try {
        signingInfo0 = new SigningInfo(":=J/T?J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid signing string scheme
         //
         verifyException("net.named_data.jndn.security.SigningInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo();
      SigningInfo signingInfo1 = new SigningInfo(signingInfo0);
      assertFalse(signingInfo1.equals((Object)signingInfo0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo();
      Name name0 = new Name("Invalid signing string scheme");
      SigningInfo signingInfo1 = signingInfo0.setSigningKeyName(name0);
      assertEquals(SigningInfo.SignerType.KEY, signingInfo1.getSignerType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo();
      Name name0 = new Name("0G]/ws{?c");
      SigningInfo signingInfo1 = signingInfo0.setSigningCertificateName(name0);
      assertSame(signingInfo0, signingInfo1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo((PibKey) null);
      ValidityPeriod validityPeriod0 = new ValidityPeriod((-351.25725), 0.0);
      signingInfo0.setValidityPeriod(validityPeriod0);
      ValidityPeriod validityPeriod1 = signingInfo0.getValidityPeriod();
      assertFalse(validityPeriod1.isValid());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Name name0 = SigningInfo.getDigestSha256Identity();
      SigningInfo.SignerType signingInfo_SignerType0 = SigningInfo.SignerType.CERT;
      SigningInfo signingInfo0 = new SigningInfo(signingInfo_SignerType0);
      signingInfo0.setSigningIdentity(name0);
      Name name1 = signingInfo0.getSignerName();
      assertEquals(3, name1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo();
      Name name0 = new Name("2}0#Jn_^U");
      PibMemory pibMemory0 = new PibMemory();
      PibIdentityImpl pibIdentityImpl0 = new PibIdentityImpl(name0, pibMemory0, true);
      PibIdentity pibIdentity0 = new PibIdentity(pibIdentityImpl0);
      signingInfo0.setPibIdentity(pibIdentity0);
      PibIdentity pibIdentity1 = signingInfo0.getPibIdentity();
      assertSame(pibIdentity1, pibIdentity0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo();
      // Undeclared exception!
      try { 
        signingInfo0.setValidityPeriod((ValidityPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.ValidityPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo();
      // Undeclared exception!
      try { 
        signingInfo0.setSigningIdentity((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PibKey pibKey0 = new PibKey((PibKeyImpl) null);
      SigningInfo signingInfo0 = null;
      try {
        signingInfo0 = new SigningInfo(pibKey0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid key instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SigningInfo.SignerType signingInfo_SignerType0 = SigningInfo.SignerType.KEY;
      SigningInfo signingInfo0 = null;
      try {
        signingInfo0 = new SigningInfo(signingInfo_SignerType0, (Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SigningInfo signingInfo0 = null;
      try {
        signingInfo0 = new SigningInfo((SigningInfo.SignerType) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // SigningInfo: The signerType is not valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SigningInfo signingInfo0 = null;
      try {
        signingInfo0 = new SigningInfo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SigningInfo signingInfo0 = null;
      try {
        signingInfo0 = new SigningInfo("id:/-%7FbaaAtqY9%7Dt%21FF/a0%3El%400/sha256digest=00");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Name.Component.fromImplicitSha256Digest: The digest length must be 32 bytes
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo();
      PibIdentity pibIdentity0 = new PibIdentity((PibIdentityImpl) null);
      // Undeclared exception!
      try { 
        signingInfo0.setPibIdentity(pibIdentity0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid Identity instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo();
      SigningInfo signingInfo1 = signingInfo0.setPibIdentity((PibIdentity) null);
      assertSame(signingInfo1, signingInfo0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SigningInfo.SignerType signingInfo_SignerType0 = SigningInfo.SignerType.CERT;
      SigningInfo signingInfo0 = new SigningInfo(signingInfo_SignerType0);
      Name name0 = signingInfo0.getSignerName();
      assertEquals(0, name0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo();
      // Undeclared exception!
      try { 
        signingInfo0.setSigningCertificateName((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo();
      // Undeclared exception!
      try { 
        signingInfo0.setSigningKeyName((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Name name0 = SigningInfo.getDigestSha256Identity();
      SigningInfo signingInfo0 = null;
      try {
        signingInfo0 = new SigningInfo((SigningInfo.SignerType) null, name0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // SigningInfo: The signerType is not valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo();
      signingInfo0.setPibKey((PibKey) null);
      String string0 = signingInfo0.toString();
      assertEquals("key:/", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Name name0 = SigningInfo.getDigestSha256Identity();
      SigningInfo.SignerType signingInfo_SignerType0 = SigningInfo.SignerType.CERT;
      SigningInfo signingInfo0 = new SigningInfo(signingInfo_SignerType0);
      SigningInfo signingInfo1 = signingInfo0.setSigningIdentity(name0);
      String string0 = signingInfo1.toString();
      assertEquals("id:/localhost/identity/digest-sha256", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo();
      String string0 = signingInfo0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo();
      // Undeclared exception!
      try { 
        signingInfo0.getPibKey();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // getPibKey: The signer type is not SignerType.KEY
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo();
      // Undeclared exception!
      try { 
        signingInfo0.getPibIdentity();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // getPibIdentity: The signer type is not SignerType.ID
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo("id:");
      PibIdentity pibIdentity0 = signingInfo0.getPibIdentity();
      assertNull(pibIdentity0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SigningInfo.SignerType signingInfo_SignerType0 = SigningInfo.SignerType.SHA256;
      SigningInfo signingInfo0 = new SigningInfo(signingInfo_SignerType0);
      PibKey pibKey0 = new PibKey((PibKeyImpl) null);
      // Undeclared exception!
      try { 
        signingInfo0.setPibKey(pibKey0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid key instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PibIdentity pibIdentity0 = new PibIdentity((PibIdentityImpl) null);
      SigningInfo signingInfo0 = null;
      try {
        signingInfo0 = new SigningInfo(pibIdentity0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Invalid Identity instance
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo("id:/localhost/identity/digest-sha256");
      assertEquals(SigningInfo.SignerType.SHA256, signingInfo0.getSignerType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SigningInfo signingInfo0 = null;
      try {
        signingInfo0 = new SigningInfo("Name.Component.fromImplicitSha256Digest");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid signing string cannot represent SigningInfo
         //
         verifyException("net.named_data.jndn.security.SigningInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SigningInfo.SignerType signingInfo_SignerType0 = SigningInfo.SignerType.CERT;
      SigningInfo signingInfo0 = new SigningInfo(signingInfo_SignerType0);
      DigestAlgorithm digestAlgorithm0 = DigestAlgorithm.SHA256;
      SigningInfo signingInfo1 = signingInfo0.setDigestAlgorithm(digestAlgorithm0);
      assertEquals(DigestAlgorithm.SHA256, signingInfo1.getDigestAlgorithm());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo((PibKey) null);
      ValidityPeriod validityPeriod0 = new ValidityPeriod((-351.25725), 0.0);
      validityPeriod0.setPeriod(2790.39224796954, 2790.39224796954);
      signingInfo0.setValidityPeriod(validityPeriod0);
      ValidityPeriod validityPeriod1 = signingInfo0.getValidityPeriod();
      assertTrue(validityPeriod1.hasPeriod());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SigningInfo.SignerType signingInfo_SignerType0 = SigningInfo.SignerType.CERT;
      Name name0 = SigningInfo.getDigestSha256Identity();
      SigningInfo signingInfo0 = new SigningInfo(signingInfo_SignerType0, name0);
      Name name1 = PibKey.constructKeyName(name0, (Name.Component) null);
      signingInfo0.setSigningIdentity(name1);
      // Undeclared exception!
      try { 
        signingInfo0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo("id:/-_1h/%}E%FF/%00%00");
      signingInfo0.getValidityPeriod();
      assertEquals(SigningInfo.SignerType.ID, signingInfo0.getSignerType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo("");
      DigestAlgorithm digestAlgorithm0 = signingInfo0.getDigestAlgorithm();
      assertEquals(DigestAlgorithm.SHA256, digestAlgorithm0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo("key:");
      PibKey pibKey0 = signingInfo0.getPibKey();
      assertNull(pibKey0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo((PibIdentity) null);
      assertEquals(DigestAlgorithm.SHA256, signingInfo0.getDigestAlgorithm());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo();
      SigningInfo.SignerType signingInfo_SignerType0 = signingInfo0.getSignerType();
      assertEquals(SigningInfo.SignerType.NULL, signingInfo_SignerType0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SigningInfo signingInfo0 = null;
      try {
        signingInfo0 = new SigningInfo((SigningInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.SigningInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SigningInfo.SignerType signingInfo_SignerType0 = SigningInfo.SignerType.CERT;
      SigningInfo signingInfo0 = new SigningInfo(signingInfo_SignerType0);
      String string0 = signingInfo0.toString();
      assertEquals("cert:/", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo("cert:");
      assertEquals(SigningInfo.SignerType.CERT, signingInfo0.getSignerType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SigningInfo signingInfo0 = new SigningInfo();
      signingInfo0.setSha256Signing();
      String string0 = signingInfo0.toString();
      assertEquals("id:/localhost/identity/digest-sha256", string0);
  }
}
