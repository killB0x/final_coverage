/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:55:23 GMT 2022
 */

package net.named_data.jndn.security.v2.validator_config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.Interest;
import net.named_data.jndn.Name;
import net.named_data.jndn.security.v2.CertificateV2;
import net.named_data.jndn.security.v2.DataValidationFailureCallback;
import net.named_data.jndn.security.v2.DataValidationState;
import net.named_data.jndn.security.v2.DataValidationSuccessCallback;
import net.named_data.jndn.security.v2.InterestValidationFailureCallback;
import net.named_data.jndn.security.v2.InterestValidationState;
import net.named_data.jndn.security.v2.InterestValidationSuccessCallback;
import net.named_data.jndn.security.v2.ValidationState;
import net.named_data.jndn.security.v2.validator_config.ConfigNameRelation;
import net.named_data.jndn.security.v2.validator_config.ConfigNameRelationChecker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConfigNameRelationChecker_ESTest extends ConfigNameRelationChecker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CertificateV2 certificateV2_0 = new CertificateV2();
      Name.Component[] name_ComponentArray0 = new Name.Component[5];
      name_ComponentArray0[0] = certificateV2_0.KEY_COMPONENT;
      name_ComponentArray0[1] = certificateV2_0.KEY_COMPONENT;
      name_ComponentArray0[2] = certificateV2_0.KEY_COMPONENT;
      name_ComponentArray0[3] = name_ComponentArray0[0];
      name_ComponentArray0[4] = name_ComponentArray0[2];
      Name name0 = new Name(name_ComponentArray0);
      DataValidationSuccessCallback dataValidationSuccessCallback0 = mock(DataValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      DataValidationFailureCallback dataValidationFailureCallback0 = mock(DataValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      DataValidationState dataValidationState0 = new DataValidationState(certificateV2_0, dataValidationSuccessCallback0, dataValidationFailureCallback0);
      ConfigNameRelation.Relation configNameRelation_Relation0 = ConfigNameRelation.Relation.EQUAL;
      ConfigNameRelationChecker configNameRelationChecker0 = new ConfigNameRelationChecker(name0, configNameRelation_Relation0);
      Name name1 = CertificateV2.extractKeyNameFromCertName(name0);
      boolean boolean0 = configNameRelationChecker0.check(false, name0, name1, dataValidationState0);
      assertTrue(dataValidationState0.hasOutcome());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConfigNameRelation.Relation configNameRelation_Relation0 = ConfigNameRelation.Relation.EQUAL;
      ConfigNameRelationChecker configNameRelationChecker0 = new ConfigNameRelationChecker((Name) null, configNameRelation_Relation0);
      // Undeclared exception!
      try { 
        configNameRelationChecker0.checkNames((Name) null, (Name) null, (ValidationState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConfigNameRelation.Relation configNameRelation_Relation0 = ConfigNameRelation.Relation.IS_PREFIX_OF;
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      CertificateV2 certificateV2_0 = new CertificateV2();
      Name.Component[] name_ComponentArray0 = new Name.Component[9];
      name_ComponentArray0[0] = certificateV2_0.KEY_COMPONENT;
      name_ComponentArray0[1] = certificateV2_0.KEY_COMPONENT;
      name_ComponentArray0[2] = certificateV2_0.KEY_COMPONENT;
      name_ComponentArray0[3] = certificateV2_0.KEY_COMPONENT;
      name_ComponentArray0[4] = certificateV2_0.KEY_COMPONENT;
      name_ComponentArray0[5] = certificateV2_0.KEY_COMPONENT;
      name_ComponentArray0[6] = certificateV2_0.KEY_COMPONENT;
      name_ComponentArray0[7] = certificateV2_0.KEY_COMPONENT;
      name_ComponentArray0[8] = certificateV2_0.KEY_COMPONENT;
      Name name0 = new Name(name_ComponentArray0);
      ConfigNameRelationChecker configNameRelationChecker0 = new ConfigNameRelationChecker(name0, configNameRelation_Relation0);
      Interest interest0 = new Interest(name0, (-1.0));
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      configNameRelationChecker0.checkNames(name0, name0, interestValidationState0);
      // Undeclared exception!
      try { 
        configNameRelationChecker0.checkNames(name0, name0, interestValidationState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ValidationState already has an outcome
         //
         verifyException("net.named_data.jndn.security.v2.ValidationState", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      CertificateV2 certificateV2_0 = new CertificateV2();
      Name.Component[] name_ComponentArray0 = new Name.Component[5];
      name_ComponentArray0[0] = certificateV2_0.KEY_COMPONENT;
      name_ComponentArray0[1] = certificateV2_0.KEY_COMPONENT;
      name_ComponentArray0[3] = name_ComponentArray0[0];
      Name name0 = new Name(name_ComponentArray0);
      Interest interest0 = new Interest(name0, 797.834535);
      Name name1 = CertificateV2.extractIdentityFromCertName(name0);
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      ConfigNameRelation.Relation configNameRelation_Relation0 = ConfigNameRelation.Relation.IS_STRICT_PREFIX_OF;
      ConfigNameRelationChecker configNameRelationChecker0 = new ConfigNameRelationChecker(name1, configNameRelation_Relation0);
      boolean boolean0 = configNameRelationChecker0.checkNames(name0, name0, interestValidationState0);
      assertTrue(boolean0);
  }
}
