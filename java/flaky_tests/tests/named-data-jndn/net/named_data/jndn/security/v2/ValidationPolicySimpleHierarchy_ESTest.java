/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:20:17 GMT 2022
 */

package net.named_data.jndn.security.v2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.Data;
import net.named_data.jndn.Interest;
import net.named_data.jndn.Name;
import net.named_data.jndn.security.certificate.IdentityCertificate;
import net.named_data.jndn.security.v2.CertificateV2;
import net.named_data.jndn.security.v2.DataValidationFailureCallback;
import net.named_data.jndn.security.v2.DataValidationState;
import net.named_data.jndn.security.v2.DataValidationSuccessCallback;
import net.named_data.jndn.security.v2.InterestValidationFailureCallback;
import net.named_data.jndn.security.v2.InterestValidationState;
import net.named_data.jndn.security.v2.InterestValidationSuccessCallback;
import net.named_data.jndn.security.v2.ValidationPolicy;
import net.named_data.jndn.security.v2.ValidationPolicySimpleHierarchy;
import net.named_data.jndn.security.v2.ValidationState;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValidationPolicySimpleHierarchy_ESTest extends ValidationPolicySimpleHierarchy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      Name name0 = new Name();
      Interest interest0 = new Interest(name0);
      // Undeclared exception!
      try { 
        validationPolicySimpleHierarchy0.checkPolicy(interest0, (ValidationState) null, (ValidationPolicy.ValidationContinuation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      CertificateV2 certificateV2_0 = new CertificateV2();
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        validationPolicySimpleHierarchy0.checkPolicy((Data) certificateV2_0, (ValidationState) null, validationPolicy_ValidationContinuation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.v2.ValidationPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      Interest interest0 = new Interest((Name) null);
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation0 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
      validationPolicySimpleHierarchy0.checkPolicy(interest0, (ValidationState) interestValidationState0, validationPolicy_ValidationContinuation0);
      ValidationPolicy.ValidationContinuation validationPolicy_ValidationContinuation1 = mock(ValidationPolicy.ValidationContinuation.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      IdentityCertificate identityCertificate0 = new IdentityCertificate();
      DataValidationSuccessCallback dataValidationSuccessCallback0 = mock(DataValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      DataValidationFailureCallback dataValidationFailureCallback0 = mock(DataValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      DataValidationState dataValidationState0 = new DataValidationState(identityCertificate0, dataValidationSuccessCallback0, dataValidationFailureCallback0);
      validationPolicySimpleHierarchy0.checkPolicy((Data) identityCertificate0, (ValidationState) dataValidationState0, (ValidationPolicy.ValidationContinuation) null);
      // Undeclared exception!
      try { 
        validationPolicySimpleHierarchy0.checkPolicy((Data) identityCertificate0, (ValidationState) dataValidationState0, (ValidationPolicy.ValidationContinuation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ValidationState already has an outcome
         //
         verifyException("net.named_data.jndn.security.v2.ValidationState", e);
      }
  }
}
