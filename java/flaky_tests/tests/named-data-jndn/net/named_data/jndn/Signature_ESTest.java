/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 01:07:54 GMT 2022
 */

package net.named_data.jndn;

import org.junit.Test;
import static org.junit.Assert.*;
import net.named_data.jndn.DigestSha256Signature;
import net.named_data.jndn.GenericSignature;
import net.named_data.jndn.HmacWithSha256Signature;
import net.named_data.jndn.KeyLocator;
import net.named_data.jndn.KeyLocatorType;
import net.named_data.jndn.Sha256WithEcdsaSignature;
import net.named_data.jndn.encoding.WireFormat;
import net.named_data.jndn.encrypt.EncryptedContent;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Signature_ESTest extends Signature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DigestSha256Signature digestSha256Signature0 = new DigestSha256Signature();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      EncryptedContent encryptedContent0 = new EncryptedContent();
      Blob blob0 = wireFormat0.encodeEncryptedContentV2(encryptedContent0);
      digestSha256Signature0.setSignature(blob0);
      assertFalse(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DigestSha256Signature digestSha256Signature0 = new DigestSha256Signature();
      Blob blob0 = digestSha256Signature0.getSignature();
      assertTrue(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GenericSignature genericSignature0 = new GenericSignature();
      long long0 = genericSignature0.getChangeCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      KeyLocator keyLocator0 = hmacWithSha256Signature0.getKeyLocator();
      KeyLocatorType keyLocatorType0 = KeyLocatorType.NONE;
      keyLocator0.setType(keyLocatorType0);
      long long0 = hmacWithSha256Signature0.getChangeCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DigestSha256Signature digestSha256Signature0 = new DigestSha256Signature();
      Object object0 = digestSha256Signature0.clone();
      assertNotSame(object0, digestSha256Signature0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      Blob blob0 = new Blob("mk\"K");
      sha256WithEcdsaSignature0.setSignature(blob0);
      Blob blob1 = sha256WithEcdsaSignature0.getSignature();
      assertFalse(blob1.isNull());
  }
}
