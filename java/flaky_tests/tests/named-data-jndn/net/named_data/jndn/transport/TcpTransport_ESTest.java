/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:25:03 GMT 2022
 */

package net.named_data.jndn.transport;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.SocketChannel;
import net.named_data.jndn.Node;
import net.named_data.jndn.transport.TcpTransport;
import net.named_data.jndn.transport.Transport;
import net.named_data.jndn.transport.UdpTransport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TcpTransport_ESTest extends TcpTransport_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = TcpTransport.getIsLocal("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      SocketChannel socketChannel0 = SocketChannel.open();
      tcpTransport0.channel_ = socketChannel0;
      // Undeclared exception!
      try { 
        tcpTransport0.send((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      // Undeclared exception!
      try { 
        tcpTransport0.isLocal((Transport.ConnectionInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      // Undeclared exception!
      try { 
        tcpTransport0.isLocal(transport_ConnectionInfo0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.TcpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.TcpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @71ce0b1f)
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      Node node0 = new Node(tcpTransport0, (Transport.ConnectionInfo) null);
      MockThread mockThread0 = new MockThread();
      // Undeclared exception!
      try { 
        tcpTransport0.connect((Transport.ConnectionInfo) null, node0, mockThread0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      TcpTransport.ConnectionInfo tcpTransport_ConnectionInfo0 = new TcpTransport.ConnectionInfo((String) null);
      Node node0 = new Node(tcpTransport0, tcpTransport_ConnectionInfo0);
      MockThread mockThread0 = new MockThread();
      // Undeclared exception!
      try { 
        tcpTransport0.connect(tcpTransport_ConnectionInfo0, node0, mockThread0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Node node0 = new Node(tcpTransport0, transport_ConnectionInfo0);
      MockThread mockThread0 = new MockThread();
      // Undeclared exception!
      try { 
        tcpTransport0.connect(transport_ConnectionInfo0, node0, mockThread0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.TcpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.TcpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @71ce0b1f)
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      boolean boolean0 = tcpTransport0.getIsConnected();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = TcpTransport.getIsLocal("\"H");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TcpTransport.ConnectionInfo tcpTransport_ConnectionInfo0 = new TcpTransport.ConnectionInfo("");
      tcpTransport_ConnectionInfo0.getHost();
      assertEquals(6363, tcpTransport_ConnectionInfo0.getPort());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      SocketChannel socketChannel0 = SocketChannel.open();
      tcpTransport0.channel_ = socketChannel0;
      tcpTransport0.close();
      assertFalse(tcpTransport0.getIsConnected());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      tcpTransport0.close();
      assertFalse(tcpTransport0.isAsync());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      SocketChannel socketChannel0 = SocketChannel.open();
      tcpTransport0.channel_ = socketChannel0;
      boolean boolean0 = tcpTransport0.getIsConnected();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      tcpTransport0.processEvents();
      assertFalse(tcpTransport0.getIsConnected());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      SocketChannel socketChannel0 = SocketChannel.open();
      tcpTransport0.channel_ = socketChannel0;
      UdpTransport udpTransport0 = new UdpTransport();
      ByteBuffer byteBuffer0 = udpTransport0.inputBuffer_;
      byteBuffer0.compact();
      tcpTransport0.send(byteBuffer0);
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=8800 lim=8800 cap=8800]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      try { 
        tcpTransport0.send((ByteBuffer) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot send because the socket is not open.  Use connect.
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      SocketChannel socketChannel0 = SocketChannel.open();
      tcpTransport0.channel_ = socketChannel0;
      UdpTransport udpTransport0 = new UdpTransport();
      // Undeclared exception!
      try { 
        tcpTransport0.send(udpTransport0.inputBuffer_);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      TcpTransport.ConnectionInfo tcpTransport_ConnectionInfo0 = new TcpTransport.ConnectionInfo(",");
      tcpTransport0.isLocal(tcpTransport_ConnectionInfo0);
      TcpTransport.ConnectionInfo tcpTransport_ConnectionInfo1 = new TcpTransport.ConnectionInfo("E");
      tcpTransport0.isLocal(tcpTransport_ConnectionInfo1);
      assertEquals(6363, tcpTransport_ConnectionInfo1.getPort());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TcpTransport.ConnectionInfo tcpTransport_ConnectionInfo0 = new TcpTransport.ConnectionInfo("");
      int int0 = tcpTransport_ConnectionInfo0.getPort();
      assertEquals(6363, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TcpTransport.ConnectionInfo tcpTransport_ConnectionInfo0 = new TcpTransport.ConnectionInfo("", 32);
      assertEquals(32, tcpTransport_ConnectionInfo0.getPort());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      boolean boolean0 = tcpTransport0.isAsync();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TcpTransport.ConnectionInfo tcpTransport_ConnectionInfo0 = new TcpTransport.ConnectionInfo("");
      TcpTransport tcpTransport0 = new TcpTransport();
      tcpTransport0.isLocal(tcpTransport_ConnectionInfo0);
      tcpTransport0.isLocal(tcpTransport_ConnectionInfo0);
      assertEquals(6363, tcpTransport_ConnectionInfo0.getPort());
  }
}
