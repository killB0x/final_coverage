/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:52:02 GMT 2022
 */

package net.named_data.jndn.transport;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import net.named_data.jndn.Node;
import net.named_data.jndn.transport.AsyncTcpTransport;
import net.named_data.jndn.transport.Transport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AsyncTcpTransport_ESTest extends AsyncTcpTransport_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport((ScheduledExecutorService) null);
      asyncTcpTransport0.processEvents();
      assertEquals(10000, AsyncTcpTransport.DEFAULT_LOCK_TIMEOUT_MS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport((ScheduledExecutorService) null);
      // Undeclared exception!
      try { 
        asyncTcpTransport0.isLocal((Transport.ConnectionInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.transport.AsyncTcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport((ScheduledExecutorService) null);
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      // Undeclared exception!
      try { 
        asyncTcpTransport0.isLocal(transport_ConnectionInfo0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.AsyncTcpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.AsyncTcpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @112f7459)
         //
         verifyException("net.named_data.jndn.transport.AsyncTcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport((ScheduledExecutorService) null);
      boolean boolean0 = asyncTcpTransport0.getIsConnected();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsyncTcpTransport.ConnectionInfo asyncTcpTransport_ConnectionInfo0 = new AsyncTcpTransport.ConnectionInfo("");
      asyncTcpTransport_ConnectionInfo0.getHost();
      assertEquals(6363, asyncTcpTransport_ConnectionInfo0.getPort());
      assertFalse(asyncTcpTransport_ConnectionInfo0.shouldAttemptReconnection());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport((ScheduledExecutorService) null);
      try { 
        asyncTcpTransport0.send((ByteBuffer) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot send because the socket is not open.  Use connect.
         //
         verifyException("net.named_data.jndn.transport.AsyncTcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport((ScheduledExecutorService) null);
      AsyncTcpTransport.ConnectionInfo asyncTcpTransport_ConnectionInfo0 = new AsyncTcpTransport.ConnectionInfo("", 2499);
      asyncTcpTransport0.isLocal(asyncTcpTransport_ConnectionInfo0);
      assertEquals(2499, asyncTcpTransport_ConnectionInfo0.getPort());
      
      AsyncTcpTransport.ConnectionInfo asyncTcpTransport_ConnectionInfo1 = new AsyncTcpTransport.ConnectionInfo("Cannot send because the socket is not open.  Use connect.", 0, false);
      boolean boolean0 = asyncTcpTransport0.isLocal(asyncTcpTransport_ConnectionInfo1);
      assertFalse(boolean0);
      assertFalse(asyncTcpTransport_ConnectionInfo1.shouldAttemptReconnection());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncTcpTransport.ConnectionInfo asyncTcpTransport_ConnectionInfo0 = new AsyncTcpTransport.ConnectionInfo("", 8800, true);
      int int0 = asyncTcpTransport_ConnectionInfo0.getPort();
      assertEquals(8800, int0);
      assertTrue(asyncTcpTransport_ConnectionInfo0.shouldAttemptReconnection());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsyncTcpTransport.ConnectionInfo asyncTcpTransport_ConnectionInfo0 = new AsyncTcpTransport.ConnectionInfo("yZ_HX:zGSbHTmz");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(795);
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport(scheduledThreadPoolExecutor0);
      asyncTcpTransport0.isLocal(asyncTcpTransport_ConnectionInfo0);
      asyncTcpTransport0.isLocal(asyncTcpTransport_ConnectionInfo0);
      assertFalse(asyncTcpTransport_ConnectionInfo0.shouldAttemptReconnection());
      assertEquals(6363, asyncTcpTransport_ConnectionInfo0.getPort());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AsyncTcpTransport.ConnectionInfo asyncTcpTransport_ConnectionInfo0 = new AsyncTcpTransport.ConnectionInfo("", 2499);
      boolean boolean0 = asyncTcpTransport_ConnectionInfo0.shouldAttemptReconnection();
      assertFalse(boolean0);
      assertEquals(2499, asyncTcpTransport_ConnectionInfo0.getPort());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(795);
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport(scheduledThreadPoolExecutor0);
      boolean boolean0 = asyncTcpTransport0.isAsync();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport((ScheduledExecutorService) null);
      AsyncTcpTransport.ConnectionInfo asyncTcpTransport_ConnectionInfo0 = new AsyncTcpTransport.ConnectionInfo("", 2499);
      Node node0 = new Node(asyncTcpTransport0, asyncTcpTransport_ConnectionInfo0);
      MockThread mockThread0 = new MockThread();
      // Undeclared exception!
      try { 
        asyncTcpTransport0.connect(asyncTcpTransport_ConnectionInfo0, node0, mockThread0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.channels.spi.AsynchronousChannelProvider$ProviderHolder
         //
         verifyException("java.nio.channels.spi.AsynchronousChannelProvider", e);
      }
  }
}
