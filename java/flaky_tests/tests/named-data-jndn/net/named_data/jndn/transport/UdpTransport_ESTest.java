/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:35:48 GMT 2022
 */

package net.named_data.jndn.transport;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.ByteBuffer;
import net.named_data.jndn.encoding.ElementListener;
import net.named_data.jndn.transport.UdpTransport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UdpTransport_ESTest extends UdpTransport_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UdpTransport udpTransport0 = new UdpTransport();
      UdpTransport.ConnectionInfo udpTransport_ConnectionInfo0 = new UdpTransport.ConnectionInfo((String) null);
      // Undeclared exception!
      try { 
        udpTransport0.connect(udpTransport_ConnectionInfo0, (ElementListener) null, (Runnable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UdpTransport udpTransport0 = new UdpTransport();
      udpTransport0.close();
      assertFalse(udpTransport0.getIsConnected());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UdpTransport udpTransport0 = new UdpTransport();
      boolean boolean0 = udpTransport0.getIsConnected();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UdpTransport.ConnectionInfo udpTransport_ConnectionInfo0 = new UdpTransport.ConnectionInfo("", 688);
      int int0 = udpTransport_ConnectionInfo0.getPort();
      assertEquals(688, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UdpTransport.ConnectionInfo udpTransport_ConnectionInfo0 = new UdpTransport.ConnectionInfo("", 688);
      udpTransport_ConnectionInfo0.getHost();
      assertEquals(688, udpTransport_ConnectionInfo0.getPort());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UdpTransport udpTransport0 = new UdpTransport();
      udpTransport0.processEvents();
      assertFalse(udpTransport0.isAsync());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UdpTransport udpTransport0 = new UdpTransport();
      ByteBuffer byteBuffer0 = udpTransport0.inputBuffer_;
      try { 
        udpTransport0.send(byteBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot send because the socket is not open.  Use connect.
         //
         verifyException("net.named_data.jndn.transport.UdpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      UdpTransport.ConnectionInfo udpTransport_ConnectionInfo0 = new UdpTransport.ConnectionInfo("", 0);
      UdpTransport udpTransport0 = new UdpTransport();
      boolean boolean0 = udpTransport0.isLocal(udpTransport_ConnectionInfo0);
      assertFalse(boolean0);
      assertEquals(0, udpTransport_ConnectionInfo0.getPort());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      UdpTransport udpTransport0 = new UdpTransport();
      boolean boolean0 = udpTransport0.isAsync();
      assertFalse(boolean0);
  }
}
