/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:48:54 GMT 2022
 */

package net.named_data.jndn;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import net.named_data.jndn.ComponentType;
import net.named_data.jndn.ControlParameters;
import net.named_data.jndn.Data;
import net.named_data.jndn.DelegationSet;
import net.named_data.jndn.Exclude;
import net.named_data.jndn.Face;
import net.named_data.jndn.HmacWithSha256Signature;
import net.named_data.jndn.Interest;
import net.named_data.jndn.InterestFilter;
import net.named_data.jndn.KeyLocator;
import net.named_data.jndn.KeyLocatorType;
import net.named_data.jndn.Link;
import net.named_data.jndn.Name;
import net.named_data.jndn.NetworkNack;
import net.named_data.jndn.OnData;
import net.named_data.jndn.OnInterestCallback;
import net.named_data.jndn.OnNetworkNack;
import net.named_data.jndn.OnRegisterFailed;
import net.named_data.jndn.OnRegisterSuccess;
import net.named_data.jndn.OnTimeout;
import net.named_data.jndn.RegistrationOptions;
import net.named_data.jndn.Sha256WithRsaSignature;
import net.named_data.jndn.encoding.WireFormat;
import net.named_data.jndn.lp.LpPacket;
import net.named_data.jndn.security.DigestAlgorithm;
import net.named_data.jndn.security.KeyChain;
import net.named_data.jndn.security.KeyIdType;
import net.named_data.jndn.security.KeyParams;
import net.named_data.jndn.security.KeyType;
import net.named_data.jndn.security.OnInterestValidationFailed;
import net.named_data.jndn.security.OnVerifiedInterest;
import net.named_data.jndn.security.RsaKeyParams;
import net.named_data.jndn.security.SigningInfo;
import net.named_data.jndn.security.certificate.IdentityCertificate;
import net.named_data.jndn.security.identity.BasicIdentityStorage;
import net.named_data.jndn.security.identity.FilePrivateKeyStorage;
import net.named_data.jndn.security.identity.IdentityManager;
import net.named_data.jndn.security.identity.MemoryIdentityStorage;
import net.named_data.jndn.security.pib.PibIdentity;
import net.named_data.jndn.security.pib.PibImpl;
import net.named_data.jndn.security.pib.PibKey;
import net.named_data.jndn.security.policy.ConfigPolicyManager;
import net.named_data.jndn.security.policy.PolicyManager;
import net.named_data.jndn.security.tpm.TpmBackEnd;
import net.named_data.jndn.security.v2.CertificateFetcher;
import net.named_data.jndn.security.v2.CertificateRequest;
import net.named_data.jndn.security.v2.CertificateV2;
import net.named_data.jndn.security.v2.InterestValidationFailureCallback;
import net.named_data.jndn.security.v2.InterestValidationState;
import net.named_data.jndn.security.v2.InterestValidationSuccessCallback;
import net.named_data.jndn.security.v2.ValidationPolicy;
import net.named_data.jndn.security.v2.ValidationState;
import net.named_data.jndn.security.v2.Validator;
import net.named_data.jndn.transport.AsyncTcpTransport;
import net.named_data.jndn.transport.TcpTransport;
import net.named_data.jndn.transport.Transport;
import net.named_data.jndn.transport.UdpTransport;
import net.named_data.jndn.util.Blob;
import net.named_data.jndn.util.ExponentialReExpress;
import net.named_data.jndn.util.MemoryContentCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Face_ESTest extends Face_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Face face0 = new Face("", (-2258));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      CertificateRequest certificateRequest0 = new CertificateRequest();
      assertNotNull(certificateRequest0);
      assertEquals(0, certificateRequest0.nRetriesLeft_);
      
      Interest interest0 = certificateRequest0.interest_;
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      Interest interest1 = new Interest(interest0);
      assertFalse(interest1.equals((Object)interest0));
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getChildSelector());
      assertTrue(interest1.getCanBePrefix());
      assertFalse(interest1.getMustBeFresh());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertNotNull(interest1);
      assertEquals(0, certificateRequest0.nRetriesLeft_);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.expressInterest(interest1, onData0, wireFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-2258
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Name name0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Interest interest0 = new Interest("");
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getChildSelector());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      boolean boolean1 = true;
      Interest interest1 = interest0.setMustBeFresh(true);
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertTrue(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getChildSelector());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertTrue(interest1.getCanBePrefix());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertTrue(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1), interest1.getChildSelector());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertNotNull(interest1);
      assertSame(interest0, interest1);
      assertSame(interest1, interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      Interest interest2 = Face.getInterestCopy((Name) null, interest0);
      assertFalse(interest2.equals((Object)interest0));
      assertFalse(interest2.equals((Object)interest1));
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertTrue(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getChildSelector());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1), interest2.getChildSelector());
      assertEquals((-1.0), interest2.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest2.getMinSuffixComponents());
      assertTrue(interest2.getCanBePrefix());
      assertFalse(interest2.getDidSetCanBePrefix_());
      assertTrue(interest2.getDefaultCanBePrefix());
      assertEquals((-1), interest2.getMaxSuffixComponents());
      assertTrue(interest2.getMustBeFresh());
      assertEquals((-1), interest2.getSelectedDelegationIndex());
      assertNotNull(interest2);
      assertNotSame(interest0, interest2);
      assertSame(interest0, interest1);
      assertNotSame(interest2, interest0);
      assertNotSame(interest2, interest1);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      Face face0 = new Face("", 0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Face face1 = new Face("");
      assertFalse(face1.equals((Object)face0));
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertNotNull(face1);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face1, 3000.0);
      assertFalse(face1.equals((Object)face0));
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnInterestCallback onInterestCallback0 = memoryContentCache0.getStorePendingInterest();
      assertFalse(face1.equals((Object)face0));
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(onInterestCallback0);
      assertNotSame(face1, face0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, onInterestCallback0, (OnRegisterSuccess) null, onRegisterFailed0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Face face0 = new Face("", (-139));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Name name0 = null;
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout1);
      
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout1, 1266.6556241);
      assertFalse(onTimeout2.equals((Object)onTimeout1));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout2);
      assertNotSame(onTimeout1, onTimeout2);
      assertNotSame(onTimeout2, onTimeout1);
      
      WireFormat wireFormat0 = new WireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.expressInterest((Name) null, onData0, onTimeout2, wireFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-139
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, (OnInterestCallback) memoryContentCache0, onRegisterFailed0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      assertFalse(tcpTransport0.isAsync());
      assertFalse(tcpTransport0.getIsConnected());
      assertNotNull(tcpTransport0);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face0 = new Face(tcpTransport0, transport_ConnectionInfo0);
      assertFalse(tcpTransport0.isAsync());
      assertFalse(tcpTransport0.getIsConnected());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      String string0 = "FCf3y4";
      Interest interest0 = new Interest("FCf3y4");
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(interest0.getDefaultCanBePrefix());
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.expressInterest(interest0, onData0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.TcpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.TcpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @191e0536)
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Name name0 = null;
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1), interest0.getChildSelector());
      assertNotNull(interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      Exclude exclude0 = new Exclude();
      assertEquals(0L, exclude0.getChangeCount());
      assertEquals(0, exclude0.size());
      assertNotNull(exclude0);
      
      String string0 = exclude0.toUri();
      assertEquals("", string0);
      assertEquals(0L, exclude0.getChangeCount());
      assertEquals(0, exclude0.size());
      assertNotNull(string0);
      
      Exclude exclude1 = new Exclude(exclude0);
      assertFalse(exclude1.equals((Object)exclude0));
      assertEquals(0L, exclude0.getChangeCount());
      assertEquals(0, exclude0.size());
      assertEquals(0L, exclude1.getChangeCount());
      assertEquals(0, exclude1.size());
      assertNotNull(exclude1);
      
      Interest interest1 = interest0.setExclude(exclude1);
      assertFalse(exclude0.equals((Object)exclude1));
      assertFalse(exclude1.equals((Object)exclude0));
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals(0L, exclude0.getChangeCount());
      assertEquals(0, exclude0.size());
      assertEquals(0L, exclude1.getChangeCount());
      assertEquals(0, exclude1.size());
      assertEquals((-1), interest1.getChildSelector());
      assertTrue(interest1.getCanBePrefix());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertFalse(interest1.getMustBeFresh());
      assertNotNull(interest1);
      assertSame(interest0, interest1);
      assertNotSame(exclude0, exclude1);
      assertNotSame(exclude1, exclude0);
      assertSame(interest1, interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      Interest interest2 = Face.getInterestCopy((Name) null, interest0);
      assertFalse(interest2.equals((Object)interest1));
      assertFalse(interest2.equals((Object)interest0));
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest2.getSelectedDelegationIndex());
      assertEquals((-1), interest2.getMinSuffixComponents());
      assertTrue(interest2.getCanBePrefix());
      assertFalse(interest2.getDidSetCanBePrefix_());
      assertFalse(interest2.getMustBeFresh());
      assertEquals((-1), interest2.getMaxSuffixComponents());
      assertEquals((-1.0), interest2.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest2.getChildSelector());
      assertTrue(interest2.getDefaultCanBePrefix());
      assertNotNull(interest2);
      assertNotSame(interest0, interest2);
      assertSame(interest0, interest1);
      assertNotSame(interest2, interest1);
      assertNotSame(interest2, interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport(scheduledThreadPoolExecutor0);
      assertTrue(asyncTcpTransport0.isAsync());
      assertNotNull(asyncTcpTransport0);
      assertEquals(10000, AsyncTcpTransport.DEFAULT_LOCK_TIMEOUT_MS);
      assertEquals(5000, AsyncTcpTransport.DEFAULT_RECONNECT_TRY_DELAY_MS);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face0 = new Face(asyncTcpTransport0, transport_ConnectionInfo0);
      assertTrue(asyncTcpTransport0.isAsync());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      assertEquals(10000, AsyncTcpTransport.DEFAULT_LOCK_TIMEOUT_MS);
      assertEquals(5000, AsyncTcpTransport.DEFAULT_RECONNECT_TRY_DELAY_MS);
      
      OnData onData0 = null;
      // Undeclared exception!
      try { 
        face0.expressInterest((Name) null, (OnData) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.channels.spi.AsynchronousChannelProvider$ProviderHolder
         //
         verifyException("java.nio.channels.spi.AsynchronousChannelProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport(scheduledThreadPoolExecutor0);
      assertTrue(asyncTcpTransport0.isAsync());
      assertNotNull(asyncTcpTransport0);
      assertEquals(10000, AsyncTcpTransport.DEFAULT_LOCK_TIMEOUT_MS);
      assertEquals(5000, AsyncTcpTransport.DEFAULT_RECONNECT_TRY_DELAY_MS);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face0 = new Face(asyncTcpTransport0, transport_ConnectionInfo0);
      assertTrue(asyncTcpTransport0.isAsync());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      assertEquals(10000, AsyncTcpTransport.DEFAULT_LOCK_TIMEOUT_MS);
      assertEquals(5000, AsyncTcpTransport.DEFAULT_RECONNECT_TRY_DELAY_MS);
      
      Interest interest0 = new Interest("?PMILlM>rKDx9xDE");
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(interest0.getDefaultCanBePrefix());
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = ExponentialReExpress.makeOnTimeout(face0, onData0, (OnTimeout) null);
      assertTrue(asyncTcpTransport0.isAsync());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout0);
      assertEquals(10000, AsyncTcpTransport.DEFAULT_LOCK_TIMEOUT_MS);
      assertEquals(5000, AsyncTcpTransport.DEFAULT_RECONNECT_TRY_DELAY_MS);
      
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.expressInterest(interest0, onData0, onTimeout0, onNetworkNack0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.channels.spi.AsynchronousChannelProvider$ProviderHolder
         //
         verifyException("java.nio.channels.spi.AsynchronousChannelProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      assertFalse(tcpTransport0.getIsConnected());
      assertFalse(tcpTransport0.isAsync());
      assertNotNull(tcpTransport0);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face0 = new Face(tcpTransport0, transport_ConnectionInfo0);
      assertFalse(tcpTransport0.getIsConnected());
      assertFalse(tcpTransport0.isAsync());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      // Undeclared exception!
      try { 
        face0.send((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      assertFalse(tcpTransport0.isAsync());
      assertFalse(tcpTransport0.getIsConnected());
      assertNotNull(tcpTransport0);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face0 = new Face(tcpTransport0, transport_ConnectionInfo0);
      assertFalse(tcpTransport0.isAsync());
      assertFalse(tcpTransport0.getIsConnected());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      assertNotNull(sha256WithRsaSignature0);
      
      Sha256WithRsaSignature sha256WithRsaSignature1 = new Sha256WithRsaSignature(sha256WithRsaSignature0);
      assertFalse(sha256WithRsaSignature1.equals((Object)sha256WithRsaSignature0));
      assertNotNull(sha256WithRsaSignature1);
      
      KeyLocator keyLocator0 = sha256WithRsaSignature1.getKeyLocator();
      assertFalse(sha256WithRsaSignature0.equals((Object)sha256WithRsaSignature1));
      assertFalse(sha256WithRsaSignature1.equals((Object)sha256WithRsaSignature0));
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
      assertNotNull(keyLocator0);
      assertNotSame(sha256WithRsaSignature0, sha256WithRsaSignature1);
      assertNotSame(sha256WithRsaSignature1, sha256WithRsaSignature0);
      
      Name name0 = keyLocator0.getKeyName();
      assertFalse(sha256WithRsaSignature0.equals((Object)sha256WithRsaSignature1));
      assertFalse(sha256WithRsaSignature1.equals((Object)sha256WithRsaSignature0));
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      assertNotSame(sha256WithRsaSignature0, sha256WithRsaSignature1);
      assertNotSame(sha256WithRsaSignature1, sha256WithRsaSignature0);
      
      Interest interest0 = new Interest(name0, 2.0);
      assertFalse(sha256WithRsaSignature0.equals((Object)sha256WithRsaSignature1));
      assertFalse(sha256WithRsaSignature1.equals((Object)sha256WithRsaSignature0));
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals(2.0, interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertNotNull(interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      Interest interest1 = Face.getInterestCopy(name0, interest0);
      assertFalse(sha256WithRsaSignature0.equals((Object)sha256WithRsaSignature1));
      assertFalse(sha256WithRsaSignature1.equals((Object)sha256WithRsaSignature0));
      assertFalse(interest1.equals((Object)interest0));
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals(2.0, interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertTrue(interest1.getCanBePrefix());
      assertFalse(interest1.getMustBeFresh());
      assertEquals(2.0, interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertEquals((-1), interest1.getChildSelector());
      assertNotNull(interest1);
      assertNotSame(sha256WithRsaSignature0, sha256WithRsaSignature1);
      assertNotSame(sha256WithRsaSignature1, sha256WithRsaSignature0);
      assertNotSame(interest0, interest1);
      assertNotSame(interest1, interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest1, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      assertFalse(sha256WithRsaSignature0.equals((Object)sha256WithRsaSignature1));
      assertFalse(sha256WithRsaSignature1.equals((Object)sha256WithRsaSignature0));
      assertFalse(interest0.equals((Object)interest1));
      assertFalse(interest1.equals((Object)interest0));
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals(2.0, interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertTrue(interest1.getCanBePrefix());
      assertFalse(interest1.getMustBeFresh());
      assertEquals(2.0, interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(interestValidationState0.isOutcomeFailed());
      assertFalse(interestValidationState0.hasOutcome());
      assertFalse(interestValidationState0.isOutcomeSuccess());
      assertEquals(0, interestValidationState0.getDepth());
      assertNotNull(interestValidationState0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      Interest interest2 = interestValidationState0.getOriginalInterest();
      assertFalse(sha256WithRsaSignature0.equals((Object)sha256WithRsaSignature1));
      assertFalse(sha256WithRsaSignature1.equals((Object)sha256WithRsaSignature0));
      assertFalse(interest0.equals((Object)interest1));
      assertFalse(interest1.equals((Object)interest0));
      assertFalse(interest2.equals((Object)interest1));
      assertFalse(interest2.equals((Object)interest0));
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals(2.0, interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertTrue(interest1.getCanBePrefix());
      assertFalse(interest1.getMustBeFresh());
      assertEquals(2.0, interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(interestValidationState0.isOutcomeFailed());
      assertFalse(interestValidationState0.hasOutcome());
      assertFalse(interestValidationState0.isOutcomeSuccess());
      assertEquals(0, interestValidationState0.getDepth());
      assertEquals((-1), interest2.getChildSelector());
      assertFalse(interest2.getMustBeFresh());
      assertEquals((-1), interest2.getMaxSuffixComponents());
      assertFalse(interest2.getDidSetCanBePrefix_());
      assertEquals((-1), interest2.getSelectedDelegationIndex());
      assertEquals((-1), interest2.getMinSuffixComponents());
      assertTrue(interest2.getCanBePrefix());
      assertEquals(2.0, interest2.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(interest2.getDefaultCanBePrefix());
      assertNotNull(interest2);
      assertNotSame(sha256WithRsaSignature0, sha256WithRsaSignature1);
      assertNotSame(sha256WithRsaSignature1, sha256WithRsaSignature0);
      assertNotSame(interest0, interest1);
      assertNotSame(interest0, interest2);
      assertNotSame(interest1, interest0);
      assertNotSame(interest1, interest2);
      assertNotSame(interest2, interest1);
      assertNotSame(interest2, interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = ExponentialReExpress.makeOnTimeout(face0, onData0, (OnTimeout) null);
      assertFalse(tcpTransport0.isAsync());
      assertFalse(tcpTransport0.getIsConnected());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout0);
      
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.expressInterest(name0, interest2, onData0, onTimeout0, onNetworkNack0, wireFormat0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.TcpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.TcpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @191e0536)
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      CertificateV2 certificateV2_0 = new CertificateV2();
      assertNotNull(certificateV2_0);
      assertEquals((-2), CertificateV2.ISSUER_ID_OFFSET);
      assertEquals((-3), CertificateV2.KEY_ID_OFFSET);
      assertEquals(2, CertificateV2.MIN_KEY_NAME_LENGTH);
      assertEquals((-1), CertificateV2.VERSION_OFFSET);
      assertEquals(4, CertificateV2.MIN_CERT_NAME_LENGTH);
      assertEquals((-4), CertificateV2.KEY_COMPONENT_OFFSET);
      
      Name name0 = certificateV2_0.getIdentity();
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      assertEquals((-2), CertificateV2.ISSUER_ID_OFFSET);
      assertEquals((-3), CertificateV2.KEY_ID_OFFSET);
      assertEquals(2, CertificateV2.MIN_KEY_NAME_LENGTH);
      assertEquals((-1), CertificateV2.VERSION_OFFSET);
      assertEquals(4, CertificateV2.MIN_CERT_NAME_LENGTH);
      assertEquals((-4), CertificateV2.KEY_COMPONENT_OFFSET);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, (-2));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      WireFormat wireFormat0 = new WireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.registerPrefix(name0, (OnInterestCallback) memoryContentCache0, onRegisterFailed0, onRegisterSuccess0, wireFormat0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Data data0 = new Data();
      assertNotNull(data0);
      
      WireFormat wireFormat0 = new WireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.putData(data0, wireFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // encodeData is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      UdpTransport udpTransport0 = new UdpTransport();
      assertFalse(udpTransport0.isAsync());
      assertFalse(udpTransport0.getIsConnected());
      assertNotNull(udpTransport0);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face0 = new Face(udpTransport0, transport_ConnectionInfo0);
      assertFalse(udpTransport0.isAsync());
      assertFalse(udpTransport0.getIsConnected());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0, (-554.929));
      assertFalse(udpTransport0.isAsync());
      assertFalse(udpTransport0.getIsConnected());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout1);
      
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout1);
      assertFalse(onTimeout2.equals((Object)onTimeout1));
      assertFalse(udpTransport0.isAsync());
      assertFalse(udpTransport0.getIsConnected());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout2);
      assertNotSame(onTimeout1, onTimeout2);
      assertNotSame(onTimeout2, onTimeout1);
      
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.expressInterest((Interest) null, onData0, onTimeout2, onNetworkNack0, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Interest interest0 = new Interest();
      assertTrue(interest0.getCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertNotNull(interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      UdpTransport udpTransport0 = new UdpTransport();
      assertFalse(udpTransport0.getIsConnected());
      assertFalse(udpTransport0.isAsync());
      assertNotNull(udpTransport0);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face1 = new Face(udpTransport0, transport_ConnectionInfo0);
      assertFalse(face1.equals((Object)face0));
      assertFalse(udpTransport0.getIsConnected());
      assertFalse(udpTransport0.isAsync());
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertNotNull(face1);
      
      Name name0 = new Name();
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      Face face2 = new Face("", 507);
      assertFalse(face2.equals((Object)face0));
      assertFalse(face2.equals((Object)face1));
      assertEquals(8800, face2.getMaxNdnPacketSize());
      assertNotNull(face2);
      
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face2, onData0, onTimeout0, (double) 1);
      assertFalse(face2.equals((Object)face0));
      assertFalse(face2.equals((Object)face1));
      assertEquals(8800, face2.getMaxNdnPacketSize());
      assertNotNull(onTimeout1);
      assertNotSame(face2, face0);
      assertNotSame(face2, face1);
      
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout1);
      assertFalse(face0.equals((Object)face1));
      assertFalse(face0.equals((Object)face2));
      assertFalse(face2.equals((Object)face0));
      assertFalse(face2.equals((Object)face1));
      assertFalse(onTimeout2.equals((Object)onTimeout1));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(8800, face2.getMaxNdnPacketSize());
      assertNotNull(onTimeout2);
      assertNotSame(face0, face1);
      assertNotSame(face0, face2);
      assertNotSame(face2, face0);
      assertNotSame(face2, face1);
      assertNotSame(onTimeout1, onTimeout2);
      assertNotSame(onTimeout2, onTimeout1);
      
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face1.expressInterest(name0, onData0, onTimeout2, onNetworkNack0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.UdpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.UdpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @191e0536)
         //
         verifyException("net.named_data.jndn.transport.UdpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1080, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport(scheduledThreadPoolExecutor0);
      assertTrue(asyncTcpTransport0.isAsync());
      assertNotNull(asyncTcpTransport0);
      assertEquals(10000, AsyncTcpTransport.DEFAULT_LOCK_TIMEOUT_MS);
      assertEquals(5000, AsyncTcpTransport.DEFAULT_RECONNECT_TRY_DELAY_MS);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face0 = new Face(asyncTcpTransport0, transport_ConnectionInfo0);
      assertTrue(asyncTcpTransport0.isAsync());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      assertEquals(10000, AsyncTcpTransport.DEFAULT_LOCK_TIMEOUT_MS);
      assertEquals(5000, AsyncTcpTransport.DEFAULT_RECONNECT_TRY_DELAY_MS);
      
      Interest interest0 = new Interest();
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getChildSelector());
      assertNotNull(interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.expressInterest(interest0, onData0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.channels.spi.AsynchronousChannelProvider$ProviderHolder
         //
         verifyException("java.nio.channels.spi.AsynchronousChannelProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Interest interest0 = new Interest();
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      WireFormat wireFormat0 = new WireFormat();
      assertNotNull(wireFormat0);
      
      UdpTransport udpTransport0 = new UdpTransport();
      assertFalse(udpTransport0.getIsConnected());
      assertFalse(udpTransport0.isAsync());
      assertNotNull(udpTransport0);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face1 = new Face(udpTransport0, transport_ConnectionInfo0);
      assertFalse(face1.equals((Object)face0));
      assertFalse(udpTransport0.getIsConnected());
      assertFalse(udpTransport0.isAsync());
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertNotNull(face1);
      
      // Undeclared exception!
      try { 
        face1.expressInterest(interest0, (OnData) null, wireFormat0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.UdpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.UdpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @191e0536)
         //
         verifyException("net.named_data.jndn.transport.UdpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face("net.named_data.jndn.DelegationSet$Delegation", 826);
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(face0);
          
          Name name0 = face0.commandCertificateName_;
          assertEquals(0L, name0.getChangeCount());
          assertEquals(0, name0.size());
          assertNotNull(name0);
          
          Interest interest0 = new Interest("net.named_data.jndn.DelegationSet$Delegation");
          assertEquals((-1), interest0.getSelectedDelegationIndex());
          assertTrue(interest0.getDefaultCanBePrefix());
          assertFalse(interest0.getMustBeFresh());
          assertFalse(interest0.getDidSetCanBePrefix_());
          assertEquals((-1), interest0.getMaxSuffixComponents());
          assertEquals((-1), interest0.getChildSelector());
          assertEquals((-1), interest0.getMinSuffixComponents());
          assertTrue(interest0.getCanBePrefix());
          assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
          assertNotNull(interest0);
          assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
          assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
          
          OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
          OnTimeout onTimeout0 = ExponentialReExpress.makeOnTimeout(face0, onData0, (OnTimeout) null, (-4210.934829565));
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(onTimeout0);
          
          OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
          // Undeclared exception!
          try { 
            face0.expressInterest(name0, interest0, onData0, onTimeout0, onNetworkNack0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:826\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:353)
             // net.named_data.jndn.Face.expressInterest(Face.java:403)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face();
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(face0);
          
          Name name0 = new Name();
          assertEquals(0L, name0.getChangeCount());
          assertEquals(0, name0.size());
          assertNotNull(name0);
          
          OnData onData0 = null;
          boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
          assertFalse(boolean0);
          
          CertificateRequest certificateRequest0 = new CertificateRequest();
          assertNotNull(certificateRequest0);
          assertEquals(0, certificateRequest0.nRetriesLeft_);
          
          Interest interest0 = certificateRequest0.interest_;
          assertEquals((-1), interest0.getSelectedDelegationIndex());
          assertEquals((-1), interest0.getMinSuffixComponents());
          assertFalse(interest0.getMustBeFresh());
          assertFalse(interest0.getDidSetCanBePrefix_());
          assertEquals((-1), interest0.getMaxSuffixComponents());
          assertEquals((-1), interest0.getChildSelector());
          assertTrue(interest0.getCanBePrefix());
          assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
          assertTrue(interest0.getDefaultCanBePrefix());
          assertNotNull(interest0);
          assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
          assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
          
          InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
          InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
          InterestValidationState interestValidationState0 = new InterestValidationState(interest0, interestValidationSuccessCallback0, interestValidationFailureCallback0);
          assertEquals((-1), interest0.getSelectedDelegationIndex());
          assertEquals((-1), interest0.getMinSuffixComponents());
          assertFalse(interest0.getMustBeFresh());
          assertFalse(interest0.getDidSetCanBePrefix_());
          assertEquals((-1), interest0.getMaxSuffixComponents());
          assertEquals((-1), interest0.getChildSelector());
          assertTrue(interest0.getCanBePrefix());
          assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
          assertTrue(interest0.getDefaultCanBePrefix());
          assertFalse(interestValidationState0.isOutcomeSuccess());
          assertEquals(0, interestValidationState0.getDepth());
          assertFalse(interestValidationState0.isOutcomeFailed());
          assertFalse(interestValidationState0.hasOutcome());
          assertNotNull(interestValidationState0);
          assertEquals(0, certificateRequest0.nRetriesLeft_);
          assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
          assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
          
          Interest interest1 = interestValidationState0.getOriginalInterest();
          assertFalse(interest1.equals((Object)interest0));
          assertEquals((-1), interest0.getSelectedDelegationIndex());
          assertEquals((-1), interest0.getMinSuffixComponents());
          assertFalse(interest0.getMustBeFresh());
          assertFalse(interest0.getDidSetCanBePrefix_());
          assertEquals((-1), interest0.getMaxSuffixComponents());
          assertEquals((-1), interest0.getChildSelector());
          assertTrue(interest0.getCanBePrefix());
          assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
          assertTrue(interest0.getDefaultCanBePrefix());
          assertFalse(interestValidationState0.isOutcomeSuccess());
          assertEquals(0, interestValidationState0.getDepth());
          assertFalse(interestValidationState0.isOutcomeFailed());
          assertFalse(interestValidationState0.hasOutcome());
          assertEquals((-1), interest1.getMaxSuffixComponents());
          assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
          assertEquals((-1), interest1.getMinSuffixComponents());
          assertFalse(interest1.getDidSetCanBePrefix_());
          assertTrue(interest1.getDefaultCanBePrefix());
          assertFalse(interest1.getMustBeFresh());
          assertEquals((-1), interest1.getSelectedDelegationIndex());
          assertTrue(interest1.getCanBePrefix());
          assertEquals((-1), interest1.getChildSelector());
          assertNotNull(interest1);
          assertNotSame(interest0, interest1);
          assertNotSame(interest1, interest0);
          assertEquals(0, certificateRequest0.nRetriesLeft_);
          assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
          assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
          assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
          assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
          
          OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
          OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, (OnData) null, onTimeout0, (double) 0);
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(onTimeout1);
          
          OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, (OnData) null, onTimeout1);
          assertFalse(onTimeout2.equals((Object)onTimeout1));
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(onTimeout2);
          assertNotSame(onTimeout1, onTimeout2);
          assertNotSame(onTimeout2, onTimeout1);
          
          OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
          // Undeclared exception!
          try { 
            face0.expressInterest(name0, interest1, (OnData) null, onTimeout2, onNetworkNack0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:353)
             // net.named_data.jndn.Face.expressInterest(Face.java:403)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face0 = new Face((Transport) null, transport_ConnectionInfo0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Name name0 = SigningInfo.getDigestSha256Identity();
      assertEquals(3, name0.size());
      assertEquals(4L, name0.getChangeCount());
      assertNotNull(name0);
      
      Interest interest0 = new Interest(name0, 1.0);
      assertEquals(3, name0.size());
      assertEquals(4L, name0.getChangeCount());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getChildSelector());
      assertTrue(interest0.getCanBePrefix());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals(1.0, interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      Interest interest1 = new Interest(interest0);
      assertFalse(interest1.equals((Object)interest0));
      assertEquals(3, name0.size());
      assertEquals(4L, name0.getChangeCount());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getChildSelector());
      assertTrue(interest0.getCanBePrefix());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals(1.0, interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertTrue(interest1.getCanBePrefix());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertEquals((-1), interest1.getChildSelector());
      assertEquals(1.0, interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertNotNull(interest1);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnData onData1 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData1, onTimeout0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout1);
      
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData1, onTimeout1, 0.0);
      assertFalse(onTimeout2.equals((Object)onTimeout1));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout2);
      assertNotSame(onTimeout1, onTimeout2);
      assertNotSame(onTimeout2, onTimeout1);
      
      WireFormat wireFormat0 = new WireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.expressInterest(interest1, onData0, onTimeout2, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face();
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(face0);
          
          Name name0 = SigningInfo.getDigestSha256Identity();
          assertEquals(3, name0.size());
          assertEquals(4L, name0.getChangeCount());
          assertNotNull(name0);
          
          Interest interest0 = new Interest("YU>BSR");
          assertEquals((-1), interest0.getSelectedDelegationIndex());
          assertEquals((-1), interest0.getMinSuffixComponents());
          assertFalse(interest0.getMustBeFresh());
          assertEquals((-1), interest0.getMaxSuffixComponents());
          assertFalse(interest0.getDidSetCanBePrefix_());
          assertEquals((-1), interest0.getChildSelector());
          assertTrue(interest0.getCanBePrefix());
          assertTrue(interest0.getDefaultCanBePrefix());
          assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
          assertNotNull(interest0);
          assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
          assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
          
          OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
          OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
          OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0, 0.0);
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(onTimeout1);
          
          OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout1);
          assertFalse(onTimeout2.equals((Object)onTimeout1));
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(onTimeout2);
          assertNotSame(onTimeout1, onTimeout2);
          assertNotSame(onTimeout2, onTimeout1);
          
          // Undeclared exception!
          try { 
            face0.expressInterest(name0, interest0, onData0, onTimeout2);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:353)
             // net.named_data.jndn.Face.expressInterest(Face.java:530)
             // net.named_data.jndn.Face.expressInterest(Face.java:630)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face();
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(face0);
          
          Name name0 = face0.commandCertificateName_;
          assertEquals(0L, name0.getChangeCount());
          assertEquals(0, name0.size());
          assertNotNull(name0);
          
          Interest interest0 = new Interest();
          assertTrue(interest0.getCanBePrefix());
          assertEquals((-1), interest0.getChildSelector());
          assertTrue(interest0.getDefaultCanBePrefix());
          assertFalse(interest0.getMustBeFresh());
          assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
          assertEquals((-1), interest0.getMinSuffixComponents());
          assertFalse(interest0.getDidSetCanBePrefix_());
          assertEquals((-1), interest0.getSelectedDelegationIndex());
          assertEquals((-1), interest0.getMaxSuffixComponents());
          assertNotNull(interest0);
          assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
          assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
          
          OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
          // Undeclared exception!
          try { 
            face0.expressInterest(name0, interest0, onData0, (OnTimeout) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:353)
             // net.named_data.jndn.Face.expressInterest(Face.java:530)
             // net.named_data.jndn.Face.expressInterest(Face.java:630)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Face face0 = new Face("L6Kgd*/yhiF8_acf/ j", (-779));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Name name0 = new Name("*RjB");
      assertEquals(1, name0.size());
      assertEquals(2L, name0.getChangeCount());
      assertNotNull(name0);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.expressInterest(name0, onData0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-779
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = 0L;
      Face face0 = new Face("&dTxKg4AF#<IEEsp", (-640));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Interest interest0 = new Interest("OpB9S");
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertTrue(interest0.getCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getChildSelector());
      assertNotNull(interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      Face face1 = new Face();
      assertFalse(face1.equals((Object)face0));
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertNotNull(face1);
      
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face1, onData0, onTimeout0);
      assertFalse(face1.equals((Object)face0));
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertNotNull(onTimeout1);
      assertNotSame(face1, face0);
      
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout1, (-1598.0));
      assertFalse(face0.equals((Object)face1));
      assertFalse(face1.equals((Object)face0));
      assertFalse(onTimeout2.equals((Object)onTimeout1));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertNotNull(onTimeout2);
      assertNotSame(face0, face1);
      assertNotSame(face1, face0);
      assertNotSame(onTimeout1, onTimeout2);
      assertNotSame(onTimeout2, onTimeout1);
      
      WireFormat wireFormat0 = new WireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.expressInterest(interest0, onData0, onTimeout2, (OnNetworkNack) null, wireFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-640
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(6363);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(6363, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=6363 cap=6363]", byteBuffer0.toString());
      assertEquals(6363, byteBuffer0.capacity());
      assertEquals(6363, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertNotNull(byteBuffer0);
      
      try { 
        face0.send(byteBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot send because the socket is not open.  Use connect.
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "";
      Face face0 = new Face("", (-626));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      int int0 = 1763;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1763);
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1763 cap=1763]", byteBuffer0.toString());
      assertEquals(1763, byteBuffer0.remaining());
      assertEquals(1763, byteBuffer0.limit());
      assertEquals(1763, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertNotNull(byteBuffer0);
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteBuffer byteBuffer1 = byteBuffer0.order(byteOrder0);
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1763 cap=1763]", byteBuffer0.toString());
      assertEquals(1763, byteBuffer0.remaining());
      assertEquals(1763, byteBuffer0.limit());
      assertEquals(1763, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1763 cap=1763]", byteBuffer1.toString());
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.isDirect());
      assertEquals(1763, byteBuffer1.limit());
      assertEquals(1763, byteBuffer1.capacity());
      assertFalse(byteBuffer1.hasArray());
      assertEquals(0, byteBuffer1.position());
      assertEquals(1763, byteBuffer1.remaining());
      assertTrue(byteBuffer1.hasRemaining());
      assertNotNull(byteBuffer1);
      assertSame(byteBuffer0, byteBuffer1);
      assertSame(byteBuffer1, byteBuffer0);
      
      try { 
        face0.send(byteBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot send because the socket is not open.  Use connect.
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face0 = new Face((Transport) null, transport_ConnectionInfo0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Interest interest0 = new Interest("<XpWsM,d'^Lf]lgLN]");
      assertEquals((-1), interest0.getChildSelector());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(interest0.getDefaultCanBePrefix());
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      CertificateRequest certificateRequest0 = new CertificateRequest(interest0);
      assertEquals((-1), interest0.getChildSelector());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(interest0.getDefaultCanBePrefix());
      assertNotNull(certificateRequest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(3, certificateRequest0.nRetriesLeft_);
      
      Interest interest1 = certificateRequest0.interest_;
      assertFalse(interest1.equals((Object)interest0));
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertTrue(interest1.getCanBePrefix());
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(interest1.getMustBeFresh());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertNotNull(interest1);
      assertNotSame(interest1, interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationFailureCallback interestValidationFailureCallback0 = mock(InterestValidationFailureCallback.class, new ViolatedAssumptionAnswer());
      InterestValidationState interestValidationState0 = new InterestValidationState(interest1, interestValidationSuccessCallback0, interestValidationFailureCallback0);
      assertFalse(interest0.equals((Object)interest1));
      assertFalse(interest1.equals((Object)interest0));
      assertEquals((-1), interest0.getChildSelector());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertTrue(interest1.getCanBePrefix());
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(interest1.getMustBeFresh());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interestValidationState0.isOutcomeSuccess());
      assertFalse(interestValidationState0.isOutcomeFailed());
      assertFalse(interestValidationState0.hasOutcome());
      assertEquals(0, interestValidationState0.getDepth());
      assertNotNull(interestValidationState0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(3, certificateRequest0.nRetriesLeft_);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      Interest interest2 = interestValidationState0.getOriginalInterest();
      assertFalse(interest0.equals((Object)interest1));
      assertFalse(interest1.equals((Object)interest0));
      assertFalse(interest2.equals((Object)interest0));
      assertFalse(interest2.equals((Object)interest1));
      assertEquals((-1), interest0.getChildSelector());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertTrue(interest1.getCanBePrefix());
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(interest1.getMustBeFresh());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interestValidationState0.isOutcomeSuccess());
      assertFalse(interestValidationState0.isOutcomeFailed());
      assertFalse(interestValidationState0.hasOutcome());
      assertEquals(0, interestValidationState0.getDepth());
      assertEquals((-1), interest2.getSelectedDelegationIndex());
      assertTrue(interest2.getDefaultCanBePrefix());
      assertFalse(interest2.getMustBeFresh());
      assertFalse(interest2.getDidSetCanBePrefix_());
      assertEquals((-1), interest2.getMaxSuffixComponents());
      assertEquals((-1), interest2.getChildSelector());
      assertEquals((-1), interest2.getMinSuffixComponents());
      assertTrue(interest2.getCanBePrefix());
      assertEquals((-1.0), interest2.getInterestLifetimeMilliseconds(), 0.01);
      assertNotNull(interest2);
      assertNotSame(interest0, interest2);
      assertNotSame(interest0, interest1);
      assertNotSame(interest1, interest0);
      assertNotSame(interest1, interest2);
      assertNotSame(interest2, interest0);
      assertNotSame(interest2, interest1);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(3, certificateRequest0.nRetriesLeft_);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0, (-706.09708468));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout1);
      
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, (OnData) null, onTimeout1);
      assertFalse(onTimeout2.equals((Object)onTimeout1));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout2);
      assertNotSame(onTimeout1, onTimeout2);
      assertNotSame(onTimeout2, onTimeout1);
      
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.expressInterest(interest2, onData0, onTimeout2, onNetworkNack0, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2749);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport(scheduledThreadPoolExecutor0);
      assertTrue(asyncTcpTransport0.isAsync());
      assertNotNull(asyncTcpTransport0);
      assertEquals(5000, AsyncTcpTransport.DEFAULT_RECONNECT_TRY_DELAY_MS);
      assertEquals(10000, AsyncTcpTransport.DEFAULT_LOCK_TIMEOUT_MS);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face0 = new Face(asyncTcpTransport0, transport_ConnectionInfo0);
      assertTrue(asyncTcpTransport0.isAsync());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      assertEquals(5000, AsyncTcpTransport.DEFAULT_RECONNECT_TRY_DELAY_MS);
      assertEquals(10000, AsyncTcpTransport.DEFAULT_LOCK_TIMEOUT_MS);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0, (double) 10000);
      assertTrue(asyncTcpTransport0.isAsync());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout1);
      assertEquals(5000, AsyncTcpTransport.DEFAULT_RECONNECT_TRY_DELAY_MS);
      assertEquals(10000, AsyncTcpTransport.DEFAULT_LOCK_TIMEOUT_MS);
      
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout1);
      assertFalse(onTimeout2.equals((Object)onTimeout1));
      assertTrue(asyncTcpTransport0.isAsync());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout2);
      assertNotSame(onTimeout1, onTimeout2);
      assertNotSame(onTimeout2, onTimeout1);
      assertEquals(5000, AsyncTcpTransport.DEFAULT_RECONNECT_TRY_DELAY_MS);
      assertEquals(10000, AsyncTcpTransport.DEFAULT_LOCK_TIMEOUT_MS);
      
      double double0 = (-4354.80191863091);
      OnTimeout onTimeout3 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout2, (-4354.80191863091));
      assertFalse(onTimeout1.equals((Object)onTimeout2));
      assertFalse(onTimeout2.equals((Object)onTimeout1));
      assertFalse(onTimeout3.equals((Object)onTimeout1));
      assertFalse(onTimeout3.equals((Object)onTimeout2));
      assertTrue(asyncTcpTransport0.isAsync());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout3);
      assertNotSame(onTimeout1, onTimeout3);
      assertNotSame(onTimeout1, onTimeout2);
      assertNotSame(onTimeout2, onTimeout3);
      assertNotSame(onTimeout2, onTimeout1);
      assertNotSame(onTimeout3, onTimeout1);
      assertNotSame(onTimeout3, onTimeout2);
      assertEquals(5000, AsyncTcpTransport.DEFAULT_RECONNECT_TRY_DELAY_MS);
      assertEquals(10000, AsyncTcpTransport.DEFAULT_LOCK_TIMEOUT_MS);
      
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      Name name0 = new Name("unJ:P2");
      assertEquals(2L, name0.getChangeCount());
      assertEquals(1, name0.size());
      assertNotNull(name0);
      
      OnData onData1 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.expressInterest(name0, onData1, onTimeout3, onNetworkNack0, wireFormat0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.channels.spi.AsynchronousChannelProvider$ProviderHolder
         //
         verifyException("java.nio.channels.spi.AsynchronousChannelProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face();
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(face0);
          
          WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
          assertNotNull(wireFormat0);
          
          ControlParameters controlParameters0 = new ControlParameters();
          assertEquals((-1), controlParameters0.getOrigin());
          assertEquals((-1), controlParameters0.getLocalControlFeature());
          assertEquals((-1), controlParameters0.getCost());
          assertEquals((-1.0), controlParameters0.getExpirationPeriod(), 0.01);
          assertEquals("", controlParameters0.getUri());
          assertEquals((-1), controlParameters0.getFaceId());
          assertNotNull(controlParameters0);
          
          ControlParameters controlParameters1 = controlParameters0.setFaceId((-5031));
          assertEquals((-1), controlParameters0.getOrigin());
          assertEquals((-1), controlParameters0.getLocalControlFeature());
          assertEquals((-1), controlParameters0.getCost());
          assertEquals((-1.0), controlParameters0.getExpirationPeriod(), 0.01);
          assertEquals("", controlParameters0.getUri());
          assertEquals((-5031), controlParameters0.getFaceId());
          assertEquals((-1), controlParameters1.getLocalControlFeature());
          assertEquals((-1), controlParameters1.getOrigin());
          assertEquals((-1), controlParameters1.getCost());
          assertEquals((-1.0), controlParameters1.getExpirationPeriod(), 0.01);
          assertEquals((-5031), controlParameters1.getFaceId());
          assertEquals("", controlParameters1.getUri());
          assertNotNull(controlParameters1);
          assertSame(controlParameters0, controlParameters1);
          assertSame(controlParameters1, controlParameters0);
          
          ControlParameters controlParameters2 = controlParameters1.setExpirationPeriod(0.0);
          assertEquals((-1), controlParameters0.getOrigin());
          assertEquals((-1), controlParameters0.getLocalControlFeature());
          assertEquals((-1), controlParameters0.getCost());
          assertEquals(0.0, controlParameters0.getExpirationPeriod(), 0.01);
          assertEquals("", controlParameters0.getUri());
          assertEquals((-5031), controlParameters0.getFaceId());
          assertEquals((-1), controlParameters1.getLocalControlFeature());
          assertEquals((-1), controlParameters1.getOrigin());
          assertEquals((-1), controlParameters1.getCost());
          assertEquals(0.0, controlParameters1.getExpirationPeriod(), 0.01);
          assertEquals((-5031), controlParameters1.getFaceId());
          assertEquals("", controlParameters1.getUri());
          assertEquals((-5031), controlParameters2.getFaceId());
          assertEquals("", controlParameters2.getUri());
          assertEquals(0.0, controlParameters2.getExpirationPeriod(), 0.01);
          assertEquals((-1), controlParameters2.getCost());
          assertEquals((-1), controlParameters2.getOrigin());
          assertEquals((-1), controlParameters2.getLocalControlFeature());
          assertNotNull(controlParameters2);
          assertSame(controlParameters0, controlParameters1);
          assertSame(controlParameters0, controlParameters2);
          assertSame(controlParameters1, controlParameters0);
          assertSame(controlParameters1, controlParameters2);
          assertSame(controlParameters2, controlParameters1);
          assertSame(controlParameters2, controlParameters0);
          
          ControlParameters controlParameters3 = controlParameters2.setLocalControlFeature(407);
          assertEquals((-1), controlParameters0.getOrigin());
          assertEquals((-1), controlParameters0.getCost());
          assertEquals(0.0, controlParameters0.getExpirationPeriod(), 0.01);
          assertEquals("", controlParameters0.getUri());
          assertEquals((-5031), controlParameters0.getFaceId());
          assertEquals(407, controlParameters0.getLocalControlFeature());
          assertEquals((-1), controlParameters1.getOrigin());
          assertEquals(407, controlParameters1.getLocalControlFeature());
          assertEquals((-1), controlParameters1.getCost());
          assertEquals(0.0, controlParameters1.getExpirationPeriod(), 0.01);
          assertEquals((-5031), controlParameters1.getFaceId());
          assertEquals("", controlParameters1.getUri());
          assertEquals((-5031), controlParameters2.getFaceId());
          assertEquals(407, controlParameters2.getLocalControlFeature());
          assertEquals("", controlParameters2.getUri());
          assertEquals(0.0, controlParameters2.getExpirationPeriod(), 0.01);
          assertEquals((-1), controlParameters2.getCost());
          assertEquals((-1), controlParameters2.getOrigin());
          assertEquals("", controlParameters3.getUri());
          assertEquals(0.0, controlParameters3.getExpirationPeriod(), 0.01);
          assertEquals((-5031), controlParameters3.getFaceId());
          assertEquals((-1), controlParameters3.getOrigin());
          assertEquals((-1), controlParameters3.getCost());
          assertEquals(407, controlParameters3.getLocalControlFeature());
          assertNotNull(controlParameters3);
          assertSame(controlParameters0, controlParameters1);
          assertSame(controlParameters0, controlParameters2);
          assertSame(controlParameters0, controlParameters3);
          assertSame(controlParameters1, controlParameters3);
          assertSame(controlParameters1, controlParameters0);
          assertSame(controlParameters1, controlParameters2);
          assertSame(controlParameters2, controlParameters1);
          assertSame(controlParameters2, controlParameters3);
          assertSame(controlParameters2, controlParameters0);
          assertSame(controlParameters3, controlParameters1);
          assertSame(controlParameters3, controlParameters0);
          assertSame(controlParameters3, controlParameters2);
          
          Name name0 = controlParameters3.getStrategy();
          assertEquals((-1), controlParameters0.getOrigin());
          assertEquals((-1), controlParameters0.getCost());
          assertEquals(0.0, controlParameters0.getExpirationPeriod(), 0.01);
          assertEquals("", controlParameters0.getUri());
          assertEquals((-5031), controlParameters0.getFaceId());
          assertEquals(407, controlParameters0.getLocalControlFeature());
          assertEquals((-1), controlParameters1.getOrigin());
          assertEquals(407, controlParameters1.getLocalControlFeature());
          assertEquals((-1), controlParameters1.getCost());
          assertEquals(0.0, controlParameters1.getExpirationPeriod(), 0.01);
          assertEquals((-5031), controlParameters1.getFaceId());
          assertEquals("", controlParameters1.getUri());
          assertEquals((-5031), controlParameters2.getFaceId());
          assertEquals(407, controlParameters2.getLocalControlFeature());
          assertEquals("", controlParameters2.getUri());
          assertEquals(0.0, controlParameters2.getExpirationPeriod(), 0.01);
          assertEquals((-1), controlParameters2.getCost());
          assertEquals((-1), controlParameters2.getOrigin());
          assertEquals("", controlParameters3.getUri());
          assertEquals(0.0, controlParameters3.getExpirationPeriod(), 0.01);
          assertEquals((-5031), controlParameters3.getFaceId());
          assertEquals((-1), controlParameters3.getOrigin());
          assertEquals((-1), controlParameters3.getCost());
          assertEquals(407, controlParameters3.getLocalControlFeature());
          assertEquals(0L, name0.getChangeCount());
          assertEquals(0, name0.size());
          assertNotNull(name0);
          assertSame(controlParameters0, controlParameters1);
          assertSame(controlParameters0, controlParameters2);
          assertSame(controlParameters0, controlParameters3);
          assertSame(controlParameters1, controlParameters3);
          assertSame(controlParameters1, controlParameters0);
          assertSame(controlParameters1, controlParameters2);
          assertSame(controlParameters2, controlParameters1);
          assertSame(controlParameters2, controlParameters3);
          assertSame(controlParameters2, controlParameters0);
          assertSame(controlParameters3, controlParameters1);
          assertSame(controlParameters3, controlParameters0);
          assertSame(controlParameters3, controlParameters2);
          
          CertificateRequest certificateRequest0 = new CertificateRequest();
          assertNotNull(certificateRequest0);
          assertEquals(0, certificateRequest0.nRetriesLeft_);
          
          Interest interest0 = certificateRequest0.interest_;
          assertEquals((-1), interest0.getChildSelector());
          assertTrue(interest0.getCanBePrefix());
          assertEquals((-1), interest0.getMaxSuffixComponents());
          assertTrue(interest0.getDefaultCanBePrefix());
          assertEquals((-1), interest0.getSelectedDelegationIndex());
          assertEquals((-1), interest0.getMinSuffixComponents());
          assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
          assertFalse(interest0.getDidSetCanBePrefix_());
          assertFalse(interest0.getMustBeFresh());
          assertNotNull(interest0);
          assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
          assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
          
          WireFormat wireFormat1 = new WireFormat();
          assertNotNull(wireFormat1);
          
          // Undeclared exception!
          try { 
            face0.expressInterest(name0, interest0, (OnData) null, wireFormat1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:353)
             // net.named_data.jndn.Face.expressInterest(Face.java:530)
             // net.named_data.jndn.Face.expressInterest(Face.java:593)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      assertFalse(tcpTransport0.isAsync());
      assertFalse(tcpTransport0.getIsConnected());
      assertNotNull(tcpTransport0);
      
      boolean boolean0 = TcpTransport.getIsLocal("");
      assertTrue(boolean0);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face0 = new Face(tcpTransport0, transport_ConnectionInfo0);
      assertFalse(tcpTransport0.isAsync());
      assertFalse(tcpTransport0.getIsConnected());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      face0.callLater(4000.0, mockThread0);
      assertFalse(tcpTransport0.isAsync());
      assertFalse(tcpTransport0.getIsConnected());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      face0.setInterestLoopbackEnabled(true);
      assertFalse(tcpTransport0.isAsync());
      assertFalse(tcpTransport0.getIsConnected());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      
      Name name0 = new Name("");
      assertEquals(0, name0.size());
      assertEquals(1L, name0.getChangeCount());
      assertNotNull(name0);
      
      Name name1 = new Name(name0);
      assertTrue(name1.equals((Object)name0));
      assertEquals(0, name0.size());
      assertEquals(1L, name0.getChangeCount());
      assertEquals(0L, name1.getChangeCount());
      assertEquals(0, name1.size());
      assertNotNull(name1);
      
      Interest interest0 = new Interest("");
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      Interest interest1 = Face.getInterestCopy(name1, interest0);
      assertTrue(name0.equals((Object)name1));
      assertTrue(name1.equals((Object)name0));
      assertFalse(interest1.equals((Object)interest0));
      assertEquals(0, name0.size());
      assertEquals(1L, name0.getChangeCount());
      assertEquals(0L, name1.getChangeCount());
      assertEquals(0, name1.size());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertTrue(interest1.getCanBePrefix());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertNotNull(interest1);
      assertNotSame(name0, name1);
      assertNotSame(name1, name0);
      assertNotSame(interest0, interest1);
      assertNotSame(interest1, interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      assertFalse(tcpTransport0.isAsync());
      assertFalse(tcpTransport0.getIsConnected());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnInterestCallback onInterestCallback0 = memoryContentCache0.getStorePendingInterest();
      assertFalse(tcpTransport0.isAsync());
      assertFalse(tcpTransport0.getIsConnected());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(onInterestCallback0);
      
      OnRegisterFailed onRegisterFailed0 = null;
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertTrue(registrationOptions0.getChildInherit());
      assertFalse(registrationOptions0.getCapture());
      assertEquals((-1), registrationOptions0.getOrigin());
      assertNotNull(registrationOptions0);
      
      SigningInfo signingInfo0 = new SigningInfo();
      assertEquals(SigningInfo.SignerType.NULL, signingInfo0.getSignerType());
      assertEquals(DigestAlgorithm.SHA256, signingInfo0.getDigestAlgorithm());
      assertNotNull(signingInfo0);
      
      Name name2 = signingInfo0.getSignerName();
      assertTrue(name2.equals((Object)name1));
      assertTrue(name2.equals((Object)name0));
      assertEquals(SigningInfo.SignerType.NULL, signingInfo0.getSignerType());
      assertEquals(DigestAlgorithm.SHA256, signingInfo0.getDigestAlgorithm());
      assertEquals(0, name2.size());
      assertEquals(0L, name2.getChangeCount());
      assertNotNull(name2);
      assertNotSame(name2, name1);
      assertNotSame(name2, name0);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.expressInterest(name2, onData0, (OnTimeout) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.TcpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.TcpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @191e0536)
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout1);
      
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout1, 0.0);
      assertFalse(onTimeout2.equals((Object)onTimeout1));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout2);
      assertNotSame(onTimeout1, onTimeout2);
      assertNotSame(onTimeout2, onTimeout1);
      
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.expressInterest((Interest) null, onData0, onTimeout2, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      assertNotNull(hmacWithSha256Signature0);
      
      KeyLocator keyLocator0 = hmacWithSha256Signature0.getKeyLocator();
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
      assertNotNull(keyLocator0);
      
      KeyLocator keyLocator1 = new KeyLocator(keyLocator0);
      assertTrue(keyLocator1.equals((Object)keyLocator0));
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
      assertEquals(KeyLocatorType.NONE, keyLocator1.getType());
      assertNotNull(keyLocator1);
      
      Name name0 = keyLocator1.getKeyName();
      assertTrue(keyLocator0.equals((Object)keyLocator1));
      assertTrue(keyLocator1.equals((Object)keyLocator0));
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
      assertEquals(KeyLocatorType.NONE, keyLocator1.getType());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      assertNotSame(keyLocator0, keyLocator1);
      assertNotSame(keyLocator1, keyLocator0);
      
      Interest interest0 = new Interest("");
      assertEquals((-1), interest0.getChildSelector());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertNotNull(interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      Interest interest1 = Face.getInterestCopy(name0, interest0);
      assertTrue(keyLocator0.equals((Object)keyLocator1));
      assertTrue(keyLocator1.equals((Object)keyLocator0));
      assertFalse(interest1.equals((Object)interest0));
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
      assertEquals(KeyLocatorType.NONE, keyLocator1.getType());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertEquals((-1), interest0.getChildSelector());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interest1.getMustBeFresh());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertTrue(interest1.getCanBePrefix());
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertEquals((-1), interest1.getChildSelector());
      assertNotNull(interest1);
      assertNotSame(keyLocator0, keyLocator1);
      assertNotSame(keyLocator1, keyLocator0);
      assertNotSame(interest0, interest1);
      assertNotSame(interest1, interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      Face face0 = new Face("");
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.registerPrefix(name0, (OnInterestCallback) null, onRegisterFailed0, (RegistrationOptions) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Face face0 = new Face("Cannot get the default certificate for key ", (-1090));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertTrue(interest0.getCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getChildSelector());
      assertNotNull(interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = ExponentialReExpress.makeOnTimeout(face0, onData0, (OnTimeout) null, (-4393.0097));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout0);
      
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0);
      assertFalse(onTimeout1.equals((Object)onTimeout0));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout1);
      assertNotSame(onTimeout0, onTimeout1);
      assertNotSame(onTimeout1, onTimeout0);
      
      // Undeclared exception!
      try { 
        face0.expressInterest(interest0, onData0, onTimeout1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1090
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Interest interest0 = new Interest();
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertNotNull(interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      // Undeclared exception!
      try { 
        face0.setInterestFilter((InterestFilter) null, (OnInterestCallback) memoryContentCache0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.InterestFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face();
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(face0);
          
          WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
          assertNotNull(wireFormat0);
          
          // Undeclared exception!
          try { 
            face0.expressInterest((Name) null, (OnData) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:353)
             // net.named_data.jndn.Face.expressInterest(Face.java:530)
             // net.named_data.jndn.Face.expressInterest(Face.java:746)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face("");
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(face0);
          
          face0.processEvents();
          assertEquals(8800, face0.getMaxNdnPacketSize());
          
          face0.processEvents();
          assertEquals(8800, face0.getMaxNdnPacketSize());
          
          Name name0 = null;
          OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
          boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
          assertTrue(boolean0);
          
          OnData onData1 = mock(OnData.class, new ViolatedAssumptionAnswer());
          // Undeclared exception!
          try { 
            face0.expressInterest((Name) null, onData1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"127.0.0.1:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:353)
             // net.named_data.jndn.Face.expressInterest(Face.java:530)
             // net.named_data.jndn.Face.expressInterest(Face.java:746)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      NetworkNack networkNack0 = new NetworkNack();
      assertEquals(NetworkNack.Reason.NONE, networkNack0.getReason());
      assertEquals((-1), networkNack0.getOtherReasonCode());
      assertNotNull(networkNack0);
      
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      CertificateV2 certificateV2_0 = new CertificateV2();
      assertNotNull(certificateV2_0);
      assertEquals(4, CertificateV2.MIN_CERT_NAME_LENGTH);
      assertEquals((-2), CertificateV2.ISSUER_ID_OFFSET);
      assertEquals((-3), CertificateV2.KEY_ID_OFFSET);
      assertEquals((-4), CertificateV2.KEY_COMPONENT_OFFSET);
      assertEquals(2, CertificateV2.MIN_KEY_NAME_LENGTH);
      assertEquals((-1), CertificateV2.VERSION_OFFSET);
      
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      try { 
        face0.putData((Data) certificateV2_0, wireFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot send because the socket is not open.  Use connect.
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      WireFormat wireFormat0 = new WireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.expressInterest((Interest) null, onData0, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      WireFormat wireFormat0 = new WireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.expressInterest((Interest) null, (OnData) null, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      InterestValidationSuccessCallback interestValidationSuccessCallback0 = mock(InterestValidationSuccessCallback.class, new ViolatedAssumptionAnswer());
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0, 0.0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout1);
      
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout1);
      assertFalse(onTimeout2.equals((Object)onTimeout1));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout2);
      assertNotSame(onTimeout1, onTimeout2);
      assertNotSame(onTimeout2, onTimeout1);
      
      // Undeclared exception!
      try { 
        face0.expressInterest((Interest) null, onData0, onTimeout2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, 4000.0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      ControlParameters controlParameters0 = new ControlParameters();
      assertEquals("", controlParameters0.getUri());
      assertEquals((-1), controlParameters0.getLocalControlFeature());
      assertEquals((-1.0), controlParameters0.getExpirationPeriod(), 0.01);
      assertEquals((-1), controlParameters0.getCost());
      assertEquals((-1), controlParameters0.getOrigin());
      assertEquals((-1), controlParameters0.getFaceId());
      assertNotNull(controlParameters0);
      
      ControlParameters controlParameters1 = controlParameters0.setCost(3757);
      assertEquals("", controlParameters0.getUri());
      assertEquals((-1), controlParameters0.getLocalControlFeature());
      assertEquals((-1.0), controlParameters0.getExpirationPeriod(), 0.01);
      assertEquals(3757, controlParameters0.getCost());
      assertEquals((-1), controlParameters0.getOrigin());
      assertEquals((-1), controlParameters0.getFaceId());
      assertEquals((-1), controlParameters1.getOrigin());
      assertEquals((-1), controlParameters1.getFaceId());
      assertEquals(3757, controlParameters1.getCost());
      assertEquals((-1), controlParameters1.getLocalControlFeature());
      assertEquals("", controlParameters1.getUri());
      assertEquals((-1.0), controlParameters1.getExpirationPeriod(), 0.01);
      assertNotNull(controlParameters1);
      assertSame(controlParameters0, controlParameters1);
      assertSame(controlParameters1, controlParameters0);
      
      RegistrationOptions registrationOptions0 = controlParameters1.getForwardingFlags();
      assertEquals("", controlParameters0.getUri());
      assertEquals((-1), controlParameters0.getLocalControlFeature());
      assertEquals((-1.0), controlParameters0.getExpirationPeriod(), 0.01);
      assertEquals(3757, controlParameters0.getCost());
      assertEquals((-1), controlParameters0.getOrigin());
      assertEquals((-1), controlParameters0.getFaceId());
      assertEquals((-1), controlParameters1.getOrigin());
      assertEquals((-1), controlParameters1.getFaceId());
      assertEquals(3757, controlParameters1.getCost());
      assertEquals((-1), controlParameters1.getLocalControlFeature());
      assertEquals("", controlParameters1.getUri());
      assertEquals((-1.0), controlParameters1.getExpirationPeriod(), 0.01);
      assertTrue(registrationOptions0.getChildInherit());
      assertEquals((-1), registrationOptions0.getOrigin());
      assertFalse(registrationOptions0.getCapture());
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertNotNull(registrationOptions0);
      assertSame(controlParameters0, controlParameters1);
      assertSame(controlParameters1, controlParameters0);
      
      WireFormat wireFormat0 = new WireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, (OnInterestCallback) memoryContentCache0, onRegisterFailed0, onRegisterSuccess0, registrationOptions0, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Name name0 = SigningInfo.getDigestSha256Identity();
      assertEquals(3, name0.size());
      assertEquals(4L, name0.getChangeCount());
      assertNotNull(name0);
      
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.setCommandCertificateName((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Name name0 = new Name();
      assertEquals(0, name0.size());
      assertEquals(0L, name0.getChangeCount());
      assertNotNull(name0);
      
      WireFormat wireFormat0 = new WireFormat();
      assertNotNull(wireFormat0);
      
      Face face0 = new Face("", (-1266));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Interest interest0 = new Interest("");
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getChildSelector());
      assertTrue(interest0.getCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      Interest interest1 = Face.getInterestCopy(name0, interest0);
      assertFalse(interest1.equals((Object)interest0));
      assertEquals(0, name0.size());
      assertEquals(0L, name0.getChangeCount());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getChildSelector());
      assertTrue(interest0.getCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getChildSelector());
      assertTrue(interest1.getCanBePrefix());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interest1.getMustBeFresh());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertNotNull(interest1);
      assertNotSame(interest0, interest1);
      assertNotSame(interest1, interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0, (double) (-1266));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout1);
      
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout1);
      assertFalse(onTimeout2.equals((Object)onTimeout1));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout2);
      assertNotSame(onTimeout1, onTimeout2);
      assertNotSame(onTimeout2, onTimeout1);
      
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.expressInterest(interest1, onData0, onTimeout2, onNetworkNack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1266
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Name name0 = face0.commandCertificateName_;
      assertEquals(0, name0.size());
      assertEquals(0L, name0.getChangeCount());
      assertNotNull(name0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      Face face1 = new Face("1MtCv_4");
      assertFalse(face1.equals((Object)face0));
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertNotNull(face1);
      
      // Undeclared exception!
      try { 
        face1.registerPrefix(name0, (OnInterestCallback) memoryContentCache0, onRegisterFailed0, (WireFormat) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Name name0 = face0.commandCertificateName_;
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest0.getMustBeFresh());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getChildSelector());
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.registerPrefix(name0, (OnInterestCallback) memoryContentCache0, onRegisterSuccess0, onRegisterFailed0, wireFormat0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      NetworkNack networkNack0 = new NetworkNack();
      assertEquals(NetworkNack.Reason.NONE, networkNack0.getReason());
      assertEquals((-1), networkNack0.getOtherReasonCode());
      assertNotNull(networkNack0);
      
      NetworkNack.Reason networkNack_Reason0 = NetworkNack.Reason.OTHER_CODE;
      NetworkNack networkNack1 = networkNack0.setReason(networkNack_Reason0);
      assertEquals((-1), networkNack0.getOtherReasonCode());
      assertEquals(NetworkNack.Reason.OTHER_CODE, networkNack0.getReason());
      assertEquals(NetworkNack.Reason.OTHER_CODE, networkNack1.getReason());
      assertEquals((-1), networkNack1.getOtherReasonCode());
      assertNotNull(networkNack1);
      assertSame(networkNack0, networkNack1);
      assertSame(networkNack1, networkNack0);
      
      // Undeclared exception!
      try { 
        face0.putNack(interest0, networkNack0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // TLV integer value may not be negative
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Face face0 = new Face((String) null);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Interest interest0 = new Interest("");
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getChildSelector());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertNotNull(interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      Name name0 = new Name();
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      
      WireFormat wireFormat1 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat1);
      assertSame(wireFormat1, wireFormat0);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout1);
      
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout1, (double) 0);
      assertFalse(onTimeout2.equals((Object)onTimeout1));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout2);
      assertNotSame(onTimeout1, onTimeout2);
      assertNotSame(onTimeout2, onTimeout1);
      
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.expressInterest(name0, onData0, onTimeout2, onNetworkNack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, 4000.0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      WireFormat wireFormat0 = new WireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, (OnInterestCallback) memoryContentCache0, onRegisterFailed0, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Face face0 = new Face("");
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, 1318.4321714464);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, (OnInterestCallback) memoryContentCache0, onRegisterFailed0, (WireFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Name name0 = face0.commandCertificateName_;
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      
      Interest interest0 = new Interest(name0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertFalse(interest0.getMustBeFresh());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertTrue(interest0.getCanBePrefix());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getChildSelector());
      assertNotNull(interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      boolean boolean0 = interest0.hasLink();
      assertFalse(boolean0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertFalse(interest0.getMustBeFresh());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertTrue(interest0.getCanBePrefix());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      TcpTransport tcpTransport0 = new TcpTransport();
      assertFalse(tcpTransport0.getIsConnected());
      assertFalse(tcpTransport0.isAsync());
      assertNotNull(tcpTransport0);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face1 = new Face(tcpTransport0, transport_ConnectionInfo0);
      assertFalse(face1.equals((Object)face0));
      assertFalse(tcpTransport0.getIsConnected());
      assertFalse(tcpTransport0.isAsync());
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertNotNull(face1);
      
      face1.setCommandCertificateName(name0);
      assertFalse(face0.equals((Object)face1));
      assertFalse(face1.equals((Object)face0));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertFalse(tcpTransport0.getIsConnected());
      assertFalse(tcpTransport0.isAsync());
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertNotSame(face0, face1);
      assertNotSame(face1, face0);
      
      NetworkNack networkNack0 = new NetworkNack();
      assertEquals((-1), networkNack0.getOtherReasonCode());
      assertEquals(NetworkNack.Reason.NONE, networkNack0.getReason());
      assertNotNull(networkNack0);
      
      NetworkNack networkNack1 = networkNack0.setOtherReasonCode(2860);
      assertEquals(2860, networkNack0.getOtherReasonCode());
      assertEquals(NetworkNack.Reason.NONE, networkNack0.getReason());
      assertEquals(2860, networkNack1.getOtherReasonCode());
      assertEquals(NetworkNack.Reason.NONE, networkNack1.getReason());
      assertNotNull(networkNack1);
      assertSame(networkNack0, networkNack1);
      assertSame(networkNack1, networkNack0);
      
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      KeyChain keyChain0 = new KeyChain(identityManager0);
      assertTrue(keyChain0.getIsSecurityV1());
      assertNotNull(keyChain0);
      
      RsaKeyParams rsaKeyParams0 = KeyChain.DEFAULT_KEY_PARAMS;
      assertEquals(KeyIdType.RANDOM, rsaKeyParams0.getKeyIdType());
      assertEquals(2048, rsaKeyParams0.getDefaultSize());
      assertEquals(KeyType.RSA, rsaKeyParams0.getKeyType());
      assertEquals(KeyType.RSA, rsaKeyParams0.getType());
      assertEquals(2048, rsaKeyParams0.getKeySize());
      assertNotNull(rsaKeyParams0);
      
      // Undeclared exception!
      try { 
        face1.unsetInterestFilter(0L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Interest interest0 = new Interest();
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      // Undeclared exception!
      try { 
        face0.putNack(interest0, (NetworkNack) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Face face0 = new Face("<hrPw_9kv4NC:'XZ");
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Name name0 = new Name();
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      
      Name name1 = name0.appendSequenceNumber(0L);
      assertEquals(1L, name0.getChangeCount());
      assertEquals(1, name0.size());
      assertEquals(1L, name1.getChangeCount());
      assertEquals(1, name1.size());
      assertNotNull(name1);
      assertSame(name0, name1);
      assertSame(name1, name0);
      
      Data data0 = new Data(name0);
      assertEquals(1L, name0.getChangeCount());
      assertEquals(1, name0.size());
      assertNotNull(data0);
      
      Interest interest0 = null;
      // Undeclared exception!
      try { 
        face0.makeCommandInterest((Interest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.CommandInterestPreparer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      // Undeclared exception!
      try { 
        face0.removePendingInterest(3418L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      KeyChain keyChain0 = new KeyChain(identityManager0);
      assertTrue(keyChain0.getIsSecurityV1());
      assertNotNull(keyChain0);
      
      // Undeclared exception!
      try { 
        face0.removePendingInterest(607L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Face face0 = new Face((String) null);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.expressInterest((Name) null, onData0, wireFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      OnInterestCallback onInterestCallback0 = null;
      OnRegisterFailed onRegisterFailed0 = null;
      Name name0 = null;
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, (OnInterestCallback) null, (OnRegisterFailed) null, onRegisterSuccess0, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      UdpTransport udpTransport0 = new UdpTransport();
      assertFalse(udpTransport0.getIsConnected());
      assertFalse(udpTransport0.isAsync());
      assertNotNull(udpTransport0);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face0 = new Face(udpTransport0, transport_ConnectionInfo0);
      assertFalse(udpTransport0.getIsConnected());
      assertFalse(udpTransport0.isAsync());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      doReturn((Name) null).when(identityManager0).generateEcdsaKeyPair(any(net.named_data.jndn.Name.class) , anyBoolean() , anyInt());
      doReturn((Name) null).when(identityManager0).generateRSAKeyPair(any(net.named_data.jndn.Name.class) , anyBoolean());
      doReturn((Name) null).when(identityManager0).generateRSAKeyPair(any(net.named_data.jndn.Name.class) , anyBoolean() , anyInt());
      KeyChain keyChain0 = new KeyChain(identityManager0);
      assertTrue(keyChain0.getIsSecurityV1());
      assertNotNull(keyChain0);
      
      Name name0 = keyChain0.generateRSAKeyPair((Name) null, false);
      assertTrue(keyChain0.getIsSecurityV1());
      assertNull(name0);
      
      Name name1 = keyChain0.generateEcdsaKeyPair((Name) null, false, 6363);
      assertTrue(keyChain0.getIsSecurityV1());
      assertNull(name1);
      
      Name name2 = keyChain0.generateRSAKeyPair((Name) null, true, 6363);
      assertTrue(keyChain0.getIsSecurityV1());
      assertNull(name2);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      assertFalse(udpTransport0.getIsConnected());
      assertFalse(udpTransport0.isAsync());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, (OnInterestCallback) memoryContentCache0, onRegisterFailed0, onRegisterSuccess0, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      assertEquals("tpm-memory:", memoryIdentityStorage0.getTpmLocator());
      assertNotNull(memoryIdentityStorage0);
      
      IdentityCertificate identityCertificate0 = memoryIdentityStorage0.getDefaultCertificate();
      assertEquals("tpm-memory:", memoryIdentityStorage0.getTpmLocator());
      assertNull(identityCertificate0);
      
      // Undeclared exception!
      try { 
        face0.putData((Data) null, (WireFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      Face face0 = new Face((String) null);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      WireFormat wireFormat0 = new WireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.putData((Data) null, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Name name0 = face0.commandCertificateName_;
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertNotNull(interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      face0.setCommandCertificateName(name0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      
      NetworkNack networkNack0 = new NetworkNack();
      assertEquals((-1), networkNack0.getOtherReasonCode());
      assertEquals(NetworkNack.Reason.NONE, networkNack0.getReason());
      assertNotNull(networkNack0);
      
      try { 
        face0.putNack(interest0, networkNack0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot send because the socket is not open.  Use connect.
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Face face0 = new Face("net.named_data.jndn.Face");
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Name name0 = face0.commandCertificateName_;
      assertEquals(0, name0.size());
      assertEquals(0L, name0.getChangeCount());
      assertNotNull(name0);
      
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      Interest interest1 = Face.getInterestCopy(name0, interest0);
      assertFalse(interest1.equals((Object)interest0));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0, name0.size());
      assertEquals(0L, name0.getChangeCount());
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getChildSelector());
      assertTrue(interest1.getCanBePrefix());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertFalse(interest1.getMustBeFresh());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertNotNull(interest1);
      assertNotSame(interest0, interest1);
      assertNotSame(interest1, interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      face0.setCommandCertificateName(name0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0, name0.size());
      assertEquals(0L, name0.getChangeCount());
      
      NetworkNack networkNack0 = new NetworkNack();
      assertEquals((-1), networkNack0.getOtherReasonCode());
      assertEquals(NetworkNack.Reason.NONE, networkNack0.getReason());
      assertNotNull(networkNack0);
      
      NetworkNack.Reason networkNack_Reason0 = NetworkNack.Reason.NO_ROUTE;
      NetworkNack networkNack1 = networkNack0.setReason(networkNack_Reason0);
      assertEquals((-1), networkNack0.getOtherReasonCode());
      assertEquals(NetworkNack.Reason.NO_ROUTE, networkNack0.getReason());
      assertEquals((-1), networkNack1.getOtherReasonCode());
      assertEquals(NetworkNack.Reason.NO_ROUTE, networkNack1.getReason());
      assertNotNull(networkNack1);
      assertSame(networkNack0, networkNack1);
      assertSame(networkNack1, networkNack0);
      
      try { 
        face0.putNack(interest1, networkNack1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot send because the socket is not open.  Use connect.
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      assertFalse(tcpTransport0.getIsConnected());
      assertFalse(tcpTransport0.isAsync());
      assertNotNull(tcpTransport0);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face0 = new Face(tcpTransport0, transport_ConnectionInfo0);
      assertFalse(tcpTransport0.getIsConnected());
      assertFalse(tcpTransport0.isAsync());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Interest interest0 = new Interest((Name) null);
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      CertificateRequest certificateRequest0 = new CertificateRequest(interest0);
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertNotNull(certificateRequest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(3, certificateRequest0.nRetriesLeft_);
      
      Interest interest1 = certificateRequest0.interest_;
      assertFalse(interest1.equals((Object)interest0));
      assertTrue(interest1.getCanBePrefix());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getChildSelector());
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(interest1.getDefaultCanBePrefix());
      assertNotNull(interest1);
      assertNotSame(interest1, interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.expressInterest((Name) null, interest1, onData0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.TcpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.TcpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @191e0536)
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      KeyChain keyChain0 = new KeyChain(identityManager0);
      assertTrue(keyChain0.getIsSecurityV1());
      assertNotNull(keyChain0);
      
      Name name0 = new Name();
      assertEquals(0, name0.size());
      assertEquals(0L, name0.getChangeCount());
      assertNotNull(name0);
      
      IdentityManager identityManager1 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      KeyChain keyChain1 = new KeyChain(identityManager1);
      assertFalse(keyChain1.equals((Object)keyChain0));
      assertTrue(keyChain1.getIsSecurityV1());
      assertNotNull(keyChain1);
      
      RsaKeyParams rsaKeyParams0 = KeyChain.DEFAULT_KEY_PARAMS;
      assertEquals(KeyType.RSA, rsaKeyParams0.getType());
      assertEquals(KeyType.RSA, rsaKeyParams0.getKeyType());
      assertEquals(2048, rsaKeyParams0.getKeySize());
      assertEquals(2048, rsaKeyParams0.getDefaultSize());
      assertEquals(KeyIdType.RANDOM, rsaKeyParams0.getKeyIdType());
      assertNotNull(rsaKeyParams0);
      
      TcpTransport tcpTransport0 = new TcpTransport();
      assertFalse(tcpTransport0.isAsync());
      assertFalse(tcpTransport0.getIsConnected());
      assertNotNull(tcpTransport0);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face0 = new Face(tcpTransport0, transport_ConnectionInfo0);
      assertFalse(tcpTransport0.isAsync());
      assertFalse(tcpTransport0.getIsConnected());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.expressInterest(name0, (Interest) null, onData0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.TcpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.TcpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @191e0536)
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      UdpTransport udpTransport0 = new UdpTransport();
      assertFalse(udpTransport0.getIsConnected());
      assertFalse(udpTransport0.isAsync());
      assertNotNull(udpTransport0);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face0 = new Face(udpTransport0, transport_ConnectionInfo0);
      assertFalse(udpTransport0.getIsConnected());
      assertFalse(udpTransport0.isAsync());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      KeyChain keyChain0 = new KeyChain(identityManager0);
      assertTrue(keyChain0.getIsSecurityV1());
      assertNotNull(keyChain0);
      
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertFalse(registrationOptions0.getCapture());
      assertEquals((-1), registrationOptions0.getOrigin());
      assertTrue(registrationOptions0.getChildInherit());
      assertNotNull(registrationOptions0);
      
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      KeyLocator keyLocator0 = new KeyLocator();
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
      assertNotNull(keyLocator0);
      
      Name name0 = keyLocator0.getKeyName();
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, 3615.24261691598);
      assertFalse(udpTransport0.getIsConnected());
      assertFalse(udpTransport0.isAsync());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.registerPrefix(name0, (OnInterestCallback) memoryContentCache0, onRegisterFailed0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Face face0 = new Face((Transport) null, (Transport.ConnectionInfo) null);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      KeyLocator keyLocator0 = new KeyLocator();
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
      assertNotNull(keyLocator0);
      
      keyLocator0.clear();
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Name name0 = keyLocator0.getKeyName();
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.expressInterest(name0, onData0, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      PibImpl pibImpl0 = mock(PibImpl.class, new ViolatedAssumptionAnswer());
      doReturn((HashSet) null).when(pibImpl0).getIdentities();
      TpmBackEnd tpmBackEnd0 = mock(TpmBackEnd.class, new ViolatedAssumptionAnswer());
      KeyChain keyChain0 = new KeyChain(pibImpl0, tpmBackEnd0);
      assertFalse(keyChain0.getIsSecurityV1());
      assertNotNull(keyChain0);
      
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      doReturn((Name) null).when(identityManager0).createIdentityAndCertificate(any(net.named_data.jndn.Name.class) , any(net.named_data.jndn.security.KeyParams.class));
      KeyChain keyChain1 = new KeyChain(identityManager0);
      assertFalse(keyChain1.equals((Object)keyChain0));
      assertTrue(keyChain1.getIsSecurityV1());
      assertNotNull(keyChain1);
      
      Name.Component[] name_ComponentArray0 = new Name.Component[10];
      Name.Component name_Component0 = mock(Name.Component.class, new ViolatedAssumptionAnswer());
      name_ComponentArray0[0] = name_Component0;
      Name name0 = new Name(name_ComponentArray0);
      assertEquals(0L, name0.getChangeCount());
      assertEquals(10, name0.size());
      assertNotNull(name0);
      assertEquals(10, name_ComponentArray0.length);
      
      RsaKeyParams rsaKeyParams0 = KeyChain.DEFAULT_KEY_PARAMS;
      assertEquals(KeyType.RSA, rsaKeyParams0.getType());
      assertEquals(KeyType.RSA, rsaKeyParams0.getKeyType());
      assertEquals(2048, rsaKeyParams0.getKeySize());
      assertEquals(2048, rsaKeyParams0.getDefaultSize());
      assertEquals(KeyIdType.RANDOM, rsaKeyParams0.getKeyIdType());
      assertNotNull(rsaKeyParams0);
      
      RsaKeyParams rsaKeyParams1 = (RsaKeyParams)KeyChain.getDefaultKeyParams();
      assertFalse(rsaKeyParams1.equals((Object)rsaKeyParams0));
      assertEquals(KeyType.RSA, rsaKeyParams1.getType());
      assertEquals(KeyType.RSA, rsaKeyParams1.getKeyType());
      assertEquals(2048, rsaKeyParams1.getKeySize());
      assertEquals(2048, rsaKeyParams1.getDefaultSize());
      assertEquals(KeyIdType.RANDOM, rsaKeyParams1.getKeyIdType());
      assertNotNull(rsaKeyParams1);
      assertNotSame(rsaKeyParams1, rsaKeyParams0);
      
      Name name1 = keyChain1.createIdentityAndCertificate(name0, (KeyParams) rsaKeyParams1);
      assertFalse(keyChain1.equals((Object)keyChain0));
      assertFalse(rsaKeyParams1.equals((Object)rsaKeyParams0));
      assertTrue(keyChain1.getIsSecurityV1());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(10, name0.size());
      assertEquals(KeyType.RSA, rsaKeyParams1.getType());
      assertEquals(KeyType.RSA, rsaKeyParams1.getKeyType());
      assertEquals(2048, rsaKeyParams1.getKeySize());
      assertEquals(2048, rsaKeyParams1.getDefaultSize());
      assertEquals(KeyIdType.RANDOM, rsaKeyParams1.getKeyIdType());
      assertNull(name1);
      assertNotSame(keyChain1, keyChain0);
      assertNotSame(rsaKeyParams1, rsaKeyParams0);
      assertEquals(10, name_ComponentArray0.length);
      
      face0.setCommandSigningInfo(keyChain1, name0);
      assertFalse(keyChain1.equals((Object)keyChain0));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertTrue(keyChain1.getIsSecurityV1());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(10, name0.size());
      assertNotSame(keyChain1, keyChain0);
      assertEquals(10, name_ComponentArray0.length);
      
      // Undeclared exception!
      try { 
        face0.unsetInterestFilter(1L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
          Face face0 = new Face();
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(face0);
          
          IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
          KeyChain keyChain0 = new KeyChain(identityManager0);
          assertTrue(keyChain0.getIsSecurityV1());
          assertNotNull(keyChain0);
          
          Name.Component[] name_ComponentArray0 = new Name.Component[8];
          Interest interest0 = new Interest();
          assertEquals((-1), interest0.getMaxSuffixComponents());
          assertFalse(interest0.getDidSetCanBePrefix_());
          assertEquals((-1), interest0.getChildSelector());
          assertEquals((-1), interest0.getSelectedDelegationIndex());
          assertFalse(interest0.getMustBeFresh());
          assertTrue(interest0.getDefaultCanBePrefix());
          assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
          assertEquals((-1), interest0.getMinSuffixComponents());
          assertTrue(interest0.getCanBePrefix());
          assertNotNull(interest0);
          assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
          assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
          
          OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
          OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0, (double) 0);
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(onTimeout1);
          
          OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout1);
          assertFalse(onTimeout2.equals((Object)onTimeout1));
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(onTimeout2);
          assertNotSame(onTimeout1, onTimeout2);
          assertNotSame(onTimeout2, onTimeout1);
          
          // Undeclared exception!
          try { 
            face0.expressInterest(interest0, onData0, onTimeout2);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:142)
             // net.named_data.jndn.Face.expressInterest(Face.java:221)
             // net.named_data.jndn.Face.expressInterest(Face.java:253)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face();
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(face0);
          
          Interest interest0 = new Interest();
          assertFalse(interest0.getDidSetCanBePrefix_());
          assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
          assertEquals((-1), interest0.getMinSuffixComponents());
          assertTrue(interest0.getCanBePrefix());
          assertEquals((-1), interest0.getChildSelector());
          assertFalse(interest0.getMustBeFresh());
          assertTrue(interest0.getDefaultCanBePrefix());
          assertEquals((-1), interest0.getMaxSuffixComponents());
          assertEquals((-1), interest0.getSelectedDelegationIndex());
          assertNotNull(interest0);
          assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
          assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
          
          OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
          OnTimeout onTimeout0 = ExponentialReExpress.makeOnTimeout(face0, onData0, (OnTimeout) null, 0.0);
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(onTimeout0);
          
          // Undeclared exception!
          try { 
            face0.expressInterest(interest0, onData0, onTimeout0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:142)
             // net.named_data.jndn.Face.expressInterest(Face.java:221)
             // net.named_data.jndn.Face.expressInterest(Face.java:253)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face("net.named_data.jndn.Face");
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(face0);
          
          face0.shutdown();
          assertEquals(8800, face0.getMaxNdnPacketSize());
          
          Interest interest0 = new Interest("net.named_data.jndn.Face");
          assertTrue(interest0.getDefaultCanBePrefix());
          assertFalse(interest0.getMustBeFresh());
          assertEquals((-1), interest0.getMinSuffixComponents());
          assertTrue(interest0.getCanBePrefix());
          assertEquals((-1), interest0.getMaxSuffixComponents());
          assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
          assertFalse(interest0.getDidSetCanBePrefix_());
          assertEquals((-1), interest0.getChildSelector());
          assertEquals((-1), interest0.getSelectedDelegationIndex());
          assertNotNull(interest0);
          assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
          assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
          
          boolean boolean0 = face0.isLocal();
          assertFalse(boolean0);
          assertEquals(8800, face0.getMaxNdnPacketSize());
          
          OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
          // Undeclared exception!
          try { 
            face0.expressInterest(interest0, onData0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:142)
             // net.named_data.jndn.Face.expressInterest(Face.java:221)
             // net.named_data.jndn.Face.expressInterest(Face.java:303)
             // jdk.internal.reflect.GeneratedMethodAccessor213.invoke(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      UdpTransport udpTransport0 = new UdpTransport();
      assertFalse(udpTransport0.getIsConnected());
      assertFalse(udpTransport0.isAsync());
      assertNotNull(udpTransport0);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face1 = new Face(udpTransport0, transport_ConnectionInfo0);
      assertFalse(face1.equals((Object)face0));
      assertFalse(udpTransport0.getIsConnected());
      assertFalse(udpTransport0.isAsync());
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertNotNull(face1);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face1);
      assertFalse(face1.equals((Object)face0));
      assertFalse(udpTransport0.getIsConnected());
      assertFalse(udpTransport0.isAsync());
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnInterestCallback onInterestCallback0 = memoryContentCache0.getStorePendingInterest();
      assertFalse(face1.equals((Object)face0));
      assertFalse(udpTransport0.getIsConnected());
      assertFalse(udpTransport0.isAsync());
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(onInterestCallback0);
      assertNotSame(face1, face0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      assertEquals((-1), registrationOptions0.getOrigin());
      assertFalse(registrationOptions0.getCapture());
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertTrue(registrationOptions0.getChildInherit());
      assertNotNull(registrationOptions0);
      
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, onInterestCallback0, onRegisterFailed0, registrationOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "t";
      int int0 = 152;
      Face face0 = new Face("t", 152);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, 152);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      assertTrue(registrationOptions0.getChildInherit());
      assertFalse(registrationOptions0.getCapture());
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertEquals((-1), registrationOptions0.getOrigin());
      assertNotNull(registrationOptions0);
      
      RegistrationOptions registrationOptions1 = new RegistrationOptions(registrationOptions0);
      assertFalse(registrationOptions1.equals((Object)registrationOptions0));
      assertTrue(registrationOptions0.getChildInherit());
      assertFalse(registrationOptions0.getCapture());
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertEquals((-1), registrationOptions0.getOrigin());
      assertEquals(1, registrationOptions1.getNfdForwardingFlags());
      assertTrue(registrationOptions1.getChildInherit());
      assertFalse(registrationOptions1.getCapture());
      assertEquals((-1), registrationOptions1.getOrigin());
      assertNotNull(registrationOptions1);
      
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, (OnInterestCallback) memoryContentCache0, (OnRegisterFailed) null, registrationOptions1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face("net.named_data.jndn.Face");
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(face0);
          
          face0.shutdown();
          assertEquals(8800, face0.getMaxNdnPacketSize());
          
          byte[] byteArray0 = new byte[0];
          boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
          assertFalse(boolean0);
          assertArrayEquals(new byte[] {}, byteArray0);
          assertEquals(0, byteArray0.length);
          
          boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
          assertFalse(boolean1);
          assertTrue(boolean1 == boolean0);
          assertArrayEquals(new byte[] {}, byteArray0);
          assertEquals(0, byteArray0.length);
          
          Name name0 = face0.commandCertificateName_;
          assertEquals(0L, name0.getChangeCount());
          assertEquals(0, name0.size());
          assertNotNull(name0);
          
          OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
          // Undeclared exception!
          try { 
            face0.expressInterest(name0, (Interest) null, onData0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:353)
             // net.named_data.jndn.Face.expressInterest(Face.java:530)
             // net.named_data.jndn.Face.expressInterest(Face.java:661)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face("");
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(face0);
          
          Name name0 = SigningInfo.getDigestSha256Identity();
          assertEquals(4L, name0.getChangeCount());
          assertEquals(3, name0.size());
          assertNotNull(name0);
          
          Name name1 = new Name(name0);
          assertTrue(name1.equals((Object)name0));
          assertEquals(4L, name0.getChangeCount());
          assertEquals(3, name0.size());
          assertEquals(0L, name1.getChangeCount());
          assertEquals(3, name1.size());
          assertNotNull(name1);
          
          Interest interest0 = new Interest("2/ubf9N^Xi,vBG");
          assertEquals((-1), interest0.getSelectedDelegationIndex());
          assertFalse(interest0.getMustBeFresh());
          assertFalse(interest0.getDidSetCanBePrefix_());
          assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
          assertEquals((-1), interest0.getMinSuffixComponents());
          assertTrue(interest0.getCanBePrefix());
          assertEquals((-1), interest0.getMaxSuffixComponents());
          assertTrue(interest0.getDefaultCanBePrefix());
          assertEquals((-1), interest0.getChildSelector());
          assertNotNull(interest0);
          assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
          assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
          
          OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
          // Undeclared exception!
          try { 
            face0.expressInterest(name1, interest0, onData0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"127.0.0.1:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:353)
             // net.named_data.jndn.Face.expressInterest(Face.java:530)
             // net.named_data.jndn.Face.expressInterest(Face.java:661)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Interest interest0 = new Interest();
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getChildSelector());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertNotNull(interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      Face face1 = new Face((String) null);
      assertFalse(face1.equals((Object)face0));
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertNotNull(face1);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face1.expressInterest(interest0, onData0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Face face1 = new Face("", 0);
      assertFalse(face1.equals((Object)face0));
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertNotNull(face1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Name name0 = face0.commandCertificateName_;
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face1, 152);
      assertFalse(face1.equals((Object)face0));
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      long long0 = face0.setInterestFilter(name0, (OnInterestCallback) memoryContentCache0);
      assertEquals(1L, long0);
      assertFalse(face0.equals((Object)face1));
      assertFalse(face1.equals((Object)face0));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotSame(face0, face1);
      assertNotSame(face1, face0);
      
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      assertEquals((-1), registrationOptions0.getOrigin());
      assertFalse(registrationOptions0.getCapture());
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertTrue(registrationOptions0.getChildInherit());
      assertNotNull(registrationOptions0);
      
      RegistrationOptions registrationOptions1 = new RegistrationOptions(registrationOptions0);
      assertFalse(registrationOptions1.equals((Object)registrationOptions0));
      assertEquals((-1), registrationOptions0.getOrigin());
      assertFalse(registrationOptions0.getCapture());
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertTrue(registrationOptions0.getChildInherit());
      assertEquals((-1), registrationOptions1.getOrigin());
      assertFalse(registrationOptions1.getCapture());
      assertTrue(registrationOptions1.getChildInherit());
      assertEquals(1, registrationOptions1.getNfdForwardingFlags());
      assertNotNull(registrationOptions1);
      
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face1.registerPrefix(name0, (OnInterestCallback) memoryContentCache0, (OnRegisterFailed) null, onRegisterSuccess0, registrationOptions1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      Name name0 = new Name();
      assertEquals(0, name0.size());
      assertEquals(0L, name0.getChangeCount());
      assertNotNull(name0);
      
      WireFormat wireFormat0 = new WireFormat();
      assertNotNull(wireFormat0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.registerPrefix(name0, (OnInterestCallback) memoryContentCache0, onRegisterFailed0, onRegisterSuccess0, (RegistrationOptions) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, (-2939.7041292048));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      assertFalse(registrationOptions0.getCapture());
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertTrue(registrationOptions0.getChildInherit());
      assertEquals((-1), registrationOptions0.getOrigin());
      assertNotNull(registrationOptions0);
      
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, (OnInterestCallback) memoryContentCache0, onRegisterFailed0, onRegisterSuccess0, registrationOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Face face0 = new Face("t", 152);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Name name0 = face0.commandCertificateName_;
      assertEquals(0, name0.size());
      assertEquals(0L, name0.getChangeCount());
      assertNotNull(name0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, (-1639.1663541));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      long long0 = face0.setInterestFilter(name0, (OnInterestCallback) memoryContentCache0);
      assertEquals(1L, long0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0, name0.size());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      assertEquals((-1), registrationOptions0.getOrigin());
      assertTrue(registrationOptions0.getChildInherit());
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertFalse(registrationOptions0.getCapture());
      assertNotNull(registrationOptions0);
      
      RegistrationOptions registrationOptions1 = new RegistrationOptions(registrationOptions0);
      assertFalse(registrationOptions1.equals((Object)registrationOptions0));
      assertEquals((-1), registrationOptions0.getOrigin());
      assertTrue(registrationOptions0.getChildInherit());
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertFalse(registrationOptions0.getCapture());
      assertFalse(registrationOptions1.getCapture());
      assertEquals(1, registrationOptions1.getNfdForwardingFlags());
      assertTrue(registrationOptions1.getChildInherit());
      assertEquals((-1), registrationOptions1.getOrigin());
      assertNotNull(registrationOptions1);
      
      // Undeclared exception!
      try { 
        face0.registerPrefix(name0, (OnInterestCallback) memoryContentCache0, (OnRegisterFailed) null, onRegisterSuccess0, registrationOptions1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face0 = new Face((Transport) null, transport_ConnectionInfo0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Interest interest0 = new Interest("");
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertNotNull(interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      WireFormat wireFormat0 = new WireFormat();
      assertNotNull(wireFormat0);
      
      Blob blob0 = interest0.getLinkWireEncoding(wireFormat0);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(blob0.isNull());
      assertNotNull(blob0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = ExponentialReExpress.makeOnTimeout(face0, onData0, (OnTimeout) null);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout0);
      
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0, 60000.0);
      assertFalse(onTimeout1.equals((Object)onTimeout0));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout1);
      assertNotSame(onTimeout0, onTimeout1);
      assertNotSame(onTimeout1, onTimeout0);
      
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.expressInterest(interest0, onData0, onTimeout1, onNetworkNack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      IdentityCertificate identityCertificate0 = new IdentityCertificate();
      assertTrue(identityCertificate0.isTooLate());
      assertTrue(identityCertificate0.isTooEarly());
      assertEquals((-1.7976931348623157E308), identityCertificate0.getNotAfter(), 0.01);
      assertEquals(1.7976931348623157E308, identityCertificate0.getNotBefore(), 0.01);
      assertNotNull(identityCertificate0);
      
      Name name0 = identityCertificate0.getPublicKeyName();
      assertTrue(identityCertificate0.isTooLate());
      assertTrue(identityCertificate0.isTooEarly());
      assertEquals((-1.7976931348623157E308), identityCertificate0.getNotAfter(), 0.01);
      assertEquals(1.7976931348623157E308, identityCertificate0.getNotBefore(), 0.01);
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, 300000.0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      // Undeclared exception!
      try { 
        face0.registerPrefix(name0, (OnInterestCallback) memoryContentCache0, (OnRegisterFailed) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Face face0 = new Face("net.named_data.jndn.Face");
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      face0.shutdown();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Name name0 = face0.commandCertificateName_;
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getMustBeFresh());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      Interest interest1 = Face.getInterestCopy(name0, interest0);
      assertFalse(interest1.equals((Object)interest0));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getMustBeFresh());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertTrue(interest1.getCanBePrefix());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getChildSelector());
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertNotNull(interest1);
      assertNotSame(interest0, interest1);
      assertNotSame(interest1, interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      NetworkNack networkNack0 = new NetworkNack();
      assertEquals((-1), networkNack0.getOtherReasonCode());
      assertEquals(NetworkNack.Reason.NONE, networkNack0.getReason());
      assertNotNull(networkNack0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, 1);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      assertTrue(registrationOptions0.getChildInherit());
      assertEquals((-1), registrationOptions0.getOrigin());
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertFalse(registrationOptions0.getCapture());
      assertNotNull(registrationOptions0);
      
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      OnRegisterFailed onRegisterFailed1 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.registerPrefix(name0, (OnInterestCallback) memoryContentCache0, onRegisterFailed1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2749);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport(scheduledThreadPoolExecutor0);
      assertTrue(asyncTcpTransport0.isAsync());
      assertNotNull(asyncTcpTransport0);
      assertEquals(10000, AsyncTcpTransport.DEFAULT_LOCK_TIMEOUT_MS);
      assertEquals(5000, AsyncTcpTransport.DEFAULT_RECONNECT_TRY_DELAY_MS);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face0 = new Face(asyncTcpTransport0, transport_ConnectionInfo0);
      assertTrue(asyncTcpTransport0.isAsync());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      assertEquals(10000, AsyncTcpTransport.DEFAULT_LOCK_TIMEOUT_MS);
      assertEquals(5000, AsyncTcpTransport.DEFAULT_RECONNECT_TRY_DELAY_MS);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0, (double) 10000);
      assertTrue(asyncTcpTransport0.isAsync());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout1);
      assertEquals(10000, AsyncTcpTransport.DEFAULT_LOCK_TIMEOUT_MS);
      assertEquals(5000, AsyncTcpTransport.DEFAULT_RECONNECT_TRY_DELAY_MS);
      
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout1);
      assertFalse(onTimeout2.equals((Object)onTimeout1));
      assertTrue(asyncTcpTransport0.isAsync());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout2);
      assertNotSame(onTimeout1, onTimeout2);
      assertNotSame(onTimeout2, onTimeout1);
      assertEquals(10000, AsyncTcpTransport.DEFAULT_LOCK_TIMEOUT_MS);
      assertEquals(5000, AsyncTcpTransport.DEFAULT_RECONNECT_TRY_DELAY_MS);
      
      OnTimeout onTimeout3 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout2, (-4354.80191863091));
      assertFalse(onTimeout1.equals((Object)onTimeout2));
      assertFalse(onTimeout2.equals((Object)onTimeout1));
      assertFalse(onTimeout3.equals((Object)onTimeout1));
      assertFalse(onTimeout3.equals((Object)onTimeout2));
      assertTrue(asyncTcpTransport0.isAsync());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout3);
      assertNotSame(onTimeout1, onTimeout3);
      assertNotSame(onTimeout1, onTimeout2);
      assertNotSame(onTimeout2, onTimeout3);
      assertNotSame(onTimeout2, onTimeout1);
      assertNotSame(onTimeout3, onTimeout1);
      assertNotSame(onTimeout3, onTimeout2);
      assertEquals(10000, AsyncTcpTransport.DEFAULT_LOCK_TIMEOUT_MS);
      assertEquals(5000, AsyncTcpTransport.DEFAULT_RECONNECT_TRY_DELAY_MS);
      
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      Name name0 = new Name("unJ:P2");
      assertEquals(2L, name0.getChangeCount());
      assertEquals(1, name0.size());
      assertNotNull(name0);
      
      OnData onData1 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.expressInterest(name0, onData1, onTimeout3, onNetworkNack0, wireFormat0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.channels.spi.AsynchronousChannelProvider$ProviderHolder
         //
         verifyException("java.nio.channels.spi.AsynchronousChannelProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(interest0.getDefaultCanBePrefix());
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      Face face0 = new Face("\"2zi4Tj");
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Name name0 = new Name();
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      ControlParameters controlParameters0 = new ControlParameters();
      assertEquals((-1), controlParameters0.getCost());
      assertEquals((-1), controlParameters0.getOrigin());
      assertEquals((-1.0), controlParameters0.getExpirationPeriod(), 0.01);
      assertEquals((-1), controlParameters0.getLocalControlFeature());
      assertEquals("", controlParameters0.getUri());
      assertEquals((-1), controlParameters0.getFaceId());
      assertNotNull(controlParameters0);
      
      ControlParameters controlParameters1 = new ControlParameters(controlParameters0);
      assertFalse(controlParameters1.equals((Object)controlParameters0));
      assertEquals((-1), controlParameters0.getCost());
      assertEquals((-1), controlParameters0.getOrigin());
      assertEquals((-1.0), controlParameters0.getExpirationPeriod(), 0.01);
      assertEquals((-1), controlParameters0.getLocalControlFeature());
      assertEquals("", controlParameters0.getUri());
      assertEquals((-1), controlParameters0.getFaceId());
      assertEquals((-1), controlParameters1.getLocalControlFeature());
      assertEquals((-1.0), controlParameters1.getExpirationPeriod(), 0.01);
      assertEquals("", controlParameters1.getUri());
      assertEquals((-1), controlParameters1.getCost());
      assertEquals((-1), controlParameters1.getOrigin());
      assertEquals((-1), controlParameters1.getFaceId());
      assertNotNull(controlParameters1);
      
      ControlParameters controlParameters2 = controlParameters1.setStrategy(name0);
      assertFalse(controlParameters0.equals((Object)controlParameters1));
      assertFalse(controlParameters1.equals((Object)controlParameters0));
      assertFalse(controlParameters2.equals((Object)controlParameters0));
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertEquals((-1), controlParameters0.getCost());
      assertEquals((-1), controlParameters0.getOrigin());
      assertEquals((-1.0), controlParameters0.getExpirationPeriod(), 0.01);
      assertEquals((-1), controlParameters0.getLocalControlFeature());
      assertEquals("", controlParameters0.getUri());
      assertEquals((-1), controlParameters0.getFaceId());
      assertEquals((-1), controlParameters1.getLocalControlFeature());
      assertEquals((-1.0), controlParameters1.getExpirationPeriod(), 0.01);
      assertEquals("", controlParameters1.getUri());
      assertEquals((-1), controlParameters1.getCost());
      assertEquals((-1), controlParameters1.getOrigin());
      assertEquals((-1), controlParameters1.getFaceId());
      assertEquals((-1), controlParameters2.getFaceId());
      assertEquals((-1), controlParameters2.getCost());
      assertEquals((-1), controlParameters2.getOrigin());
      assertEquals("", controlParameters2.getUri());
      assertEquals((-1.0), controlParameters2.getExpirationPeriod(), 0.01);
      assertEquals((-1), controlParameters2.getLocalControlFeature());
      assertNotNull(controlParameters2);
      assertNotSame(controlParameters0, controlParameters1);
      assertNotSame(controlParameters0, controlParameters2);
      assertSame(controlParameters1, controlParameters2);
      assertNotSame(controlParameters1, controlParameters0);
      assertNotSame(controlParameters2, controlParameters0);
      assertSame(controlParameters2, controlParameters1);
      
      ControlParameters controlParameters3 = controlParameters2.setExpirationPeriod(1);
      assertFalse(controlParameters0.equals((Object)controlParameters1));
      assertFalse(controlParameters0.equals((Object)controlParameters2));
      assertFalse(controlParameters1.equals((Object)controlParameters0));
      assertFalse(controlParameters2.equals((Object)controlParameters0));
      assertFalse(controlParameters3.equals((Object)controlParameters0));
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertEquals((-1), controlParameters0.getCost());
      assertEquals((-1), controlParameters0.getOrigin());
      assertEquals((-1.0), controlParameters0.getExpirationPeriod(), 0.01);
      assertEquals((-1), controlParameters0.getLocalControlFeature());
      assertEquals("", controlParameters0.getUri());
      assertEquals((-1), controlParameters0.getFaceId());
      assertEquals((-1), controlParameters1.getLocalControlFeature());
      assertEquals(1.0, controlParameters1.getExpirationPeriod(), 0.01);
      assertEquals("", controlParameters1.getUri());
      assertEquals((-1), controlParameters1.getCost());
      assertEquals((-1), controlParameters1.getOrigin());
      assertEquals((-1), controlParameters1.getFaceId());
      assertEquals((-1), controlParameters2.getFaceId());
      assertEquals((-1), controlParameters2.getCost());
      assertEquals((-1), controlParameters2.getOrigin());
      assertEquals("", controlParameters2.getUri());
      assertEquals(1.0, controlParameters2.getExpirationPeriod(), 0.01);
      assertEquals((-1), controlParameters2.getLocalControlFeature());
      assertEquals((-1), controlParameters3.getLocalControlFeature());
      assertEquals(1.0, controlParameters3.getExpirationPeriod(), 0.01);
      assertEquals("", controlParameters3.getUri());
      assertEquals((-1), controlParameters3.getOrigin());
      assertEquals((-1), controlParameters3.getFaceId());
      assertEquals((-1), controlParameters3.getCost());
      assertNotNull(controlParameters3);
      assertNotSame(controlParameters0, controlParameters3);
      assertNotSame(controlParameters0, controlParameters1);
      assertNotSame(controlParameters0, controlParameters2);
      assertSame(controlParameters1, controlParameters2);
      assertNotSame(controlParameters1, controlParameters0);
      assertSame(controlParameters1, controlParameters3);
      assertSame(controlParameters2, controlParameters3);
      assertNotSame(controlParameters2, controlParameters0);
      assertSame(controlParameters2, controlParameters1);
      assertNotSame(controlParameters3, controlParameters0);
      assertSame(controlParameters3, controlParameters1);
      assertSame(controlParameters3, controlParameters2);
      
      ControlParameters controlParameters4 = controlParameters3.setLocalControlFeature((-2872));
      assertFalse(controlParameters0.equals((Object)controlParameters3));
      assertFalse(controlParameters0.equals((Object)controlParameters1));
      assertFalse(controlParameters0.equals((Object)controlParameters2));
      assertFalse(controlParameters1.equals((Object)controlParameters0));
      assertFalse(controlParameters2.equals((Object)controlParameters0));
      assertFalse(controlParameters3.equals((Object)controlParameters0));
      assertFalse(controlParameters4.equals((Object)controlParameters0));
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertEquals((-1), controlParameters0.getCost());
      assertEquals((-1), controlParameters0.getOrigin());
      assertEquals((-1.0), controlParameters0.getExpirationPeriod(), 0.01);
      assertEquals((-1), controlParameters0.getLocalControlFeature());
      assertEquals("", controlParameters0.getUri());
      assertEquals((-1), controlParameters0.getFaceId());
      assertEquals(1.0, controlParameters1.getExpirationPeriod(), 0.01);
      assertEquals("", controlParameters1.getUri());
      assertEquals((-2872), controlParameters1.getLocalControlFeature());
      assertEquals((-1), controlParameters1.getCost());
      assertEquals((-1), controlParameters1.getOrigin());
      assertEquals((-1), controlParameters1.getFaceId());
      assertEquals((-1), controlParameters2.getFaceId());
      assertEquals((-2872), controlParameters2.getLocalControlFeature());
      assertEquals((-1), controlParameters2.getCost());
      assertEquals((-1), controlParameters2.getOrigin());
      assertEquals("", controlParameters2.getUri());
      assertEquals(1.0, controlParameters2.getExpirationPeriod(), 0.01);
      assertEquals(1.0, controlParameters3.getExpirationPeriod(), 0.01);
      assertEquals("", controlParameters3.getUri());
      assertEquals((-1), controlParameters3.getOrigin());
      assertEquals((-1), controlParameters3.getFaceId());
      assertEquals((-1), controlParameters3.getCost());
      assertEquals((-2872), controlParameters3.getLocalControlFeature());
      assertEquals("", controlParameters4.getUri());
      assertEquals(1.0, controlParameters4.getExpirationPeriod(), 0.01);
      assertEquals((-1), controlParameters4.getCost());
      assertEquals((-1), controlParameters4.getOrigin());
      assertEquals((-2872), controlParameters4.getLocalControlFeature());
      assertEquals((-1), controlParameters4.getFaceId());
      assertNotNull(controlParameters4);
      assertNotSame(controlParameters0, controlParameters4);
      assertNotSame(controlParameters0, controlParameters3);
      assertNotSame(controlParameters0, controlParameters1);
      assertNotSame(controlParameters0, controlParameters2);
      assertSame(controlParameters1, controlParameters2);
      assertNotSame(controlParameters1, controlParameters0);
      assertSame(controlParameters1, controlParameters3);
      assertSame(controlParameters1, controlParameters4);
      assertSame(controlParameters2, controlParameters4);
      assertSame(controlParameters2, controlParameters3);
      assertNotSame(controlParameters2, controlParameters0);
      assertSame(controlParameters2, controlParameters1);
      assertNotSame(controlParameters3, controlParameters0);
      assertSame(controlParameters3, controlParameters1);
      assertSame(controlParameters3, controlParameters2);
      assertSame(controlParameters3, controlParameters4);
      assertSame(controlParameters4, controlParameters2);
      assertSame(controlParameters4, controlParameters1);
      assertNotSame(controlParameters4, controlParameters0);
      assertSame(controlParameters4, controlParameters3);
      
      RegistrationOptions registrationOptions0 = controlParameters4.getForwardingFlags();
      assertFalse(controlParameters0.equals((Object)controlParameters4));
      assertFalse(controlParameters0.equals((Object)controlParameters3));
      assertFalse(controlParameters0.equals((Object)controlParameters1));
      assertFalse(controlParameters0.equals((Object)controlParameters2));
      assertFalse(controlParameters1.equals((Object)controlParameters0));
      assertFalse(controlParameters2.equals((Object)controlParameters0));
      assertFalse(controlParameters3.equals((Object)controlParameters0));
      assertFalse(controlParameters4.equals((Object)controlParameters0));
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertEquals((-1), controlParameters0.getCost());
      assertEquals((-1), controlParameters0.getOrigin());
      assertEquals((-1.0), controlParameters0.getExpirationPeriod(), 0.01);
      assertEquals((-1), controlParameters0.getLocalControlFeature());
      assertEquals("", controlParameters0.getUri());
      assertEquals((-1), controlParameters0.getFaceId());
      assertEquals(1.0, controlParameters1.getExpirationPeriod(), 0.01);
      assertEquals("", controlParameters1.getUri());
      assertEquals((-2872), controlParameters1.getLocalControlFeature());
      assertEquals((-1), controlParameters1.getCost());
      assertEquals((-1), controlParameters1.getOrigin());
      assertEquals((-1), controlParameters1.getFaceId());
      assertEquals((-1), controlParameters2.getFaceId());
      assertEquals((-2872), controlParameters2.getLocalControlFeature());
      assertEquals((-1), controlParameters2.getCost());
      assertEquals((-1), controlParameters2.getOrigin());
      assertEquals("", controlParameters2.getUri());
      assertEquals(1.0, controlParameters2.getExpirationPeriod(), 0.01);
      assertEquals(1.0, controlParameters3.getExpirationPeriod(), 0.01);
      assertEquals("", controlParameters3.getUri());
      assertEquals((-1), controlParameters3.getOrigin());
      assertEquals((-1), controlParameters3.getFaceId());
      assertEquals((-1), controlParameters3.getCost());
      assertEquals((-2872), controlParameters3.getLocalControlFeature());
      assertEquals("", controlParameters4.getUri());
      assertEquals(1.0, controlParameters4.getExpirationPeriod(), 0.01);
      assertEquals((-1), controlParameters4.getCost());
      assertEquals((-1), controlParameters4.getOrigin());
      assertEquals((-2872), controlParameters4.getLocalControlFeature());
      assertEquals((-1), controlParameters4.getFaceId());
      assertFalse(registrationOptions0.getCapture());
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertTrue(registrationOptions0.getChildInherit());
      assertEquals((-1), registrationOptions0.getOrigin());
      assertNotNull(registrationOptions0);
      assertNotSame(controlParameters0, controlParameters4);
      assertNotSame(controlParameters0, controlParameters3);
      assertNotSame(controlParameters0, controlParameters1);
      assertNotSame(controlParameters0, controlParameters2);
      assertSame(controlParameters1, controlParameters2);
      assertNotSame(controlParameters1, controlParameters0);
      assertSame(controlParameters1, controlParameters3);
      assertSame(controlParameters1, controlParameters4);
      assertSame(controlParameters2, controlParameters4);
      assertSame(controlParameters2, controlParameters3);
      assertNotSame(controlParameters2, controlParameters0);
      assertSame(controlParameters2, controlParameters1);
      assertNotSame(controlParameters3, controlParameters0);
      assertSame(controlParameters3, controlParameters1);
      assertSame(controlParameters3, controlParameters2);
      assertSame(controlParameters3, controlParameters4);
      assertSame(controlParameters4, controlParameters2);
      assertSame(controlParameters4, controlParameters1);
      assertNotSame(controlParameters4, controlParameters0);
      assertSame(controlParameters4, controlParameters3);
      
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.registerPrefix(name0, (OnInterestCallback) memoryContentCache0, (OnRegisterFailed) null, (OnRegisterSuccess) null, registrationOptions0, wireFormat0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "u";
      Face face0 = new Face("u");
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Name name0 = face0.commandCertificateName_;
      assertEquals(0, name0.size());
      assertEquals(0L, name0.getChangeCount());
      assertNotNull(name0);
      
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      doReturn(name0).when(identityManager0).generateRSAKeyPair(any(net.named_data.jndn.Name.class));
      KeyChain keyChain0 = new KeyChain(identityManager0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0, name0.size());
      assertEquals(0L, name0.getChangeCount());
      assertTrue(keyChain0.getIsSecurityV1());
      assertNotNull(keyChain0);
      
      Name name1 = new Name();
      assertTrue(name1.equals((Object)name0));
      assertEquals(0, name1.size());
      assertEquals(0L, name1.getChangeCount());
      assertNotNull(name1);
      
      Name name2 = keyChain0.generateRSAKeyPair(name1);
      assertTrue(name0.equals((Object)name1));
      assertTrue(name1.equals((Object)name0));
      assertTrue(name2.equals((Object)name1));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0, name0.size());
      assertEquals(0L, name0.getChangeCount());
      assertTrue(keyChain0.getIsSecurityV1());
      assertEquals(0, name1.size());
      assertEquals(0L, name1.getChangeCount());
      assertEquals(0L, name2.getChangeCount());
      assertEquals(0, name2.size());
      assertNotNull(name2);
      assertSame(name0, name2);
      assertNotSame(name0, name1);
      assertNotSame(name1, name0);
      assertNotSame(name1, name2);
      assertNotSame(name2, name1);
      assertSame(name2, name0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      MemoryContentCache memoryContentCache1 = new MemoryContentCache(face0);
      assertFalse(memoryContentCache1.equals((Object)memoryContentCache0));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache1.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache1);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      OnRegisterFailed onRegisterFailed1 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      OnRegisterSuccess onRegisterSuccess1 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      assertFalse(registrationOptions0.getCapture());
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertTrue(registrationOptions0.getChildInherit());
      assertEquals((-1), registrationOptions0.getOrigin());
      assertNotNull(registrationOptions0);
      
      WireFormat wireFormat0 = new WireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.registerPrefix(name1, (OnInterestCallback) memoryContentCache1, onRegisterFailed1, onRegisterSuccess1, registrationOptions0, wireFormat0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
          TcpTransport tcpTransport0 = new TcpTransport();
          assertFalse(tcpTransport0.getIsConnected());
          assertFalse(tcpTransport0.isAsync());
          assertNotNull(tcpTransport0);
          
          Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
          assertNotNull(transport_ConnectionInfo0);
          
          Face face0 = new Face();
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(face0);
          
          OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
          OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0);
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(onTimeout1);
          
          WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
          assertNotNull(wireFormat0);
          
          OnData onData1 = mock(OnData.class, new ViolatedAssumptionAnswer());
          OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
          WireFormat wireFormat1 = WireFormat.getDefaultWireFormat();
          assertNotNull(wireFormat1);
          assertSame(wireFormat1, wireFormat0);
          
          Interest interest0 = new Interest((Name) null);
          assertEquals((-1), interest0.getMaxSuffixComponents());
          assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
          assertEquals((-1), interest0.getMinSuffixComponents());
          assertTrue(interest0.getCanBePrefix());
          assertFalse(interest0.getDidSetCanBePrefix_());
          assertFalse(interest0.getMustBeFresh());
          assertEquals((-1), interest0.getSelectedDelegationIndex());
          assertEquals((-1), interest0.getChildSelector());
          assertTrue(interest0.getDefaultCanBePrefix());
          assertNotNull(interest0);
          assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
          assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
          
          // Undeclared exception!
          try { 
            face0.expressInterest((Name) null, interest0, onData1, onTimeout1, onNetworkNack0, wireFormat0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:353)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Name name0 = new Name("");
      assertEquals(0, name0.size());
      assertEquals(1L, name0.getChangeCount());
      assertNotNull(name0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, 984.188);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.registerPrefix(name0, (OnInterestCallback) memoryContentCache0, onRegisterSuccess0, onRegisterFailed0, (RegistrationOptions) null, wireFormat0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      face0.shutdown();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      
      CertificateV2 certificateV2_0 = new CertificateV2();
      assertNotNull(certificateV2_0);
      assertEquals(2, CertificateV2.MIN_KEY_NAME_LENGTH);
      assertEquals((-1), CertificateV2.VERSION_OFFSET);
      assertEquals(4, CertificateV2.MIN_CERT_NAME_LENGTH);
      assertEquals((-2), CertificateV2.ISSUER_ID_OFFSET);
      assertEquals((-3), CertificateV2.KEY_ID_OFFSET);
      assertEquals((-4), CertificateV2.KEY_COMPONENT_OFFSET);
      
      // Undeclared exception!
      try { 
        face0.removeRegisteredPrefix((-2));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Face face0 = new Face("net.named_data.jndn.Face");
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      face0.shutdown();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Name name0 = face0.commandCertificateName_;
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getMustBeFresh());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      Interest interest1 = Face.getInterestCopy(name0, interest0);
      assertFalse(interest1.equals((Object)interest0));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getMustBeFresh());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getChildSelector());
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertTrue(interest1.getCanBePrefix());
      assertNotNull(interest1);
      assertNotSame(interest0, interest1);
      assertNotSame(interest1, interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      NetworkNack networkNack0 = new NetworkNack();
      assertEquals(NetworkNack.Reason.NONE, networkNack0.getReason());
      assertEquals((-1), networkNack0.getOtherReasonCode());
      assertNotNull(networkNack0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, 1);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      assertTrue(registrationOptions0.getChildInherit());
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertEquals((-1), registrationOptions0.getOrigin());
      assertFalse(registrationOptions0.getCapture());
      assertNotNull(registrationOptions0);
      
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.makeCommandInterest(interest1, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.CommandInterestGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Blob blob0 = new Blob("");
      assertFalse(blob0.isNull());
      assertNotNull(blob0);
      
      try { 
        face0.send(blob0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot send because the socket is not open.  Use connect.
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Blob blob0 = new Blob();
      assertTrue(blob0.isNull());
      assertNotNull(blob0);
      
      // Undeclared exception!
      try { 
        face0.send(blob0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      KeyChain keyChain0 = new KeyChain(identityManager0);
      assertTrue(keyChain0.getIsSecurityV1());
      assertNotNull(keyChain0);
      
      Blob blob0 = Name.fromHex("F'dYxXRPO.%ZZxle+I", 8800, 8800);
      assertFalse(blob0.isNull());
      assertNotNull(blob0);
      
      try { 
        face0.send(blob0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot send because the socket is not open.  Use connect.
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Face face0 = new Face("localhost");
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2538);
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2538, byteBuffer0.limit());
      assertEquals(2538, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2538 cap=2538]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(2538, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertNotNull(byteBuffer0);
      
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      doReturn((Name) null).when(identityManager0).generateRSAKeyPair(any(net.named_data.jndn.Name.class));
      KeyChain keyChain0 = new KeyChain(identityManager0);
      assertTrue(keyChain0.getIsSecurityV1());
      assertNotNull(keyChain0);
      
      Name name0 = new Name();
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      
      Name name1 = keyChain0.generateRSAKeyPair(name0);
      assertTrue(keyChain0.getIsSecurityV1());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNull(name1);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnInterestCallback onInterestCallback0 = memoryContentCache0.getStorePendingInterest();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(onInterestCallback0);
      
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      OnData onData1 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData1, onTimeout0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout1);
      
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout1, (double) 2538);
      assertFalse(onTimeout2.equals((Object)onTimeout1));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout2);
      assertNotSame(onTimeout1, onTimeout2);
      assertNotSame(onTimeout2, onTimeout1);
      
      OnTimeout onTimeout3 = ExponentialReExpress.makeOnTimeout(face0, onData1, onTimeout2);
      assertFalse(onTimeout1.equals((Object)onTimeout2));
      assertFalse(onTimeout2.equals((Object)onTimeout1));
      assertFalse(onTimeout3.equals((Object)onTimeout2));
      assertFalse(onTimeout3.equals((Object)onTimeout1));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout3);
      assertNotSame(onTimeout1, onTimeout2);
      assertNotSame(onTimeout1, onTimeout3);
      assertNotSame(onTimeout2, onTimeout3);
      assertNotSame(onTimeout2, onTimeout1);
      assertNotSame(onTimeout3, onTimeout2);
      assertNotSame(onTimeout3, onTimeout1);
      
      UdpTransport udpTransport0 = new UdpTransport();
      assertFalse(udpTransport0.getIsConnected());
      assertFalse(udpTransport0.isAsync());
      assertNotNull(udpTransport0);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face1 = new Face(udpTransport0, transport_ConnectionInfo0);
      assertFalse(face1.equals((Object)face0));
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertFalse(udpTransport0.getIsConnected());
      assertFalse(udpTransport0.isAsync());
      assertNotNull(face1);
      
      OnData onData2 = mock(OnData.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face1.expressInterest((Name) null, onData2, onTimeout2, wireFormat0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.UdpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.UdpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @191e0536)
         //
         verifyException("net.named_data.jndn.transport.UdpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Face face0 = new Face("net.named_data.jndn.Face");
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Name name0 = face0.commandCertificateName_;
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getChildSelector());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      Interest interest1 = Face.getInterestCopy(name0, interest0);
      assertFalse(interest1.equals((Object)interest0));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getChildSelector());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertTrue(interest1.getCanBePrefix());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getChildSelector());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertNotNull(interest1);
      assertNotSame(interest0, interest1);
      assertNotSame(interest1, interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      NetworkNack networkNack0 = new NetworkNack();
      assertEquals(NetworkNack.Reason.NONE, networkNack0.getReason());
      assertEquals((-1), networkNack0.getOtherReasonCode());
      assertNotNull(networkNack0);
      
      UdpTransport udpTransport0 = new UdpTransport();
      assertFalse(udpTransport0.isAsync());
      assertFalse(udpTransport0.getIsConnected());
      assertNotNull(udpTransport0);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face1 = new Face(udpTransport0, transport_ConnectionInfo0);
      assertFalse(face1.equals((Object)face0));
      assertFalse(udpTransport0.isAsync());
      assertFalse(udpTransport0.getIsConnected());
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertNotNull(face1);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face1, 1);
      assertFalse(face1.equals((Object)face0));
      assertFalse(udpTransport0.isAsync());
      assertFalse(udpTransport0.getIsConnected());
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertEquals((-1), registrationOptions0.getOrigin());
      assertTrue(registrationOptions0.getChildInherit());
      assertFalse(registrationOptions0.getCapture());
      assertNotNull(registrationOptions0);
      
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face1.registerPrefix(name0, (OnInterestCallback) memoryContentCache0, onRegisterFailed0, registrationOptions0, wireFormat0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      UdpTransport udpTransport0 = new UdpTransport();
      assertFalse(udpTransport0.isAsync());
      assertFalse(udpTransport0.getIsConnected());
      assertNotNull(udpTransport0);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face0 = new Face(udpTransport0, transport_ConnectionInfo0);
      assertFalse(udpTransport0.isAsync());
      assertFalse(udpTransport0.getIsConnected());
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      doReturn((Name) null).when(identityManager0).createIdentityAndCertificate(any(net.named_data.jndn.Name.class) , any(net.named_data.jndn.security.KeyParams.class));
      KeyChain keyChain0 = new KeyChain(identityManager0);
      assertTrue(keyChain0.getIsSecurityV1());
      assertNotNull(keyChain0);
      
      Name.Component[] name_ComponentArray0 = new Name.Component[4];
      Name.Component name_Component0 = mock(Name.Component.class, new ViolatedAssumptionAnswer());
      name_ComponentArray0[0] = name_Component0;
      name_ComponentArray0[1] = name_Component0;
      name_ComponentArray0[2] = name_Component0;
      name_ComponentArray0[3] = name_Component0;
      Name name0 = new Name(name_ComponentArray0);
      assertEquals(0L, name0.getChangeCount());
      assertEquals(4, name0.size());
      assertNotNull(name0);
      assertEquals(4, name_ComponentArray0.length);
      
      RsaKeyParams rsaKeyParams0 = KeyChain.DEFAULT_KEY_PARAMS;
      assertEquals(KeyIdType.RANDOM, rsaKeyParams0.getKeyIdType());
      assertEquals(KeyType.RSA, rsaKeyParams0.getKeyType());
      assertEquals(2048, rsaKeyParams0.getKeySize());
      assertEquals(KeyType.RSA, rsaKeyParams0.getType());
      assertEquals(2048, rsaKeyParams0.getDefaultSize());
      assertNotNull(rsaKeyParams0);
      
      Name name1 = keyChain0.createIdentityAndCertificate(name0, (KeyParams) rsaKeyParams0);
      assertTrue(keyChain0.getIsSecurityV1());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(4, name0.size());
      assertEquals(KeyIdType.RANDOM, rsaKeyParams0.getKeyIdType());
      assertEquals(KeyType.RSA, rsaKeyParams0.getKeyType());
      assertEquals(2048, rsaKeyParams0.getKeySize());
      assertEquals(KeyType.RSA, rsaKeyParams0.getType());
      assertEquals(2048, rsaKeyParams0.getDefaultSize());
      assertNull(name1);
      assertEquals(4, name_ComponentArray0.length);
      
      // Undeclared exception!
      try { 
        face0.setCommandSigningInfo(keyChain0, (Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Name name0 = SigningInfo.getDigestSha256Identity();
      assertEquals(4L, name0.getChangeCount());
      assertEquals(3, name0.size());
      assertNotNull(name0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      KeyChain keyChain0 = face0.commandKeyChain_;
      assertNull(keyChain0);
      
      face0.setCommandSigningInfo((KeyChain) null, name0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(4L, name0.getChangeCount());
      assertEquals(3, name0.size());
      
      OnRegisterFailed onRegisterFailed0 = null;
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      assertTrue(registrationOptions0.getChildInherit());
      assertFalse(registrationOptions0.getCapture());
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertEquals((-1), registrationOptions0.getOrigin());
      assertNotNull(registrationOptions0);
      
      // Undeclared exception!
      try { 
        face0.registerPrefix(name0, (OnInterestCallback) memoryContentCache0, (OnRegisterFailed) null, (OnRegisterSuccess) null, registrationOptions0, (WireFormat) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Face face0 = new Face("");
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1), interest0.getChildSelector());
      assertNotNull(interest0);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      Name name0 = null;
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      KeyChain keyChain0 = new KeyChain(identityManager0);
      assertTrue(keyChain0.getIsSecurityV1());
      assertNotNull(keyChain0);
      
      // Undeclared exception!
      try { 
        face0.setCommandSigningInfo(keyChain0, (Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Face face0 = new Face("net.named_data.jndn.Face");
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Name name0 = face0.commandCertificateName_;
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      
      Interest interest0 = new Interest();
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      Interest interest1 = Face.getInterestCopy(name0, interest0);
      assertFalse(interest1.equals((Object)interest0));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertTrue(interest0.getDefaultCanBePrefix());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertTrue(interest1.getCanBePrefix());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertEquals((-1), interest1.getChildSelector());
      assertNotNull(interest1);
      assertNotSame(interest0, interest1);
      assertNotSame(interest1, interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      NetworkNack networkNack0 = new NetworkNack();
      assertEquals((-1), networkNack0.getOtherReasonCode());
      assertEquals(NetworkNack.Reason.NONE, networkNack0.getReason());
      assertNotNull(networkNack0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, 1);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      assertEquals((-1), registrationOptions0.getOrigin());
      assertTrue(registrationOptions0.getChildInherit());
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertFalse(registrationOptions0.getCapture());
      assertNotNull(registrationOptions0);
      
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.registerPrefix(name0, (OnInterestCallback) memoryContentCache0, onRegisterFailed0, registrationOptions0, wireFormat0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Face face0 = new Face("net.named_data.jndn.Face");
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Name name0 = face0.commandCertificateName_;
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertNotNull(name0);
      
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(interest0.getDefaultCanBePrefix());
      assertNotNull(interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      Interest interest1 = Face.getInterestCopy(name0, interest0);
      assertFalse(interest1.equals((Object)interest0));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0L, name0.getChangeCount());
      assertEquals(0, name0.size());
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(interest0.getDefaultCanBePrefix());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertTrue(interest1.getCanBePrefix());
      assertNotNull(interest1);
      assertNotSame(interest0, interest1);
      assertNotSame(interest1, interest0);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      NetworkNack networkNack0 = new NetworkNack();
      assertEquals((-1), networkNack0.getOtherReasonCode());
      assertEquals(NetworkNack.Reason.NONE, networkNack0.getReason());
      assertNotNull(networkNack0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, 1);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertFalse(registrationOptions0.getCapture());
      assertEquals((-1), registrationOptions0.getOrigin());
      assertTrue(registrationOptions0.getChildInherit());
      assertNotNull(registrationOptions0);
      
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.registerPrefix(name0, (OnInterestCallback) memoryContentCache0, onRegisterFailed0, registrationOptions0, wireFormat0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, 0.0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      assertEquals((-1), registrationOptions0.getOrigin());
      assertTrue(registrationOptions0.getChildInherit());
      assertEquals(1, registrationOptions0.getNfdForwardingFlags());
      assertFalse(registrationOptions0.getCapture());
      assertNotNull(registrationOptions0);
      
      WireFormat wireFormat0 = new WireFormat();
      assertNotNull(wireFormat0);
      
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, (OnInterestCallback) memoryContentCache0, onRegisterFailed0, registrationOptions0, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Interest interest0 = null;
      WireFormat wireFormat0 = new WireFormat();
      assertNotNull(wireFormat0);
      
      Name name0 = null;
      Interest interest1 = new Interest((Name) null);
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getChildSelector());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertTrue(interest1.getCanBePrefix());
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertFalse(interest1.getMustBeFresh());
      assertNotNull(interest1);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      Interest interest2 = Face.getInterestCopy((Name) null, (Interest) null);
      assertFalse(interest2.equals((Object)interest1));
      assertEquals((-1), interest2.getSelectedDelegationIndex());
      assertEquals((-1), interest2.getMinSuffixComponents());
      assertTrue(interest2.getCanBePrefix());
      assertFalse(interest2.getMustBeFresh());
      assertEquals((-1), interest2.getMaxSuffixComponents());
      assertFalse(interest2.getDidSetCanBePrefix_());
      assertTrue(interest2.getDefaultCanBePrefix());
      assertEquals(4000.0, interest2.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest2.getChildSelector());
      assertNotNull(interest2);
      assertNotSame(interest2, interest1);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      
      long long0 = interest1.getIncomingFaceId();
      assertEquals((-1L), long0);
      assertFalse(interest1.equals((Object)interest2));
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getChildSelector());
      assertTrue(interest1.getDefaultCanBePrefix());
      assertTrue(interest1.getCanBePrefix());
      assertEquals((-1), interest1.getSelectedDelegationIndex());
      assertFalse(interest1.getMustBeFresh());
      assertNotSame(interest1, interest2);
      assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
      assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
      
      WireFormat wireFormat1 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat1);
      
      // Undeclared exception!
      try { 
        face0.makeCommandInterest(interest1, wireFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.CommandInterestGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face("");
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(face0);
          
          Interest interest0 = new Interest();
          assertEquals((-1), interest0.getMinSuffixComponents());
          assertFalse(interest0.getDidSetCanBePrefix_());
          assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
          assertEquals((-1), interest0.getMaxSuffixComponents());
          assertFalse(interest0.getMustBeFresh());
          assertTrue(interest0.getCanBePrefix());
          assertTrue(interest0.getDefaultCanBePrefix());
          assertEquals((-1), interest0.getSelectedDelegationIndex());
          assertEquals((-1), interest0.getChildSelector());
          assertNotNull(interest0);
          assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
          assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
          
          boolean boolean0 = interest0.hasLink();
          assertFalse(boolean0);
          assertEquals((-1), interest0.getMinSuffixComponents());
          assertFalse(interest0.getDidSetCanBePrefix_());
          assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
          assertEquals((-1), interest0.getMaxSuffixComponents());
          assertFalse(interest0.getMustBeFresh());
          assertTrue(interest0.getCanBePrefix());
          assertTrue(interest0.getDefaultCanBePrefix());
          assertEquals((-1), interest0.getSelectedDelegationIndex());
          assertEquals((-1), interest0.getChildSelector());
          assertEquals(1, Interest.CHILD_SELECTOR_RIGHT);
          assertEquals(0, Interest.CHILD_SELECTOR_LEFT);
          
          IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
          doReturn((Name) null).when(identityManager0).generateRSAKeyPair(any(net.named_data.jndn.Name.class) , anyBoolean() , anyInt());
          doReturn((Name) null).when(identityManager0).getDefaultIdentity();
          PolicyManager policyManager0 = mock(PolicyManager.class, new ViolatedAssumptionAnswer());
          KeyChain keyChain0 = new KeyChain(identityManager0, policyManager0);
          assertTrue(keyChain0.getIsSecurityV1());
          assertNotNull(keyChain0);
          
          Name name0 = keyChain0.getDefaultIdentity();
          assertTrue(keyChain0.getIsSecurityV1());
          assertNull(name0);
          
          Name name1 = keyChain0.generateRSAKeyPair((Name) null, false, (-1401));
          assertTrue(keyChain0.getIsSecurityV1());
          assertNull(name1);
          
          OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
          OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
          // Undeclared exception!
          try { 
            face0.expressInterest((Name) null, onData0, (OnTimeout) null, onNetworkNack0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"127.0.0.1:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:353)
             // net.named_data.jndn.Face.expressInterest(Face.java:492)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face();
          assertEquals(8800, face0.getMaxNdnPacketSize());
          assertNotNull(face0);
          
          OnInterestCallback onInterestCallback0 = null;
          OnRegisterFailed onRegisterFailed0 = null;
          Name name0 = null;
          String string0 = "(ZlyG.T\"Z=P^}X|?^";
          OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
          Face face1 = new Face("(ZlyG.T\"Z=P^}X|?^");
          assertFalse(face1.equals((Object)face0));
          assertEquals(8800, face1.getMaxNdnPacketSize());
          assertNotNull(face1);
          
          OnData onData1 = mock(OnData.class, new ViolatedAssumptionAnswer());
          OnTimeout onTimeout0 = ExponentialReExpress.makeOnTimeout(face1, onData1, (OnTimeout) null);
          assertFalse(face1.equals((Object)face0));
          assertEquals(8800, face1.getMaxNdnPacketSize());
          assertNotNull(onTimeout0);
          assertNotSame(face1, face0);
          
          OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
          // Undeclared exception!
          try { 
            face0.expressInterest((Name) null, onData0, onTimeout0, onNetworkNack0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:353)
             // net.named_data.jndn.Face.expressInterest(Face.java:492)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Face face0 = new Face();
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Name name0 = SigningInfo.getDigestSha256Identity();
      assertEquals(3, name0.size());
      assertEquals(4L, name0.getChangeCount());
      assertNotNull(name0);
      
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertEquals(0.0, memoryContentCache0.getMinimumCacheLifetime(), 0.01);
      assertNotNull(memoryContentCache0);
      
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.registerPrefix(name0, (OnInterestCallback) memoryContentCache0, onRegisterFailed0, onRegisterSuccess0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Face face0 = new Face("xrogzensqV=M");
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(face0);
      
      Name name0 = null;
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0, 1103.599557212);
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout1);
      
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout1);
      assertFalse(onTimeout2.equals((Object)onTimeout1));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout2);
      assertNotSame(onTimeout1, onTimeout2);
      assertNotSame(onTimeout2, onTimeout1);
      
      OnTimeout onTimeout3 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout2);
      assertFalse(onTimeout1.equals((Object)onTimeout2));
      assertFalse(onTimeout2.equals((Object)onTimeout1));
      assertFalse(onTimeout3.equals((Object)onTimeout2));
      assertFalse(onTimeout3.equals((Object)onTimeout1));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout3);
      assertNotSame(onTimeout1, onTimeout2);
      assertNotSame(onTimeout1, onTimeout3);
      assertNotSame(onTimeout2, onTimeout3);
      assertNotSame(onTimeout2, onTimeout1);
      assertNotSame(onTimeout3, onTimeout2);
      assertNotSame(onTimeout3, onTimeout1);
      
      OnData onData1 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout4 = ExponentialReExpress.makeOnTimeout(face0, onData1, onTimeout3, (-2988.6915017));
      assertFalse(onTimeout1.equals((Object)onTimeout2));
      assertFalse(onTimeout1.equals((Object)onTimeout3));
      assertFalse(onTimeout2.equals((Object)onTimeout3));
      assertFalse(onTimeout2.equals((Object)onTimeout1));
      assertFalse(onTimeout3.equals((Object)onTimeout2));
      assertFalse(onTimeout3.equals((Object)onTimeout1));
      assertFalse(onTimeout4.equals((Object)onTimeout1));
      assertFalse(onTimeout4.equals((Object)onTimeout2));
      assertFalse(onTimeout4.equals((Object)onTimeout3));
      assertEquals(8800, face0.getMaxNdnPacketSize());
      assertNotNull(onTimeout4);
      assertNotSame(onTimeout1, onTimeout4);
      assertNotSame(onTimeout1, onTimeout2);
      assertNotSame(onTimeout1, onTimeout3);
      assertNotSame(onTimeout2, onTimeout3);
      assertNotSame(onTimeout2, onTimeout4);
      assertNotSame(onTimeout2, onTimeout1);
      assertNotSame(onTimeout3, onTimeout2);
      assertNotSame(onTimeout3, onTimeout1);
      assertNotSame(onTimeout3, onTimeout4);
      assertNotSame(onTimeout4, onTimeout1);
      assertNotSame(onTimeout4, onTimeout2);
      assertNotSame(onTimeout4, onTimeout3);
      
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      assertNotNull(wireFormat0);
      
      UdpTransport udpTransport0 = new UdpTransport();
      assertFalse(udpTransport0.isAsync());
      assertFalse(udpTransport0.getIsConnected());
      assertNotNull(udpTransport0);
      
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      assertNotNull(transport_ConnectionInfo0);
      
      Face face1 = new Face(udpTransport0, transport_ConnectionInfo0);
      assertFalse(face1.equals((Object)face0));
      assertFalse(udpTransport0.isAsync());
      assertFalse(udpTransport0.getIsConnected());
      assertEquals(8800, face1.getMaxNdnPacketSize());
      assertNotNull(face1);
      
      OnData onData2 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face1.expressInterest((Name) null, onData2, onTimeout2, onNetworkNack0, wireFormat0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.UdpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.UdpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @191e0536)
         //
         verifyException("net.named_data.jndn.transport.UdpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Face face0 = new Face();
      Interest interest0 = null;
      PibImpl pibImpl0 = mock(PibImpl.class, new ViolatedAssumptionAnswer());
      doReturn((HashSet) null).when(pibImpl0).getIdentities();
      TpmBackEnd tpmBackEnd0 = mock(TpmBackEnd.class, new ViolatedAssumptionAnswer());
      KeyChain keyChain0 = new KeyChain(pibImpl0, tpmBackEnd0);
      Name name0 = new Name("Ljb}");
      InterestFilter interestFilter0 = new InterestFilter("Ljb}", "Unrecognized EncryptionAlgorithm code ");
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, 0.0);
      memoryContentCache0.getStorePendingInterest();
      face0.setInterestFilter(interestFilter0, (OnInterestCallback) memoryContentCache0);
      try { 
        keyChain0.generateRSAKeyPair((Name) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // generateRSAKeyPair is not supported for security v2. Use createIdentityV2.
         //
         verifyException("net.named_data.jndn.security.KeyChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Name name0 = new Name();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(801, threadPoolExecutor_AbortPolicy0);
      ThreadFactory threadFactory0 = scheduledThreadPoolExecutor0.getThreadFactory();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(801, threadFactory0, threadPoolExecutor_AbortPolicy0);
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport(scheduledThreadPoolExecutor1);
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(asyncTcpTransport0, transport_ConnectionInfo0);
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = ExponentialReExpress.makeOnTimeout(face0, onData0, (OnTimeout) null, (-1.0));
      WireFormat wireFormat0 = new WireFormat();
      // Undeclared exception!
      try { 
        face0.expressInterest(name0, onData0, onTimeout0, wireFormat0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.channels.spi.AsynchronousChannelProvider$ProviderHolder
         //
         verifyException("java.nio.channels.spi.AsynchronousChannelProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
          doReturn((Name) null).when(identityManager0).createIdentityAndCertificate(any(net.named_data.jndn.Name.class) , any(net.named_data.jndn.security.KeyParams.class));
          doReturn((Name) null).when(identityManager0).generateEcdsaKeyPairAsDefault(any(net.named_data.jndn.Name.class) , anyBoolean() , anyInt());
          PolicyManager policyManager0 = mock(PolicyManager.class, new ViolatedAssumptionAnswer());
          KeyChain keyChain0 = new KeyChain(identityManager0, policyManager0);
          Name name0 = null;
          keyChain0.generateEcdsaKeyPairAsDefault((Name) null, false, 0);
          Interest interest0 = new Interest((Name) null, 0);
          interest0.getForwardingHint();
          interest0.getExclude();
          Face.getInterestCopy((Name) null, interest0);
          TcpTransport tcpTransport0 = new TcpTransport();
          Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
          Face face0 = new Face(tcpTransport0, transport_ConnectionInfo0);
          Face face1 = new Face("?m3xFORcF=v(", 0);
          MemoryContentCache memoryContentCache0 = new MemoryContentCache(face1, 0.0);
          OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
          OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
          WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
          RsaKeyParams rsaKeyParams0 = KeyChain.DEFAULT_KEY_PARAMS;
          keyChain0.createIdentityAndCertificate((Name) null, (KeyParams) rsaKeyParams0);
          OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
          OnTimeout onTimeout0 = ExponentialReExpress.makeOnTimeout(face1, onData0, (OnTimeout) null);
          OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0, (-1.7976931348623157E308));
          // Undeclared exception!
          try { 
            face1.expressInterest((Name) null, onData0, onTimeout1, wireFormat0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:0\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:353)
             // net.named_data.jndn.Face.expressInterest(Face.java:530)
             // net.named_data.jndn.Face.expressInterest(Face.java:563)
             // jdk.internal.reflect.GeneratedMethodAccessor229.invoke(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(tcpTransport0, transport_ConnectionInfo0);
      Interest interest0 = new Interest();
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.expressInterest(interest0, onData0, (OnTimeout) null, onNetworkNack0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.TcpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.TcpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @191e0536)
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "&h3?&y>&FdpV+K]8$w";
      int int0 = 218;
      Face face0 = new Face("&h3?&y>&FdpV+K]8$w", 218);
      Name name0 = null;
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, 218);
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, (OnInterestCallback) memoryContentCache0, onRegisterSuccess0, onRegisterFailed0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Face face0 = new Face();
      Name name0 = face0.commandCertificateName_;
      Interest interest0 = new Interest(name0);
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      interest0.getLinkWireEncoding();
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.registerPrefix(name0, (OnInterestCallback) memoryContentCache0, onRegisterSuccess0, onRegisterFailed0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Face face0 = new Face("u");
      Name name0 = null;
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0, 89.5);
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout1);
      ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout2);
      OnData onData1 = mock(OnData.class, new ViolatedAssumptionAnswer());
      ExponentialReExpress.makeOnTimeout(face0, onData1, onTimeout2, (-2473.39826112));
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      OnInterestCallback onInterestCallback0 = memoryContentCache0.getStorePendingInterest();
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, onInterestCallback0, onRegisterSuccess0, onRegisterFailed0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Face face0 = new Face();
      // Undeclared exception!
      try { 
        face0.expressInterest((Interest) null, (OnData) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Face face0 = new Face();
      Name name0 = new Name("");
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      face0.setInterestFilter(name0, (OnInterestCallback) memoryContentCache0);
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      MemoryContentCache memoryContentCache1 = new MemoryContentCache(face0);
      Interest interest0 = null;
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.expressInterest((Interest) null, onData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Face face0 = new Face();
      long long0 = 1700L;
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      doReturn((Name) null).when(identityManager0).getDefaultIdentity();
      KeyChain keyChain0 = new KeyChain(identityManager0);
      keyChain0.getDefaultIdentity();
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      OnInterestCallback onInterestCallback0 = memoryContentCache0.getStorePendingInterest();
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, onInterestCallback0, onRegisterSuccess0, onRegisterFailed0, registrationOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Face face0 = new Face();
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, (OnInterestCallback) memoryContentCache0, (OnRegisterSuccess) null, onRegisterFailed0, registrationOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Face face0 = new Face();
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0, 0.0);
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout1);
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.expressInterest((Interest) null, onData0, onTimeout2, onNetworkNack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face();
          Interest interest0 = new Interest();
          OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
          // Undeclared exception!
          try { 
            face0.expressInterest(interest0, (OnData) null, (OnTimeout) null, onNetworkNack0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:142)
             // net.named_data.jndn.Face.expressInterest(Face.java:188)
             // jdk.internal.reflect.GeneratedMethodAccessor210.invoke(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Face face0 = new Face("xrogzensqV=M");
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      Face face1 = new Face();
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face1, onData0, onTimeout0);
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face1, onData0, onTimeout1, 60.0);
      OnTimeout onTimeout3 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout2);
      OnData onData1 = mock(OnData.class, new ViolatedAssumptionAnswer());
      ExponentialReExpress.makeOnTimeout(face0, onData1, onTimeout3, 60.0);
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face1.expressInterest((Interest) null, (OnData) null, onTimeout1, onNetworkNack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      UdpTransport udpTransport0 = new UdpTransport();
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(udpTransport0, transport_ConnectionInfo0);
      String string0 = "";
      Interest interest0 = new Interest("3S}9L{V7kCD[rUY");
      Face face1 = new Face((String) null);
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face1, (OnData) null, onTimeout0, 0.5);
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, (OnData) null, onTimeout1);
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      WireFormat wireFormat0 = new WireFormat();
      // Undeclared exception!
      try { 
        face0.expressInterest(interest0, (OnData) null, onTimeout2, onNetworkNack0, wireFormat0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.UdpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.UdpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @191e0536)
         //
         verifyException("net.named_data.jndn.transport.UdpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      UdpTransport udpTransport0 = new UdpTransport();
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(udpTransport0, transport_ConnectionInfo0);
      String string0 = "";
      Interest interest0 = new Interest("3S}9L{V7kCD[rUY");
      Face face1 = new Face((String) null);
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face1, (OnData) null, onTimeout0, 0.5);
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, (OnData) null, onTimeout1);
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      WireFormat wireFormat0 = new WireFormat();
      // Undeclared exception!
      try { 
        face0.expressInterest(interest0, (OnData) null, onTimeout2, onNetworkNack0, wireFormat0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.UdpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.UdpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @191e0536)
         //
         verifyException("net.named_data.jndn.transport.UdpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face();
          OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
          OnData onData1 = mock(OnData.class, new ViolatedAssumptionAnswer());
          OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
          OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData1, onTimeout0, 2000.0);
          OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData1, onTimeout1);
          OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
          WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
          // Undeclared exception!
          try { 
            face0.expressInterest((Name) null, onData0, onTimeout2, onNetworkNack0, wireFormat0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:353)
             // net.named_data.jndn.Face.expressInterest(Face.java:448)
             // jdk.internal.reflect.GeneratedMethodAccessor209.invoke(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face("localhost");
          OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
          OnData onData1 = mock(OnData.class, new ViolatedAssumptionAnswer());
          OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
          OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData1, onTimeout0);
          OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout1, (-1.0));
          OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
          WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
          // Undeclared exception!
          try { 
            face0.expressInterest((Name) null, onData0, onTimeout2, onNetworkNack0, wireFormat0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:353)
             // net.named_data.jndn.Face.expressInterest(Face.java:448)
             // jdk.internal.reflect.GeneratedMethodAccessor209.invoke(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Face face0 = new Face();
      long long0 = 1700L;
      // Undeclared exception!
      try { 
        face0.removeRegisteredPrefix(1700L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Face face0 = new Face();
      // Undeclared exception!
      try { 
        face0.removeRegisteredPrefix(1L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Face face0 = new Face("", 0);
      face0.processEvents();
      face0.isLocal();
      // Undeclared exception!
      try { 
        face0.unsetInterestFilter(0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Face face0 = new Face();
      boolean boolean0 = face0.isLocal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face();
          Name name0 = face0.commandCertificateName_;
          OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
          OnTimeout onTimeout0 = ExponentialReExpress.makeOnTimeout(face0, onData0, (OnTimeout) null);
          // Undeclared exception!
          try { 
            face0.expressInterest(name0, onData0, onTimeout0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:353)
             // net.named_data.jndn.Face.expressInterest(Face.java:530)
             // net.named_data.jndn.Face.expressInterest(Face.java:694)
             // jdk.internal.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Face face0 = new Face();
      face0.processEvents();
      // Undeclared exception!
      try { 
        face0.removeRegisteredPrefix(4294967295L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face("");
          face0.processEvents();
          face0.processEvents();
          Name name0 = null;
          OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
          OnTimeout onTimeout0 = ExponentialReExpress.makeOnTimeout(face0, onData0, (OnTimeout) null, 0.0);
          // Undeclared exception!
          try { 
            face0.expressInterest((Name) null, onData0, onTimeout0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"127.0.0.1:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:353)
             // net.named_data.jndn.Face.expressInterest(Face.java:530)
             // net.named_data.jndn.Face.expressInterest(Face.java:694)
             // jdk.internal.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Face face0 = new Face();
      // Undeclared exception!
      try { 
        face0.unsetInterestFilter(0L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Face face0 = new Face("Unrecognized fixed-signer signerType: ");
      // Undeclared exception!
      try { 
        face0.unsetInterestFilter((-227L));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Face face0 = new Face();
      // Undeclared exception!
      try { 
        face0.putData((Data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Face face0 = new Face();
      CertificateV2 certificateV2_0 = new CertificateV2();
      try { 
        face0.putData((Data) certificateV2_0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot send because the socket is not open.  Use connect.
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Face face0 = new Face("");
      Interest interest0 = new Interest();
      interest0.hasLink();
      ValidationPolicy validationPolicy0 = mock(ValidationPolicy.class, new ViolatedAssumptionAnswer());
      CertificateFetcher certificateFetcher0 = mock(CertificateFetcher.class, new ViolatedAssumptionAnswer());
      Validator validator0 = new Validator(validationPolicy0, certificateFetcher0);
      validator0.findTrustedCertificate(interest0);
      // Undeclared exception!
      try { 
        face0.putData((Data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      UdpTransport udpTransport0 = new UdpTransport();
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(udpTransport0, transport_ConnectionInfo0);
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      doReturn((Name) null).when(identityManager0).createIdentityAndCertificate(any(net.named_data.jndn.Name.class) , any(net.named_data.jndn.security.KeyParams.class));
      KeyChain keyChain0 = new KeyChain(identityManager0);
      Name.Component[] name_ComponentArray0 = new Name.Component[6];
      Name.Component name_Component0 = mock(Name.Component.class, new ViolatedAssumptionAnswer());
      name_ComponentArray0[0] = name_Component0;
      name_ComponentArray0[1] = name_Component0;
      name_ComponentArray0[2] = name_Component0;
      name_ComponentArray0[3] = name_Component0;
      name_ComponentArray0[4] = name_Component0;
      name_ComponentArray0[5] = name_Component0;
      Name name0 = new Name(name_ComponentArray0);
      KeyParams keyParams0 = KeyChain.getDefaultKeyParams();
      keyChain0.createIdentityAndCertificate(name0, keyParams0);
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, 742.76608618376);
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, (OnInterestCallback) memoryContentCache0, onRegisterSuccess0, onRegisterFailed0, registrationOptions0, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Face face0 = new Face();
      CertificateV2 certificateV2_0 = new CertificateV2();
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, (OnInterestCallback) memoryContentCache0, onRegisterSuccess0, onRegisterFailed0, registrationOptions0, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Face face0 = new Face("fyeyRS8~", 0);
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      WireFormat wireFormat0 = new WireFormat();
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, (OnInterestCallback) null, (OnRegisterSuccess) null, onRegisterFailed0, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      doReturn((Name) null).when(identityManager0).generateEcdsaKeyPairAsDefault(any(net.named_data.jndn.Name.class) , anyBoolean() , anyInt());
      PolicyManager policyManager0 = mock(PolicyManager.class, new ViolatedAssumptionAnswer());
      KeyChain keyChain0 = new KeyChain(identityManager0, policyManager0);
      Name name0 = null;
      keyChain0.generateEcdsaKeyPairAsDefault((Name) null, false, 0);
      Interest interest0 = new Interest((Name) null, 0);
      interest0.getForwardingHint();
      interest0.getExclude();
      Face.getInterestCopy((Name) null, interest0);
      TcpTransport tcpTransport0 = new TcpTransport();
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(tcpTransport0, transport_ConnectionInfo0);
      Face face1 = new Face("?m3xFORcF=v(", 0);
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face1, 0.0);
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, (OnInterestCallback) memoryContentCache0, onRegisterSuccess0, onRegisterFailed0, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      UdpTransport udpTransport0 = new UdpTransport();
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(udpTransport0, transport_ConnectionInfo0);
      Interest interest0 = new Interest("` does not match the key name");
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnData onData1 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData1, onTimeout0, 0.0);
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData1, onTimeout1);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      // Undeclared exception!
      try { 
        face0.expressInterest(interest0, onData1, onTimeout2, wireFormat0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.UdpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.UdpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @191e0536)
         //
         verifyException("net.named_data.jndn.transport.UdpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(tcpTransport0, transport_ConnectionInfo0);
      Name name0 = new Name("");
      Interest interest0 = new Interest(name0, (-1257.9552144));
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0);
      OnTimeout onTimeout2 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout1, (double) 0);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      // Undeclared exception!
      try { 
        face0.expressInterest(interest0, onData0, onTimeout2, wireFormat0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.TcpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.TcpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @191e0536)
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face();
          Interest interest0 = new Interest();
          // Undeclared exception!
          try { 
            face0.expressInterest(interest0, (OnData) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:142)
             // net.named_data.jndn.Face.expressInterest(Face.java:221)
             // net.named_data.jndn.Face.expressInterest(Face.java:303)
             // jdk.internal.reflect.GeneratedMethodAccessor213.invoke(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      TcpTransport.getIsLocal("");
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(tcpTransport0, transport_ConnectionInfo0);
      MockThread mockThread0 = new MockThread();
      face0.callLater(4000.0, mockThread0);
      face0.setInterestLoopbackEnabled(false);
      Name name0 = new Name("");
      Name name1 = new Name(name0);
      Interest interest0 = new Interest("");
      Face.getInterestCopy(name1, interest0);
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = ExponentialReExpress.makeOnTimeout(face0, onData0, (OnTimeout) null, (-2029.4998741));
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      // Undeclared exception!
      try { 
        face0.expressInterest(name1, interest0, onData0, onTimeout0, wireFormat0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.TcpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.TcpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @191e0536)
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Face face0 = new Face("xrogzensqV=M");
      face0.setInterestLoopbackEnabled(true);
      assertEquals(8800, face0.getMaxNdnPacketSize());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Face face0 = new Face();
      MockThread mockThread0 = new MockThread();
      face0.callLater(0.0, mockThread0);
      Interest interest0 = new Interest();
      // Undeclared exception!
      try { 
        face0.makeCommandInterest(interest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.CommandInterestGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      TcpTransport.getIsLocal("");
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(tcpTransport0, transport_ConnectionInfo0);
      MockThread mockThread0 = new MockThread();
      face0.callLater(4000.0, mockThread0);
      face0.setInterestLoopbackEnabled(false);
      Name name0 = new Name("");
      Name name1 = new Name(name0);
      Interest interest0 = new Interest("");
      Interest interest1 = Face.getInterestCopy(name1, interest0);
      Interest interest2 = new Interest(interest1);
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = ExponentialReExpress.makeOnTimeout(face0, onData0, (OnTimeout) null, (-2029.4998741));
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      // Undeclared exception!
      try { 
        face0.expressInterest(name1, interest2, onData0, onTimeout0, wireFormat0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.TcpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.TcpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @191e0536)
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Face face0 = new Face();
      WireFormat wireFormat0 = new WireFormat();
      // Undeclared exception!
      try { 
        face0.makeCommandInterest((Interest) null, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.CommandInterestPreparer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Face face0 = new Face();
      Interest interest0 = new Interest();
      // Undeclared exception!
      try { 
        face0.makeCommandInterest(interest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.CommandInterestGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Face face0 = new Face();
      Interest interest0 = null;
      WireFormat wireFormat0 = new WireFormat();
      // Undeclared exception!
      try { 
        face0.makeCommandInterest((Interest) null, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.CommandInterestPreparer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Face face0 = new Face("u");
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      doReturn((Name) null).when(identityManager0).generateRSAKeyPair(any(net.named_data.jndn.Name.class));
      KeyChain keyChain0 = new KeyChain(identityManager0);
      Name name0 = new Name();
      keyChain0.generateRSAKeyPair(name0);
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      OnInterestCallback onInterestCallback0 = memoryContentCache0.getStorePendingInterest();
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, onInterestCallback0, onRegisterFailed0, onRegisterSuccess0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = Face.getMaxNdnPacketSize();
      assertEquals(8800, int0);
      
      Face face0 = new Face("L]*memj1c.ot9W$", 8800);
      PibImpl pibImpl0 = mock(PibImpl.class, new ViolatedAssumptionAnswer());
      doReturn((HashSet) null).when(pibImpl0).getIdentities();
      TpmBackEnd tpmBackEnd0 = mock(TpmBackEnd.class, new ViolatedAssumptionAnswer());
      PolicyManager policyManager0 = mock(PolicyManager.class, new ViolatedAssumptionAnswer());
      KeyChain keyChain0 = new KeyChain(pibImpl0, tpmBackEnd0, policyManager0);
      Name.Component[] name_ComponentArray0 = new Name.Component[2];
      Name.Component name_Component0 = mock(Name.Component.class, new ViolatedAssumptionAnswer());
      name_ComponentArray0[0] = name_Component0;
      name_ComponentArray0[1] = name_Component0;
      Name name0 = new Name(name_ComponentArray0);
      try { 
        keyChain0.generateRSAKeyPairAsDefault(name0, false, 8800);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // generateRSAKeyPairAsDefault is not supported for security v2. Use createIdentityV2.
         //
         verifyException("net.named_data.jndn.security.KeyChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Face face0 = new Face("A)k6KR H|y82", (-1771));
      assertEquals(8800, face0.getMaxNdnPacketSize());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Face face0 = new Face((String) null, (-1));
      TpmBackEnd tpmBackEnd0 = mock(TpmBackEnd.class, new ViolatedAssumptionAnswer());
      PolicyManager policyManager0 = mock(PolicyManager.class, new ViolatedAssumptionAnswer());
      KeyChain keyChain0 = null;
      try {
        keyChain0 = new KeyChain((PibImpl) null, tpmBackEnd0, policyManager0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // The pibImpl is null
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Face face0 = new Face();
      WireFormat.getDefaultWireFormat();
      Interest interest0 = new Interest();
      Interest interest1 = Face.getInterestCopy((Name) null, interest0);
      assertNotSame(interest1, interest0);
      
      Interest interest2 = new Interest(interest1);
      assertEquals((-1.0), interest2.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Face face0 = new Face();
      Interest interest0 = new Interest();
      NetworkNack networkNack0 = new NetworkNack();
      try { 
        face0.putNack(interest0, networkNack0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot send because the socket is not open.  Use connect.
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Face face0 = new Face("net.named_data.jndn.Face");
      Name name0 = face0.commandCertificateName_;
      Interest interest0 = new Interest();
      Interest interest1 = Face.getInterestCopy(name0, interest0);
      NetworkNack networkNack0 = new NetworkNack();
      NetworkNack.Reason networkNack_Reason0 = NetworkNack.Reason.DUPLICATE;
      NetworkNack networkNack1 = networkNack0.setReason(networkNack_Reason0);
      try { 
        face0.putNack(interest1, networkNack1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot send because the socket is not open.  Use connect.
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 36;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(36);
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport(scheduledThreadPoolExecutor0);
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(asyncTcpTransport0, transport_ConnectionInfo0);
      KeyChain keyChain0 = null;
      try {
        keyChain0 = new KeyChain("P", "-5vKVF#8<^!k`L&");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // PIB scheme `P` is not supported
         //
         verifyException("net.named_data.jndn.security.KeyChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Face face0 = new Face();
      InterestFilter interestFilter0 = new InterestFilter("The key is null", "The key is null");
      long long0 = face0.setInterestFilter(interestFilter0, (OnInterestCallback) null);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Face face0 = new Face();
      Name name0 = new Name("");
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0);
      face0.setInterestFilter(name0, (OnInterestCallback) memoryContentCache0);
      OnRegisterFailed onRegisterFailed0 = mock(OnRegisterFailed.class, new ViolatedAssumptionAnswer());
      OnRegisterSuccess onRegisterSuccess0 = mock(OnRegisterSuccess.class, new ViolatedAssumptionAnswer());
      MemoryContentCache memoryContentCache1 = new MemoryContentCache(face0);
      RegistrationOptions registrationOptions0 = new RegistrationOptions();
      // Undeclared exception!
      try { 
        memoryContentCache0.registerPrefix(name0, onRegisterFailed0, onRegisterSuccess0, (OnInterestCallback) memoryContentCache1, registrationOptions0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Face face0 = new Face();
      // Undeclared exception!
      try { 
        face0.registerPrefix((Name) null, (OnInterestCallback) null, (OnRegisterFailed) null, (OnRegisterSuccess) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Face face0 = new Face("localhost");
      MemoryContentCache memoryContentCache0 = new MemoryContentCache(face0, 131.631550746);
      // Undeclared exception!
      try { 
        face0.setInterestFilter((Name) null, (OnInterestCallback) memoryContentCache0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face();
          Name name0 = new Name();
          WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
          // Undeclared exception!
          try { 
            face0.expressInterest(name0, (OnData) null, wireFormat0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:353)
             // net.named_data.jndn.Face.expressInterest(Face.java:530)
             // net.named_data.jndn.Face.expressInterest(Face.java:720)
             // jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Face face0 = new Face("");
          KeyLocator keyLocator0 = new KeyLocator();
          Name name0 = keyLocator0.getKeyName();
          OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
          keyLocator0.setKeyName(name0);
          WireFormat wireFormat0 = new WireFormat();
          // Undeclared exception!
          try { 
            face0.expressInterest(name0, onData0, wireFormat0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"127.0.0.1:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:353)
             // net.named_data.jndn.Face.expressInterest(Face.java:530)
             // net.named_data.jndn.Face.expressInterest(Face.java:720)
             // jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
