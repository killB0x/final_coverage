/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 21:46:15 GMT 2022
 */

package net.named_data.jndn;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import net.named_data.jndn.ComponentType;
import net.named_data.jndn.ControlParameters;
import net.named_data.jndn.Data;
import net.named_data.jndn.DelegationSet;
import net.named_data.jndn.DigestSha256Signature;
import net.named_data.jndn.Exclude;
import net.named_data.jndn.GenericSignature;
import net.named_data.jndn.HmacWithSha256Signature;
import net.named_data.jndn.Interest;
import net.named_data.jndn.KeyLocator;
import net.named_data.jndn.Link;
import net.named_data.jndn.MetaInfo;
import net.named_data.jndn.Name;
import net.named_data.jndn.Sha256WithEcdsaSignature;
import net.named_data.jndn.Sha256WithRsaSignature;
import net.named_data.jndn.encoding.WireFormat;
import net.named_data.jndn.lp.LpPacket;
import net.named_data.jndn.util.Blob;
import net.named_data.jndn.util.SignedBlob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Interest_ESTest extends Interest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Link link0 = new Link();
      Interest interest0 = new Interest(name0);
      WireFormat wireFormat0 = new WireFormat();
      boolean boolean0 = interest0.matchesData((Data) link0, wireFormat0);
      assertFalse(interest0.getMustBeFresh());
      assertTrue(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(boolean0);
      assertEquals(1, interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setMaxSuffixComponents(252);
      Name name0 = new Name();
      boolean boolean0 = interest0.matchesName(name0);
      assertEquals(252, interest0.getMaxSuffixComponents());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      Name name0 = new Name("lW3v&nD]m0L<");
      boolean boolean0 = interest0.matchesName(name0);
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(boolean0);
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getCanBePrefix());
      assertTrue(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Name name0 = new Name("encodeSignatureInfo is not implemented");
      Interest interest0 = new Interest(name0);
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      interest0.setMinSuffixComponents(1);
      boolean boolean0 = interest0.matchesName(name0);
      assertEquals(1, interest0.getMinSuffixComponents());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      interest0.setMinSuffixComponents(0);
      Name name0 = new Name();
      boolean boolean0 = interest0.matchesName(name0);
      assertEquals(0, interest0.getMinSuffixComponents());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Interest interest0 = new Interest((Name) null, 0.0);
      String string0 = interest0.toUri();
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals("/?ndn.MustBeFresh=0&ndn.InterestLifetime=0", string0);
      assertEquals((-1), interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getChildSelector());
      
      interest0.setChildSelector(0);
      interest0.toUri();
      assertEquals(0, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      
      interest0.setMaxSuffixComponents(1);
      String string0 = interest0.toUri();
      assertEquals("/?ndn.MaxSuffixComponents=1&ndn.MustBeFresh=0", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      interest0.setMinSuffixComponents(0);
      interest0.toUri();
      assertEquals(0, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Interest interest0 = new Interest();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      SignedBlob signedBlob0 = interest0.wireEncode(wireFormat0);
      interest0.wireDecode((Blob) signedBlob0, wireFormat0);
      assertTrue(interest0.getDidSetCanBePrefix_());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setSelectedDelegationIndex(0);
      interest0.unsetLink();
      assertEquals(0, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setSelectedDelegationIndex(12);
      interest0.unsetLink();
      assertEquals(12, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Interest interest0 = new Interest();
      assertFalse(interest0.getMustBeFresh());
      
      interest0.setMustBeFresh(true);
      interest0.unsetLink();
      assertTrue(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Interest interest0 = new Interest("aOOtXP2");
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      Interest interest1 = interest0.setMinSuffixComponents(0);
      interest1.unsetLink();
      assertEquals(0, interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Interest interest0 = new Interest("|.\"?au");
      Interest interest1 = interest0.setMinSuffixComponents(70);
      interest1.unsetLink();
      assertEquals(70, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Interest interest0 = new Interest(".W");
      assertEquals((-1), interest0.getMaxSuffixComponents());
      
      Interest interest1 = interest0.setMaxSuffixComponents(0);
      interest1.unsetLink();
      assertEquals(0, interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Interest interest0 = new Interest((Name) null, 0.0);
      Interest interest1 = interest0.unsetLink();
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(interest1.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0, 1);
      Interest interest1 = interest0.unsetLink();
      assertEquals((-1), interest1.getChildSelector());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Interest interest0 = new Interest("");
      assertEquals((-1), interest0.getChildSelector());
      
      interest0.setChildSelector(0);
      interest0.unsetLink();
      assertEquals(0, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Interest interest0 = new Interest(" B>y<]TQ37 )bl'A!%_");
      Interest interest1 = interest0.setChildSelector(40);
      interest1.unsetLink();
      assertEquals(40, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      Interest interest1 = interest0.unsetLink();
      assertEquals((-1), interest1.getChildSelector());
      assertTrue(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals(1, interest1.getMaxSuffixComponents());
      assertFalse(interest1.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setMustBeFresh(true);
      interest0.setSelectedDelegationIndex(0);
      assertEquals(0, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0);
      interest0.setMinSuffixComponents(0);
      interest0.setSelectedDelegationIndex(1);
      assertEquals(1, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setMinSuffixComponents(2345);
      interest1.setSelectedDelegationIndex(2345);
      assertEquals(2345, interest1.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Interest interest0 = new Interest("net.named_data.jndn.Interest");
      Interest interest1 = interest0.setMaxSuffixComponents(0);
      interest1.setSelectedDelegationIndex((-485));
      assertEquals((-485), interest1.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setInterestLifetimeMilliseconds(3970.339);
      interest0.setSelectedDelegationIndex(1);
      assertEquals(1, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0);
      interest0.setSelectedDelegationIndex(896);
      assertEquals(896, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setChildSelector(0);
      interest0.setSelectedDelegationIndex(0);
      assertEquals(0, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setChildSelector(1);
      interest0.setSelectedDelegationIndex(4);
      assertEquals(4, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Interest interest0 = new Interest("");
      Interest interest1 = interest0.setCanBePrefix(false);
      interest1.setSelectedDelegationIndex(0);
      assertEquals(0, interest1.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Interest interest0 = new Interest("HsLQSS#");
      Interest interest1 = interest0.setSelectedDelegationIndex(0);
      byte[] byteArray0 = new byte[2];
      Blob blob0 = new Blob(byteArray0, true);
      interest1.setParameters(blob0);
      assertEquals(0, interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setSelectedDelegationIndex(4);
      Blob blob0 = new Blob();
      interest0.setParameters(blob0);
      assertEquals(4, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Name name0 = new Name("");
      Interest interest0 = new Interest(name0);
      assertFalse(interest0.getMustBeFresh());
      
      interest0.setMustBeFresh(true);
      Blob blob0 = new Blob("");
      interest0.setParameters(blob0);
      assertTrue(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      Interest interest1 = interest0.setMinSuffixComponents(0);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      SignedBlob signedBlob0 = interest1.wireEncode(wireFormat0);
      interest0.setParameters(signedBlob0);
      assertEquals(0, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Interest interest0 = new Interest((Name) null, (-3215.50440346577));
      SignedBlob signedBlob0 = interest0.getDefaultWireEncoding();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      
      interest0.setMaxSuffixComponents(0);
      interest0.setParameters(signedBlob0);
      assertEquals(0, interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Name name0 = new Name("");
      Interest interest0 = new Interest(name0);
      SignedBlob signedBlob0 = interest0.getDefaultWireEncoding();
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      
      Interest interest1 = interest0.setInterestLifetimeMilliseconds(0);
      interest1.setParameters(signedBlob0);
      assertEquals((-1), interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Interest interest0 = new Interest((Name) null, (-3215.50440346577));
      SignedBlob signedBlob0 = interest0.getDefaultWireEncoding();
      assertEquals((-1), interest0.getChildSelector());
      
      interest0.setChildSelector(0);
      interest0.setParameters(signedBlob0);
      assertEquals(0, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setChildSelector(2195);
      SignedBlob signedBlob0 = interest0.wireEncode();
      interest1.setParameters(signedBlob0);
      assertEquals(2195, interest0.getChildSelector());
      assertEquals((-1), interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Name name0 = new Name();
      Interest interest0 = new Interest(name0, 367.00155);
      Link link0 = new Link();
      SignedBlob signedBlob0 = link0.getDefaultWireEncoding();
      Interest interest1 = interest0.setParameters(signedBlob0);
      assertFalse(interest1.getMustBeFresh());
      assertTrue(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getChildSelector());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals(1, interest1.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setSelectedDelegationIndex(0);
      int[] intArray0 = new int[7];
      Blob blob0 = new Blob(intArray0);
      interest1.setNonce(blob0);
      assertEquals(0, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setSelectedDelegationIndex(2991);
      SignedBlob signedBlob0 = interest0.wireEncode();
      interest0.setNonce(signedBlob0);
      assertEquals(2991, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Interest interest0 = new Interest();
      assertFalse(interest0.getMustBeFresh());
      
      interest0.setMustBeFresh(true);
      SignedBlob signedBlob0 = interest0.wireEncode();
      interest0.setNonce(signedBlob0);
      assertTrue(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      Blob blob0 = new Blob("&ndn.MinSuffixComponents=");
      interest0.setMinSuffixComponents(0);
      interest0.setNonce(blob0);
      assertEquals(0, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setMinSuffixComponents(517);
      interest0.setNonce((Blob) null);
      assertEquals(517, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.getDefaultWireEncoding();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      
      interest0.setMaxSuffixComponents(0);
      interest0.setNonce(signedBlob0);
      assertEquals(0, interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0);
      Blob blob0 = interest0.getNonce();
      Interest interest1 = new Interest(name0, 0);
      Interest interest2 = interest1.setNonce(blob0);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest2.getMustBeFresh());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest2.getMaxSuffixComponents());
      assertEquals((-1), interest2.getMinSuffixComponents());
      assertEquals((-1), interest2.getChildSelector());
      assertEquals((-1), interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setInterestLifetimeMilliseconds(1564.076909);
      SignedBlob signedBlob0 = interest0.getDefaultWireEncoding();
      interest0.setNonce(signedBlob0);
      assertEquals(1564.076909, interest0.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getChildSelector());
      
      Interest interest1 = interest0.setChildSelector(0);
      Blob blob0 = new Blob();
      interest1.setNonce(blob0);
      assertEquals(0, interest0.getChildSelector());
      assertEquals((-1), interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0, (-2081.6));
      interest0.setChildSelector(511);
      Blob blob0 = Name.fromEscapedString("h");
      interest0.setNonce(blob0);
      assertEquals(511, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      Blob blob0 = interest0.getNonce();
      Interest interest1 = interest0.setNonce(blob0);
      assertFalse(interest1.getMustBeFresh());
      assertTrue(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest1.getCanBePrefix());
      assertEquals((-1), interest1.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setSelectedDelegationIndex(0);
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator0 = KeyLocator.getFromSignature(sha256WithEcdsaSignature0);
      Name name0 = keyLocator0.getKeyName();
      interest1.setName(name0);
      assertEquals(0, interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setSelectedDelegationIndex(12);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      interest0.setName(name0);
      assertEquals(12, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Interest interest0 = new Interest();
      assertFalse(interest0.getMustBeFresh());
      
      Name name0 = new Name();
      interest0.setMustBeFresh(true);
      interest0.setName(name0);
      assertTrue(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Interest interest0 = new Interest((Name) null, (-3215.50440346577));
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      interest0.setMinSuffixComponents(0);
      interest0.setName((Name) null);
      assertEquals(0, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      interest0.setMinSuffixComponents(1);
      Name name0 = new Name();
      interest0.setName(name0);
      assertEquals(1, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      
      interest0.setMaxSuffixComponents(0);
      KeyLocator keyLocator0 = new KeyLocator();
      Name name0 = keyLocator0.getKeyName();
      interest0.setName(name0);
      assertEquals(0, interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0, 0.0);
      Interest interest1 = interest0.setName(name0);
      assertEquals((-1), interest1.getChildSelector());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Interest interest0 = new Interest((Name) null, 1471.2354112585685);
      Interest interest1 = interest0.setName((Name) null);
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getChildSelector());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertEquals((-1), interest1.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest1 = interest0.setName(name0);
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(interest1.getMustBeFresh());
      assertTrue(interest1.getDidSetCanBePrefix_());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals(1, interest1.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Interest interest0 = new Interest((Name) null, (-3215.50440346577));
      assertEquals((-1), interest0.getChildSelector());
      
      interest0.setChildSelector(0);
      interest0.setName((Name) null);
      assertEquals(0, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setChildSelector(64);
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      KeyLocator keyLocator0 = sha256WithRsaSignature0.getKeyLocator();
      Name name0 = keyLocator0.getKeyName();
      interest0.setName(name0);
      assertEquals(64, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setSelectedDelegationIndex(0);
      interest0.setMustBeFresh(true);
      assertEquals(0, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0, 0.0);
      interest0.setSelectedDelegationIndex(556);
      interest0.setMustBeFresh(true);
      assertEquals(556, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Interest interest0 = new Interest("aOOtXP2");
      interest0.setMinSuffixComponents(0);
      interest0.setMustBeFresh(true);
      assertEquals(0, interest0.getMinSuffixComponents());
      assertTrue(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setMinSuffixComponents(1878);
      interest1.setMustBeFresh(false);
      assertEquals(1878, interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Interest interest0 = new Interest(".W");
      assertEquals((-1), interest0.getMaxSuffixComponents());
      
      interest0.setMaxSuffixComponents(0);
      interest0.setMustBeFresh(false);
      assertEquals(0, interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      KeyLocator keyLocator0 = hmacWithSha256Signature0.getKeyLocator();
      Name name0 = keyLocator0.getKeyName();
      Interest interest0 = new Interest(name0, 2069.93639359);
      assertFalse(interest0.getMustBeFresh());
      
      interest0.setMustBeFresh(true);
      assertTrue(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Interest interest0 = new Interest((Name) null, (-3215.50440346577));
      interest0.setChildSelector(0);
      interest0.setMustBeFresh(true);
      assertTrue(interest0.getMustBeFresh());
      assertEquals(0, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setChildSelector(1);
      interest1.setMustBeFresh(true);
      assertEquals(1, interest0.getChildSelector());
      assertTrue(interest1.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      assertFalse(interest0.getMustBeFresh());
      
      interest0.setMustBeFresh(true);
      assertTrue(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setSelectedDelegationIndex(0);
      interest1.setMinSuffixComponents(0);
      assertEquals(0, interest0.getSelectedDelegationIndex());
      assertEquals(0, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setSelectedDelegationIndex(402);
      interest0.setMinSuffixComponents(402);
      assertEquals(402, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setMustBeFresh(true);
      interest1.setMinSuffixComponents(0);
      assertTrue(interest0.getMustBeFresh());
      assertEquals(0, interest1.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      interest0.setMaxSuffixComponents(0);
      interest0.setMinSuffixComponents(0);
      assertEquals(0, interest0.getMinSuffixComponents());
      assertEquals(0, interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Interest interest0 = new Interest((Name) null, 0.0);
      interest0.setMinSuffixComponents((-1610612735));
      assertEquals((-1610612735), interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0, 1.0);
      interest0.setMinSuffixComponents((-838));
      assertEquals((-838), interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Interest interest0 = new Interest((Name) null, (-3215.50440346577));
      interest0.setChildSelector(0);
      interest0.setMinSuffixComponents(0);
      assertEquals(0, interest0.getChildSelector());
      assertEquals(0, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Interest interest0 = new Interest("|.\"?au");
      interest0.setChildSelector(252);
      interest0.setMinSuffixComponents(70);
      assertEquals(252, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      interest0.setMinSuffixComponents(0);
      assertEquals(0, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Interest interest0 = new Interest("");
      interest0.setSelectedDelegationIndex(0);
      interest0.setMaxSuffixComponents(3);
      assertEquals(0, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setSelectedDelegationIndex(130);
      interest0.setMaxSuffixComponents(5);
      assertEquals(130, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setMustBeFresh(true);
      interest0.setMaxSuffixComponents(1);
      assertFalse(interest0.getCanBePrefix());
      assertTrue(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setMinSuffixComponents(0);
      interest0.setMaxSuffixComponents(1);
      assertEquals(0, interest0.getMinSuffixComponents());
      assertEquals(1, interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setMinSuffixComponents(57);
      interest0.setMaxSuffixComponents(1);
      assertEquals(57, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Name name0 = new Name("");
      Interest interest0 = new Interest(name0);
      interest0.setInterestLifetimeMilliseconds(0);
      interest0.setMaxSuffixComponents((-3822));
      assertEquals((-3822), interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0, 2783.213037282);
      interest0.setMaxSuffixComponents((-236));
      assertEquals((-236), interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      interest0.setMaxSuffixComponents((-1608));
      assertEquals((-1608), interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setChildSelector(0);
      interest0.setMaxSuffixComponents(1);
      assertEquals(0, interest0.getChildSelector());
      assertFalse(interest0.getCanBePrefix());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setChildSelector(64);
      interest1.setMaxSuffixComponents(1);
      assertEquals(64, interest0.getChildSelector());
      assertFalse(interest0.getCanBePrefix());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setSelectedDelegationIndex(0);
      LpPacket lpPacket0 = new LpPacket();
      interest0.setLpPacket(lpPacket0);
      assertEquals(0, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setSelectedDelegationIndex(3108);
      LpPacket lpPacket0 = new LpPacket();
      interest1.setLpPacket(lpPacket0);
      assertEquals(3108, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Interest interest0 = new Interest();
      assertFalse(interest0.getMustBeFresh());
      
      interest0.setMustBeFresh(true);
      LpPacket lpPacket0 = new LpPacket();
      interest0.setLpPacket(lpPacket0);
      assertTrue(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      interest0.setMinSuffixComponents(0);
      interest0.setLpPacket((LpPacket) null);
      assertEquals(0, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Interest interest0 = new Interest("K]r>");
      LpPacket lpPacket0 = new LpPacket();
      Interest interest1 = interest0.setMinSuffixComponents(698);
      interest1.setLpPacket(lpPacket0);
      assertEquals(698, interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Interest interest0 = new Interest("");
      assertEquals((-1), interest0.getMaxSuffixComponents());
      
      LpPacket lpPacket0 = new LpPacket();
      Interest interest1 = interest0.setMaxSuffixComponents(0);
      interest1.setLpPacket(lpPacket0);
      assertEquals(0, interest0.getMaxSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ArrayList<Name> arrayList0 = new ArrayList<Name>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0, 0.0);
      LpPacket lpPacket0 = new LpPacket();
      Interest interest1 = interest0.setLpPacket(lpPacket0);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0, 1.7976931348623157E308);
      LpPacket lpPacket0 = new LpPacket();
      Interest interest1 = interest0.setLpPacket(lpPacket0);
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0);
      assertEquals((-1), interest0.getChildSelector());
      
      interest0.setChildSelector(0);
      LpPacket lpPacket0 = new LpPacket();
      interest0.setLpPacket(lpPacket0);
      assertEquals(0, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setChildSelector(64);
      LpPacket lpPacket0 = new LpPacket();
      interest1.setLpPacket(lpPacket0);
      assertEquals(64, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0);
      LpPacket lpPacket0 = new LpPacket();
      Interest interest1 = interest0.setLpPacket(lpPacket0);
      assertEquals((-1), interest1.getChildSelector());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(interest1.getDidSetCanBePrefix_());
      assertFalse(interest1.getCanBePrefix());
      assertFalse(interest1.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Interest interest0 = new Interest("");
      interest0.setSelectedDelegationIndex(0);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      interest0.setLinkWireEncoding((Blob) null, wireFormat0);
      assertEquals(0, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setSelectedDelegationIndex(3108);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      byte[] byteArray0 = new byte[0];
      Blob blob0 = new Blob(byteArray0);
      interest0.setLinkWireEncoding(blob0, wireFormat0);
      assertEquals(3108, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.wireEncode();
      assertFalse(interest0.getMustBeFresh());
      
      Interest interest1 = interest0.setMustBeFresh(true);
      WireFormat wireFormat0 = new WireFormat();
      interest1.setLinkWireEncoding((Blob) signedBlob0, wireFormat0);
      assertTrue(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0, (-2081.6));
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      interest0.setMinSuffixComponents(511);
      Blob blob0 = Name.fromEscapedString("h");
      interest0.setLinkWireEncoding(blob0, wireFormat0);
      assertEquals(511, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      
      interest0.setMaxSuffixComponents(0);
      GenericSignature genericSignature0 = new GenericSignature();
      Blob blob0 = genericSignature0.getSignatureInfoEncoding();
      WireFormat wireFormat0 = new WireFormat();
      interest0.setLinkWireEncoding(blob0, wireFormat0);
      assertEquals(0, interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0, 0.0);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      Blob blob0 = wireFormat0.encodeSignatureInfo(hmacWithSha256Signature0);
      Interest interest1 = interest0.setLinkWireEncoding(blob0, wireFormat0);
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertEquals((-1), interest1.getChildSelector());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertFalse(interest1.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Name name0 = new Name("");
      WireFormat wireFormat0 = new WireFormat();
      Interest interest0 = new Interest(name0, 1);
      ControlParameters controlParameters0 = new ControlParameters();
      Blob blob0 = controlParameters0.wireEncode();
      Interest interest1 = interest0.setLinkWireEncoding(blob0, wireFormat0);
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertEquals((-1), interest1.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0);
      Blob blob0 = interest0.getNonce();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      Interest.setDefaultCanBePrefix(false);
      Interest interest1 = interest0.setLinkWireEncoding(blob0, wireFormat0);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getChildSelector());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interest1.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getChildSelector());
      
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      interest0.setChildSelector(0);
      byte[] byteArray0 = new byte[0];
      Blob blob0 = new Blob(byteArray0);
      interest0.setLinkWireEncoding(blob0, wireFormat0);
      assertEquals(0, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0, (-2081.6));
      interest0.setChildSelector(511);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      Blob blob0 = Name.fromEscapedString("h");
      interest0.setLinkWireEncoding(blob0, wireFormat0);
      assertEquals(511, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Name name0 = new Name("");
      Interest interest0 = new Interest(name0);
      interest0.setCanBePrefix(false);
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      Blob blob0 = sha256WithRsaSignature0.getSignature();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      interest0.setLinkWireEncoding(blob0, wireFormat0);
      assertTrue(interest0.getDidSetCanBePrefix_());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setSelectedDelegationIndex(0);
      Blob blob0 = interest1.getLinkWireEncoding();
      interest0.setLinkWireEncoding(blob0);
      assertEquals(0, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0, 0.0);
      interest0.setSelectedDelegationIndex(556);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      Blob blob0 = wireFormat0.encodeSignatureInfo(hmacWithSha256Signature0);
      interest0.setLinkWireEncoding(blob0);
      assertEquals(556, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Name name0 = new Name("");
      Interest interest0 = new Interest(name0);
      assertFalse(interest0.getMustBeFresh());
      
      interest0.setMustBeFresh(true);
      SignedBlob signedBlob0 = interest0.wireEncode();
      interest0.setLinkWireEncoding((Blob) signedBlob0);
      assertTrue(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Interest interest0 = new Interest();
      Blob blob0 = interest0.getLinkWireEncoding();
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      Interest interest1 = interest0.setMinSuffixComponents(0);
      interest1.setLinkWireEncoding(blob0);
      assertEquals(0, interest0.getMinSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setMinSuffixComponents(85);
      SignedBlob signedBlob0 = interest0.wireEncode();
      interest0.setLinkWireEncoding((Blob) signedBlob0);
      assertEquals(85, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      
      interest0.setMaxSuffixComponents(0);
      GenericSignature genericSignature0 = new GenericSignature();
      Blob blob0 = genericSignature0.getSignatureInfoEncoding();
      interest0.setLinkWireEncoding(blob0);
      assertEquals(0, interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0);
      Blob blob0 = interest0.getNonce();
      Interest interest1 = new Interest(name0, 4447.1);
      Interest interest2 = interest1.setLinkWireEncoding(blob0);
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest2.getChildSelector());
      assertEquals((-1), interest2.getMinSuffixComponents());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest2.getMustBeFresh());
      assertEquals((-1), interest2.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      Blob blob0 = interest0.getNonce();
      Interest interest1 = interest0.setLinkWireEncoding(blob0);
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertFalse(interest1.getCanBePrefix());
      assertTrue(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getChildSelector());
      
      interest0.setChildSelector(0);
      SignedBlob signedBlob0 = interest0.wireEncode();
      interest0.setLinkWireEncoding((Blob) signedBlob0);
      assertEquals(0, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getChildSelector());
      
      Interest interest1 = interest0.setChildSelector(1);
      SignedBlob signedBlob0 = interest0.getDefaultWireEncoding();
      interest1.setLinkWireEncoding((Blob) signedBlob0);
      assertEquals(1, interest0.getChildSelector());
      assertEquals((-1), interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Name name0 = new Name("");
      Interest interest0 = new Interest(name0);
      Interest interest1 = interest0.setCanBePrefix(false);
      SignedBlob signedBlob0 = interest1.wireEncode();
      interest0.setLinkWireEncoding((Blob) signedBlob0);
      assertTrue(interest0.getDidSetCanBePrefix_());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Interest interest0 = new Interest("");
      KeyLocator keyLocator0 = interest0.getKeyLocator();
      interest0.setSelectedDelegationIndex(0);
      interest0.setKeyLocator(keyLocator0);
      assertEquals(0, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0);
      Interest interest1 = interest0.setSelectedDelegationIndex(97);
      interest1.setKeyLocator((KeyLocator) null);
      assertEquals(97, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Interest interest0 = new Interest();
      KeyLocator keyLocator0 = interest0.getKeyLocator();
      assertFalse(interest0.getMustBeFresh());
      
      interest0.setMustBeFresh(true);
      interest0.setKeyLocator(keyLocator0);
      assertTrue(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      interest0.setMinSuffixComponents(0);
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      KeyLocator keyLocator0 = KeyLocator.getFromSignature(sha256WithRsaSignature0);
      interest0.setKeyLocator(keyLocator0);
      assertEquals(0, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setMinSuffixComponents(2667);
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      KeyLocator keyLocator0 = sha256WithRsaSignature0.getKeyLocator();
      interest1.setKeyLocator(keyLocator0);
      assertEquals(2667, interest0.getMinSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Interest interest0 = new Interest(".W");
      assertEquals((-1), interest0.getMaxSuffixComponents());
      
      interest0.setMaxSuffixComponents(0);
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator0 = sha256WithEcdsaSignature0.getKeyLocator();
      interest0.setKeyLocator(keyLocator0);
      assertEquals(0, interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0, 0);
      Interest interest1 = interest0.setKeyLocator((KeyLocator) null);
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertEquals((-1), interest1.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Name name0 = new Name("");
      Interest interest0 = new Interest(name0, 1430.68305265);
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      KeyLocator keyLocator0 = hmacWithSha256Signature0.getKeyLocator();
      Interest interest1 = interest0.setKeyLocator(keyLocator0);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertEquals((-1), interest1.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0);
      assertEquals((-1), interest0.getChildSelector());
      
      interest0.setChildSelector(0);
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      KeyLocator keyLocator0 = hmacWithSha256Signature0.getKeyLocator();
      interest0.setKeyLocator(keyLocator0);
      assertEquals(0, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Interest interest0 = new Interest("");
      KeyLocator keyLocator0 = interest0.getKeyLocator();
      interest0.setChildSelector(97);
      interest0.setKeyLocator(keyLocator0);
      assertEquals(97, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      KeyLocator keyLocator0 = hmacWithSha256Signature0.getKeyLocator();
      Interest interest1 = interest0.setKeyLocator(keyLocator0);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(interest1.getMustBeFresh());
      assertEquals(1, interest1.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setSelectedDelegationIndex(0);
      interest0.setInterestLifetimeMilliseconds(0);
      assertEquals(0, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setSelectedDelegationIndex(31);
      interest1.setInterestLifetimeMilliseconds(1);
      assertEquals(31, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      KeyLocator keyLocator0 = hmacWithSha256Signature0.getKeyLocator();
      Name name0 = keyLocator0.getKeyName();
      Interest interest0 = new Interest(name0, (-565.45605090114));
      interest0.setMustBeFresh(true);
      interest0.setInterestLifetimeMilliseconds(1);
      assertEquals(1.0, interest0.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setMinSuffixComponents(0);
      interest1.setInterestLifetimeMilliseconds(1);
      assertEquals(1.0, interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals(0, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setMinSuffixComponents(132);
      interest0.setInterestLifetimeMilliseconds(1.0);
      assertEquals(132, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setMaxSuffixComponents(0);
      interest0.setInterestLifetimeMilliseconds(1);
      assertEquals(1.0, interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals(0, interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setChildSelector(0);
      interest0.setInterestLifetimeMilliseconds(1.7976931348623157E308);
      assertEquals(1.7976931348623157E308, interest0.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Interest interest0 = new Interest(" B>y<]TQ37 )bl'A!%_");
      interest0.setChildSelector(40);
      interest0.setInterestLifetimeMilliseconds((-1.0));
      assertEquals(40, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      
      interest0.setInterestLifetimeMilliseconds(0.0);
      assertEquals((-1), interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Interest interest0 = new Interest();
      DelegationSet delegationSet0 = new DelegationSet();
      interest0.setSelectedDelegationIndex(0);
      interest0.setForwardingHint(delegationSet0);
      assertEquals(0, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Name name0 = new Name("");
      Interest interest0 = new Interest(name0);
      assertFalse(interest0.getMustBeFresh());
      
      interest0.setMustBeFresh(true);
      Link link0 = new Link();
      DelegationSet delegationSet0 = link0.getDelegations();
      interest0.setForwardingHint(delegationSet0);
      assertTrue(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      interest0.setMinSuffixComponents(0);
      interest0.setForwardingHint((DelegationSet) null);
      assertEquals(0, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Interest interest0 = new Interest("|.\"?au");
      Interest interest1 = interest0.setMinSuffixComponents(70);
      DelegationSet delegationSet0 = new DelegationSet();
      interest1.setForwardingHint(delegationSet0);
      assertEquals(70, interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Interest interest0 = new Interest();
      DelegationSet delegationSet0 = interest0.getForwardingHint();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      
      Interest interest1 = interest0.setMaxSuffixComponents(0);
      interest1.setForwardingHint(delegationSet0);
      assertEquals(0, interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      interest0.setInterestLifetimeMilliseconds(0.0);
      Link link0 = new Link(name0);
      DelegationSet delegationSet0 = link0.getDelegations();
      interest0.setForwardingHint(delegationSet0);
      assertEquals((-1), interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0, 1.0);
      Interest interest1 = interest0.setForwardingHint((DelegationSet) null);
      assertEquals((-1), interest1.getChildSelector());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0);
      assertEquals((-1), interest0.getChildSelector());
      
      Interest interest1 = interest0.setChildSelector(0);
      interest1.setForwardingHint((DelegationSet) null);
      assertEquals(0, interest0.getChildSelector());
      assertEquals((-1), interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Interest interest0 = new Interest("|.\"?au");
      interest0.setChildSelector(252);
      DelegationSet delegationSet0 = new DelegationSet();
      interest0.setForwardingHint(delegationSet0);
      assertEquals(252, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Link link0 = new Link(name0);
      DelegationSet delegationSet0 = link0.getDelegations();
      Interest interest1 = interest0.setForwardingHint(delegationSet0);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest1.getMustBeFresh());
      assertEquals(1, interest1.getMaxSuffixComponents());
      assertTrue(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setSelectedDelegationIndex(0);
      Exclude exclude0 = new Exclude();
      interest0.setExclude(exclude0);
      assertEquals(0, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0);
      interest0.setSelectedDelegationIndex(1);
      interest0.setExclude((Exclude) null);
      assertEquals(1, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Interest interest0 = new Interest("");
      assertFalse(interest0.getMustBeFresh());
      
      interest0.setMustBeFresh(true);
      Exclude exclude0 = new Exclude();
      interest0.setExclude(exclude0);
      assertTrue(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0);
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      interest0.setMinSuffixComponents(0);
      interest0.setExclude((Exclude) null);
      assertEquals(0, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Interest interest0 = new Interest("aOOtXP2");
      interest0.setMinSuffixComponents(12);
      Exclude exclude0 = new Exclude();
      interest0.setExclude(exclude0);
      assertEquals(12, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      
      Exclude exclude0 = new Exclude();
      interest0.setMaxSuffixComponents(0);
      interest0.setExclude(exclude0);
      assertEquals(0, interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Name name0 = new Name("");
      Interest interest0 = new Interest(name0, 0.0);
      Interest interest1 = interest0.setExclude((Exclude) null);
      assertEquals((-1), interest1.getChildSelector());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0, 3482.885825203683);
      Exclude exclude0 = new Exclude();
      Interest interest1 = interest0.setExclude(exclude0);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertEquals((-1), interest1.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      Exclude exclude0 = new Exclude();
      Interest interest1 = interest0.setExclude(exclude0);
      assertTrue(interest1.getDidSetCanBePrefix_());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(interest1.getCanBePrefix());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Interest interest0 = new Interest();
      Exclude exclude0 = interest0.getExclude();
      assertEquals((-1), interest0.getChildSelector());
      
      interest0.setChildSelector(0);
      interest0.setExclude(exclude0);
      assertEquals(0, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setSelectedDelegationIndex(0);
      interest0.setChildSelector((-1952));
      assertEquals(0, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setSelectedDelegationIndex(3108);
      interest1.setChildSelector(0);
      assertEquals(3108, interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setMustBeFresh(true);
      interest1.setChildSelector(2794);
      assertEquals(2794, interest1.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setMinSuffixComponents(0);
      interest0.setChildSelector(720);
      assertEquals(720, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setMinSuffixComponents(349);
      interest1.setChildSelector(103);
      assertEquals(349, interest0.getMinSuffixComponents());
      assertEquals(103, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setMaxSuffixComponents(0);
      interest0.setChildSelector((-792));
      assertEquals((-792), interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0, 0.0);
      interest0.setChildSelector(47);
      assertEquals(47, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Interest interest0 = new Interest("|.\"?au");
      interest0.setInterestLifetimeMilliseconds(3296.8602570516377);
      interest0.setChildSelector(252);
      assertEquals(3296.8602570516377, interest0.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      interest0.setChildSelector(30);
      assertEquals(30, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setSelectedDelegationIndex(0);
      interest1.setCanBePrefix(true);
      assertTrue(interest1.getDidSetCanBePrefix_());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setSelectedDelegationIndex(3520);
      interest1.setCanBePrefix(true);
      assertTrue(interest1.getDidSetCanBePrefix_());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Name name0 = new Name("");
      Interest interest0 = new Interest(name0);
      interest0.setMustBeFresh(true);
      interest0.setCanBePrefix(false);
      assertTrue(interest0.getDidSetCanBePrefix_());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Interest interest0 = new Interest("aOOtXP2");
      Interest interest1 = interest0.setMinSuffixComponents(0);
      interest1.setCanBePrefix(false);
      assertTrue(interest1.getDidSetCanBePrefix_());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setMinSuffixComponents(1);
      interest0.setCanBePrefix(true);
      assertTrue(interest0.getDidSetCanBePrefix_());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setInterestLifetimeMilliseconds(0.0);
      interest1.setCanBePrefix(true);
      assertTrue(interest1.getDidSetCanBePrefix_());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Interest interest0 = new Interest((Name) null, 1761.230044911639);
      interest0.setCanBePrefix(false);
      assertTrue(interest0.getDidSetCanBePrefix_());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      Interest interest1 = interest0.setCanBePrefix(false);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(interest0.getDidSetCanBePrefix_());
      assertFalse(interest0.getCanBePrefix());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Interest interest0 = new Interest((Name) null, (-3215.50440346577));
      interest0.setChildSelector(0);
      interest0.setCanBePrefix(true);
      assertTrue(interest0.getDidSetCanBePrefix_());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setChildSelector(2195);
      interest0.setCanBePrefix(false);
      assertTrue(interest0.getDidSetCanBePrefix_());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Interest interest0 = new Interest("uh4f6;1R");
      int[] intArray0 = new int[8];
      interest0.setSelectedDelegationIndex(0);
      Blob blob0 = new Blob(intArray0);
      interest0.setApplicationParameters(blob0);
      assertEquals(0, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setSelectedDelegationIndex(2991);
      SignedBlob signedBlob0 = interest0.wireEncode();
      interest0.setApplicationParameters(signedBlob0);
      assertEquals(2991, interest0.getSelectedDelegationIndex());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.wireEncode();
      assertFalse(interest0.getMustBeFresh());
      
      interest0.setMustBeFresh(true);
      interest0.setApplicationParameters(signedBlob0);
      assertTrue(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      Interest interest1 = interest0.setMinSuffixComponents(0);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      SignedBlob signedBlob0 = interest1.wireEncode(wireFormat0);
      interest0.setApplicationParameters(signedBlob0);
      assertEquals(0, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setMinSuffixComponents(2667);
      DigestSha256Signature digestSha256Signature0 = new DigestSha256Signature();
      Blob blob0 = digestSha256Signature0.getSignature();
      interest0.setApplicationParameters(blob0);
      assertEquals(2667, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.wireEncode();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      
      interest0.setMaxSuffixComponents(0);
      interest0.setApplicationParameters(signedBlob0);
      assertEquals(0, interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Interest interest0 = new Interest((Name) null, 1884.56631855165);
      Blob blob0 = Name.fromHex("v[", 1, 1);
      Interest interest1 = interest0.setApplicationParameters(blob0);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getChildSelector());
      
      interest0.setChildSelector(0);
      SignedBlob signedBlob0 = interest0.wireEncode();
      interest0.setApplicationParameters(signedBlob0);
      assertEquals(0, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      Interest interest1 = interest0.setChildSelector(64);
      DelegationSet delegationSet0 = new DelegationSet();
      Blob blob0 = delegationSet0.wireEncode();
      interest1.setApplicationParameters(blob0);
      assertEquals(64, interest0.getChildSelector());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      Blob blob0 = interest0.getNonce();
      Interest interest1 = interest0.setApplicationParameters(blob0);
      assertTrue(interest1.getDidSetCanBePrefix_());
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(interest1.getMustBeFresh());
      assertEquals(1, interest1.getMaxSuffixComponents());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.wireEncode();
      interest0.setApplicationParameters(signedBlob0);
      boolean boolean0 = interest0.hasParameters();
      assertEquals((-1), interest0.getChildSelector());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertTrue(boolean0);
      assertFalse(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      
      Interest interest1 = interest0.setSelectedDelegationIndex(0);
      int int0 = interest1.getSelectedDelegationIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setSelectedDelegationIndex(2519);
      int int0 = interest0.getSelectedDelegationIndex();
      assertEquals(2519, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Interest interest0 = new Interest();
      byte[] byteArray0 = new byte[0];
      Blob blob0 = new Blob(byteArray0);
      Interest interest1 = interest0.setApplicationParameters(blob0);
      Blob blob1 = interest1.getParameters();
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(blob1.isNull());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Interest interest0 = new Interest();
      Blob blob0 = new Blob("&ndn.MinSuffixComponents=");
      interest0.setNonce(blob0);
      Blob blob1 = interest0.getNonce();
      assertFalse(blob1.isNull());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.getName();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Interest interest0 = new Interest();
      assertFalse(interest0.getMustBeFresh());
      
      interest0.setMustBeFresh(true);
      boolean boolean0 = interest0.getMustBeFresh();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Interest interest0 = new Interest("x*gg^0}X&'qY$;2");
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      interest0.setMinSuffixComponents(0);
      int int0 = interest0.getMinSuffixComponents();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Interest interest0 = new Interest("|.\"?au");
      interest0.setMinSuffixComponents(70);
      int int0 = interest0.getMinSuffixComponents();
      assertEquals(70, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Interest interest0 = new Interest("net.named_data.jndn.Interest");
      assertEquals((-1), interest0.getMaxSuffixComponents());
      
      interest0.setMaxSuffixComponents(0);
      int int0 = interest0.getMaxSuffixComponents();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      int int0 = interest0.getMaxSuffixComponents();
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getMustBeFresh());
      assertEquals(1, int0);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(interest0.getDidSetCanBePrefix_());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Name.Component[] name_ComponentArray0 = new Name.Component[0];
      Name name0 = new Name(name_ComponentArray0);
      Interest interest0 = new Interest(name0, 1);
      double double0 = interest0.getInterestLifetimeMilliseconds();
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals(1.0, double0, 0.01);
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Interest interest0 = new Interest();
      double double0 = interest0.getInterestLifetimeMilliseconds();
      assertEquals((-1.0), double0, 0.01);
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Interest interest0 = new Interest("K]r>");
      Name name0 = new Name("K]r>");
      Link link0 = new Link(name0);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      Link link1 = link0.addDelegation(698, name0, wireFormat0);
      DelegationSet delegationSet0 = link1.getDelegations();
      interest0.setForwardingHint(delegationSet0);
      DelegationSet delegationSet1 = interest0.getForwardingHint();
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
      assertEquals(1, delegationSet1.size());
      assertEquals((-1), interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.wireEncode();
      interest0.wireDecode((Blob) signedBlob0);
      interest0.getForwardingHint();
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getMustBeFresh());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Interest interest0 = new Interest();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Link link0 = new Link(name0);
      Blob blob0 = link0.getContent();
      Exclude exclude0 = new Exclude();
      Name.Component name_Component0 = new Name.Component(blob0);
      exclude0.appendComponent(name_Component0);
      interest0.setExclude(exclude0);
      Exclude exclude1 = interest0.getExclude();
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals(1, exclude1.size());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.wireEncode();
      interest0.wireDecode((Blob) signedBlob0);
      interest0.getExclude();
      assertTrue(interest0.getDidSetCanBePrefix_());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      boolean boolean0 = interest0.getDidSetCanBePrefix_();
      assertTrue(boolean0);
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getCanBePrefix());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Name name0 = new Name("");
      Interest interest0 = new Interest(name0);
      interest0.getDidSetCanBePrefix_();
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.getDefaultWireEncodingFormat();
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.wireEncode();
      WireFormat wireFormat0 = interest0.getDefaultWireEncodingFormat();
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getChildSelector());
      assertNotNull(wireFormat0);
      assertTrue(interest0.getCanBePrefix());
      assertFalse(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Interest interest0 = new Interest();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      interest0.wireEncode(wireFormat0);
      SignedBlob signedBlob0 = interest0.getDefaultWireEncoding();
      assertFalse(interest0.getMustBeFresh());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(signedBlob0.isNull());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      boolean boolean0 = Interest.getDefaultCanBePrefix();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getChildSelector());
      
      interest0.setChildSelector(0);
      int int0 = interest0.getChildSelector();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setChildSelector(3012);
      int int0 = interest1.getChildSelector();
      assertEquals(3012, int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Interest interest0 = new Interest("aOOtXP2");
      boolean boolean0 = interest0.getCanBePrefix();
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(boolean0);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0);
      interest0.getApplicationParameters();
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setSelectedDelegationIndex(0);
      interest1.appendParametersDigestToName();
      assertEquals(0, interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setSelectedDelegationIndex(620);
      interest1.appendParametersDigestToName();
      assertEquals(620, interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Interest interest0 = new Interest();
      assertFalse(interest0.getMustBeFresh());
      
      interest0.setMustBeFresh(true);
      interest0.appendParametersDigestToName();
      assertTrue(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0);
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      Interest interest1 = interest0.setMinSuffixComponents(0);
      interest1.appendParametersDigestToName();
      assertEquals(0, interest0.getMinSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      interest0.setMinSuffixComponents(1);
      interest0.appendParametersDigestToName();
      assertEquals(1, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      
      interest0.setMaxSuffixComponents(0);
      interest0.appendParametersDigestToName();
      assertEquals(0, interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Interest interest0 = new Interest((Name) null, 1884.56631855165);
      Interest interest1 = interest0.appendParametersDigestToName();
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getChildSelector());
      
      interest0.setChildSelector(0);
      interest0.appendParametersDigestToName();
      assertEquals(0, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setChildSelector(3012);
      interest1.appendParametersDigestToName();
      assertEquals(3012, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      Interest interest1 = interest0.appendParametersDigestToName();
      assertEquals((-1), interest1.getChildSelector());
      assertTrue(interest1.getDidSetCanBePrefix_());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertFalse(interest1.getCanBePrefix());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Interest interest0 = new Interest();
      WireFormat wireFormat0 = new WireFormat();
      WireFormat.setDefaultWireFormat(wireFormat0);
      // Undeclared exception!
      try { 
        interest0.wireEncode();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // encodeInterest is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Name.Component[] name_ComponentArray0 = new Name.Component[18];
      Name name0 = new Name(name_ComponentArray0);
      Interest interest0 = new Interest(name0);
      // Undeclared exception!
      try { 
        interest0.wireEncode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.Tlv0_3WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      KeyLocator keyLocator0 = new KeyLocator();
      Name name0 = keyLocator0.getKeyName();
      Interest interest0 = new Interest(name0);
      interest0.setSelectedDelegationIndex(43);
      Link link0 = new Link();
      link0.addDelegation(0, name0);
      DelegationSet delegationSet0 = link0.getDelegations();
      interest0.setForwardingHint(delegationSet0);
      // Undeclared exception!
      try { 
        interest0.wireEncode();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // An Interest may not have a selected delegation when encoding a forwarding hint
         //
         verifyException("net.named_data.jndn.encoding.Tlv0_3WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      arrayList0.add((Object) name0);
      Name name1 = new Name(arrayList0);
      Interest interest0 = new Interest(name1);
      // Undeclared exception!
      try { 
        interest0.wireEncode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.Name cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.Name and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7104ba0a)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Interest interest0 = new Interest();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      Name name0 = new Name();
      Blob blob0 = wireFormat0.encodeName(name0);
      try { 
        interest0.wireDecode(blob0, wireFormat0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Did not get the expected TLV type
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.getDefaultWireEncoding();
      WireFormat wireFormat0 = new WireFormat();
      // Undeclared exception!
      try { 
        interest0.wireDecode((Blob) signedBlob0, wireFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // decodeInterest is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Interest interest0 = new Interest("");
      LpPacket lpPacket0 = new LpPacket();
      Blob blob0 = lpPacket0.getFragmentWireEncoding();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      // Undeclared exception!
      try { 
        interest0.wireDecode(blob0, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Interest interest0 = new Interest();
      Blob blob0 = new Blob("nlM |");
      try { 
        interest0.wireDecode(blob0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Did not get the expected TLV type
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.wireEncode();
      WireFormat wireFormat0 = new WireFormat();
      WireFormat.setDefaultWireFormat(wireFormat0);
      // Undeclared exception!
      try { 
        interest0.wireDecode((Blob) signedBlob0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // decodeInterest is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Interest interest0 = new Interest();
      // Undeclared exception!
      try { 
        interest0.wireDecode((Blob) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Interest", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Interest interest0 = new Interest();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      try { 
        interest0.wireDecode(byteBuffer0, wireFormat0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Read past the end of the input
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Interest interest0 = new Interest();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      WireFormat wireFormat0 = new WireFormat();
      // Undeclared exception!
      try { 
        interest0.wireDecode(byteBuffer0, wireFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // decodeInterest is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Interest interest0 = new Interest();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        interest0.wireDecode(byteBuffer0, (WireFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Interest", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Interest interest0 = new Interest();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      try { 
        interest0.wireDecode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Read past the end of the input
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Interest interest0 = new Interest();
      WireFormat wireFormat0 = new WireFormat();
      WireFormat.setDefaultWireFormat(wireFormat0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      // Undeclared exception!
      try { 
        interest0.wireDecode(byteBuffer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // decodeInterest is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Name.Component[] name_ComponentArray0 = new Name.Component[10];
      Name name0 = new Name(name_ComponentArray0);
      Interest interest0 = new Interest(name0);
      // Undeclared exception!
      try { 
        interest0.toUri();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0);
      // Undeclared exception!
      try { 
        interest0.toUri();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.Name$Component (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7104ba0a)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Interest interest0 = new Interest();
      // Undeclared exception!
      try { 
        interest0.matchesName((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Interest interest0 = new Interest();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) interest0);
      Name name0 = new Name(arrayList0);
      Interest interest1 = new Interest(name0);
      // Undeclared exception!
      try { 
        interest1.matchesName(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.Interest cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.Interest and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7104ba0a)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Interest interest0 = new Interest();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      // Undeclared exception!
      try { 
        interest0.matchesData((Data) null, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Interest", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0);
      Data data0 = new Data();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      // Undeclared exception!
      try { 
        interest0.matchesData(data0, wireFormat0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.Name$Component (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7104ba0a)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Interest interest0 = new Interest();
      Exclude exclude0 = new Exclude();
      exclude0.appendAny();
      interest0.setExclude(exclude0);
      WireFormat wireFormat0 = new WireFormat();
      WireFormat.setDefaultWireFormat(wireFormat0);
      Link link0 = new Link();
      // Undeclared exception!
      try { 
        interest0.matchesData((Data) link0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // encodeData is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Interest interest0 = new Interest();
      // Undeclared exception!
      try { 
        interest0.matchesData((Data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Interest", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setLinkWireEncoding((Blob) null);
      // Undeclared exception!
      try { 
        interest0.hasLink();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Interest", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.wireEncode();
      interest0.setLinkWireEncoding((Blob) signedBlob0);
      WireFormat wireFormat0 = new WireFormat();
      try { 
        interest0.getLinkWireEncoding(wireFormat0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Did not get the expected TLV type
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setLinkWireEncoding((Blob) null);
      WireFormat wireFormat0 = new WireFormat();
      // Undeclared exception!
      try { 
        interest1.getLinkWireEncoding(wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Interest", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.wireEncode();
      Interest interest1 = interest0.setLinkWireEncoding((Blob) signedBlob0);
      WireFormat wireFormat0 = new WireFormat();
      WireFormat.setDefaultWireFormat(wireFormat0);
      try { 
        interest1.getLinkWireEncoding();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Did not get the expected TLV type
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Interest interest0 = new Interest();
      Blob blob0 = Name.fromEscapedString(" ;{@ry");
      WireFormat wireFormat0 = new WireFormat();
      interest0.setLinkWireEncoding(blob0, wireFormat0);
      // Undeclared exception!
      try { 
        interest0.getLinkWireEncoding();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // decodeData is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setLinkWireEncoding((Blob) null);
      // Undeclared exception!
      try { 
        interest0.getLinkWireEncoding();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Interest", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.wireEncode();
      interest0.setLinkWireEncoding((Blob) signedBlob0);
      try { 
        interest0.getLink();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Did not get the expected TLV type
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.wireEncode();
      WireFormat wireFormat0 = new WireFormat();
      interest0.setLinkWireEncoding((Blob) signedBlob0, wireFormat0);
      // Undeclared exception!
      try { 
        interest0.getLink();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // decodeData is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setLinkWireEncoding((Blob) null);
      // Undeclared exception!
      try { 
        interest0.getLink();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Interest", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Interest interest0 = null;
      try {
        interest0 = new Interest((Interest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Interest", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Interest interest0 = null;
      try {
        interest0 = new Interest("n4:");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Interest interest0 = null;
      try {
        interest0 = new Interest((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Interest interest0 = null;
      try {
        interest0 = new Interest("Y=QXHv*B-X[csR");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Can't parse decimal Name Component type: Y in URI Y=QXHv*B-X[csR
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Interest interest0 = new Interest();
      long long0 = interest0.getChangeCount();
      assertEquals(0L, long0);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.getDefaultWireEncoding();
      // Undeclared exception!
      try { 
        interest0.wireDecode((Blob) signedBlob0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setMinSuffixComponents(818);
      SignedBlob signedBlob0 = interest0.getDefaultWireEncoding();
      interest0.setParameters(signedBlob0);
      assertEquals(818, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Interest interest0 = new Interest();
      Name.Component[] name_ComponentArray0 = new Name.Component[1];
      Name.Component name_Component0 = new Name.Component("");
      name_ComponentArray0[0] = name_Component0;
      Name name0 = new Name(name_ComponentArray0);
      Link link0 = new Link(name0);
      Exclude exclude0 = new Exclude();
      exclude0.appendComponent(name_Component0);
      Interest interest1 = interest0.setExclude(exclude0);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      boolean boolean0 = interest1.matchesData((Data) link0, wireFormat0);
      assertFalse(boolean0);
      assertEquals((-1), interest1.getChildSelector());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest1.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Interest interest0 = new Interest();
      Link link0 = new Link();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      MetaInfo metaInfo0 = link0.getMetaInfo();
      Name.Component name_Component0 = metaInfo0.getFinalBlockId();
      Exclude exclude0 = new Exclude();
      Exclude exclude1 = exclude0.appendComponent(name_Component0);
      Interest interest1 = interest0.setExclude(exclude1);
      boolean boolean0 = interest1.matchesData((Data) link0, wireFormat0);
      assertFalse(interest1.getMustBeFresh());
      assertTrue(boolean0);
      assertEquals((-1), interest1.getChildSelector());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Interest interest0 = new Interest();
      Exclude exclude0 = new Exclude();
      exclude0.appendAny();
      interest0.setExclude(exclude0);
      Link link0 = new Link();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      boolean boolean0 = interest0.matchesData((Data) link0, wireFormat0);
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Interest interest0 = new Interest();
      Exclude exclude0 = new Exclude();
      Name name0 = new Name("6<W*");
      Link link0 = new Link(name0);
      MetaInfo metaInfo0 = link0.getMetaInfo();
      Name.Component name_Component0 = metaInfo0.getFinalBlockId();
      Exclude exclude1 = exclude0.appendComponent(name_Component0);
      Interest interest1 = interest0.setExclude(exclude1);
      WireFormat wireFormat0 = new WireFormat();
      boolean boolean0 = interest1.matchesData((Data) link0, wireFormat0);
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertTrue(boolean0);
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Interest interest0 = new Interest();
      Name.Component name_Component0 = new Name.Component();
      Exclude exclude0 = new Exclude();
      Exclude exclude1 = exclude0.appendComponent(name_Component0);
      Interest interest1 = interest0.setExclude(exclude1);
      Data data0 = new Data();
      WireFormat wireFormat0 = new WireFormat();
      // Undeclared exception!
      try { 
        interest1.matchesData(data0, wireFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // encodeData is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Link link0 = new Link();
      Name.Component[] name_ComponentArray0 = new Name.Component[1];
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      Name.Component name_Component0 = Name.Component.fromNumber(31L, componentType0, 1);
      name_ComponentArray0[0] = name_Component0;
      Name name0 = new Name(name_ComponentArray0);
      Interest interest0 = new Interest(name0, 1);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      boolean boolean0 = interest0.matchesData((Data) link0, wireFormat0);
      assertFalse(boolean0);
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Interest interest0 = new Interest("IdPEbatX9");
      Link link0 = new Link();
      WireFormat wireFormat0 = new WireFormat();
      boolean boolean0 = interest0.matchesData((Data) link0, wireFormat0);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Interest interest0 = new Interest("net.named_data.jndn.Interest");
      assertEquals((-1), interest0.getMaxSuffixComponents());
      
      Interest interest1 = interest0.setMaxSuffixComponents(0);
      Name name0 = interest1.getName();
      Data data0 = new Data(name0);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      boolean boolean0 = interest1.matchesData(data0, wireFormat0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setMaxSuffixComponents(878);
      Name name0 = new Name();
      Link link0 = new Link(name0);
      WireFormat wireFormat0 = new WireFormat();
      boolean boolean0 = interest0.matchesData((Data) link0, wireFormat0);
      assertEquals(878, interest0.getMaxSuffixComponents());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Data data0 = new Data();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      Name.Component[] name_ComponentArray0 = new Name.Component[7];
      Name name0 = new Name(name_ComponentArray0);
      Interest interest0 = new Interest(name0);
      boolean boolean0 = interest0.matchesData(data0, wireFormat0);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(boolean0);
      assertEquals((-1), interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      Name name0 = new Name();
      Link link0 = new Link(name0);
      interest0.setMinSuffixComponents(1);
      WireFormat wireFormat0 = new WireFormat();
      boolean boolean0 = interest0.matchesData((Data) link0, wireFormat0);
      assertEquals(1, interest0.getMinSuffixComponents());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Interest interest0 = new Interest();
      byte[] byteArray0 = new byte[2];
      Blob blob0 = new Blob(byteArray0, true);
      interest0.setLinkWireEncoding(blob0);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      interest0.getLinkWireEncoding(wireFormat0);
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Interest interest0 = new Interest();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      interest0.getLinkWireEncoding(wireFormat0);
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.getLink();
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.wireEncode();
      Interest interest1 = interest0.setApplicationParameters(signedBlob0);
      boolean boolean0 = interest1.hasApplicationParameters();
      assertTrue(boolean0);
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertTrue(interest1.getCanBePrefix());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.hasApplicationParameters();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.wireEncode();
      interest0.setApplicationParameters(signedBlob0);
      interest0.getNonce();
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.wireEncode();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      SignedBlob signedBlob1 = interest0.wireEncode(wireFormat0);
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest0.getMustBeFresh());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertSame(signedBlob1, signedBlob0);
      assertEquals((-1), interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Interest interest0 = new Interest();
      // Undeclared exception!
      try { 
        interest0.wireEncode((WireFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Interest", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Interest interest0 = new Interest();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      Blob blob0 = wireFormat0.encodeInterest(interest0);
      interest0.setApplicationParameters(blob0);
      Blob blob1 = interest0.getApplicationParameters();
      assertFalse(interest0.getMustBeFresh());
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(blob1.isNull());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Interest interest0 = new Interest();
      Exclude exclude0 = interest0.getExclude();
      Interest interest1 = interest0.setChildSelector(45);
      interest1.setExclude(exclude0);
      assertEquals(45, interest0.getChildSelector());
      assertTrue(interest0.getCanBePrefix());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Interest interest0 = new Interest();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      // Undeclared exception!
      try { 
        interest0.wireDecode((ByteBuffer) null, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Interest interest0 = new Interest();
      boolean boolean0 = interest0.getMustBeFresh();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(boolean0);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Interest interest0 = new Interest();
      int int0 = interest0.getMaxSuffixComponents();
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0, 0.0);
      double double0 = interest0.getInterestLifetimeMilliseconds();
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Interest interest0 = new Interest();
      WireFormat wireFormat0 = new WireFormat();
      // Undeclared exception!
      try { 
        interest0.wireDecode((Blob) null, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Interest", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest();
      assertTrue(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals(1, interest0.getMaxSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Interest.setDefaultCanBePrefix(false);
      Interest interest0 = new Interest("lW3v&nD]m0L<");
      boolean boolean0 = interest0.getCanBePrefix();
      assertTrue(interest0.getDidSetCanBePrefix_());
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(boolean0);
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest.setDefaultCanBePrefix(false);
      Interest interest1 = new Interest(interest0);
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.wireEncode();
      interest0.setApplicationParameters(signedBlob0);
      Interest interest1 = interest0.appendParametersDigestToName();
      long long0 = interest1.getChangeCount();
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(interest1.getCanBePrefix());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(interest1.getMustBeFresh());
      assertEquals(2L, long0);
      assertEquals((-1), interest1.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Interest interest0 = new Interest();
      Exclude exclude0 = new Exclude();
      Name name0 = new Name("F");
      Link link0 = new Link(name0);
      MetaInfo metaInfo0 = link0.getMetaInfo();
      Name.Component name_Component0 = metaInfo0.getFinalBlockId();
      Exclude exclude1 = exclude0.appendComponent(name_Component0);
      Interest interest1 = interest0.setExclude(exclude1);
      boolean boolean0 = interest1.matchesData((Data) link0);
      assertEquals((-1), interest1.getChildSelector());
      assertTrue(boolean0);
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertFalse(interest1.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Interest interest0 = new Interest();
      Exclude exclude0 = new Exclude();
      Exclude exclude1 = exclude0.appendAny();
      Interest interest1 = interest0.setExclude(exclude1);
      Name name0 = new Name("decodeDelegationSet is not implemented");
      Link link0 = new Link(name0);
      boolean boolean0 = interest1.matchesData((Data) link0);
      assertEquals((-1), interest1.getChildSelector());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(boolean0);
      assertFalse(interest1.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Interest interest0 = new Interest("rq-rXQ;Vd]l");
      Name name0 = new Name("encodeData is not implemented");
      Data data0 = new Data(name0);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      boolean boolean0 = interest0.matchesData(data0, wireFormat0);
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      interest0.setMinSuffixComponents(0);
      Link link0 = new Link();
      boolean boolean0 = interest0.matchesData((Data) link0);
      assertEquals(0, interest0.getMinSuffixComponents());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Interest interest0 = new Interest();
      Name.Component name_Component0 = new Name.Component();
      Exclude exclude0 = new Exclude();
      Exclude exclude1 = exclude0.appendComponent(name_Component0);
      Interest interest1 = interest0.setExclude(exclude1);
      Name name0 = new Name();
      name0.appendSegment(0);
      boolean boolean0 = interest1.matchesName(name0);
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getChildSelector());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertTrue(boolean0);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Interest interest0 = new Interest();
      Exclude exclude0 = new Exclude();
      exclude0.appendAny();
      Interest interest1 = interest0.setExclude(exclude0);
      Name name0 = new Name();
      boolean boolean0 = interest1.matchesName(name0);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(boolean0);
      assertEquals((-1), interest1.getChildSelector());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interest1.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Interest interest0 = new Interest();
      Exclude exclude0 = new Exclude();
      Exclude exclude1 = exclude0.appendAny();
      interest0.setExclude(exclude1);
      Name name0 = new Name(",");
      boolean boolean0 = interest0.matchesName(name0);
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      
      interest0.setMaxSuffixComponents(0);
      KeyLocator keyLocator0 = new KeyLocator();
      Name name0 = keyLocator0.getKeyName();
      boolean boolean0 = interest0.matchesName(name0);
      assertEquals(0, interest0.getMaxSuffixComponents());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setMinSuffixComponents(818);
      Name name0 = new Name();
      boolean boolean0 = interest1.matchesName(name0);
      assertEquals(818, interest0.getMinSuffixComponents());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Interest interest0 = new Interest("uEh4f6;1R1");
      Name name0 = new Name();
      boolean boolean0 = interest0.matchesName(name0);
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator0 = sha256WithEcdsaSignature0.getKeyLocator();
      Name name0 = keyLocator0.getKeyName();
      Interest interest0 = new Interest(name0);
      interest0.refreshNonce();
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.wireEncode();
      Interest interest1 = interest0.setNonce(signedBlob0);
      interest1.refreshNonce();
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertEquals((-1), interest1.getChildSelector());
      assertTrue(interest1.getCanBePrefix());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0, 0.0);
      Interest interest1 = interest0.appendParametersDigestToName();
      assertEquals((-1), interest1.getChildSelector());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setApplicationParameters((Blob) null);
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1), interest1.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Interest interest0 = new Interest();
      long long0 = interest0.getIncomingFaceId();
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1L), long0);
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Interest interest0 = new Interest();
      LpPacket lpPacket0 = new LpPacket();
      interest0.setLpPacket(lpPacket0);
      long long0 = interest0.getIncomingFaceId();
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1L), long0);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.wireEncode();
      interest0.setLinkWireEncoding((Blob) signedBlob0);
      interest0.getLinkWireEncoding();
      assertTrue(interest0.getCanBePrefix());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Interest interest0 = new Interest();
      Link link0 = new Link();
      SignedBlob signedBlob0 = link0.wireEncode();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      Interest interest1 = interest0.setLinkWireEncoding((Blob) signedBlob0, wireFormat0);
      interest0.getLink();
      Link link1 = interest1.getLink();
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1), interest1.getChildSelector());
      assertNotNull(link1);
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.wireEncode();
      Interest interest1 = interest0.setLinkWireEncoding((Blob) signedBlob0);
      boolean boolean0 = interest1.hasLink();
      assertEquals((-1), interest1.getChildSelector());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertTrue(boolean0);
      assertEquals((-1.0), interest1.getInterestLifetimeMilliseconds(), 0.01);
      assertTrue(interest1.getCanBePrefix());
      assertEquals((-1), interest1.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Interest interest0 = new Interest();
      boolean boolean0 = interest0.hasLink();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertFalse(boolean0);
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Interest interest0 = new Interest();
      Exclude exclude0 = new Exclude();
      exclude0.appendAny();
      interest0.setExclude(exclude0);
      String string0 = interest0.toUri();
      assertEquals((-1), interest0.getChildSelector());
      assertEquals("/?ndn.MustBeFresh=0&ndn.Exclude=*", string0);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      
      Interest interest1 = interest0.setInterestLifetimeMilliseconds(1);
      String string0 = interest1.toUri();
      assertEquals(1.0, interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals("/?ndn.MustBeFresh=0&ndn.InterestLifetime=1", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Interest interest0 = new Interest();
      assertFalse(interest0.getMustBeFresh());
      
      interest0.setMustBeFresh(true);
      interest0.toUri();
      assertTrue(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.setChildSelector(112);
      interest0.toUri();
      assertEquals(112, interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Interest interest0 = new Interest();
      Interest interest1 = interest0.setMinSuffixComponents(15);
      String string0 = interest1.toUri();
      assertEquals(15, interest0.getMinSuffixComponents());
      assertEquals("/?ndn.MinSuffixComponents=15&ndn.MustBeFresh=0", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.wireEncode();
      WireFormat wireFormat0 = new WireFormat();
      // Undeclared exception!
      try { 
        interest0.wireEncode(wireFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // encodeInterest is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Interest interest0 = new Interest((Name) null);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      SignedBlob signedBlob0 = interest0.wireEncode(wireFormat0);
      assertEquals((-1), interest0.getMinSuffixComponents());
      
      interest0.setMinSuffixComponents(0);
      interest0.setLinkWireEncoding((Blob) signedBlob0, wireFormat0);
      assertEquals(0, interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = Interest.getDefaultCanBePrefix();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Interest interest0 = new Interest();
      interest0.getParameters();
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1), interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Interest interest0 = new Interest();
      boolean boolean0 = interest0.hasParameters();
      assertEquals((-1), interest0.getChildSelector());
      assertFalse(boolean0);
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getMinSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Interest interest0 = new Interest();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      
      Interest interest1 = interest0.setMaxSuffixComponents(0);
      String string0 = interest1.toUri();
      assertEquals(0, interest0.getMaxSuffixComponents());
      assertEquals("/?ndn.MaxSuffixComponents=0&ndn.MustBeFresh=0", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Interest interest0 = new Interest();
      int int0 = interest0.getSelectedDelegationIndex();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest(name0, 0.0);
      Blob blob0 = interest0.getLinkWireEncoding();
      Interest interest1 = interest0.setApplicationParameters(blob0);
      assertEquals((-1), interest1.getMaxSuffixComponents());
      assertFalse(interest1.getMustBeFresh());
      assertEquals((-1), interest1.getMinSuffixComponents());
      assertEquals((-1), interest1.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Interest interest0 = new Interest();
      int int0 = interest0.getChildSelector();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), int0);
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertFalse(interest0.getMustBeFresh());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Interest interest0 = new Interest();
      // Undeclared exception!
      try { 
        interest0.wireDecode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Interest interest0 = new Interest("x*gg^0}X&'qY$;2");
      int int0 = interest0.getMinSuffixComponents();
      assertFalse(interest0.getMustBeFresh());
      assertEquals((-1), interest0.getChildSelector());
      assertEquals((-1.0), interest0.getInterestLifetimeMilliseconds(), 0.01);
      assertEquals((-1), int0);
      assertEquals((-1), interest0.getMaxSuffixComponents());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.wireEncode();
      interest0.wireDecode((Blob) signedBlob0);
      String string0 = interest0.toUri();
      assertEquals((-1), interest0.getMaxSuffixComponents());
      assertEquals((-1), interest0.getMinSuffixComponents());
      assertEquals("/?ndn.MustBeFresh=0&ndn.Nonce=%00%00%00%00", string0);
      assertEquals((-1), interest0.getSelectedDelegationIndex());
      assertEquals((-1), interest0.getChildSelector());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator0 = sha256WithEcdsaSignature0.getKeyLocator();
      Name name0 = keyLocator0.getKeyName();
      Interest interest0 = new Interest(name0);
      SignedBlob signedBlob0 = interest0.wireEncode();
      WireFormat wireFormat0 = new WireFormat();
      interest0.setLinkWireEncoding((Blob) signedBlob0, wireFormat0);
      WireFormat wireFormat1 = WireFormat.getDefaultWireFormat();
      // Undeclared exception!
      try { 
        interest0.getLinkWireEncoding(wireFormat1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // decodeData is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }
}
