/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:01:48 GMT 2022
 */

package net.named_data.jndn.encrypt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import net.named_data.jndn.encrypt.RepetitiveInterval;
import net.named_data.jndn.encrypt.Schedule;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Schedule_ESTest extends Schedule_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval((-2030.092), 4, 0, 4);
      schedule0.addBlackInterval(repetitiveInterval0);
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval();
      schedule0.addBlackInterval(repetitiveInterval1);
      Blob blob0 = schedule0.wireEncode();
      assertFalse(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = Schedule.fromIsoString("19700101T000001");
      assertEquals((-9.223372036854776E18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      schedule0.addWhiteInterval((RepetitiveInterval) null);
      // Undeclared exception!
      try { 
        schedule0.wireEncode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.Schedule", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.MONTH;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(6, 0, 0, 6, (-1420), repetitiveInterval_RepeatUnit0);
      schedule0.addWhiteInterval(repetitiveInterval0);
      // Undeclared exception!
      try { 
        schedule0.wireEncode();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // TLV integer value may not be negative
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      Blob blob0 = new Blob("YEAR");
      try { 
        schedule0.wireDecode(blob0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Did not get the expected TLV type
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      Blob blob0 = new Blob();
      // Undeclared exception!
      try { 
        schedule0.wireDecode(blob0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1126);
      try { 
        schedule0.wireDecode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Did not get the expected TLV type
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      // Undeclared exception!
      try { 
        schedule0.wireDecode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      schedule0.addWhiteInterval((RepetitiveInterval) null);
      // Undeclared exception!
      try { 
        schedule0.getCoveringInterval(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.Schedule", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval((-2030.092), 4, 0, 4);
      Schedule schedule1 = schedule0.addBlackInterval(repetitiveInterval0);
      // Undeclared exception!
      try { 
        schedule1.getCoveringInterval((-2030.092));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Interval start time must be less than the end time
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.YEAR;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(0, 0, 0, 8, 0, repetitiveInterval_RepeatUnit0);
      schedule0.addWhiteInterval(repetitiveInterval0);
      // Undeclared exception!
      try { 
        schedule0.getCoveringInterval(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.named_data.jndn.encrypt.RepetitiveInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Schedule.fromIsoString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Schedule schedule0 = null;
      try {
        schedule0 = new Schedule((Schedule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.Schedule", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      Schedule schedule1 = schedule0.addBlackInterval(repetitiveInterval0);
      Blob blob0 = schedule1.wireEncode();
      ByteBuffer byteBuffer0 = blob0.buf();
      schedule0.wireDecode(byteBuffer0);
      assertFalse(byteBuffer0.hasArray());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      schedule0.addWhiteInterval(repetitiveInterval0);
      Blob blob0 = schedule0.wireEncode();
      byte[] byteArray0 = blob0.getImmutableArray();
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      schedule0.wireDecode(byteBuffer0);
      assertEquals(0, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(1479.72, (-1.0), 0, 13);
      RepetitiveInterval.Result repetitiveInterval_Result0 = repetitiveInterval0.getInterval(13);
      Schedule.Result schedule_Result0 = new Schedule.Result(true, repetitiveInterval_Result0.interval);
      assertTrue(schedule_Result0.isPositive);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = Schedule.toIsoString(541.3136114427372);
      assertEquals("19700101T000000", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      try { 
        Schedule.fromIsoString("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot parse date string 
         //
         verifyException("net.named_data.jndn.encrypt.Schedule", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      Schedule schedule1 = schedule0.addWhiteInterval(repetitiveInterval0);
      Blob blob0 = schedule1.wireEncode();
      schedule0.wireDecode(blob0);
      schedule0.addWhiteInterval(repetitiveInterval0);
      Schedule.Result schedule_Result0 = schedule1.getCoveringInterval((-281.137295));
      assertFalse(schedule_Result0.isPositive);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.YEAR;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(0, 0, 0, 6, 0, repetitiveInterval_RepeatUnit0);
      Schedule schedule1 = schedule0.addWhiteInterval(repetitiveInterval0);
      Blob blob0 = schedule0.wireEncode();
      schedule1.wireDecode(blob0);
      assertSame(schedule1, schedule0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.MONTH;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(0, 0, 0, 6, 0, repetitiveInterval_RepeatUnit0);
      schedule0.addWhiteInterval(repetitiveInterval0);
      Blob blob0 = schedule0.wireEncode();
      schedule0.wireDecode(blob0);
      assertFalse(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.DAY;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(0, 0, 0, 6, 0, repetitiveInterval_RepeatUnit0);
      Schedule schedule1 = schedule0.addWhiteInterval(repetitiveInterval0);
      Blob blob0 = schedule0.wireEncode();
      schedule0.wireDecode(blob0);
      assertSame(schedule0, schedule1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      Schedule schedule1 = schedule0.addWhiteInterval(repetitiveInterval0);
      Blob blob0 = schedule0.wireEncode();
      schedule0.wireDecode(blob0);
      schedule1.addWhiteInterval(repetitiveInterval0);
      Blob blob1 = schedule0.wireEncode();
      assertFalse(blob1.equals((Object)blob0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.YEAR;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      schedule0.addBlackInterval(repetitiveInterval0);
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval(12, 0, 0, 12, 12, repetitiveInterval_RepeatUnit0);
      Schedule schedule1 = schedule0.addWhiteInterval(repetitiveInterval1);
      Schedule.Result schedule_Result0 = schedule1.getCoveringInterval(0);
      assertTrue(schedule_Result0.isPositive);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.YEAR;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(12, 0, 0, 12, 12, repetitiveInterval_RepeatUnit0);
      Schedule schedule1 = schedule0.addWhiteInterval(repetitiveInterval0);
      Schedule.Result schedule_Result0 = schedule1.getCoveringInterval(0);
      assertTrue(schedule_Result0.isPositive);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(0, 0, 0, 1);
      schedule0.addBlackInterval(repetitiveInterval0);
      Schedule.Result schedule_Result0 = schedule0.getCoveringInterval(0);
      assertFalse(schedule_Result0.isPositive);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      Schedule.Result schedule_Result0 = schedule0.getCoveringInterval(6356.11019);
      assertFalse(schedule_Result0.isPositive);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Schedule schedule0 = new Schedule();
      Schedule schedule1 = new Schedule(schedule0);
      assertFalse(schedule1.equals((Object)schedule0));
  }
}
