/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:31:31 GMT 2022
 */

package net.named_data.jndn.encrypt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import net.named_data.jndn.Face;
import net.named_data.jndn.Interest;
import net.named_data.jndn.Link;
import net.named_data.jndn.Name;
import net.named_data.jndn.encoding.WireFormat;
import net.named_data.jndn.encrypt.Consumer;
import net.named_data.jndn.encrypt.ConsumerDb;
import net.named_data.jndn.encrypt.EncryptError;
import net.named_data.jndn.security.KeyChain;
import net.named_data.jndn.security.SigningInfo;
import net.named_data.jndn.security.identity.IdentityManager;
import net.named_data.jndn.security.identity.IdentityStorage;
import net.named_data.jndn.security.pib.PibImpl;
import net.named_data.jndn.security.policy.SelfVerifyPolicyManager;
import net.named_data.jndn.security.tpm.TpmBackEndMemory;
import net.named_data.jndn.transport.AsyncTcpTransport;
import net.named_data.jndn.transport.TcpTransport;
import net.named_data.jndn.transport.Transport;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Consumer_ESTest extends Consumer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          ArrayList<Object> arrayList0 = new ArrayList<Object>();
          ArrayList<Object> arrayList1 = new ArrayList<Object>();
          Name name0 = new Name(arrayList0);
          Interest interest0 = new Interest(name0);
          SelfVerifyPolicyManager selfVerifyPolicyManager0 = new SelfVerifyPolicyManager();
          Face face0 = new Face();
          Consumer consumer0 = new Consumer(face0, (KeyChain) null, name0, name0, (ConsumerDb) null);
          Consumer.OnConsumeComplete consumer_OnConsumeComplete0 = mock(Consumer.OnConsumeComplete.class, new ViolatedAssumptionAnswer());
          EncryptError.OnError encryptError_OnError0 = mock(EncryptError.OnError.class, new ViolatedAssumptionAnswer());
          Consumer.OnConsumeComplete consumer_OnConsumeComplete1 = mock(Consumer.OnConsumeComplete.class, new ViolatedAssumptionAnswer());
          Link link0 = new Link(name0);
          Link link1 = link0.addDelegation(1, name0);
          // Undeclared exception!
          try { 
            consumer0.consume(name0, consumer_OnConsumeComplete1, encryptError_OnError0, link1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:142)
             // net.named_data.jndn.Face.expressInterest(Face.java:188)
             // net.named_data.jndn.encrypt.Consumer.sendInterest(Consumer.java:594)
             // net.named_data.jndn.encrypt.Consumer.consume(Consumer.java:141)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Consumer.Friend consumer_Friend0 = mock(Consumer.Friend.class, new ViolatedAssumptionAnswer());
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Face face0 = new Face("net.named_data.jndn.tests.integration_tests.TestGroupConsumer", (-2));
      Consumer consumer0 = new Consumer(face0, (KeyChain) null, name0, name0, (ConsumerDb) null);
      Consumer.setFriendAccess(consumer_Friend0);
      Link link0 = new Link();
      Consumer.OnConsumeComplete consumer_OnConsumeComplete0 = mock(Consumer.OnConsumeComplete.class, new ViolatedAssumptionAnswer());
      EncryptError.OnError encryptError_OnError0 = mock(EncryptError.OnError.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        consumer0.consume(name0, consumer_OnConsumeComplete0, encryptError_OnError0, link0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-2
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0);
      Face face0 = new Face();
      Face face1 = new Face("dir", (-1));
      Consumer consumer0 = new Consumer(face1, (KeyChain) null, name0, name0, (ConsumerDb) null);
      Consumer.OnConsumeComplete consumer_OnConsumeComplete0 = mock(Consumer.OnConsumeComplete.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        consumer0.consume(name0, consumer_OnConsumeComplete0, (EncryptError.OnError) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Consumer.Friend consumer_Friend0 = mock(Consumer.Friend.class, new ViolatedAssumptionAnswer());
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0);
      SelfVerifyPolicyManager selfVerifyPolicyManager0 = new SelfVerifyPolicyManager();
      Face face0 = new Face();
      Name name1 = SigningInfo.getDigestSha256Identity();
      Consumer consumer0 = new Consumer(face0, (KeyChain) null, name1, name1, (ConsumerDb) null);
      // Undeclared exception!
      try { 
        consumer0.addDecryptionKey(name0, (Blob) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // addDecryptionKey: The consumer name must be a prefix of the key name
         //
         verifyException("net.named_data.jndn.encrypt.Consumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Consumer.Friend consumer_Friend0 = mock(Consumer.Friend.class, new ViolatedAssumptionAnswer());
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest();
      SelfVerifyPolicyManager selfVerifyPolicyManager0 = new SelfVerifyPolicyManager();
      Face face0 = new Face();
      Consumer consumer0 = new Consumer(face0, (KeyChain) null, name0, name0, (ConsumerDb) null);
      Consumer.setFriendAccess(consumer_Friend0);
      // Undeclared exception!
      try { 
        consumer0.addDecryptionKey(name0, (Blob) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.Consumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0);
      SelfVerifyPolicyManager selfVerifyPolicyManager0 = new SelfVerifyPolicyManager();
      Face face0 = new Face();
      Consumer consumer0 = new Consumer(face0, (KeyChain) null, name0, name0, (ConsumerDb) null);
      // Undeclared exception!
      try { 
        consumer0.addDecryptionKey(name0, (Blob) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.Consumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Consumer.Friend consumer_Friend0 = mock(Consumer.Friend.class, new ViolatedAssumptionAnswer());
          ArrayList<Object> arrayList0 = new ArrayList<Object>();
          ArrayList<Object> arrayList1 = new ArrayList<Object>();
          Name name0 = new Name(arrayList0);
          Interest interest0 = new Interest();
          SelfVerifyPolicyManager selfVerifyPolicyManager0 = new SelfVerifyPolicyManager();
          Face face0 = new Face();
          Consumer consumer0 = new Consumer(face0, (KeyChain) null, name0, name0, (ConsumerDb) null);
          consumer0.setGroup(name0);
          Consumer.OnConsumeComplete consumer_OnConsumeComplete0 = mock(Consumer.OnConsumeComplete.class, new ViolatedAssumptionAnswer());
          // Undeclared exception!
          try { 
            consumer0.consume(name0, consumer_OnConsumeComplete0, (EncryptError.OnError) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:142)
             // net.named_data.jndn.Face.expressInterest(Face.java:188)
             // net.named_data.jndn.encrypt.Consumer.sendInterest(Consumer.java:594)
             // net.named_data.jndn.encrypt.Consumer.consume(Consumer.java:141)
             // net.named_data.jndn.encrypt.Consumer.consume(Consumer.java:183)
             // jdk.internal.reflect.GeneratedMethodAccessor75.invoke(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0);
      SelfVerifyPolicyManager selfVerifyPolicyManager0 = new SelfVerifyPolicyManager();
      Face face0 = new Face();
      Consumer consumer0 = new Consumer(face0, (KeyChain) null, name0, name0, (ConsumerDb) null);
      consumer0.setGroup(name0);
      // Undeclared exception!
      try { 
        consumer0.addDecryptionKey(name0, (Blob) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.Consumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%0");
      Interest interest0 = new Interest(name0);
      Face face0 = new Face();
      Consumer consumer0 = new Consumer(face0, (KeyChain) null, name0, name0, (ConsumerDb) null);
      Consumer.OnConsumeComplete consumer_OnConsumeComplete0 = mock(Consumer.OnConsumeComplete.class, new ViolatedAssumptionAnswer());
      EncryptError.OnError encryptError_OnError0 = mock(EncryptError.OnError.class, new ViolatedAssumptionAnswer());
      interest0.getLink();
      // Undeclared exception!
      try { 
        consumer0.consume(name0, consumer_OnConsumeComplete0, encryptError_OnError0, (Link) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Data", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory1 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(11, threadFactory1);
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0, 3600000.0);
      SelfVerifyPolicyManager selfVerifyPolicyManager0 = new SelfVerifyPolicyManager();
      Face face0 = new Face();
      Consumer consumer0 = new Consumer(face0, (KeyChain) null, name0, name0, (ConsumerDb) null);
      Consumer.OnConsumeComplete consumer_OnConsumeComplete0 = mock(Consumer.OnConsumeComplete.class, new ViolatedAssumptionAnswer());
      Name name1 = new Name(name0);
      Consumer.OnConsumeComplete consumer_OnConsumeComplete1 = mock(Consumer.OnConsumeComplete.class, new ViolatedAssumptionAnswer());
      EncryptError.OnError encryptError_OnError0 = mock(EncryptError.OnError.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        consumer0.consume(name1, consumer_OnConsumeComplete1, encryptError_OnError0, (Link) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Data", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Consumer.Friend consumer_Friend0 = mock(Consumer.Friend.class, new ViolatedAssumptionAnswer());
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport((ScheduledExecutorService) null);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0, 10000);
      AsyncTcpTransport asyncTcpTransport1 = new AsyncTcpTransport((ScheduledExecutorService) null);
      asyncTcpTransport1.close();
      SelfVerifyPolicyManager selfVerifyPolicyManager0 = new SelfVerifyPolicyManager();
      Consumer.setFriendAccess(consumer_Friend0);
      Face face0 = new Face("B_E,#{[Q", 533);
      Name name1 = new Name("B_E,#{[Q");
      Interest interest1 = new Interest(name0);
      Interest interest2 = new Interest(interest1);
      interest1.getLink();
      Name name2 = new Name();
      Consumer consumer0 = null;
      try {
        consumer0 = new Consumer(face0, (KeyChain) null, name2, name0, (ConsumerDb) null, (Link) null, (Link) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Data", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Consumer.Friend consumer_Friend0 = mock(Consumer.Friend.class, new ViolatedAssumptionAnswer());
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      TcpTransport tcpTransport0 = new TcpTransport();
      Face face0 = new Face(tcpTransport0, transport_ConnectionInfo0);
      KeyChain keyChain0 = null;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Delayed> arrayList1 = new ArrayList<Delayed>();
      Name name0 = new Name(arrayList1);
      ConsumerDb consumerDb0 = null;
      Name name1 = new Name("t(:z");
      Interest interest0 = new Interest(name1, 0.0);
      interest0.getLink();
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport((ScheduledExecutorService) null);
      asyncTcpTransport0.close();
      SelfVerifyPolicyManager selfVerifyPolicyManager0 = new SelfVerifyPolicyManager();
      Consumer consumer0 = new Consumer(face0, (KeyChain) null, name1, name0, (ConsumerDb) null);
      Consumer.OnConsumeComplete consumer_OnConsumeComplete0 = mock(Consumer.OnConsumeComplete.class, new ViolatedAssumptionAnswer());
      EncryptError.OnError encryptError_OnError0 = mock(EncryptError.OnError.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        consumer0.consume(name1, consumer_OnConsumeComplete0, encryptError_OnError0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.transport.Transport$ConnectionInfo cannot be cast to class net.named_data.jndn.transport.TcpTransport$ConnectionInfo (net.named_data.jndn.transport.Transport$ConnectionInfo and net.named_data.jndn.transport.TcpTransport$ConnectionInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @52525a5a)
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      ThreadFactory threadFactory1 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(0);
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport(scheduledThreadPoolExecutor1);
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(asyncTcpTransport0, transport_ConnectionInfo0);
      KeyChain keyChain0 = null;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      ConsumerDb consumerDb0 = null;
      Interest interest0 = new Interest(name0, (-2052.43));
      interest0.getLink();
      asyncTcpTransport0.close();
      SelfVerifyPolicyManager selfVerifyPolicyManager0 = new SelfVerifyPolicyManager();
      Name name1 = new Name();
      Name name2 = null;
      Consumer consumer0 = null;
      try {
        consumer0 = new Consumer(face0, (KeyChain) null, name1, (Name) null, (ConsumerDb) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(106);
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport(scheduledThreadPoolExecutor0);
      Face face0 = new Face(asyncTcpTransport0, transport_ConnectionInfo0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest();
      Link link0 = new Link();
      Link link1 = new Link(name0);
      Consumer consumer0 = new Consumer(face0, (KeyChain) null, name0, name0, (ConsumerDb) null, link0, link1);
      IdentityManager identityManager0 = null;
      try {
        identityManager0 = new IdentityManager((IdentityStorage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.IdentityManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face((Transport) null, transport_ConnectionInfo0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      ConsumerDb consumerDb0 = null;
      Interest interest0 = new Interest(name0, 0.0);
      interest0.getLink();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadPoolExecutor_DiscardOldestPolicy0);
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      threadPoolExecutor_DiscardOldestPolicy0.rejectedExecution(mockThread0, scheduledThreadPoolExecutor0);
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport(scheduledThreadPoolExecutor0);
      asyncTcpTransport0.close();
      SelfVerifyPolicyManager selfVerifyPolicyManager0 = new SelfVerifyPolicyManager();
      Name name1 = selfVerifyPolicyManager0.inferSigningIdentity(name0);
      Consumer consumer0 = new Consumer(face0, (KeyChain) null, name0, name1, (ConsumerDb) null);
      Consumer.OnConsumeComplete consumer_OnConsumeComplete0 = mock(Consumer.OnConsumeComplete.class, new ViolatedAssumptionAnswer());
      EncryptError.OnError encryptError_OnError0 = mock(EncryptError.OnError.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        consumer0.consume(name0, consumer_OnConsumeComplete0, encryptError_OnError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport(scheduledThreadPoolExecutor0);
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(asyncTcpTransport0, transport_ConnectionInfo0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0, 10000);
      Link link0 = new Link(name0);
      Consumer consumer0 = new Consumer(face0, (KeyChain) null, name0, name0, (ConsumerDb) null, link0, link0);
      IdentityManager identityManager0 = null;
      try {
        identityManager0 = new IdentityManager((IdentityStorage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.identity.IdentityManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport(scheduledThreadPoolExecutor0);
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(asyncTcpTransport0, transport_ConnectionInfo0);
      KeyChain keyChain0 = null;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      ConsumerDb consumerDb0 = null;
      Interest interest0 = new Interest(name0, 10000);
      interest0.getLink();
      asyncTcpTransport0.close();
      SelfVerifyPolicyManager selfVerifyPolicyManager0 = new SelfVerifyPolicyManager();
      Consumer consumer0 = new Consumer(face0, (KeyChain) null, name0, name0, (ConsumerDb) null);
      Consumer.OnConsumeComplete consumer_OnConsumeComplete0 = mock(Consumer.OnConsumeComplete.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        consumer0.consume(name0, consumer_OnConsumeComplete0, (EncryptError.OnError) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.channels.spi.AsynchronousChannelProvider$ProviderHolder
         //
         verifyException("java.nio.channels.spi.AsynchronousChannelProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport(scheduledThreadPoolExecutor0);
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(asyncTcpTransport0, transport_ConnectionInfo0);
      KeyChain keyChain0 = null;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      ConsumerDb consumerDb0 = null;
      Interest interest0 = new Interest(name0, 10000);
      interest0.getLink();
      asyncTcpTransport0.close();
      SelfVerifyPolicyManager selfVerifyPolicyManager0 = new SelfVerifyPolicyManager();
      Name name1 = selfVerifyPolicyManager0.inferSigningIdentity(name0);
      Consumer consumer0 = new Consumer(face0, (KeyChain) null, name1, name0, (ConsumerDb) null);
      Consumer.OnConsumeComplete consumer_OnConsumeComplete0 = mock(Consumer.OnConsumeComplete.class, new ViolatedAssumptionAnswer());
      EncryptError.OnError encryptError_OnError0 = mock(EncryptError.OnError.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        consumer0.consume(name0, consumer_OnConsumeComplete0, encryptError_OnError0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.channels.spi.AsynchronousChannelProvider$ProviderHolder
         //
         verifyException("java.nio.channels.spi.AsynchronousChannelProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          ArrayList<Object> arrayList0 = new ArrayList<Object>();
          ArrayList<Object> arrayList1 = new ArrayList<Object>();
          Name name0 = new Name(arrayList0);
          Interest interest0 = new Interest(name0);
          Face face0 = new Face();
          Consumer consumer0 = new Consumer(face0, (KeyChain) null, name0, name0, (ConsumerDb) null);
          // Undeclared exception!
          try { 
            consumer0.consume(name0, (Consumer.OnConsumeComplete) null, (EncryptError.OnError) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:6363\" \"connect,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:824)
             // java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:676)
             // java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:194)
             // net.named_data.jndn.transport.TcpTransport.connect(TcpTransport.java:133)
             // net.named_data.jndn.Node.expressInterest(Node.java:129)
             // net.named_data.jndn.Face.expressInterest(Face.java:142)
             // net.named_data.jndn.Face.expressInterest(Face.java:188)
             // net.named_data.jndn.encrypt.Consumer.sendInterest(Consumer.java:594)
             // net.named_data.jndn.encrypt.Consumer.consume(Consumer.java:141)
             // net.named_data.jndn.encrypt.Consumer.consume(Consumer.java:183)
             // jdk.internal.reflect.GeneratedMethodAccessor75.invoke(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest();
      interest0.getLink();
      Consumer consumer0 = null;
      try {
        consumer0 = new Consumer(face0, (KeyChain) null, name0, name0, (ConsumerDb) null, (Link) null, (Link) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Data", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      AsyncTcpTransport asyncTcpTransport0 = new AsyncTcpTransport(scheduledThreadPoolExecutor0);
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(asyncTcpTransport0, transport_ConnectionInfo0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      Interest interest0 = new Interest(name0, 10000);
      interest0.getLink();
      Consumer consumer0 = null;
      try {
        consumer0 = new Consumer(face0, (KeyChain) null, name0, name0, (ConsumerDb) null, (Link) null, (Link) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Data", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Consumer.setFriendAccess((Consumer.Friend) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.Consumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Consumer.Friend consumer_Friend0 = mock(Consumer.Friend.class, new ViolatedAssumptionAnswer());
      Consumer.setFriendAccess(consumer_Friend0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConsumerDb.Error consumerDb_Error0 = new ConsumerDb.Error((String) null);
      Consumer.Friend consumer_Friend0 = mock(Consumer.Friend.class, new ViolatedAssumptionAnswer());
      Consumer.setFriendAccess(consumer_Friend0);
      Face face0 = new Face("");
      TpmBackEndMemory tpmBackEndMemory0 = new TpmBackEndMemory();
      KeyChain keyChain0 = null;
      try {
        keyChain0 = new KeyChain((PibImpl) null, tpmBackEndMemory0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // The pibImpl is null
         //
      }
  }
}
