/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:39:17 GMT 2022
 */

package net.named_data.jndn.encrypt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.Face;
import net.named_data.jndn.Name;
import net.named_data.jndn.encrypt.DecryptorV2;
import net.named_data.jndn.encrypt.EncryptError;
import net.named_data.jndn.encrypt.EncryptedContent;
import net.named_data.jndn.security.KeyChain;
import net.named_data.jndn.security.pib.PibKey;
import net.named_data.jndn.security.v2.ValidationPolicySimpleHierarchy;
import net.named_data.jndn.security.v2.Validator;
import net.named_data.jndn.transport.Transport;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DecryptorV2_ESTest extends DecryptorV2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/etc/ndn/client.conf");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ValidationPolicySimpleHierarchy validationPolicySimpleHierarchy0 = new ValidationPolicySimpleHierarchy();
      Validator validator0 = new Validator(validationPolicySimpleHierarchy0);
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face((Transport) null, transport_ConnectionInfo0);
      DecryptorV2 decryptorV2_0 = null;
      try {
        decryptorV2_0 = new DecryptorV2((PibKey) null, validator0, (KeyChain) null, face0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error creating in-memory KeyChain: java.io.IOException: Simulated IOException
         //
         verifyException("net.named_data.jndn.encrypt.DecryptorV2", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Face face0 = new Face();
      DecryptorV2 decryptorV2_0 = new DecryptorV2((PibKey) null, (Validator) null, (KeyChain) null, face0);
      // Undeclared exception!
      try { 
        decryptorV2_0.decrypt((EncryptedContent) null, (DecryptorV2.DecryptSuccessCallback) null, (EncryptError.OnError) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.DecryptorV2", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DecryptorV2.ContentKey decryptorV2_ContentKey0 = new DecryptorV2.ContentKey();
      assertFalse(decryptorV2_ContentKey0.isRetrieved);
      assertEquals(0L, decryptorV2_ContentKey0.pendingInterest);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Face face0 = new Face();
      EncryptedContent encryptedContent0 = new EncryptedContent();
      EncryptedContent encryptedContent1 = encryptedContent0.setKeyLocatorName((Name) null);
      DecryptorV2 decryptorV2_0 = new DecryptorV2((PibKey) null, (Validator) null, (KeyChain) null, face0);
      // Undeclared exception!
      try { 
        decryptorV2_0.decrypt(encryptedContent1, (DecryptorV2.DecryptSuccessCallback) null, (EncryptError.OnError) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Face face0 = new Face();
      DecryptorV2 decryptorV2_0 = new DecryptorV2((PibKey) null, (Validator) null, (KeyChain) null, face0);
      EncryptedContent encryptedContent0 = new EncryptedContent();
      // Undeclared exception!
      try { 
        decryptorV2_0.decrypt(encryptedContent0, (DecryptorV2.DecryptSuccessCallback) null, (EncryptError.OnError) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EncryptedContent encryptedContent0 = new EncryptedContent();
      encryptedContent0.setKeyLocatorName((Name) null);
      Face face0 = new Face();
      DecryptorV2 decryptorV2_0 = new DecryptorV2((PibKey) null, (Validator) null, (KeyChain) null, face0);
      Blob blob0 = new Blob("%%?lTtC_nn'a-{J+uE");
      encryptedContent0.setInitialVector(blob0);
      // Undeclared exception!
      try { 
        decryptorV2_0.decrypt(encryptedContent0, (DecryptorV2.DecryptSuccessCallback) null, (EncryptError.OnError) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EncryptedContent encryptedContent0 = new EncryptedContent();
      DecryptorV2.DecryptSuccessCallback decryptorV2_DecryptSuccessCallback0 = mock(DecryptorV2.DecryptSuccessCallback.class, new ViolatedAssumptionAnswer());
      EncryptError.OnError encryptError_OnError0 = mock(EncryptError.OnError.class, new ViolatedAssumptionAnswer());
      DecryptorV2.ContentKey.PendingDecrypt decryptorV2_ContentKey_PendingDecrypt0 = new DecryptorV2.ContentKey.PendingDecrypt(encryptedContent0, decryptorV2_DecryptSuccessCallback0, encryptError_OnError0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Face face0 = new Face();
      DecryptorV2 decryptorV2_0 = new DecryptorV2((PibKey) null, (Validator) null, (KeyChain) null, face0);
      decryptorV2_0.shutdown();
  }
}
