/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:16:22 GMT 2022
 */

package net.named_data.jndn.encrypt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.encrypt.Interval;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Interval_ESTest extends Interval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Interval interval0 = new Interval(0.0, 740.55984);
      Interval interval1 = new Interval(720.12487338, 1051.6062332859588);
      Interval interval2 = interval0.unionWith(interval1);
      assertSame(interval2, interval0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Interval interval0 = new Interval(true);
      Interval interval1 = new Interval(0.0, 740.55984);
      interval0.set(interval1);
      Interval interval2 = new Interval(740.55984, 1051.6062332859588);
      interval1.set(interval2);
      try { 
        interval0.unionWith(interval1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Interval.unionWith: The two intervals do not have an intersection
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Interval interval0 = new Interval(true);
      Interval interval1 = new Interval(0.0, 740.55984);
      Interval interval2 = new Interval(740.55984, 1051.6062332859588);
      interval0.set(interval2);
      try { 
        interval0.unionWith(interval1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Interval.unionWith: The two intervals do not have an intersection
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Interval interval0 = new Interval(true);
      Interval interval1 = new Interval(0.0, 740.55984);
      interval0.set(interval1);
      Interval interval2 = new Interval((-1.0), 589.2939837);
      Interval interval3 = interval2.intersectWith(interval0);
      assertSame(interval3, interval2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Interval interval0 = new Interval((-2783.101431), (-2311.0));
      Interval interval1 = new Interval(344.30477976740707, 2368.88553);
      Interval interval2 = interval0.intersectWith(interval1);
      assertTrue(interval2.isValid());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Interval interval0 = new Interval((-2783.101431), (-2311.0));
      Interval interval1 = new Interval(1960.213556, 3307.6216247624);
      Interval interval2 = interval1.intersectWith(interval0);
      assertTrue(interval2.isValid());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Interval interval0 = new Interval(true);
      Interval interval1 = new Interval(0.0, 740.55984);
      interval0.unionWith(interval1);
      boolean boolean0 = interval0.covers(740.55984);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Interval interval0 = new Interval(true);
      Interval interval1 = new Interval(0.0, 740.55984);
      interval0.set(interval1);
      boolean boolean0 = interval0.covers(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Interval interval0 = null;
      try {
        interval0 = new Interval(0.0, (-2293.1029));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Interval start time must be less than the end time
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Interval interval0 = new Interval();
      boolean boolean0 = interval0.isValid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Interval interval0 = new Interval(true);
      Interval interval1 = new Interval(0.0, 740.55984);
      interval0.unionWith(interval1);
      double double0 = interval0.getStartTime();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Interval interval0 = new Interval(740.55984, 1051.6062332859588);
      double double0 = interval0.getStartTime();
      assertEquals(740.55984, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Interval interval0 = new Interval((-216.53528596952924), 0.0);
      double double0 = interval0.getEndTime();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Interval interval0 = new Interval(0.0, 740.55984);
      double double0 = interval0.getEndTime();
      assertEquals(740.55984, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Interval interval0 = new Interval(true);
      // Undeclared exception!
      try { 
        interval0.unionWith((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Interval interval0 = new Interval();
      // Undeclared exception!
      try { 
        interval0.set((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Interval interval0 = new Interval(true);
      // Undeclared exception!
      try { 
        interval0.intersectWith((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Interval interval0 = null;
      try {
        interval0 = new Interval((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Interval interval0 = new Interval(0.0, 740.55984);
      boolean boolean0 = interval0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Interval interval0 = new Interval(true);
      boolean boolean0 = interval0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Interval.Error interval_Error0 = new Interval.Error("");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Interval interval0 = new Interval();
      // Undeclared exception!
      try { 
        interval0.isEmpty();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Interval.isEmpty: This Interval is invalid
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Interval interval0 = new Interval();
      // Undeclared exception!
      try { 
        interval0.getEndTime();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Interval.getEndTime: This Interval is invalid
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Interval interval0 = new Interval(true);
      double double0 = interval0.getEndTime();
      assertEquals((-1.7976931348623157E308), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Interval interval0 = new Interval();
      // Undeclared exception!
      try { 
        interval0.getStartTime();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Interval.getStartTime: This Interval is invalid
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Interval interval0 = new Interval(true);
      double double0 = interval0.getStartTime();
      assertEquals((-1.7976931348623157E308), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Interval interval0 = new Interval(true);
      Interval interval1 = new Interval(0.0, 740.55984);
      interval0.set(interval1);
      Interval interval2 = new Interval(0.0, 4252.3852);
      Interval interval3 = interval0.unionWith(interval2);
      assertTrue(interval3.isValid());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Interval interval0 = new Interval(297.44761451, 3529.1383587923488);
      Interval interval1 = new Interval(1.0, 3529.1383587923488);
      Interval interval2 = interval0.unionWith(interval1);
      assertTrue(interval2.isValid());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Interval interval0 = new Interval(1.0, 114.662008081033);
      Interval interval1 = new Interval((-1198.54), (-1.0));
      try { 
        interval0.unionWith(interval1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Interval.unionWith: The two intervals do not have an intersection
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Interval interval0 = new Interval((-1991.94195081615), 4996.11545771272);
      Interval interval1 = new Interval(true);
      Interval interval2 = interval0.unionWith(interval1);
      assertSame(interval0, interval2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Interval interval0 = new Interval(true);
      Interval interval1 = new Interval();
      // Undeclared exception!
      try { 
        interval0.unionWith(interval1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Interval.intersectWith: The other Interval is invalid
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Interval interval0 = new Interval();
      // Undeclared exception!
      try { 
        interval0.unionWith(interval0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Interval.intersectWith: This Interval is invalid
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Interval interval0 = new Interval(0.0, 740.55984);
      Interval interval1 = new Interval(0.0, 4252.3852);
      Interval interval2 = interval1.intersectWith(interval0);
      assertNotSame(interval2, interval0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Interval interval0 = new Interval(1090.3694353383605, 3996.119684421);
      Interval interval1 = new Interval(1051.6062332859588, 3996.119684421);
      Interval interval2 = interval0.intersectWith(interval1);
      assertNotSame(interval2, interval1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Interval interval0 = new Interval(true);
      Interval interval1 = new Interval(0.0, 740.55984);
      interval0.set(interval1);
      Interval interval2 = new Interval(740.55984, 1051.6062332859588);
      Interval interval3 = interval0.intersectWith(interval2);
      assertSame(interval3, interval0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Interval interval0 = new Interval(0.0, 740.55984);
      Interval interval1 = new Interval(740.55984, 1051.6062332859588);
      Interval interval2 = interval1.intersectWith(interval0);
      assertNotSame(interval0, interval2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Interval interval0 = new Interval(565.0, 4473.426352062878);
      Interval interval1 = new Interval(true);
      Interval interval2 = interval0.intersectWith(interval1);
      assertTrue(interval2.isValid());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Interval interval0 = new Interval(true);
      Interval interval1 = new Interval();
      // Undeclared exception!
      try { 
        interval0.intersectWith(interval1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Interval.intersectWith: The other Interval is invalid
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Interval interval0 = new Interval();
      // Undeclared exception!
      try { 
        interval0.intersectWith(interval0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Interval.intersectWith: This Interval is invalid
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Interval interval0 = new Interval(true);
      Interval interval1 = interval0.intersectWith(interval0);
      assertSame(interval0, interval1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Interval interval0 = new Interval(0.0, 740.55984);
      boolean boolean0 = interval0.covers((-1.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Interval interval0 = new Interval(0.0, 740.55984);
      assertTrue(interval0.isValid());
      
      boolean boolean0 = interval0.covers(4252.3852);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Interval interval0 = new Interval(true);
      assertTrue(interval0.isValid());
      
      boolean boolean0 = interval0.covers(4252.3852);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Interval interval0 = null;
      try {
        interval0 = new Interval((-2783.101431), (-2783.101431));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Interval start time must be less than the end time
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Interval interval0 = new Interval(true);
      Interval interval1 = new Interval(0.0, 724.5801463180829);
      interval0.set(interval1);
      Interval interval2 = new Interval(740.55984, 1051.6062332859588);
      Interval interval3 = new Interval(interval2);
      try { 
        interval0.unionWith(interval3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Interval.unionWith: The two intervals do not have an intersection
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Interval interval0 = new Interval();
      // Undeclared exception!
      try { 
        interval0.covers(1777.4774568);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Interval.covers: This Interval is invalid
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Interval interval0 = new Interval(true);
      boolean boolean0 = interval0.isValid();
      assertTrue(boolean0);
  }
}
