/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 01:07:13 GMT 2022
 */

package net.named_data.jndn.encrypt.algo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.InvalidKeyException;
import net.named_data.jndn.encrypt.DecryptKey;
import net.named_data.jndn.encrypt.algo.EncryptAlgorithmType;
import net.named_data.jndn.encrypt.algo.EncryptParams;
import net.named_data.jndn.encrypt.algo.RsaAlgorithm;
import net.named_data.jndn.security.RsaKeyParams;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RsaAlgorithm_ESTest extends RsaAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Blob blob0 = new Blob("/");
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.AesEcb;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0, 224);
      Blob blob1 = new Blob();
      // Undeclared exception!
      try { 
        RsaAlgorithm.encrypt(blob1, blob0, encryptParams0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.der.DerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Blob blob0 = new Blob("");
      Blob blob1 = new Blob(blob0);
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.AesCbc;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0, 1);
      try { 
        RsaAlgorithm.decrypt(blob1, blob0, encryptParams0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // decrypt: Error in loadPkcs8: org.evosuite.runtime.mock.java.lang.MockThrowable: Cannot decode the PKCS #8 private key: org.evosuite.runtime.mock.java.lang.MockThrowable: DerNode.parse: The input length is too small
         //
         verifyException("net.named_data.jndn.encrypt.algo.RsaAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RsaKeyParams rsaKeyParams0 = new RsaKeyParams();
      DecryptKey decryptKey0 = RsaAlgorithm.generateKey(rsaKeyParams0);
      assertNotNull(decryptKey0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RsaKeyParams rsaKeyParams0 = new RsaKeyParams((-185));
      try { 
        RsaAlgorithm.generateKey(rsaKeyParams0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // generateKey: Error in generatePrivateKey: java.security.InvalidParameterException: Public exponent must be smaller than key size
         //
         verifyException("net.named_data.jndn.encrypt.algo.RsaAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[0];
      Blob blob0 = new Blob(intArray0);
      try { 
        RsaAlgorithm.encrypt(blob0, blob0, (EncryptParams) null);
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
         //
         // PublicKey: Error decoding the public key: DerNode.parse: The input length is too small
         //
         verifyException("net.named_data.jndn.encrypt.algo.RsaAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      Blob blob0 = new Blob(intArray0);
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.NONE;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0);
      // Undeclared exception!
      try { 
        RsaAlgorithm.encrypt(blob0, blob0, encryptParams0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 939;
      intArray0[1] = 2102;
      Blob blob0 = new Blob(intArray0);
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.AesEcb;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0, 0);
      // Undeclared exception!
      try { 
        RsaAlgorithm.encrypt(blob0, blob0, encryptParams0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newLimit > capacity: (56 > 4)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Blob blob0 = new Blob("(`a9HXL&$k: J_=~3e?");
      try { 
        RsaAlgorithm.deriveEncryptKey(blob0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // deriveEncryptKey: Error in loadPkcs8: org.evosuite.runtime.mock.java.lang.MockThrowable: Cannot decode the PKCS #8 private key: org.evosuite.runtime.mock.java.lang.MockThrowable: Unimplemented DER type 40
         //
         verifyException("net.named_data.jndn.encrypt.algo.RsaAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)87;
      Blob blob0 = new Blob(byteArray0);
      // Undeclared exception!
      try { 
        RsaAlgorithm.deriveEncryptKey(blob0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newLimit > capacity: (89 > 2)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.RsaPkcs;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0, 1);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      Blob blob0 = new Blob(intArray0);
      // Undeclared exception!
      try { 
        RsaAlgorithm.decrypt(blob0, blob0, encryptParams0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.RsaOaep;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0, 0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)25;
      Blob blob0 = new Blob(byteArray0, true);
      // Undeclared exception!
      try { 
        RsaAlgorithm.decrypt(blob0, blob0, encryptParams0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newLimit > capacity: (27 > 4)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Blob blob0 = new Blob();
      // Undeclared exception!
      try { 
        RsaAlgorithm.deriveEncryptKey(blob0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.der.DerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RsaAlgorithm rsaAlgorithm0 = new RsaAlgorithm();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RsaAlgorithm.decrypt((Blob) null, (Blob) null, (EncryptParams) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.algo.RsaAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RsaAlgorithm.generateKey((RsaKeyParams) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.security.tpm.TpmPrivateKey", e);
      }
  }
}
