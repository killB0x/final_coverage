/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 21:54:58 GMT 2022
 */

package net.named_data.jndn.encrypt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.encrypt.RepetitiveInterval;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RepetitiveInterval_ESTest extends RepetitiveInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.MONTH;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval((-1.7976931348623157E308), 1661.4, 0, 1, 1, repetitiveInterval_RepeatUnit0);
      // Undeclared exception!
      try { 
        repetitiveInterval0.getInterval((-1.7976931348623157E308));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Interval start time must be less than the end time
         //
         verifyException("net.named_data.jndn.encrypt.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.MONTH;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval((-2.0736E9), 18, 18, 24, 24, repetitiveInterval_RepeatUnit0);
      RepetitiveInterval.Result repetitiveInterval_Result0 = repetitiveInterval0.getInterval(24);
      assertEquals(0.0, repetitiveInterval0.getEndDate(), 0.01);
      assertEquals(24, repetitiveInterval0.getNRepeats());
      assertEquals((-2.0736E9), repetitiveInterval0.getStartDate(), 0.01);
      assertFalse(repetitiveInterval_Result0.isPositive);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.MONTH;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(1.0, 8.64E7, 1, 18, (-3155), repetitiveInterval_RepeatUnit0);
      RepetitiveInterval.Result repetitiveInterval_Result0 = repetitiveInterval0.getInterval(1.0);
      assertFalse(repetitiveInterval_Result0.isPositive);
      assertEquals((-3155), repetitiveInterval0.getNRepeats());
      assertEquals(8.64E7, repetitiveInterval0.getEndDate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.YEAR;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(0.0, (-2682.99623529007), 1, 5, 1, repetitiveInterval_RepeatUnit0);
      repetitiveInterval0.hashCode();
      assertEquals(1, repetitiveInterval0.getNRepeats());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.DAY;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(2412.5, 8.64E7, 0, 4, 4, repetitiveInterval_RepeatUnit0);
      repetitiveInterval0.hashCode();
      assertEquals(4, repetitiveInterval0.getNRepeats());
      assertEquals(8.64E7, repetitiveInterval0.getEndDate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval((-258.08), (-258.08), 0, 24);
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval();
      boolean boolean0 = repetitiveInterval0.equals(repetitiveInterval1);
      assertFalse(boolean0);
      assertEquals((-1.7976931348623157E308), repetitiveInterval1.getStartDate(), 0.01);
      assertFalse(repetitiveInterval1.equals((Object)repetitiveInterval0));
      assertEquals(24, repetitiveInterval1.getIntervalEndHour());
      assertEquals(0, repetitiveInterval1.getIntervalStartHour());
      assertEquals(0, repetitiveInterval0.getNRepeats());
      assertEquals(0, repetitiveInterval1.getNRepeats());
      assertEquals((-1.7976931348623157E308), repetitiveInterval1.getEndDate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.NONE;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(0, 0, 0, 1, 0, repetitiveInterval_RepeatUnit0);
      RepetitiveInterval.Result repetitiveInterval_Result0 = repetitiveInterval0.getInterval(3600000.0);
      assertTrue(repetitiveInterval_Result0.isPositive);
      assertEquals(0, repetitiveInterval0.getNRepeats());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = null;
      try {
        repetitiveInterval0 = new RepetitiveInterval(8, 8, 8, 8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ReptitiveInterval: startHour must be less than endHour
         //
         verifyException("net.named_data.jndn.encrypt.RepetitiveInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = RepetitiveInterval.toDateOnlyMilliseconds((-1));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = RepetitiveInterval.toDateOnlyMilliseconds(1.9872E9);
      assertEquals(1.9872E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.NONE;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(8.64E7, 8.64E7, 1, 3, 1, repetitiveInterval_RepeatUnit0);
      double double0 = repetitiveInterval0.getStartDate();
      assertEquals(8.64E7, double0, 0.01);
      assertEquals(1, repetitiveInterval0.getNRepeats());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      double double0 = repetitiveInterval0.getStartDate();
      assertEquals((-1.7976931348623157E308), double0, 0.01);
      assertEquals(24, repetitiveInterval0.getIntervalEndHour());
      assertEquals(0, repetitiveInterval0.getIntervalStartHour());
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getEndDate(), 0.01);
      assertEquals(0, repetitiveInterval0.getNRepeats());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(0, 0, 0, 1, 1, (RepetitiveInterval.RepeatUnit) null);
      repetitiveInterval0.getRepeatUnit();
      assertEquals(1, repetitiveInterval0.getNRepeats());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.DAY;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(0, 0, 0, 20, 20, repetitiveInterval_RepeatUnit0);
      int int0 = repetitiveInterval0.getNRepeats();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.DAY;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(0, 0, 0, 12, (-2791), repetitiveInterval_RepeatUnit0);
      int int0 = repetitiveInterval0.getNRepeats();
      assertEquals((-2791), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      int int0 = repetitiveInterval0.getIntervalStartHour();
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getEndDate(), 0.01);
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getStartDate(), 0.01);
      assertEquals(0, int0);
      assertEquals(0, repetitiveInterval0.getNRepeats());
      assertEquals(24, repetitiveInterval0.getIntervalEndHour());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.DAY;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(0.0, 8.64E7, 0, 1, 0, repetitiveInterval_RepeatUnit0);
      double double0 = repetitiveInterval0.getEndDate();
      assertEquals(8.64E7, double0, 0.01);
      assertEquals(0, repetitiveInterval0.getNRepeats());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      double double0 = repetitiveInterval0.getEndDate();
      assertEquals(24, repetitiveInterval0.getIntervalEndHour());
      assertEquals(0, repetitiveInterval0.getNRepeats());
      assertEquals((-1.7976931348623157E308), double0, 0.01);
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getStartDate(), 0.01);
      assertEquals(0, repetitiveInterval0.getIntervalStartHour());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval((-258.08), (-258.08), 0, 24);
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval();
      int int0 = repetitiveInterval0.CompareTo(repetitiveInterval1);
      assertEquals((-1.7976931348623157E308), repetitiveInterval1.getEndDate(), 0.01);
      assertEquals(0, repetitiveInterval1.getNRepeats());
      assertEquals(0, repetitiveInterval0.getNRepeats());
      assertEquals((-1.7976931348623157E308), repetitiveInterval1.getStartDate(), 0.01);
      assertEquals(0, repetitiveInterval1.getIntervalStartHour());
      assertEquals(24, repetitiveInterval1.getIntervalEndHour());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.MONTH;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(0, 0, 0, 18, 0, repetitiveInterval_RepeatUnit0);
      // Undeclared exception!
      try { 
        repetitiveInterval0.getInterval(18);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.named_data.jndn.encrypt.RepetitiveInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      // Undeclared exception!
      try { 
        repetitiveInterval0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.RepetitiveInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        repetitiveInterval0.compareTo(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.encrypt.RepetitiveInterval (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.encrypt.RepetitiveInterval is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @4d9d0886)
         //
         verifyException("net.named_data.jndn.encrypt.RepetitiveInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      // Undeclared exception!
      try { 
        repetitiveInterval0.compare((RepetitiveInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.RepetitiveInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      // Undeclared exception!
      try { 
        repetitiveInterval0.CompareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.RepetitiveInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        repetitiveInterval0.CompareTo(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.encrypt.RepetitiveInterval (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.encrypt.RepetitiveInterval is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @4d9d0886)
         //
         verifyException("net.named_data.jndn.encrypt.RepetitiveInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = null;
      try {
        repetitiveInterval0 = new RepetitiveInterval((RepetitiveInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.RepetitiveInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(6, 6, 6, 12);
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval();
      int int0 = repetitiveInterval0.compare(repetitiveInterval1);
      assertEquals((-1.7976931348623157E308), repetitiveInterval1.getStartDate(), 0.01);
      assertEquals(0, repetitiveInterval1.getNRepeats());
      assertEquals(0, repetitiveInterval1.getIntervalStartHour());
      assertEquals(1, int0);
      assertEquals(24, repetitiveInterval1.getIntervalEndHour());
      assertEquals(0, repetitiveInterval0.getNRepeats());
      assertEquals((-1.7976931348623157E308), repetitiveInterval1.getEndDate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval(0, 0, 0, 5);
      int int0 = repetitiveInterval0.compare(repetitiveInterval1);
      assertEquals(0, repetitiveInterval0.getNRepeats());
      assertEquals(0, repetitiveInterval1.getNRepeats());
      assertEquals((-1), int0);
      assertEquals(24, repetitiveInterval0.getIntervalEndHour());
      assertEquals(0, repetitiveInterval0.getIntervalStartHour());
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getStartDate(), 0.01);
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getEndDate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.YEAR;
      int int0 = RepetitiveInterval.getRepeatUnitNumericType(repetitiveInterval_RepeatUnit0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.MONTH;
      int int0 = RepetitiveInterval.getRepeatUnitNumericType(repetitiveInterval_RepeatUnit0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.DAY;
      int int0 = RepetitiveInterval.getRepeatUnitNumericType(repetitiveInterval_RepeatUnit0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = RepetitiveInterval.toDateOnlyMilliseconds((-1.7976931348623157E308));
      assertEquals((-9.2233720368288E18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.YEAR;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval((-1.7976931348623157E308), 1591.0, 0, 12, 12, repetitiveInterval_RepeatUnit0);
      assertEquals((-9.2233720368288E18), repetitiveInterval0.getStartDate(), 0.01);
      
      RepetitiveInterval.Result repetitiveInterval_Result0 = repetitiveInterval0.getInterval((-1.0));
      assertFalse(repetitiveInterval_Result0.isPositive);
      assertEquals(12, repetitiveInterval0.getNRepeats());
      assertEquals(0.0, repetitiveInterval0.getEndDate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.YEAR;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(14, 14, 14, 16, 16, repetitiveInterval_RepeatUnit0);
      RepetitiveInterval.Result repetitiveInterval_Result0 = repetitiveInterval0.getInterval(14);
      assertFalse(repetitiveInterval_Result0.isPositive);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.MONTH;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(1096.42416, 8.64E7, 0, 17, 19, repetitiveInterval_RepeatUnit0);
      RepetitiveInterval.Result repetitiveInterval_Result0 = repetitiveInterval0.getInterval(8.64E7);
      assertEquals(19, repetitiveInterval0.getNRepeats());
      assertFalse(repetitiveInterval_Result0.isPositive);
      assertEquals(8.64E7, repetitiveInterval0.getEndDate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.DAY;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval((-1.7976931348623157E308), 21, 14, 21, 14, repetitiveInterval_RepeatUnit0);
      RepetitiveInterval.Result repetitiveInterval_Result0 = repetitiveInterval0.getInterval(14);
      assertFalse(repetitiveInterval_Result0.isPositive);
      assertEquals((-9.2233720368288E18), repetitiveInterval0.getStartDate(), 0.01);
      assertEquals(14, repetitiveInterval0.getNRepeats());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.DAY;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(18, 0, 0, 18, 18, repetitiveInterval_RepeatUnit0);
      RepetitiveInterval.Result repetitiveInterval_Result0 = repetitiveInterval0.getInterval(0);
      assertEquals(18, repetitiveInterval0.getNRepeats());
      assertTrue(repetitiveInterval_Result0.isPositive);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval((-258.08), (-258.08), 0, 24);
      assertEquals(0.0, repetitiveInterval0.getEndDate(), 0.01);
      
      RepetitiveInterval.Result repetitiveInterval_Result0 = repetitiveInterval0.getInterval((-1.7976931348623157E308));
      assertFalse(repetitiveInterval_Result0.isPositive);
      assertEquals(0, repetitiveInterval0.getNRepeats());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.DAY;
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval((-419.082151294877), (-419.082151294877), 0, 1, 0, repetitiveInterval_RepeatUnit0);
      boolean boolean0 = repetitiveInterval0.equals(repetitiveInterval1);
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getEndDate(), 0.01);
      assertFalse(repetitiveInterval1.equals((Object)repetitiveInterval0));
      assertEquals(0.0, repetitiveInterval1.getStartDate(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, repetitiveInterval0.getIntervalStartHour());
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getStartDate(), 0.01);
      assertEquals(0, repetitiveInterval0.getNRepeats());
      assertEquals(24, repetitiveInterval0.getIntervalEndHour());
      assertEquals(0, repetitiveInterval1.getNRepeats());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      Object object0 = new Object();
      boolean boolean0 = repetitiveInterval0.equals(object0);
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getEndDate(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, repetitiveInterval0.getIntervalStartHour());
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getStartDate(), 0.01);
      assertEquals(0, repetitiveInterval0.getNRepeats());
      assertEquals(24, repetitiveInterval0.getIntervalEndHour());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      boolean boolean0 = repetitiveInterval0.equals(repetitiveInterval0);
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getStartDate(), 0.01);
      assertTrue(boolean0);
      assertEquals(24, repetitiveInterval0.getIntervalEndHour());
      assertEquals(0, repetitiveInterval0.getIntervalStartHour());
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getEndDate(), 0.01);
      assertEquals(0, repetitiveInterval0.getNRepeats());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.NONE;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(1, 1, 1, 2, 2, repetitiveInterval_RepeatUnit0);
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit1 = RepetitiveInterval.RepeatUnit.MONTH;
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval(5.760000018992242E7, 2, 1, 2, 2, repetitiveInterval_RepeatUnit1);
      int int0 = repetitiveInterval1.compare(repetitiveInterval0);
      assertEquals(1, int0);
      assertEquals(0.0, repetitiveInterval1.getStartDate(), 0.01);
      assertEquals(2, repetitiveInterval1.getNRepeats());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.DAY;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(18, 0, 0, 18, 18, repetitiveInterval_RepeatUnit0);
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval(1127.8324915, 1127.8324915, 0, 18, 0, repetitiveInterval_RepeatUnit0);
      int int0 = repetitiveInterval0.compare(repetitiveInterval1);
      assertFalse(repetitiveInterval1.equals((Object)repetitiveInterval0));
      assertEquals(0, repetitiveInterval1.getNRepeats());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(6, 6, 6, 24);
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.DAY;
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval(24, 1057.671702, 6, 24, 3, repetitiveInterval_RepeatUnit0);
      int int0 = repetitiveInterval0.compare(repetitiveInterval1);
      assertEquals((-1), int0);
      assertEquals(3, repetitiveInterval1.getNRepeats());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.MONTH;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(15, 15, 15, 24, 24, repetitiveInterval_RepeatUnit0);
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval((-1308.2), (-674.353489), 15, 20);
      int int0 = repetitiveInterval0.compare(repetitiveInterval1);
      assertEquals(24, repetitiveInterval0.getNRepeats());
      assertEquals(1, int0);
      assertEquals(0, repetitiveInterval1.getNRepeats());
      assertEquals(0.0, repetitiveInterval1.getEndDate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.YEAR;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(14, 14, 14, 16, 16, repetitiveInterval_RepeatUnit0);
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval(14, 14, 14, 24);
      int int0 = repetitiveInterval0.compare(repetitiveInterval1);
      assertEquals(0, repetitiveInterval1.getNRepeats());
      assertEquals(0.0, repetitiveInterval1.getStartDate(), 0.01);
      assertEquals(16, repetitiveInterval0.getNRepeats());
      assertEquals((-1), int0);
      assertEquals(16, repetitiveInterval0.getIntervalEndHour());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.NONE;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(22.7708, 0, 0, 2, (-3158), repetitiveInterval_RepeatUnit0);
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval(2, 2, 2, 4, 2, repetitiveInterval_RepeatUnit0);
      int int0 = repetitiveInterval1.compare(repetitiveInterval0);
      assertEquals(1, int0);
      assertEquals(2, repetitiveInterval1.getNRepeats());
      assertEquals(0.0, repetitiveInterval1.getEndDate(), 0.01);
      assertEquals(4, repetitiveInterval1.getIntervalEndHour());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(0, 0, 0, 1);
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.YEAR;
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval(0, 0, 1, 2, 2, repetitiveInterval_RepeatUnit0);
      int int0 = repetitiveInterval0.compare(repetitiveInterval1);
      assertEquals(2, repetitiveInterval1.getNRepeats());
      assertEquals(0.0, repetitiveInterval1.getEndDate(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(1631.478788, 0, 0, 1);
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.DAY;
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval(2253.710452023585, 8.64E7, 0, 3, 3, repetitiveInterval_RepeatUnit0);
      int int0 = repetitiveInterval1.compare(repetitiveInterval0);
      assertEquals(8.64E7, repetitiveInterval1.getEndDate(), 0.01);
      assertEquals(3, repetitiveInterval1.getNRepeats());
      assertEquals(1, int0);
      assertEquals(0, repetitiveInterval0.getNRepeats());
      assertEquals(0.0, repetitiveInterval1.getStartDate(), 0.01);
      assertEquals(3, repetitiveInterval1.getIntervalEndHour());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval(0, 0, 0, 1, 1, (RepetitiveInterval.RepeatUnit) null);
      int int0 = repetitiveInterval1.compareTo(repetitiveInterval0);
      assertEquals(1, int0);
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getEndDate(), 0.01);
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getStartDate(), 0.01);
      assertEquals(24, repetitiveInterval0.getIntervalEndHour());
      assertEquals(1, repetitiveInterval1.getNRepeats());
      assertEquals(0, repetitiveInterval0.getIntervalStartHour());
      assertEquals(0.0, repetitiveInterval1.getStartDate(), 0.01);
      assertEquals(1, repetitiveInterval1.getIntervalEndHour());
      assertEquals(0, repetitiveInterval0.getNRepeats());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.NONE;
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval(22.7708, 0, 0, 2, (-3158), repetitiveInterval_RepeatUnit0);
      int int0 = repetitiveInterval0.CompareTo(repetitiveInterval1);
      assertEquals((-3158), repetitiveInterval1.getNRepeats());
      assertEquals(0.0, repetitiveInterval1.getStartDate(), 0.01);
      assertEquals(2, repetitiveInterval1.getIntervalEndHour());
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getEndDate(), 0.01);
      assertEquals(24, repetitiveInterval0.getIntervalEndHour());
      assertEquals(0, repetitiveInterval0.getIntervalStartHour());
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getStartDate(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.NONE;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(1, 1, 1, 2, 2, repetitiveInterval_RepeatUnit0);
      RepetitiveInterval.Result repetitiveInterval_Result0 = repetitiveInterval0.getInterval(5.760000018992242E7);
      assertFalse(repetitiveInterval_Result0.isPositive);
      assertEquals(0.0, repetitiveInterval0.getStartDate(), 0.01);
      assertEquals(2, repetitiveInterval0.getIntervalEndHour());
      assertEquals(2, repetitiveInterval0.getNRepeats());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      RepetitiveInterval.Result repetitiveInterval_Result0 = repetitiveInterval0.getInterval(0);
      RepetitiveInterval.Result repetitiveInterval_Result1 = new RepetitiveInterval.Result(false, repetitiveInterval_Result0.interval);
      assertEquals(0, repetitiveInterval0.getIntervalStartHour());
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getStartDate(), 0.01);
      assertEquals(24, repetitiveInterval0.getIntervalEndHour());
      assertEquals(0, repetitiveInterval0.getNRepeats());
      assertFalse(repetitiveInterval_Result0.isPositive);
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getEndDate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = null;
      try {
        repetitiveInterval0 = new RepetitiveInterval((-1.7976931348623157E308), 0, 0, 11);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ReptitiveInterval: With RepeatUnit.NONE, startDate must equal endDate
         //
         verifyException("net.named_data.jndn.encrypt.RepetitiveInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = null;
      try {
        repetitiveInterval0 = new RepetitiveInterval(8, 8, 8, 38);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ReptitiveInterval: intervalEndHour must be from 1 to 24
         //
         verifyException("net.named_data.jndn.encrypt.RepetitiveInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = null;
      try {
        repetitiveInterval0 = new RepetitiveInterval((-1.7976931348623157E308), 0, (-81), 24);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ReptitiveInterval: intervalStartHour must be non-negative
         //
         verifyException("net.named_data.jndn.encrypt.RepetitiveInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.DAY;
      RepetitiveInterval repetitiveInterval0 = null;
      try {
        repetitiveInterval0 = new RepetitiveInterval(4872.45306196, (-1.7976931348623157E308), (-2542), 1, 379, repetitiveInterval_RepeatUnit0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ReptitiveInterval: startDate must be earlier than or same as endDate
         //
         verifyException("net.named_data.jndn.encrypt.RepetitiveInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = null;
      try {
        repetitiveInterval0 = new RepetitiveInterval(13, (-1.0), 3, 1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ReptitiveInterval: startHour must be less than endHour
         //
         verifyException("net.named_data.jndn.encrypt.RepetitiveInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.YEAR;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(17, 17, 15, 17, 15, repetitiveInterval_RepeatUnit0);
      int int0 = repetitiveInterval0.compare(repetitiveInterval0);
      assertEquals(0, int0);
      assertEquals(15, repetitiveInterval0.getNRepeats());
      assertEquals(0.0, repetitiveInterval0.getEndDate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.NONE;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(1, 1, 1, 2, 2, repetitiveInterval_RepeatUnit0);
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit1 = RepetitiveInterval.RepeatUnit.MONTH;
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval(5.760000018992242E7, 2, 1, 2, 2, repetitiveInterval_RepeatUnit1);
      int int0 = repetitiveInterval0.compareTo(repetitiveInterval1);
      assertEquals((-1), int0);
      assertEquals(2, repetitiveInterval1.getNRepeats());
      assertEquals(0.0, repetitiveInterval0.getStartDate(), 0.01);
      assertEquals(2, repetitiveInterval1.getIntervalEndHour());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(0, 1, 0, 1);
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.DAY;
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval(1, 5726.70159472128, 0, 1, 0, repetitiveInterval_RepeatUnit0);
      int int0 = repetitiveInterval0.compare(repetitiveInterval1);
      assertEquals((-1), int0);
      assertEquals(0.0, repetitiveInterval1.getEndDate(), 0.01);
      assertEquals(0, repetitiveInterval1.getNRepeats());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      int int0 = repetitiveInterval0.getNRepeats();
      assertEquals(0, repetitiveInterval0.getIntervalStartHour());
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getStartDate(), 0.01);
      assertEquals(24, repetitiveInterval0.getIntervalEndHour());
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getEndDate(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval((-258.08), (-258.08), 0, 24);
      double double0 = repetitiveInterval0.getEndDate();
      assertEquals(0, repetitiveInterval0.getNRepeats());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, repetitiveInterval0.getIntervalStartHour());
      assertEquals(24, repetitiveInterval0.getIntervalEndHour());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval((-258.08), (-258.08), 0, 23);
      double double0 = repetitiveInterval0.getStartDate();
      assertEquals(23, repetitiveInterval0.getIntervalEndHour());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, repetitiveInterval0.getIntervalStartHour());
      assertEquals(0, repetitiveInterval0.getNRepeats());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      int int0 = repetitiveInterval0.getIntervalEndHour();
      assertEquals(0, repetitiveInterval0.getNRepeats());
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getEndDate(), 0.01);
      assertEquals(24, int0);
      assertEquals(0, repetitiveInterval0.getIntervalStartHour());
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getStartDate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.YEAR;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(14, 14, 14, 16, 16, repetitiveInterval_RepeatUnit0);
      RepetitiveInterval repetitiveInterval1 = new RepetitiveInterval(repetitiveInterval0);
      assertEquals(16, repetitiveInterval1.getIntervalEndHour());
      assertEquals(16, repetitiveInterval0.getNRepeats());
      assertEquals(14, repetitiveInterval0.getIntervalStartHour());
      assertTrue(repetitiveInterval1.equals((Object)repetitiveInterval0));
      assertEquals(0.0, repetitiveInterval1.getEndDate(), 0.01);
      assertEquals(0.0, repetitiveInterval1.getStartDate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      repetitiveInterval0.hashCode();
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getEndDate(), 0.01);
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getStartDate(), 0.01);
      assertEquals(24, repetitiveInterval0.getIntervalEndHour());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      int int0 = repetitiveInterval0.CompareTo(repetitiveInterval0);
      assertEquals(0, repetitiveInterval0.getNRepeats());
      assertEquals(0, int0);
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getEndDate(), 0.01);
      assertEquals(24, repetitiveInterval0.getIntervalEndHour());
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getStartDate(), 0.01);
      assertEquals(0, repetitiveInterval0.getIntervalStartHour());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval();
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = repetitiveInterval0.getRepeatUnit();
      int int0 = RepetitiveInterval.getRepeatUnitNumericType(repetitiveInterval_RepeatUnit0);
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getStartDate(), 0.01);
      assertEquals(0, repetitiveInterval0.getIntervalStartHour());
      assertEquals(24, repetitiveInterval0.getIntervalEndHour());
      assertEquals((-1.7976931348623157E308), repetitiveInterval0.getEndDate(), 0.01);
      assertEquals(0, repetitiveInterval0.getNRepeats());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval((-258.08), (-258.08), 10, 24);
      int int0 = repetitiveInterval0.getIntervalStartHour();
      assertEquals(24, repetitiveInterval0.getIntervalEndHour());
      assertEquals(0.0, repetitiveInterval0.getEndDate(), 0.01);
      assertEquals(0, repetitiveInterval0.getNRepeats());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      RepetitiveInterval.RepeatUnit repetitiveInterval_RepeatUnit0 = RepetitiveInterval.RepeatUnit.NONE;
      RepetitiveInterval repetitiveInterval0 = new RepetitiveInterval(1, 1, 1, 2, 2, repetitiveInterval_RepeatUnit0);
      int int0 = repetitiveInterval0.compareTo(repetitiveInterval0);
      assertEquals(0.0, repetitiveInterval0.getStartDate(), 0.01);
      assertEquals(0, int0);
      assertEquals(1, repetitiveInterval0.getIntervalStartHour());
      assertEquals(2, repetitiveInterval0.getNRepeats());
  }
}
