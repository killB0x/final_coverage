/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:56:04 GMT 2022
 */

package net.named_data.jndn.encrypt.algo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.security.InvalidKeyException;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import net.named_data.jndn.encrypt.DecryptKey;
import net.named_data.jndn.encrypt.EncryptKey;
import net.named_data.jndn.encrypt.algo.AesAlgorithm;
import net.named_data.jndn.encrypt.algo.EncryptAlgorithmType;
import net.named_data.jndn.encrypt.algo.EncryptParams;
import net.named_data.jndn.security.AesKeyParams;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AesAlgorithm_ESTest extends AesAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(16);
      Blob blob0 = new Blob(byteBuffer0, false);
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.AesCbc;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0);
      encryptParams0.setInitialVector(blob0);
      Blob blob1 = new Blob(blob0);
      Blob blob2 = AesAlgorithm.encrypt(blob0, blob1, encryptParams0);
      assertFalse(blob2.equals((Object)blob1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(4886);
      Blob blob0 = new Blob(byteBuffer0, true);
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.AesCbc;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0, 4886);
      // Undeclared exception!
      try { 
        AesAlgorithm.encrypt(blob0, blob0, encryptParams0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // incorrect initial vector size
         //
         verifyException("net.named_data.jndn.encrypt.algo.AesAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.AesEcb;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(16);
      Blob blob0 = new Blob("Qel");
      Blob blob1 = new Blob(byteBuffer0, true);
      Blob blob2 = AesAlgorithm.encrypt(blob1, blob0, encryptParams0);
      assertFalse(blob2.equals((Object)blob0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Blob blob0 = new Blob("Name.Component.fromParametersSha256Digest: The digest length must be 32 bytes");
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.AesCbc;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0);
      encryptParams0.setInitialVector(blob0);
      // Undeclared exception!
      try { 
        AesAlgorithm.decrypt(blob0, blob0, encryptParams0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // incorrect initial vector size
         //
         verifyException("net.named_data.jndn.encrypt.algo.AesAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AesKeyParams aesKeyParams0 = new AesKeyParams();
      DecryptKey decryptKey0 = AesAlgorithm.generateKey(aesKeyParams0);
      assertNotNull(decryptKey0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AesKeyParams aesKeyParams0 = new AesKeyParams((-1225));
      // Undeclared exception!
      try { 
        AesAlgorithm.generateKey(aesKeyParams0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-153 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Blob blob0 = new Blob("Xb_*YB_Xu8WwO*>zo!n");
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.NONE;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0, 16);
      EncryptAlgorithmType encryptAlgorithmType1 = EncryptAlgorithmType.AesCbc;
      encryptParams0.setAlgorithmType(encryptAlgorithmType1);
      try { 
        AesAlgorithm.encrypt(blob0, blob0, encryptParams0);
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(16);
      Blob blob0 = new Blob(byteBuffer0, false);
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.AesEcb;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0);
      // Undeclared exception!
      try { 
        AesAlgorithm.encrypt(blob0, blob0, encryptParams0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Blob blob0 = new Blob();
      // Undeclared exception!
      try { 
        AesAlgorithm.encrypt(blob0, blob0, (EncryptParams) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.algo.AesAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.AesCbc;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0, 16);
      Blob blob0 = new Blob();
      // Undeclared exception!
      try { 
        AesAlgorithm.encrypt(blob0, blob0, encryptParams0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.AesEcb;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0);
      Blob blob0 = new Blob("PARAMETERS_SHA256_DIGEST");
      try { 
        AesAlgorithm.decrypt(blob0, blob0, encryptParams0);
        fail("Expecting exception: IllegalBlockSizeException");
      
      } catch(IllegalBlockSizeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Blob blob0 = new Blob("AZSia&n=#oW*M>G");
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.AesEcb;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0);
      try { 
        AesAlgorithm.decrypt(blob0, blob0, encryptParams0);
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.AesEcb;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(16);
      Blob blob0 = new Blob(byteBuffer0, false);
      // Undeclared exception!
      try { 
        AesAlgorithm.decrypt(blob0, blob0, encryptParams0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Blob blob0 = new Blob();
      // Undeclared exception!
      try { 
        AesAlgorithm.decrypt(blob0, blob0, (EncryptParams) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.algo.AesAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.AesCbc;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0, 16);
      Blob blob0 = new Blob();
      // Undeclared exception!
      try { 
        AesAlgorithm.decrypt(blob0, blob0, encryptParams0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(16);
      Blob blob0 = new Blob(byteBuffer0, false);
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.AesCbc;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0);
      EncryptParams encryptParams1 = encryptParams0.setInitialVector(blob0);
      Blob blob1 = AesAlgorithm.encrypt(blob0, blob0, encryptParams1);
      Blob blob2 = AesAlgorithm.decrypt(blob0, blob1, encryptParams0);
      assertTrue(blob2.equals((Object)blob0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Blob blob0 = new Blob();
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.NONE;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0);
      // Undeclared exception!
      try { 
        AesAlgorithm.encrypt(blob0, blob0, encryptParams0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // unsupported encryption mode
         //
         verifyException("net.named_data.jndn.encrypt.algo.AesAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(16);
      Blob blob0 = new Blob(byteBuffer0, false);
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.AesEcb;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0);
      Blob blob1 = AesAlgorithm.encrypt(blob0, blob0, encryptParams0);
      Blob blob2 = AesAlgorithm.decrypt(blob0, blob1, encryptParams0);
      assertTrue(blob2.equals((Object)blob0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(16);
      Blob blob0 = new Blob(byteBuffer0, false);
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.AesCbc;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0);
      // Undeclared exception!
      try { 
        AesAlgorithm.encrypt(blob0, blob0, encryptParams0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // incorrect initial vector size
         //
         verifyException("net.named_data.jndn.encrypt.algo.AesAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(16);
      Blob blob0 = new Blob(byteBuffer0, false);
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.AesCbc;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0);
      encryptParams0.setInitialVector(blob0);
      try { 
        AesAlgorithm.decrypt(blob0, blob0, encryptParams0);
        fail("Expecting exception: BadPaddingException");
      
      } catch(BadPaddingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Blob blob0 = new Blob();
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.RsaPkcs;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0);
      // Undeclared exception!
      try { 
        AesAlgorithm.decrypt(blob0, blob0, encryptParams0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // unsupported encryption mode
         //
         verifyException("net.named_data.jndn.encrypt.algo.AesAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(16);
      Blob blob0 = new Blob(byteBuffer0, false);
      EncryptAlgorithmType encryptAlgorithmType0 = EncryptAlgorithmType.AesCbc;
      EncryptParams encryptParams0 = new EncryptParams(encryptAlgorithmType0);
      // Undeclared exception!
      try { 
        AesAlgorithm.decrypt(blob0, blob0, encryptParams0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // incorrect initial vector size
         //
         verifyException("net.named_data.jndn.encrypt.algo.AesAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AesAlgorithm aesAlgorithm0 = new AesAlgorithm();
      assertEquals(16, AesAlgorithm.BLOCK_SIZE);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        AesAlgorithm.generateKey((AesKeyParams) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encrypt.algo.AesAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(16);
      Blob blob0 = new Blob(byteBuffer0, false);
      EncryptKey encryptKey0 = AesAlgorithm.deriveEncryptKey(blob0);
      assertNotNull(encryptKey0);
  }
}
