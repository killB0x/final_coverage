/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:59:46 GMT 2022
 */

package net.named_data.jndn;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.KeyLocator;
import net.named_data.jndn.KeyLocatorType;
import net.named_data.jndn.Sha256WithRsaSignature;
import net.named_data.jndn.security.ValidityPeriod;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Sha256WithRsaSignature_ESTest extends Sha256WithRsaSignature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      ValidityPeriod validityPeriod0 = new ValidityPeriod();
      ValidityPeriod validityPeriod1 = validityPeriod0.setPeriod((-1593.370181381944), (-1593.370181381944));
      sha256WithRsaSignature0.setValidityPeriod(validityPeriod0);
      ValidityPeriod validityPeriod2 = sha256WithRsaSignature0.getValidityPeriod();
      assertNotSame(validityPeriod2, validityPeriod1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      ValidityPeriod validityPeriod0 = sha256WithRsaSignature0.getValidityPeriod();
      validityPeriod0.setPeriod(0.0, 1.0);
      ValidityPeriod validityPeriod1 = sha256WithRsaSignature0.getValidityPeriod();
      assertEquals(0.0, validityPeriod1.getNotAfter(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      ValidityPeriod validityPeriod0 = sha256WithRsaSignature0.getValidityPeriod();
      validityPeriod0.setPeriod(1823.0154847385327, 1823.0154847385327);
      ValidityPeriod validityPeriod1 = sha256WithRsaSignature0.getValidityPeriod();
      assertEquals(1L, validityPeriod1.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      int[] intArray0 = new int[2];
      Blob blob0 = new Blob(intArray0);
      sha256WithRsaSignature0.setSignature(blob0);
      Blob blob1 = sha256WithRsaSignature0.getSignature();
      assertFalse(blob1.isNull());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = null;
      try {
        sha256WithRsaSignature0 = new Sha256WithRsaSignature((Sha256WithRsaSignature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Sha256WithRsaSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      Sha256WithRsaSignature sha256WithRsaSignature1 = new Sha256WithRsaSignature(sha256WithRsaSignature0);
      assertFalse(sha256WithRsaSignature1.equals((Object)sha256WithRsaSignature0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      KeyLocator keyLocator0 = sha256WithRsaSignature0.getKeyLocator();
      keyLocator0.clear();
      long long0 = sha256WithRsaSignature0.getChangeCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      long long0 = sha256WithRsaSignature0.getChangeCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      ValidityPeriod validityPeriod0 = sha256WithRsaSignature0.getValidityPeriod();
      validityPeriod0.setPeriod(15.34299, (-516.466565912957));
      long long0 = sha256WithRsaSignature0.getChangeCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      sha256WithRsaSignature0.setValidityPeriod((ValidityPeriod) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      sha256WithRsaSignature0.setKeyLocator((KeyLocator) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      KeyLocator keyLocator0 = sha256WithRsaSignature0.getKeyLocator();
      sha256WithRsaSignature0.setKeyLocator(keyLocator0);
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      sha256WithRsaSignature0.setSignature((Blob) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      Blob blob0 = sha256WithRsaSignature0.getSignature();
      assertTrue(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      Object object0 = sha256WithRsaSignature0.clone();
      assertNotSame(object0, sha256WithRsaSignature0);
  }
}
