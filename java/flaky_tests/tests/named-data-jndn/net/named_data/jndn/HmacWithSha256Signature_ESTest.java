/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:31:43 GMT 2022
 */

package net.named_data.jndn;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.HmacWithSha256Signature;
import net.named_data.jndn.KeyLocator;
import net.named_data.jndn.KeyLocatorType;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HmacWithSha256Signature_ESTest extends HmacWithSha256Signature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HmacWithSha256Signature hmacWithSha256Signature0 = null;
      try {
        hmacWithSha256Signature0 = new HmacWithSha256Signature((HmacWithSha256Signature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.HmacWithSha256Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      HmacWithSha256Signature hmacWithSha256Signature1 = new HmacWithSha256Signature(hmacWithSha256Signature0);
      assertFalse(hmacWithSha256Signature1.equals((Object)hmacWithSha256Signature0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      KeyLocator keyLocator0 = hmacWithSha256Signature0.getKeyLocator();
      KeyLocatorType keyLocatorType0 = KeyLocatorType.KEY_LOCATOR_DIGEST;
      keyLocator0.setType(keyLocatorType0);
      long long0 = hmacWithSha256Signature0.getChangeCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      long long0 = hmacWithSha256Signature0.getChangeCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      hmacWithSha256Signature0.setKeyLocator((KeyLocator) null);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      KeyLocator keyLocator0 = hmacWithSha256Signature0.getKeyLocator();
      hmacWithSha256Signature0.setKeyLocator(keyLocator0);
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      hmacWithSha256Signature0.setSignature((Blob) null);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      byte[] byteArray0 = new byte[8];
      Blob blob0 = new Blob(byteArray0);
      hmacWithSha256Signature0.setSignature(blob0);
      Blob blob1 = hmacWithSha256Signature0.getSignature();
      assertFalse(blob1.isNull());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      Blob blob0 = hmacWithSha256Signature0.getSignature();
      assertTrue(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      Object object0 = hmacWithSha256Signature0.clone();
      assertNotSame(object0, hmacWithSha256Signature0);
  }
}
