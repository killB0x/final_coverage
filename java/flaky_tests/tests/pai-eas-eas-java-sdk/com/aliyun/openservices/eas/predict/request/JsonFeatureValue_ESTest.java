/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 08:23:13 GMT 2022
 */

package com.aliyun.openservices.eas.predict.request;

import org.junit.Test;
import static org.junit.Assert.*;
import com.aliyun.openservices.eas.predict.request.JsonFeatureValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonFeatureValue_ESTest extends JsonFeatureValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonFeatureValue jsonFeatureValue0 = new JsonFeatureValue((Object) null);
      jsonFeatureValue0.getDataValue();
      assertEquals(0, jsonFeatureValue0.getDataType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonFeatureValue jsonFeatureValue0 = new JsonFeatureValue((Object) ".T>0c[nZPl");
      assertEquals(50, jsonFeatureValue0.getDataType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonFeatureValue jsonFeatureValue0 = new JsonFeatureValue(0.0);
      Object object0 = jsonFeatureValue0.getDataValue();
      assertEquals(0.0, object0);
      
      JsonFeatureValue jsonFeatureValue1 = new JsonFeatureValue(object0);
      assertEquals(40, jsonFeatureValue0.getDataType());
      assertEquals(40, jsonFeatureValue1.getDataType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonFeatureValue jsonFeatureValue0 = new JsonFeatureValue(30);
      Object object0 = jsonFeatureValue0.getDataValue();
      assertEquals(30, object0);
      
      JsonFeatureValue jsonFeatureValue1 = new JsonFeatureValue(object0);
      assertEquals(10, jsonFeatureValue1.getDataType());
      assertEquals(10, jsonFeatureValue0.getDataType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(".T>0c[nZPl");
      JsonFeatureValue jsonFeatureValue0 = new JsonFeatureValue((Object) boolean0);
      assertEquals(1, jsonFeatureValue0.getDataType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonFeatureValue jsonFeatureValue0 = new JsonFeatureValue(2889.9302F);
      Object object0 = jsonFeatureValue0.getDataValue();
      assertEquals(2889.9302F, object0);
      
      JsonFeatureValue jsonFeatureValue1 = new JsonFeatureValue(object0);
      assertEquals(30, jsonFeatureValue0.getDataType());
      assertEquals(30, jsonFeatureValue1.getDataType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonFeatureValue jsonFeatureValue0 = new JsonFeatureValue((Object) null);
      int int0 = jsonFeatureValue0.getDataType();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonFeatureValue jsonFeatureValue0 = new JsonFeatureValue((double) 0);
      int int0 = jsonFeatureValue0.getDataType();
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      JsonFeatureValue jsonFeatureValue0 = new JsonFeatureValue(object0);
      jsonFeatureValue0.getDataValue();
      assertEquals(0, jsonFeatureValue0.getDataType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonFeatureValue jsonFeatureValue0 = new JsonFeatureValue("");
      assertEquals(50, jsonFeatureValue0.getDataType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonFeatureValue jsonFeatureValue0 = new JsonFeatureValue((long) 0);
      Object object0 = jsonFeatureValue0.getDataValue();
      JsonFeatureValue jsonFeatureValue1 = new JsonFeatureValue(object0);
      assertEquals(20, jsonFeatureValue1.getDataType());
      assertEquals(20, jsonFeatureValue0.getDataType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonFeatureValue jsonFeatureValue0 = new JsonFeatureValue(true);
      assertEquals(1, jsonFeatureValue0.getDataType());
  }
}
