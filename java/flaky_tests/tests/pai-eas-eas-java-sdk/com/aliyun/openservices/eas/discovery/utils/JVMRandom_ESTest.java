/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 08:22:01 GMT 2022
 */

package com.aliyun.openservices.eas.discovery.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aliyun.openservices.eas.discovery.utils.JVMRandom;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JVMRandom_ESTest extends JVMRandom_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(2145506222);
      long long0 = JVMRandom.nextLong(3L);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JVMRandom.nextLong(2L);
      long long0 = JVMRandom.nextLong(2L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        JVMRandom.nextLong(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Upper bound for nextInt must be positive
         //
         verifyException("com.aliyun.openservices.eas.discovery.utils.JVMRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      JVMRandom jVMRandom0 = new JVMRandom();
      jVMRandom0.nextFloat();
      int int0 = jVMRandom0.nextInt((-2146075461));
      assertEquals((-1408187), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = JVMRandom.nextLong(56L);
      assertEquals(0L, long0);
      
      JVMRandom jVMRandom0 = new JVMRandom();
      int int0 = jVMRandom0.nextInt();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom((-2147483647));
      JVMRandom jVMRandom0 = new JVMRandom();
      long long0 = jVMRandom0.nextLong();
      assertEquals(2147483647L, long0);
      
      int int0 = jVMRandom0.nextInt();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      JVMRandom jVMRandom0 = new JVMRandom();
      float float0 = jVMRandom0.nextFloat();
      float float1 = jVMRandom0.nextFloat();
      assertNotEquals(float1, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = JVMRandom.nextLong(56L);
      assertEquals(0L, long0);
      
      JVMRandom jVMRandom0 = new JVMRandom();
      double double0 = jVMRandom0.nextDouble();
      assertEquals(0.1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      JVMRandom jVMRandom0 = new JVMRandom();
      jVMRandom0.nextFloat();
      double double0 = jVMRandom0.nextDouble();
      assertEquals((-0.8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JVMRandom jVMRandom0 = new JVMRandom();
      // Undeclared exception!
      try { 
        jVMRandom0.nextInt(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JVMRandom jVMRandom0 = new JVMRandom();
      int int0 = jVMRandom0.nextInt((-2146075461));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JVMRandom jVMRandom0 = new JVMRandom();
      // Undeclared exception!
      try { 
        jVMRandom0.setSeed(32L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aliyun.openservices.eas.discovery.utils.JVMRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = JVMRandom.nextLong(4L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = JVMRandom.nextLong(1L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        JVMRandom.nextLong((-2L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Upper bound for nextInt must be positive
         //
         verifyException("com.aliyun.openservices.eas.discovery.utils.JVMRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JVMRandom jVMRandom0 = new JVMRandom();
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        jVMRandom0.nextBytes(byteArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aliyun.openservices.eas.discovery.utils.JVMRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JVMRandom jVMRandom0 = new JVMRandom();
      boolean boolean0 = jVMRandom0.nextBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JVMRandom jVMRandom0 = new JVMRandom();
      jVMRandom0.nextFloat();
      int int0 = jVMRandom0.nextInt((int) (byte)61);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JVMRandom jVMRandom0 = new JVMRandom();
      int int0 = jVMRandom0.nextInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JVMRandom jVMRandom0 = new JVMRandom();
      long long0 = jVMRandom0.nextLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JVMRandom jVMRandom0 = new JVMRandom();
      // Undeclared exception!
      try { 
        jVMRandom0.nextGaussian();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aliyun.openservices.eas.discovery.utils.JVMRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JVMRandom jVMRandom0 = new JVMRandom();
      double double0 = jVMRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
  }
}
