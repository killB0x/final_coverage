/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 17:01:53 GMT 2022
 */

package com.github.relayjdbc.protocol.messages;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.relayjdbc.command.Command;
import com.github.relayjdbc.command.ConnectionGetMetaDataCommand;
import com.github.relayjdbc.command.NextRowPacketCommand;
import com.github.relayjdbc.command.StatementSetFetchSizeCommand;
import com.github.relayjdbc.command.StatementUpdateCommand;
import com.github.relayjdbc.protocol.messages.ExecuteCommandRequest;
import com.github.relayjdbc.serial.CallingContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExecuteCommandRequest_ESTest extends ExecuteCommandRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Long long0 = new Long((-3182L));
      Long long1 = new Long(0L);
      NextRowPacketCommand nextRowPacketCommand0 = NextRowPacketCommand.INSTANCE;
      CallingContext callingContext0 = new CallingContext();
      ExecuteCommandRequest executeCommandRequest0 = new ExecuteCommandRequest(long0, long1, nextRowPacketCommand0, callingContext0);
      Long long2 = executeCommandRequest0.getUid();
      assertEquals(0L, (long)long2);
      assertEquals((-3182L), (long)executeCommandRequest0.getConnuid());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Long long0 = new Long(1108L);
      ExecuteCommandRequest executeCommandRequest0 = new ExecuteCommandRequest((Long) null, long0, (Command) null, (CallingContext) null);
      Long long1 = executeCommandRequest0.getUid();
      assertEquals(1108L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Long long0 = new Long(4653L);
      StatementUpdateCommand statementUpdateCommand0 = new StatementUpdateCommand((String) null);
      CallingContext callingContext0 = new CallingContext();
      Long long1 = new Long((-545L));
      ExecuteCommandRequest executeCommandRequest0 = new ExecuteCommandRequest(long0, long1, statementUpdateCommand0, callingContext0);
      Long long2 = executeCommandRequest0.getUid();
      assertEquals((-545L), (long)long2);
      assertEquals(4653L, (long)executeCommandRequest0.getConnuid());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Long long0 = Long.getLong("NNqsAmNU");
      ExecuteCommandRequest executeCommandRequest0 = new ExecuteCommandRequest((Long) null, long0, (Command) null, (CallingContext) null);
      CallingContext callingContext0 = executeCommandRequest0.getCtx();
      assertNull(callingContext0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Long long0 = new Long(1547L);
      StatementSetFetchSizeCommand statementSetFetchSizeCommand0 = new StatementSetFetchSizeCommand();
      CallingContext callingContext0 = new CallingContext();
      ExecuteCommandRequest executeCommandRequest0 = new ExecuteCommandRequest(long0, long0, statementSetFetchSizeCommand0, callingContext0);
      Long long1 = executeCommandRequest0.getConnuid();
      assertEquals(1547L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Long long0 = Long.getLong("NNqsAmNU");
      ExecuteCommandRequest executeCommandRequest0 = new ExecuteCommandRequest((Long) null, long0, (Command) null, (CallingContext) null);
      Long long1 = executeCommandRequest0.getConnuid();
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Long long0 = new Long((-836L));
      NextRowPacketCommand nextRowPacketCommand0 = NextRowPacketCommand.INSTANCE;
      CallingContext callingContext0 = new CallingContext();
      ExecuteCommandRequest executeCommandRequest0 = new ExecuteCommandRequest(long0, long0, nextRowPacketCommand0, callingContext0);
      Long long1 = executeCommandRequest0.getConnuid();
      assertEquals((-836L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Long long0 = new Long(0L);
      CallingContext callingContext0 = new CallingContext();
      ExecuteCommandRequest executeCommandRequest0 = new ExecuteCommandRequest(long0, long0, (Command) null, callingContext0);
      Command command0 = executeCommandRequest0.getCmd();
      assertNull(command0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Long long0 = new Long(0L);
      ExecuteCommandRequest executeCommandRequest0 = new ExecuteCommandRequest(long0, long0, (Command) null, (CallingContext) null);
      Long long1 = executeCommandRequest0.getConnuid();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Long long0 = new Long((-3182L));
      NextRowPacketCommand nextRowPacketCommand0 = NextRowPacketCommand.INSTANCE;
      CallingContext callingContext0 = new CallingContext();
      ExecuteCommandRequest executeCommandRequest0 = new ExecuteCommandRequest(long0, long0, nextRowPacketCommand0, callingContext0);
      CallingContext callingContext1 = executeCommandRequest0.getCtx();
      assertSame(callingContext0, callingContext1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Long long0 = new Long(0L);
      ConnectionGetMetaDataCommand connectionGetMetaDataCommand0 = ConnectionGetMetaDataCommand.INSTANCE;
      ExecuteCommandRequest executeCommandRequest0 = new ExecuteCommandRequest(long0, (Long) null, connectionGetMetaDataCommand0, (CallingContext) null);
      Long long1 = executeCommandRequest0.getUid();
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Long long0 = new Long(4653L);
      StatementUpdateCommand statementUpdateCommand0 = new StatementUpdateCommand((String) null);
      CallingContext callingContext0 = new CallingContext();
      ExecuteCommandRequest executeCommandRequest0 = new ExecuteCommandRequest(long0, long0, statementUpdateCommand0, callingContext0);
      Command command0 = executeCommandRequest0.getCmd();
      assertSame(statementUpdateCommand0, command0);
  }
}
