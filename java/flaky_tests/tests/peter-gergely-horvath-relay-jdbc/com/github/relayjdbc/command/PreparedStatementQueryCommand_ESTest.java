/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 16:35:03 GMT 2022
 */

package com.github.relayjdbc.command;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.relayjdbc.command.ConnectionContext;
import com.github.relayjdbc.command.PreparedStatementQueryCommand;
import com.github.relayjdbc.parameters.BigDecimalParameter;
import com.github.relayjdbc.parameters.PreparedStatementParameter;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PreparedStatementQueryCommand_ESTest extends PreparedStatementQueryCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PreparedStatementQueryCommand preparedStatementQueryCommand0 = new PreparedStatementQueryCommand();
      MockFile mockFile0 = new MockFile("bjKZI(,6}G");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      preparedStatementQueryCommand0.writeExternal(objectOutputStream0);
      assertEquals(0, preparedStatementQueryCommand0.getResultSetType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PreparedStatementQueryCommand preparedStatementQueryCommand0 = new PreparedStatementQueryCommand();
      int int0 = preparedStatementQueryCommand0.getResultSetType();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PreparedStatementParameter[] preparedStatementParameterArray0 = new PreparedStatementParameter[3];
      PreparedStatementQueryCommand preparedStatementQueryCommand0 = new PreparedStatementQueryCommand(preparedStatementParameterArray0, (-3368));
      int int0 = preparedStatementQueryCommand0.getResultSetType();
      assertEquals((-3368), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PreparedStatementQueryCommand preparedStatementQueryCommand0 = new PreparedStatementQueryCommand();
      PreparedStatementParameter[] preparedStatementParameterArray0 = preparedStatementQueryCommand0.getParams();
      assertNull(preparedStatementParameterArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PreparedStatementParameter[] preparedStatementParameterArray0 = new PreparedStatementParameter[0];
      PreparedStatementQueryCommand preparedStatementQueryCommand0 = new PreparedStatementQueryCommand(preparedStatementParameterArray0, (-136));
      PreparedStatementParameter[] preparedStatementParameterArray1 = preparedStatementQueryCommand0.getParams();
      assertNotNull(preparedStatementParameterArray1);
      assertEquals((-136), preparedStatementQueryCommand0.getResultSetType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PreparedStatementParameter[] preparedStatementParameterArray0 = new PreparedStatementParameter[6];
      BigDecimalParameter bigDecimalParameter0 = new BigDecimalParameter();
      preparedStatementParameterArray0[2] = (PreparedStatementParameter) bigDecimalParameter0;
      PreparedStatementQueryCommand preparedStatementQueryCommand0 = new PreparedStatementQueryCommand(preparedStatementParameterArray0, 3320);
      // Undeclared exception!
      try { 
        preparedStatementQueryCommand0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.parameters.BigDecimalParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PreparedStatementParameter[] preparedStatementParameterArray0 = new PreparedStatementParameter[0];
      PreparedStatementQueryCommand preparedStatementQueryCommand0 = new PreparedStatementQueryCommand(preparedStatementParameterArray0, 0);
      Object object0 = new Object();
      ConnectionContext connectionContext0 = mock(ConnectionContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        preparedStatementQueryCommand0.execute(object0, connectionContext0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.sql.PreparedStatement (java.lang.Object is in module java.base of loader 'bootstrap'; java.sql.PreparedStatement is in module java.sql of loader 'platform')
         //
         verifyException("com.github.relayjdbc.command.PreparedStatementQueryCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PreparedStatementParameter[] preparedStatementParameterArray0 = new PreparedStatementParameter[0];
      PreparedStatementQueryCommand preparedStatementQueryCommand0 = new PreparedStatementQueryCommand(preparedStatementParameterArray0, 0);
      String string0 = preparedStatementQueryCommand0.toString();
      assertEquals("PreparedStatementQueryCommand", string0);
      assertEquals(0, preparedStatementQueryCommand0.getResultSetType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PreparedStatementParameter[] preparedStatementParameterArray0 = new PreparedStatementParameter[2];
      PreparedStatementQueryCommand preparedStatementQueryCommand0 = new PreparedStatementQueryCommand(preparedStatementParameterArray0, 1078);
      String string0 = preparedStatementQueryCommand0.toString();
      assertEquals(1078, preparedStatementQueryCommand0.getResultSetType());
      assertEquals("PreparedStatementQueryCommand with parameters\n\t[1] = null\n\t[2] = null", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PreparedStatementQueryCommand preparedStatementQueryCommand0 = new PreparedStatementQueryCommand();
      String string0 = preparedStatementQueryCommand0.toString();
      assertEquals("PreparedStatementQueryCommand", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PreparedStatementParameter[] preparedStatementParameterArray0 = new PreparedStatementParameter[2];
      PreparedStatementQueryCommand preparedStatementQueryCommand0 = new PreparedStatementQueryCommand(preparedStatementParameterArray0, 526);
      // Undeclared exception!
      try { 
        preparedStatementQueryCommand0.execute((Object) null, (ConnectionContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.command.PreparedStatementQueryCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PreparedStatementParameter[] preparedStatementParameterArray0 = new PreparedStatementParameter[0];
      PreparedStatementQueryCommand preparedStatementQueryCommand0 = new PreparedStatementQueryCommand(preparedStatementParameterArray0, 2009);
      // Undeclared exception!
      try { 
        preparedStatementQueryCommand0.execute((Object) null, (ConnectionContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.command.PreparedStatementQueryCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PreparedStatementQueryCommand preparedStatementQueryCommand0 = new PreparedStatementQueryCommand();
      // Undeclared exception!
      try { 
        preparedStatementQueryCommand0.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.command.PreparedStatementQueryCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PreparedStatementParameter[] preparedStatementParameterArray0 = new PreparedStatementParameter[5];
      PreparedStatementQueryCommand preparedStatementQueryCommand0 = new PreparedStatementQueryCommand(preparedStatementParameterArray0, (byte)27);
      PreparedStatementParameter[] preparedStatementParameterArray1 = preparedStatementQueryCommand0.getParams();
      assertEquals(27, preparedStatementQueryCommand0.getResultSetType());
      assertNotNull(preparedStatementParameterArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PreparedStatementQueryCommand preparedStatementQueryCommand0 = new PreparedStatementQueryCommand((PreparedStatementParameter[]) null, 1);
      int int0 = preparedStatementQueryCommand0.getResultSetType();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PreparedStatementQueryCommand preparedStatementQueryCommand0 = new PreparedStatementQueryCommand();
      // Undeclared exception!
      try { 
        preparedStatementQueryCommand0.writeExternal((ObjectOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.command.PreparedStatementQueryCommand", e);
      }
  }
}
