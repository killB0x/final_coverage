/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 16:01:03 GMT 2022
 */

package com.github.relayjdbc.serial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.relayjdbc.serial.BigDecimalColumnValues;
import com.github.relayjdbc.serial.BooleanColumnValues;
import com.github.relayjdbc.serial.ByteColumnValues;
import com.github.relayjdbc.serial.DoubleColumnValues;
import com.github.relayjdbc.serial.FloatColumnValues;
import com.github.relayjdbc.serial.IntegerColumnValues;
import com.github.relayjdbc.serial.LongColumnValues;
import com.github.relayjdbc.serial.ObjectColumnValues;
import com.github.relayjdbc.serial.ShortColumnValues;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.chrono.ChronoLocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ColumnValues_ESTest extends ColumnValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      short[] shortArray0 = new short[7];
      int[] intArray0 = new int[0];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      shortColumnValues0.setShort(1, (short)1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Time> class0 = Time.class;
      Object[] objectArray0 = new Object[1];
      ObjectColumnValues objectColumnValues0 = new ObjectColumnValues(class0, objectArray0);
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      LocalDate localDate0 = MockLocalDate.from(offsetDateTime0);
      objectColumnValues0.setObject(0, localDate0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[7];
      int[] intArray0 = new int[7];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      longColumnValues0.setLong(1, 31);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntegerColumnValues integerColumnValues0 = new IntegerColumnValues(1);
      integerColumnValues0.setIsNull(1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[8];
      IntegerColumnValues integerColumnValues0 = new IntegerColumnValues(intArray0, intArray0);
      integerColumnValues0.setInt(0, (-971));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float[] floatArray0 = new float[7];
      int[] intArray0 = new int[1];
      FloatColumnValues floatColumnValues0 = new FloatColumnValues(floatArray0, intArray0);
      floatColumnValues0.setFloat(1, (-2479.717F));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[8];
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(doubleArray0, intArray0);
      doubleColumnValues0.setDouble(1, 1565.52805353);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = new int[7];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      byteColumnValues0.setByte(0, (byte) (-54));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues(1585);
      booleanColumnValues0.setBoolean(1585, false);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[2];
      int[] intArray0 = new int[4];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      int int0 = longColumnValues0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(1045);
      doubleColumnValues0.size = (-3927);
      int int0 = doubleColumnValues0.size();
      assertEquals((-3927), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigDecimalColumnValues bigDecimalColumnValues0 = new BigDecimalColumnValues(311);
      boolean boolean0 = bigDecimalColumnValues0.isNull(5);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[3];
      int[] intArray0 = new int[7];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      boolean boolean0 = longColumnValues0.isNull(5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues(4);
      String string0 = booleanColumnValues0.getString(4);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(5);
      short short0 = shortColumnValues0.getShort(1);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-20);
      int[] intArray0 = new int[3];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      short short0 = byteColumnValues0.getShort((byte)1);
      assertEquals((short) (-20), short0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LongColumnValues longColumnValues0 = new LongColumnValues(3192);
      long long0 = longColumnValues0.getLong(1886);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2029L;
      int[] intArray0 = new int[9];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      long long0 = longColumnValues0.getLong(0);
      assertEquals(2029L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-40);
      int[] intArray0 = new int[2];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      long long0 = byteColumnValues0.getLong((byte)1);
      assertEquals((-40L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(31);
      int int0 = byteColumnValues0.getInt(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)10;
      int[] intArray0 = new int[1];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      int int0 = shortColumnValues0.getInt((short)0);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-100);
      int[] intArray0 = new int[4];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      int int0 = byteColumnValues0.getInt((byte)1);
      assertEquals((-100), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[1];
      IntegerColumnValues integerColumnValues0 = new IntegerColumnValues(intArray0, intArray0);
      float float0 = integerColumnValues0.getFloat(0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2376;
      int[] intArray0 = new int[3];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      float float0 = shortColumnValues0.getFloat(0);
      assertEquals(2376.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3103);
      IntegerColumnValues integerColumnValues0 = new IntegerColumnValues(intArray0, intArray0);
      float float0 = integerColumnValues0.getFloat(0);
      assertEquals((-3103.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigDecimalColumnValues bigDecimalColumnValues0 = new BigDecimalColumnValues((short)81);
      double double0 = bigDecimalColumnValues0.getDouble(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[4];
      BigDecimal bigDecimal0 = new BigDecimal(2657L);
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimalColumnValues bigDecimalColumnValues0 = new BigDecimalColumnValues(bigDecimalArray0);
      double double0 = bigDecimalColumnValues0.getDouble(0);
      assertEquals(2657.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1399L);
      int[] intArray0 = new int[9];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      double double0 = longColumnValues0.getDouble(0);
      assertEquals((-1399.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IntegerColumnValues integerColumnValues0 = new IntegerColumnValues(12);
      Class class0 = integerColumnValues0.getComponentType();
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int[] intArray0 = new int[8];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      byte byte0 = byteColumnValues0.getByte(0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues(19);
      boolean boolean0 = booleanColumnValues0.getBoolean(19);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigDecimalColumnValues bigDecimalColumnValues0 = new BigDecimalColumnValues(2790);
      BigDecimal bigDecimal0 = bigDecimalColumnValues0.getBigDecimal(13);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(1373);
      // Undeclared exception!
      try { 
        shortColumnValues0.setShort(1373, (short)565);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1373 out of bounds for length 1373
         //
         verifyException("com.github.relayjdbc.serial.ShortColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LongColumnValues longColumnValues0 = new LongColumnValues(0);
      // Undeclared exception!
      try { 
        longColumnValues0.setLong(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.relayjdbc.serial.LongColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      float[] floatArray0 = new float[2];
      FloatColumnValues floatColumnValues0 = new FloatColumnValues(floatArray0, (int[]) null);
      // Undeclared exception!
      try { 
        floatColumnValues0.setIsNull(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.FloatColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigDecimalColumnValues bigDecimalColumnValues0 = new BigDecimalColumnValues(1);
      // Undeclared exception!
      try { 
        bigDecimalColumnValues0.setIsNull(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.github.relayjdbc.serial.BigDecimalColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IntegerColumnValues integerColumnValues0 = new IntegerColumnValues(5);
      // Undeclared exception!
      try { 
        integerColumnValues0.setInt(5, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("com.github.relayjdbc.serial.IntegerColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FloatColumnValues floatColumnValues0 = new FloatColumnValues(1);
      // Undeclared exception!
      try { 
        floatColumnValues0.setFloat(1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.github.relayjdbc.serial.FloatColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(1);
      // Undeclared exception!
      try { 
        doubleColumnValues0.setDouble(1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.github.relayjdbc.serial.DoubleColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(0);
      // Undeclared exception!
      try { 
        byteColumnValues0.setByte(0, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.relayjdbc.serial.ByteColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues((-1));
      // Undeclared exception!
      try { 
        booleanColumnValues0.isNull((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("com.github.relayjdbc.serial.BooleanColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues((int[]) null, (int[]) null, 2817);
      // Undeclared exception!
      try { 
        booleanColumnValues0.getTimestamp(2817);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.BooleanColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues((-9));
      // Undeclared exception!
      try { 
        booleanColumnValues0.getTimestamp((-9));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("com.github.relayjdbc.serial.BooleanColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues((int[]) null, (int[]) null, 1);
      // Undeclared exception!
      try { 
        booleanColumnValues0.getTime(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.BooleanColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues((-16));
      // Undeclared exception!
      try { 
        booleanColumnValues0.getTime((-16));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("com.github.relayjdbc.serial.BooleanColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues((int[]) null, (int[]) null, 2817);
      // Undeclared exception!
      try { 
        booleanColumnValues0.getString((-1159));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.BooleanColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues((-16));
      // Undeclared exception!
      try { 
        booleanColumnValues0.getString((-16));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("com.github.relayjdbc.serial.BooleanColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues((int[]) null, (int[]) null, 5);
      // Undeclared exception!
      try { 
        booleanColumnValues0.getShort(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.BooleanColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FloatColumnValues floatColumnValues0 = new FloatColumnValues(1);
      // Undeclared exception!
      try { 
        floatColumnValues0.getShort(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.github.relayjdbc.serial.FloatColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues((int[]) null, (int[]) null, 10);
      // Undeclared exception!
      try { 
        booleanColumnValues0.getLong(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.BooleanColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(31);
      // Undeclared exception!
      try { 
        byteColumnValues0.getLong(31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 31 out of bounds for length 31
         //
         verifyException("com.github.relayjdbc.serial.ByteColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues(38);
      try { 
        booleanColumnValues0.getInt(38);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Can not convert java.lang.Boolean@0000000002 of type boolean to int
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BigDecimalColumnValues bigDecimalColumnValues0 = new BigDecimalColumnValues(0);
      // Undeclared exception!
      try { 
        bigDecimalColumnValues0.getInt(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.relayjdbc.serial.BigDecimalColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues(10);
      try { 
        booleanColumnValues0.getFloat(10);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Can not convert java.lang.Boolean@0000000002 of type boolean to float
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues((int[]) null, (int[]) null, 9);
      // Undeclared exception!
      try { 
        booleanColumnValues0.getFloat(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.BooleanColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues((int[]) null, (int[]) null, 1);
      // Undeclared exception!
      try { 
        booleanColumnValues0.getDouble(853);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.BooleanColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues((-9));
      // Undeclared exception!
      try { 
        booleanColumnValues0.getDouble((-9));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("com.github.relayjdbc.serial.BooleanColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues((int[]) null, (int[]) null, 898);
      // Undeclared exception!
      try { 
        booleanColumnValues0.getDate(898);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.BooleanColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues((-5));
      // Undeclared exception!
      try { 
        booleanColumnValues0.getDate((-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("com.github.relayjdbc.serial.BooleanColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues(2817);
      try { 
        booleanColumnValues0.getByte(2817);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Can not convert java.lang.Boolean@0000000002 of type boolean to byte
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FloatColumnValues floatColumnValues0 = new FloatColumnValues(1);
      // Undeclared exception!
      try { 
        floatColumnValues0.getByte(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.github.relayjdbc.serial.FloatColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(10);
      try { 
        byteColumnValues0.getBoolean(0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Can not convert value 0 of type byte to boolean
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues((int[]) null, (int[]) null, 0);
      // Undeclared exception!
      try { 
        booleanColumnValues0.getBoolean(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.BooleanColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) class0;
      ObjectColumnValues objectColumnValues0 = new ObjectColumnValues(class0, objectArray0);
      try { 
        objectColumnValues0.getBigDecimal(1);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Can't convert type to BigDecimal: class java.lang.Class
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues((-19));
      // Undeclared exception!
      try { 
        booleanColumnValues0.getBigDecimal((-19));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("com.github.relayjdbc.serial.BooleanColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Class<Time> class0 = Time.class;
      ObjectColumnValues objectColumnValues0 = new ObjectColumnValues(class0, 1593);
      Timestamp timestamp0 = objectColumnValues0.getTimestamp(731);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues(30);
      try { 
        booleanColumnValues0.getTimestamp(30);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Can not convert class java.lang.Boolean to java.sql.Timestamp
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectColumnValues objectColumnValues0 = new ObjectColumnValues(class0, 38);
      Time time0 = objectColumnValues0.getTime(14);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues(31);
      try { 
        booleanColumnValues0.getTime(31);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Can not convert class java.lang.Boolean to java.sql.Time
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BigDecimalColumnValues bigDecimalColumnValues0 = new BigDecimalColumnValues(2790);
      Date date0 = bigDecimalColumnValues0.getDate(13);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues(2);
      try { 
        booleanColumnValues0.getDate(2);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Can not convert class java.lang.Boolean to java.sql.Date
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 59;
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues(intArray0, intArray0, 5);
      BigDecimal bigDecimal0 = booleanColumnValues0.getBigDecimal(5);
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Class<Time> class0 = Time.class;
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) (-1);
      ObjectColumnValues objectColumnValues0 = new ObjectColumnValues(class0, objectArray0);
      BigDecimal bigDecimal0 = objectColumnValues0.getBigDecimal(1);
      assertEquals((short) (-1), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues(10);
      BigDecimal bigDecimal0 = booleanColumnValues0.getBigDecimal(1);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) bigDecimal0;
      ObjectColumnValues objectColumnValues0 = new ObjectColumnValues(class0, objectArray0);
      BigDecimal bigDecimal1 = objectColumnValues0.getBigDecimal(0);
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Class<Time> class0 = Time.class;
      ObjectColumnValues objectColumnValues0 = new ObjectColumnValues(class0, 1593);
      // Undeclared exception!
      try { 
        objectColumnValues0.getBigDecimal(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectColumnValues objectColumnValues0 = new ObjectColumnValues(class0, 505);
      String string0 = objectColumnValues0.getString(14);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(1045);
      int int0 = doubleColumnValues0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      IntegerColumnValues integerColumnValues0 = new IntegerColumnValues(920);
      // Undeclared exception!
      try { 
        integerColumnValues0.setObject(920, integerColumnValues0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(13);
      // Undeclared exception!
      try { 
        byteColumnValues0.getBoolean(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 13 out of bounds for length 13
         //
         verifyException("com.github.relayjdbc.serial.ByteColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(304);
      // Undeclared exception!
      try { 
        doubleColumnValues0.setByte(304, (byte)13);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues(1);
      // Undeclared exception!
      try { 
        booleanColumnValues0.setShort(1, (short)5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FloatColumnValues floatColumnValues0 = new FloatColumnValues(22);
      // Undeclared exception!
      try { 
        floatColumnValues0.setDouble(22, 22);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ObjectColumnValues objectColumnValues0 = new ObjectColumnValues(class0, 0);
      // Undeclared exception!
      try { 
        objectColumnValues0.getFloat(244);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 244 out of bounds for length 0
         //
         verifyException("com.github.relayjdbc.serial.ObjectColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues(2194);
      try { 
        booleanColumnValues0.getDouble(2194);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Can not convert java.lang.Boolean@0000000002 of type boolean to double
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues(2194);
      // Undeclared exception!
      try { 
        booleanColumnValues0.setFloat(2194, 2194);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues(38);
      // Undeclared exception!
      try { 
        booleanColumnValues0.setInt(38, 38);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues((int[]) null, (int[]) null, 5);
      // Undeclared exception!
      try { 
        booleanColumnValues0.getByte(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.BooleanColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues(10);
      booleanColumnValues0.setSize(10);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues((int[]) null, (int[]) null, 0);
      // Undeclared exception!
      try { 
        booleanColumnValues0.getInt(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.BooleanColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(1045);
      // Undeclared exception!
      try { 
        doubleColumnValues0.setLong((-3927), 0L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      IntegerColumnValues integerColumnValues0 = new IntegerColumnValues(0);
      // Undeclared exception!
      try { 
        integerColumnValues0.setBoolean(1828, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ObjectColumnValues objectColumnValues0 = new ObjectColumnValues(class0, 0);
      Class class1 = objectColumnValues0.getComponentType();
      assertEquals(1537, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues(2817);
      try { 
        booleanColumnValues0.getLong(2817);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Can not convert java.lang.Boolean@0000000002 of type boolean to long
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      BooleanColumnValues booleanColumnValues0 = new BooleanColumnValues(10);
      try { 
        booleanColumnValues0.getShort(10);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Can not convert java.lang.Boolean@0000000002 of type boolean to short
         //
         verifyException("com.github.relayjdbc.serial.ColumnValues", e);
      }
  }
}
