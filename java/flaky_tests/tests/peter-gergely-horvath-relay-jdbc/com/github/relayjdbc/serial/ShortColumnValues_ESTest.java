/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 16:57:17 GMT 2022
 */

package com.github.relayjdbc.serial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.relayjdbc.serial.ShortColumnValues;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShortColumnValues_ESTest extends ShortColumnValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-327);
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      boolean boolean0 = shortColumnValues0.isNull(31);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int[] intArray0 = new int[8];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      // Undeclared exception!
      try { 
        shortColumnValues0.isNull((-249));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -8 out of bounds for length 8
         //
         verifyException("com.github.relayjdbc.serial.ShortColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)1;
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      shortColumnValues0.setIsNull(0);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(1);
      // Undeclared exception!
      try { 
        shortColumnValues0.setIsNull((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 1
         //
         verifyException("com.github.relayjdbc.serial.ShortColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(1970);
      Object object0 = shortColumnValues0.getObject(1915);
      assertEquals((short)0, object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(1);
      shortColumnValues0.setIsNull(1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(1141);
      String string0 = shortColumnValues0.getString(559);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)4127;
      int[] intArray0 = new int[7];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      short short0 = shortColumnValues0.getShort(0);
      assertEquals((short)4127, short0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1816);
      int[] intArray0 = new int[5];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      short short0 = shortColumnValues0.getShort(0);
      assertEquals((short) (-1816), short0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      short[] shortArray0 = new short[4];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, (int[]) null);
      int[] intArray0 = shortColumnValues0.getNullFlags();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(0);
      int[] intArray0 = shortColumnValues0.getNullFlags();
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)10;
      int[] intArray0 = new int[3];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      long long0 = shortColumnValues0.getLong(0);
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-347);
      int[] intArray0 = new int[4];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      long long0 = shortColumnValues0.getLong((short)0);
      assertEquals((-347L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)6841;
      int[] intArray0 = new int[7];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      int int0 = shortColumnValues0.getInt(0);
      assertEquals(6841, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[5] = (short) (-3363);
      int[] intArray0 = new int[6];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      int int0 = shortColumnValues0.getInt(5);
      assertEquals((-3363), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(1194);
      float float0 = shortColumnValues0.getFloat(0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)31;
      int[] intArray0 = new int[7];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      float float0 = shortColumnValues0.getFloat((short)0);
      assertEquals(31.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-620);
      int[] intArray0 = new int[1];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      float float0 = shortColumnValues0.getFloat((short)0);
      assertEquals((-620.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      int[] intArray0 = new int[6];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      double double0 = shortColumnValues0.getDouble(0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-509);
      int[] intArray0 = new int[9];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      double double0 = shortColumnValues0.getDouble(0);
      assertEquals((-509.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short) (-5254);
      int[] intArray0 = new int[4];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      BigDecimal bigDecimal0 = shortColumnValues0.getBigDecimal(2);
      assertEquals((byte)122, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)731;
      int[] intArray0 = new int[0];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      BigDecimal bigDecimal0 = shortColumnValues0.getBigDecimal(2);
      assertEquals((byte) (-37), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, (int[]) null);
      // Undeclared exception!
      try { 
        shortColumnValues0.setShort((-1), (short) (-2271));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("com.github.relayjdbc.serial.ShortColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, (int[]) null);
      // Undeclared exception!
      try { 
        shortColumnValues0.setIsNull(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.ShortColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, (int[]) null);
      // Undeclared exception!
      try { 
        shortColumnValues0.isNull(14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.ShortColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(2);
      // Undeclared exception!
      try { 
        shortColumnValues0.getShort(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("com.github.relayjdbc.serial.ShortColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(1059);
      // Undeclared exception!
      try { 
        shortColumnValues0.getLong(1059);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1059 out of bounds for length 1059
         //
         verifyException("com.github.relayjdbc.serial.ShortColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(31);
      // Undeclared exception!
      try { 
        shortColumnValues0.getInt(31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 31 out of bounds for length 31
         //
         verifyException("com.github.relayjdbc.serial.ShortColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(1);
      // Undeclared exception!
      try { 
        shortColumnValues0.getDouble(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.github.relayjdbc.serial.ShortColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int[] intArray0 = new int[5];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      // Undeclared exception!
      try { 
        shortColumnValues0.getBigDecimal((-327));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -327 out of bounds for length 4
         //
         verifyException("com.github.relayjdbc.serial.ShortColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ShortColumnValues shortColumnValues0 = null;
      try {
        shortColumnValues0 = new ShortColumnValues((short[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.ShortColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ShortColumnValues shortColumnValues0 = null;
      try {
        shortColumnValues0 = new ShortColumnValues((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("com.github.relayjdbc.serial.ShortColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int[] intArray0 = new int[2];
      intArray0[0] = (-772);
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      boolean boolean0 = shortColumnValues0.isNull(2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int[] intArray0 = new int[6];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      boolean boolean0 = shortColumnValues0.isNull(90);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(0);
      // Undeclared exception!
      try { 
        shortColumnValues0.getObject(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.relayjdbc.serial.ShortColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(17);
      // Undeclared exception!
      try { 
        shortColumnValues0.getFloat(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 17 out of bounds for length 17
         //
         verifyException("com.github.relayjdbc.serial.ShortColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      short[] shortArray0 = new short[6];
      int[] intArray0 = new int[6];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      int int0 = shortColumnValues0.getInt(5);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(0);
      Object object0 = shortColumnValues0.getValues();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      short[] shortArray0 = new short[8];
      int[] intArray0 = new int[0];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      // Undeclared exception!
      try { 
        shortColumnValues0.getString(904);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 904 out of bounds for length 8
         //
         verifyException("com.github.relayjdbc.serial.ShortColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      short[] shortArray0 = new short[8];
      int[] intArray0 = new int[0];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      int[] intArray1 = shortColumnValues0.getNullFlags();
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(1141);
      shortColumnValues0.setShort(0, (short)2027);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      short[] shortArray0 = new short[3];
      int[] intArray0 = new int[5];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      short short0 = shortColumnValues0.getShort(0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int[] intArray0 = new int[6];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      double double0 = shortColumnValues0.getDouble(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      short[] shortArray0 = new short[6];
      int[] intArray0 = new int[4];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      long long0 = shortColumnValues0.getLong((short)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      short[] shortArray0 = new short[6];
      int[] intArray0 = new int[4];
      ShortColumnValues shortColumnValues0 = new ShortColumnValues(shortArray0, intArray0);
      BigDecimal bigDecimal0 = shortColumnValues0.getBigDecimal(2);
      assertEquals((short)0, bigDecimal0.shortValue());
  }
}
