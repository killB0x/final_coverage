/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 16:45:24 GMT 2022
 */

package com.github.relayjdbc.serial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.relayjdbc.serial.DoubleColumnValues;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleColumnValues_ESTest extends DoubleColumnValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(1092);
      doubleColumnValues0.setSize(1092);
      doubleColumnValues0.setDouble(0, 0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(doubleArray0, intArray0);
      boolean boolean0 = doubleColumnValues0.isNull(2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[7];
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        doubleColumnValues0.isNull((-2885));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -91 out of bounds for length 7
         //
         verifyException("com.github.relayjdbc.serial.DoubleColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[7];
      intArray0[0] = (-210);
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(doubleArray0, intArray0);
      doubleColumnValues0.setIsNull(1);
      assertArrayEquals(new int[] {(-210), 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(doubleArray0, (int[]) null);
      Object object0 = doubleColumnValues0.getObject(1);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[7];
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(doubleArray0, intArray0);
      String string0 = doubleColumnValues0.getString(1);
      assertEquals("0.0", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(50);
      int[] intArray0 = doubleColumnValues0.getNullFlags();
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[0];
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(doubleArray0, intArray0);
      int[] intArray1 = doubleColumnValues0.getNullFlags();
      assertSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(2);
      doubleColumnValues0.setDouble(0, 2);
      double double0 = doubleColumnValues0.getDouble(0);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (-2400.012457783504);
      int[] intArray0 = new int[5];
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(doubleArray0, intArray0);
      double double0 = doubleColumnValues0.getDouble(2);
      assertEquals((-2400.012457783504), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2411.431;
      int[] intArray0 = new int[7];
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(doubleArray0, intArray0);
      BigDecimal bigDecimal0 = doubleColumnValues0.getBigDecimal(0);
      assertEquals((short)2411, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1582.287549705);
      int[] intArray0 = new int[0];
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(doubleArray0, intArray0);
      BigDecimal bigDecimal0 = doubleColumnValues0.getBigDecimal(1);
      assertEquals((byte) (-46), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(doubleArray0, (int[]) null);
      // Undeclared exception!
      try { 
        doubleColumnValues0.setIsNull(657);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.DoubleColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(2);
      // Undeclared exception!
      try { 
        doubleColumnValues0.setDouble(2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("com.github.relayjdbc.serial.DoubleColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(doubleArray0, (int[]) null);
      // Undeclared exception!
      try { 
        doubleColumnValues0.isNull(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.DoubleColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(10);
      // Undeclared exception!
      try { 
        doubleColumnValues0.getDouble(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 10 out of bounds for length 10
         //
         verifyException("com.github.relayjdbc.serial.DoubleColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(14);
      // Undeclared exception!
      try { 
        doubleColumnValues0.getBigDecimal(3530);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3530 out of bounds for length 14
         //
         verifyException("com.github.relayjdbc.serial.DoubleColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[0];
      DoubleColumnValues doubleColumnValues0 = null;
      try {
        doubleColumnValues0 = new DoubleColumnValues((double[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.DoubleColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleColumnValues doubleColumnValues0 = null;
      try {
        doubleColumnValues0 = new DoubleColumnValues((-11));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -11
         //
         verifyException("com.github.relayjdbc.serial.DoubleColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(1);
      doubleColumnValues0.setDouble(0, 0);
      doubleColumnValues0.setDouble(0, 0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[1];
      intArray0[0] = (-2300);
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(doubleArray0, intArray0);
      boolean boolean0 = doubleColumnValues0.isNull(31);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(0);
      boolean boolean0 = doubleColumnValues0.isNull(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[0];
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(doubleArray0, intArray0);
      BigDecimal bigDecimal0 = doubleColumnValues0.getBigDecimal(1);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(1092);
      // Undeclared exception!
      try { 
        doubleColumnValues0.getObject(1092);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1092 out of bounds for length 1092
         //
         verifyException("com.github.relayjdbc.serial.DoubleColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(0);
      // Undeclared exception!
      try { 
        doubleColumnValues0.setIsNull((-28));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 1
         //
         verifyException("com.github.relayjdbc.serial.DoubleColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(2);
      double double0 = doubleColumnValues0.getDouble(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(1092);
      Object object0 = doubleColumnValues0.getValues();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(doubleArray0, (int[]) null);
      int[] intArray0 = doubleColumnValues0.getNullFlags();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DoubleColumnValues doubleColumnValues0 = new DoubleColumnValues(2081);
      // Undeclared exception!
      try { 
        doubleColumnValues0.getString(2081);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2081 out of bounds for length 2081
         //
         verifyException("com.github.relayjdbc.serial.DoubleColumnValues", e);
      }
  }
}
