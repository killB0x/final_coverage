/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 16:59:04 GMT 2022
 */

package com.github.relayjdbc.serial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.relayjdbc.serial.LongColumnValues;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LongColumnValues_ESTest extends LongColumnValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[9];
      int[] intArray0 = new int[4];
      intArray0[0] = (-3747);
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      boolean boolean0 = longColumnValues0.isNull(31);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long[] longArray0 = new long[6];
      int[] intArray0 = new int[9];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      longColumnValues0.setIsNull(0);
      longColumnValues0.setIsNull(0);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[6];
      int[] intArray0 = new int[9];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      Object object0 = longColumnValues0.getObject(0);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[8];
      int[] intArray0 = new int[7];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      longColumnValues0.setLong(0, 0L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[3];
      int[] intArray0 = new int[0];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      String string0 = longColumnValues0.getString(0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long[] longArray0 = new long[1];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, (int[]) null);
      int[] intArray0 = longColumnValues0.getNullFlags();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[4];
      int[] intArray0 = new int[0];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      int[] intArray1 = longColumnValues0.getNullFlags();
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LongColumnValues longColumnValues0 = new LongColumnValues(2742);
      long long0 = longColumnValues0.getLong(2511);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 5460L;
      int[] intArray0 = new int[8];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      long long0 = longColumnValues0.getLong(0);
      assertEquals(5460L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[4] = (-4559L);
      int[] intArray0 = new int[9];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      long long0 = longColumnValues0.getLong(4);
      assertEquals((-4559L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LongColumnValues longColumnValues0 = new LongColumnValues(2742);
      float float0 = longColumnValues0.getFloat(0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = (long) 5;
      int[] intArray0 = new int[9];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      float float0 = longColumnValues0.getFloat(1);
      assertEquals(5.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-795L);
      int[] intArray0 = new int[5];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      float float0 = longColumnValues0.getFloat(0);
      assertEquals((-795.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      int[] intArray0 = new int[3];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      double double0 = longColumnValues0.getDouble(0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      int[] intArray0 = new int[7];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      double double0 = longColumnValues0.getDouble(0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = (-4559L);
      int[] intArray0 = new int[3];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      BigDecimal bigDecimal0 = longColumnValues0.getBigDecimal(2);
      assertEquals((short) (-4559), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 138L;
      int[] intArray0 = new int[9];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      BigDecimal bigDecimal0 = longColumnValues0.getBigDecimal(0);
      assertEquals((short)138, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[2];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      // Undeclared exception!
      try { 
        longColumnValues0.setIsNull((-2617));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -82 out of bounds for length 2
         //
         verifyException("com.github.relayjdbc.serial.LongColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[0];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, (int[]) null);
      // Undeclared exception!
      try { 
        longColumnValues0.isNull((-1543));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.LongColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LongColumnValues longColumnValues0 = new LongColumnValues(2470);
      // Undeclared exception!
      try { 
        longColumnValues0.isNull(3157);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 98 out of bounds for length 78
         //
         verifyException("com.github.relayjdbc.serial.LongColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LongColumnValues longColumnValues0 = new LongColumnValues(31);
      // Undeclared exception!
      try { 
        longColumnValues0.getString(31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 31 out of bounds for length 31
         //
         verifyException("com.github.relayjdbc.serial.LongColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LongColumnValues longColumnValues0 = new LongColumnValues(1267);
      // Undeclared exception!
      try { 
        longColumnValues0.getLong(1267);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1267 out of bounds for length 1267
         //
         verifyException("com.github.relayjdbc.serial.LongColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LongColumnValues longColumnValues0 = new LongColumnValues(0);
      // Undeclared exception!
      try { 
        longColumnValues0.getDouble(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.relayjdbc.serial.LongColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LongColumnValues longColumnValues0 = new LongColumnValues(5);
      // Undeclared exception!
      try { 
        longColumnValues0.getBigDecimal(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("com.github.relayjdbc.serial.LongColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[2];
      LongColumnValues longColumnValues0 = null;
      try {
        longColumnValues0 = new LongColumnValues((long[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.LongColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LongColumnValues longColumnValues0 = null;
      try {
        longColumnValues0 = new LongColumnValues((-2617));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2617
         //
         verifyException("com.github.relayjdbc.serial.LongColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long[] longArray0 = new long[0];
      int[] intArray0 = new int[1];
      intArray0[0] = 13;
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      boolean boolean0 = longColumnValues0.isNull(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LongColumnValues longColumnValues0 = new LongColumnValues(5);
      boolean boolean0 = longColumnValues0.isNull(5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LongColumnValues longColumnValues0 = new LongColumnValues(14);
      double double0 = longColumnValues0.getDouble(1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LongColumnValues longColumnValues0 = new LongColumnValues(5);
      int[] intArray0 = longColumnValues0.getNullFlags();
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LongColumnValues longColumnValues0 = new LongColumnValues(349);
      // Undeclared exception!
      try { 
        longColumnValues0.setLong((-1081), 4058L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1081 out of bounds for length 349
         //
         verifyException("com.github.relayjdbc.serial.LongColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LongColumnValues longColumnValues0 = new LongColumnValues(0);
      // Undeclared exception!
      try { 
        longColumnValues0.getFloat(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.relayjdbc.serial.LongColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LongColumnValues longColumnValues0 = new LongColumnValues(0);
      Object object0 = longColumnValues0.getValues();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long[] longArray0 = new long[3];
      int[] intArray0 = new int[3];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      // Undeclared exception!
      try { 
        longColumnValues0.getObject((-867));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -867 out of bounds for length 3
         //
         verifyException("com.github.relayjdbc.serial.LongColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long[] longArray0 = new long[6];
      int[] intArray0 = new int[3];
      LongColumnValues longColumnValues0 = new LongColumnValues(longArray0, intArray0);
      BigDecimal bigDecimal0 = longColumnValues0.getBigDecimal(2);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }
}
