/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 16:51:25 GMT 2022
 */

package com.github.relayjdbc.serial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.relayjdbc.serial.ByteColumnValues;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ByteColumnValues_ESTest extends ByteColumnValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int[] intArray0 = new int[2];
      intArray0[0] = (-3725);
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      byteColumnValues0.setIsNull(0);
      assertArrayEquals(new int[] {(-3725), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      int[] intArray0 = new int[5];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      Object object0 = byteColumnValues0.getObject(5);
      assertEquals((byte)0, object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, (int[]) null);
      byteColumnValues0.setByte(0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int[] intArray0 = new int[1];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      String string0 = byteColumnValues0.getString(0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      int[] intArray0 = new int[8];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      short short0 = byteColumnValues0.getShort(0);
      assertEquals((short)95, short0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      int[] intArray0 = new int[8];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      short short0 = byteColumnValues0.getShort((byte)0);
      assertEquals((short) (-76), short0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, (int[]) null);
      int[] intArray0 = byteColumnValues0.getNullFlags();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int[] intArray0 = new int[0];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      int[] intArray1 = byteColumnValues0.getNullFlags();
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)32;
      int[] intArray0 = new int[3];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      long long0 = byteColumnValues0.getLong((byte)1);
      assertEquals(32L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-111);
      int[] intArray0 = new int[5];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      long long0 = byteColumnValues0.getLong((byte)2);
      assertEquals((-111L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      int[] intArray0 = new int[5];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      int int0 = byteColumnValues0.getInt(0);
      assertEquals(66, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      int[] intArray0 = new int[8];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      int int0 = byteColumnValues0.getInt((byte)0);
      assertEquals((-76), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, (int[]) null);
      float float0 = byteColumnValues0.getFloat((byte)0);
      assertEquals(5.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-65);
      int[] intArray0 = new int[1];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      float float0 = byteColumnValues0.getFloat(0);
      assertEquals((-65.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      int[] intArray0 = new int[3];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      double double0 = byteColumnValues0.getDouble(0);
      assertEquals(21.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-35);
      int[] intArray0 = new int[6];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      double double0 = byteColumnValues0.getDouble(0);
      assertEquals((-35.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(74);
      byte byte0 = byteColumnValues0.getByte(1);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)32;
      int[] intArray0 = new int[3];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      byte byte0 = byteColumnValues0.getByte((byte)1);
      assertEquals((byte)32, byte0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      int[] intArray0 = new int[1];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      byte byte0 = byteColumnValues0.getByte((byte)0);
      assertEquals((byte) (-38), byte0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(14);
      BigDecimal bigDecimal0 = byteColumnValues0.getBigDecimal(12);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)32;
      int[] intArray0 = new int[3];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      BigDecimal bigDecimal0 = byteColumnValues0.getBigDecimal(2);
      assertEquals((byte)32, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-45);
      int[] intArray0 = new int[8];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      BigDecimal bigDecimal0 = byteColumnValues0.getBigDecimal(0);
      assertEquals((byte) (-45), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(0);
      // Undeclared exception!
      try { 
        byteColumnValues0.setIsNull((-2130));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -67 out of bounds for length 1
         //
         verifyException("com.github.relayjdbc.serial.ByteColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, (int[]) null);
      // Undeclared exception!
      try { 
        byteColumnValues0.isNull(2607);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.ByteColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int[] intArray0 = new int[2];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      // Undeclared exception!
      try { 
        byteColumnValues0.isNull((-2055));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -65 out of bounds for length 2
         //
         verifyException("com.github.relayjdbc.serial.ByteColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(0);
      // Undeclared exception!
      try { 
        byteColumnValues0.getShort(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.relayjdbc.serial.ByteColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(12);
      // Undeclared exception!
      try { 
        byteColumnValues0.getObject(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 12 out of bounds for length 12
         //
         verifyException("com.github.relayjdbc.serial.ByteColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(31);
      // Undeclared exception!
      try { 
        byteColumnValues0.getLong(31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 31 out of bounds for length 31
         //
         verifyException("com.github.relayjdbc.serial.ByteColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(0);
      // Undeclared exception!
      try { 
        byteColumnValues0.getInt(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.relayjdbc.serial.ByteColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(73);
      // Undeclared exception!
      try { 
        byteColumnValues0.getFloat(73);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 73 out of bounds for length 73
         //
         verifyException("com.github.relayjdbc.serial.ByteColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = new int[3];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      // Undeclared exception!
      try { 
        byteColumnValues0.getDouble((-1249));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1249 out of bounds for length 1
         //
         verifyException("com.github.relayjdbc.serial.ByteColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[5];
      ByteColumnValues byteColumnValues0 = null;
      try {
        byteColumnValues0 = new ByteColumnValues((byte[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.ByteColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteColumnValues byteColumnValues0 = null;
      try {
        byteColumnValues0 = new ByteColumnValues((-1272));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1272
         //
         verifyException("com.github.relayjdbc.serial.ByteColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-106);
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      boolean boolean0 = byteColumnValues0.isNull(31);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = new int[3];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      boolean boolean0 = byteColumnValues0.isNull(21);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      int[] intArray0 = new int[8];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      int int0 = byteColumnValues0.getInt((byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int[] intArray0 = new int[1];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      float float0 = byteColumnValues0.getFloat(0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(14);
      byteColumnValues0.setIsNull(14);
      boolean boolean0 = byteColumnValues0.isNull(14);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      int[] intArray0 = new int[8];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      short short0 = byteColumnValues0.getShort((byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int[] intArray0 = new int[1];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      Object object0 = byteColumnValues0.getValues();
      assertSame(byteArray0, object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(1637);
      // Undeclared exception!
      try { 
        byteColumnValues0.getBigDecimal(1637);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1637 out of bounds for length 1637
         //
         verifyException("com.github.relayjdbc.serial.ByteColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(0);
      // Undeclared exception!
      try { 
        byteColumnValues0.setByte(0, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.relayjdbc.serial.ByteColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      int[] intArray0 = new int[5];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      long long0 = byteColumnValues0.getLong((byte)2);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = new int[3];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      double double0 = byteColumnValues0.getDouble(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = new int[3];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      int[] intArray1 = byteColumnValues0.getNullFlags();
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(31);
      // Undeclared exception!
      try { 
        byteColumnValues0.getString(31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 31 out of bounds for length 31
         //
         verifyException("com.github.relayjdbc.serial.ByteColumnValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int[] intArray0 = new int[1];
      ByteColumnValues byteColumnValues0 = new ByteColumnValues(byteArray0, intArray0);
      // Undeclared exception!
      try { 
        byteColumnValues0.getByte((byte)13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 13 out of bounds for length 4
         //
         verifyException("com.github.relayjdbc.serial.ByteColumnValues", e);
      }
  }
}
