/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 17:10:25 GMT 2022
 */

package com.github.relayjdbc.serial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.relayjdbc.serial.SerialRef;
import java.io.ByteArrayOutputStream;
import java.io.NotSerializableException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.sql.Ref;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SerialRef_ESTest extends SerialRef_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SerialRef serialRef0 = new SerialRef(";)A", ";)A");
      Object object0 = serialRef0.getObject();
      assertEquals(";)A", object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SerialRef serialRef0 = new SerialRef(";)A", ";)A");
      String string0 = serialRef0.getBaseTypeName();
      assertEquals(";)A", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SerialRef serialRef0 = new SerialRef("", (Object) null);
      String string0 = serialRef0.getBaseTypeName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SerialRef serialRef0 = new SerialRef("", "");
      // Undeclared exception!
      try { 
        serialRef0.writeExternal((ObjectOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.SerialRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      SerialRef serialRef0 = new SerialRef("WEtq],@WMafy", object0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("WEtq],@WMafy", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      try { 
        serialRef0.writeExternal(objectOutputStream0);
        fail("Expecting exception: NotSerializableException");
      
      } catch(NotSerializableException e) {
         //
         // java.lang.Object
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SerialRef serialRef0 = null;
      try {
        serialRef0 = new SerialRef((Ref) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.SerialRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SerialRef serialRef0 = new SerialRef("", (Object) null);
      Object object0 = serialRef0.getObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      SerialRef serialRef0 = new SerialRef((String) null, object0);
      String string0 = serialRef0.getBaseTypeName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SerialRef serialRef0 = new SerialRef("kR", "kR");
      // Undeclared exception!
      try { 
        serialRef0.setObject("kR");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Ref.setObject(Object) not supported
         //
         verifyException("com.github.relayjdbc.serial.SerialRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SerialRef serialRef0 = new SerialRef("mOivaR2)N30*9K~]0", "mOivaR2)N30*9K~]0");
      HashMap<MockFileInputStream, Integer> hashMap0 = new HashMap<MockFileInputStream, Integer>();
      // Undeclared exception!
      try { 
        serialRef0.getObject((Map) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Ref.getObject(Map) not supported
         //
         verifyException("com.github.relayjdbc.serial.SerialRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SerialRef serialRef0 = new SerialRef("mOivaR)N30*9K~]0", "mOivaR)N30*9K~]0");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      serialRef0.writeExternal(objectOutputStream0);
      assertEquals("mOivaR)N30*9K~]0", serialRef0.getBaseTypeName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SerialRef serialRef0 = new SerialRef("wp_>mOivaR)N30*9K~]0", "wp_>mOivaR)N30*9K~]0");
      SerialRef serialRef1 = new SerialRef(serialRef0);
      assertFalse(serialRef1.equals((Object)serialRef0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SerialRef serialRef0 = new SerialRef("mOivaR)N30*9K~]0", "mOivaR)N30*9K~]0");
      // Undeclared exception!
      try { 
        serialRef0.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.SerialRef", e);
      }
  }
}
