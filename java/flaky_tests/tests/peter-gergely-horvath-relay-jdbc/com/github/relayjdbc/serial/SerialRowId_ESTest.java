/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 16:31:48 GMT 2022
 */

package com.github.relayjdbc.serial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.relayjdbc.serial.SerialRowId;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.sql.RowId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SerialRowId_ESTest extends SerialRowId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      SerialRowId serialRowId0 = new SerialRowId(byteArray0, "", (byte) (-111));
      MockFile mockFile0 = new MockFile("lk:tHS\"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      serialRowId0.writeExternal(objectOutputStream0);
      assertEquals("", serialRowId0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      SerialRowId serialRowId0 = new SerialRowId(byteArray0, (String) null, (byte)1);
      String string0 = serialRowId0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      SerialRowId serialRowId0 = new SerialRowId(byteArray0, ").{$a2xo,,`.(%`K&", (byte)0);
      String string0 = serialRowId0.toString();
      assertEquals(").{$a2xo,,`.(%`K&", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      SerialRowId serialRowId0 = new SerialRowId(byteArray0, "com.github.relayjdbc.serial.SerialRowId", 1);
      SerialRowId serialRowId1 = new SerialRowId(serialRowId0, "");
      String string0 = serialRowId1.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SerialRowId serialRowId0 = new SerialRowId();
      byte[] byteArray0 = serialRowId0.getBytes();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      SerialRowId serialRowId0 = new SerialRowId(byteArray0, (String) null, 0);
      byte[] byteArray1 = serialRowId0.getBytes();
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SerialRowId serialRowId0 = new SerialRowId();
      // Undeclared exception!
      try { 
        serialRowId0.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.SerialRowId", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SerialRowId serialRowId0 = new SerialRowId();
      // Undeclared exception!
      try { 
        serialRowId0.equals(serialRowId0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.SerialRowId", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SerialRowId serialRowId0 = null;
      try {
        serialRowId0 = new SerialRowId((RowId) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.SerialRowId", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SerialRowId serialRowId0 = null;
      try {
        serialRowId0 = new SerialRowId((RowId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.SerialRowId", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      SerialRowId serialRowId0 = new SerialRowId(byteArray0, "", 7);
      byte[] byteArray1 = serialRowId0.getBytes();
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      SerialRowId serialRowId0 = new SerialRowId(byteArray0, " e<", 1833);
      serialRowId0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[7];
      SerialRowId serialRowId0 = new SerialRowId(byteArray1, "\"/_B>p+", 2135);
      SerialRowId serialRowId1 = new SerialRowId(byteArray0, "O", 483);
      boolean boolean0 = serialRowId0.equals(serialRowId1);
      assertFalse(serialRowId1.equals((Object)serialRowId0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      SerialRowId serialRowId0 = new SerialRowId(byteArray0, "O", (byte)3);
      boolean boolean0 = serialRowId0.equals(serialRowId0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      SerialRowId serialRowId0 = new SerialRowId(byteArray0, "O", (byte)3);
      Object object0 = new Object();
      boolean boolean0 = serialRowId0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SerialRowId serialRowId0 = new SerialRowId();
      // Undeclared exception!
      try { 
        serialRowId0.writeExternal((ObjectOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.serial.SerialRowId", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      SerialRowId serialRowId0 = new SerialRowId(byteArray0, "*", (byte)3);
      SerialRowId serialRowId1 = new SerialRowId(serialRowId0);
      assertEquals("*", serialRowId1.toString());
  }
}
