/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 16:55:25 GMT 2022
 */

package com.github.relayjdbc.parameters;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.relayjdbc.parameters.DateParameter;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.util.Calendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateParameter_ESTest extends DateParameter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateParameter dateParameter0 = new DateParameter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1004);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      dateParameter0.writeExternal(objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      DateParameter dateParameter0 = new DateParameter((Date) null, calendar0);
      Date date0 = dateParameter0.getValue();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateParameter dateParameter0 = new DateParameter();
      Calendar calendar0 = dateParameter0.getCalendar();
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateParameter dateParameter0 = new DateParameter();
      // Undeclared exception!
      try { 
        dateParameter0.setParameter((PreparedStatement) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.parameters.DateParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Date date0 = new Date((-1L));
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      DateParameter dateParameter0 = new DateParameter(date0, calendar0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      dateParameter0.setParameter(preparedStatement0, 0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DateParameter dateParameter0 = new DateParameter();
      // Undeclared exception!
      try { 
        dateParameter0.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.parameters.DateParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DateParameter dateParameter0 = new DateParameter();
      // Undeclared exception!
      try { 
        dateParameter0.writeExternal((ObjectOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.parameters.DateParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Date date0 = new Date((-1L));
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      DateParameter dateParameter0 = new DateParameter(date0, calendar0);
      Calendar calendar1 = dateParameter0.getCalendar();
      assertSame(calendar0, calendar1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DateParameter dateParameter0 = new DateParameter();
      String string0 = dateParameter0.toString();
      assertEquals("Date: null", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Date date0 = new Date((-1L));
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      DateParameter dateParameter0 = new DateParameter(date0, calendar0);
      Date date1 = dateParameter0.getValue();
      assertSame(date1, date0);
  }
}
