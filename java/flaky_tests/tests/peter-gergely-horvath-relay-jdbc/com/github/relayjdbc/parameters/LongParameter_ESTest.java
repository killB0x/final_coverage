/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 17:05:35 GMT 2022
 */

package com.github.relayjdbc.parameters;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.relayjdbc.parameters.LongParameter;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.StreamCorruptedException;
import java.io.SyncFailedException;
import java.net.URI;
import java.sql.PreparedStatement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LongParameter_ESTest extends LongParameter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LongParameter longParameter0 = new LongParameter((-2912L));
      PipedInputStream pipedInputStream0 = new PipedInputStream(2281);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      longParameter0.writeExternal(objectOutputStream0);
      objectOutputStream0.writeLong((-2912L));
      byte[] byteArray0 = new byte[0];
      pipedOutputStream0.write(byteArray0);
      longParameter0.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      mockPrintStream0.write(byteArray0);
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(pipedOutputStream0);
      objectOutputStream0.writeBytes("");
      longParameter0.writeExternal(objectOutputStream0);
      ObjectInputStream objectInputStream0 = new ObjectInputStream(pipedInputStream0);
      try { 
        longParameter0.readExternal(objectInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid type code: AC
         //
         verifyException("java.io.ObjectInputStream$BlockDataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LongParameter longParameter0 = new LongParameter((-2381L));
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      longParameter0.setParameter(preparedStatement0, 0);
      longParameter0.getValue();
      longParameter0.getValue();
      String string0 = "long: ";
      // Undeclared exception!
      try { 
        MockURI.create("long: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in opaque part at index 5: long: 
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LongParameter longParameter0 = new LongParameter();
      assertEquals(0L, longParameter0.getValue());
      
      // Undeclared exception!
      try { 
        longParameter0.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.parameters.LongParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LongParameter longParameter0 = new LongParameter();
      // Undeclared exception!
      try { 
        longParameter0.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.parameters.LongParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LongParameter longParameter0 = new LongParameter();
      File file0 = MockFile.createTempFile("[[R3#", (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      longParameter0.writeExternal(objectOutputStream0);
      longParameter0.toString();
      longParameter0.toString();
      longParameter0.toString();
      String string0 = longParameter0.toString();
      assertEquals("long: 0", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LongParameter longParameter0 = new LongParameter((-2912L));
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      ObjectOutput objectOutput0 = null;
      // Undeclared exception!
      try { 
        longParameter0.writeExternal((ObjectOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.parameters.LongParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LongParameter longParameter0 = new LongParameter((-2912L));
      PipedInputStream pipedInputStream0 = new PipedInputStream(2281);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      longParameter0.writeExternal(objectOutputStream0);
      objectOutputStream0.writeLong((-2912L));
      LongParameter longParameter1 = new LongParameter((-1026L));
      assertEquals((-1026L), longParameter1.getValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LongParameter longParameter0 = new LongParameter(591L);
      longParameter0.getValue();
      // Undeclared exception!
      try { 
        longParameter0.writeExternal((ObjectOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.parameters.LongParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LongParameter longParameter0 = new LongParameter(4046L);
      assertEquals(4046L, longParameter0.getValue());
      
      long long0 = longParameter0.getValue();
      assertEquals(4046L, long0);
      
      String string0 = longParameter0.toString();
      assertEquals("long: 4046", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LongParameter longParameter0 = new LongParameter(0L);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LongParameter longParameter0 = new LongParameter();
      longParameter0.getValue();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LongParameter longParameter0 = new LongParameter();
      longParameter0.toString();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      longParameter0.setParameter(preparedStatement0, (-595));
      assertEquals(0L, longParameter0.getValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LongParameter longParameter0 = new LongParameter(4046L);
      ObjectInput objectInput0 = null;
      longParameter0.toString();
      // Undeclared exception!
      try { 
        longParameter0.setParameter((PreparedStatement) null, (-36));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.parameters.LongParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LongParameter longParameter0 = new LongParameter();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      longParameter0.setParameter(preparedStatement0, 0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }
}
