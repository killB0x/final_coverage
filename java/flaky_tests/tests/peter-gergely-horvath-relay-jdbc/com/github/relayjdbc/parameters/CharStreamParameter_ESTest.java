/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 16:59:50 GMT 2022
 */

package com.github.relayjdbc.parameters;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.relayjdbc.parameters.CharStreamParameter;
import java.io.ObjectInput;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.sql.rowset.serial.SerialClob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharStreamParameter_ESTest extends CharStreamParameter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharStreamParameter charStreamParameter0 = new CharStreamParameter(charArray0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      charStreamParameter0.setParameter(preparedStatement0, (-1081));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharStreamParameter charStreamParameter0 = new CharStreamParameter((Reader) null, 116L);
      charStreamParameter0.getValue();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#|s]V$KHOMa^uD");
      CharStreamParameter charStreamParameter0 = new CharStreamParameter(stringReader0, 60L);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CharStreamParameter charStreamParameter0 = null;
      try {
        charStreamParameter0 = new CharStreamParameter(pipedReader0, 3167L);
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("com.github.relayjdbc.util.SQLExceptionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(2004);
      CharStreamParameter charStreamParameter0 = null;
      try {
        charStreamParameter0 = new CharStreamParameter(pipedReader0);
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("com.github.relayjdbc.util.SQLExceptionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[0];
      SerialClob serialClob0 = new SerialClob(charArray0);
      Reader reader0 = serialClob0.getCharacterStream();
      CharStreamParameter charStreamParameter0 = new CharStreamParameter(reader0);
      charStreamParameter0.toString();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharStreamParameter charStreamParameter0 = new CharStreamParameter(charArray0);
      charStreamParameter0.getValue();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[0];
      SerialClob serialClob0 = new SerialClob(charArray0);
      Reader reader0 = serialClob0.getCharacterStream();
      CharStreamParameter charStreamParameter0 = new CharStreamParameter(reader0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      charStreamParameter0.writeExternal(objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharStreamParameter charStreamParameter0 = new CharStreamParameter(charArray0);
      // Undeclared exception!
      try { 
        charStreamParameter0.setParameter((PreparedStatement) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.parameters.CharStreamParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharStreamParameter charStreamParameter0 = new CharStreamParameter();
      // Undeclared exception!
      try { 
        charStreamParameter0.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.parameters.CharStreamParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharStreamParameter charStreamParameter0 = null;
      try {
        charStreamParameter0 = new CharStreamParameter(pipedReader0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }
}
