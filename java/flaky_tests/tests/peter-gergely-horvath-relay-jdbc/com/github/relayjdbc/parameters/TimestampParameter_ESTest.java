/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 16:56:22 GMT 2022
 */

package com.github.relayjdbc.parameters;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.relayjdbc.parameters.TimestampParameter;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.sql.PreparedStatement;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.Calendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimestampParameter_ESTest extends TimestampParameter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimestampParameter timestampParameter0 = new TimestampParameter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Timestamp: null", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      timestampParameter0.writeExternal(objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimestampParameter timestampParameter0 = new TimestampParameter();
      Timestamp timestamp0 = timestampParameter0.getValue();
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Timestamp timestamp0 = new Timestamp(0L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), 1554, (-1), 1669);
      TimestampParameter timestampParameter0 = new TimestampParameter(timestamp0, mockGregorianCalendar0);
      Timestamp timestamp1 = timestampParameter0.getValue();
      assertEquals(0, timestamp1.getNanos());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Timestamp timestamp0 = new Timestamp(0L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3732), 0, 0, (-3732), (-1121));
      TimestampParameter timestampParameter0 = new TimestampParameter(timestamp0, mockGregorianCalendar0);
      Calendar calendar0 = timestampParameter0.getCalendar();
      assertSame(mockGregorianCalendar0, calendar0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimestampParameter timestampParameter0 = new TimestampParameter();
      // Undeclared exception!
      try { 
        timestampParameter0.setParameter((PreparedStatement) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.parameters.TimestampParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      Instant instant0 = MockInstant.ofEpochSecond((-185L), (-185L));
      Timestamp timestamp0 = Timestamp.from(instant0);
      TimestampParameter timestampParameter0 = new TimestampParameter(timestamp0, calendar0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      timestampParameter0.setParameter(preparedStatement0, 0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      Instant instant0 = MockInstant.ofEpochSecond((-185L), (-185L));
      Timestamp timestamp0 = Timestamp.from(instant0);
      TimestampParameter timestampParameter0 = new TimestampParameter(timestamp0, calendar0);
      // Undeclared exception!
      try { 
        timestampParameter0.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.parameters.TimestampParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Timestamp timestamp0 = new Timestamp(1L);
      Locale locale0 = Locale.ROOT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      TimestampParameter timestampParameter0 = new TimestampParameter(timestamp0, mockGregorianCalendar0);
      Timestamp timestamp1 = timestampParameter0.getValue();
      assertSame(timestamp1, timestamp0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimestampParameter timestampParameter0 = new TimestampParameter();
      // Undeclared exception!
      try { 
        timestampParameter0.writeExternal((ObjectOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.relayjdbc.parameters.TimestampParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      Instant instant0 = MockInstant.ofEpochSecond((-185L), (-185L));
      Timestamp timestamp0 = Timestamp.from(instant0);
      TimestampParameter timestampParameter0 = new TimestampParameter(timestamp0, calendar0);
      String string0 = timestampParameter0.toString();
      assertEquals("Timestamp: 1969-12-31 23:56:54.999999815", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimestampParameter timestampParameter0 = new TimestampParameter();
      Calendar calendar0 = timestampParameter0.getCalendar();
      assertNull(calendar0);
  }
}
