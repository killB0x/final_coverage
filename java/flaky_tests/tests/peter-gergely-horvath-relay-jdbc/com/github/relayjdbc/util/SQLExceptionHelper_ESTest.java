/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 16:08:05 GMT 2022
 */

package com.github.relayjdbc.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.relayjdbc.util.SQLExceptionHelper;
import java.sql.SQLException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SQLExceptionHelper_ESTest extends SQLExceptionHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      MockThrowable mockThrowable1 = new MockThrowable((String) null, mockThrowable0);
      SQLException sQLException0 = SQLExceptionHelper.wrap((Throwable) mockThrowable1);
      assertEquals("java.sql.SQLException", sQLException0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLException sQLException0 = new SQLException("wFU#TB3{+LRSJ!P;8Eb", (String) null);
      SQLException sQLException1 = new SQLException("", "", 1, sQLException0);
      SQLException sQLException2 = SQLExceptionHelper.wrap(sQLException1);
      assertSame(sQLException2, sQLException1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLException sQLException0 = new SQLException("08003", (String) null, (-1));
      SQLException sQLException1 = SQLExceptionHelper.wrap(sQLException0);
      assertSame(sQLException1, sQLException0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLException sQLException0 = new SQLException("", "", 2064);
      SQLException sQLException1 = SQLExceptionHelper.wrap((Throwable) sQLException0);
      assertSame(sQLException1, sQLException0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLException sQLException0 = new SQLException("08003", (String) null, (-1));
      SQLException sQLException1 = SQLExceptionHelper.wrap((Throwable) sQLException0);
      assertSame(sQLException1, sQLException0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLException sQLException1 = new SQLException(sQLException0);
      sQLException0.initCause(sQLException1);
      // Undeclared exception!
      SQLExceptionHelper.wrap(sQLException0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      MockThrowable mockThrowable0 = new MockThrowable(sQLException0);
      sQLException0.initCause(mockThrowable0);
      // Undeclared exception!
      SQLExceptionHelper.wrap((Throwable) sQLException0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLException sQLException1 = SQLExceptionHelper.wrap(sQLException0);
      assertSame(sQLException1, sQLException0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLException sQLException0 = SQLExceptionHelper.wrap((SQLException) null);
      assertNull(sQLException0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLException sQLException0 = SQLExceptionHelper.wrap((Throwable) null);
      assertNull(sQLException0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLExceptionHelper sQLExceptionHelper0 = new SQLExceptionHelper();
  }
}
