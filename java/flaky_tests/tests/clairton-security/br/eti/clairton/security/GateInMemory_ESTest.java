/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 13:12:14 GMT 2022
 */

package br.eti.clairton.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.eti.clairton.security.GateInMemory;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GateInMemory_ESTest extends GateInMemory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<String, Map<String, Map<String, List<String>>>> hashMap0 = new HashMap<String, Map<String, Map<String, List<String>>>>();
      HashMap<String, Map<String, List<String>>> hashMap1 = new HashMap<String, Map<String, List<String>>>();
      HashMap<String, List<String>> hashMap2 = new HashMap<String, List<String>>();
      hashMap1.put("!f8cG7!y{8SQJ?", hashMap2);
      hashMap0.put("", hashMap1);
      GateInMemory gateInMemory0 = new GateInMemory(hashMap0);
      // Undeclared exception!
      try { 
        gateInMemory0.isOpen("", "!f8cG7!y{8SQJ?", "", "h}q>uE=P.t_,BhxlSz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, Map<String, Map<String, List<String>>>> hashMap0 = new HashMap<String, Map<String, Map<String, List<String>>>>();
      HashMap<String, Map<String, List<String>>> hashMap1 = new HashMap<String, Map<String, List<String>>>();
      hashMap0.put("", hashMap1);
      GateInMemory gateInMemory0 = new GateInMemory(hashMap0);
      // Undeclared exception!
      try { 
        gateInMemory0.isOpen("", "ny~l3`", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.eti.clairton.security.GateInMemory", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, Map<String, Map<String, List<String>>>> hashMap0 = new HashMap<String, Map<String, Map<String, List<String>>>>();
      GateInMemory gateInMemory0 = new GateInMemory(hashMap0);
      Boolean boolean0 = gateInMemory0.isOpen((String) null, "pjb", (String) null, "7u98]`&>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, Map<String, Map<String, List<String>>>> hashMap0 = new HashMap<String, Map<String, Map<String, List<String>>>>();
      HashMap<String, Map<String, List<String>>> hashMap1 = new HashMap<String, Map<String, List<String>>>();
      HashMap<String, List<String>> hashMap2 = new HashMap<String, List<String>>();
      hashMap1.put("", hashMap2);
      hashMap0.put("", hashMap1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      hashMap2.put("", linkedList0);
      GateInMemory gateInMemory0 = new GateInMemory(hashMap0);
      Boolean boolean0 = gateInMemory0.isOpen("", "", "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<String, Map<String, Map<String, List<String>>>> hashMap0 = new HashMap<String, Map<String, Map<String, List<String>>>>();
      HashMap<String, Map<String, List<String>>> hashMap1 = new HashMap<String, Map<String, List<String>>>();
      HashMap<String, List<String>> hashMap2 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap2.put("", linkedList0);
      hashMap1.put("", hashMap2);
      hashMap0.put("", hashMap1);
      GateInMemory gateInMemory0 = new GateInMemory(hashMap0);
      Boolean boolean0 = gateInMemory0.isOpen("", "", "", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GateInMemory gateInMemory0 = new GateInMemory();
  }
}
