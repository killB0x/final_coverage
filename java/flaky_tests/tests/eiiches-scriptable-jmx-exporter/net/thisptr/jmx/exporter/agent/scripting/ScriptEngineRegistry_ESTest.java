/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 23:38:25 GMT 2022
 */

package net.thisptr.jmx.exporter.agent.scripting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.thisptr.jmx.exporter.agent.scripting.ScriptEngine;
import net.thisptr.jmx.exporter.agent.scripting.ScriptEngineRegistry;
import net.thisptr.jmx.exporter.agent.scripting.janino.JaninoScriptEngine;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScriptEngineRegistry_ESTest extends ScriptEngineRegistry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ScriptEngineRegistry scriptEngineRegistry0 = new ScriptEngineRegistry();
      // Undeclared exception!
      try { 
        scriptEngineRegistry0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ScriptEngineRegistry scriptEngineRegistry0 = new ScriptEngineRegistry();
      // Undeclared exception!
      try { 
        scriptEngineRegistry0.get("2L>jx-e)j3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \"2L>jx-e)j3\" is not registered
         //
         verifyException("net.thisptr.jmx.exporter.agent.scripting.ScriptEngineRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ScriptEngineRegistry scriptEngineRegistry0 = ScriptEngineRegistry.getInstance();
      // Undeclared exception!
      try { 
        scriptEngineRegistry0.add("", (ScriptEngine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ScriptEngineRegistry scriptEngineRegistry0 = new ScriptEngineRegistry();
      JaninoScriptEngine janinoScriptEngine0 = new JaninoScriptEngine();
      scriptEngineRegistry0.add("\"%s\" is not registered", janinoScriptEngine0);
      ScriptEngine scriptEngine0 = scriptEngineRegistry0.get("\"%s\" is not registered");
      assertSame(scriptEngine0, janinoScriptEngine0);
  }
}
