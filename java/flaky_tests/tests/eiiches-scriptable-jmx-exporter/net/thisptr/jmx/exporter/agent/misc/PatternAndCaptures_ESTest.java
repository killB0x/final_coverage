/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 23:26:36 GMT 2022
 */

package net.thisptr.jmx.exporter.agent.misc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.PatternSyntaxException;
import net.thisptr.jmx.exporter.agent.misc.PatternAndCaptures;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PatternAndCaptures_ESTest extends PatternAndCaptures_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PatternAndCaptures patternAndCaptures0 = PatternAndCaptures.compile(" bg\"Z5");
      patternAndCaptures0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PatternAndCaptures patternAndCaptures0 = PatternAndCaptures.compile("bg?rwZ5");
      boolean boolean0 = patternAndCaptures0.matches((CharSequence) "bg?rwZ5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PatternAndCaptures patternAndCaptures0 = PatternAndCaptures.compile("~!Q");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        patternAndCaptures0.matches((CharSequence) null, (Map<String, String>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PatternAndCaptures patternAndCaptures0 = PatternAndCaptures.compile("x'f-x,dp");
      // Undeclared exception!
      try { 
        patternAndCaptures0.matches((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        PatternAndCaptures.compile("[w1");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 3
         // [w1
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        PatternAndCaptures.compile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PatternAndCaptures patternAndCaptures0 = PatternAndCaptures.compile("I");
      PatternAndCaptures patternAndCaptures1 = PatternAndCaptures.compile("f5W]3r-hW01nzqd7Z@");
      boolean boolean0 = patternAndCaptures1.equals(patternAndCaptures0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PatternAndCaptures patternAndCaptures0 = PatternAndCaptures.compile("net.thisptr.jmx.exporter.agent.misc.PatternAndCaptures");
      boolean boolean0 = patternAndCaptures0.matches((CharSequence) "net.thisptr.jmx.exporter.agent.misc.PatternAndCaptures", (Map<String, String>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PatternAndCaptures patternAndCaptures0 = PatternAndCaptures.compile("");
      boolean boolean0 = patternAndCaptures0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PatternAndCaptures patternAndCaptures0 = PatternAndCaptures.compile("");
      boolean boolean0 = patternAndCaptures0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PatternAndCaptures patternAndCaptures0 = PatternAndCaptures.compile("net.thisptr.jmx.exporter.agent.misc.PatternAndCaptures");
      boolean boolean0 = patternAndCaptures0.equals(patternAndCaptures0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PatternAndCaptures patternAndCaptures0 = PatternAndCaptures.compile("");
      PatternAndCaptures patternAndCaptures1 = PatternAndCaptures.compile("");
      boolean boolean0 = patternAndCaptures1.equals(patternAndCaptures0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PatternAndCaptures patternAndCaptures0 = PatternAndCaptures.compile("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      boolean boolean0 = patternAndCaptures0.matches((CharSequence) "", (Map<String, String>) hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PatternAndCaptures patternAndCaptures0 = PatternAndCaptures.compile("$|7moqV&'/IYV~R6`0T");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      boolean boolean0 = patternAndCaptures0.matches((CharSequence) "", (Map<String, String>) hashMap0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PatternAndCaptures patternAndCaptures0 = PatternAndCaptures.compile("");
      boolean boolean0 = patternAndCaptures0.matches((CharSequence) "");
      assertTrue(boolean0);
  }
}
