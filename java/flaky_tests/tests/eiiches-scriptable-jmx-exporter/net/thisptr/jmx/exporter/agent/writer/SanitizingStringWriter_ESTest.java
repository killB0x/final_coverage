/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 23:29:16 GMT 2022
 */

package net.thisptr.jmx.exporter.agent.writer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.thisptr.jmx.exporter.agent.writer.SanitizingStringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SanitizingStringWriter_ESTest extends SanitizingStringWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SanitizingStringWriter sanitizingStringWriter0 = SanitizingStringWriter.getInstance();
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        sanitizingStringWriter0.write("t9%IjKa]O!#A", byteArray0, (byte)73);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 73 out of bounds for length 4
         //
         verifyException("net.thisptr.jmx.exporter.agent.writer.SanitizingStringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SanitizingStringWriter sanitizingStringWriter0 = SanitizingStringWriter.getInstance();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        sanitizingStringWriter0.write("Z+DL&_Og;K@RS|Rw", byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.thisptr.jmx.exporter.agent.writer.SanitizingStringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SanitizingStringWriter sanitizingStringWriter0 = new SanitizingStringWriter();
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        sanitizingStringWriter0.write("VzA?}W_", byteArray0, (byte)95);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 95 out of bounds for length 8
         //
         verifyException("net.thisptr.jmx.exporter.agent.writer.SanitizingStringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SanitizingStringWriter sanitizingStringWriter0 = SanitizingStringWriter.getInstance();
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        sanitizingStringWriter0.write("aM[r>tv`", byteArray0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 8
         //
         verifyException("net.thisptr.jmx.exporter.agent.writer.SanitizingStringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SanitizingStringWriter sanitizingStringWriter0 = SanitizingStringWriter.getInstance();
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        sanitizingStringWriter0.write("", byteArray0, (-1684));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1684 out of bounds for length 7
         //
         verifyException("net.thisptr.jmx.exporter.agent.writer.SanitizingStringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SanitizingStringWriter sanitizingStringWriter0 = SanitizingStringWriter.getInstance();
      // Undeclared exception!
      try { 
        sanitizingStringWriter0.write("C4+~}n", (byte[]) null, 122);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.thisptr.jmx.exporter.agent.writer.SanitizingStringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SanitizingStringWriter sanitizingStringWriter0 = new SanitizingStringWriter();
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        sanitizingStringWriter0.write("w.0B%1];.q1<", byteArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("net.thisptr.jmx.exporter.agent.writer.SanitizingStringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SanitizingStringWriter sanitizingStringWriter0 = new SanitizingStringWriter();
      byte[] byteArray0 = new byte[8];
      int int0 = sanitizingStringWriter0.write("uU:", byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)117, (byte)85, (byte)58, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SanitizingStringWriter sanitizingStringWriter0 = new SanitizingStringWriter();
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        sanitizingStringWriter0.write("_1N)wS#s[p3IAM", byteArray0, (byte)26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 26 out of bounds for length 4
         //
         verifyException("net.thisptr.jmx.exporter.agent.writer.SanitizingStringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SanitizingStringWriter sanitizingStringWriter0 = new SanitizingStringWriter();
      byte[] byteArray0 = new byte[8];
      int int0 = sanitizingStringWriter0.write("8B", byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)95, (byte)56, (byte)66, (byte)95, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SanitizingStringWriter sanitizingStringWriter0 = new SanitizingStringWriter();
      byte[] byteArray0 = new byte[4];
      int int0 = sanitizingStringWriter0.write("", byteArray0, (byte)0);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SanitizingStringWriter sanitizingStringWriter0 = new SanitizingStringWriter();
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        sanitizingStringWriter0.write("8B", byteArray0, (byte)56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 56 out of bounds for length 4
         //
         verifyException("net.thisptr.jmx.exporter.agent.writer.SanitizingStringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SanitizingStringWriter sanitizingStringWriter0 = SanitizingStringWriter.getInstance();
      // Undeclared exception!
      try { 
        sanitizingStringWriter0.expectedSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.thisptr.jmx.exporter.agent.writer.SanitizingStringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SanitizingStringWriter sanitizingStringWriter0 = new SanitizingStringWriter();
      int int0 = sanitizingStringWriter0.expectedSize("8B");
      assertEquals(4, int0);
  }
}
