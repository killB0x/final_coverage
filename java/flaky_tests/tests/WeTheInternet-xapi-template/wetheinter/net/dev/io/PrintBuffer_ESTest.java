/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 16:31:10 GMT 2022
 */

package wetheinter.net.dev.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wetheinter.net.dev.io.PrintBuffer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PrintBuffer_ESTest extends PrintBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = null;
      PrintBuffer printBuffer0 = new PrintBuffer((StringBuilder) null);
      PrintBuffer printBuffer1 = new PrintBuffer(printBuffer0);
      Object object0 = null;
      // Undeclared exception!
      try { 
        printBuffer0.indentln((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wetheinter.net.dev.io.PrintBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      PrintBuffer printBuffer1 = new PrintBuffer((StringBuilder) null);
      // Undeclared exception!
      try { 
        printBuffer1.addToEnd(printBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wetheinter.net.dev.io.PrintBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer((StringBuilder) null);
      PrintBuffer printBuffer1 = new PrintBuffer((StringBuilder) null);
      PrintBuffer printBuffer2 = new PrintBuffer(printBuffer1);
      PrintBuffer printBuffer3 = new PrintBuffer(printBuffer2);
      printBuffer2.indentln((Object) printBuffer3);
      printBuffer2.target = null;
      // Undeclared exception!
      try { 
        printBuffer2.append(1087.08931498296);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wetheinter.net.dev.io.PrintBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      PrintBuffer printBuffer0 = new PrintBuffer((StringBuilder) null);
      // Undeclared exception!
      try { 
        printBuffer0.println();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wetheinter.net.dev.io.PrintBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer((StringBuilder) null);
      // Undeclared exception!
      try { 
        printBuffer0.append(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wetheinter.net.dev.io.PrintBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      PrintBuffer printBuffer1 = new PrintBuffer();
      printBuffer1.append(2621.9277F);
      printBuffer1.tail = null;
      printBuffer1.addToBeginning(printBuffer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      PrintBuffer.PrintStack printBuffer_PrintStack0 = printBuffer0.head;
      PrintBuffer.PrintStack printBuffer_PrintStack1 = printBuffer_PrintStack0.push("0rzS$#bdDNEWP%\"C", printBuffer0);
      printBuffer0.tail = printBuffer_PrintStack1;
      printBuffer0.toString();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      printBuffer0.target = null;
      // Undeclared exception!
      try { 
        printBuffer0.append(1019L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wetheinter.net.dev.io.PrintBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer((StringBuilder) null);
      // Undeclared exception!
      try { 
        printBuffer0.indentln("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wetheinter.net.dev.io.PrintBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = new PrintBuffer(printBuffer0);
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotNull(printBuffer1);
      
      PrintBuffer printBuffer2 = new PrintBuffer();
      printBuffer1.footer();
      int int0 = 0;
      printBuffer1.append(0);
      printBuffer1.toString();
      PrintBuffer printBuffer3 = printBuffer1.addToBeginning(printBuffer2);
      printBuffer3.outdent();
      PrintBuffer printBuffer4 = new PrintBuffer(printBuffer1);
      printBuffer0.addToEnd(printBuffer4);
      String string0 = "";
      printBuffer2.append((float) 0);
      printBuffer2.println("");
      // Undeclared exception!
      printBuffer0.toString();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      PrintBuffer printBuffer1 = new PrintBuffer((StringBuilder) null);
      // Undeclared exception!
      try { 
        printBuffer1.append((CharSequence) null, 6, (-183));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wetheinter.net.dev.io.PrintBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      printBuffer0.target = null;
      PrintBuffer.PrintStack printBuffer_PrintStack0 = printBuffer0.tail;
      printBuffer0.tail = printBuffer_PrintStack0;
      printBuffer0.toString();
      // Undeclared exception!
      try { 
        printBuffer0.append((CharSequence) "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wetheinter.net.dev.io.PrintBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = null;
      PrintBuffer printBuffer0 = new PrintBuffer((StringBuilder) null);
      // Undeclared exception!
      try { 
        printBuffer0.append((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wetheinter.net.dev.io.PrintBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer((StringBuilder) null);
      PrintBuffer printBuffer1 = printBuffer0.indent();
      // Undeclared exception!
      try { 
        printBuffer1.append("qP33Qm;/8eQc=#sI/S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wetheinter.net.dev.io.PrintBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      printBuffer0.header();
      // Undeclared exception!
      try { 
        printBuffer0.append((char[]) null, (-4104), (-4104));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      printBuffer0.append(1);
      printBuffer0.target = null;
      String string0 = PrintBuffer.INDENT;
      // Undeclared exception!
      try { 
        printBuffer0.println((CharSequence) "  ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wetheinter.net.dev.io.PrintBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      // Undeclared exception!
      try { 
        printBuffer0.append((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      PrintBuffer.PrintStack printBuffer_PrintStack0 = printBuffer0.head;
      printBuffer0.head = printBuffer_PrintStack0;
      printBuffer_PrintStack0.push("0rzS$EbdDNEWP%\"C", printBuffer0);
      printBuffer0.toString();
      boolean boolean0 = false;
      printBuffer0.append(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      PrintBuffer printBuffer1 = new PrintBuffer((StringBuilder) null);
      // Undeclared exception!
      try { 
        printBuffer1.println("6Wu;|DzaV]5SUO7C");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wetheinter.net.dev.io.PrintBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer.PrintStack printBuffer_PrintStack0 = printBuffer0.head;
      assertNotNull(printBuffer_PrintStack0);
      
      PrintBuffer.PrintStack printBuffer_PrintStack1 = printBuffer_PrintStack0.push("0rzS$EbdDNEWP%\"C", printBuffer0);
      assertFalse(printBuffer_PrintStack1.equals((Object)printBuffer_PrintStack0));
      assertNotSame(printBuffer_PrintStack0, printBuffer_PrintStack1);
      assertNotSame(printBuffer_PrintStack1, printBuffer_PrintStack0);
      assertNotNull(printBuffer_PrintStack1);
      
      printBuffer0.tail = printBuffer_PrintStack1;
      printBuffer0.toString();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = new PrintBuffer(printBuffer0);
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotNull(printBuffer1);
      
      PrintBuffer printBuffer2 = printBuffer1.indent();
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer2, printBuffer0);
      assertSame(printBuffer2, printBuffer1);
      assertNotNull(printBuffer2);
      
      PrintBuffer printBuffer3 = printBuffer1.outdent();
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer3);
      assertSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer3, printBuffer0);
      assertSame(printBuffer3, printBuffer1);
      assertSame(printBuffer3, printBuffer2);
      assertNotNull(printBuffer3);
      
      String string0 = printBuffer1.toString();
      assertEquals("", string0);
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer3);
      assertSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotNull(string0);
      
      PrintBuffer printBuffer4 = printBuffer2.println((CharSequence) "");
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer4.equals((Object)printBuffer0));
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer4);
      assertSame(printBuffer1, printBuffer3);
      assertSame(printBuffer1, printBuffer4);
      assertSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer0);
      assertSame(printBuffer2, printBuffer3);
      assertNotSame(printBuffer2, printBuffer0);
      assertSame(printBuffer2, printBuffer1);
      assertSame(printBuffer2, printBuffer4);
      assertSame(printBuffer4, printBuffer3);
      assertNotSame(printBuffer4, printBuffer0);
      assertSame(printBuffer4, printBuffer1);
      assertSame(printBuffer4, printBuffer2);
      assertNotNull(printBuffer4);
      
      printBuffer0.target = null;
      // Undeclared exception!
      try { 
        printBuffer0.append(824);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wetheinter.net.dev.io.PrintBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = null;
      PrintBuffer printBuffer0 = new PrintBuffer((StringBuilder) null);
      assertNotNull(printBuffer0);
      
      // Undeclared exception!
      try { 
        printBuffer0.append('c');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wetheinter.net.dev.io.PrintBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = new PrintBuffer(printBuffer0);
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotNull(printBuffer1);
      
      // Undeclared exception!
      try { 
        printBuffer1.addToBeginning((PrintBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wetheinter.net.dev.io.PrintBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      StringBuilder stringBuilder0 = new StringBuilder(256);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, '<');
      assertEquals("<", stringBuilder0.toString());
      assertEquals("<", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.append(0L);
      assertEquals("<0", stringBuilder0.toString());
      assertEquals("<0", stringBuilder1.toString());
      assertEquals("<0", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      
      PrintBuffer printBuffer1 = new PrintBuffer(stringBuilder2);
      assertEquals("<0", stringBuilder0.toString());
      assertEquals("<0", stringBuilder1.toString());
      assertEquals("<0", stringBuilder2.toString());
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotNull(printBuffer1);
      
      PrintBuffer printBuffer2 = printBuffer0.addToBeginning(printBuffer1);
      assertEquals("<0", stringBuilder0.toString());
      assertEquals("<0", stringBuilder1.toString());
      assertEquals("<0", stringBuilder2.toString());
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer2, printBuffer1);
      assertSame(printBuffer2, printBuffer0);
      assertNotNull(printBuffer2);
      
      PrintBuffer printBuffer3 = new PrintBuffer(printBuffer0);
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer3.equals((Object)printBuffer2));
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer1));
      assertNotNull(printBuffer3);
      
      PrintBuffer printBuffer4 = printBuffer0.indent();
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer4, printBuffer0);
      assertSame(printBuffer4, printBuffer2);
      assertNotSame(printBuffer4, printBuffer1);
      assertNotSame(printBuffer4, printBuffer3);
      assertNotNull(printBuffer4);
      
      PrintBuffer printBuffer5 = new PrintBuffer(stringBuilder0);
      assertEquals("<0", stringBuilder0.toString());
      assertFalse(printBuffer5.equals((Object)printBuffer4));
      assertFalse(printBuffer5.equals((Object)printBuffer0));
      assertFalse(printBuffer5.equals((Object)printBuffer1));
      assertFalse(printBuffer5.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer2));
      assertNotNull(printBuffer5);
      
      PrintBuffer printBuffer6 = new PrintBuffer();
      assertFalse(printBuffer6.equals((Object)printBuffer2));
      assertFalse(printBuffer6.equals((Object)printBuffer3));
      assertFalse(printBuffer6.equals((Object)printBuffer0));
      assertFalse(printBuffer6.equals((Object)printBuffer1));
      assertFalse(printBuffer6.equals((Object)printBuffer4));
      assertFalse(printBuffer6.equals((Object)printBuffer5));
      assertNotNull(printBuffer6);
      
      PrintBuffer printBuffer7 = printBuffer6.append('<');
      assertFalse(printBuffer6.equals((Object)printBuffer2));
      assertFalse(printBuffer6.equals((Object)printBuffer3));
      assertFalse(printBuffer6.equals((Object)printBuffer0));
      assertFalse(printBuffer6.equals((Object)printBuffer1));
      assertFalse(printBuffer6.equals((Object)printBuffer4));
      assertFalse(printBuffer6.equals((Object)printBuffer5));
      assertFalse(printBuffer7.equals((Object)printBuffer1));
      assertFalse(printBuffer7.equals((Object)printBuffer3));
      assertFalse(printBuffer7.equals((Object)printBuffer2));
      assertFalse(printBuffer7.equals((Object)printBuffer4));
      assertFalse(printBuffer7.equals((Object)printBuffer0));
      assertFalse(printBuffer7.equals((Object)printBuffer5));
      assertNotSame(printBuffer6, printBuffer2);
      assertNotSame(printBuffer6, printBuffer3);
      assertNotSame(printBuffer6, printBuffer0);
      assertNotSame(printBuffer6, printBuffer1);
      assertNotSame(printBuffer6, printBuffer4);
      assertSame(printBuffer6, printBuffer7);
      assertNotSame(printBuffer6, printBuffer5);
      assertSame(printBuffer7, printBuffer6);
      assertNotSame(printBuffer7, printBuffer1);
      assertNotSame(printBuffer7, printBuffer3);
      assertNotSame(printBuffer7, printBuffer2);
      assertNotSame(printBuffer7, printBuffer4);
      assertNotSame(printBuffer7, printBuffer0);
      assertNotSame(printBuffer7, printBuffer5);
      assertNotNull(printBuffer7);
      
      String string0 = printBuffer6.toString();
      assertEquals("<", string0);
      assertFalse(printBuffer6.equals((Object)printBuffer2));
      assertFalse(printBuffer6.equals((Object)printBuffer3));
      assertFalse(printBuffer6.equals((Object)printBuffer0));
      assertFalse(printBuffer6.equals((Object)printBuffer1));
      assertFalse(printBuffer6.equals((Object)printBuffer4));
      assertFalse(printBuffer6.equals((Object)printBuffer5));
      assertNotSame(printBuffer6, printBuffer2);
      assertNotSame(printBuffer6, printBuffer3);
      assertNotSame(printBuffer6, printBuffer0);
      assertNotSame(printBuffer6, printBuffer1);
      assertNotSame(printBuffer6, printBuffer4);
      assertSame(printBuffer6, printBuffer7);
      assertNotSame(printBuffer6, printBuffer5);
      assertNotNull(string0);
      
      String string1 = printBuffer5.toString();
      assertEquals("<0", string1);
      assertEquals("<0", stringBuilder0.toString());
      assertFalse(printBuffer5.equals((Object)printBuffer4));
      assertFalse(printBuffer5.equals((Object)printBuffer0));
      assertFalse(printBuffer5.equals((Object)printBuffer1));
      assertFalse(printBuffer5.equals((Object)printBuffer6));
      assertFalse(printBuffer5.equals((Object)printBuffer7));
      assertFalse(printBuffer5.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer2));
      assertFalse(string1.equals((Object)string0));
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertNotSame(printBuffer5, printBuffer4);
      assertNotSame(printBuffer5, printBuffer0);
      assertNotSame(printBuffer5, printBuffer1);
      assertNotSame(printBuffer5, printBuffer6);
      assertNotSame(printBuffer5, printBuffer7);
      assertNotSame(printBuffer5, printBuffer3);
      assertNotSame(printBuffer5, printBuffer2);
      assertNotNull(string1);
      
      PrintBuffer printBuffer8 = printBuffer4.append((Object) printBuffer6);
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer0.equals((Object)printBuffer6));
      assertFalse(printBuffer0.equals((Object)printBuffer7));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer4.equals((Object)printBuffer6));
      assertFalse(printBuffer4.equals((Object)printBuffer5));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer7));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertFalse(printBuffer6.equals((Object)printBuffer2));
      assertFalse(printBuffer6.equals((Object)printBuffer3));
      assertFalse(printBuffer6.equals((Object)printBuffer0));
      assertFalse(printBuffer6.equals((Object)printBuffer1));
      assertFalse(printBuffer6.equals((Object)printBuffer4));
      assertFalse(printBuffer6.equals((Object)printBuffer5));
      assertFalse(printBuffer8.equals((Object)printBuffer5));
      assertFalse(printBuffer8.equals((Object)printBuffer7));
      assertFalse(printBuffer8.equals((Object)printBuffer3));
      assertFalse(printBuffer8.equals((Object)printBuffer6));
      assertFalse(printBuffer8.equals((Object)printBuffer1));
      assertSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer5);
      assertNotSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer7);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer8);
      assertSame(printBuffer4, printBuffer0);
      assertNotSame(printBuffer4, printBuffer6);
      assertNotSame(printBuffer4, printBuffer5);
      assertSame(printBuffer4, printBuffer2);
      assertNotSame(printBuffer4, printBuffer1);
      assertSame(printBuffer4, printBuffer8);
      assertNotSame(printBuffer4, printBuffer7);
      assertNotSame(printBuffer4, printBuffer3);
      assertNotSame(printBuffer6, printBuffer2);
      assertNotSame(printBuffer6, printBuffer3);
      assertNotSame(printBuffer6, printBuffer0);
      assertNotSame(printBuffer6, printBuffer1);
      assertNotSame(printBuffer6, printBuffer4);
      assertSame(printBuffer6, printBuffer7);
      assertNotSame(printBuffer6, printBuffer8);
      assertNotSame(printBuffer6, printBuffer5);
      assertNotSame(printBuffer8, printBuffer5);
      assertNotSame(printBuffer8, printBuffer7);
      assertNotSame(printBuffer8, printBuffer3);
      assertNotSame(printBuffer8, printBuffer6);
      assertNotSame(printBuffer8, printBuffer1);
      assertSame(printBuffer8, printBuffer2);
      assertSame(printBuffer8, printBuffer0);
      assertSame(printBuffer8, printBuffer4);
      assertNotNull(printBuffer8);
      
      PrintBuffer printBuffer9 = printBuffer8.indent();
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer0.equals((Object)printBuffer6));
      assertFalse(printBuffer0.equals((Object)printBuffer7));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer4.equals((Object)printBuffer6));
      assertFalse(printBuffer4.equals((Object)printBuffer5));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer7));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertFalse(printBuffer6.equals((Object)printBuffer2));
      assertFalse(printBuffer6.equals((Object)printBuffer3));
      assertFalse(printBuffer6.equals((Object)printBuffer0));
      assertFalse(printBuffer6.equals((Object)printBuffer1));
      assertFalse(printBuffer6.equals((Object)printBuffer4));
      assertFalse(printBuffer6.equals((Object)printBuffer8));
      assertFalse(printBuffer6.equals((Object)printBuffer5));
      assertFalse(printBuffer8.equals((Object)printBuffer5));
      assertFalse(printBuffer8.equals((Object)printBuffer7));
      assertFalse(printBuffer8.equals((Object)printBuffer3));
      assertFalse(printBuffer8.equals((Object)printBuffer6));
      assertFalse(printBuffer8.equals((Object)printBuffer1));
      assertFalse(printBuffer9.equals((Object)printBuffer5));
      assertFalse(printBuffer9.equals((Object)printBuffer6));
      assertFalse(printBuffer9.equals((Object)printBuffer1));
      assertFalse(printBuffer9.equals((Object)printBuffer7));
      assertFalse(printBuffer9.equals((Object)printBuffer3));
      assertSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer5);
      assertNotSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer7);
      assertSame(printBuffer0, printBuffer9);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer8);
      assertSame(printBuffer4, printBuffer0);
      assertSame(printBuffer4, printBuffer9);
      assertNotSame(printBuffer4, printBuffer6);
      assertNotSame(printBuffer4, printBuffer5);
      assertSame(printBuffer4, printBuffer2);
      assertNotSame(printBuffer4, printBuffer1);
      assertSame(printBuffer4, printBuffer8);
      assertNotSame(printBuffer4, printBuffer7);
      assertNotSame(printBuffer4, printBuffer3);
      assertNotSame(printBuffer6, printBuffer2);
      assertNotSame(printBuffer6, printBuffer3);
      assertNotSame(printBuffer6, printBuffer0);
      assertNotSame(printBuffer6, printBuffer9);
      assertNotSame(printBuffer6, printBuffer1);
      assertNotSame(printBuffer6, printBuffer4);
      assertSame(printBuffer6, printBuffer7);
      assertNotSame(printBuffer6, printBuffer8);
      assertNotSame(printBuffer6, printBuffer5);
      assertNotSame(printBuffer8, printBuffer5);
      assertNotSame(printBuffer8, printBuffer7);
      assertNotSame(printBuffer8, printBuffer3);
      assertSame(printBuffer8, printBuffer9);
      assertNotSame(printBuffer8, printBuffer6);
      assertNotSame(printBuffer8, printBuffer1);
      assertSame(printBuffer8, printBuffer2);
      assertSame(printBuffer8, printBuffer0);
      assertSame(printBuffer8, printBuffer4);
      assertSame(printBuffer9, printBuffer2);
      assertNotSame(printBuffer9, printBuffer5);
      assertSame(printBuffer9, printBuffer0);
      assertNotSame(printBuffer9, printBuffer6);
      assertSame(printBuffer9, printBuffer4);
      assertSame(printBuffer9, printBuffer8);
      assertNotSame(printBuffer9, printBuffer1);
      assertNotSame(printBuffer9, printBuffer7);
      assertNotSame(printBuffer9, printBuffer3);
      assertNotNull(printBuffer9);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PrintBuffer printBuffer10 = printBuffer4.indentln(object0);
      assertFalse(printBuffer10.equals((Object)printBuffer6));
      assertFalse(printBuffer10.equals((Object)printBuffer5));
      assertFalse(printBuffer10.equals((Object)printBuffer1));
      assertFalse(printBuffer10.equals((Object)printBuffer7));
      assertFalse(printBuffer10.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer0.equals((Object)printBuffer6));
      assertFalse(printBuffer0.equals((Object)printBuffer7));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer4.equals((Object)printBuffer6));
      assertFalse(printBuffer4.equals((Object)printBuffer5));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer7));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertSame(printBuffer10, printBuffer9);
      assertSame(printBuffer10, printBuffer0);
      assertSame(printBuffer10, printBuffer8);
      assertSame(printBuffer10, printBuffer4);
      assertNotSame(printBuffer10, printBuffer6);
      assertNotSame(printBuffer10, printBuffer5);
      assertNotSame(printBuffer10, printBuffer1);
      assertSame(printBuffer10, printBuffer2);
      assertNotSame(printBuffer10, printBuffer7);
      assertNotSame(printBuffer10, printBuffer3);
      assertSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer5);
      assertNotSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer7);
      assertSame(printBuffer0, printBuffer9);
      assertSame(printBuffer0, printBuffer10);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer8);
      assertSame(printBuffer4, printBuffer0);
      assertSame(printBuffer4, printBuffer9);
      assertNotSame(printBuffer4, printBuffer6);
      assertNotSame(printBuffer4, printBuffer5);
      assertSame(printBuffer4, printBuffer10);
      assertSame(printBuffer4, printBuffer2);
      assertNotSame(printBuffer4, printBuffer1);
      assertSame(printBuffer4, printBuffer8);
      assertNotSame(printBuffer4, printBuffer7);
      assertNotSame(printBuffer4, printBuffer3);
      assertNotNull(printBuffer10);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = printBuffer0.indent();
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
      
      PrintBuffer printBuffer2 = printBuffer0.outdent();
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer2);
      assertSame(printBuffer2, printBuffer0);
      assertSame(printBuffer2, printBuffer1);
      assertNotNull(printBuffer2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      StringBuilder stringBuilder0 = new StringBuilder(256);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, '<');
      assertEquals("<", stringBuilder0.toString());
      assertEquals("<", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.append(0L);
      assertEquals("<0", stringBuilder0.toString());
      assertEquals("<0", stringBuilder1.toString());
      assertEquals("<0", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      
      PrintBuffer printBuffer1 = new PrintBuffer(stringBuilder2);
      assertEquals("<0", stringBuilder0.toString());
      assertEquals("<0", stringBuilder1.toString());
      assertEquals("<0", stringBuilder2.toString());
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotNull(printBuffer1);
      
      PrintBuffer printBuffer2 = printBuffer0.addToBeginning(printBuffer1);
      assertEquals("<0", stringBuilder0.toString());
      assertEquals("<0", stringBuilder1.toString());
      assertEquals("<0", stringBuilder2.toString());
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer2, printBuffer1);
      assertSame(printBuffer2, printBuffer0);
      assertNotNull(printBuffer2);
      
      PrintBuffer printBuffer3 = new PrintBuffer(printBuffer0);
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer3.equals((Object)printBuffer2));
      assertFalse(printBuffer3.equals((Object)printBuffer1));
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertNotNull(printBuffer3);
      
      PrintBuffer printBuffer4 = printBuffer0.indent();
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer4, printBuffer0);
      assertSame(printBuffer4, printBuffer2);
      assertNotSame(printBuffer4, printBuffer3);
      assertNotSame(printBuffer4, printBuffer1);
      assertNotNull(printBuffer4);
      
      PrintBuffer printBuffer5 = new PrintBuffer(stringBuilder0);
      assertEquals("<0", stringBuilder0.toString());
      assertFalse(printBuffer5.equals((Object)printBuffer0));
      assertFalse(printBuffer5.equals((Object)printBuffer1));
      assertFalse(printBuffer5.equals((Object)printBuffer2));
      assertFalse(printBuffer5.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer4));
      assertNotNull(printBuffer5);
      
      PrintBuffer.PrintStack printBuffer_PrintStack0 = printBuffer5.head;
      assertNotNull(printBuffer_PrintStack0);
      
      PrintBuffer printBuffer6 = printBuffer4.outdent();
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer5));
      assertFalse(printBuffer6.equals((Object)printBuffer5));
      assertFalse(printBuffer6.equals((Object)printBuffer1));
      assertFalse(printBuffer6.equals((Object)printBuffer3));
      assertSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer5);
      assertSame(printBuffer4, printBuffer2);
      assertSame(printBuffer4, printBuffer0);
      assertNotSame(printBuffer4, printBuffer3);
      assertNotSame(printBuffer4, printBuffer1);
      assertNotSame(printBuffer4, printBuffer5);
      assertSame(printBuffer4, printBuffer6);
      assertNotSame(printBuffer6, printBuffer5);
      assertNotSame(printBuffer6, printBuffer1);
      assertSame(printBuffer6, printBuffer4);
      assertSame(printBuffer6, printBuffer0);
      assertSame(printBuffer6, printBuffer2);
      assertNotSame(printBuffer6, printBuffer3);
      assertNotNull(printBuffer6);
      
      PrintBuffer.PrintStack printBuffer_PrintStack1 = printBuffer_PrintStack0.next;
      assertNull(printBuffer_PrintStack1);
      
      printBuffer4.head = null;
      PrintBuffer printBuffer7 = printBuffer3.append(true);
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer3.equals((Object)printBuffer2));
      assertFalse(printBuffer3.equals((Object)printBuffer4));
      assertFalse(printBuffer3.equals((Object)printBuffer6));
      assertFalse(printBuffer3.equals((Object)printBuffer1));
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer5));
      assertFalse(printBuffer7.equals((Object)printBuffer4));
      assertFalse(printBuffer7.equals((Object)printBuffer0));
      assertFalse(printBuffer7.equals((Object)printBuffer6));
      assertFalse(printBuffer7.equals((Object)printBuffer1));
      assertFalse(printBuffer7.equals((Object)printBuffer5));
      assertFalse(printBuffer7.equals((Object)printBuffer2));
      assertSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer7);
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer5);
      assertSame(printBuffer3, printBuffer7);
      assertNotSame(printBuffer3, printBuffer2);
      assertNotSame(printBuffer3, printBuffer4);
      assertNotSame(printBuffer3, printBuffer6);
      assertNotSame(printBuffer3, printBuffer1);
      assertNotSame(printBuffer3, printBuffer0);
      assertNotSame(printBuffer3, printBuffer5);
      assertNotSame(printBuffer7, printBuffer4);
      assertNotSame(printBuffer7, printBuffer0);
      assertNotSame(printBuffer7, printBuffer6);
      assertNotSame(printBuffer7, printBuffer1);
      assertNotSame(printBuffer7, printBuffer5);
      assertNotSame(printBuffer7, printBuffer2);
      assertSame(printBuffer7, printBuffer3);
      assertNotNull(printBuffer7);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      PrintBuffer printBuffer8 = new PrintBuffer();
      assertFalse(printBuffer8.equals((Object)printBuffer3));
      assertFalse(printBuffer8.equals((Object)printBuffer4));
      assertFalse(printBuffer8.equals((Object)printBuffer1));
      assertFalse(printBuffer8.equals((Object)printBuffer5));
      assertFalse(printBuffer8.equals((Object)printBuffer6));
      assertFalse(printBuffer8.equals((Object)printBuffer0));
      assertFalse(printBuffer8.equals((Object)printBuffer7));
      assertFalse(printBuffer8.equals((Object)printBuffer2));
      assertNotNull(printBuffer8);
      
      // Undeclared exception!
      try { 
        printBuffer8.append(charArray0, 256, 256);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 256, end 512, length 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = new PrintBuffer(printBuffer0);
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotNull(printBuffer1);
      
      StringBuilder stringBuilder0 = new StringBuilder("{");
      assertEquals("{", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(1, 'X');
      assertEquals("{X", stringBuilder0.toString());
      assertEquals("{X", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertEquals("{Xg", stringBuilder0.toString());
      assertEquals("{Xg", stringBuilder1.toString());
      assertEquals("{Xg", stringBuilder2.toString());
      assertEquals(1, charArray0.length);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      
      PrintBuffer printBuffer2 = new PrintBuffer(stringBuilder2);
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertEquals("{Xg", stringBuilder0.toString());
      assertEquals("{Xg", stringBuilder1.toString());
      assertEquals("{Xg", stringBuilder2.toString());
      assertEquals(1, charArray0.length);
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertNotNull(printBuffer2);
      
      PrintBuffer printBuffer3 = printBuffer2.outdent();
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertEquals("{Xg", stringBuilder0.toString());
      assertEquals("{Xg", stringBuilder1.toString());
      assertEquals("{Xg", stringBuilder2.toString());
      assertEquals(1, charArray0.length);
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer1));
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(printBuffer2, printBuffer1);
      assertSame(printBuffer2, printBuffer3);
      assertNotSame(printBuffer2, printBuffer0);
      assertSame(printBuffer3, printBuffer2);
      assertNotSame(printBuffer3, printBuffer1);
      assertNotSame(printBuffer3, printBuffer0);
      assertNotNull(printBuffer3);
      
      PrintBuffer printBuffer4 = new PrintBuffer(printBuffer1);
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer4.equals((Object)printBuffer0));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertFalse(printBuffer4.equals((Object)printBuffer2));
      assertNotNull(printBuffer4);
      
      PrintBuffer printBuffer5 = new PrintBuffer();
      assertFalse(printBuffer5.equals((Object)printBuffer4));
      assertFalse(printBuffer5.equals((Object)printBuffer2));
      assertFalse(printBuffer5.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer1));
      assertFalse(printBuffer5.equals((Object)printBuffer0));
      assertNotNull(printBuffer5);
      
      PrintBuffer printBuffer6 = printBuffer5.addToEnd(printBuffer1);
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer4));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer5));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer5.equals((Object)printBuffer4));
      assertFalse(printBuffer5.equals((Object)printBuffer2));
      assertFalse(printBuffer5.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer1));
      assertFalse(printBuffer5.equals((Object)printBuffer0));
      assertFalse(printBuffer6.equals((Object)printBuffer4));
      assertFalse(printBuffer6.equals((Object)printBuffer3));
      assertFalse(printBuffer6.equals((Object)printBuffer0));
      assertFalse(printBuffer6.equals((Object)printBuffer2));
      assertFalse(printBuffer6.equals((Object)printBuffer1));
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer5);
      assertNotSame(printBuffer1, printBuffer4);
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer5);
      assertNotSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer1, printBuffer6);
      assertSame(printBuffer5, printBuffer6);
      assertNotSame(printBuffer5, printBuffer4);
      assertNotSame(printBuffer5, printBuffer2);
      assertNotSame(printBuffer5, printBuffer3);
      assertNotSame(printBuffer5, printBuffer1);
      assertNotSame(printBuffer5, printBuffer0);
      assertNotSame(printBuffer6, printBuffer4);
      assertNotSame(printBuffer6, printBuffer3);
      assertSame(printBuffer6, printBuffer5);
      assertNotSame(printBuffer6, printBuffer0);
      assertNotSame(printBuffer6, printBuffer2);
      assertNotSame(printBuffer6, printBuffer1);
      assertNotNull(printBuffer6);
      
      PrintBuffer printBuffer7 = printBuffer4.println("");
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer6));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer4));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer5));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer1.equals((Object)printBuffer6));
      assertFalse(printBuffer4.equals((Object)printBuffer6));
      assertFalse(printBuffer4.equals((Object)printBuffer5));
      assertFalse(printBuffer4.equals((Object)printBuffer0));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertFalse(printBuffer4.equals((Object)printBuffer2));
      assertFalse(printBuffer7.equals((Object)printBuffer1));
      assertFalse(printBuffer7.equals((Object)printBuffer2));
      assertFalse(printBuffer7.equals((Object)printBuffer0));
      assertFalse(printBuffer7.equals((Object)printBuffer6));
      assertFalse(printBuffer7.equals((Object)printBuffer5));
      assertFalse(printBuffer7.equals((Object)printBuffer3));
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer7);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer5);
      assertNotSame(printBuffer1, printBuffer4);
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer5);
      assertNotSame(printBuffer1, printBuffer7);
      assertNotSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer1, printBuffer6);
      assertSame(printBuffer4, printBuffer7);
      assertNotSame(printBuffer4, printBuffer6);
      assertNotSame(printBuffer4, printBuffer5);
      assertNotSame(printBuffer4, printBuffer0);
      assertNotSame(printBuffer4, printBuffer1);
      assertNotSame(printBuffer4, printBuffer3);
      assertNotSame(printBuffer4, printBuffer2);
      assertNotSame(printBuffer7, printBuffer1);
      assertNotSame(printBuffer7, printBuffer2);
      assertNotSame(printBuffer7, printBuffer0);
      assertNotSame(printBuffer7, printBuffer6);
      assertSame(printBuffer7, printBuffer4);
      assertNotSame(printBuffer7, printBuffer5);
      assertNotSame(printBuffer7, printBuffer3);
      assertNotNull(printBuffer7);
      
      PrintBuffer printBuffer8 = new PrintBuffer();
      assertFalse(printBuffer8.equals((Object)printBuffer4));
      assertFalse(printBuffer8.equals((Object)printBuffer3));
      assertFalse(printBuffer8.equals((Object)printBuffer0));
      assertFalse(printBuffer8.equals((Object)printBuffer6));
      assertFalse(printBuffer8.equals((Object)printBuffer5));
      assertFalse(printBuffer8.equals((Object)printBuffer7));
      assertFalse(printBuffer8.equals((Object)printBuffer2));
      assertFalse(printBuffer8.equals((Object)printBuffer1));
      assertNotNull(printBuffer8);
      
      String string0 = printBuffer8.toString();
      assertEquals("", string0);
      assertFalse(printBuffer8.equals((Object)printBuffer4));
      assertFalse(printBuffer8.equals((Object)printBuffer3));
      assertFalse(printBuffer8.equals((Object)printBuffer0));
      assertFalse(printBuffer8.equals((Object)printBuffer6));
      assertFalse(printBuffer8.equals((Object)printBuffer5));
      assertFalse(printBuffer8.equals((Object)printBuffer7));
      assertFalse(printBuffer8.equals((Object)printBuffer2));
      assertFalse(printBuffer8.equals((Object)printBuffer1));
      assertNotSame(printBuffer8, printBuffer4);
      assertNotSame(printBuffer8, printBuffer3);
      assertNotSame(printBuffer8, printBuffer0);
      assertNotSame(printBuffer8, printBuffer6);
      assertNotSame(printBuffer8, printBuffer5);
      assertNotSame(printBuffer8, printBuffer7);
      assertNotSame(printBuffer8, printBuffer2);
      assertNotSame(printBuffer8, printBuffer1);
      assertNotNull(string0);
      
      PrintBuffer printBuffer9 = printBuffer2.indentln("\"hvUL?|OJVO[^!J");
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertEquals("{Xg  \"hvUL?|OJVO[^!J\n", stringBuilder0.toString());
      assertEquals("{Xg  \"hvUL?|OJVO[^!J\n", stringBuilder1.toString());
      assertEquals("{Xg  \"hvUL?|OJVO[^!J\n", stringBuilder2.toString());
      assertEquals(1, charArray0.length);
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertFalse(printBuffer2.equals((Object)printBuffer6));
      assertFalse(printBuffer2.equals((Object)printBuffer5));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer4));
      assertFalse(printBuffer2.equals((Object)printBuffer8));
      assertFalse(printBuffer2.equals((Object)printBuffer7));
      assertFalse(printBuffer9.equals((Object)printBuffer0));
      assertFalse(printBuffer9.equals((Object)printBuffer6));
      assertFalse(printBuffer9.equals((Object)printBuffer5));
      assertFalse(printBuffer9.equals((Object)printBuffer7));
      assertFalse(printBuffer9.equals((Object)printBuffer8));
      assertFalse(printBuffer9.equals((Object)printBuffer4));
      assertFalse(printBuffer9.equals((Object)printBuffer1));
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer6);
      assertNotSame(printBuffer2, printBuffer5);
      assertNotSame(printBuffer2, printBuffer0);
      assertSame(printBuffer2, printBuffer9);
      assertSame(printBuffer2, printBuffer3);
      assertNotSame(printBuffer2, printBuffer4);
      assertNotSame(printBuffer2, printBuffer8);
      assertNotSame(printBuffer2, printBuffer7);
      assertNotSame(printBuffer9, printBuffer0);
      assertNotSame(printBuffer9, printBuffer6);
      assertSame(printBuffer9, printBuffer3);
      assertNotSame(printBuffer9, printBuffer5);
      assertNotSame(printBuffer9, printBuffer7);
      assertNotSame(printBuffer9, printBuffer8);
      assertNotSame(printBuffer9, printBuffer4);
      assertSame(printBuffer9, printBuffer2);
      assertNotSame(printBuffer9, printBuffer1);
      assertNotNull(printBuffer9);
      
      PrintBuffer.PrintStack printBuffer_PrintStack0 = new PrintBuffer.PrintStack();
      assertNotNull(printBuffer_PrintStack0);
      
      PrintBuffer.PrintStack printBuffer_PrintStack1 = printBuffer_PrintStack0.push("{", printBuffer1);
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer6));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer7));
      assertFalse(printBuffer0.equals((Object)printBuffer9));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer4));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer0.equals((Object)printBuffer8));
      assertFalse(printBuffer_PrintStack1.equals((Object)printBuffer_PrintStack0));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer5));
      assertFalse(printBuffer1.equals((Object)printBuffer7));
      assertFalse(printBuffer1.equals((Object)printBuffer9));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer8));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer1.equals((Object)printBuffer6));
      assertNotSame(printBuffer_PrintStack0, printBuffer_PrintStack1);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer7);
      assertNotSame(printBuffer0, printBuffer9);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer5);
      assertNotSame(printBuffer0, printBuffer8);
      assertNotSame(printBuffer_PrintStack1, printBuffer_PrintStack0);
      assertNotSame(printBuffer1, printBuffer4);
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer5);
      assertNotSame(printBuffer1, printBuffer7);
      assertNotSame(printBuffer1, printBuffer9);
      assertNotSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer8);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer1, printBuffer6);
      assertNotNull(printBuffer_PrintStack1);
      
      PrintBuffer printBuffer10 = printBuffer3.append(false);
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertEquals("{Xg  \"hvUL?|OJVO[^!J\nfalse", stringBuilder0.toString());
      assertEquals("{Xg  \"hvUL?|OJVO[^!J\nfalse", stringBuilder1.toString());
      assertEquals("{Xg  \"hvUL?|OJVO[^!J\nfalse", stringBuilder2.toString());
      assertEquals(1, charArray0.length);
      assertFalse(printBuffer10.equals((Object)printBuffer6));
      assertFalse(printBuffer10.equals((Object)printBuffer5));
      assertFalse(printBuffer10.equals((Object)printBuffer7));
      assertFalse(printBuffer10.equals((Object)printBuffer8));
      assertFalse(printBuffer10.equals((Object)printBuffer4));
      assertFalse(printBuffer10.equals((Object)printBuffer1));
      assertFalse(printBuffer10.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertFalse(printBuffer2.equals((Object)printBuffer6));
      assertFalse(printBuffer2.equals((Object)printBuffer5));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer4));
      assertFalse(printBuffer2.equals((Object)printBuffer8));
      assertFalse(printBuffer2.equals((Object)printBuffer7));
      assertFalse(printBuffer3.equals((Object)printBuffer4));
      assertFalse(printBuffer3.equals((Object)printBuffer1));
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer8));
      assertFalse(printBuffer3.equals((Object)printBuffer5));
      assertFalse(printBuffer3.equals((Object)printBuffer6));
      assertFalse(printBuffer3.equals((Object)printBuffer7));
      assertNotSame(printBuffer10, printBuffer6);
      assertNotSame(printBuffer10, printBuffer5);
      assertNotSame(printBuffer10, printBuffer7);
      assertNotSame(printBuffer10, printBuffer8);
      assertNotSame(printBuffer10, printBuffer4);
      assertNotSame(printBuffer10, printBuffer1);
      assertNotSame(printBuffer10, printBuffer0);
      assertSame(printBuffer10, printBuffer9);
      assertSame(printBuffer10, printBuffer3);
      assertSame(printBuffer10, printBuffer2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer6);
      assertNotSame(printBuffer2, printBuffer5);
      assertNotSame(printBuffer2, printBuffer0);
      assertSame(printBuffer2, printBuffer9);
      assertSame(printBuffer2, printBuffer3);
      assertNotSame(printBuffer2, printBuffer4);
      assertNotSame(printBuffer2, printBuffer8);
      assertNotSame(printBuffer2, printBuffer7);
      assertSame(printBuffer2, printBuffer10);
      assertNotSame(printBuffer3, printBuffer4);
      assertSame(printBuffer3, printBuffer2);
      assertNotSame(printBuffer3, printBuffer1);
      assertNotSame(printBuffer3, printBuffer0);
      assertSame(printBuffer3, printBuffer9);
      assertNotSame(printBuffer3, printBuffer8);
      assertNotSame(printBuffer3, printBuffer5);
      assertNotSame(printBuffer3, printBuffer6);
      assertSame(printBuffer3, printBuffer10);
      assertNotSame(printBuffer3, printBuffer7);
      assertNotNull(printBuffer10);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = new PrintBuffer();
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotNull(printBuffer1);
      
      PrintBuffer printBuffer2 = new PrintBuffer();
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertNotNull(printBuffer2);
      
      String string0 = printBuffer1.footer();
      assertEquals("", string0);
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotNull(string0);
      
      PrintBuffer printBuffer3 = printBuffer1.append(0);
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer2));
      assertNotSame(printBuffer1, printBuffer2);
      assertSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer3, printBuffer0);
      assertSame(printBuffer3, printBuffer1);
      assertNotSame(printBuffer3, printBuffer2);
      assertNotNull(printBuffer3);
      
      PrintBuffer printBuffer4 = printBuffer0.indentln("nPH3Q,<.Ek");
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer2));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer4, printBuffer1);
      assertSame(printBuffer4, printBuffer0);
      assertNotSame(printBuffer4, printBuffer2);
      assertNotSame(printBuffer4, printBuffer3);
      assertNotNull(printBuffer4);
      
      String string1 = printBuffer1.toString();
      assertEquals("0", string1);
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer4);
      assertSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotNull(string1);
      
      PrintBuffer printBuffer5 = printBuffer1.addToBeginning(printBuffer2);
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer3));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer4));
      assertFalse(printBuffer5.equals((Object)printBuffer0));
      assertFalse(printBuffer5.equals((Object)printBuffer4));
      assertFalse(printBuffer5.equals((Object)printBuffer2));
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer4);
      assertSame(printBuffer1, printBuffer5);
      assertSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer2, printBuffer3);
      assertNotSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer0);
      assertNotSame(printBuffer2, printBuffer5);
      assertNotSame(printBuffer2, printBuffer4);
      assertNotSame(printBuffer5, printBuffer0);
      assertSame(printBuffer5, printBuffer1);
      assertSame(printBuffer5, printBuffer3);
      assertNotSame(printBuffer5, printBuffer4);
      assertNotSame(printBuffer5, printBuffer2);
      assertNotNull(printBuffer5);
      
      PrintBuffer printBuffer6 = printBuffer5.outdent();
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer3));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer5));
      assertFalse(printBuffer2.equals((Object)printBuffer4));
      assertFalse(printBuffer5.equals((Object)printBuffer0));
      assertFalse(printBuffer5.equals((Object)printBuffer4));
      assertFalse(printBuffer5.equals((Object)printBuffer2));
      assertFalse(printBuffer6.equals((Object)printBuffer0));
      assertFalse(printBuffer6.equals((Object)printBuffer2));
      assertFalse(printBuffer6.equals((Object)printBuffer4));
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer4);
      assertSame(printBuffer1, printBuffer5);
      assertSame(printBuffer1, printBuffer3);
      assertSame(printBuffer1, printBuffer6);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer2, printBuffer3);
      assertNotSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer0);
      assertNotSame(printBuffer2, printBuffer5);
      assertNotSame(printBuffer2, printBuffer4);
      assertNotSame(printBuffer2, printBuffer6);
      assertSame(printBuffer5, printBuffer6);
      assertNotSame(printBuffer5, printBuffer0);
      assertSame(printBuffer5, printBuffer1);
      assertSame(printBuffer5, printBuffer3);
      assertNotSame(printBuffer5, printBuffer4);
      assertNotSame(printBuffer5, printBuffer2);
      assertSame(printBuffer6, printBuffer3);
      assertNotSame(printBuffer6, printBuffer0);
      assertSame(printBuffer6, printBuffer1);
      assertSame(printBuffer6, printBuffer5);
      assertNotSame(printBuffer6, printBuffer2);
      assertNotSame(printBuffer6, printBuffer4);
      assertNotNull(printBuffer6);
      
      PrintBuffer printBuffer7 = new PrintBuffer(printBuffer0);
      assertFalse(printBuffer0.equals((Object)printBuffer6));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer7.equals((Object)printBuffer0));
      assertFalse(printBuffer7.equals((Object)printBuffer3));
      assertFalse(printBuffer7.equals((Object)printBuffer2));
      assertFalse(printBuffer7.equals((Object)printBuffer4));
      assertFalse(printBuffer7.equals((Object)printBuffer6));
      assertFalse(printBuffer7.equals((Object)printBuffer5));
      assertFalse(printBuffer7.equals((Object)printBuffer1));
      assertNotNull(printBuffer7);
      
      PrintBuffer printBuffer8 = printBuffer6.addToEnd(printBuffer7);
      assertFalse(printBuffer0.equals((Object)printBuffer6));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer7));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer7));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer3));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer5));
      assertFalse(printBuffer2.equals((Object)printBuffer4));
      assertFalse(printBuffer2.equals((Object)printBuffer7));
      assertFalse(printBuffer2.equals((Object)printBuffer6));
      assertFalse(printBuffer5.equals((Object)printBuffer0));
      assertFalse(printBuffer5.equals((Object)printBuffer7));
      assertFalse(printBuffer5.equals((Object)printBuffer4));
      assertFalse(printBuffer5.equals((Object)printBuffer2));
      assertFalse(printBuffer6.equals((Object)printBuffer0));
      assertFalse(printBuffer6.equals((Object)printBuffer7));
      assertFalse(printBuffer6.equals((Object)printBuffer2));
      assertFalse(printBuffer6.equals((Object)printBuffer4));
      assertFalse(printBuffer7.equals((Object)printBuffer0));
      assertFalse(printBuffer7.equals((Object)printBuffer3));
      assertFalse(printBuffer7.equals((Object)printBuffer2));
      assertFalse(printBuffer7.equals((Object)printBuffer4));
      assertFalse(printBuffer7.equals((Object)printBuffer6));
      assertFalse(printBuffer7.equals((Object)printBuffer5));
      assertFalse(printBuffer7.equals((Object)printBuffer1));
      assertFalse(printBuffer8.equals((Object)printBuffer0));
      assertFalse(printBuffer8.equals((Object)printBuffer7));
      assertFalse(printBuffer8.equals((Object)printBuffer4));
      assertFalse(printBuffer8.equals((Object)printBuffer2));
      assertNotSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer8);
      assertNotSame(printBuffer0, printBuffer5);
      assertSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer7);
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer4);
      assertNotSame(printBuffer1, printBuffer7);
      assertSame(printBuffer1, printBuffer5);
      assertSame(printBuffer1, printBuffer8);
      assertSame(printBuffer1, printBuffer3);
      assertSame(printBuffer1, printBuffer6);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer2, printBuffer8);
      assertNotSame(printBuffer2, printBuffer3);
      assertNotSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer0);
      assertNotSame(printBuffer2, printBuffer5);
      assertNotSame(printBuffer2, printBuffer4);
      assertNotSame(printBuffer2, printBuffer7);
      assertNotSame(printBuffer2, printBuffer6);
      assertSame(printBuffer5, printBuffer6);
      assertNotSame(printBuffer5, printBuffer0);
      assertSame(printBuffer5, printBuffer1);
      assertNotSame(printBuffer5, printBuffer7);
      assertSame(printBuffer5, printBuffer8);
      assertSame(printBuffer5, printBuffer3);
      assertNotSame(printBuffer5, printBuffer4);
      assertNotSame(printBuffer5, printBuffer2);
      assertSame(printBuffer6, printBuffer3);
      assertNotSame(printBuffer6, printBuffer0);
      assertNotSame(printBuffer6, printBuffer7);
      assertSame(printBuffer6, printBuffer1);
      assertSame(printBuffer6, printBuffer5);
      assertNotSame(printBuffer6, printBuffer2);
      assertNotSame(printBuffer6, printBuffer4);
      assertSame(printBuffer6, printBuffer8);
      assertNotSame(printBuffer7, printBuffer8);
      assertNotSame(printBuffer7, printBuffer0);
      assertNotSame(printBuffer7, printBuffer3);
      assertNotSame(printBuffer7, printBuffer2);
      assertNotSame(printBuffer7, printBuffer4);
      assertNotSame(printBuffer7, printBuffer6);
      assertNotSame(printBuffer7, printBuffer5);
      assertNotSame(printBuffer7, printBuffer1);
      assertNotSame(printBuffer8, printBuffer0);
      assertSame(printBuffer8, printBuffer6);
      assertNotSame(printBuffer8, printBuffer7);
      assertSame(printBuffer8, printBuffer1);
      assertNotSame(printBuffer8, printBuffer4);
      assertNotSame(printBuffer8, printBuffer2);
      assertSame(printBuffer8, printBuffer5);
      assertSame(printBuffer8, printBuffer3);
      assertNotNull(printBuffer8);
      
      PrintBuffer printBuffer9 = printBuffer2.println("");
      assertFalse(printBuffer2.equals((Object)printBuffer8));
      assertFalse(printBuffer2.equals((Object)printBuffer3));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer5));
      assertFalse(printBuffer2.equals((Object)printBuffer4));
      assertFalse(printBuffer2.equals((Object)printBuffer7));
      assertFalse(printBuffer2.equals((Object)printBuffer6));
      assertFalse(printBuffer9.equals((Object)printBuffer8));
      assertFalse(printBuffer9.equals((Object)printBuffer0));
      assertFalse(printBuffer9.equals((Object)printBuffer1));
      assertFalse(printBuffer9.equals((Object)printBuffer4));
      assertFalse(printBuffer9.equals((Object)printBuffer5));
      assertFalse(printBuffer9.equals((Object)printBuffer6));
      assertFalse(printBuffer9.equals((Object)printBuffer7));
      assertFalse(printBuffer9.equals((Object)printBuffer3));
      assertNotSame(printBuffer2, printBuffer8);
      assertNotSame(printBuffer2, printBuffer3);
      assertNotSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer0);
      assertNotSame(printBuffer2, printBuffer5);
      assertNotSame(printBuffer2, printBuffer4);
      assertSame(printBuffer2, printBuffer9);
      assertNotSame(printBuffer2, printBuffer7);
      assertNotSame(printBuffer2, printBuffer6);
      assertNotSame(printBuffer9, printBuffer8);
      assertSame(printBuffer9, printBuffer2);
      assertNotSame(printBuffer9, printBuffer0);
      assertNotSame(printBuffer9, printBuffer1);
      assertNotSame(printBuffer9, printBuffer4);
      assertNotSame(printBuffer9, printBuffer5);
      assertNotSame(printBuffer9, printBuffer6);
      assertNotSame(printBuffer9, printBuffer7);
      assertNotSame(printBuffer9, printBuffer3);
      assertNotNull(printBuffer9);
      
      String string2 = printBuffer0.toString();
      assertEquals("    nPH3Q,<.Ek\n", string2);
      assertFalse(printBuffer0.equals((Object)printBuffer6));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer8));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer0.equals((Object)printBuffer9));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer7));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer8);
      assertNotSame(printBuffer0, printBuffer5);
      assertNotSame(printBuffer0, printBuffer9);
      assertSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer7);
      assertNotNull(string2);
      
      PrintBuffer printBuffer10 = printBuffer0.indentln("0");
      assertFalse(printBuffer0.equals((Object)printBuffer6));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer8));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer0.equals((Object)printBuffer9));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer7));
      assertFalse(printBuffer10.equals((Object)printBuffer3));
      assertFalse(printBuffer10.equals((Object)printBuffer7));
      assertFalse(printBuffer10.equals((Object)printBuffer8));
      assertFalse(printBuffer10.equals((Object)printBuffer2));
      assertFalse(printBuffer10.equals((Object)printBuffer9));
      assertFalse(printBuffer10.equals((Object)printBuffer6));
      assertFalse(printBuffer10.equals((Object)printBuffer5));
      assertFalse(printBuffer10.equals((Object)printBuffer1));
      assertNotSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer10);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer8);
      assertNotSame(printBuffer0, printBuffer5);
      assertNotSame(printBuffer0, printBuffer9);
      assertSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer7);
      assertNotSame(printBuffer10, printBuffer3);
      assertNotSame(printBuffer10, printBuffer7);
      assertSame(printBuffer10, printBuffer4);
      assertNotSame(printBuffer10, printBuffer8);
      assertNotSame(printBuffer10, printBuffer2);
      assertNotSame(printBuffer10, printBuffer9);
      assertNotSame(printBuffer10, printBuffer6);
      assertSame(printBuffer10, printBuffer0);
      assertNotSame(printBuffer10, printBuffer5);
      assertNotSame(printBuffer10, printBuffer1);
      assertNotNull(printBuffer10);
      
      PrintBuffer.PrintStack printBuffer_PrintStack0 = new PrintBuffer.PrintStack();
      assertNotNull(printBuffer_PrintStack0);
      
      printBuffer_PrintStack0.prefix = "";
      PrintBuffer.PrintStack printBuffer_PrintStack1 = printBuffer_PrintStack0.push("", printBuffer2);
      assertFalse(printBuffer_PrintStack1.equals((Object)printBuffer_PrintStack0));
      assertFalse(printBuffer2.equals((Object)printBuffer8));
      assertFalse(printBuffer2.equals((Object)printBuffer3));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer5));
      assertFalse(printBuffer2.equals((Object)printBuffer4));
      assertFalse(printBuffer2.equals((Object)printBuffer7));
      assertFalse(printBuffer2.equals((Object)printBuffer10));
      assertFalse(printBuffer2.equals((Object)printBuffer6));
      assertNotSame(printBuffer_PrintStack1, printBuffer_PrintStack0);
      assertNotSame(printBuffer2, printBuffer8);
      assertNotSame(printBuffer2, printBuffer3);
      assertNotSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer0);
      assertNotSame(printBuffer2, printBuffer5);
      assertNotSame(printBuffer2, printBuffer4);
      assertSame(printBuffer2, printBuffer9);
      assertNotSame(printBuffer2, printBuffer7);
      assertNotSame(printBuffer2, printBuffer10);
      assertNotSame(printBuffer2, printBuffer6);
      assertNotSame(printBuffer_PrintStack0, printBuffer_PrintStack1);
      assertNotNull(printBuffer_PrintStack1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      // Undeclared exception!
      try { 
        printBuffer0.println((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[0];
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, charArray0, 0, 0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertEquals(0, charArray0.length);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.append((-1371.4171F));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("-1371.4171", stringBuilder0.toString());
      assertEquals("-1371.4171", stringBuilder1.toString());
      assertEquals("-1371.4171", stringBuilder2.toString());
      assertEquals(0, charArray0.length);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder2.appendCodePoint(0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("-1371.4171\u0000", stringBuilder0.toString());
      assertEquals("-1371.4171\u0000", stringBuilder1.toString());
      assertEquals("-1371.4171\u0000", stringBuilder2.toString());
      assertEquals("-1371.4171\u0000", stringBuilder3.toString());
      assertEquals(0, charArray0.length);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertNotNull(stringBuilder3);
      
      PrintBuffer printBuffer0 = new PrintBuffer(stringBuilder3);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("-1371.4171\u0000", stringBuilder0.toString());
      assertEquals("-1371.4171\u0000", stringBuilder1.toString());
      assertEquals("-1371.4171\u0000", stringBuilder2.toString());
      assertEquals("-1371.4171\u0000", stringBuilder3.toString());
      assertEquals(0, charArray0.length);
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = printBuffer0.println(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("-1371.4171\u0000  \n", stringBuilder0.toString());
      assertEquals("-1371.4171\u0000  \n", stringBuilder1.toString());
      assertEquals("-1371.4171\u0000  \n", stringBuilder2.toString());
      assertEquals("-1371.4171\u0000  \n", stringBuilder3.toString());
      assertEquals(0, charArray0.length);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      printBuffer0.target = null;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        printBuffer0.indentln(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wetheinter.net.dev.io.PrintBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      PrintBuffer printBuffer0 = new PrintBuffer(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(printBuffer0);
      
      // Undeclared exception!
      try { 
        printBuffer0.append((CharSequence) stringBuilder0, 0, 1795);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 0, end 1795, length 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = new PrintBuffer(printBuffer0);
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotNull(printBuffer1);
      
      // Undeclared exception!
      try { 
        printBuffer0.addToBeginning(printBuffer1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Infinite recursion!
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      PrintBuffer printBuffer1 = printBuffer0.println("VC]I`0d4*Sf*+");
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, 2777L);
      assertEquals("2777", stringBuilder0.toString());
      assertEquals("2777", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      PrintBuffer printBuffer2 = printBuffer1.append((CharSequence) stringBuilder1, 0, 0);
      assertEquals("2777", stringBuilder0.toString());
      assertEquals("2777", stringBuilder1.toString());
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(printBuffer2, printBuffer1);
      assertSame(printBuffer2, printBuffer0);
      assertNotNull(printBuffer2);
      
      PrintBuffer printBuffer3 = printBuffer0.append((CharSequence) stringBuilder0);
      assertEquals("2777", stringBuilder0.toString());
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(printBuffer3, printBuffer2);
      assertSame(printBuffer3, printBuffer0);
      assertSame(printBuffer3, printBuffer1);
      assertNotNull(printBuffer3);
      
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      assertEquals("7772", stringBuilder0.toString());
      assertEquals("7772", stringBuilder1.toString());
      assertEquals("7772", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      
      String string0 = printBuffer0.toString();
      assertEquals("  VC]I`0d4*Sf*+\n2777", string0);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer3);
      assertNotNull(string0);
      
      PrintBuffer printBuffer4 = printBuffer1.append((float) 2777L);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer3);
      assertSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer4);
      assertSame(printBuffer1, printBuffer3);
      assertSame(printBuffer1, printBuffer2);
      assertSame(printBuffer4, printBuffer3);
      assertSame(printBuffer4, printBuffer0);
      assertSame(printBuffer4, printBuffer2);
      assertSame(printBuffer4, printBuffer1);
      assertNotNull(printBuffer4);
      
      PrintBuffer printBuffer5 = printBuffer0.indentln((Object) "  VC]I`0d4*Sf*+\n2777");
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer5);
      assertSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer3);
      assertSame(printBuffer5, printBuffer0);
      assertSame(printBuffer5, printBuffer4);
      assertSame(printBuffer5, printBuffer2);
      assertSame(printBuffer5, printBuffer1);
      assertSame(printBuffer5, printBuffer3);
      assertNotNull(printBuffer5);
      
      printBuffer3.onAppend();
      assertEquals("7772", stringBuilder0.toString());
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer5);
      assertSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(printBuffer3, printBuffer5);
      assertSame(printBuffer3, printBuffer2);
      assertSame(printBuffer3, printBuffer0);
      assertSame(printBuffer3, printBuffer4);
      assertSame(printBuffer3, printBuffer1);
      
      String string1 = printBuffer5.header();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer5);
      assertSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer3);
      assertSame(printBuffer5, printBuffer0);
      assertSame(printBuffer5, printBuffer4);
      assertSame(printBuffer5, printBuffer2);
      assertSame(printBuffer5, printBuffer1);
      assertSame(printBuffer5, printBuffer3);
      assertNotNull(string1);
      
      printBuffer2.onAppend();
      assertEquals("7772", stringBuilder0.toString());
      assertEquals("7772", stringBuilder1.toString());
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer5);
      assertSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer4);
      assertSame(printBuffer1, printBuffer3);
      assertSame(printBuffer1, printBuffer2);
      assertSame(printBuffer1, printBuffer5);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(printBuffer2, printBuffer3);
      assertSame(printBuffer2, printBuffer1);
      assertSame(printBuffer2, printBuffer5);
      assertSame(printBuffer2, printBuffer0);
      assertSame(printBuffer2, printBuffer4);
      
      PrintBuffer printBuffer6 = printBuffer4.outdent();
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer5);
      assertSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer6);
      assertSame(printBuffer1, printBuffer6);
      assertSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer4);
      assertSame(printBuffer1, printBuffer3);
      assertSame(printBuffer1, printBuffer2);
      assertSame(printBuffer1, printBuffer5);
      assertSame(printBuffer4, printBuffer3);
      assertSame(printBuffer4, printBuffer0);
      assertSame(printBuffer4, printBuffer6);
      assertSame(printBuffer4, printBuffer2);
      assertSame(printBuffer4, printBuffer5);
      assertSame(printBuffer4, printBuffer1);
      assertSame(printBuffer6, printBuffer2);
      assertSame(printBuffer6, printBuffer3);
      assertSame(printBuffer6, printBuffer0);
      assertSame(printBuffer6, printBuffer1);
      assertSame(printBuffer6, printBuffer4);
      assertSame(printBuffer6, printBuffer5);
      assertNotNull(printBuffer6);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = '{';
      charArray0[2] = '`';
      charArray0[3] = '!';
      charArray0[4] = '<';
      charArray0[5] = 'x';
      charArray0[6] = '0';
      charArray0[7] = '3';
      charArray0[8] = '5';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'3', '{', '`', '!', '<', 'x', '0', '3', '5'}, charArray0);
      assertEquals("3{`!<x035", charBuffer0.toString());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charArray0.length);
      assertNotNull(charBuffer0);
      
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      assertArrayEquals(new char[] {'3', '{', '`', '!', '<', 'x', '0', '3', '5'}, charArray0);
      assertEquals("3{`!<x035", charBuffer0.toString());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("3{`!<x035", stringBuilder0.toString());
      assertEquals(9, charArray0.length);
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'3', '{', '`', '!', '<', 'x', '0', '3', '5'}, charArray0);
      assertEquals("3{`!<x035", charBuffer0.toString());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("3{`!<x0353{`!<x035", stringBuilder0.toString());
      assertEquals("3{`!<x0353{`!<x035", stringBuilder1.toString());
      assertEquals(9, charArray0.length);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      PrintBuffer printBuffer0 = new PrintBuffer(stringBuilder1);
      assertArrayEquals(new char[] {'3', '{', '`', '!', '<', 'x', '0', '3', '5'}, charArray0);
      assertEquals("3{`!<x035", charBuffer0.toString());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("3{`!<x0353{`!<x035", stringBuilder0.toString());
      assertEquals("3{`!<x0353{`!<x035", stringBuilder1.toString());
      assertEquals(9, charArray0.length);
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = new PrintBuffer(printBuffer0);
      assertArrayEquals(new char[] {'3', '{', '`', '!', '<', 'x', '0', '3', '5'}, charArray0);
      assertEquals("3{`!<x035", charBuffer0.toString());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("3{`!<x0353{`!<x035", stringBuilder0.toString());
      assertEquals("3{`!<x0353{`!<x035", stringBuilder1.toString());
      assertEquals(9, charArray0.length);
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotNull(printBuffer1);
      
      // Undeclared exception!
      try { 
        printBuffer1.addToBeginning(printBuffer0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Infinite recursion!
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      String string0 = printBuffer0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      
      PrintBuffer printBuffer1 = printBuffer0.append((CharSequence) "");
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = printBuffer0.indentln((CharSequence) null);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = printBuffer0.append((-1394.07F));
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(1);
      assertEquals("1", stringBuilder0.toString());
      assertEquals("1", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder0.insert(1, 0.0);
      assertEquals("10.0", stringBuilder0.toString());
      assertEquals("10.0", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      
      char[] charArray0 = new char[0];
      StringBuilder stringBuilder3 = stringBuilder0.insert(0, charArray0, 0, 0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("10.0", stringBuilder0.toString());
      assertEquals("10.0", stringBuilder3.toString());
      assertEquals(0, charArray0.length);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertNotNull(stringBuilder3);
      
      PrintBuffer printBuffer0 = new PrintBuffer(stringBuilder3);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("10.0", stringBuilder0.toString());
      assertEquals("10.0", stringBuilder3.toString());
      assertEquals(0, charArray0.length);
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = printBuffer0.append((-1.0F));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("10.0-1.0", stringBuilder0.toString());
      assertEquals("10.0-1.0", stringBuilder3.toString());
      assertEquals(0, charArray0.length);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
      
      PrintBuffer printBuffer2 = new PrintBuffer(printBuffer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("10.0-1.0", stringBuilder0.toString());
      assertEquals("10.0-1.0", stringBuilder3.toString());
      assertEquals(0, charArray0.length);
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertNotNull(printBuffer2);
      
      PrintBuffer printBuffer3 = printBuffer2.append((CharSequence) "");
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("10.0-1.0", stringBuilder0.toString());
      assertEquals("10.0-1.0", stringBuilder3.toString());
      assertEquals(0, charArray0.length);
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer1));
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertNotSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer2, printBuffer0);
      assertNotSame(printBuffer2, printBuffer1);
      assertSame(printBuffer2, printBuffer3);
      assertSame(printBuffer3, printBuffer2);
      assertNotSame(printBuffer3, printBuffer0);
      assertNotSame(printBuffer3, printBuffer1);
      assertNotNull(printBuffer3);
      
      StringBuilder stringBuilder4 = stringBuilder3.append((-2583));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("10.0-1.0-2583", stringBuilder0.toString());
      assertEquals("10.0-1.0-2583", stringBuilder3.toString());
      assertEquals("10.0-1.0-2583", stringBuilder4.toString());
      assertEquals(0, charArray0.length);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder0);
      assertNotNull(stringBuilder4);
      
      PrintBuffer printBuffer4 = new PrintBuffer(printBuffer1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("10.0-1.0-2583", stringBuilder0.toString());
      assertEquals("10.0-1.0-2583", stringBuilder3.toString());
      assertEquals(0, charArray0.length);
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertFalse(printBuffer4.equals((Object)printBuffer2));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer0));
      assertNotNull(printBuffer4);
      
      PrintBuffer printBuffer5 = printBuffer3.append((Object) printBuffer4);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("10.0-1.0-2583", stringBuilder0.toString());
      assertEquals("10.0-1.0-2583", stringBuilder3.toString());
      assertEquals(0, charArray0.length);
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertFalse(printBuffer2.equals((Object)printBuffer4));
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer1));
      assertFalse(printBuffer3.equals((Object)printBuffer4));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertFalse(printBuffer4.equals((Object)printBuffer2));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer0));
      assertFalse(printBuffer5.equals((Object)printBuffer0));
      assertFalse(printBuffer5.equals((Object)printBuffer4));
      assertFalse(printBuffer5.equals((Object)printBuffer1));
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertNotSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer5);
      assertNotSame(printBuffer1, printBuffer4);
      assertSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer5);
      assertSame(printBuffer2, printBuffer5);
      assertNotSame(printBuffer2, printBuffer0);
      assertNotSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer4);
      assertSame(printBuffer2, printBuffer3);
      assertSame(printBuffer3, printBuffer2);
      assertNotSame(printBuffer3, printBuffer0);
      assertNotSame(printBuffer3, printBuffer1);
      assertSame(printBuffer3, printBuffer5);
      assertNotSame(printBuffer3, printBuffer4);
      assertNotSame(printBuffer4, printBuffer5);
      assertNotSame(printBuffer4, printBuffer3);
      assertNotSame(printBuffer4, printBuffer2);
      assertNotSame(printBuffer4, printBuffer1);
      assertNotSame(printBuffer4, printBuffer0);
      assertNotSame(printBuffer5, printBuffer0);
      assertSame(printBuffer5, printBuffer2);
      assertNotSame(printBuffer5, printBuffer4);
      assertNotSame(printBuffer5, printBuffer1);
      assertSame(printBuffer5, printBuffer3);
      assertNotNull(printBuffer5);
      
      PrintBuffer printBuffer6 = printBuffer1.append("ejj*{*7~I| fa!P6iL");
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("10.0-1.0-2583ejj*{*7~I| fa!P6iL", stringBuilder0.toString());
      assertEquals("10.0-1.0-2583ejj*{*7~I| fa!P6iL", stringBuilder3.toString());
      assertEquals(0, charArray0.length);
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer4));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer5));
      assertFalse(printBuffer6.equals((Object)printBuffer4));
      assertFalse(printBuffer6.equals((Object)printBuffer5));
      assertFalse(printBuffer6.equals((Object)printBuffer2));
      assertFalse(printBuffer6.equals((Object)printBuffer3));
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertNotSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer5);
      assertNotSame(printBuffer1, printBuffer4);
      assertSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer5);
      assertSame(printBuffer1, printBuffer6);
      assertSame(printBuffer6, printBuffer1);
      assertNotSame(printBuffer6, printBuffer4);
      assertNotSame(printBuffer6, printBuffer5);
      assertNotSame(printBuffer6, printBuffer2);
      assertSame(printBuffer6, printBuffer0);
      assertNotSame(printBuffer6, printBuffer3);
      assertNotNull(printBuffer6);
      
      PrintBuffer printBuffer7 = printBuffer1.append(charArray0, 0, 0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("10.0-1.0-2583ejj*{*7~I| fa!P6iL", stringBuilder0.toString());
      assertEquals("10.0-1.0-2583ejj*{*7~I| fa!P6iL", stringBuilder3.toString());
      assertEquals(0, charArray0.length);
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer4));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer5));
      assertFalse(printBuffer7.equals((Object)printBuffer3));
      assertFalse(printBuffer7.equals((Object)printBuffer2));
      assertFalse(printBuffer7.equals((Object)printBuffer5));
      assertFalse(printBuffer7.equals((Object)printBuffer4));
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertNotSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer6);
      assertSame(printBuffer0, printBuffer7);
      assertNotSame(printBuffer0, printBuffer5);
      assertNotSame(printBuffer1, printBuffer4);
      assertSame(printBuffer1, printBuffer7);
      assertSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer5);
      assertSame(printBuffer1, printBuffer6);
      assertSame(printBuffer7, printBuffer1);
      assertSame(printBuffer7, printBuffer6);
      assertNotSame(printBuffer7, printBuffer3);
      assertNotSame(printBuffer7, printBuffer2);
      assertSame(printBuffer7, printBuffer0);
      assertNotSame(printBuffer7, printBuffer5);
      assertNotSame(printBuffer7, printBuffer4);
      assertNotNull(printBuffer7);
      
      PrintBuffer printBuffer8 = printBuffer1.indentln((Object) printBuffer3);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("10.0-1.0-2583ejj*{*7~I| fa!P6iL    10.0-1.0-2583ejj*{*7~I| fa!P6iL    10.0-1.0-2583\n", stringBuilder0.toString());
      assertEquals("10.0-1.0-2583ejj*{*7~I| fa!P6iL    10.0-1.0-2583ejj*{*7~I| fa!P6iL    10.0-1.0-2583\n", stringBuilder3.toString());
      assertEquals(0, charArray0.length);
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer4));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer5));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertFalse(printBuffer2.equals((Object)printBuffer7));
      assertFalse(printBuffer2.equals((Object)printBuffer4));
      assertFalse(printBuffer2.equals((Object)printBuffer6));
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer6));
      assertFalse(printBuffer3.equals((Object)printBuffer1));
      assertFalse(printBuffer3.equals((Object)printBuffer7));
      assertFalse(printBuffer3.equals((Object)printBuffer4));
      assertFalse(printBuffer8.equals((Object)printBuffer4));
      assertFalse(printBuffer8.equals((Object)printBuffer5));
      assertFalse(printBuffer8.equals((Object)printBuffer2));
      assertFalse(printBuffer8.equals((Object)printBuffer3));
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertNotSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer6);
      assertSame(printBuffer0, printBuffer7);
      assertNotSame(printBuffer0, printBuffer5);
      assertSame(printBuffer0, printBuffer8);
      assertNotSame(printBuffer1, printBuffer4);
      assertSame(printBuffer1, printBuffer7);
      assertSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer5);
      assertSame(printBuffer1, printBuffer6);
      assertSame(printBuffer1, printBuffer8);
      assertSame(printBuffer2, printBuffer5);
      assertNotSame(printBuffer2, printBuffer0);
      assertNotSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer7);
      assertNotSame(printBuffer2, printBuffer4);
      assertSame(printBuffer2, printBuffer3);
      assertNotSame(printBuffer2, printBuffer6);
      assertNotSame(printBuffer2, printBuffer8);
      assertSame(printBuffer3, printBuffer2);
      assertNotSame(printBuffer3, printBuffer0);
      assertNotSame(printBuffer3, printBuffer6);
      assertNotSame(printBuffer3, printBuffer8);
      assertNotSame(printBuffer3, printBuffer1);
      assertNotSame(printBuffer3, printBuffer7);
      assertSame(printBuffer3, printBuffer5);
      assertNotSame(printBuffer3, printBuffer4);
      assertSame(printBuffer8, printBuffer7);
      assertSame(printBuffer8, printBuffer1);
      assertNotSame(printBuffer8, printBuffer4);
      assertSame(printBuffer8, printBuffer6);
      assertSame(printBuffer8, printBuffer0);
      assertNotSame(printBuffer8, printBuffer5);
      assertNotSame(printBuffer8, printBuffer2);
      assertNotSame(printBuffer8, printBuffer3);
      assertNotNull(printBuffer8);
      
      PrintBuffer printBuffer9 = printBuffer4.println();
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("10.0-1.0-2583ejj*{*7~I| fa!P6iL    10.0-1.0-2583ejj*{*7~I| fa!P6iL    10.0-1.0-2583\n", stringBuilder0.toString());
      assertEquals("10.0-1.0-2583ejj*{*7~I| fa!P6iL    10.0-1.0-2583ejj*{*7~I| fa!P6iL    10.0-1.0-2583\n", stringBuilder3.toString());
      assertEquals(0, charArray0.length);
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer4));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer5));
      assertFalse(printBuffer4.equals((Object)printBuffer5));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertFalse(printBuffer4.equals((Object)printBuffer6));
      assertFalse(printBuffer4.equals((Object)printBuffer8));
      assertFalse(printBuffer4.equals((Object)printBuffer2));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer7));
      assertFalse(printBuffer4.equals((Object)printBuffer0));
      assertFalse(printBuffer9.equals((Object)printBuffer5));
      assertFalse(printBuffer9.equals((Object)printBuffer3));
      assertFalse(printBuffer9.equals((Object)printBuffer0));
      assertFalse(printBuffer9.equals((Object)printBuffer2));
      assertFalse(printBuffer9.equals((Object)printBuffer8));
      assertFalse(printBuffer9.equals((Object)printBuffer1));
      assertFalse(printBuffer9.equals((Object)printBuffer7));
      assertFalse(printBuffer9.equals((Object)printBuffer6));
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertNotSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer9);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer6);
      assertSame(printBuffer0, printBuffer7);
      assertNotSame(printBuffer0, printBuffer5);
      assertSame(printBuffer0, printBuffer8);
      assertNotSame(printBuffer1, printBuffer4);
      assertSame(printBuffer1, printBuffer7);
      assertSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer9);
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer5);
      assertSame(printBuffer1, printBuffer6);
      assertSame(printBuffer1, printBuffer8);
      assertNotSame(printBuffer4, printBuffer5);
      assertSame(printBuffer4, printBuffer9);
      assertNotSame(printBuffer4, printBuffer3);
      assertNotSame(printBuffer4, printBuffer6);
      assertNotSame(printBuffer4, printBuffer8);
      assertNotSame(printBuffer4, printBuffer2);
      assertNotSame(printBuffer4, printBuffer1);
      assertNotSame(printBuffer4, printBuffer7);
      assertNotSame(printBuffer4, printBuffer0);
      assertNotSame(printBuffer9, printBuffer5);
      assertNotSame(printBuffer9, printBuffer3);
      assertNotSame(printBuffer9, printBuffer0);
      assertNotSame(printBuffer9, printBuffer2);
      assertNotSame(printBuffer9, printBuffer8);
      assertSame(printBuffer9, printBuffer4);
      assertNotSame(printBuffer9, printBuffer1);
      assertNotSame(printBuffer9, printBuffer7);
      assertNotSame(printBuffer9, printBuffer6);
      assertNotNull(printBuffer9);
      
      PrintBuffer printBuffer10 = printBuffer9.indentln((CharSequence) stringBuilder3);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("10.0-1.0-2583ejj*{*7~I| fa!P6iL    10.0-1.0-2583ejj*{*7~I| fa!P6iL    10.0-1.0-2583\n", stringBuilder0.toString());
      assertEquals("10.0-1.0-2583ejj*{*7~I| fa!P6iL    10.0-1.0-2583ejj*{*7~I| fa!P6iL    10.0-1.0-2583\n", stringBuilder3.toString());
      assertEquals(0, charArray0.length);
      assertFalse(printBuffer10.equals((Object)printBuffer2));
      assertFalse(printBuffer10.equals((Object)printBuffer8));
      assertFalse(printBuffer10.equals((Object)printBuffer6));
      assertFalse(printBuffer10.equals((Object)printBuffer7));
      assertFalse(printBuffer10.equals((Object)printBuffer1));
      assertFalse(printBuffer10.equals((Object)printBuffer5));
      assertFalse(printBuffer10.equals((Object)printBuffer3));
      assertFalse(printBuffer10.equals((Object)printBuffer0));
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer9));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer4));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer9));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer5));
      assertFalse(printBuffer4.equals((Object)printBuffer5));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertFalse(printBuffer4.equals((Object)printBuffer6));
      assertFalse(printBuffer4.equals((Object)printBuffer8));
      assertFalse(printBuffer4.equals((Object)printBuffer2));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer7));
      assertFalse(printBuffer4.equals((Object)printBuffer0));
      assertFalse(printBuffer9.equals((Object)printBuffer5));
      assertFalse(printBuffer9.equals((Object)printBuffer3));
      assertFalse(printBuffer9.equals((Object)printBuffer0));
      assertFalse(printBuffer9.equals((Object)printBuffer2));
      assertFalse(printBuffer9.equals((Object)printBuffer8));
      assertFalse(printBuffer9.equals((Object)printBuffer1));
      assertFalse(printBuffer9.equals((Object)printBuffer7));
      assertFalse(printBuffer9.equals((Object)printBuffer6));
      assertNotSame(printBuffer10, printBuffer2);
      assertSame(printBuffer10, printBuffer4);
      assertNotSame(printBuffer10, printBuffer8);
      assertNotSame(printBuffer10, printBuffer6);
      assertNotSame(printBuffer10, printBuffer7);
      assertNotSame(printBuffer10, printBuffer1);
      assertNotSame(printBuffer10, printBuffer5);
      assertSame(printBuffer10, printBuffer9);
      assertNotSame(printBuffer10, printBuffer3);
      assertNotSame(printBuffer10, printBuffer0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertNotSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer10);
      assertNotSame(printBuffer0, printBuffer9);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer6);
      assertSame(printBuffer0, printBuffer7);
      assertNotSame(printBuffer0, printBuffer5);
      assertSame(printBuffer0, printBuffer8);
      assertNotSame(printBuffer1, printBuffer4);
      assertNotSame(printBuffer1, printBuffer10);
      assertSame(printBuffer1, printBuffer7);
      assertSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer9);
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer5);
      assertSame(printBuffer1, printBuffer6);
      assertSame(printBuffer1, printBuffer8);
      assertNotSame(printBuffer4, printBuffer5);
      assertSame(printBuffer4, printBuffer9);
      assertNotSame(printBuffer4, printBuffer3);
      assertNotSame(printBuffer4, printBuffer6);
      assertNotSame(printBuffer4, printBuffer8);
      assertSame(printBuffer4, printBuffer10);
      assertNotSame(printBuffer4, printBuffer2);
      assertNotSame(printBuffer4, printBuffer1);
      assertNotSame(printBuffer4, printBuffer7);
      assertNotSame(printBuffer4, printBuffer0);
      assertNotSame(printBuffer9, printBuffer5);
      assertNotSame(printBuffer9, printBuffer3);
      assertNotSame(printBuffer9, printBuffer0);
      assertSame(printBuffer9, printBuffer10);
      assertNotSame(printBuffer9, printBuffer2);
      assertNotSame(printBuffer9, printBuffer8);
      assertSame(printBuffer9, printBuffer4);
      assertNotSame(printBuffer9, printBuffer1);
      assertNotSame(printBuffer9, printBuffer7);
      assertNotSame(printBuffer9, printBuffer6);
      assertNotNull(printBuffer10);
      
      PrintBuffer printBuffer11 = printBuffer10.append(0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("10.0-1.0-2583ejj*{*7~I| fa!P6iL    10.0-1.0-2583ejj*{*7~I| fa!P6iL    10.0-1.0-2583\n", stringBuilder0.toString());
      assertEquals("10.0-1.0-2583ejj*{*7~I| fa!P6iL    10.0-1.0-2583ejj*{*7~I| fa!P6iL    10.0-1.0-2583\n", stringBuilder3.toString());
      assertEquals(0, charArray0.length);
      assertFalse(printBuffer10.equals((Object)printBuffer2));
      assertFalse(printBuffer10.equals((Object)printBuffer8));
      assertFalse(printBuffer10.equals((Object)printBuffer6));
      assertFalse(printBuffer10.equals((Object)printBuffer7));
      assertFalse(printBuffer10.equals((Object)printBuffer1));
      assertFalse(printBuffer10.equals((Object)printBuffer5));
      assertFalse(printBuffer10.equals((Object)printBuffer3));
      assertFalse(printBuffer10.equals((Object)printBuffer0));
      assertFalse(printBuffer11.equals((Object)printBuffer2));
      assertFalse(printBuffer11.equals((Object)printBuffer1));
      assertFalse(printBuffer11.equals((Object)printBuffer0));
      assertFalse(printBuffer11.equals((Object)printBuffer7));
      assertFalse(printBuffer11.equals((Object)printBuffer5));
      assertFalse(printBuffer11.equals((Object)printBuffer3));
      assertFalse(printBuffer11.equals((Object)printBuffer6));
      assertFalse(printBuffer11.equals((Object)printBuffer8));
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer10));
      assertFalse(printBuffer0.equals((Object)printBuffer9));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer4));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer10));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer9));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer5));
      assertFalse(printBuffer4.equals((Object)printBuffer5));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertFalse(printBuffer4.equals((Object)printBuffer6));
      assertFalse(printBuffer4.equals((Object)printBuffer8));
      assertFalse(printBuffer4.equals((Object)printBuffer2));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer7));
      assertFalse(printBuffer4.equals((Object)printBuffer0));
      assertFalse(printBuffer9.equals((Object)printBuffer5));
      assertFalse(printBuffer9.equals((Object)printBuffer3));
      assertFalse(printBuffer9.equals((Object)printBuffer0));
      assertFalse(printBuffer9.equals((Object)printBuffer2));
      assertFalse(printBuffer9.equals((Object)printBuffer8));
      assertFalse(printBuffer9.equals((Object)printBuffer1));
      assertFalse(printBuffer9.equals((Object)printBuffer7));
      assertFalse(printBuffer9.equals((Object)printBuffer6));
      assertNotSame(printBuffer10, printBuffer2);
      assertSame(printBuffer10, printBuffer11);
      assertSame(printBuffer10, printBuffer4);
      assertNotSame(printBuffer10, printBuffer8);
      assertNotSame(printBuffer10, printBuffer6);
      assertNotSame(printBuffer10, printBuffer7);
      assertNotSame(printBuffer10, printBuffer1);
      assertNotSame(printBuffer10, printBuffer5);
      assertSame(printBuffer10, printBuffer9);
      assertNotSame(printBuffer10, printBuffer3);
      assertNotSame(printBuffer10, printBuffer0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(printBuffer11, printBuffer10);
      assertNotSame(printBuffer11, printBuffer2);
      assertNotSame(printBuffer11, printBuffer1);
      assertNotSame(printBuffer11, printBuffer0);
      assertNotSame(printBuffer11, printBuffer7);
      assertNotSame(printBuffer11, printBuffer5);
      assertSame(printBuffer11, printBuffer9);
      assertNotSame(printBuffer11, printBuffer3);
      assertSame(printBuffer11, printBuffer4);
      assertNotSame(printBuffer11, printBuffer6);
      assertNotSame(printBuffer11, printBuffer8);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertNotSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer10);
      assertNotSame(printBuffer0, printBuffer9);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer11);
      assertNotSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer6);
      assertSame(printBuffer0, printBuffer7);
      assertNotSame(printBuffer0, printBuffer5);
      assertSame(printBuffer0, printBuffer8);
      assertNotSame(printBuffer1, printBuffer11);
      assertNotSame(printBuffer1, printBuffer4);
      assertNotSame(printBuffer1, printBuffer10);
      assertSame(printBuffer1, printBuffer7);
      assertSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer9);
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer5);
      assertSame(printBuffer1, printBuffer6);
      assertSame(printBuffer1, printBuffer8);
      assertNotSame(printBuffer4, printBuffer5);
      assertSame(printBuffer4, printBuffer9);
      assertSame(printBuffer4, printBuffer11);
      assertNotSame(printBuffer4, printBuffer3);
      assertNotSame(printBuffer4, printBuffer6);
      assertNotSame(printBuffer4, printBuffer8);
      assertSame(printBuffer4, printBuffer10);
      assertNotSame(printBuffer4, printBuffer2);
      assertNotSame(printBuffer4, printBuffer1);
      assertNotSame(printBuffer4, printBuffer7);
      assertNotSame(printBuffer4, printBuffer0);
      assertNotSame(printBuffer9, printBuffer5);
      assertNotSame(printBuffer9, printBuffer3);
      assertNotSame(printBuffer9, printBuffer0);
      assertSame(printBuffer9, printBuffer11);
      assertSame(printBuffer9, printBuffer10);
      assertNotSame(printBuffer9, printBuffer2);
      assertNotSame(printBuffer9, printBuffer8);
      assertSame(printBuffer9, printBuffer4);
      assertNotSame(printBuffer9, printBuffer1);
      assertNotSame(printBuffer9, printBuffer7);
      assertNotSame(printBuffer9, printBuffer6);
      assertNotNull(printBuffer11);
      
      // Undeclared exception!
      try { 
        printBuffer3.addToBeginning(printBuffer5);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Infinite recursion!
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = printBuffer0.append((-732));
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
      
      PrintBuffer printBuffer2 = new PrintBuffer(printBuffer0);
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertNotNull(printBuffer2);
      
      PrintBuffer printBuffer3 = printBuffer2.println((Object) printBuffer0);
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer1));
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer2, printBuffer3);
      assertNotSame(printBuffer2, printBuffer0);
      assertNotSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer3, printBuffer0);
      assertSame(printBuffer3, printBuffer2);
      assertNotSame(printBuffer3, printBuffer1);
      assertNotNull(printBuffer3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PrintBuffer printBuffer4 = printBuffer1.println(object0);
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertFalse(printBuffer4.equals((Object)printBuffer2));
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer4);
      assertNotSame(printBuffer1, printBuffer3);
      assertSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer1, printBuffer2);
      assertSame(printBuffer4, printBuffer1);
      assertNotSame(printBuffer4, printBuffer3);
      assertNotSame(printBuffer4, printBuffer2);
      assertSame(printBuffer4, printBuffer0);
      assertNotNull(printBuffer4);
      
      PrintBuffer printBuffer5 = printBuffer1.println();
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer5.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer2));
      assertSame(printBuffer0, printBuffer5);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer4);
      assertNotSame(printBuffer1, printBuffer3);
      assertSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer5);
      assertNotSame(printBuffer1, printBuffer2);
      assertSame(printBuffer5, printBuffer4);
      assertSame(printBuffer5, printBuffer0);
      assertSame(printBuffer5, printBuffer1);
      assertNotSame(printBuffer5, printBuffer3);
      assertNotSame(printBuffer5, printBuffer2);
      assertNotNull(printBuffer5);
      
      PrintBuffer printBuffer6 = printBuffer5.outdent();
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer5.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer2));
      assertFalse(printBuffer6.equals((Object)printBuffer2));
      assertFalse(printBuffer6.equals((Object)printBuffer3));
      assertSame(printBuffer0, printBuffer5);
      assertSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer4);
      assertSame(printBuffer1, printBuffer6);
      assertNotSame(printBuffer1, printBuffer3);
      assertSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer5);
      assertNotSame(printBuffer1, printBuffer2);
      assertSame(printBuffer5, printBuffer4);
      assertSame(printBuffer5, printBuffer0);
      assertSame(printBuffer5, printBuffer6);
      assertSame(printBuffer5, printBuffer1);
      assertNotSame(printBuffer5, printBuffer3);
      assertNotSame(printBuffer5, printBuffer2);
      assertNotSame(printBuffer6, printBuffer2);
      assertSame(printBuffer6, printBuffer5);
      assertSame(printBuffer6, printBuffer0);
      assertNotSame(printBuffer6, printBuffer3);
      assertSame(printBuffer6, printBuffer1);
      assertSame(printBuffer6, printBuffer4);
      assertNotNull(printBuffer6);
      
      PrintBuffer printBuffer7 = printBuffer1.outdent();
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer7.equals((Object)printBuffer3));
      assertFalse(printBuffer7.equals((Object)printBuffer2));
      assertSame(printBuffer0, printBuffer7);
      assertSame(printBuffer0, printBuffer5);
      assertSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer4);
      assertSame(printBuffer1, printBuffer7);
      assertSame(printBuffer1, printBuffer6);
      assertNotSame(printBuffer1, printBuffer3);
      assertSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer5);
      assertNotSame(printBuffer1, printBuffer2);
      assertSame(printBuffer7, printBuffer1);
      assertSame(printBuffer7, printBuffer4);
      assertNotSame(printBuffer7, printBuffer3);
      assertSame(printBuffer7, printBuffer6);
      assertSame(printBuffer7, printBuffer5);
      assertNotSame(printBuffer7, printBuffer2);
      assertSame(printBuffer7, printBuffer0);
      assertNotNull(printBuffer7);
      
      String string0 = printBuffer5.toString();
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer5.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer2));
      assertSame(printBuffer0, printBuffer7);
      assertSame(printBuffer0, printBuffer5);
      assertSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer4);
      assertSame(printBuffer1, printBuffer7);
      assertSame(printBuffer1, printBuffer6);
      assertNotSame(printBuffer1, printBuffer3);
      assertSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer5);
      assertNotSame(printBuffer1, printBuffer2);
      assertSame(printBuffer5, printBuffer4);
      assertSame(printBuffer5, printBuffer0);
      assertSame(printBuffer5, printBuffer6);
      assertSame(printBuffer5, printBuffer1);
      assertNotSame(printBuffer5, printBuffer3);
      assertSame(printBuffer5, printBuffer7);
      assertNotSame(printBuffer5, printBuffer2);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = '#';
      charArray0[2] = 't';
      charArray0[3] = 'J';
      charArray0[4] = 'L';
      charArray0[5] = 'D';
      charArray0[6] = '>';
      charArray0[7] = ' ';
      PrintBuffer printBuffer8 = printBuffer6.append(charArray0);
      assertArrayEquals(new char[] {' ', '#', 't', 'J', 'L', 'D', '>', ' '}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer8.equals((Object)printBuffer2));
      assertFalse(printBuffer8.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer2));
      assertFalse(printBuffer6.equals((Object)printBuffer2));
      assertFalse(printBuffer6.equals((Object)printBuffer3));
      assertSame(printBuffer0, printBuffer8);
      assertSame(printBuffer0, printBuffer7);
      assertSame(printBuffer0, printBuffer5);
      assertSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer8);
      assertSame(printBuffer1, printBuffer4);
      assertSame(printBuffer1, printBuffer7);
      assertSame(printBuffer1, printBuffer6);
      assertNotSame(printBuffer1, printBuffer3);
      assertSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer5);
      assertNotSame(printBuffer1, printBuffer2);
      assertSame(printBuffer8, printBuffer1);
      assertSame(printBuffer8, printBuffer0);
      assertSame(printBuffer8, printBuffer5);
      assertSame(printBuffer8, printBuffer6);
      assertNotSame(printBuffer8, printBuffer2);
      assertSame(printBuffer8, printBuffer7);
      assertSame(printBuffer8, printBuffer4);
      assertNotSame(printBuffer8, printBuffer3);
      assertSame(printBuffer5, printBuffer4);
      assertSame(printBuffer5, printBuffer8);
      assertSame(printBuffer5, printBuffer0);
      assertSame(printBuffer5, printBuffer6);
      assertSame(printBuffer5, printBuffer1);
      assertNotSame(printBuffer5, printBuffer3);
      assertSame(printBuffer5, printBuffer7);
      assertNotSame(printBuffer5, printBuffer2);
      assertNotSame(printBuffer6, printBuffer2);
      assertSame(printBuffer6, printBuffer5);
      assertSame(printBuffer6, printBuffer7);
      assertSame(printBuffer6, printBuffer8);
      assertSame(printBuffer6, printBuffer0);
      assertNotSame(printBuffer6, printBuffer3);
      assertSame(printBuffer6, printBuffer1);
      assertSame(printBuffer6, printBuffer4);
      assertNotNull(printBuffer8);
      
      PrintBuffer printBuffer9 = printBuffer0.append((double) (-732));
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer9.equals((Object)printBuffer2));
      assertFalse(printBuffer9.equals((Object)printBuffer3));
      assertSame(printBuffer0, printBuffer9);
      assertSame(printBuffer0, printBuffer8);
      assertSame(printBuffer0, printBuffer7);
      assertSame(printBuffer0, printBuffer5);
      assertSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer9, printBuffer6);
      assertSame(printBuffer9, printBuffer4);
      assertSame(printBuffer9, printBuffer8);
      assertSame(printBuffer9, printBuffer1);
      assertNotSame(printBuffer9, printBuffer2);
      assertSame(printBuffer9, printBuffer0);
      assertSame(printBuffer9, printBuffer5);
      assertNotSame(printBuffer9, printBuffer3);
      assertSame(printBuffer9, printBuffer7);
      assertNotNull(printBuffer9);
      
      PrintBuffer printBuffer10 = printBuffer6.append(1500);
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer10.equals((Object)printBuffer2));
      assertFalse(printBuffer10.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer2));
      assertFalse(printBuffer6.equals((Object)printBuffer2));
      assertFalse(printBuffer6.equals((Object)printBuffer3));
      assertSame(printBuffer0, printBuffer9);
      assertSame(printBuffer0, printBuffer8);
      assertSame(printBuffer0, printBuffer7);
      assertSame(printBuffer0, printBuffer5);
      assertSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer10);
      assertSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer9);
      assertSame(printBuffer1, printBuffer8);
      assertSame(printBuffer1, printBuffer4);
      assertSame(printBuffer1, printBuffer7);
      assertSame(printBuffer1, printBuffer10);
      assertSame(printBuffer1, printBuffer6);
      assertNotSame(printBuffer1, printBuffer3);
      assertSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer5);
      assertNotSame(printBuffer1, printBuffer2);
      assertSame(printBuffer10, printBuffer1);
      assertSame(printBuffer10, printBuffer4);
      assertSame(printBuffer10, printBuffer6);
      assertNotSame(printBuffer10, printBuffer2);
      assertSame(printBuffer10, printBuffer5);
      assertNotSame(printBuffer10, printBuffer3);
      assertSame(printBuffer10, printBuffer7);
      assertSame(printBuffer10, printBuffer8);
      assertSame(printBuffer10, printBuffer9);
      assertSame(printBuffer10, printBuffer0);
      assertSame(printBuffer5, printBuffer4);
      assertSame(printBuffer5, printBuffer8);
      assertSame(printBuffer5, printBuffer0);
      assertSame(printBuffer5, printBuffer6);
      assertSame(printBuffer5, printBuffer1);
      assertNotSame(printBuffer5, printBuffer3);
      assertSame(printBuffer5, printBuffer7);
      assertSame(printBuffer5, printBuffer9);
      assertSame(printBuffer5, printBuffer10);
      assertNotSame(printBuffer5, printBuffer2);
      assertNotSame(printBuffer6, printBuffer2);
      assertSame(printBuffer6, printBuffer5);
      assertSame(printBuffer6, printBuffer7);
      assertSame(printBuffer6, printBuffer8);
      assertSame(printBuffer6, printBuffer0);
      assertSame(printBuffer6, printBuffer9);
      assertSame(printBuffer6, printBuffer10);
      assertNotSame(printBuffer6, printBuffer3);
      assertSame(printBuffer6, printBuffer1);
      assertSame(printBuffer6, printBuffer4);
      assertNotNull(printBuffer10);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        printBuffer0.append(charArray0, 2832, 2832);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 2832, end 5664, length 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      StringBuilder stringBuilder0 = new StringBuilder(256);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, '<');
      assertEquals("<", stringBuilder0.toString());
      assertEquals("<", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.append(0L);
      assertEquals("<0", stringBuilder0.toString());
      assertEquals("<0", stringBuilder1.toString());
      assertEquals("<0", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      
      PrintBuffer printBuffer1 = new PrintBuffer(stringBuilder2);
      assertEquals("<0", stringBuilder0.toString());
      assertEquals("<0", stringBuilder1.toString());
      assertEquals("<0", stringBuilder2.toString());
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotNull(printBuffer1);
      
      PrintBuffer printBuffer2 = printBuffer0.addToBeginning(printBuffer1);
      assertEquals("<0", stringBuilder0.toString());
      assertEquals("<0", stringBuilder1.toString());
      assertEquals("<0", stringBuilder2.toString());
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer2, printBuffer1);
      assertSame(printBuffer2, printBuffer0);
      assertNotNull(printBuffer2);
      
      PrintBuffer printBuffer3 = new PrintBuffer(printBuffer0);
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer3.equals((Object)printBuffer1));
      assertFalse(printBuffer3.equals((Object)printBuffer2));
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertNotNull(printBuffer3);
      
      PrintBuffer printBuffer4 = printBuffer0.indent();
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer2);
      assertSame(printBuffer4, printBuffer2);
      assertSame(printBuffer4, printBuffer0);
      assertNotSame(printBuffer4, printBuffer1);
      assertNotSame(printBuffer4, printBuffer3);
      assertNotNull(printBuffer4);
      
      PrintBuffer printBuffer5 = new PrintBuffer(stringBuilder0);
      assertEquals("<0", stringBuilder0.toString());
      assertFalse(printBuffer5.equals((Object)printBuffer4));
      assertFalse(printBuffer5.equals((Object)printBuffer0));
      assertFalse(printBuffer5.equals((Object)printBuffer2));
      assertFalse(printBuffer5.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer1));
      assertNotNull(printBuffer5);
      
      PrintBuffer.PrintStack printBuffer_PrintStack0 = printBuffer5.head;
      assertNotNull(printBuffer_PrintStack0);
      
      PrintBuffer.PrintStack printBuffer_PrintStack1 = printBuffer_PrintStack0.next;
      assertNull(printBuffer_PrintStack1);
      
      printBuffer4.head = null;
      PrintBuffer printBuffer6 = printBuffer3.append(true);
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer3.equals((Object)printBuffer5));
      assertFalse(printBuffer3.equals((Object)printBuffer1));
      assertFalse(printBuffer3.equals((Object)printBuffer2));
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer4));
      assertFalse(printBuffer6.equals((Object)printBuffer1));
      assertFalse(printBuffer6.equals((Object)printBuffer5));
      assertFalse(printBuffer6.equals((Object)printBuffer4));
      assertFalse(printBuffer6.equals((Object)printBuffer2));
      assertFalse(printBuffer6.equals((Object)printBuffer0));
      assertSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer5);
      assertNotSame(printBuffer3, printBuffer5);
      assertSame(printBuffer3, printBuffer6);
      assertNotSame(printBuffer3, printBuffer1);
      assertNotSame(printBuffer3, printBuffer2);
      assertNotSame(printBuffer3, printBuffer0);
      assertNotSame(printBuffer3, printBuffer4);
      assertNotSame(printBuffer6, printBuffer1);
      assertNotSame(printBuffer6, printBuffer5);
      assertNotSame(printBuffer6, printBuffer4);
      assertNotSame(printBuffer6, printBuffer2);
      assertSame(printBuffer6, printBuffer3);
      assertNotSame(printBuffer6, printBuffer0);
      assertNotNull(printBuffer6);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      // Undeclared exception!
      try { 
        printBuffer1.append(charArray0, 256, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 256, end 256, length 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      String string0 = printBuffer0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        printBuffer0.append((CharSequence) "", 2, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 2, end 2, length 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = printBuffer0.append((-1L));
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PrintBuffer printBuffer1 = printBuffer0.append(object0);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      PrintBuffer printBuffer1 = printBuffer0.append((CharSequence) charBuffer0, 0, 0);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = new PrintBuffer(printBuffer0);
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotNull(printBuffer1);
      
      PrintBuffer.PrintStack printBuffer_PrintStack0 = printBuffer1.tail;
      assertNotNull(printBuffer_PrintStack0);
      
      printBuffer0.tail = printBuffer_PrintStack0;
      String string0 = printBuffer1.footer();
      assertEquals("", string0);
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotNull(string0);
      
      PrintBuffer printBuffer2 = printBuffer1.println((String) null);
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer2, printBuffer0);
      assertSame(printBuffer2, printBuffer1);
      assertNotNull(printBuffer2);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      PrintBuffer printBuffer3 = printBuffer0.println((CharSequence) charBuffer0);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer3.equals((Object)printBuffer2));
      assertFalse(printBuffer3.equals((Object)printBuffer1));
      assertSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer3, printBuffer0);
      assertNotSame(printBuffer3, printBuffer2);
      assertNotSame(printBuffer3, printBuffer1);
      assertNotNull(printBuffer3);
      
      PrintBuffer printBuffer4 = new PrintBuffer(printBuffer0);
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer2));
      assertFalse(printBuffer4.equals((Object)printBuffer0));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertNotNull(printBuffer4);
      
      PrintBuffer printBuffer5 = printBuffer1.append((Object) printBuffer4);
      assertFalse(printBuffer0.equals((Object)printBuffer4));
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer4.equals((Object)printBuffer2));
      assertFalse(printBuffer4.equals((Object)printBuffer0));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer5.equals((Object)printBuffer4));
      assertFalse(printBuffer5.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer0));
      assertNotSame(printBuffer0, printBuffer5);
      assertNotSame(printBuffer0, printBuffer4);
      assertSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer1, printBuffer3);
      assertSame(printBuffer1, printBuffer2);
      assertSame(printBuffer1, printBuffer5);
      assertNotSame(printBuffer1, printBuffer4);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer4, printBuffer5);
      assertNotSame(printBuffer4, printBuffer2);
      assertNotSame(printBuffer4, printBuffer0);
      assertNotSame(printBuffer4, printBuffer3);
      assertNotSame(printBuffer4, printBuffer1);
      assertSame(printBuffer5, printBuffer1);
      assertSame(printBuffer5, printBuffer2);
      assertNotSame(printBuffer5, printBuffer4);
      assertNotSame(printBuffer5, printBuffer3);
      assertNotSame(printBuffer5, printBuffer0);
      assertNotNull(printBuffer5);
      
      PrintBuffer printBuffer6 = printBuffer5.append(0L);
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer0.equals((Object)printBuffer4));
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer3));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer4.equals((Object)printBuffer5));
      assertFalse(printBuffer4.equals((Object)printBuffer2));
      assertFalse(printBuffer4.equals((Object)printBuffer0));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer5.equals((Object)printBuffer4));
      assertFalse(printBuffer5.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer0));
      assertFalse(printBuffer6.equals((Object)printBuffer3));
      assertFalse(printBuffer6.equals((Object)printBuffer4));
      assertFalse(printBuffer6.equals((Object)printBuffer0));
      assertNotSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer5);
      assertSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer1, printBuffer3);
      assertSame(printBuffer1, printBuffer2);
      assertSame(printBuffer1, printBuffer5);
      assertNotSame(printBuffer1, printBuffer4);
      assertNotSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer6);
      assertNotSame(printBuffer4, printBuffer6);
      assertNotSame(printBuffer4, printBuffer5);
      assertNotSame(printBuffer4, printBuffer2);
      assertNotSame(printBuffer4, printBuffer0);
      assertNotSame(printBuffer4, printBuffer3);
      assertNotSame(printBuffer4, printBuffer1);
      assertSame(printBuffer5, printBuffer1);
      assertSame(printBuffer5, printBuffer2);
      assertSame(printBuffer5, printBuffer6);
      assertNotSame(printBuffer5, printBuffer4);
      assertNotSame(printBuffer5, printBuffer3);
      assertNotSame(printBuffer5, printBuffer0);
      assertNotSame(printBuffer6, printBuffer3);
      assertNotSame(printBuffer6, printBuffer4);
      assertNotSame(printBuffer6, printBuffer0);
      assertSame(printBuffer6, printBuffer5);
      assertSame(printBuffer6, printBuffer1);
      assertSame(printBuffer6, printBuffer2);
      assertNotNull(printBuffer6);
      
      // Undeclared exception!
      try { 
        printBuffer5.append((CharSequence) charBuffer0, 2747, 2747);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 2747, end 2747, length 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer((PrintBuffer) null);
      assertNotNull(printBuffer0);
      
      char char0 = '_';
      PrintBuffer printBuffer1 = printBuffer0.append('_');
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
      
      PrintBuffer.PrintStack printBuffer_PrintStack0 = new PrintBuffer.PrintStack();
      assertNotNull(printBuffer_PrintStack0);
      
      String string0 = "jCo M ~}I`}q'";
      PrintBuffer.PrintStack printBuffer_PrintStack1 = printBuffer_PrintStack0.push("jCo M ~}I`}q'", printBuffer1);
      assertFalse(printBuffer_PrintStack1.equals((Object)printBuffer_PrintStack0));
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer_PrintStack0, printBuffer_PrintStack1);
      assertNotSame(printBuffer_PrintStack1, printBuffer_PrintStack0);
      assertNotNull(printBuffer_PrintStack1);
      
      char char1 = '';
      printBuffer_PrintStack1.buffer = printBuffer0;
      printBuffer_PrintStack1.next = printBuffer_PrintStack0;
      PrintBuffer printBuffer2 = printBuffer1.append('');
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer2);
      assertSame(printBuffer1, printBuffer2);
      assertSame(printBuffer1, printBuffer0);
      assertSame(printBuffer2, printBuffer0);
      assertSame(printBuffer2, printBuffer1);
      assertNotNull(printBuffer2);
      
      PrintBuffer.PrintStack printBuffer_PrintStack2 = printBuffer_PrintStack1.next;
      assertFalse(printBuffer_PrintStack2.equals((Object)printBuffer_PrintStack1));
      assertNotSame(printBuffer_PrintStack2, printBuffer_PrintStack1);
      assertSame(printBuffer_PrintStack2, printBuffer_PrintStack0);
      assertNotNull(printBuffer_PrintStack2);
      
      // Undeclared exception!
      try { 
        printBuffer_PrintStack2.push("", printBuffer0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Pushing to the same stack twice overwrites old value.
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer.PrintStack printBuffer_PrintStack0 = printBuffer0.head;
      assertNotNull(printBuffer_PrintStack0);
      
      PrintBuffer.PrintStack printBuffer_PrintStack1 = new PrintBuffer.PrintStack();
      assertFalse(printBuffer_PrintStack1.equals((Object)printBuffer_PrintStack0));
      assertNotNull(printBuffer_PrintStack1);
      
      printBuffer_PrintStack0.next = printBuffer_PrintStack1;
      // Undeclared exception!
      try { 
        printBuffer_PrintStack0.push("", printBuffer0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Pushing to the same stack twice overwrites old value.
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer.PrintStack printBuffer_PrintStack0 = printBuffer0.tail;
      assertNotNull(printBuffer_PrintStack0);
      
      PrintBuffer.PrintStack printBuffer_PrintStack1 = printBuffer_PrintStack0.push((String) null, printBuffer0);
      assertFalse(printBuffer_PrintStack1.equals((Object)printBuffer_PrintStack0));
      assertNotSame(printBuffer_PrintStack0, printBuffer_PrintStack1);
      assertNotSame(printBuffer_PrintStack1, printBuffer_PrintStack0);
      assertNotNull(printBuffer_PrintStack1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer.PrintStack printBuffer_PrintStack0 = printBuffer0.head;
      assertNotNull(printBuffer_PrintStack0);
      
      PrintBuffer.PrintStack printBuffer_PrintStack1 = printBuffer_PrintStack0.push("  ", printBuffer0);
      assertFalse(printBuffer_PrintStack1.equals((Object)printBuffer_PrintStack0));
      assertNotSame(printBuffer_PrintStack0, printBuffer_PrintStack1);
      assertNotSame(printBuffer_PrintStack1, printBuffer_PrintStack0);
      assertNotNull(printBuffer_PrintStack1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      PrintBuffer printBuffer0 = new PrintBuffer(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = new PrintBuffer(printBuffer0);
      assertEquals("", stringBuilder0.toString());
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotNull(printBuffer1);
      
      char[] charArray0 = new char[4];
      PrintBuffer printBuffer2 = printBuffer0.indentln("");
      assertEquals("    \n", stringBuilder0.toString());
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer2, printBuffer0);
      assertNotSame(printBuffer2, printBuffer1);
      assertNotNull(printBuffer2);
      
      charArray0[0] = 'N';
      charArray0[1] = '6';
      charArray0[2] = 'n';
      charArray0[3] = '7';
      PrintBuffer printBuffer3 = printBuffer1.indentln(charArray0);
      assertArrayEquals(new char[] {'N', '6', 'n', '7'}, charArray0);
      assertEquals("    \n", stringBuilder0.toString());
      assertEquals(4, charArray0.length);
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer2));
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer3, printBuffer2);
      assertNotSame(printBuffer3, printBuffer0);
      assertSame(printBuffer3, printBuffer1);
      assertNotNull(printBuffer3);
      
      PrintBuffer printBuffer4 = new PrintBuffer(printBuffer1);
      assertEquals("    \n", stringBuilder0.toString());
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer4.equals((Object)printBuffer0));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer2));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertNotNull(printBuffer4);
      
      PrintBuffer.PrintStack printBuffer_PrintStack0 = printBuffer4.head;
      assertNotNull(printBuffer_PrintStack0);
      
      PrintBuffer.PrintStack printBuffer_PrintStack1 = printBuffer_PrintStack0.push("", printBuffer3);
      assertArrayEquals(new char[] {'N', '6', 'n', '7'}, charArray0);
      assertEquals("    \n", stringBuilder0.toString());
      assertEquals(4, charArray0.length);
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer3.equals((Object)printBuffer2));
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer4));
      assertFalse(printBuffer4.equals((Object)printBuffer0));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer2));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertFalse(printBuffer_PrintStack1.equals((Object)printBuffer_PrintStack0));
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer4);
      assertNotSame(printBuffer3, printBuffer2);
      assertNotSame(printBuffer3, printBuffer0);
      assertSame(printBuffer3, printBuffer1);
      assertNotSame(printBuffer3, printBuffer4);
      assertNotSame(printBuffer4, printBuffer0);
      assertNotSame(printBuffer4, printBuffer1);
      assertNotSame(printBuffer4, printBuffer2);
      assertNotSame(printBuffer4, printBuffer3);
      assertNotSame(printBuffer_PrintStack0, printBuffer_PrintStack1);
      assertNotSame(printBuffer_PrintStack1, printBuffer_PrintStack0);
      assertNotNull(printBuffer_PrintStack1);
      
      PrintBuffer.PrintStack printBuffer_PrintStack2 = printBuffer_PrintStack1.push((String) null, printBuffer0);
      assertArrayEquals(new char[] {'N', '6', 'n', '7'}, charArray0);
      assertEquals("    \n", stringBuilder0.toString());
      assertEquals(4, charArray0.length);
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer3.equals((Object)printBuffer2));
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer4));
      assertFalse(printBuffer4.equals((Object)printBuffer0));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer2));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertFalse(printBuffer_PrintStack0.equals((Object)printBuffer_PrintStack1));
      assertFalse(printBuffer_PrintStack1.equals((Object)printBuffer_PrintStack0));
      assertFalse(printBuffer_PrintStack2.equals((Object)printBuffer_PrintStack0));
      assertFalse(printBuffer_PrintStack2.equals((Object)printBuffer_PrintStack1));
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer4);
      assertNotSame(printBuffer3, printBuffer2);
      assertNotSame(printBuffer3, printBuffer0);
      assertSame(printBuffer3, printBuffer1);
      assertNotSame(printBuffer3, printBuffer4);
      assertNotSame(printBuffer4, printBuffer0);
      assertNotSame(printBuffer4, printBuffer1);
      assertNotSame(printBuffer4, printBuffer2);
      assertNotSame(printBuffer4, printBuffer3);
      assertNotSame(printBuffer_PrintStack0, printBuffer_PrintStack1);
      assertNotSame(printBuffer_PrintStack0, printBuffer_PrintStack2);
      assertNotSame(printBuffer_PrintStack1, printBuffer_PrintStack2);
      assertNotSame(printBuffer_PrintStack1, printBuffer_PrintStack0);
      assertNotSame(printBuffer_PrintStack2, printBuffer_PrintStack0);
      assertNotSame(printBuffer_PrintStack2, printBuffer_PrintStack1);
      assertNotNull(printBuffer_PrintStack2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = printBuffer0.outdent();
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = printBuffer0.append((-1512.004349161));
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
      
      PrintBuffer printBuffer2 = printBuffer0.append(false);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer2);
      assertSame(printBuffer2, printBuffer1);
      assertSame(printBuffer2, printBuffer0);
      assertNotNull(printBuffer2);
      
      PrintBuffer printBuffer3 = new PrintBuffer(printBuffer0);
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer2));
      assertFalse(printBuffer3.equals((Object)printBuffer1));
      assertNotNull(printBuffer3);
      
      PrintBuffer printBuffer4 = printBuffer3.outdent();
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer2));
      assertFalse(printBuffer3.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer0));
      assertFalse(printBuffer4.equals((Object)printBuffer2));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer3, printBuffer0);
      assertSame(printBuffer3, printBuffer4);
      assertNotSame(printBuffer3, printBuffer2);
      assertNotSame(printBuffer3, printBuffer1);
      assertNotSame(printBuffer4, printBuffer0);
      assertNotSame(printBuffer4, printBuffer2);
      assertNotSame(printBuffer4, printBuffer1);
      assertSame(printBuffer4, printBuffer3);
      assertNotNull(printBuffer4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[1] = 'v';
      charArray0[2] = 'N';
      charArray0[3] = 'B';
      charArray0[4] = 't';
      charArray0[5] = '+';
      charArray0[6] = '8';
      charArray0[7] = '-';
      PrintBuffer printBuffer5 = printBuffer2.append(charArray0);
      assertArrayEquals(new char[] {'z', 'v', 'N', 'B', 't', '+', '8', '-'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(printBuffer0.equals((Object)printBuffer4));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer2.equals((Object)printBuffer4));
      assertFalse(printBuffer2.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer4));
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer5);
      assertNotSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer3);
      assertSame(printBuffer2, printBuffer1);
      assertSame(printBuffer2, printBuffer5);
      assertSame(printBuffer2, printBuffer0);
      assertNotSame(printBuffer2, printBuffer4);
      assertNotSame(printBuffer2, printBuffer3);
      assertNotSame(printBuffer5, printBuffer3);
      assertSame(printBuffer5, printBuffer1);
      assertNotSame(printBuffer5, printBuffer4);
      assertSame(printBuffer5, printBuffer0);
      assertSame(printBuffer5, printBuffer2);
      assertNotNull(printBuffer5);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PrintBuffer printBuffer1 = printBuffer0.indentln(object0);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = printBuffer0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      
      PrintBuffer printBuffer1 = printBuffer0.indentln(object0);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
      
      PrintBuffer printBuffer2 = printBuffer1.append((-1122.59701));
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer2);
      assertSame(printBuffer1, printBuffer2);
      assertSame(printBuffer1, printBuffer0);
      assertSame(printBuffer2, printBuffer1);
      assertSame(printBuffer2, printBuffer0);
      assertNotNull(printBuffer2);
      
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-1698));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1698
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = printBuffer0.append((-2264.95197));
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = printBuffer0.append(true);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
      
      PrintBuffer printBuffer2 = printBuffer0.append(0.0);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer2);
      assertSame(printBuffer2, printBuffer1);
      assertSame(printBuffer2, printBuffer0);
      assertNotNull(printBuffer2);
      
      PrintBuffer printBuffer3 = printBuffer0.append('G');
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer2);
      assertSame(printBuffer3, printBuffer2);
      assertSame(printBuffer3, printBuffer0);
      assertSame(printBuffer3, printBuffer1);
      assertNotNull(printBuffer3);
      
      PrintBuffer printBuffer4 = printBuffer2.indentln("M#-xrE");
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer3);
      assertSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer4);
      assertSame(printBuffer2, printBuffer3);
      assertSame(printBuffer2, printBuffer4);
      assertSame(printBuffer2, printBuffer1);
      assertSame(printBuffer2, printBuffer0);
      assertSame(printBuffer4, printBuffer3);
      assertSame(printBuffer4, printBuffer0);
      assertSame(printBuffer4, printBuffer1);
      assertSame(printBuffer4, printBuffer2);
      assertNotNull(printBuffer4);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      char[] charArray0 = new char[0];
      PrintBuffer printBuffer1 = printBuffer0.indentln(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = printBuffer0.append(false);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      String string0 = printBuffer0.header();
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      PrintBuffer printBuffer1 = printBuffer0.append(true);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
      
      charArray0[0] = 'y';
      charArray0[1] = ':';
      PrintBuffer printBuffer2 = printBuffer0.indentln(charArray0);
      assertArrayEquals(new char[] {'y', ':'}, charArray0);
      assertEquals(2, charArray0.length);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer2);
      assertSame(printBuffer2, printBuffer0);
      assertSame(printBuffer2, printBuffer1);
      assertNotNull(printBuffer2);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = new PrintBuffer(printBuffer0);
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotNull(printBuffer1);
      
      PrintBuffer printBuffer2 = printBuffer0.println((Object) printBuffer1);
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer1, printBuffer2);
      assertSame(printBuffer2, printBuffer0);
      assertNotSame(printBuffer2, printBuffer1);
      assertNotNull(printBuffer2);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      PrintBuffer printBuffer0 = new PrintBuffer(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = printBuffer0.println((CharSequence) stringBuilder0);
      assertEquals("    \n", stringBuilder0.toString());
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = new PrintBuffer();
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotNull(printBuffer1);
      
      PrintBuffer printBuffer2 = new PrintBuffer();
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertNotNull(printBuffer2);
      
      String string0 = printBuffer1.footer();
      assertEquals("", string0);
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotNull(string0);
      
      PrintBuffer printBuffer3 = printBuffer1.append(0);
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer2));
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer3);
      assertSame(printBuffer3, printBuffer1);
      assertNotSame(printBuffer3, printBuffer0);
      assertNotSame(printBuffer3, printBuffer2);
      assertNotNull(printBuffer3);
      
      PrintBuffer printBuffer4 = printBuffer0.indentln("nPH3Q,<.Ek");
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer2));
      assertFalse(printBuffer4.equals((Object)printBuffer1));
      assertFalse(printBuffer4.equals((Object)printBuffer3));
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer4, printBuffer2);
      assertNotSame(printBuffer4, printBuffer1);
      assertSame(printBuffer4, printBuffer0);
      assertNotSame(printBuffer4, printBuffer3);
      assertNotNull(printBuffer4);
      
      PrintBuffer printBuffer5 = printBuffer1.addToBeginning(printBuffer2);
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer4));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertFalse(printBuffer2.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer2));
      assertFalse(printBuffer5.equals((Object)printBuffer0));
      assertFalse(printBuffer5.equals((Object)printBuffer4));
      assertNotSame(printBuffer1, printBuffer2);
      assertSame(printBuffer1, printBuffer5);
      assertNotSame(printBuffer1, printBuffer4);
      assertNotSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer2, printBuffer5);
      assertNotSame(printBuffer2, printBuffer0);
      assertNotSame(printBuffer2, printBuffer4);
      assertNotSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer3);
      assertSame(printBuffer5, printBuffer1);
      assertNotSame(printBuffer5, printBuffer2);
      assertSame(printBuffer5, printBuffer3);
      assertNotSame(printBuffer5, printBuffer0);
      assertNotSame(printBuffer5, printBuffer4);
      assertNotNull(printBuffer5);
      
      PrintBuffer printBuffer6 = printBuffer5.outdent();
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer5));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer4));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertFalse(printBuffer2.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer2));
      assertFalse(printBuffer5.equals((Object)printBuffer0));
      assertFalse(printBuffer5.equals((Object)printBuffer4));
      assertFalse(printBuffer6.equals((Object)printBuffer0));
      assertFalse(printBuffer6.equals((Object)printBuffer4));
      assertFalse(printBuffer6.equals((Object)printBuffer2));
      assertSame(printBuffer1, printBuffer6);
      assertNotSame(printBuffer1, printBuffer2);
      assertSame(printBuffer1, printBuffer5);
      assertNotSame(printBuffer1, printBuffer4);
      assertNotSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer2, printBuffer6);
      assertNotSame(printBuffer2, printBuffer5);
      assertNotSame(printBuffer2, printBuffer0);
      assertNotSame(printBuffer2, printBuffer4);
      assertNotSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer3);
      assertSame(printBuffer5, printBuffer1);
      assertNotSame(printBuffer5, printBuffer2);
      assertSame(printBuffer5, printBuffer6);
      assertSame(printBuffer5, printBuffer3);
      assertNotSame(printBuffer5, printBuffer0);
      assertNotSame(printBuffer5, printBuffer4);
      assertNotSame(printBuffer6, printBuffer0);
      assertNotSame(printBuffer6, printBuffer4);
      assertSame(printBuffer6, printBuffer1);
      assertNotSame(printBuffer6, printBuffer2);
      assertSame(printBuffer6, printBuffer3);
      assertSame(printBuffer6, printBuffer5);
      assertNotNull(printBuffer6);
      
      PrintBuffer printBuffer7 = new PrintBuffer(printBuffer0);
      assertFalse(printBuffer0.equals((Object)printBuffer6));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer7.equals((Object)printBuffer3));
      assertFalse(printBuffer7.equals((Object)printBuffer1));
      assertFalse(printBuffer7.equals((Object)printBuffer2));
      assertFalse(printBuffer7.equals((Object)printBuffer4));
      assertFalse(printBuffer7.equals((Object)printBuffer6));
      assertFalse(printBuffer7.equals((Object)printBuffer5));
      assertFalse(printBuffer7.equals((Object)printBuffer0));
      assertNotNull(printBuffer7);
      
      PrintBuffer printBuffer8 = printBuffer6.addToEnd(printBuffer7);
      assertFalse(printBuffer0.equals((Object)printBuffer6));
      assertFalse(printBuffer0.equals((Object)printBuffer7));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer1.equals((Object)printBuffer7));
      assertFalse(printBuffer2.equals((Object)printBuffer6));
      assertFalse(printBuffer2.equals((Object)printBuffer5));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer4));
      assertFalse(printBuffer2.equals((Object)printBuffer7));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertFalse(printBuffer2.equals((Object)printBuffer3));
      assertFalse(printBuffer5.equals((Object)printBuffer2));
      assertFalse(printBuffer5.equals((Object)printBuffer7));
      assertFalse(printBuffer5.equals((Object)printBuffer0));
      assertFalse(printBuffer5.equals((Object)printBuffer4));
      assertFalse(printBuffer6.equals((Object)printBuffer0));
      assertFalse(printBuffer6.equals((Object)printBuffer4));
      assertFalse(printBuffer6.equals((Object)printBuffer2));
      assertFalse(printBuffer6.equals((Object)printBuffer7));
      assertFalse(printBuffer7.equals((Object)printBuffer3));
      assertFalse(printBuffer7.equals((Object)printBuffer1));
      assertFalse(printBuffer7.equals((Object)printBuffer2));
      assertFalse(printBuffer7.equals((Object)printBuffer4));
      assertFalse(printBuffer7.equals((Object)printBuffer6));
      assertFalse(printBuffer7.equals((Object)printBuffer5));
      assertFalse(printBuffer7.equals((Object)printBuffer0));
      assertFalse(printBuffer8.equals((Object)printBuffer4));
      assertFalse(printBuffer8.equals((Object)printBuffer7));
      assertFalse(printBuffer8.equals((Object)printBuffer0));
      assertFalse(printBuffer8.equals((Object)printBuffer2));
      assertNotSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer7);
      assertNotSame(printBuffer0, printBuffer8);
      assertNotSame(printBuffer0, printBuffer5);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer4);
      assertSame(printBuffer1, printBuffer6);
      assertSame(printBuffer1, printBuffer8);
      assertNotSame(printBuffer1, printBuffer2);
      assertSame(printBuffer1, printBuffer5);
      assertNotSame(printBuffer1, printBuffer4);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer1, printBuffer7);
      assertSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer2, printBuffer6);
      assertNotSame(printBuffer2, printBuffer5);
      assertNotSame(printBuffer2, printBuffer0);
      assertNotSame(printBuffer2, printBuffer4);
      assertNotSame(printBuffer2, printBuffer7);
      assertNotSame(printBuffer2, printBuffer8);
      assertNotSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer3);
      assertSame(printBuffer5, printBuffer1);
      assertSame(printBuffer5, printBuffer8);
      assertNotSame(printBuffer5, printBuffer2);
      assertSame(printBuffer5, printBuffer6);
      assertNotSame(printBuffer5, printBuffer7);
      assertSame(printBuffer5, printBuffer3);
      assertNotSame(printBuffer5, printBuffer0);
      assertNotSame(printBuffer5, printBuffer4);
      assertNotSame(printBuffer6, printBuffer0);
      assertNotSame(printBuffer6, printBuffer4);
      assertSame(printBuffer6, printBuffer1);
      assertNotSame(printBuffer6, printBuffer2);
      assertSame(printBuffer6, printBuffer3);
      assertSame(printBuffer6, printBuffer5);
      assertSame(printBuffer6, printBuffer8);
      assertNotSame(printBuffer6, printBuffer7);
      assertNotSame(printBuffer7, printBuffer3);
      assertNotSame(printBuffer7, printBuffer1);
      assertNotSame(printBuffer7, printBuffer2);
      assertNotSame(printBuffer7, printBuffer4);
      assertNotSame(printBuffer7, printBuffer6);
      assertNotSame(printBuffer7, printBuffer5);
      assertNotSame(printBuffer7, printBuffer0);
      assertNotSame(printBuffer7, printBuffer8);
      assertSame(printBuffer8, printBuffer3);
      assertSame(printBuffer8, printBuffer5);
      assertNotSame(printBuffer8, printBuffer4);
      assertNotSame(printBuffer8, printBuffer7);
      assertNotSame(printBuffer8, printBuffer0);
      assertSame(printBuffer8, printBuffer1);
      assertNotSame(printBuffer8, printBuffer2);
      assertSame(printBuffer8, printBuffer6);
      assertNotNull(printBuffer8);
      
      PrintBuffer printBuffer9 = printBuffer2.println("");
      assertFalse(printBuffer2.equals((Object)printBuffer6));
      assertFalse(printBuffer2.equals((Object)printBuffer5));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer4));
      assertFalse(printBuffer2.equals((Object)printBuffer7));
      assertFalse(printBuffer2.equals((Object)printBuffer8));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertFalse(printBuffer2.equals((Object)printBuffer3));
      assertFalse(printBuffer9.equals((Object)printBuffer5));
      assertFalse(printBuffer9.equals((Object)printBuffer0));
      assertFalse(printBuffer9.equals((Object)printBuffer8));
      assertFalse(printBuffer9.equals((Object)printBuffer4));
      assertFalse(printBuffer9.equals((Object)printBuffer7));
      assertFalse(printBuffer9.equals((Object)printBuffer6));
      assertFalse(printBuffer9.equals((Object)printBuffer3));
      assertFalse(printBuffer9.equals((Object)printBuffer1));
      assertNotSame(printBuffer2, printBuffer6);
      assertNotSame(printBuffer2, printBuffer5);
      assertSame(printBuffer2, printBuffer9);
      assertNotSame(printBuffer2, printBuffer0);
      assertNotSame(printBuffer2, printBuffer4);
      assertNotSame(printBuffer2, printBuffer7);
      assertNotSame(printBuffer2, printBuffer8);
      assertNotSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer3);
      assertNotSame(printBuffer9, printBuffer5);
      assertNotSame(printBuffer9, printBuffer0);
      assertNotSame(printBuffer9, printBuffer8);
      assertNotSame(printBuffer9, printBuffer4);
      assertSame(printBuffer9, printBuffer2);
      assertNotSame(printBuffer9, printBuffer7);
      assertNotSame(printBuffer9, printBuffer6);
      assertNotSame(printBuffer9, printBuffer3);
      assertNotSame(printBuffer9, printBuffer1);
      assertNotNull(printBuffer9);
      
      String string1 = printBuffer0.toString();
      assertEquals("    nPH3Q,<.Ek\n", string1);
      assertFalse(printBuffer0.equals((Object)printBuffer9));
      assertFalse(printBuffer0.equals((Object)printBuffer6));
      assertFalse(printBuffer0.equals((Object)printBuffer7));
      assertFalse(printBuffer0.equals((Object)printBuffer8));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(printBuffer0, printBuffer9);
      assertNotSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer7);
      assertNotSame(printBuffer0, printBuffer8);
      assertNotSame(printBuffer0, printBuffer5);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer4);
      assertNotNull(string1);
      
      PrintBuffer printBuffer10 = printBuffer0.indentln("");
      assertFalse(printBuffer0.equals((Object)printBuffer9));
      assertFalse(printBuffer0.equals((Object)printBuffer6));
      assertFalse(printBuffer0.equals((Object)printBuffer7));
      assertFalse(printBuffer0.equals((Object)printBuffer8));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer10.equals((Object)printBuffer3));
      assertFalse(printBuffer10.equals((Object)printBuffer5));
      assertFalse(printBuffer10.equals((Object)printBuffer7));
      assertFalse(printBuffer10.equals((Object)printBuffer6));
      assertFalse(printBuffer10.equals((Object)printBuffer8));
      assertFalse(printBuffer10.equals((Object)printBuffer1));
      assertFalse(printBuffer10.equals((Object)printBuffer9));
      assertFalse(printBuffer10.equals((Object)printBuffer2));
      assertNotSame(printBuffer0, printBuffer9);
      assertNotSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer7);
      assertNotSame(printBuffer0, printBuffer8);
      assertNotSame(printBuffer0, printBuffer5);
      assertNotSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer10);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer10, printBuffer3);
      assertNotSame(printBuffer10, printBuffer5);
      assertSame(printBuffer10, printBuffer4);
      assertNotSame(printBuffer10, printBuffer7);
      assertNotSame(printBuffer10, printBuffer6);
      assertNotSame(printBuffer10, printBuffer8);
      assertNotSame(printBuffer10, printBuffer1);
      assertSame(printBuffer10, printBuffer0);
      assertNotSame(printBuffer10, printBuffer9);
      assertNotSame(printBuffer10, printBuffer2);
      assertNotNull(printBuffer10);
      
      PrintBuffer.PrintStack printBuffer_PrintStack0 = new PrintBuffer.PrintStack();
      assertNotNull(printBuffer_PrintStack0);
      
      printBuffer_PrintStack0.prefix = "";
      PrintBuffer.PrintStack printBuffer_PrintStack1 = printBuffer_PrintStack0.push("", printBuffer2);
      assertFalse(printBuffer2.equals((Object)printBuffer10));
      assertFalse(printBuffer2.equals((Object)printBuffer6));
      assertFalse(printBuffer2.equals((Object)printBuffer5));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer4));
      assertFalse(printBuffer2.equals((Object)printBuffer7));
      assertFalse(printBuffer2.equals((Object)printBuffer8));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertFalse(printBuffer2.equals((Object)printBuffer3));
      assertFalse(printBuffer_PrintStack1.equals((Object)printBuffer_PrintStack0));
      assertNotSame(printBuffer2, printBuffer10);
      assertNotSame(printBuffer2, printBuffer6);
      assertNotSame(printBuffer2, printBuffer5);
      assertSame(printBuffer2, printBuffer9);
      assertNotSame(printBuffer2, printBuffer0);
      assertNotSame(printBuffer2, printBuffer4);
      assertNotSame(printBuffer2, printBuffer7);
      assertNotSame(printBuffer2, printBuffer8);
      assertNotSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer3);
      assertNotSame(printBuffer_PrintStack0, printBuffer_PrintStack1);
      assertNotSame(printBuffer_PrintStack1, printBuffer_PrintStack0);
      assertNotNull(printBuffer_PrintStack1);
      
      String string2 = printBuffer1.toString();
      assertEquals("  \n0    nPH3Q,<.Ek\n    \n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(printBuffer1.equals((Object)printBuffer2));
      assertFalse(printBuffer1.equals((Object)printBuffer9));
      assertFalse(printBuffer1.equals((Object)printBuffer10));
      assertFalse(printBuffer1.equals((Object)printBuffer4));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer1.equals((Object)printBuffer7));
      assertSame(printBuffer1, printBuffer6);
      assertSame(printBuffer1, printBuffer8);
      assertNotSame(printBuffer1, printBuffer2);
      assertSame(printBuffer1, printBuffer5);
      assertNotSame(printBuffer1, printBuffer9);
      assertNotSame(printBuffer1, printBuffer10);
      assertNotSame(printBuffer1, printBuffer4);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer1, printBuffer7);
      assertSame(printBuffer1, printBuffer3);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = printBuffer0.println((String) null);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      char[] charArray0 = new char[0];
      PrintBuffer printBuffer1 = printBuffer0.append(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = new PrintBuffer(printBuffer0);
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotNull(printBuffer1);
      
      PrintBuffer printBuffer2 = printBuffer1.println("|e[B0~loyfMCN");
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer0);
      assertSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer0);
      assertNotNull(printBuffer2);
      
      char[] charArray0 = new char[3];
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "|e[B0~loyfMCN");
      assertEquals("|e[B0~loyfMCN", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      assertEquals("|e[B0~loyfMCNtrue", stringBuilder0.toString());
      assertEquals("|e[B0~loyfMCNtrue", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.append("|e[B0~loyfMCN");
      assertEquals("|e[B0~loyfMCNtrue|e[B0~loyfMCN", stringBuilder0.toString());
      assertEquals("|e[B0~loyfMCNtrue|e[B0~loyfMCN", stringBuilder1.toString());
      assertEquals("|e[B0~loyfMCNtrue|e[B0~loyfMCN", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder2.reverse();
      assertEquals("NCMfyol~0B[e|eurtNCMfyol~0B[e|", stringBuilder0.toString());
      assertEquals("NCMfyol~0B[e|eurtNCMfyol~0B[e|", stringBuilder1.toString());
      assertEquals("NCMfyol~0B[e|eurtNCMfyol~0B[e|", stringBuilder2.toString());
      assertEquals("NCMfyol~0B[e|eurtNCMfyol~0B[e|", stringBuilder3.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertNotNull(stringBuilder3);
      
      printBuffer1.target = stringBuilder3;
      assertEquals("NCMfyol~0B[e|eurtNCMfyol~0B[e|", stringBuilder0.toString());
      assertEquals("NCMfyol~0B[e|eurtNCMfyol~0B[e|", stringBuilder1.toString());
      assertEquals("NCMfyol~0B[e|eurtNCMfyol~0B[e|", stringBuilder2.toString());
      assertEquals("NCMfyol~0B[e|eurtNCMfyol~0B[e|", stringBuilder3.toString());
      assertEquals("NCMfyol~0B[e|eurtNCMfyol~0B[e|", printBuffer1.target.toString());
      
      charArray0[0] = '$';
      charArray0[1] = '&';
      charArray0[2] = '9';
      PrintBuffer printBuffer3 = printBuffer2.append(charArray0);
      assertArrayEquals(new char[] {'$', '&', '9'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer3.equals((Object)printBuffer0));
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer2);
      assertSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer0);
      assertSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer0);
      assertSame(printBuffer2, printBuffer3);
      assertSame(printBuffer3, printBuffer1);
      assertNotSame(printBuffer3, printBuffer0);
      assertSame(printBuffer3, printBuffer2);
      assertNotNull(printBuffer3);
      
      PrintBuffer printBuffer4 = printBuffer2.println((CharSequence) "|e[B0~loyfMCN");
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer4.equals((Object)printBuffer0));
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer2);
      assertSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer4);
      assertSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer0);
      assertSame(printBuffer2, printBuffer3);
      assertSame(printBuffer2, printBuffer4);
      assertNotSame(printBuffer4, printBuffer0);
      assertSame(printBuffer4, printBuffer3);
      assertSame(printBuffer4, printBuffer2);
      assertSame(printBuffer4, printBuffer1);
      assertNotNull(printBuffer4);
      
      String string0 = printBuffer2.toString();
      assertEquals("NCMfyol~0B[e|eurtNCMfyol~0B[e|$&9  |e[B0~loyfMCN\n", string0);
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer4));
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer2);
      assertSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer4);
      assertSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer0);
      assertSame(printBuffer2, printBuffer3);
      assertSame(printBuffer2, printBuffer4);
      assertNotNull(string0);
      
      PrintBuffer printBuffer5 = printBuffer4.append(charArray0);
      assertArrayEquals(new char[] {'$', '&', '9'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer4));
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertFalse(printBuffer4.equals((Object)printBuffer0));
      assertFalse(printBuffer5.equals((Object)printBuffer0));
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer5);
      assertSame(printBuffer1, printBuffer2);
      assertSame(printBuffer1, printBuffer5);
      assertSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer4);
      assertSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer0);
      assertSame(printBuffer2, printBuffer3);
      assertSame(printBuffer2, printBuffer4);
      assertSame(printBuffer2, printBuffer5);
      assertNotSame(printBuffer4, printBuffer0);
      assertSame(printBuffer4, printBuffer3);
      assertSame(printBuffer4, printBuffer2);
      assertSame(printBuffer4, printBuffer1);
      assertSame(printBuffer4, printBuffer5);
      assertSame(printBuffer5, printBuffer3);
      assertSame(printBuffer5, printBuffer4);
      assertNotSame(printBuffer5, printBuffer0);
      assertSame(printBuffer5, printBuffer1);
      assertSame(printBuffer5, printBuffer2);
      assertNotNull(printBuffer5);
      
      PrintBuffer printBuffer6 = printBuffer1.println();
      assertFalse(printBuffer6.equals((Object)printBuffer0));
      assertFalse(printBuffer0.equals((Object)printBuffer3));
      assertFalse(printBuffer0.equals((Object)printBuffer4));
      assertFalse(printBuffer0.equals((Object)printBuffer2));
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer0.equals((Object)printBuffer5));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotSame(printBuffer6, printBuffer0);
      assertSame(printBuffer6, printBuffer3);
      assertSame(printBuffer6, printBuffer4);
      assertSame(printBuffer6, printBuffer2);
      assertSame(printBuffer6, printBuffer5);
      assertSame(printBuffer6, printBuffer1);
      assertNotSame(printBuffer0, printBuffer3);
      assertNotSame(printBuffer0, printBuffer4);
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer6);
      assertNotSame(printBuffer0, printBuffer5);
      assertSame(printBuffer1, printBuffer2);
      assertSame(printBuffer1, printBuffer6);
      assertSame(printBuffer1, printBuffer5);
      assertSame(printBuffer1, printBuffer3);
      assertNotSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer4);
      assertNotNull(printBuffer6);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = new PrintBuffer();
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotNull(printBuffer1);
      
      PrintBuffer printBuffer2 = printBuffer1.addToBeginning(printBuffer0);
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertNotSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer1, printBuffer0);
      assertSame(printBuffer1, printBuffer2);
      assertSame(printBuffer2, printBuffer1);
      assertNotSame(printBuffer2, printBuffer0);
      assertNotNull(printBuffer2);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = new PrintBuffer();
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotNull(printBuffer1);
      
      PrintBuffer printBuffer2 = printBuffer1.addToEnd(printBuffer0);
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer0));
      assertNotSame(printBuffer0, printBuffer1);
      assertNotSame(printBuffer0, printBuffer2);
      assertSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer2, printBuffer0);
      assertSame(printBuffer2, printBuffer1);
      assertNotNull(printBuffer2);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      // Undeclared exception!
      try { 
        printBuffer0.addToBeginning((PrintBuffer) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Infinite recursion!
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, true);
      assertEquals("true", stringBuilder0.toString());
      assertEquals("true", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      charArray0[1] = 'c';
      charArray0[2] = '6';
      charArray0[3] = 'Q';
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, charArray0);
      assertArrayEquals(new char[] {'D', 'c', '6', 'Q'}, charArray0);
      assertEquals("Dc6Qtrue", stringBuilder0.toString());
      assertEquals("Dc6Qtrue", stringBuilder1.toString());
      assertEquals("Dc6Qtrue", stringBuilder2.toString());
      assertEquals(4, charArray0.length);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, (long) 0);
      assertArrayEquals(new char[] {'D', 'c', '6', 'Q'}, charArray0);
      assertEquals("0Dc6Qtrue", stringBuilder0.toString());
      assertEquals("0Dc6Qtrue", stringBuilder1.toString());
      assertEquals("0Dc6Qtrue", stringBuilder2.toString());
      assertEquals("0Dc6Qtrue", stringBuilder3.toString());
      assertEquals(4, charArray0.length);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertNotNull(stringBuilder3);
      
      PrintBuffer printBuffer0 = new PrintBuffer(stringBuilder3);
      assertArrayEquals(new char[] {'D', 'c', '6', 'Q'}, charArray0);
      assertEquals("0Dc6Qtrue", stringBuilder0.toString());
      assertEquals("0Dc6Qtrue", stringBuilder1.toString());
      assertEquals("0Dc6Qtrue", stringBuilder2.toString());
      assertEquals("0Dc6Qtrue", stringBuilder3.toString());
      assertEquals(4, charArray0.length);
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = new PrintBuffer();
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertNotNull(printBuffer1);
      
      PrintBuffer printBuffer2 = printBuffer0.addToEnd(printBuffer1);
      assertArrayEquals(new char[] {'D', 'c', '6', 'Q'}, charArray0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertEquals("", stringBuilder2.toString());
      assertEquals("", stringBuilder3.toString());
      assertEquals(4, charArray0.length);
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer1.equals((Object)printBuffer0));
      assertFalse(printBuffer2.equals((Object)printBuffer1));
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer2);
      assertNotSame(printBuffer1, printBuffer0);
      assertNotSame(printBuffer1, printBuffer2);
      assertNotSame(printBuffer2, printBuffer1);
      assertSame(printBuffer2, printBuffer0);
      assertNotNull(printBuffer2);
      
      PrintBuffer printBuffer3 = printBuffer0.println();
      assertArrayEquals(new char[] {'D', 'c', '6', 'Q'}, charArray0);
      assertEquals("\n", stringBuilder0.toString());
      assertEquals("\n", stringBuilder1.toString());
      assertEquals("\n", stringBuilder2.toString());
      assertEquals("\n", stringBuilder3.toString());
      assertEquals(4, charArray0.length);
      assertFalse(printBuffer0.equals((Object)printBuffer1));
      assertFalse(printBuffer3.equals((Object)printBuffer1));
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertNotSame(printBuffer0, printBuffer1);
      assertSame(printBuffer0, printBuffer2);
      assertSame(printBuffer0, printBuffer3);
      assertSame(printBuffer3, printBuffer0);
      assertNotSame(printBuffer3, printBuffer1);
      assertSame(printBuffer3, printBuffer2);
      assertNotNull(printBuffer3);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = printBuffer0.append('h');
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = printBuffer0.append('a');
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
      
      int int0 = (-1892);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1892));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1892
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      // Undeclared exception!
      try { 
        printBuffer0.addToEnd(printBuffer0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Infinite recursion!
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      PrintBuffer printBuffer1 = printBuffer0.indentln("jAR)]@D/");
      assertSame(printBuffer0, printBuffer1);
      assertSame(printBuffer1, printBuffer0);
      assertNotNull(printBuffer1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      assertNotNull(printBuffer0);
      
      // Undeclared exception!
      try { 
        printBuffer0.addToBeginning(printBuffer0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Infinite recursion!
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      String string0 = "wetheinter.net.dev.io.PrintBuffer$PrintStack";
      PrintBuffer printBuffer1 = printBuffer0.append("wetheinter.net.dev.io.PrintBuffer$PrintStack");
      PrintBuffer printBuffer2 = printBuffer1.indentln("9>X`Wmto>t;?~ z");
      String string1 = "$E\"_5Ev69+FB<M";
      // Undeclared exception!
      try { 
        printBuffer1.addToEnd(printBuffer2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Infinite recursion!
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      PrintBuffer printBuffer1 = printBuffer0.println();
      assertSame(printBuffer1, printBuffer0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      PrintBuffer printBuffer1 = printBuffer0.append((-2366));
      assertSame(printBuffer0, printBuffer1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PrintBuffer printBuffer0 = new PrintBuffer();
      PrintBuffer printBuffer1 = printBuffer0.append(1847);
      printBuffer0.onAppend();
      printBuffer1.println();
      char[] charArray0 = null;
      int int0 = 622;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null, 1847, 622);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }
}
