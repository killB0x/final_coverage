/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 16:24:25 GMT 2022
 */

package wetheinter.net.dev.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wetheinter.net.dev.io.JavaMetadata;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JavaMetadata_ESTest extends JavaMetadata_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("sprivate ");
      boolean boolean0 = javaMetadata0.isPrivate();
      assertFalse(javaMetadata0.isPublic());
      assertTrue(boolean0);
      assertEquals("s", javaMetadata0.getClassName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("class");
      javaMetadata0.isClass();
      assertEquals(0, javaMetadata0.getPrivacy());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("wetheinter.net.dev.template.CompilationFailed");
      boolean boolean0 = javaMetadata0.isAbstract();
      assertFalse(boolean0);
      assertEquals(0, javaMetadata0.getModifier());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("7\"v<euOT2iU|54>");
      javaMetadata0.hasGenerics();
      assertEquals(0, javaMetadata0.getPrivacy());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("wetheinter.net.dev.template.CompilationFailed");
      int int0 = javaMetadata0.getModifier();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("i<xO`.)7ensz>IATB");
      javaMetadata0.getImports();
      assertEquals(0, javaMetadata0.getModifier());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("7\"v<euOT2iU|54>");
      javaMetadata0.getGenerics();
      assertEquals(0, javaMetadata0.getPrivacy());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavaMetadata javaMetadata0 = null;
      try {
        javaMetadata0 = new JavaMetadata((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wetheinter.net.dev.io.JavaMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JavaMetadata javaMetadata0 = null;
      try {
        javaMetadata0 = new JavaMetadata("C'j'5{&static ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A method cannot be both abstract and static!
         //
         verifyException("wetheinter.net.dev.io.JavaMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("7v<eu!OT2iU|54>");
      assertEquals(0, javaMetadata0.getPrivacy());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JavaMetadata javaMetadata0 = null;
      try {
        javaMetadata0 = new JavaMetadata("<>KhJjI0jq>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Did not have a class name in class definition <>KhJjI0jq>
         //
         verifyException("wetheinter.net.dev.io.JavaMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JavaMetadata javaMetadata0 = null;
      try {
        javaMetadata0 = new JavaMetadata("<RDsxs$:$6");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JavaMetadata javaMetadata0 = null;
      try {
        javaMetadata0 = new JavaMetadata("Did not have a class name in class definition ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Found ambiguous class definition in Did not have a class name in class definition 
         //
         verifyException("wetheinter.net.dev.io.JavaMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JavaMetadata javaMetadata0 = null;
      try {
        javaMetadata0 = new JavaMetadata("interface ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Did not have a class name in class definition interface 
         //
         verifyException("wetheinter.net.dev.io.JavaMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JavaMetadata javaMetadata0 = null;
      try {
        javaMetadata0 = new JavaMetadata("synchronized ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Did not have a class name in class definition synchronized 
         //
         verifyException("wetheinter.net.dev.io.JavaMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JavaMetadata javaMetadata0 = null;
      try {
        javaMetadata0 = new JavaMetadata("native ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Did not have a class name in class definition native 
         //
         verifyException("wetheinter.net.dev.io.JavaMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JavaMetadata javaMetadata0 = null;
      try {
        javaMetadata0 = new JavaMetadata("final ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Did not have a class name in class definition final 
         //
         verifyException("wetheinter.net.dev.io.JavaMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("sprivate ");
      int int0 = javaMetadata0.getPrivacy();
      assertEquals(2, int0);
      assertEquals("s", javaMetadata0.getClassName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata(":protected ");
      boolean boolean0 = javaMetadata0.isProtected();
      assertEquals(":", javaMetadata0.getClassName());
      assertFalse(javaMetadata0.isPublic());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("spublic ");
      boolean boolean0 = javaMetadata0.isPublic();
      assertTrue(boolean0);
      assertEquals("s", javaMetadata0.getClassName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("A method cannot be both abstract and native!");
      int int0 = javaMetadata0.getModifier();
      assertEquals(1024, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("A method cannot be both abstract and native!");
      boolean boolean0 = javaMetadata0.isProtected();
      assertEquals(0, javaMetadata0.getPrivacy());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("A method cannot be both abstract and native!");
      javaMetadata0.getInterfaces();
      assertEquals(1024, javaMetadata0.getModifier());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("A method cannot be both abstract and native!");
      javaMetadata0.hasGenerics();
      assertEquals(0, javaMetadata0.getPrivacy());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("wetheinter.net.dev.template.CompilationFailed");
      boolean boolean0 = javaMetadata0.isFinal();
      assertFalse(boolean0);
      assertEquals(0, javaMetadata0.getPrivacy());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata(")wd\"");
      boolean boolean0 = javaMetadata0.isPrivate();
      assertFalse(boolean0);
      assertEquals(0, javaMetadata0.getModifier());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("wetheinter.net.dev.template.CompilationFailed");
      boolean boolean0 = javaMetadata0.isPublic();
      assertFalse(boolean0);
      assertEquals(0, javaMetadata0.getPrivacy());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("A method cannot be both abstract and native!");
      javaMetadata0.getImports();
      assertEquals(0, javaMetadata0.getPrivacy());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("A method cannot be both abstract and native!");
      javaMetadata0.getSuperClass();
      assertEquals(0, javaMetadata0.getPrivacy());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("A method cannot be both abstract and native!");
      boolean boolean0 = javaMetadata0.isNative();
      assertEquals(1024, javaMetadata0.getModifier());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("A method cannot be both abstract and native!");
      boolean boolean0 = javaMetadata0.isAbstract();
      assertEquals(0, javaMetadata0.getPrivacy());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("A method cannot be both abstract and native!");
      javaMetadata0.getGenerics();
      assertEquals(1024, javaMetadata0.getModifier());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("A method cannot be both abstract and native!");
      javaMetadata0.isClass();
      assertEquals(0, javaMetadata0.getPrivacy());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("A method cannot be both abstract and native!");
      javaMetadata0.getClassName();
      assertEquals(0, javaMetadata0.getPrivacy());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("A method cannot be both abstract and native!");
      boolean boolean0 = javaMetadata0.isStatic();
      assertEquals(0, javaMetadata0.getPrivacy());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JavaMetadata javaMetadata0 = new JavaMetadata("A method cannot be both abstract and native!");
      int int0 = javaMetadata0.getPrivacy();
      assertEquals(0, int0);
  }
}
