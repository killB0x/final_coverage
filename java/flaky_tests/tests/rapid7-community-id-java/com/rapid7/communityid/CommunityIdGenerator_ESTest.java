/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 17:25:07 GMT 2022
 */

package com.rapid7.communityid;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.rapid7.communityid.CommunityIdGenerator;
import com.rapid7.communityid.Protocol;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CommunityIdGenerator_ESTest extends CommunityIdGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CommunityIdGenerator communityIdGenerator0 = new CommunityIdGenerator();
      Protocol protocol0 = Protocol.SCTP;
      InetAddress inetAddress0 = MockInetAddress.getByName((String) null);
      InetAddress inetAddress1 = MockInetAddress.anyLocalAddress();
      String string0 = communityIdGenerator0.generateCommunityId(protocol0, inetAddress0, 2, inetAddress1, 0);
      assertEquals("1:Llbd7zgBgSnWvkcGpBe++8b51bg=", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CommunityIdGenerator communityIdGenerator0 = new CommunityIdGenerator();
      Protocol protocol0 = Protocol.UDP;
      // Undeclared exception!
      try { 
        communityIdGenerator0.generateCommunityId(protocol0, (InetAddress) null, (-577), (InetAddress) null, (-577));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CommunityIdGenerator communityIdGenerator0 = new CommunityIdGenerator();
      Protocol protocol0 = Protocol.SCTP;
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      String string0 = communityIdGenerator0.generateCommunityId(protocol0, inetAddress0, 1306, inetAddress0, 164);
      assertEquals("1:+VQuo7bn3uDuXFq5Tjf+Vg0tX8M=", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CommunityIdGenerator communityIdGenerator0 = new CommunityIdGenerator((-397), false);
      Protocol protocol0 = Protocol.SCTP;
      InetAddress inetAddress0 = MockInetAddress.getByName("SCTP");
      String string0 = communityIdGenerator0.generateCommunityId(protocol0, inetAddress0, 2419, inetAddress0, 0);
      assertEquals("1:0c07dee25f2bbf8e5ff4a54cb2e1570e50092292", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CommunityIdGenerator communityIdGenerator0 = new CommunityIdGenerator((-397), false);
      Protocol protocol0 = Protocol.SCTP;
      InetAddress inetAddress0 = MockInetAddress.getByName("SCTP");
      // Undeclared exception!
      try { 
        communityIdGenerator0.generateCommunityId(protocol0, inetAddress0, (-397), inetAddress0, 2419);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port number must be a positive Integer
         //
         verifyException("com.rapid7.communityid.CommunityIdGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CommunityIdGenerator communityIdGenerator0 = new CommunityIdGenerator();
      Protocol protocol0 = Protocol.SCTP;
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        communityIdGenerator0.generateCommunityId(protocol0, inetAddress0, 4138, inetAddress0, (-581));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port number must be a positive Integer
         //
         verifyException("com.rapid7.communityid.CommunityIdGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CommunityIdGenerator communityIdGenerator0 = new CommunityIdGenerator(0, false);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      Protocol protocol0 = Protocol.UDP;
      String string0 = communityIdGenerator0.generateCommunityId(protocol0, inetAddress0, 0, inetAddress0, 0);
      assertEquals("1:8f80d871d31085714a0801f79fb4ecbb9eb2e989", string0);
  }
}
