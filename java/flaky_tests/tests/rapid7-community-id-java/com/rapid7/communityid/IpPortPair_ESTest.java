/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 17:23:36 GMT 2022
 */

package com.rapid7.communityid;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.rapid7.communityid.IpPortPair;
import java.math.BigInteger;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IpPortPair_ESTest extends IpPortPair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      IpPortPair ipPortPair0 = new IpPortPair(inetAddress0, 773);
      IpPortPair ipPortPair1 = new IpPortPair(inetAddress0, 775);
      boolean boolean0 = ipPortPair0.equals(ipPortPair1);
      assertFalse(ipPortPair1.equals((Object)ipPortPair0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      InetAddress inetAddress1 = MockInetAddress.getByName("2]F");
      IpPortPair ipPortPair0 = new IpPortPair(inetAddress1, 1525);
      IpPortPair ipPortPair1 = new IpPortPair(inetAddress0, (-36));
      int int0 = ipPortPair1.compareTo(ipPortPair0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getByAddress("jP7eBHa!kb`,JKAv.a*", byteArray0);
      BigInteger bigInteger0 = IpPortPair.toBigInt(inetAddress0);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-69);
      InetAddress inetAddress0 = MockInetAddress.getByAddress("!K-nF<s2ZKxT}xS,|x", byteArray0);
      BigInteger bigInteger0 = IpPortPair.toBigInt(inetAddress0);
      assertEquals((short) (-17664), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("~To0VK)Wh:T>1%})@P");
      BigInteger bigInteger0 = IpPortPair.toBigInt(inetAddress0);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      BigInteger bigInteger0 = IpPortPair.toBigInt(inetAddress0);
      assertEquals((short)1, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-99);
      InetAddress inetAddress0 = MockInetAddress.getByAddress((String) null, byteArray0);
      BigInteger bigInteger0 = IpPortPair.toBigInt(inetAddress0);
      assertEquals((short)157, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      IpPortPair ipPortPair0 = new IpPortPair(inetAddress0, 0);
      int int0 = ipPortPair0.getPort();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("~To0VK)Wh:T>1%})@P");
      IpPortPair ipPortPair0 = new IpPortPair(inetAddress0, 2764);
      int int0 = ipPortPair0.getPort();
      assertEquals(2764, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      IpPortPair ipPortPair0 = new IpPortPair(inetAddress0, (-344));
      int int0 = ipPortPair0.getPort();
      assertEquals((-344), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IpPortPair ipPortPair0 = new IpPortPair((InetAddress) null, 125);
      InetAddress inetAddress0 = ipPortPair0.getIpAddress();
      assertNull(inetAddress0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      IpPortPair ipPortPair0 = new IpPortPair(inetAddress0, (-1236));
      InetAddress inetAddress1 = ipPortPair0.getIpAddress();
      assertEquals("192.168.1.42", inetAddress1.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-20);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      IpPortPair ipPortPair0 = new IpPortPair(inetAddress0, (-837));
      InetAddress inetAddress1 = ipPortPair0.getIpAddress();
      assertFalse(inetAddress1.isAnyLocalAddress());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getByAddress("jP7eBHa!kb`,JKAv.a*", byteArray0);
      IpPortPair ipPortPair0 = new IpPortPair(inetAddress0, 1);
      InetAddress inetAddress1 = ipPortPair0.getIpAddress();
      assertSame(inetAddress0, inetAddress1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      IpPortPair ipPortPair0 = new IpPortPair(inetAddress0, (-344));
      InetAddress inetAddress1 = ipPortPair0.getIpAddress();
      assertFalse(inetAddress1.isLinkLocalAddress());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      IpPortPair ipPortPair0 = new IpPortPair(inetAddress0, (-1236));
      IpPortPair ipPortPair1 = new IpPortPair(inetAddress0, (-2378));
      int int0 = ipPortPair1.compareTo(ipPortPair0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        IpPortPair.toBigInt((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      IpPortPair ipPortPair0 = new IpPortPair(inetAddress0, (-837));
      IpPortPair ipPortPair1 = new IpPortPair((InetAddress) null, 2210);
      // Undeclared exception!
      try { 
        ipPortPair0.compareTo(ipPortPair1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      IpPortPair ipPortPair0 = new IpPortPair(inetAddress0, 0);
      InetAddress inetAddress1 = MockInetAddress.getLocalHost();
      IpPortPair ipPortPair1 = new IpPortPair(inetAddress1, 0);
      boolean boolean0 = ipPortPair0.equals(ipPortPair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      IpPortPair ipPortPair0 = new IpPortPair(inetAddress0, 0);
      IpPortPair ipPortPair1 = new IpPortPair(inetAddress0, 0);
      boolean boolean0 = ipPortPair0.equals(ipPortPair1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      IpPortPair ipPortPair0 = new IpPortPair(inetAddress0, (-344));
      IpPortPair ipPortPair1 = new IpPortPair(inetAddress0, 0);
      boolean boolean0 = ipPortPair1.equals(ipPortPair0);
      assertFalse(ipPortPair0.equals((Object)ipPortPair1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IpPortPair ipPortPair0 = new IpPortPair((InetAddress) null, 1741);
      boolean boolean0 = ipPortPair0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("~To0VK)Wh:T>1%})@P");
      IpPortPair ipPortPair0 = new IpPortPair(inetAddress0, 0);
      boolean boolean0 = ipPortPair0.equals(ipPortPair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      IpPortPair ipPortPair0 = new IpPortPair(inetAddress0, (-344));
      Object object0 = new Object();
      boolean boolean0 = ipPortPair0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      IpPortPair ipPortPair0 = new IpPortPair(inetAddress0, (-2276));
      InetAddress inetAddress1 = MockInetAddress.getLoopbackAddress();
      IpPortPair ipPortPair1 = new IpPortPair(inetAddress1, (-2276));
      int int0 = ipPortPair0.compareTo(ipPortPair1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IpPortPair ipPortPair0 = new IpPortPair((InetAddress) null, (-337));
      ipPortPair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      IpPortPair ipPortPair0 = new IpPortPair(inetAddress0, (-882));
      String string0 = ipPortPair0.toString();
      assertEquals("IpPortPair{ipAddress=/127.0.0.1, port=-882}", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      IpPortPair ipPortPair0 = new IpPortPair(inetAddress0, (-2276));
      int int0 = ipPortPair0.compareTo(ipPortPair0);
      assertEquals(0, int0);
  }
}
