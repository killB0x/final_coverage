/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 19:26:19 GMT 2022
 */

package org.saintandreas.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.FloatBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.saintandreas.math.Matrix3f;
import org.saintandreas.math.Quaternion;
import org.saintandreas.math.Vector2f;
import org.saintandreas.math.Vector3f;
import org.saintandreas.math.Vector4f;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector_ESTest extends Vector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NAN;
      vector4f0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_Y;
      Vector4f vector4f1 = vector4f0.divide(Float.NaN);
      Vector4f vector4f2 = vector4f0.project(vector4f1);
      assertEquals(Float.NaN, vector4f2.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-2541.2737F));
      Vector4f vector4f0 = new Vector4f(vector3f0);
      float[] floatArray0 = vector4f0.toArray();
      assertArrayEquals(new float[] {(-2541.2737F), (-2541.2737F), (-2541.2737F), 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      Vector3f vector3f1 = vector3f0.inverse();
      float float0 = vector3f1.lengthSquared();
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      float float0 = vector4f0.length();
      assertEquals(1.4142135F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Quaternion quaternion0 = Quaternion.fromMatrix3f(matrix3f0);
      boolean boolean0 = quaternion0.isUnitVector();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_W;
      Vector4f vector4f1 = vector4f0.interpolate(vector4f0, 0.0F);
      assertEquals(0.0F, vector4f1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.DIRECTION_Z;
      boolean boolean0 = quaternion0.equalsEpsilon(quaternion0, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      float float0 = vector2f0.dot(vector2f0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector2f vector2f1 = vector2f0.build((-1.0F));
      float float0 = vector2f0.dot(vector2f1);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      Vector4f vector4f1 = Vector4f.UNIT_XYZW;
      float float0 = vector4f1.distanceSquared(vector4f0);
      assertEquals(4.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_XYZW;
      Vector4f vector4f1 = Vector4f.COLOR_GREEN;
      float float0 = vector4f0.distance(vector4f1);
      assertEquals(1.4142135F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector4f vector4f0 = new Vector4f(vector2f0);
      float float0 = vector4f0.angleBetween(vector4f0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      float float0 = vector4f0.angleBetween(vector4f0);
      assertEquals(1.5707964F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_X;
      // Undeclared exception!
      try { 
        vector4f0.subtract((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_W;
      // Undeclared exception!
      try { 
        vector4f0.scaleAdd(1.0F, (Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      // Undeclared exception!
      try { 
        vector3f0.project((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_X;
      // Undeclared exception!
      try { 
        vector4f0.mult((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      // Undeclared exception!
      try { 
        vector4f0.min((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.max((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NAN;
      // Undeclared exception!
      try { 
        vector4f0.interpolate((Vector4f) null, Float.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      float[] floatArray0 = new float[0];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      // Undeclared exception!
      try { 
        vector4f0.fillBuffer(floatBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapFloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      // Undeclared exception!
      try { 
        vector4f0.fillBuffer((FloatBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      // Undeclared exception!
      try { 
        vector3f0.equalsEpsilon((Vector3f) null, Float.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_W;
      // Undeclared exception!
      try { 
        vector4f0.equalsEpsilon((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NAN;
      // Undeclared exception!
      try { 
        vector4f0.dot((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      // Undeclared exception!
      try { 
        vector4f0.divide((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector3f0.distanceSquared((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      // Undeclared exception!
      try { 
        vector4f0.distance((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NAN;
      // Undeclared exception!
      try { 
        vector4f0.angleBetween((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_W;
      // Undeclared exception!
      try { 
        vector4f0.add((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      float float0 = vector3f0.lengthSquared();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      float float0 = vector3f0.distanceSquared(vector3f0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.DIRECTION_Z;
      boolean boolean0 = quaternion0.equalsEpsilon(quaternion0, (-1332.97F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_Y;
      float float0 = vector4f0.dot(vector4f0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.ZERO;
      Vector4f vector4f1 = vector4f0.mult(vector4f0);
      assertEquals(0.0F, vector4f1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-2541.2737F));
      Vector4f vector4f0 = new Vector4f(vector3f0);
      Vector4f vector4f1 = vector4f0.mult(1.0F);
      assertEquals((-2541.2737F), vector4f1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(1157.9066F, 1157.9066F, (-505.6841F));
      Vector3f vector3f1 = vector3f0.add(vector3f0);
      assertEquals(2315.8132F, vector3f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_Y;
      Vector4f vector4f1 = vector4f0.normalize();
      assertEquals(1.0F, vector4f1.y, 0.01F);
      assertNotSame(vector4f1, vector4f0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      Vector4f vector4f1 = vector4f0.normalize();
      assertEquals(Float.NaN, vector4f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NAN;
      Vector4f vector4f1 = vector4f0.negate();
      assertTrue(vector4f1.equals((Object)vector4f0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NEGATIVE_INFINITY;
      boolean boolean0 = vector4f0.isValid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      boolean boolean0 = vector3f0.isValid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      boolean boolean0 = vector3f0.isValid();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector2f vector2f1 = vector2f0.build((-1.0F));
      boolean boolean0 = vector2f0.equalsEpsilon(vector2f1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_Z;
      Vector4f vector4f1 = vector4f0.min(vector4f0);
      assertEquals(1.0F, vector4f1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_Z;
      Vector4f vector4f1 = vector4f0.max(vector4f0);
      assertEquals(1.0F, vector4f1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.ZERO;
      Vector2f vector2f1 = vector2f0.add(1.0F);
      Vector2f vector2f2 = vector2f1.project(vector2f1);
      assertEquals(0.70710677F, vector2f2.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.ZERO;
      float float0 = vector2f0.length();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f(3970.1F);
      Vector4f vector4f1 = vector4f0.scaleAdd(3479.1917F, vector4f0);
      assertEquals(1.3816709E7F, vector4f1.x, 0.01F);
      assertEquals(1.3816709E7F, vector4f1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      float float0 = vector2f0.distance(vector2f0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      float[] floatArray0 = new float[7];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      vector2f0.fillBuffer(floatBuffer0);
      assertEquals("java.nio.HeapFloatBuffer[pos=2 lim=7 cap=7]", floatBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f(3970.1F);
      Vector4f vector4f1 = vector4f0.scale(3970.1F);
      assertEquals(1.5761695E7F, vector4f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_Y;
      Vector4f vector4f1 = vector4f0.divide(vector4f0);
      assertEquals(Float.NaN, vector4f1.x, 0.01F);
      assertEquals(1.0F, vector4f1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.ZERO;
      Vector2f vector2f1 = vector2f0.subtract((-1463.2F));
      assertEquals(1463.2F, vector2f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      boolean boolean0 = vector3f0.isUnitVector();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f(3970.1F);
      Vector4f vector4f1 = vector4f0.subtract(vector4f0);
      assertEquals(0.0F, vector4f1.w, 0.01F);
      assertEquals(0.0F, vector4f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      boolean boolean0 = vector4f0.equalsEpsilon(vector4f0);
      assertTrue(boolean0);
  }
}
