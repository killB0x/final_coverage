/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 19:28:24 GMT 2022
 */

package org.saintandreas.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.saintandreas.math.Vector2f;
import org.saintandreas.math.Vector3f;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector3f_ESTest extends Vector3f_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      float float0 = vector3f0.get(2);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(0.0F);
      Vector3f vector3f1 = vector3f0.UNIT_Z.divide(0.0F);
      float float0 = vector3f1.get(1);
      assertEquals(Float.NaN, float0, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f1.z, 0.01F);
      assertEquals(Float.NaN, vector3f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(0.0F);
      Vector3f vector3f1 = vector3f0.UNIT_Z.divide(0.0F);
      Vector3f vector3f2 = vector3f1.UNIT_Y.project(vector3f1);
      boolean boolean0 = vector3f2.equals(vector3f1);
      assertFalse(vector3f1.equals((Object)vector3f2));
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertFalse(boolean0);
      assertEquals(Float.NaN, vector3f1.y, 0.01F);
      assertEquals(Float.NaN, vector3f1.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Vector3f vector3f1 = vector3f0.cross(vector3f0);
      boolean boolean0 = vector3f0.equals(vector3f1);
      assertFalse(boolean0);
      assertEquals(0.0F, vector3f1.x, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
      assertEquals(0.0F, vector3f1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(2.0F, 2.0F, 1810.3451F);
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector3f vector3f1 = new Vector3f(vector2f0);
      boolean boolean0 = vector3f1.equals(vector3f0);
      assertEquals(1810.3451F, vector3f0.z, 0.01F);
      assertEquals(2.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f1.y, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Vector3f vector3f1 = Vector3f.ZERO;
      Vector3f vector3f2 = vector3f0.UNIT_XYZ.project(vector3f1);
      Vector3f vector3f3 = vector3f0.cross(vector3f2);
      assertTrue(vector3f3.equals((Object)vector3f2));
      assertEquals(Float.NaN, vector3f2.z, 0.01F);
      assertEquals(Float.NaN, vector3f3.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(2.0F, 2.0F, 1810.3451F);
      String string0 = vector3f0.toString();
      assertEquals("(2.0, 2.0, 1810.3451)", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      String string0 = vector3f0.toString();
      assertEquals("(0.0, 1.0, 0.0)", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Vector3f vector3f1 = vector3f0.NAN.mult(vector3f0);
      float float0 = vector3f1.getX();
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, float0, 0.01F);
      assertEquals(Float.NaN, vector3f1.y, 0.01F);
      assertEquals(Float.NaN, vector3f1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector3f vector3f0 = new Vector3f(vector2f0, 316.472F);
      assertEquals(316.472F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(0.0F, (-1317.3679F), 0.0F);
      float float0 = vector3f0.getZ();
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals((-1317.3679F), vector3f0.y, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-2224.1804F));
      float float0 = vector3f0.getZ();
      assertEquals((-2224.1804F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      float float0 = vector3f0.getY();
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      float float0 = vector3f0.getX();
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      float float0 = vector3f0.getX();
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      float float0 = vector3f0.get(0);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Vector3f vector3f1 = Vector3f.UNIT_X;
      Vector3f vector3f2 = vector3f0.cross(vector3f1);
      assertEquals((-1.0F), vector3f2.z, 0.01F);
      assertEquals(0.0F, vector3f2.y, 0.01F);
      assertEquals(0.0F, vector3f2.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector2f vector2f1 = Vector2f.UNIT_XY;
      Vector3f vector3f0 = vector2f0.cross(vector2f1);
      Vector3f vector3f1 = vector3f0.UNIT_X.divide(vector3f0);
      Vector3f vector3f2 = vector3f0.cross(vector3f1);
      float float0 = vector3f2.getY();
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
      assertEquals(-0.0F, vector3f1.z, 0.01F);
      assertEquals(Float.NaN, vector3f2.x, 0.01F);
      assertEquals(Float.NaN, vector3f2.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Vector3f vector3f1 = Vector3f.UNIT_Y;
      Vector3f vector3f2 = vector3f0.cross(vector3f1);
      assertEquals(0.0F, vector3f2.z, 0.01F);
      assertEquals(0.0F, vector3f2.y, 0.01F);
      assertEquals((-1.0F), vector3f2.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      float[] floatArray0 = new float[4];
      floatArray0[2] = 1.0F;
      Vector3f vector3f1 = vector3f0.build(floatArray0);
      assertEquals(1.0F, vector3f1.z, 0.01F);
      assertEquals(0.0F, vector3f1.x, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      float[] floatArray0 = new float[4];
      floatArray0[1] = 3.1415927F;
      Vector3f vector3f1 = vector3f0.build(floatArray0);
      assertEquals(0.0F, vector3f1.x, 0.01F);
      assertEquals(3.1415927F, vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(0.0F);
      float[] floatArray0 = vector3f0.toArray();
      Vector3f vector3f1 = vector3f0.build(floatArray0);
      assertTrue(vector3f1.equals((Object)vector3f0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      float[] floatArray0 = new float[4];
      floatArray0[0] = Float.NaN;
      Vector3f vector3f1 = vector3f0.build(floatArray0);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertEquals(Float.NaN, vector3f1.x, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Vector3f vector3f1 = vector3f0.build(0.0F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Vector3f vector3f1 = vector3f0.build((-1450.0723F));
      float[] floatArray0 = vector3f1.toArray();
      Vector3f vector3f2 = vector3f0.build(floatArray0);
      assertArrayEquals(new float[] {(-1450.0723F), (-1450.0723F), (-1450.0723F)}, floatArray0, 0.01F);
      assertTrue(vector3f2.equals((Object)vector3f1));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(2.0F, 2.0F, 1810.3451F);
      float float0 = vector3f0.angleBetween(vector3f0);
      assertEquals(2.0F, vector3f0.x, 0.01F);
      assertEquals(2.0F, vector3f0.y, 0.01F);
      assertEquals(1810.3451F, vector3f0.z, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      // Undeclared exception!
      try { 
        vector3f0.cross((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f();
      // Undeclared exception!
      try { 
        vector3f0.build((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f();
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        vector3f0.build(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("org.saintandreas.math.Vector3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      // Undeclared exception!
      try { 
        vector3f0.angleBetween((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3f vector3f0 = null;
      try {
        vector3f0 = new Vector3f((Vector2f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      // Undeclared exception!
      try { 
        vector3f0.get((-2270));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must be either 0, 1 or 2
         //
         verifyException("org.saintandreas.math.Vector3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      float float0 = vector3f0.get(2);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(0.0F);
      float float0 = vector3f0.UNIT_XYZ.get(1);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(2.0F, 2.0F, 1810.3451F);
      float float0 = vector3f0.get(0);
      assertEquals(2.0F, float0, 0.01F);
      assertEquals(2.0F, vector3f0.y, 0.01F);
      assertEquals(1810.3451F, vector3f0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(0.0F);
      Vector3f vector3f1 = vector3f0.UNIT_Z.divide(0.0F);
      Vector3f vector3f2 = vector3f1.NEGATIVE_INFINITY.add(Float.POSITIVE_INFINITY);
      boolean boolean0 = vector3f1.equals(vector3f2);
      assertFalse(boolean0);
      assertFalse(vector3f2.equals((Object)vector3f1));
      assertEquals(Float.POSITIVE_INFINITY, vector3f1.z, 0.01F);
      assertEquals(Float.NaN, vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, vector3f1.x, 0.01F);
      assertEquals(Float.NaN, vector3f2.y, 0.01F);
      assertEquals(Float.NaN, vector3f2.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f();
      Vector3f vector3f1 = Vector3f.UNIT_Y;
      boolean boolean0 = vector3f0.equals(vector3f1);
      assertFalse(boolean0);
      assertFalse(vector3f1.equals((Object)vector3f0));
      assertEquals(0.0F, vector3f0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      Vector3f vector3f1 = Vector3f.POSITIVE_INFINITY;
      boolean boolean0 = vector3f1.equals(vector3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(2.0F, 2.0F, 1810.3451F);
      Object object0 = new Object();
      boolean boolean0 = vector3f0.equals(object0);
      assertEquals(2.0F, vector3f0.x, 0.01F);
      assertEquals(1810.3451F, vector3f0.z, 0.01F);
      assertFalse(boolean0);
      assertEquals(2.0F, vector3f0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f();
      boolean boolean0 = vector3f0.equals(vector3f0);
      assertTrue(boolean0);
      assertEquals(0.0F, vector3f0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f();
      float float0 = vector3f0.angleBetween(vector3f0);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(1.5707964F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f();
      Vector3f vector3f1 = vector3f0.cross(vector3f0);
      boolean boolean0 = vector3f1.equals(vector3f0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      float float0 = vector3f0.getX();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector3f vector3f0 = new Vector3f(vector2f0);
      float float0 = vector3f0.get(0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector3f vector3f0 = null;
      try {
        vector3f0 = new Vector3f((Vector2f) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      float float0 = vector3f0.getY();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f();
      Vector3f vector3f1 = vector3f0.build(0.5F);
      assertEquals(0.5F, vector3f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(2.0F, 2.0F, 1810.3451F);
      float float0 = vector3f0.getZ();
      assertEquals(2.0F, vector3f0.x, 0.01F);
      assertEquals(1810.3451F, float0, 0.01F);
      assertEquals(2.0F, vector3f0.y, 0.01F);
  }
}
