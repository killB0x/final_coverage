/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 19:21:25 GMT 2022
 */

package org.saintandreas.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.FloatBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import org.saintandreas.math.FastMath;
import org.saintandreas.math.Matrix3f;
import org.saintandreas.math.Quaternion;
import org.saintandreas.math.Vector2f;
import org.saintandreas.math.Vector3f;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastMath_ESTest extends FastMath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector2f vector2f1 = new Vector2f(0.0F, 1.0F);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.58F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 1.0F;
      vector2f1.build(floatArray0);
      Vector2f vector2f2 = new Vector2f(1.0F);
      Vector2f vector2f3 = vector2f1.add(vector2f2);
      vector2f2.mult(1.0F);
      Vector2f vector2f4 = Vector2f.ZERO;
      Vector2f vector2f5 = Vector2f.UNIT_X;
      FastMath.pointInsideTriangle(vector2f3, vector2f5, vector2f4, vector2f1);
      Vector3f vector3f0 = new Vector3f();
      FastMath.getBezierP1toP2Length(vector3f0, vector3f0, vector3f0, vector3f0);
      Vector3f vector3f1 = new Vector3f(2.0F, (-708.615F), 680.6F);
      FastMath.cartesianToSpherical(vector3f1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FastMath.convertFloatToHalf(65504.0F);
      Vector2f vector2f0 = new Vector2f(65504.0F, (short)31743);
      Vector2f vector2f1 = Vector2f.ZERO;
      Vector2f vector2f2 = Vector2f.UNIT_X;
      Vector2f vector2f3 = Vector2f.ZERO;
      Vector2f vector2f4 = new Vector2f((short)31743, 0.0F);
      Vector2f vector2f5 = new Vector2f();
      float[] floatArray0 = new float[7];
      floatArray0[0] = 31743.0F;
      floatArray0[1] = (float) (short)31743;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      vector2f2.cross(vector2f4);
      floatArray0[4] = (float) (short)31743;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      vector2f2.build(floatArray0);
      Vector2f vector2f6 = new Vector2f(31743.0F, (-13.9F));
      Vector2f.interpolate(vector2f1, vector2f6, 75475.0F);
      FastMath.counterClockwise(vector2f2, vector2f4, vector2f3);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FastMath.isPowerOfTwo(16);
      float float0 = (-1146.7F);
      Vector3f[] vector3fArray0 = new Vector3f[5];
      Vector3f vector3f0 = Vector3f.UNIT_X;
      vector3fArray0[0] = vector3f0;
      Vector3f vector3f1 = FastMath.interpolateBezier((-272.104F), vector3f0, vector3f0, vector3f0, vector3f0);
      vector3fArray0[1] = vector3f1;
      Vector3f vector3f2 = Vector3f.UNIT_Y;
      vector3fArray0[2] = vector3f2;
      Vector3f vector3f3 = FastMath.computeNormal(vector3f0, vector3f2, vector3f1);
      vector3fArray0[3] = vector3f3;
      Quaternion quaternion0 = Quaternion.fromMatrix3f(0.7799998F, (-1146.7F), 0.7799998F, 0.0F, 0.61999995F, 0.93999964F, 0.0F, 0.0F, 1.0F);
      Vector3f vector3f4 = quaternion0.mult(vector3f2);
      vector3fArray0[4] = vector3f4;
      Quaternion quaternion1 = Quaternion.fromAxes(vector3fArray0);
      // Undeclared exception!
      try { 
        quaternion1.getRotationColumn(16);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_X;
      FastMath.pointInsideTriangle(vector2f0, vector2f0, vector2f0, vector2f0);
      Vector3f[] vector3fArray0 = new Vector3f[8];
      Vector3f vector3f0 = new Vector3f(1.0F);
      vector3fArray0[0] = vector3f0;
      Vector3f vector3f1 = FastMath.cartesianToSpherical(vector3f0);
      vector3fArray0[1] = vector3f1;
      Vector3f vector3f2 = Vector3f.UNIT_X;
      vector3fArray0[2] = vector3f2;
      Vector3f vector3f3 = Vector3f.UNIT_Z;
      vector3fArray0[3] = vector3f3;
      Vector3f vector3f4 = FastMath.computeNormal(vector3f3, vector3f0, vector3f2);
      vector3fArray0[4] = vector3f4;
      Vector3f vector3f5 = Vector3f.UNIT_X;
      vector3fArray0[5] = vector3f5;
      Vector3f vector3f6 = Vector3f.UNIT_XYZ;
      vector3fArray0[6] = vector3f6;
      Quaternion quaternion0 = Quaternion.fromAngles(0.6399999F, 1.0F, (-0.57735026F));
      Vector3f vector3f7 = quaternion0.mult(vector3f4);
      vector3fArray0[7] = vector3f7;
      Quaternion quaternion1 = Quaternion.fromAxes(vector3fArray0);
      Quaternion quaternion2 = Quaternion.slerp(quaternion1, quaternion1, 1.0E-4F);
      Vector3f vector3f8 = quaternion2.getRotationColumn(1);
      FastMath.cartesianZToSpherical(vector3f8);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_X;
      FastMath.pointInsideTriangle(vector2f0, vector2f0, vector2f0, vector2f0);
      FastMath.sqr(1);
      Vector2f vector2f1 = new Vector2f(1, 1.0F);
      Vector2f vector2f2 = vector2f0.interpolate(vector2f1, (-1384.7F));
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      float[] floatArray0 = new float[4];
      Vector3f vector3f1 = FastMath.sphericalToCartesian(vector3f0);
      vector3f1.build((-6688.3755F));
      Vector3f vector3f2 = vector3f0.min(vector3f1);
      floatArray0[0] = 0.0F;
      vector2f0.max(vector2f2);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      Vector3f vector3f3 = vector3f0.build(floatArray0);
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      floatBuffer0.clear();
      vector3f3.fillBuffer(floatBuffer0);
      Vector3f vector3f4 = FastMath.interpolateBezier(789.82F, vector3f0, vector3f0, vector3f0, vector3f0);
      FastMath.exp(0.0F);
      FastMath.isPowerOfTwo(1);
      Vector3f vector3f5 = FastMath.cartesianZToSpherical(vector3f2);
      FastMath.nextRandomInt();
      FastMath.sphericalToCartesian(vector3f0);
      FastMath.fastInvSqrt(1.0F);
      Vector3f vector3f6 = Vector3f.UNIT_X;
      vector3f6.scale(3.0F);
      FastMath.computeNormal(vector3f6, vector3f5, vector3f4);
      FastMath.abs(0.0F);
      FastMath.abs(0.6799999F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float float0 = FastMath.INVERSE_TAU;
      Vector2f vector2f0 = Vector2f.ZERO;
      Vector2f vector2f1 = Vector2f.UNIT_Y;
      vector2f1.mult(0.31830987F);
      Vector3f vector3f0 = new Vector3f(vector2f0, 1.0E-4F);
      Vector3f vector3f1 = FastMath.cartesianToSpherical(vector3f0);
      Vector3f vector3f2 = new Vector3f(5.96046E-8F, 1.5696043F, 0.0F);
      Vector3f vector3f3 = FastMath.extrapolateLinear(0.0F, vector3f2, vector3f2);
      FastMath.computeNormal(vector3f1, vector3f0, vector3f3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FastMath.convertFloatToHalf(5.96046E-8F);
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Vector3f vector3f1 = FastMath.cartesianToSpherical(vector3f0);
      FastMath.cartesianToSpherical(vector3f1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Vector3f vector3f1 = FastMath.sphericalToCartesian(vector3f0);
      vector3f0.isUnitVector();
      Vector3f vector3f2 = FastMath.interpolateBezier(Float.POSITIVE_INFINITY, vector3f0, vector3f1, vector3f0, vector3f1);
      Vector3f vector3f3 = FastMath.extrapolateLinear(Float.POSITIVE_INFINITY, vector3f2, vector3f2);
      FastMath.isPowerOfTwo((-7728));
      Vector3f vector3f4 = FastMath.extrapolateLinear(Float.NaN, vector3f2, vector3f2);
      Vector2f vector2f0 = new Vector2f(Float.NaN);
      vector2f0.toString();
      Vector2f vector2f1 = new Vector2f(Float.NaN, (-7728));
      FastMath.pointInsideTriangle(vector2f0, vector2f1, vector2f0, vector2f0);
      Vector3f vector3f5 = FastMath.cartesianZToSpherical(vector3f4);
      vector3f3.build(Float.NaN);
      vector3f4.min(vector3f5);
      FastMath.invSqrt((-65504.0F));
      FastMath.invSqrt(Float.NaN);
      FastMath.getBezierP1toP2Length(vector3f0, vector3f3, vector3f0, vector3f2);
      vector3f0.inverse();
      FastMath.invSqrt(3.1415927F);
      Vector3f vector3f6 = Vector3f.ZERO;
      FastMath.getBezierP1toP2Length(vector3f4, vector3f6, vector3f1, vector3f6);
      FastMath.sphericalToCartesianZ(vector3f1);
      FastMath.invSqrt(-0.0F);
      FastMath.convertHalfToFloat((short) (-2005));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      vector3f0.isValid();
      FastMath.convertFloatToHalf(0.15915494F);
      FastMath.log(1.0F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float float0 = FastMath.INVERSE_TAU;
      Vector2f vector2f0 = new Vector2f((-2416.9F));
      vector2f0.lengthSquared();
      Vector2f vector2f1 = Vector2f.UNIT_Y;
      FastMath.pointInsideTriangle(vector2f0, vector2f0, vector2f0, vector2f1);
      FastMath.exp(1.0F);
      FastMath.cos2(1.5707964F);
      FastMath.cos2(0.0F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f((-2416.9F));
      Vector2f vector2f1 = vector2f0.build((-1.0F));
      Vector2f vector2f2 = Vector2f.ZERO;
      FastMath.pointInsideTriangle(vector2f1, vector2f1, vector2f2, vector2f0);
      FastMath.isPowerOfTwo(0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FastMath.sqr(2.0F);
      Vector2f vector2f0 = new Vector2f(2.0F);
      Vector2f vector2f1 = Vector2f.UNIT_XY;
      Vector3f vector3f0 = new Vector3f(vector2f0, (-65504.0F));
      Vector3f vector3f1 = FastMath.cartesianZToSpherical(vector3f0);
      Vector3f vector3f2 = FastMath.cartesianToSpherical(vector3f1);
      Vector3f vector3f3 = FastMath.interpolateLinear(4.0F, vector3f2, vector3f0);
      Vector3f vector3f4 = FastMath.sphericalToCartesianZ(vector3f3);
      FastMath.cartesianZToSpherical(vector3f4);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector2f vector2f1 = vector2f0.build(0.36F);
      vector2f1.inverse();
      Vector2f vector2f2 = vector2f1.inverse();
      FastMath.counterClockwise(vector2f1, vector2f1, vector2f0);
      vector2f0.scaleAdd(2.7777777F, vector2f1);
      vector2f2.isValid();
      FastMath.pointInsideTriangle(vector2f1, vector2f1, vector2f1, vector2f1);
      FastMath.invSqrt((-3066.0266F));
      FastMath.log((float) 1, 0.36F);
      Vector3f vector3f0 = new Vector3f(0.59999996F);
      Vector3f vector3f1 = FastMath.extrapolateLinear(3.1377778F, vector3f0, vector3f0);
      FastMath.sphericalToCartesianZ(vector3f1);
      FastMath.nextRandomInt();
      FastMath.sin2(0.59999996F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float float0 = FastMath.ZERO_TOLERANCE;
      Vector3f vector3f0 = Vector3f.ZERO;
      FastMath.convertHalfToFloat((short)32761);
      Vector3f vector3f1 = Vector3f.UNIT_XYZ;
      FastMath.convertFloatToHalf(0.0F);
      FastMath.isWithinEpsilon((double) (short)0, (double) 0.0F, (double) 0.0F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Vector2f vector2f0 = new Vector2f();
      Vector3f vector3f1 = new Vector3f(vector2f0);
      vector3f0.divide(vector3f1);
      FastMath.nextRandomInt((-5316), (-1516));
      System.setCurrentTimeMillis(1L);
      Vector2f vector2f1 = new Vector2f();
      vector2f1.scale(Float.NEGATIVE_INFINITY);
      Vector2f.interpolate(vector2f1, vector2f1, Float.NEGATIVE_INFINITY);
      FastMath.copysign(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      FastMath.interpolateCatmullRom(0.0F, (float) 732L, 0.0F, 0.0F, 0.6599999F, (-1.5707964F));
      FastMath.convertFloatToHalf(0.6599999F);
      Vector2f vector2f2 = Vector2f.UNIT_XY;
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FastMath.nextRandomFloat();
      FastMath.log(0.0F, 4347.856F);
      FastMath.acos(0.0F);
      FastMath.cos(1.5707964F);
      FastMath.convertHalfToFloat((short) (-313));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector3f vector3f0 = new Vector3f(vector2f0);
      FastMath.atan(0.0F);
      FastMath.acos((-1.0F));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      FastMath.convertFloatToHalf(Float.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      FastMath.convertHalfToFloat((short)31744);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      FastMath.nextRandomInt();
      FastMath.nextRandomInt(16, 0);
      System.setCurrentTimeMillis(16);
      Vector2f.interpolate(vector2f0, vector2f0, (-1421.6587F));
      FastMath.copysign(16, 0.0F);
      FastMath.interpolateCatmullRom((float) 732L, 0.0F, 0.0F, (float) 16, (float) 16, 0.0F);
      FastMath.convertFloatToHalf((-5.96046E-8F));
      Vector2f vector2f1 = Vector2f.UNIT_XY;
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float float0 = FastMath.HALF_TAU;
      Vector2f vector2f0 = Vector2f.UNIT_X;
      FastMath.copysign((-2012.7198F), 0.0F);
      Vector2f vector2f1 = new Vector2f(3.1415927F);
      vector2f1.min(vector2f0);
      vector2f1.mult(vector2f0);
      vector2f0.distance(vector2f1);
      FastMath.interpolateCatmullRom(998.1778F, 0.0F, 2012.7198F, (-748.1808F), 0.0F, (-2012.7198F));
      FastMath.convertFloatToHalf((-1.48596012E12F));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float float0 = FastMath.ZERO_TOLERANCE;
      FastMath.convertHalfToFloat((short)31743);
      FastMath.interpolateCatmullRom(2095.379F, (-2.0F), (-1740.445F), 0.8599997F, 0.71999985F, (float) (short)31743);
      FastMath.convertFloatToHalf((-6.1578067E14F));
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      FastMath.cos(1.0F);
      float float1 = -0.0F;
      Quaternion quaternion0 = Quaternion.fromMatrix3f((-6.1578067E14F), (-1740.445F), 0.36F, 0.71999985F, 3.1415927F, (-6.1578067E14F), 0.71999985F, 3.1415927F, 2095.379F);
      // Undeclared exception!
      try { 
        quaternion0.getRotationColumn((short) (-1025));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      FastMath.convertFloatToHalf(1721264.2F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector3f vector3f0 = new Vector3f(vector2f0);
      Vector2f vector2f1 = new Vector2f(1.0F, 0.0F);
      vector2f1.lengthSquared();
      vector2f0.smallestAngleBetween(vector2f1);
      FastMath.cos(0.0F);
      FastMath.interpolateCatmullRom((-2.0F), 1643.363F, 0.0F, 1.5707964F, 270.5786F, 2095.379F);
      float float0 = FastMath.QUARTER_PI;
      Vector3f vector3f1 = Vector3f.UNIT_Z;
      FastMath.determinant(0.31830987F, 0.0F, (-2623.551916388067), 0.31830987F, 0.0F, 0.0F, 0.0, 0.0F, 1.0F, 0.0F, (-4.9286968E7F), 571.0, 0.5200000405311584, 2095.379F, (-1758.546), 2095.379F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      FastMath.cartesianZToSpherical(vector3f0);
      FastMath.normalize(Float.NaN, 0.001F, 1593.7396F);
      FastMath.invSqrt(0.001F);
      FastMath.cos(0.0F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      FastMath.cartesianZToSpherical(vector3f0);
      FastMath.normalize(Float.NaN, 0.001F, Float.NEGATIVE_INFINITY);
      FastMath.invSqrt(0.001F);
      FastMath.cos(0.0F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Vector3f vector3f1 = FastMath.cartesianToSpherical(vector3f0);
      FastMath.cartesianZToSpherical(vector3f1);
      float float0 = FastMath.ZERO_TOLERANCE;
      FastMath.convertFloatToHalf(Float.POSITIVE_INFINITY);
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      FastMath.cos(1.0634979E7F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      FastMath.convertFloatToHalf(Float.POSITIVE_INFINITY);
      Vector3f vector3f1 = Vector3f.UNIT_XYZ;
      FastMath.getCatmullRomP1toP2Length(vector3f0, vector3f1, vector3f0, vector3f0, 1.0F, 1.0F, (short)31744);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector3f vector3f0 = new Vector3f(vector2f0);
      FastMath.convertHalfToFloat((short)31743);
      FastMath.interpolateCatmullRom((-2.0F), 1643.363F, 0.0F, 1.5707964F, 270.5786F, 2095.379F);
      FastMath.convertFloatToHalf((-65504.0F));
      Vector2f vector2f1 = Vector2f.UNIT_XY;
      FastMath.cos((-2636.25F));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float float0 = FastMath.INV_TWO_PI;
      FastMath.sqr((-1.0F));
      FastMath.sign(0);
      Vector3f vector3f0 = Vector3f.ZERO;
      Vector3f vector3f1 = FastMath.interpolateBezier(1.1920929E-7F, vector3f0, vector3f0, vector3f0, vector3f0);
      FastMath.convertHalfToFloat((short)32759);
      Vector3f vector3f2 = Vector3f.UNIT_XYZ;
      Vector3f vector3f3 = FastMath.interpolateCatmullRom(1.1920929E-7F, (float) (short)32759, vector3f1, vector3f0, vector3f1, vector3f2);
      FastMath.getBezierP1toP2Length(vector3f3, vector3f2, vector3f0, vector3f0);
      FastMath.isWithinEpsilon((double) (-4.6553333E-10F), (double) 0.0F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float float0 = FastMath.TWO_PI;
      // Undeclared exception!
      try { 
        FastMath.extrapolateLinear(6.2831855F, (Vector3f) null, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float float0 = FastMath.INV_TWO_PI;
      FastMath.sqr((-1.0F));
      FastMath.nextRandomInt(0, 0);
      Vector2f vector2f0 = new Vector2f(2973.5F);
      Vector2f vector2f1 = Vector2f.UNIT_XY;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-1.0F);
      vector2f0.build(floatArray0);
      FastMath.nearestPowerOfTwo(0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FastMath.convertFloatToHalf(65504.0F);
      Vector2f vector2f0 = new Vector2f(65504.0F, (short)31743);
      Vector2f vector2f1 = Vector2f.ZERO;
      Vector2f vector2f2 = Vector2f.UNIT_X;
      Vector2f vector2f3 = Vector2f.ZERO;
      Vector2f vector2f4 = Vector2f.UNIT_XY;
      Vector2f vector2f5 = new Vector2f();
      Vector2f vector2f6 = new Vector2f(1.0F, (-13.9F));
      Vector2f.interpolate(vector2f1, vector2f6, 75475.0F);
      FastMath.counterClockwise(vector2f2, vector2f4, vector2f3);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.computeNormal((Vector3f) null, (Vector3f) null, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.sphericalToCartesianZ((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FastMath.sqr(1.798935F);
      Vector2f vector2f0 = new Vector2f(1.798935F);
      Vector2f vector2f1 = Vector2f.ZERO;
      Vector2f vector2f2 = Vector2f.UNIT_Y;
      FastMath.pointInsideTriangle(vector2f1, vector2f1, vector2f0, vector2f2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FastMath.nearestPowerOfTwo((-3387));
      FastMath.invSqrt(1.5F);
      FastMath.sign((-3387));
      FastMath.copysign((-1), 0);
      FastMath.isWithinEpsilon((double) (-3387), (double) 1.5F, (double) 1.5F);
      Vector2f vector2f0 = Vector2f.UNIT_X;
      Vector2f vector2f1 = Vector2f.ZERO;
      Vector2f vector2f2 = Vector2f.UNIT_X;
      Vector2f vector2f3 = new Vector2f((-1775.623F), 2498.6562F);
      FastMath.pointInsideTriangle(vector2f1, vector2f2, vector2f2, vector2f3);
      FastMath.pointInsideTriangle(vector2f0, vector2f3, vector2f1, vector2f1);
      FastMath.isPowerOfTwo(8);
      FastMath.counterClockwise(vector2f2, vector2f2, vector2f1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.interpolateCatmullRom(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, (Vector3f) null, (Vector3f) null, (Vector3f) null, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FastMath.pow(0.0F, 0.0F);
      FastMath.copysign(1.0F, 0.0F);
      Vector2f vector2f0 = new Vector2f();
      Vector3f vector3f0 = new Vector3f(vector2f0);
      FastMath.interpolateCatmullRom(0.0F, 461.3F, 1.0F, 5428.691F, 5428.691F, 0.0F);
      float float0 = FastMath.HALF_PI;
      FastMath.acos(-0.0F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FastMath.invSqrt(427.2F);
      FastMath.nextRandomFloat();
      FastMath.nextRandomInt();
      FastMath.nextRandomInt(2147361004, 16);
      System.setCurrentTimeMillis(732L);
      FastMath.copysign(16, 16);
      FastMath.interpolateCatmullRom(2883.8618F, 0.83999974F, (float) 1717888780, (-3907.7578F), 1643.363F, (-2.0F));
      FastMath.convertFloatToHalf(1.1920929E-7F);
      FastMath.convertFloatToHalf(976.6751F);
      Vector3f vector3f0 = new Vector3f();
      vector3f0.length();
      Vector3f vector3f1 = FastMath.interpolateCatmullRom((float) 16, (-3387.0F), vector3f0, vector3f0, vector3f0, vector3f0);
      Vector3f vector3f2 = FastMath.interpolateLinear((-2776.481F), vector3f1, vector3f1);
      FastMath.getBezierP1toP2Length(vector3f0, vector3f0, vector3f1, vector3f1);
      FastMath.interpolateBezier((-2077.099F), vector3f0, vector3f2, vector3f1, vector3f2);
      FastMath.reduceSinAngle((-231.11F));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.cartesianZToSpherical((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.getBezierP1toP2Length((Vector3f) null, (Vector3f) null, (Vector3f) null, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.counterClockwise((Vector2f) null, (Vector2f) null, (Vector2f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float float0 = FastMath.ZERO_TOLERANCE;
      FastMath.convertFloatToHalf(1.0E-4F);
      FastMath.interpolateCatmullRom((float) (short)1677, 1.5707964F, (-3490.626F), 3.1415927F, 1.5707964F, 1.5707964F);
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector2f vector2f1 = new Vector2f(3708.4294F);
      Vector3f vector3f0 = new Vector3f(vector2f1);
      vector3f0.scale(0.38000003F);
      Vector3f vector3f1 = FastMath.sphericalToCartesianZ(vector3f0);
      FastMath.extrapolateLinear((-1468.3604F), vector3f1, vector3f0);
      // Undeclared exception!
      try { 
        FastMath.counterClockwise((Vector2f) null, (Vector2f) null, vector2f0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FastMath.nextRandomInt((-195226357), (-195226357));
      FastMath.invSqrt(0.6799999F);
      FastMath.sign((-195226357));
      FastMath.copysign(4.853662E7F, (-195226357));
      FastMath.isWithinEpsilon(0.9497747421264648, (-0.499), (double) 4.853662E7F);
      FastMath.asin(4.853662E7F);
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector2f vector2f1 = new Vector2f();
      Vector2f vector2f2 = Vector2f.interpolate(vector2f0, vector2f0, 0.15915494F);
      Vector2f vector2f3 = new Vector2f(0.9599996F, 1044.0F);
      FastMath.counterClockwise(vector2f3, vector2f2, vector2f1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      FastMath.interpolateLinear(0.0F, 0.0F, (-1.0F));
      FastMath.nextRandomInt((-3106), (-3106));
      FastMath.atan2((-1.0F), 2460.5933F);
      FastMath.atan(4747.136F);
      System.setCurrentTimeMillis(0L);
      FastMath.sqr(0.83999974F);
      FastMath.sign((-1024));
      Vector2f vector2f1 = Vector2f.UNIT_XY;
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FastMath.sign(173);
      Vector2f vector2f0 = new Vector2f(1, -0.0F);
      Vector3f vector3f0 = new Vector3f(vector2f0);
      Vector3f vector3f1 = Vector3f.UNIT_XYZ;
      vector3f1.isUnitVector();
      vector3f1.distanceSquared(vector3f0);
      Vector2f vector2f1 = new Vector2f(842.95294F, (-449.28006F));
      Vector2f vector2f2 = vector2f1.build(0.02F);
      Vector2f vector2f3 = Vector2f.ZERO;
      vector2f3.min(vector2f1);
      Vector2f vector2f4 = Vector2f.UNIT_X;
      FastMath.pointInsideTriangle(vector2f2, vector2f3, vector2f4, vector2f1);
      FastMath.isPowerOfTwo((-904664206));
      FastMath.sin(1.0F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FastMath.invSqrt((-1232.1476F));
      FastMath.invSqrt((-2249.91F));
      FastMath.floor((-1050.76F));
      FastMath.sqrt(0.50000006F);
      FastMath.interpolateCatmullRom(0.6799999F, 0.7071068F, Float.NEGATIVE_INFINITY, 1008.1273F, 0.8999997F, (-1051.0F));
      FastMath.interpolateCatmullRom((-1232.1476F), 0.1F, 1124.38F, 1465.0076F, 43.9F, (-1144.881F));
      Vector2f vector2f0 = Vector2f.UNIT_X;
      Vector3f vector3f0 = new Vector3f(vector2f0);
      vector2f0.isUnitVector();
      Vector3f vector3f1 = FastMath.interpolateCatmullRom(1.0F, (-2249.91F), vector3f0, vector3f0, vector3f0, vector3f0);
      FastMath.interpolateLinear(1521.3643F, vector3f1, vector3f1);
      FastMath.interpolateCatmullRom(1.0F, 0.8999997F, 4747.136F, 0.001F, 1.1920929E-7F, 0.0F);
      FastMath.determinant(0.9999000000025262, 1465.0076F, 1523.05804139003, (-263.0), (-465.77526368), 0.6799999F, (-1050.76F), 1.0, (-2249.91F), 1521.3643F, (-263.0), 0.0F, 978.874888, 0.0F, 0.7853981633974483, 0.0F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FastMath.nextRandomInt((-3387), (-3387));
      FastMath.invSqrt(1.5F);
      FastMath.sign((-3387));
      FastMath.nextRandomInt(0, (-3387));
      FastMath.atan2((-948.195F), 2352.9734F);
      FastMath.atan((-3387));
      System.setCurrentTimeMillis((-870L));
      FastMath.sqr((-3387));
      Vector2f vector2f0 = new Vector2f(0.0F);
      Vector2f vector2f1 = Vector2f.UNIT_XY;
      Vector2f vector2f2 = new Vector2f(0.0F, 3276.7F);
      vector2f2.build(3.1415927F);
      vector2f2.isValid();
      FastMath.pointInsideTriangle(vector2f0, vector2f2, vector2f2, vector2f2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FastMath.pow(0.0F, 567.0F);
      FastMath.copysign(0.0F, 567.0F);
      Vector2f vector2f0 = new Vector2f();
      Vector3f vector3f0 = new Vector3f(vector2f0);
      FastMath.interpolateCatmullRom(0.0F, 2095.379F, -0.0F, 5428.691F, 5428.691F, 0.0F);
      FastMath.convertHalfToFloat((short)31743);
      Vector3f vector3f1 = Vector3f.UNIT_XYZ;
      FastMath.getBezierP1toP2Length(vector3f1, vector3f1, vector3f1, vector3f0);
      FastMath.sqr((-2349.0F));
      FastMath.sign((int) (short)31743);
      Vector2f vector2f1 = Vector2f.UNIT_XY;
      FastMath.abs(-0.0F);
      FastMath.reduceSinAngle(0.0F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FastMath.sign(2265.4912F);
      Vector3f vector3f0 = new Vector3f(2577.508F);
      Vector3f vector3f1 = Vector3f.ZERO;
      vector3f1.inverse();
      FastMath.extrapolateLinear(762.3211F, 0.0F, 2577.508F);
      FastMath.nextRandomInt(2081, (-656175556));
      FastMath.atan2(0.7853982F, (-2579.6018F));
      FastMath.atan(0.31830987F);
      System.setCurrentTimeMillis(0L);
      FastMath.isWithinEpsilon(0.0F, 273.389F, 1.46370707E14F);
      Vector2f vector2f0 = Vector2f.ZERO;
      Vector2f vector2f1 = Vector2f.UNIT_Y;
      Vector2f vector2f2 = vector2f0.build(2577.508F);
      Vector2f vector2f3 = Vector2f.ZERO;
      Vector2f vector2f4 = Vector2f.interpolate(vector2f3, vector2f1, 2577.508F);
      Vector2f vector2f5 = Vector2f.UNIT_XY;
      Vector2f vector2f6 = new Vector2f(2.0F);
      Vector2f.interpolate(vector2f0, vector2f2, 2875.4F);
      FastMath.pointInsideTriangle(vector2f2, vector2f4, vector2f5, vector2f6);
      FastMath.isPowerOfTwo(2081);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      Vector2f vector2f0 = new Vector2f(Float.POSITIVE_INFINITY, (-4922.973F));
      Vector2f vector2f1 = Vector2f.interpolate(vector2f0, vector2f0, (-4922.973F));
      Vector2f vector2f2 = vector2f1.build((-29.4236F));
      Vector2f vector2f3 = new Vector2f();
      FastMath.pointInsideTriangle(vector2f2, vector2f2, vector2f1, vector2f3);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FastMath.pow(0.0F, 567.0F);
      FastMath.copysign(0.0F, 567.0F);
      Vector2f vector2f0 = new Vector2f();
      Vector3f vector3f0 = new Vector3f(vector2f0);
      Vector3f vector3f1 = new Vector3f();
      vector3f0.equalsEpsilon(vector3f1);
      FastMath.sqrt((-1516.2026F));
      FastMath.convertFloatToHalf(1.0E-4F);
      FastMath.isPowerOfTwo((-685));
      FastMath.sign(0.0F);
      FastMath.fastInvSqrt(1582.0426F);
      FastMath.atan(4747.136F);
      FastMath.acos(4.610767F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      // Undeclared exception!
      try { 
        FastMath.convertFloatToHalf(Float.NaN);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NaN to half conversion not supported!
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FastMath.isWithinEpsilon((-2193.106F), 567.0F);
      short short0 = (short)0;
      FastMath.convertHalfToFloat((short)0);
      FastMath.isWithinEpsilon((double) (short)0, (double) 0.0F);
      FastMath.reduceSinAngle((-4300.2656F));
      FastMath.atan((-4300.2656F));
      float float0 = -0.0F;
      FastMath.copysign(5.7083483F, (-1.5705638F));
      Vector3f vector3f0 = Vector3f.ZERO;
      Vector3f vector3f1 = vector3f0.normalize();
      Vector3f vector3f2 = vector3f1.negate();
      Vector3f vector3f3 = FastMath.cartesianZToSpherical(vector3f2);
      vector3f3.dot(vector3f1);
      vector3f0.equalsEpsilon(vector3f3, (-2193.106F));
      // Undeclared exception!
      try { 
        FastMath.interpolateBezier(2.0F, vector3f3, vector3f0, (Vector3f) null, vector3f2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector2f vector2f1 = Vector2f.UNIT_Y;
      Vector2f vector2f2 = new Vector2f(1.0F);
      FastMath.pointInsideTriangle(vector2f2, vector2f0, vector2f1, vector2f1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_X;
      float float0 = FastMath.INVERSE_TAU;
      Vector2f vector2f1 = new Vector2f(0.0F);
      Vector2f vector2f2 = Vector2f.UNIT_XY;
      FastMath.pointInsideTriangle(vector2f0, vector2f2, vector2f0, vector2f1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FastMath.cos2((-3490.626F));
      FastMath.convertFloatToHalf((-0.9503503F));
      Vector3f vector3f0 = new Vector3f();
      Vector3f vector3f1 = Vector3f.UNIT_Z;
      FastMath.isWithinEpsilon(0.0F, 3237.0952F, 0.6599999F);
      Vector2f vector2f0 = Vector2f.ZERO;
      Vector2f vector2f1 = Vector2f.UNIT_Y;
      Vector2f vector2f2 = vector2f1.build(1021.8069F);
      vector2f1.equalsEpsilon(vector2f0);
      Vector2f vector2f3 = new Vector2f(0.6599999F, 0.0F);
      FastMath.pointInsideTriangle(vector2f1, vector2f2, vector2f0, vector2f3);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FastMath.sign(2265.4912F);
      Vector3f vector3f0 = new Vector3f(2577.508F);
      Vector3f vector3f1 = Vector3f.ZERO;
      vector3f1.inverse();
      FastMath.extrapolateLinear(762.3211F, 0.0F, 2577.508F);
      FastMath.nextRandomInt(2081, (-656175556));
      FastMath.atan2(0.7853982F, (-2579.6018F));
      FastMath.atan(0.31830987F);
      System.setCurrentTimeMillis(0L);
      FastMath.convertFloatToHalf(1.0F);
      FastMath.isPowerOfTwo((short)15360);
      FastMath.sign(1.0F);
      FastMath.fastInvSqrt(0.56F);
      FastMath.atan(0.7599998F);
      FastMath.acos(2251.3494F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FastMath.pow((-725), 567.0F);
      FastMath.copysign((-1.0F), Float.NEGATIVE_INFINITY);
      FastMath.isPowerOfTwo((-613));
      FastMath.sign((-594.776F));
      FastMath.fastInvSqrt((-613));
      FastMath.atan(Float.NEGATIVE_INFINITY);
      FastMath.acos(0.69999987F);
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector2f vector2f1 = vector2f0.build(0.795399F);
      Vector3f vector3f0 = new Vector3f(vector2f1);
      FastMath.interpolateCatmullRom((-594.776F), 287.1313F, vector3f0, vector3f0, vector3f0, vector3f0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FastMath.interpolateCatmullRom((-515.0F), (-515.0F), (-1735.1072F), (-515.0F), (-1735.1072F), (-2587.0F));
      FastMath.isWithinEpsilon((-515.0F), (-1.46370707E14F));
      FastMath.convertHalfToFloat((short)0);
      FastMath.isWithinEpsilon((-189.98838698), 3.141592653589793);
      FastMath.reduceSinAngle((-515.0F));
      FastMath.atan((-2587.0F));
      FastMath.copysign(-0.0F, (-515.0F));
      Vector3f vector3f0 = Vector3f.ZERO;
      Vector3f vector3f1 = vector3f0.normalize();
      vector3f1.negate();
      vector3f1.dot(vector3f0);
      vector3f0.equalsEpsilon(vector3f1, -0.0F);
      FastMath.interpolateBezier((float) (short)0, vector3f0, vector3f0, vector3f0, vector3f0);
      vector3f0.isUnitVector();
      Vector2f vector2f0 = new Vector2f(12.345161F, (-1.5704098F));
      Vector2f vector2f1 = vector2f0.build(Float.NaN);
      Vector2f vector2f2 = Vector2f.ZERO;
      FastMath.pointInsideTriangle(vector2f2, vector2f2, vector2f1, vector2f0);
      FastMath.isPowerOfTwo(406);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = (-1.5707964F);
      FastMath.clamp((-252.9286F), (-168.287F), (-1.5707964F));
      FastMath.sqr(65504.0F);
      FastMath.sqrt(4.29077402E9F);
      FastMath.sqr(4.29077402E9F);
      float float1 = 1.1920929E-7F;
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      Vector3f vector3f1 = null;
      // Undeclared exception!
      try { 
        vector3f0.max((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FastMath.exp(2228.634F);
      FastMath.cos2((-3573.8F));
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Vector2f vector2f0 = new Vector2f(Float.POSITIVE_INFINITY, 0.0F);
      Vector3f vector3f1 = new Vector3f(vector2f0, (-3573.8F));
      vector3f1.lengthSquared();
      Vector3f vector3f2 = vector3f0.divide(vector3f1);
      Vector3f vector3f3 = Vector3f.UNIT_XYZ;
      vector3f2.isUnitVector();
      vector3f3.equalsEpsilon(vector3f0, (-286.355F));
      vector3f2.lengthSquared();
      vector3f0.angleBetween(vector3f3);
      vector3f0.normalize();
      FastMath.cartesianToSpherical(vector3f0);
      FastMath.convertFloatToHalf((-1368.2598F));
      FastMath.ceil(Float.POSITIVE_INFINITY);
      FastMath.nextRandomInt((int) (short) (-6824), (-399));
      FastMath.isWithinEpsilon(1376.766251610646, (double) (-3573.8F), (double) (-1368.2598F));
      FastMath.isWithinEpsilon(0.0F, 1.0F, (float) (short) (-6824));
      FastMath.asin(0.0F);
      FastMath.convertHalfToFloat((short)590);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        FastMath.getCatmullRomP1toP2Length(vector3f0, (Vector3f) null, (Vector3f) null, (Vector3f) null, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FastMath.convertFloatToHalf(65516.97F);
      Vector2f vector2f0 = new Vector2f(65504.0F, (short)31743);
      Vector2f vector2f1 = Vector2f.ZERO;
      Vector2f vector2f2 = Vector2f.ZERO;
      Vector2f vector2f3 = Vector2f.UNIT_X;
      float float0 = FastMath.ONE_THIRD;
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FastMath.interpolateLinear(6.2831855F, 6.2831855F, 6.2831855F);
      Vector3f vector3f0 = Vector3f.ZERO;
      Vector3f vector3f1 = Vector3f.UNIT_Y;
      vector3f1.isUnitVector();
      Vector3f vector3f2 = vector3f0.max(vector3f1);
      Vector3f vector3f3 = vector3f1.scale(3.0F);
      Vector3f vector3f4 = FastMath.cartesianToSpherical(vector3f0);
      FastMath.getBezierP1toP2Length(vector3f4, vector3f0, vector3f4, vector3f0);
      Vector2f vector2f0 = Vector2f.ZERO;
      Vector2f vector2f1 = Vector2f.interpolate(vector2f0, vector2f0, 1.0F);
      vector2f0.add(vector2f1);
      vector2f0.distanceSquared(vector2f1);
      Vector2f vector2f2 = Vector2f.UNIT_X;
      Vector2f vector2f3 = Vector2f.interpolate(vector2f0, vector2f2, 0.0F);
      vector2f3.isUnitVector();
      FastMath.pointInsideTriangle(vector2f0, vector2f3, vector2f2, vector2f2);
      FastMath.nextRandomInt();
      vector3f2.toString();
      FastMath.clamp(0.0F, 0.0F, 3.0F);
      FastMath.pow(0.0F, 6.2831855F);
      FastMath.asin(0.1F);
      FastMath.isWithinEpsilon((float) 0, 0.0F);
      FastMath.interpolateLinear(3.0F, vector3f3, vector3f3);
      FastMath.atan2(0.0F, 6.2831855F);
      FastMath.interpolateLinear(1508.991F, vector3f1, vector3f2);
      FastMath.abs(0.0F);
      Random.setNextRandom((-954437194));
      FastMath.floor(0.9799996F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FastMath.pow((-725), 567.0F);
      FastMath.copysign((-1.0F), Float.NEGATIVE_INFINITY);
      FastMath.isWithinEpsilon((-255.11F), 5.96046E-8F, (-163.0F));
      FastMath.asin(1.5707964F);
      FastMath.convertHalfToFloat((short) (-294));
      FastMath.interpolateCatmullRom((-1.0F), (-2195.0F), (-1198.0F), 0.017453292F, 567.0F, 567.0F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FastMath.sign((-725));
      FastMath.ceil((-1198.6F));
      FastMath.normalize((-725), (-1198.6F), (-1));
      FastMath.isWithinEpsilon((double) (-725), 0.0);
      FastMath.copysign(1267.6F, (-1198.0F));
      FastMath.interpolateBezier((-1061.4F), (-1198.6F), (-1198.6F), (-1198.6F), (-1198.0F));
      FastMath.sqr(3565.196F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FastMath.isPowerOfTwo((-1));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FastMath.sign(173);
      FastMath.interpolateLinear((float) 1, 4747.136F, (float) 173);
      Vector2f vector2f0 = Vector2f.ZERO;
      Vector3f vector3f0 = new Vector3f(vector2f0);
      Vector3f vector3f1 = FastMath.sphericalToCartesian(vector3f0);
      Vector3f vector3f2 = FastMath.interpolateCatmullRom(0.54F, (float) 173, vector3f1, vector3f1, vector3f0, vector3f0);
      Vector3f vector3f3 = FastMath.interpolateLinear((-1376.1431F), vector3f2, vector3f1);
      Vector3f vector3f4 = vector3f3.scale(1846.7839F);
      Vector3f vector3f5 = FastMath.sphericalToCartesianZ(vector3f1);
      vector3f3.equalsEpsilon(vector3f4);
      Vector3f vector3f6 = Vector3f.NAN;
      vector3f6.isValid();
      Vector3f vector3f7 = vector3f4.subtract(vector3f1);
      vector3f3.distance(vector3f4);
      vector3f0.length();
      Vector3f vector3f8 = FastMath.computeNormal(vector3f5, vector3f7, vector3f1);
      vector3f8.lengthSquared();
      FastMath.extrapolateLinear(Float.NaN, vector3f2, vector3f0);
      FastMath.interpolateBezier(1846.7839F, 0.0F, 0.0F, 572.573F, (-1.5707964F));
      FastMath.sqr(0.0F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FastMath.pow(0.0F, 567.0F);
      FastMath.copysign(0.0F, 567.0F);
      Vector2f vector2f0 = new Vector2f();
      Vector3f vector3f0 = new Vector3f(vector2f0);
      Vector3f vector3f1 = new Vector3f();
      vector3f0.equalsEpsilon(vector3f1);
      FastMath.sqrt((-1516.2026F));
      FastMath.isWithinEpsilon(0.7999998F, (-2979.7F), 0.0F);
      Vector2f vector2f1 = Vector2f.ZERO;
      Vector2f vector2f2 = Vector2f.UNIT_Y;
      vector2f2.build(12.345161F);
      FastMath.pointInsideTriangle(vector2f2, vector2f1, vector2f0, vector2f1);
      FastMath.isPowerOfTwo(1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = (-725);
      FastMath.sign((-725));
      FastMath.ceil((-1198.6F));
      FastMath.normalize((-725), (-1198.6F), (-1));
      FastMath.isWithinEpsilon((double) (-725), 0.0);
      FastMath.sqr(1267.6F);
      float float0 = 0.0F;
      FastMath.interpolateCatmullRom((-1198.6F), (-725.0F), (-3607.2224F), 0.0F, (-1198.0F), (-1198.0F));
      Vector3f vector3f0 = null;
      try {
        vector3f0 = new Vector3f((Vector2f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(525.0F, (-487.586F), 525.0F);
      Vector3f vector3f1 = FastMath.interpolateCatmullRom(525.0F, 525.0F, vector3f0, vector3f0, vector3f0, vector3f0);
      FastMath.extrapolateLinear(525.0F, vector3f1, vector3f1);
      vector3f0.cross(vector3f1);
      float float0 = 1527.5F;
      vector3f0.divide(1527.5F);
      FastMath.log((-680.191F), 525.0F);
      FastMath.sin2((-2261473.8F));
      float float1 = Float.POSITIVE_INFINITY;
      FastMath.sqr(Float.POSITIVE_INFINITY);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1527.5F;
      floatArray0[1] = 525.0F;
      floatArray0[2] = 0.34369886F;
      floatArray0[3] = (-487.586F);
      floatArray0[4] = 0.9772274F;
      floatArray0[5] = (-487.586F);
      floatArray0[6] = Float.POSITIVE_INFINITY;
      floatArray0[7] = Float.NaN;
      floatArray0[8] = Float.NaN;
      // Undeclared exception!
      try { 
        FloatBuffer.wrap(floatArray0, (-520602234), (-520602234));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.FloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FastMath.determinant(3388.5, 3388.5, 3388.5, 5051.0, 526.506349, 3388.5, 1.5, 3388.5, 3388.5, 526.506349, 526.506349, 1.5, 0.990394115447998, 1.5, 844.1228629767897, 844.1228629767897);
      FastMath.sqr(1.5707964F);
      FastMath.isWithinEpsilon((-3689.256533), 0.7853981633974483, 0.0);
      Vector3f vector3f0 = new Vector3f(0.8999997F, (-7.6621818E12F), (-617.64F));
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-7.6621818E12F);
      floatArray0[1] = (-7.6621818E12F);
      Vector3f vector3f1 = Vector3f.NEGATIVE_INFINITY;
      vector3f0.project(vector3f1);
      floatArray0[2] = 0.8599997F;
      floatArray0[3] = (-7.6621818E12F);
      floatArray0[4] = (-617.64F);
      vector3f0.build(floatArray0);
      vector3f0.toString();
      FastMath.cartesianToSpherical(vector3f0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FastMath.interpolateLinear(6.2831855F, 6.2831855F, 6.2831855F);
      Vector3f vector3f0 = Vector3f.ZERO;
      Vector3f vector3f1 = new Vector3f(6.2831855F, 6.2831855F, 0.0F);
      vector3f1.isUnitVector();
      Vector3f vector3f2 = vector3f0.max(vector3f1);
      vector3f2.angleBetween(vector3f0);
      Vector3f vector3f3 = vector3f1.scale(3.0F);
      Vector3f vector3f4 = FastMath.cartesianToSpherical(vector3f0);
      FastMath.getBezierP1toP2Length(vector3f4, vector3f0, vector3f4, vector3f0);
      Vector2f vector2f0 = Vector2f.ZERO;
      Vector2f vector2f1 = Vector2f.interpolate(vector2f0, vector2f0, 6.2831855F);
      vector2f0.add(vector2f1);
      vector2f0.distanceSquared(vector2f1);
      Vector2f vector2f2 = Vector2f.UNIT_X;
      Vector2f vector2f3 = Vector2f.interpolate(vector2f0, vector2f2, 0.0F);
      vector2f3.isUnitVector();
      FastMath.pointInsideTriangle(vector2f0, vector2f3, vector2f2, vector2f2);
      FastMath.nextRandomInt();
      vector3f2.toString();
      FastMath.clamp(0.0F, 6.2831855F, 3.0F);
      FastMath.pow(0.0F, 6.2831855F);
      FastMath.asin(0.1F);
      FastMath.isWithinEpsilon((double) 6.2831855F, 2374.42782);
      FastMath.interpolateLinear(3.0F, vector3f3, vector3f3);
      FastMath.atan2(0.0F, 6.2831855F);
      FastMath.copysign((-662.6F), (-1735.91F));
      FastMath.tan(0.0F);
      FastMath.cos(3246.826F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float float0 = 0.0F;
      Vector3f vector3f0 = Vector3f.NAN;
      Vector3f vector3f1 = FastMath.interpolateLinear(0.017453292F, vector3f0, vector3f0);
      Vector3f vector3f2 = FastMath.computeNormal(vector3f1, vector3f1, vector3f1);
      Vector3f vector3f3 = new Vector3f((-3388.715F), Float.NaN, 1.0F);
      Vector3f vector3f4 = vector3f2.max(vector3f3);
      Vector3f vector3f5 = FastMath.cartesianZToSpherical(vector3f2);
      vector3f0.angleBetween(vector3f2);
      Vector3f vector3f6 = vector3f2.divide((-1.5707964F));
      vector3f1.scale(Float.NaN);
      vector3f6.toString();
      vector3f5.add(vector3f2);
      vector3f5.equalsEpsilon(vector3f4, -0.0F);
      vector3f0.isUnitVector();
      // Undeclared exception!
      try { 
        vector3f1.get((-390));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must be either 0, 1 or 2
         //
         verifyException("org.saintandreas.math.Vector3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FastMath.sqr((-1890.3083F));
      FastMath.isPowerOfTwo(7);
      FastMath.sin((-65504.0F));
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Vector3f vector3f1 = FastMath.sphericalToCartesianZ(vector3f0);
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(7);
      vector3f0.fillBuffer(floatBuffer0);
      vector3f1.equalsEpsilon(vector3f0, 1.0F);
      vector3f1.length();
      vector3f1.distanceSquared(vector3f0);
      Vector3f vector3f2 = vector3f1.interpolate(vector3f0, 0.0F);
      FastMath.sphericalToCartesianZ(vector3f1);
      FastMath.convertHalfToFloat((short) (-32767));
      Vector3f vector3f3 = Vector3f.UNIT_XYZ;
      vector3f3.build(1.0E-4F);
      Vector3f vector3f4 = new Vector3f(0.0F, 0.7599998F, 0.0F);
      FastMath.getBezierP1toP2Length(vector3f0, vector3f3, vector3f0, vector3f4);
      FastMath.isWithinEpsilon(12.804673194885254, (-916.15703372222));
      FastMath.cartesianZToSpherical(vector3f2);
      FastMath.nearestPowerOfTwo(2146903264);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FastMath.cos2((-3490.626F));
      FastMath.convertFloatToHalf((-0.9503503F));
      FastMath.abs((-3366.0F));
      FastMath.interpolateCatmullRom((float) (short) (-17510), 1.5707964F, (-988.3577F), 3.1415927F, 1.5707964F, 1.5707964F);
      FastMath.interpolateLinear((-988.3577F), (-1019.51495F), (-1668.4868F));
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      // Undeclared exception!
      try { 
        vector3f0.build((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FastMath.pow((-725), 567.0F);
      FastMath.copysign((-1.0F), Float.NEGATIVE_INFINITY);
      FastMath.interpolateBezier((-1874.0F), 3175.0F, 567.0F, 0.32F, 2375.4407F);
      FastMath.sqr(0.0F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float float0 = FastMath.HALF_TAU;
      Vector3f vector3f0 = Vector3f.ZERO;
      Vector3f vector3f1 = Vector3f.UNIT_XYZ;
      FastMath.convertFloatToHalf(0.0F);
      FastMath.isWithinEpsilon((double) (short)0, (double) 0.0F, (double) 0.0F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float float0 = FastMath.QUARTER_PI;
      FastMath.log((-1813.1565F));
      FastMath.sqr((-3366.0F));
      FastMath.atan((-2400.1472F));
      FastMath.log(0.34F);
      FastMath.tan(394.0F);
      Vector3f vector3f0 = new Vector3f(0.9599996F);
      Vector3f vector3f1 = vector3f0.inverse();
      Vector3f vector3f2 = vector3f1.divide(0.36F);
      FastMath.getCatmullRomP1toP2Length(vector3f2, vector3f2, vector3f2, vector3f0, (-724.341F), 1.0416671F, 2455.67F);
      Vector3f vector3f3 = FastMath.sphericalToCartesian(vector3f0);
      FastMath.getBezierP1toP2Length(vector3f2, vector3f3, vector3f3, vector3f1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      FastMath.getCatmullRomP1toP2Length(vector3f0, vector3f0, vector3f0, vector3f0, 1303.7F, (-1963.0021F), 0.8799997F);
      FastMath.cos(0.31803077F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FastMath.fastInvSqrt((-6824.76F));
      FastMath.nearestPowerOfTwo((-4008));
      FastMath.tan(2146.16F);
      FastMath.pow(0.48568442F, (-793.0F));
      FastMath.tan((-1.0F));
      FastMath.interpolateCatmullRom((-6824.76F), Float.POSITIVE_INFINITY, 0.91999966F, 1.0F, 1.5707964F, 0.59999996F);
      FastMath.convertHalfToFloat((short) (-32767));
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Vector3f vector3f1 = FastMath.sphericalToCartesianZ(vector3f0);
      Vector3f vector3f2 = vector3f1.divide((float) (-4008));
      FastMath.getBezierP1toP2Length(vector3f0, vector3f1, vector3f0, vector3f1);
      FastMath.isWithinEpsilon(3.141592653589793, (-840.9812703232));
      Vector3f vector3f3 = FastMath.cartesianZToSpherical(vector3f1);
      FastMath.getCatmullRomP1toP2Length(vector3f0, vector3f3, vector3f2, vector3f3, 4104.641F, 0.48568442F, 0.7999998F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FastMath.convertFloatToHalf(0.0F);
      FastMath.abs(0.6599999F);
      FastMath.interpolateCatmullRom((-3468.0F), 3060.5F, (-8.16787F), 0.1F, 1.1920929E-7F, 0.6599999F);
      FastMath.convertHalfToFloat((short) (-32767));
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Vector3f vector3f1 = Vector3f.ZERO;
      vector3f1.distanceSquared(vector3f0);
      FastMath.getBezierP1toP2Length(vector3f0, vector3f1, vector3f0, vector3f0);
      FastMath.isWithinEpsilon((double) 0.0F, 12.804673194885254);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FastMath.interpolateLinear(6.2831855F, 6.2831855F, 6.2831855F);
      Vector3f vector3f0 = Vector3f.ZERO;
      Vector3f vector3f1 = new Vector3f(6.2831855F, 6.2831855F, 0.0F);
      vector3f1.isUnitVector();
      Vector3f vector3f2 = vector3f0.max(vector3f1);
      vector3f1.scale(3.0F);
      Vector3f vector3f3 = FastMath.cartesianToSpherical(vector3f0);
      FastMath.getBezierP1toP2Length(vector3f3, vector3f0, vector3f3, vector3f0);
      Vector2f vector2f0 = Vector2f.ZERO;
      Vector2f vector2f1 = Vector2f.interpolate(vector2f0, vector2f0, 6.2831855F);
      vector2f0.add(vector2f1);
      vector2f0.distanceSquared(vector2f1);
      Vector2f vector2f2 = Vector2f.UNIT_X;
      Vector2f vector2f3 = Vector2f.interpolate(vector2f0, vector2f2, 0.0F);
      vector2f3.isUnitVector();
      FastMath.pointInsideTriangle(vector2f0, vector2f3, vector2f2, vector2f2);
      FastMath.nextRandomInt();
      vector3f2.toString();
      FastMath.interpolateLinear(0.91999966F, 6.2831855F, 0.0F);
      Vector3f vector3f4 = FastMath.cartesianToSpherical(vector3f0);
      // Undeclared exception!
      try { 
        vector3f4.build((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FastMath.interpolateLinear(6.2831855F, 6.2831855F, 6.2831855F);
      Vector3f vector3f0 = Vector3f.ZERO;
      Vector3f vector3f1 = new Vector3f(6.2831855F, 6.2831855F, 0.0F);
      vector3f1.isUnitVector();
      Vector3f vector3f2 = vector3f0.max(vector3f1);
      Vector3f vector3f3 = vector3f1.scale(3.0F);
      Vector3f vector3f4 = FastMath.cartesianToSpherical(vector3f0);
      FastMath.getBezierP1toP2Length(vector3f4, vector3f0, vector3f4, vector3f0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 6.2831855F;
      floatArray0[1] = 6.2831855F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 6.2831855F;
      floatArray0[4] = 0.0F;
      vector3f0.build(floatArray0);
      Vector2f vector2f0 = Vector2f.ZERO;
      Vector2f vector2f1 = Vector2f.interpolate(vector2f0, vector2f0, 6.2831855F);
      vector2f0.add(vector2f1);
      vector2f0.distanceSquared(vector2f1);
      Vector2f vector2f2 = Vector2f.UNIT_X;
      Vector2f vector2f3 = Vector2f.interpolate(vector2f0, vector2f2, 0.0F);
      vector2f3.isUnitVector();
      FastMath.pointInsideTriangle(vector2f0, vector2f3, vector2f2, vector2f2);
      FastMath.nextRandomInt();
      vector3f2.toString();
      FastMath.clamp(0.0F, 6.2831855F, 3.0F);
      FastMath.pow(0.0F, 6.2831855F);
      FastMath.asin(0.1F);
      FastMath.isWithinEpsilon((double) 6.2831855F, 2374.42782);
      FastMath.interpolateLinear(3.0F, vector3f3, vector3f3);
      FastMath.copysign((-681.9833F), 6.2831855F);
      FastMath.isPowerOfTwo(2139095040);
      Vector3f vector3f5 = Vector3f.ZERO;
      FastMath.sphericalToCartesian(vector3f5);
      FastMath.sphericalToCartesian(vector3f3);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FastMath.pow(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY);
      FastMath.atan((-3115.794F));
      FastMath.tan(Float.POSITIVE_INFINITY);
      FastMath.atan2(Float.NEGATIVE_INFINITY, (-1.5704753F));
      FastMath.sqr((-1.5704753F));
      FastMath.fastInvSqrt(Float.POSITIVE_INFINITY);
      FastMath.pow(Float.POSITIVE_INFINITY, 2.0F);
      Vector2f vector2f0 = Vector2f.ZERO;
      Vector2f vector2f1 = Vector2f.interpolate(vector2f0, vector2f0, 0.0F);
      vector2f1.distanceSquared(vector2f0);
      Vector2f vector2f2 = vector2f1.build(2832.7917F);
      vector2f0.add(vector2f1);
      Vector3f vector3f0 = vector2f2.cross(vector2f0);
      Vector3f vector3f1 = FastMath.cartesianZToSpherical(vector3f0);
      FastMath.isWithinEpsilon(0.0, (double) 2832.7917F);
      Vector3f vector3f2 = Vector3f.UNIT_Y;
      vector3f2.distanceSquared(vector3f0);
      vector3f1.add(vector3f2);
      FastMath.determinant(0.0, 0.0, (-1723.531507117), 2.0, (-1.5704753F), 1.0, 672.277158, (-1371.9219271), (-1633.12), Float.NaN, Float.NEGATIVE_INFINITY, (-930.801186386791), (-1132.2058965171586), 0.0F, 0.0F, 2.0);
      FastMath.atan(Float.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.cartesianToSpherical((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FastMath.determinant(0.0, (-1.0), 360.0, 360.0, (-2495.248324544373), (-2495.248324544373), 0.0, 1.0, (-1.0), 0.0, 0.0, 0.0, 0.0, 360.0, 0.0, 0.0);
      Vector3f vector3f0 = null;
      // Undeclared exception!
      try { 
        FastMath.cartesianToSpherical((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FastMath.nextRandomInt((-2213), (-1));
      FastMath.convertHalfToFloat((short)16);
      FastMath.isWithinEpsilon((double) 3.0994415E-5F, (double) (-2213));
      FastMath.log(Float.POSITIVE_INFINITY, 1885.0F);
      FastMath.copysign((-2213), (-4229.9883F));
      Vector3f vector3f0 = new Vector3f(Float.POSITIVE_INFINITY);
      FastMath.getCatmullRomP1toP2Length(vector3f0, vector3f0, vector3f0, vector3f0, 2436.6582F, 1803.983F, (-1.5707964F));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FastMath.saturate((-933.68054F));
      FastMath.atan2((-933.68054F), 0.15915494F);
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      FastMath.interpolateLinear((-582.8678F), vector3f0, vector3f0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FastMath.abs((-1644.6813F));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FastMath.atan2(0.001F, 0.001F);
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector3f vector3f0 = new Vector3f(vector2f0, 1.0F);
      FastMath.sphericalToCartesian(vector3f0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.sphericalToCartesian((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      FastMath.log(0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FastMath.fastInvSqrt(0.0F);
      float float0 = (-916.7F);
      FastMath.log(-0.0F, (-916.7F));
      FastMath.isWithinEpsilon((-965.0F), Float.NaN);
      FastMath.nextRandomFloat();
      Vector3f vector3f0 = null;
      // Undeclared exception!
      try { 
        FastMath.sphericalToCartesian((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FastMath.ceil(3211.37F);
      FastMath.atan(2626.722F);
      FastMath.clamp(3212.0F, 1.5704156F, 0.0F);
      FastMath.clamp(0.0F, 2626.722F, 3212.0F);
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      Vector3f vector3f1 = FastMath.cartesianZToSpherical(vector3f0);
      Vector3f vector3f2 = vector3f0.build(Float.POSITIVE_INFINITY);
      vector3f2.add(vector3f0);
      Vector3f vector3f3 = vector3f0.max(vector3f2);
      Vector3f vector3f4 = vector3f0.interpolate(vector3f1, Float.POSITIVE_INFINITY);
      FastMath.interpolateBezier(0.0F, vector3f0, vector3f0, vector3f0, vector3f0);
      vector3f4.equalsEpsilon(vector3f2);
      FastMath.abs(0.0F);
      vector3f0.dot(vector3f3);
      FastMath.sin2((-1.0F));
      FastMath.sqr((-1.5707964F));
      FastMath.extrapolateLinear((-371.0F), (-2968.6938F), 122.9718F);
      FastMath.atan((-1.5707964F));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FastMath.normalize(0.0F, 0.0F, 0.0F);
      FastMath.interpolateBezier(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      FastMath.normalize(0.0F, 0.0F, 0.0F);
      FastMath.isWithinEpsilon((-4214.12F), 0.0F, 0.0F);
      Vector2f vector2f0 = new Vector2f(2.0F, 0.0F);
      Vector3f vector3f0 = new Vector3f(vector2f0, 1.1920929E-7F);
      Vector3f vector3f1 = FastMath.sphericalToCartesian(vector3f0);
      FastMath.interpolateCatmullRom(0.0F, 0.0F, vector3f1, vector3f1, vector3f0, vector3f1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FastMath.fastInvSqrt((-6824.76F));
      FastMath.nearestPowerOfTwo((-4008));
      FastMath.tan(2146.16F);
      FastMath.pow(0.48568442F, (-793.0F));
      FastMath.tan((-1.0F));
      FastMath.interpolateLinear(1.0F, 394.0F, Float.POSITIVE_INFINITY);
      FastMath.log(57.295776F);
      FastMath.sqr((-2400.1472F));
      FastMath.atan(1526.114F);
      FastMath.log(706.0F);
      FastMath.tan(4.048227F);
      Vector3f vector3f0 = new Vector3f((-4008));
      Vector3f vector3f1 = vector3f0.inverse();
      vector3f0.divide((float) (-4008));
      FastMath.getCatmullRomP1toP2Length(vector3f0, vector3f0, vector3f0, vector3f0, (-2375.4812F), 0.48568442F, (-1.5707964F));
      Vector3f vector3f2 = FastMath.sphericalToCartesian(vector3f0);
      FastMath.getBezierP1toP2Length(vector3f2, vector3f0, vector3f1, vector3f0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.interpolateLinear(Float.POSITIVE_INFINITY, (Vector3f) null, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector3f[] vector3fArray0 = new Vector3f[6];
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Vector3f vector3f1 = FastMath.cartesianZToSpherical(vector3f0);
      vector3fArray0[0] = vector3f1;
      Vector3f vector3f2 = new Vector3f();
      vector3fArray0[1] = vector3f2;
      Vector3f vector3f3 = Vector3f.POSITIVE_INFINITY;
      vector3fArray0[2] = vector3f3;
      Quaternion quaternion0 = Quaternion.fromAngleAxis(0.0F, vector3f2);
      Vector3f vector3f4 = quaternion0.getRotationColumn(0);
      vector3fArray0[3] = vector3f4;
      Vector2f vector2f0 = new Vector2f(Float.POSITIVE_INFINITY, 1.5707963F);
      Vector2f vector2f1 = Vector2f.UNIT_XY;
      Vector2f vector2f2 = Vector2f.interpolate(vector2f0, vector2f1, 0.0F);
      Vector3f vector3f5 = new Vector3f(vector2f2, 0.0F);
      vector3fArray0[4] = vector3f5;
      Vector3f vector3f6 = FastMath.sphericalToCartesianZ(vector3f3);
      vector3fArray0[5] = vector3f6;
      Quaternion quaternion1 = Quaternion.fromAxes(vector3fArray0);
      Vector3f vector3f7 = quaternion1.mult(vector3f4);
      Vector3f vector3f8 = FastMath.interpolateCatmullRom(441.1F, 441.1F, vector3f7, vector3f7, vector3f3, vector3f2);
      FastMath.interpolateLinear(441.1F, vector3f8, vector3f3);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FastMath.pow((-3699.111F), (-3699.111F));
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Vector3f vector3f1 = FastMath.cartesianToSpherical(vector3f0);
      Vector3f vector3f2 = FastMath.cartesianZToSpherical(vector3f0);
      Vector3f vector3f3 = vector3f2.build(Float.NEGATIVE_INFINITY);
      Vector3f vector3f4 = vector3f2.add(vector3f0);
      Vector3f vector3f5 = vector3f4.max(vector3f3);
      Vector3f vector3f6 = vector3f1.interpolate(vector3f0, Float.NaN);
      Vector3f vector3f7 = FastMath.interpolateBezier(Float.NEGATIVE_INFINITY, vector3f1, vector3f3, vector3f1, vector3f1);
      FastMath.convertHalfToFloat((short)32759);
      Vector3f vector3f8 = Vector3f.UNIT_XYZ;
      Vector3f vector3f9 = FastMath.interpolateCatmullRom(Float.NEGATIVE_INFINITY, (-1.5707964F), vector3f4, vector3f7, vector3f6, vector3f7);
      FastMath.getBezierP1toP2Length(vector3f6, vector3f9, vector3f7, vector3f5);
      FastMath.isWithinEpsilon((double) (-3699.111F), (double) Float.NaN);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      FastMath.cartesianZToSpherical(vector3f0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float float0 = 0.0F;
      Vector3f vector3f0 = Vector3f.NAN;
      Vector3f vector3f1 = FastMath.interpolateLinear(3.1415927F, vector3f0, vector3f0);
      Vector3f vector3f2 = FastMath.computeNormal(vector3f1, vector3f1, vector3f1);
      Vector3f vector3f3 = new Vector3f(3451.0F, Float.NaN, 1.0F);
      Vector3f vector3f4 = vector3f2.max(vector3f3);
      Vector3f vector3f5 = FastMath.cartesianZToSpherical(vector3f2);
      vector3f0.angleBetween(vector3f2);
      Vector3f vector3f6 = vector3f2.divide((-1.5707964F));
      vector3f1.scale(Float.NaN);
      vector3f6.toString();
      vector3f5.add(vector3f2);
      vector3f5.equalsEpsilon(vector3f4, -0.0F);
      vector3f0.isUnitVector();
      // Undeclared exception!
      try { 
        vector3f1.get((-390));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must be either 0, 1 or 2
         //
         verifyException("org.saintandreas.math.Vector3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FastMath.sin2((-1501.9972F));
      FastMath.reduceSinAngle((-1501.9972F));
      FastMath.invSqrt(820.851F);
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector2f vector2f1 = Vector2f.interpolate(vector2f0, vector2f0, 984.3977F);
      vector2f1.smallestAngleBetween(vector2f0);
      vector2f0.smallestAngleBetween(vector2f1);
      Vector2f vector2f2 = vector2f0.build(984.3977F);
      vector2f0.equalsEpsilon(vector2f2, 0.0F);
      vector2f2.scaleAdd((-882.32F), vector2f0);
      FastMath.pointInsideTriangle(vector2f2, vector2f0, vector2f2, vector2f2);
      FastMath.clamp(1, 0.0F, 1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FastMath.nextRandomInt((-3387), (-3387));
      FastMath.invSqrt(1.5F);
      FastMath.sign((-3387));
      FastMath.copysign((-1), (-3387));
      FastMath.isWithinEpsilon((double) (-3387), (double) 1.5F, (double) 1.5F);
      FastMath.asin((-3387));
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector2f vector2f1 = new Vector2f();
      Vector2f vector2f2 = Vector2f.interpolate(vector2f0, vector2f1, (float) (-3387));
      FastMath.counterClockwise(vector2f2, vector2f2, vector2f1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FastMath.interpolateCatmullRom(2584.0F, 2584.0F, 2584.0F, 4623.8022F, 0.7853982F, 0.1F);
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      Vector3f vector3f1 = FastMath.interpolateCatmullRom(Float.POSITIVE_INFINITY, 0.7853982F, vector3f0, vector3f0, vector3f0, vector3f0);
      vector3f1.equalsEpsilon(vector3f0);
      Vector3f vector3f2 = vector3f0.scaleAdd(0.1F, vector3f1);
      vector3f2.isValid();
      vector3f1.length();
      vector3f1.cross(vector3f0);
      Vector3f vector3f3 = vector3f0.project(vector3f1);
      Vector3f vector3f4 = FastMath.interpolateLinear((-3.20978162E17F), vector3f0, vector3f0);
      FastMath.nearestPowerOfTwo(0);
      FastMath.acos((-117.43785F));
      vector3f1.mult(vector3f3);
      FastMath.sqrt((-3000.0322F));
      FastMath.asin(Float.NaN);
      FastMath.ceil(0.0F);
      Vector3f vector3f5 = FastMath.sphericalToCartesian(vector3f1);
      FastMath.sqrt((-749.814F));
      FastMath.interpolateBezier(Float.NaN, vector3f0, vector3f5, vector3f4, vector3f2);
      vector3f5.project(vector3f0);
      FastMath.determinant(0.0, 0.0, 0, (-749.814F), 3.141592653589793, 1.0, (-3188.331), 0.0, Float.NaN, Float.NaN, 0.0F, Float.NaN, Float.NaN, 3401.8, (-9.5617589442613), (-912.4124252));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FastMath.acos((-494.5F));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.pointInsideTriangle((Vector2f) null, (Vector2f) null, (Vector2f) null, (Vector2f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      float float0 = 0.7853982F;
      FastMath.sign(0.7853982F);
      FastMath.extrapolateLinear((-1660.9F), 0.7853982F, 0.7853982F);
      float float1 = 0.0F;
      FastMath.sin(0.0F);
      FastMath.tan(651.61456F);
      // Undeclared exception!
      try { 
        FastMath.pointInsideTriangle((Vector2f) null, (Vector2f) null, (Vector2f) null, (Vector2f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FastMath.sign(2265.4912F);
      Vector3f vector3f0 = new Vector3f(2577.508F);
      Vector3f vector3f1 = Vector3f.ZERO;
      Vector3f vector3f2 = vector3f1.inverse();
      Vector3f vector3f3 = vector3f1.divide(vector3f0);
      FastMath.getBezierP1toP2Length(vector3f0, vector3f0, vector3f1, vector3f1);
      vector3f1.angleBetween(vector3f0);
      FastMath.isWithinEpsilon((-2332.96389689), (double) 2577.508F, (-1.0));
      FastMath.tan(4464.374F);
      vector3f0.subtract(vector3f1);
      FastMath.getCatmullRomP1toP2Length(vector3f0, vector3f2, vector3f2, vector3f1, 645.0F, (-747.0F), 0.0F);
      FastMath.reduceSinAngle(Float.POSITIVE_INFINITY);
      FastMath.saturate(2265.4912F);
      Vector3f vector3f4 = Vector3f.UNIT_XYZ;
      Vector2f vector2f0 = new Vector2f(1685.9F);
      Vector2f vector2f1 = Vector2f.interpolate(vector2f0, vector2f0, 3.0F);
      Vector3f vector3f5 = new Vector3f(vector2f1, (-1246.42F));
      Vector3f vector3f6 = FastMath.interpolateLinear(2577.508F, vector3f4, vector3f5);
      FastMath.getCatmullRomP1toP2Length(vector3f3, vector3f3, vector3f1, vector3f6, (-3286.1143F), (-618.9658F), Float.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FastMath.isWithinEpsilon((-2927.375F), (-2927.375F), (-2927.375F));
      Vector2f vector2f0 = new Vector2f((-2927.375F), (-1607.9288F));
      vector2f0.isUnitVector();
      Vector3f vector3f0 = new Vector3f(vector2f0);
      Vector2f vector2f1 = new Vector2f((-2927.375F), (-2610.0F));
      Vector3f vector3f1 = vector2f0.cross(vector2f1);
      Vector3f vector3f2 = vector3f0.min(vector3f1);
      Vector3f vector3f3 = Vector3f.NAN;
      Vector3f vector3f4 = new Vector3f(vector2f0, 0.0F);
      vector3f0.get(0);
      vector2f0.equalsEpsilon(vector2f1, (-1605.2F));
      vector3f0.angleBetween(vector3f4);
      vector3f0.mult(vector3f3);
      FastMath.getBezierP1toP2Length(vector3f0, vector3f0, vector3f0, vector3f0);
      FastMath.counterClockwise(vector2f0, vector2f0, vector2f0);
      FastMath.sin(3.1415927F);
      FastMath.sphericalToCartesianZ(vector3f0);
      FastMath.abs(0.0F);
      Matrix3f matrix3f0 = new Matrix3f(0.01232852F, vector3f2);
      Quaternion quaternion0 = Quaternion.fromMatrix3f(matrix3f0);
      // Undeclared exception!
      try { 
        quaternion0.getRotationColumn((-2546));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.interpolateBezier(0.73999983F, (Vector3f) null, (Vector3f) null, (Vector3f) null, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      FastMath.interpolateLinear(1.0F, vector3f0, vector3f0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      FastMath.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FastMath.sign(256);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FastMath.isPowerOfTwo(2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FastMath.atan((-1283.791F));
      FastMath.tan(0.0F);
      float float0 = 0.5F;
      Vector3f vector3f0 = new Vector3f(0.5F);
      Vector3f vector3f1 = Vector3f.ZERO;
      vector3f1.get(0);
      vector3f1.distanceSquared(vector3f0);
      vector3f0.angleBetween(vector3f1);
      Vector3f vector3f2 = FastMath.sphericalToCartesian(vector3f0);
      FastMath.computeNormal(vector3f0, vector3f2, vector3f0);
      // Undeclared exception!
      try { 
        FloatBuffer.wrap((float[]) null, 0, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapFloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FastMath.acos(0.93999964F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FastMath.sqr((-1.5707964F));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      Vector3f vector3f1 = Vector3f.UNIT_Y;
      vector3f0.distance(vector3f1);
      floatArray0[1] = Float.NEGATIVE_INFINITY;
      vector3f0.build(floatArray0);
      floatArray0[2] = 472.07388F;
      vector3f0.isValid();
      floatArray0[3] = Float.NEGATIVE_INFINITY;
      floatArray0[4] = 1041.0F;
      floatArray0[5] = 472.07388F;
      Vector3f vector3f2 = vector3f0.build(floatArray0);
      Vector3f vector3f3 = FastMath.interpolateCatmullRom(472.07388F, 472.07388F, vector3f0, vector3f0, vector3f0, vector3f0);
      vector3f3.mult(Float.NEGATIVE_INFINITY);
      vector3f0.toString();
      FastMath.getBezierP1toP2Length(vector3f3, vector3f3, vector3f3, vector3f3);
      Vector3f vector3f4 = FastMath.computeNormal(vector3f2, vector3f1, vector3f2);
      FastMath.extrapolateLinear(1.0E-4F, 0.0F, 1083.0F);
      FastMath.interpolateBezier(263.4F, vector3f0, vector3f4, vector3f0, vector3f4);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      FastMath.computeNormal(vector3f0, vector3f0, vector3f0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      FastMath.copysign(0.0F, Float.NEGATIVE_INFINITY);
      FastMath.interpolateCatmullRom(0.0F, Float.NEGATIVE_INFINITY, (-1485.5283F), (-3907.7578F), (-1485.5283F), (-3907.7578F));
      FastMath.convertFloatToHalf(1.0F);
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      FastMath.isPowerOfTwo((short)15360);
      FastMath.interpolateLinear((-1.0F), vector3f0, vector3f0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FastMath.convertHalfToFloat((short)0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FastMath.interpolateCatmullRom((-515.0F), (-515.0F), (-1735.1072F), (-515.0F), (-1735.1072F), (-2587.0F));
      FastMath.isWithinEpsilon((-515.0F), (-1.46370707E14F));
      FastMath.convertHalfToFloat((short)0);
      FastMath.isWithinEpsilon((-189.98838698), 3.141592653589793);
      FastMath.reduceSinAngle((-515.0F));
      FastMath.atan((-2587.0F));
      FastMath.copysign(-0.0F, (-515.0F));
      Vector3f vector3f0 = Vector3f.ZERO;
      Vector3f vector3f1 = vector3f0.normalize();
      vector3f1.negate();
      vector3f1.dot(vector3f0);
      vector3f0.equalsEpsilon(vector3f1, -0.0F);
      FastMath.interpolateBezier((float) (short)0, vector3f0, vector3f0, vector3f0, vector3f0);
      vector3f0.isUnitVector();
      FastMath.isWithinEpsilon(1376.766251610646, 176.3466965672657, (double) 0.0F);
      FastMath.isWithinEpsilon((-880.18F), (-3746.51F), 5.96046E-8F);
      FastMath.asin((-3746.51F));
      FastMath.determinant(0.0, 0.0, Float.NaN, Float.NaN, 0.0, Float.NaN, 1.0E-4, 0.0F, 3336.047, (-3169.1867448234), 1.0E-4, 0.0, (-2587.0F), 2809.22936907, 360.0, (-551.1638504));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      FastMath.normalize((short) (-30071), Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector2f vector2f1 = vector2f0.build(426.64352F);
      vector2f1.interpolate(vector2f0, 0.0F);
      vector2f1.add((-2966.8262F));
      vector2f0.distanceSquared(vector2f1);
      float float0 = 1.1920929E-7F;
      Vector2f.interpolate(vector2f0, vector2f0, 0.0F);
      Vector2f vector2f2 = null;
      // Undeclared exception!
      try { 
        vector2f0.scaleAdd(0.0F, (Vector2f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FastMath.nextRandomInt();
      FastMath.interpolateCatmullRom((float) 0, 65504.0F, (-3031.0F), 1252.011F, 789.82F, (-59.37F));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f();
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      Quaternion quaternion0 = Quaternion.ZERO;
      Vector3f vector3f1 = quaternion0.mult(vector3f0);
      vector3f0.project(vector3f1);
      vector3f0.toString();
      floatArray0[2] = 0.0F;
      vector3f0.build(floatArray0);
      FastMath.interpolateLinear(0.0F, vector3f0, vector3f0);
      FastMath.log(1828.0F);
      vector3f0.build(floatArray0);
      FastMath.sin2((-1367.0703F));
      FastMath.convertHalfToFloat((short) (-1004));
      FastMath.atan(0.0F);
      FastMath.cos2(0.0F);
      FastMath.extrapolateLinear(Float.NaN, 0.0F, 0.0F);
      FastMath.clamp(0.0F, (short) (-1004), 0.0F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      // Undeclared exception!
      FastMath.normalize((short) (-30071), 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = (-725);
      FastMath.sign((-725));
      FastMath.ceil((-1198.6F));
      float float0 = Float.NEGATIVE_INFINITY;
      // Undeclared exception!
      FastMath.normalize((-725), (-1198.6F), Float.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      FastMath.cartesianZToSpherical(vector3f0);
      FastMath.normalize(Float.NEGATIVE_INFINITY, 208.971F, Float.NEGATIVE_INFINITY);
      FastMath.invSqrt(Float.POSITIVE_INFINITY);
      FastMath.cos(0.7999998F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FastMath.nearestPowerOfTwo(2139095040);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FastMath.pow((-3699.111F), (-3699.111F));
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Vector3f vector3f1 = FastMath.cartesianToSpherical(vector3f0);
      vector3f1.inverse();
      FastMath.extrapolateLinear((-0.63661975F), 0.0F, 1363.226F);
      FastMath.nextRandomInt((-1750), 64);
      FastMath.atan2((-2196.61F), 0.8799997F);
      FastMath.atan((-1750));
      System.setCurrentTimeMillis((-1333L));
      FastMath.convertFloatToHalf((-2700.48F));
      FastMath.isPowerOfTwo(0);
      FastMath.sign(Float.POSITIVE_INFINITY);
      FastMath.fastInvSqrt(0.7599998F);
      FastMath.atan(1523.103F);
      FastMath.acos((-2700.48F));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f();
      FastMath.normalize(0.0F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FastMath.abs(3.1415927F);
      FastMath.determinant(1922.76518976687, 3.1415927F, 3.1415927F, 3.1415927F, 3.1415927F, 1.5707963267948966, 1922.76518976687, 1.5707963267948966, 2213.0000309944153, (-275.784805836), 1949.208792916, 3.1415927F, 1.0, 1.0, 2213.0000309944153, 1949.208792916);
      Vector3f vector3f0 = Vector3f.UNIT_X;
      Vector3f vector3f1 = FastMath.cartesianToSpherical(vector3f0);
      vector3f1.cross(vector3f0);
      vector3f0.dot(vector3f1);
      FastMath.cartesianToSpherical(vector3f0);
      FastMath.fastInvSqrt(1.0F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FastMath.floor(1276.8268F);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FastMath.isPowerOfTwo(76);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FastMath.nextRandomFloat();
      FastMath.cos2(0.0F);
      FastMath.cos(0.0F);
      FastMath.nearestPowerOfTwo((-253));
      FastMath.pow(1.0F, 2604.0654F);
      FastMath.cos2(0.0F);
      FastMath.floor(1.0F);
      FastMath.determinant(0.0F, 0.0F, 2604.0654F, 1.0E-4, 1322.68873214041, 0.0, 1.0F, 0, 1371.0, 0.0F, 0.0F, 2.220446049250313E-16, 0.0F, (-1230.466743686978), 670.62795789, 0.0);
      FastMath.cos2(0.0F);
      FastMath.sqrt((-253));
      FastMath.isPowerOfTwo(102);
      FastMath.normalize((-1026.015F), 0.0F, 486.179F);
      Vector3f vector3f0 = new Vector3f(0, (-2901.06F), 1.0F);
      FastMath.extrapolateLinear(0.0F, vector3f0, vector3f0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FastMath.convertFloatToHalf(65504.0F);
      FastMath.isPowerOfTwo((short)31743);
      FastMath.sign((float) (short)31743);
      FastMath.fastInvSqrt((-521.33F));
      FastMath.atan(195.0F);
      FastMath.acos(0.40000004F);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FastMath.convertFloatToHalf((-564.56854F));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      FastMath.convertFloatToHalf(1.0F);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.ZERO;
      Vector2f vector2f1 = Vector2f.UNIT_X;
      FastMath.pointInsideTriangle(vector2f1, vector2f1, vector2f1, vector2f0);
      FastMath.pointInsideTriangle(vector2f1, vector2f1, vector2f1, vector2f1);
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      FastMath.getCatmullRomP1toP2Length(vector3f0, vector3f0, vector3f0, vector3f0, (-3835.6619F), 1.0F, (-3835.6619F));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Vector3f vector3f1 = FastMath.cartesianToSpherical(vector3f0);
      FastMath.cartesianZToSpherical(vector3f1);
      FastMath.convertFloatToHalf(Float.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FastMath.cos2(1.1920929E-7F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      FastMath.getBezierP1toP2Length(vector3f0, vector3f0, vector3f0, vector3f0);
      FastMath.getCatmullRomP1toP2Length(vector3f0, vector3f0, vector3f0, vector3f0, 0.0F, (-2197.02F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      FastMath.sin2(Float.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FastMath.nextRandomInt();
      FastMath.nextRandomInt(0, 0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      FastMath.getCatmullRomP1toP2Length(vector3f0, vector3f0, vector3f0, vector3f0, Float.NaN, Float.NaN, Float.NaN);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FastMath.exp(2228.634F);
      FastMath.cos2((-3573.8F));
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Vector2f vector2f0 = new Vector2f(Float.POSITIVE_INFINITY, 0.0F);
      Vector3f vector3f1 = new Vector3f(vector2f0, (-3573.8F));
      vector3f1.lengthSquared();
      Vector3f vector3f2 = vector3f0.divide(vector3f1);
      Vector3f vector3f3 = Vector3f.UNIT_XYZ;
      vector3f2.isUnitVector();
      vector3f3.equalsEpsilon(vector3f0, (-286.355F));
      vector3f2.lengthSquared();
      vector3f0.angleBetween(vector3f3);
      vector3f0.normalize();
      FastMath.cartesianToSpherical(vector3f0);
      FastMath.convertFloatToHalf((-1368.2598F));
      FastMath.ceil(Float.POSITIVE_INFINITY);
      FastMath.nextRandomInt((int) (short) (-6824), (-399));
      Vector3f vector3f4 = new Vector3f(0.0F, 0.0F, 0.0F);
      vector3f2.subtract(vector3f4);
      Vector3f vector3f5 = Vector3f.UNIT_XYZ;
      FastMath.getCatmullRomP1toP2Length(vector3f2, vector3f1, vector3f3, vector3f5, 0.0F, 2.0F, 0.0F);
      FastMath.atan2((-3044.515F), 1.0F);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FastMath.acos(1116.679F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      FastMath.cartesianZToSpherical(vector3f0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      float float0 = FastMath.INV_TWO_PI;
      FastMath.sqr((-1.0F));
      FastMath.sign(0);
      Vector2f vector2f0 = new Vector2f(2973.5F);
      Vector2f vector2f1 = Vector2f.UNIT_XY;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-1.0F);
      Vector2f vector2f2 = vector2f0.build(floatArray0);
      FastMath.pointInsideTriangle(vector2f1, vector2f0, vector2f0, vector2f2);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FastMath.sign((-1073741823));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FastMath.nextRandomInt();
      FastMath.sign(0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FastMath.ceil(2620.9F);
      FastMath.invSqrt(0.1F);
      FastMath.nextRandomFloat();
      FastMath.sign((-1819));
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      vector3f0.inverse();
      Vector3f vector3f1 = FastMath.interpolateBezier(0.1F, vector3f0, vector3f0, vector3f0, vector3f0);
      FastMath.nextRandomFloat();
      FastMath.extrapolateLinear((float) (-1819), 2621.0F, -0.0F);
      Vector3f vector3f2 = new Vector3f();
      vector3f1.cross(vector3f2);
      // Undeclared exception!
      try { 
        vector3f2.distanceSquared((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      Vector3f vector3f1 = FastMath.sphericalToCartesian(vector3f0);
      FastMath.interpolateCatmullRom(2139.0F, 0.0F, vector3f0, vector3f0, vector3f0, vector3f1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      FastMath.interpolateCatmullRom(Float.NaN, Float.NaN, vector3f0, vector3f0, vector3f0, vector3f0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Vector3f vector3f1 = FastMath.cartesianZToSpherical(vector3f0);
      FastMath.interpolateLinear((-1.5707964F), vector3f0, vector3f1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FastMath.ceil(3211.37F);
      FastMath.atan(2626.722F);
      FastMath.clamp(3212.0F, 1.5704156F, 0.0F);
      FastMath.clamp(0.0F, 2626.722F, 3212.0F);
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Vector3f vector3f1 = FastMath.cartesianZToSpherical(vector3f0);
      Vector3f vector3f2 = vector3f0.build(1.0F);
      vector3f2.add(vector3f0);
      Vector3f vector3f3 = vector3f0.max(vector3f2);
      Vector3f vector3f4 = vector3f0.interpolate(vector3f1, 1.0F);
      FastMath.interpolateBezier(0.0F, vector3f0, vector3f0, vector3f0, vector3f0);
      vector3f4.equalsEpsilon(vector3f2);
      FastMath.abs(0.0F);
      vector3f0.dot(vector3f3);
      FastMath.isWithinEpsilon(0.83999974F, 1.0F, 0.46F);
      FastMath.sqrt((-1883.5F));
      float float0 = FastMath.PI;
      FastMath.copysign(1.1920929E-7F, 1.0E-4F);
      FastMath.convertHalfToFloat((short) (-3385));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector2f vector2f1 = Vector2f.UNIT_Y;
      FastMath.counterClockwise(vector2f0, vector2f0, vector2f1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FastMath.saturate((-1.5707964F));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      FastMath.interpolateLinear(1.0F, vector3f0, vector3f0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_X;
      Vector2f vector2f1 = new Vector2f();
      FastMath.pointInsideTriangle(vector2f0, vector2f0, vector2f1, vector2f1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      FastMath.cartesianToSpherical(vector3f0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector2f vector2f1 = Vector2f.UNIT_XY;
      FastMath.pointInsideTriangle(vector2f0, vector2f0, vector2f0, vector2f1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FastMath.sign(173);
      FastMath.interpolateLinear((float) 1, 4747.136F, (float) 173);
      FastMath.extrapolateLinear(0.0F, 0.0F, (-1376.1431F));
      FastMath.nextRandomInt(173, 173);
      FastMath.atan2(0.0F, 173);
      FastMath.atan((-3996.3372F));
      System.setCurrentTimeMillis(1);
      FastMath.convertFloatToHalf(0.0F);
      FastMath.isPowerOfTwo(32768);
      FastMath.sign((-1.5705462F));
      FastMath.fastInvSqrt(1523.103F);
      FastMath.atan(0.0F);
      FastMath.acos(-0.0F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      FastMath.tan(Float.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FastMath.pow((-517.69F), (-517.69F));
      FastMath.copysign(Float.NaN, (-517.69F));
      FastMath.sqr((-517.69F));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      FastMath.interpolateLinear(Float.NaN, vector3f0, vector3f0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FastMath.interpolateLinear(6.2831855F, 6.2831855F, 6.2831855F);
      Vector3f vector3f0 = Vector3f.ZERO;
      Vector3f vector3f1 = new Vector3f(6.2831855F, 6.2831855F, 0.0F);
      vector3f1.isUnitVector();
      Vector3f vector3f2 = vector3f0.max(vector3f1);
      Vector3f vector3f3 = vector3f1.scale(3.0F);
      Vector3f vector3f4 = FastMath.cartesianToSpherical(vector3f0);
      FastMath.getBezierP1toP2Length(vector3f4, vector3f0, vector3f4, vector3f0);
      Vector2f vector2f0 = Vector2f.ZERO;
      Vector2f vector2f1 = Vector2f.interpolate(vector2f0, vector2f0, 6.2831855F);
      vector2f0.add(vector2f1);
      vector2f0.distanceSquared(vector2f1);
      Vector2f vector2f2 = Vector2f.UNIT_X;
      Vector2f vector2f3 = Vector2f.interpolate(vector2f0, vector2f2, 0.0F);
      vector2f3.isUnitVector();
      FastMath.pointInsideTriangle(vector2f0, vector2f3, vector2f2, vector2f2);
      FastMath.nextRandomInt();
      vector3f2.toString();
      FastMath.clamp(0.0F, 6.2831855F, 3.0F);
      FastMath.pow(0.0F, 6.2831855F);
      FastMath.asin(0.1F);
      FastMath.isWithinEpsilon((double) 6.2831855F, 2374.42782);
      FastMath.interpolateLinear(3.0F, vector3f3, vector3f3);
      FastMath.atan2(0.0F, 6.2831855F);
      FastMath.copysign((-662.6F), (-1735.91F));
      FastMath.tan(0.0F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FastMath.pow(0.0F, 567.0F);
      FastMath.copysign(0.0F, 567.0F);
      FastMath.interpolateBezier(-0.0F, 3175.0F, 0.0F, 0.0F, 2.0F);
      FastMath.sqr(0.0F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FastMath.nextRandomFloat();
      Vector2f vector2f0 = new Vector2f();
      vector2f0.mult(0.56F);
      vector2f0.negate();
      Vector3f vector3f0 = new Vector3f(vector2f0);
      FastMath.convertHalfToFloat((short)31744);
      FastMath.atan(1175.2F);
      FastMath.sign(3952);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      FastMath.getBezierP1toP2Length(vector3f0, vector3f0, vector3f0, vector3f0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      FastMath.ceil(Float.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      float float0 = FastMath.INV_TWO_PI;
      FastMath.copysign(0.15915494F, 1.1920929E-7F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Vector2f vector2f0 = Vector2f.ZERO;
      vector2f0.length();
      Vector3f vector3f1 = new Vector3f(vector2f0, (-1.5707964F));
      vector3f0.equalsEpsilon(vector3f1, 2937.2163F);
      vector3f1.dot(vector3f0);
      Vector3f vector3f2 = FastMath.extrapolateLinear(1.0F, vector3f0, vector3f0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      vector3f1.build(floatArray0);
      vector3f0.scaleAdd((-2129.877F), vector3f2);
      Vector3f vector3f3 = FastMath.sphericalToCartesianZ(vector3f0);
      FastMath.ceil(1.0F);
      FastMath.getBezierP1toP2Length(vector3f1, vector3f2, vector3f3, vector3f1);
      FastMath.pointInsideTriangle(vector2f0, vector2f0, vector2f0, vector2f0);
      FastMath.isWithinEpsilon(0.0F, (-1014.0025F), 0.0F);
      FastMath.sqrt((-2128.877F));
      FastMath.ceil((-1014.0025F));
      FastMath.copysign((-1.718F), 1);
      FastMath.convertHalfToFloat((short) (-3385));
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      float float0 = FastMath.INV_TWO_PI;
      FastMath.sqr((-1.0F));
      FastMath.sign(1839);
      Vector2f vector2f0 = new Vector2f(2.0F);
      Vector2f vector2f1 = Vector2f.UNIT_XY;
      FastMath.pointInsideTriangle(vector2f0, vector2f0, vector2f0, vector2f1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FastMath.convertHalfToFloat((short)32757);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FastMath.nextRandomInt();
      FastMath.saturate(0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FastMath.pow(0.0F, 567.0F);
      FastMath.copysign(0.0F, 567.0F);
      Vector2f vector2f0 = new Vector2f();
      Vector3f vector3f0 = new Vector3f(vector2f0);
      Vector3f vector3f1 = new Vector3f();
      vector3f0.equalsEpsilon(vector3f1);
      FastMath.sqrt((-1516.2026F));
      vector3f1.dot(vector3f0);
      FastMath.isWithinEpsilon(2368.1446345179747, 360.0, 2832.791748046875);
      FastMath.sin2(1934.273F);
      FastMath.isWithinEpsilon((-4900.2F), -0.0F, 0.0F);
      FastMath.pow(0.0F, 0.0F);
      FastMath.log(1.1920929E-7F);
      FastMath.saturate(0.0F);
      FastMath.invSqrt(1.0F);
      FastMath.fastInvSqrt(0.0F);
      FastMath.exp((-571.6F));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FastMath.reduceSinAngle(2.0F);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FastMath.log(1583.64F);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FastMath.reduceSinAngle(419.55F);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FastMath.exp(2.0F);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FastMath.sign((-107));
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      FastMath.isWithinEpsilon(358.64852783075935, (double) 1.0F);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      FastMath.cartesianToSpherical(vector3f0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      FastMath.sin2(0.0F);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FastMath.invSqrt(149.3F);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FastMath.saturate(1235.7F);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FastMath.fastInvSqrt((-468.0F));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FastMath.pow((-3699.111F), (-3699.111F));
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Vector3f vector3f1 = FastMath.cartesianToSpherical(vector3f0);
      Vector3f vector3f2 = vector3f1.inverse();
      Vector3f vector3f3 = vector3f1.scale(Float.NEGATIVE_INFINITY);
      Vector3f vector3f4 = FastMath.sphericalToCartesianZ(vector3f1);
      Vector3f vector3f5 = Vector3f.NAN;
      vector3f5.isValid();
      vector3f4.subtract(vector3f3);
      vector3f0.distance(vector3f5);
      vector3f4.length();
      vector3f1.lengthSquared();
      FastMath.extrapolateLinear((-3699.111F), vector3f4, vector3f1);
      vector3f4.equalsEpsilon(vector3f5);
      FastMath.sqrt(0.0F);
      vector3f1.dot(vector3f2);
      FastMath.isWithinEpsilon((double) 0.0F, (double) (-3699.111F), 0.0);
      FastMath.sin2(0.0F);
      FastMath.isWithinEpsilon((-1207.9F), 783.405F, Float.NaN);
      FastMath.pow((-984.214F), 783.405F);
      FastMath.log((-1.5707964F));
      FastMath.saturate(0.0F);
      FastMath.invSqrt(Float.NaN);
      FastMath.fastInvSqrt(Float.NaN);
      FastMath.exp(0.0F);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FastMath.cos2((-3490.626F));
      FastMath.convertFloatToHalf((-0.9503503F));
      FastMath.abs((-3366.0F));
      FastMath.interpolateCatmullRom((float) (short) (-17510), 1.5707964F, (-988.3577F), 3.1415927F, 1.5707964F, 1.5707964F);
      FastMath.convertHalfToFloat((short) (-32767));
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      FastMath.getBezierP1toP2Length(vector3f0, vector3f0, vector3f0, vector3f0);
      boolean boolean0 = FastMath.isWithinEpsilon((double) (-3490.626F), (-2613.9826796147863));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      boolean boolean0 = FastMath.isWithinEpsilon(1.0F, 1.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Vector3f vector3f1 = FastMath.cartesianZToSpherical(vector3f0);
      assertEquals(1.5707963F, vector3f1.z, 0.01F);
      assertEquals(1.0F, vector3f1.x, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      Vector3f vector3f1 = FastMath.computeNormal(vector3f0, vector3f0, vector3f0);
      assertEquals(Float.NaN, vector3f1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      float float0 = FastMath.abs(2.0F);
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Vector3f vector3f1 = FastMath.sphericalToCartesianZ(vector3f0);
      assertEquals(0.0F, vector3f1.x, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Vector3f vector3f1 = FastMath.interpolateBezier(Float.NEGATIVE_INFINITY, vector3f0, vector3f0, vector3f0, vector3f0);
      assertEquals(Float.NaN, vector3f1.z, 0.01F);
      assertEquals(Float.NaN, vector3f1.y, 0.01F);
      assertEquals(Float.NaN, vector3f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      float float0 = FastMath.cos(1.0634979E7F);
      assertEquals((-0.9900489F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      Vector3f vector3f1 = FastMath.extrapolateLinear(Float.POSITIVE_INFINITY, vector3f0, vector3f0);
      assertEquals(Float.NaN, vector3f1.x, 0.01F);
      assertEquals(Float.NaN, vector3f1.y, 0.01F);
      assertEquals(Float.NaN, vector3f1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      Vector3f vector3f1 = Vector3f.ZERO;
      vector3f1.dot(vector3f0);
      Vector3f vector3f2 = FastMath.interpolateBezier(0.0F, vector3f0, vector3f0, vector3f0, vector3f0);
      float float0 = vector3f0.distance(vector3f2);
      assertEquals(0.0F, float0, 0.01F);
      
      vector3f1.cross(vector3f0);
      Vector3f vector3f3 = vector3f0.max(vector3f1);
      vector3f1.add(vector3f2);
      boolean boolean0 = vector3f1.equalsEpsilon(vector3f0);
      assertTrue(boolean0);
      
      Vector3f vector3f4 = vector3f0.normalize();
      Vector3f vector3f5 = FastMath.extrapolateLinear(0.0F, vector3f0, vector3f0);
      Vector3f vector3f6 = FastMath.sphericalToCartesianZ(vector3f3);
      assertNotSame(vector3f1, vector3f4);
      assertTrue(vector3f6.equals((Object)vector3f5));
      
      float float1 = FastMath.abs(0.0F);
      assertEquals(float1, float0, 0.01F);
      
      float float2 = FastMath.interpolateBezier(0.017453292F, 0.0F, 0.0F, 1.1920929E-7F, 3773.691F);
      assertEquals(0.020063117F, float2, 0.01F);
  }
}
