/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 19:18:57 GMT 2022
 */

package org.saintandreas.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.FloatBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.saintandreas.math.Matrix3f;
import org.saintandreas.math.Matrix4f;
import org.saintandreas.math.Quaternion;
import org.saintandreas.math.Vector2f;
import org.saintandreas.math.Vector3f;
import org.saintandreas.math.Vector4f;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Matrix4f_ESTest extends Matrix4f_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.ZERO;
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertNotNull(vector2f0);
      
      Vector2f vector2f1 = vector2f0.build(202.858F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(202.858F, vector2f1.getX(), 0.01F);
      assertEquals(202.858F, vector2f1.getY(), 0.01F);
      assertEquals(0.7853982F, vector2f1.getAngle(), 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(202.858F, vector2f1.x, 0.01F);
      assertEquals(202.858F, vector2f1.y, 0.01F);
      assertFalse(vector2f1.equals((Object)vector2f0));
      assertNotNull(vector2f1);
      assertNotSame(vector2f0, vector2f1);
      assertNotSame(vector2f1, vector2f0);
      
      Matrix4f matrix4f0 = Matrix4f.translation(vector2f1);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(202.858F, vector2f1.getX(), 0.01F);
      assertEquals(202.858F, vector2f1.getY(), 0.01F);
      assertEquals(0.7853982F, vector2f1.getAngle(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(202.858F, vector2f1.x, 0.01F);
      assertEquals(202.858F, vector2f1.y, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(202.858F, matrix4f0.m13, 0.01F);
      assertEquals(202.858F, matrix4f0.m03, 0.01F);
      assertFalse(vector2f0.equals((Object)vector2f1));
      assertFalse(vector2f1.equals((Object)vector2f0));
      assertNotNull(matrix4f0);
      assertNotSame(vector2f0, vector2f1);
      assertNotSame(vector2f1, vector2f0);
      
      boolean boolean0 = matrix4f0.isIdentity();
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(202.858F, vector2f1.getX(), 0.01F);
      assertEquals(202.858F, vector2f1.getY(), 0.01F);
      assertEquals(0.7853982F, vector2f1.getAngle(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(202.858F, vector2f1.x, 0.01F);
      assertEquals(202.858F, vector2f1.y, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(202.858F, matrix4f0.m13, 0.01F);
      assertEquals(202.858F, matrix4f0.m03, 0.01F);
      assertFalse(boolean0);
      assertFalse(vector2f0.equals((Object)vector2f1));
      assertFalse(vector2f1.equals((Object)vector2f0));
      assertNotSame(vector2f0, vector2f1);
      assertNotSame(vector2f1, vector2f0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1927.4F, 0.0F, (-692.0F), Float.NaN);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getW(), 0.01F);
      assertEquals(1927.4F, quaternion0.getX(), 0.01F);
      assertEquals((-692.0F), quaternion0.getZ(), 0.01F);
      assertEquals((-692.0F), quaternion0.z, 0.01F);
      assertEquals(1927.4F, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertNotNull(quaternion0);
      
      Matrix4f matrix4f0 = Matrix4f.rotation(quaternion0);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getW(), 0.01F);
      assertEquals(1927.4F, quaternion0.getX(), 0.01F);
      assertEquals((-692.0F), quaternion0.getZ(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertEquals((-692.0F), quaternion0.z, 0.01F);
      assertEquals(1927.4F, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = matrix4f0.isIdentity();
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getW(), 0.01F);
      assertEquals(1927.4F, quaternion0.getX(), 0.01F);
      assertEquals((-692.0F), quaternion0.getZ(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertEquals((-692.0F), quaternion0.z, 0.01F);
      assertEquals(1927.4F, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-498.75406F), (-0.99999964F), (-0.99999964F));
      assertEquals((-0.99999964F), vector3f0.getZ(), 0.01F);
      assertEquals((-498.75406F), vector3f0.getX(), 0.01F);
      assertEquals((-0.99999964F), vector3f0.getY(), 0.01F);
      assertEquals((-0.99999964F), vector3f0.z, 0.01F);
      assertEquals((-0.99999964F), vector3f0.y, 0.01F);
      assertEquals((-498.75406F), vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.fromAngleNormalAxis((-498.75406F), vector3f0);
      assertEquals((-0.99999964F), vector3f0.getZ(), 0.01F);
      assertEquals((-498.75406F), vector3f0.getX(), 0.01F);
      assertEquals((-0.99999964F), vector3f0.getY(), 0.01F);
      assertEquals(5.0585756E10F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-0.99999964F), vector3f0.z, 0.01F);
      assertEquals((-0.99999964F), vector3f0.y, 0.01F);
      assertEquals((-498.75406F), vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(861.24097F, matrix4f0.m02, 0.01F);
      assertEquals(859.8644F, matrix4f0.m20, 0.01F);
      assertEquals(861.24097F, matrix4f0.m10, 0.01F);
      assertEquals(859.8644F, matrix4f0.m01, 0.01F);
      assertEquals(429203.56F, matrix4f0.m00, 0.01F);
      assertEquals((-341.5779F), matrix4f0.m12, 0.01F);
      assertEquals(345.02872F, matrix4f0.m21, 0.01F);
      assertEquals(0.9999988F, matrix4f0.m11, 0.01F);
      assertEquals(0.9999988F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = matrix4f0.isIdentity();
      assertEquals((-0.99999964F), vector3f0.getZ(), 0.01F);
      assertEquals((-498.75406F), vector3f0.getX(), 0.01F);
      assertEquals((-0.99999964F), vector3f0.getY(), 0.01F);
      assertEquals(5.0585756E10F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-0.99999964F), vector3f0.z, 0.01F);
      assertEquals((-0.99999964F), vector3f0.y, 0.01F);
      assertEquals((-498.75406F), vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(861.24097F, matrix4f0.m02, 0.01F);
      assertEquals(859.8644F, matrix4f0.m20, 0.01F);
      assertEquals(861.24097F, matrix4f0.m10, 0.01F);
      assertEquals(859.8644F, matrix4f0.m01, 0.01F);
      assertEquals(429203.56F, matrix4f0.m00, 0.01F);
      assertEquals((-341.5779F), matrix4f0.m12, 0.01F);
      assertEquals(345.02872F, matrix4f0.m21, 0.01F);
      assertEquals(0.9999988F, matrix4f0.m11, 0.01F);
      assertEquals(0.9999988F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      assertEquals(1.5707964F, vector2f0.getAngle(), 0.01F);
      assertEquals(1.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(1.0F, vector2f0.y, 0.01F);
      assertNotNull(vector2f0);
      
      Matrix4f matrix4f1 = Matrix4f.translation(vector2f0);
      assertEquals(1.5707964F, vector2f0.getAngle(), 0.01F);
      assertEquals(1.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(1.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(1.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(1.0F, matrix4f1.m00, 0.01F);
      assertEquals(1.0F, matrix4f1.m11, 0.01F);
      assertEquals(1.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
      
      boolean boolean0 = matrix4f1.equals(matrix4f0);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.5707964F, vector2f0.getAngle(), 0.01F);
      assertEquals(1.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(1.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(1.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(1.0F, matrix4f1.m00, 0.01F);
      assertEquals(1.0F, matrix4f1.m11, 0.01F);
      assertEquals(1.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertFalse(boolean0);
      assertFalse(matrix4f0.equals((Object)matrix4f1));
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix3f matrix3f0 = new Matrix3f((-2112.8F), vector3f0);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.99999994F, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertNotNull(matrix3f0);
      
      Matrix4f matrix4f1 = matrix4f0.rotate(matrix3f0);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.99999994F, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertFalse(matrix4f1.isIdentity());
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals((-0.07890713F), matrix4f1.m00, 0.01F);
      assertEquals((-0.07890713F), matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals((-0.99688196F), matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(1.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.99688196F, matrix4f1.m01, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
      
      Matrix4f matrix4f2 = Matrix4f.rotation(matrix3f0);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.99999994F, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(1.0F, matrix4f2.determinant(), 0.01F);
      assertFalse(matrix4f2.isIdentity());
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(-0.0F, matrix4f2.m20, 0.01F);
      assertEquals(0.0F, matrix4f2.m31, 0.01F);
      assertEquals(0.0F, matrix4f2.m30, 0.01F);
      assertEquals(0.0F, matrix4f2.m02, 0.01F);
      assertEquals(0.0F, matrix4f2.m13, 0.01F);
      assertEquals(0.99688196F, matrix4f2.m01, 0.01F);
      assertEquals(-0.0F, matrix4f2.m12, 0.01F);
      assertEquals(0.0F, matrix4f2.m23, 0.01F);
      assertEquals(1.0F, matrix4f2.m22, 0.01F);
      assertEquals(1.0F, matrix4f2.m33, 0.01F);
      assertEquals((-0.99688196F), matrix4f2.m10, 0.01F);
      assertEquals(0.0F, matrix4f2.m21, 0.01F);
      assertEquals(0.0F, matrix4f2.m32, 0.01F);
      assertEquals((-0.07890713F), matrix4f2.m00, 0.01F);
      assertEquals((-0.07890713F), matrix4f2.m11, 0.01F);
      assertEquals(0.0F, matrix4f2.m03, 0.01F);
      assertFalse(matrix4f2.equals((Object)matrix4f0));
      assertFalse(matrix4f2.equals((Object)matrix4f1));
      assertNotNull(matrix4f2);
      assertNotSame(matrix4f2, matrix4f0);
      assertNotSame(matrix4f2, matrix4f1);
      
      boolean boolean0 = matrix4f2.equals(matrix4f1);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.99999994F, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertFalse(matrix4f1.isIdentity());
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(1.0F, matrix4f2.determinant(), 0.01F);
      assertFalse(matrix4f2.isIdentity());
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals((-0.07890713F), matrix4f1.m00, 0.01F);
      assertEquals((-0.07890713F), matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals((-0.99688196F), matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(1.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.99688196F, matrix4f1.m01, 0.01F);
      assertEquals(-0.0F, matrix4f2.m20, 0.01F);
      assertEquals(0.0F, matrix4f2.m31, 0.01F);
      assertEquals(0.0F, matrix4f2.m30, 0.01F);
      assertEquals(0.0F, matrix4f2.m02, 0.01F);
      assertEquals(0.0F, matrix4f2.m13, 0.01F);
      assertEquals(0.99688196F, matrix4f2.m01, 0.01F);
      assertEquals(-0.0F, matrix4f2.m12, 0.01F);
      assertEquals(0.0F, matrix4f2.m23, 0.01F);
      assertEquals(1.0F, matrix4f2.m22, 0.01F);
      assertEquals(1.0F, matrix4f2.m33, 0.01F);
      assertEquals((-0.99688196F), matrix4f2.m10, 0.01F);
      assertEquals(0.0F, matrix4f2.m21, 0.01F);
      assertEquals(0.0F, matrix4f2.m32, 0.01F);
      assertEquals((-0.07890713F), matrix4f2.m00, 0.01F);
      assertEquals((-0.07890713F), matrix4f2.m11, 0.01F);
      assertEquals(0.0F, matrix4f2.m03, 0.01F);
      assertFalse(boolean0);
      assertFalse(matrix4f0.equals((Object)matrix4f1));
      assertFalse(matrix4f0.equals((Object)matrix4f2));
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertFalse(matrix4f1.equals((Object)matrix4f2));
      assertFalse(matrix4f2.equals((Object)matrix4f0));
      assertFalse(matrix4f2.equals((Object)matrix4f1));
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f0, matrix4f2);
      assertNotSame(matrix4f1, matrix4f0);
      assertNotSame(matrix4f1, matrix4f2);
      assertNotSame(matrix4f2, matrix4f0);
      assertNotSame(matrix4f2, matrix4f1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = new Matrix4f(1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(1.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(1.0F, matrix4f1.m23, 0.01F);
      assertEquals(1.0F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m33, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      
      boolean boolean0 = matrix4f1.equals(matrix4f0);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(1.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(1.0F, matrix4f1.m23, 0.01F);
      assertEquals(1.0F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m33, 0.01F);
      assertFalse(boolean0);
      assertFalse(matrix4f0.equals((Object)matrix4f1));
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      
      Quaternion quaternion0 = Quaternion.fromAxes(vector3f0, vector3f0, vector3f0);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getX(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getW(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      
      Matrix4f matrix4f0 = Matrix4f.rotation(quaternion0);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getX(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getW(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getZ(), 0.01F);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = matrix4f0.scale((-5056.335F));
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getX(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getW(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getZ(), 0.01F);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertFalse(matrix4f1.isIdentity());
      assertEquals(Float.NaN, matrix4f1.determinant(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
      
      boolean boolean0 = matrix4f0.equals(matrix4f1);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getX(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getW(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getZ(), 0.01F);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertFalse(matrix4f1.isIdentity());
      assertEquals(Float.NaN, matrix4f1.determinant(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertFalse(boolean0);
      assertFalse(matrix4f0.equals((Object)matrix4f1));
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.perspective(Float.NaN, (-337.0441F), Float.NaN, 0.6666666F);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(-0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = matrix4f0.transpose();
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(-0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals((-1.0F), matrix4f1.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m22, 0.01F);
      assertEquals(-0.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m21, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
      
      boolean boolean0 = matrix4f0.equals(matrix4f1);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(-0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals((-1.0F), matrix4f1.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m22, 0.01F);
      assertEquals(-0.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m21, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertFalse(boolean0);
      assertFalse(matrix4f0.equals((Object)matrix4f1));
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles((-2.0F), (-3613.0F), 2.0949024E-6F);
      assertEquals(0.070787884F, quaternion0.getZ(), 0.01F);
      assertEquals(0.04545362F, quaternion0.getY(), 0.01F);
      assertEquals(0.8384882F, quaternion0.getX(), 0.01F);
      assertEquals((-0.538387F), quaternion0.getW(), 0.01F);
      assertEquals((-0.538387F), quaternion0.w, 0.01F);
      assertEquals(0.070787884F, quaternion0.z, 0.01F);
      assertEquals(0.8384882F, quaternion0.x, 0.01F);
      assertEquals(0.04545362F, quaternion0.y, 0.01F);
      assertNotNull(quaternion0);
      
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      assertEquals(0.070787884F, quaternion0.getZ(), 0.01F);
      assertEquals(0.04545362F, quaternion0.getY(), 0.01F);
      assertEquals(0.8384882F, quaternion0.getX(), 0.01F);
      assertEquals((-0.538387F), quaternion0.getW(), 0.01F);
      assertEquals(0.99999994F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-0.538387F), quaternion0.w, 0.01F);
      assertEquals(0.070787884F, quaternion0.z, 0.01F);
      assertEquals(0.8384882F, quaternion0.x, 0.01F);
      assertEquals(0.04545362F, quaternion0.y, 0.01F);
      assertEquals(0.90929747F, matrix4f0.m12, 0.01F);
      assertEquals(2.0936131E-6F, matrix4f0.m10, 0.01F);
      assertEquals((-0.89642715F), matrix4f0.m21, 0.01F);
      assertEquals(0.1524472F, matrix4f0.m01, 0.01F);
      assertEquals(0.9858461F, matrix4f0.m00, 0.01F);
      assertEquals(0.06976634F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals((-0.41614676F), matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.16765289F, matrix4f0.m20, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals((-0.41025698F), matrix4f0.m22, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = matrix4f0.transpose();
      assertEquals(0.070787884F, quaternion0.getZ(), 0.01F);
      assertEquals(0.04545362F, quaternion0.getY(), 0.01F);
      assertEquals(0.8384882F, quaternion0.getX(), 0.01F);
      assertEquals((-0.538387F), quaternion0.getW(), 0.01F);
      assertEquals(0.99999994F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertFalse(matrix4f1.isIdentity());
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertEquals((-0.538387F), quaternion0.w, 0.01F);
      assertEquals(0.070787884F, quaternion0.z, 0.01F);
      assertEquals(0.8384882F, quaternion0.x, 0.01F);
      assertEquals(0.04545362F, quaternion0.y, 0.01F);
      assertEquals(0.90929747F, matrix4f0.m12, 0.01F);
      assertEquals(2.0936131E-6F, matrix4f0.m10, 0.01F);
      assertEquals((-0.89642715F), matrix4f0.m21, 0.01F);
      assertEquals(0.1524472F, matrix4f0.m01, 0.01F);
      assertEquals(0.9858461F, matrix4f0.m00, 0.01F);
      assertEquals(0.06976634F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals((-0.41614676F), matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.16765289F, matrix4f0.m20, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals((-0.41025698F), matrix4f0.m22, 0.01F);
      assertEquals(0.9858461F, matrix4f1.m00, 0.01F);
      assertEquals(0.06976634F, matrix4f1.m20, 0.01F);
      assertEquals(0.16765289F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals((-0.41025698F), matrix4f1.m22, 0.01F);
      assertEquals(2.0936131E-6F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals((-0.41614676F), matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.90929747F, matrix4f1.m21, 0.01F);
      assertEquals((-0.89642715F), matrix4f1.m12, 0.01F);
      assertEquals(0.1524472F, matrix4f1.m10, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
      
      boolean boolean0 = matrix4f0.equals(matrix4f1);
      assertEquals(0.070787884F, quaternion0.getZ(), 0.01F);
      assertEquals(0.04545362F, quaternion0.getY(), 0.01F);
      assertEquals(0.8384882F, quaternion0.getX(), 0.01F);
      assertEquals((-0.538387F), quaternion0.getW(), 0.01F);
      assertEquals(0.99999994F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertFalse(matrix4f1.isIdentity());
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertEquals((-0.538387F), quaternion0.w, 0.01F);
      assertEquals(0.070787884F, quaternion0.z, 0.01F);
      assertEquals(0.8384882F, quaternion0.x, 0.01F);
      assertEquals(0.04545362F, quaternion0.y, 0.01F);
      assertEquals(0.90929747F, matrix4f0.m12, 0.01F);
      assertEquals(2.0936131E-6F, matrix4f0.m10, 0.01F);
      assertEquals((-0.89642715F), matrix4f0.m21, 0.01F);
      assertEquals(0.1524472F, matrix4f0.m01, 0.01F);
      assertEquals(0.9858461F, matrix4f0.m00, 0.01F);
      assertEquals(0.06976634F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals((-0.41614676F), matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.16765289F, matrix4f0.m20, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals((-0.41025698F), matrix4f0.m22, 0.01F);
      assertEquals(0.9858461F, matrix4f1.m00, 0.01F);
      assertEquals(0.06976634F, matrix4f1.m20, 0.01F);
      assertEquals(0.16765289F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals((-0.41025698F), matrix4f1.m22, 0.01F);
      assertEquals(2.0936131E-6F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals((-0.41614676F), matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.90929747F, matrix4f1.m21, 0.01F);
      assertEquals((-0.89642715F), matrix4f1.m12, 0.01F);
      assertEquals(0.1524472F, matrix4f1.m10, 0.01F);
      assertFalse(boolean0);
      assertFalse(matrix4f0.equals((Object)matrix4f1));
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(20.885452F, 20.885452F, 20.885452F, 20.885452F);
      assertEquals(20.885452F, quaternion0.getZ(), 0.01F);
      assertEquals(20.885452F, quaternion0.getW(), 0.01F);
      assertEquals(20.885452F, quaternion0.getX(), 0.01F);
      assertEquals(20.885452F, quaternion0.getY(), 0.01F);
      assertEquals(20.885452F, quaternion0.y, 0.01F);
      assertEquals(20.885452F, quaternion0.z, 0.01F);
      assertEquals(20.885452F, quaternion0.w, 0.01F);
      assertEquals(20.885452F, quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(1.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = Matrix4f.rotation(quaternion0);
      assertEquals(20.885452F, quaternion0.getZ(), 0.01F);
      assertEquals(20.885452F, quaternion0.getW(), 0.01F);
      assertEquals(20.885452F, quaternion0.getX(), 0.01F);
      assertEquals(20.885452F, quaternion0.getY(), 0.01F);
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(20.885452F, quaternion0.y, 0.01F);
      assertEquals(20.885452F, quaternion0.z, 0.01F);
      assertEquals(20.885452F, quaternion0.w, 0.01F);
      assertEquals(20.885452F, quaternion0.x, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(1.0F, matrix4f1.m10, 0.01F);
      assertEquals(1.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(1.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
      
      boolean boolean0 = matrix4f1.equals(matrix4f0);
      assertEquals(20.885452F, quaternion0.getZ(), 0.01F);
      assertEquals(20.885452F, quaternion0.getW(), 0.01F);
      assertEquals(20.885452F, quaternion0.getX(), 0.01F);
      assertEquals(20.885452F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(20.885452F, quaternion0.y, 0.01F);
      assertEquals(20.885452F, quaternion0.z, 0.01F);
      assertEquals(20.885452F, quaternion0.w, 0.01F);
      assertEquals(20.885452F, quaternion0.x, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(1.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(1.0F, matrix4f1.m10, 0.01F);
      assertEquals(1.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(1.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertFalse(boolean0);
      assertFalse(matrix4f0.equals((Object)matrix4f1));
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[][] floatArray0 = new float[4][6];
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be of size 16.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[][] floatArray0 = new float[7][4];
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be of size 16.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[17];
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.rotation(808.7533F, vector3f0);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0000001F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals((-0.20534134F), matrix4f0.m00, 0.01F);
      assertEquals((-0.20534134F), matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals((-0.9786905F), matrix4f0.m02, 0.01F);
      assertEquals(0.9786905F, matrix4f0.m20, 0.01F);
      assertNotNull(matrix4f0);
      
      // Undeclared exception!
      try { 
        matrix4f0.get(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be of size 16.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[] floatArray0 = new float[18];
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be of size 16.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertNotNull(matrix4f0);
      
      float[] floatArray0 = new float[21];
      matrix4f0.fillFloatArray(floatArray0, false);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(21, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(446);
      assertTrue(floatBuffer0.hasRemaining());
      assertFalse(floatBuffer0.isDirect());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(446, floatBuffer0.capacity());
      assertEquals(446, floatBuffer0.remaining());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=446 cap=446]", floatBuffer0.toString());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(446, floatBuffer0.limit());
      assertEquals(0, floatBuffer0.position());
      assertNotNull(floatBuffer0);
      
      matrix4f0.fillFloatBuffer(floatBuffer0);
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertTrue(floatBuffer0.hasRemaining());
      assertFalse(floatBuffer0.isDirect());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(446, floatBuffer0.capacity());
      assertEquals(430, floatBuffer0.remaining());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals("java.nio.HeapFloatBuffer[pos=16 lim=446 cap=446]", floatBuffer0.toString());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(446, floatBuffer0.limit());
      assertEquals(16, floatBuffer0.position());
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      float[] floatArray0 = new float[15];
      // Undeclared exception!
      try { 
        matrix4f0.fillFloatArray(floatArray0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 15 out of bounds for length 15
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(1.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      float[] floatArray0 = new float[16];
      matrix4f0.fillFloatArray(floatArray0);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(1.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(16, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[][] floatArray1 = new float[4][9];
      floatArray1[0] = floatArray0;
      Matrix4f matrix4f0 = new Matrix4f(floatArray1);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(3678);
      assertTrue(floatBuffer0.hasArray());
      assertEquals(3678, floatBuffer0.limit());
      assertEquals(0, floatBuffer0.position());
      assertEquals(3678, floatBuffer0.capacity());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=3678 cap=3678]", floatBuffer0.toString());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(3678, floatBuffer0.remaining());
      assertFalse(floatBuffer0.isDirect());
      assertNotNull(floatBuffer0);
      
      Matrix4f matrix4f0 = new Matrix4f(floatBuffer0, true);
      assertTrue(floatBuffer0.hasArray());
      assertEquals(3678, floatBuffer0.limit());
      assertEquals(16, floatBuffer0.position());
      assertEquals(3678, floatBuffer0.capacity());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals("java.nio.HeapFloatBuffer[pos=16 lim=3678 cap=3678]", floatBuffer0.toString());
      assertEquals(3662, floatBuffer0.remaining());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertNotNull(matrix4f0);
      
      matrix4f0.fillFloatBuffer(floatBuffer0, true);
      assertTrue(floatBuffer0.hasArray());
      assertEquals(3678, floatBuffer0.limit());
      assertEquals(32, floatBuffer0.position());
      assertEquals(3678, floatBuffer0.capacity());
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals("java.nio.HeapFloatBuffer[pos=32 lim=3678 cap=3678]", floatBuffer0.toString());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(3646, floatBuffer0.remaining());
      assertFalse(floatBuffer0.isDirect());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = matrix4f0.transpose();
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertFalse(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-4086.27F));
      assertEquals((-4086.27F), vector3f0.getZ(), 0.01F);
      assertEquals((-4086.27F), vector3f0.getX(), 0.01F);
      assertEquals((-4086.27F), vector3f0.getY(), 0.01F);
      assertEquals((-4086.27F), vector3f0.z, 0.01F);
      assertEquals((-4086.27F), vector3f0.x, 0.01F);
      assertEquals((-4086.27F), vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.scaled(vector3f0);
      assertEquals((-4086.27F), vector3f0.getZ(), 0.01F);
      assertEquals((-4086.27F), vector3f0.getX(), 0.01F);
      assertEquals((-4086.27F), vector3f0.getY(), 0.01F);
      assertEquals((-6.8230914E10F), matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-4086.27F), vector3f0.z, 0.01F);
      assertEquals((-4086.27F), vector3f0.x, 0.01F);
      assertEquals((-4086.27F), vector3f0.y, 0.01F);
      assertEquals((-4086.27F), matrix4f0.m00, 0.01F);
      assertEquals((-4086.27F), matrix4f0.m11, 0.01F);
      assertEquals((-4086.27F), matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = matrix4f0.transpose();
      assertEquals((-4086.27F), vector3f0.getZ(), 0.01F);
      assertEquals((-4086.27F), vector3f0.getX(), 0.01F);
      assertEquals((-4086.27F), vector3f0.getY(), 0.01F);
      assertEquals((-6.8230914E10F), matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-6.8230914E10F), matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals((-4086.27F), vector3f0.z, 0.01F);
      assertEquals((-4086.27F), vector3f0.x, 0.01F);
      assertEquals((-4086.27F), vector3f0.y, 0.01F);
      assertEquals((-4086.27F), matrix4f0.m00, 0.01F);
      assertEquals((-4086.27F), matrix4f0.m11, 0.01F);
      assertEquals((-4086.27F), matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals((-4086.27F), matrix4f1.m00, 0.01F);
      assertEquals((-4086.27F), matrix4f1.m11, 0.01F);
      assertEquals((-4086.27F), matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(0.0F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.ZERO;
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertNotNull(vector2f0);
      
      Matrix4f matrix4f0 = Matrix4f.translation(vector2f0);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector3f vector3f0 = Vector3f.ZERO;
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f1 = matrix4f0.translate(vector3f0);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertTrue(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(1.0F, matrix4f1.m00, 0.01F);
      assertEquals(1.0F, matrix4f1.m11, 0.01F);
      assertEquals(1.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-383.4F), (-30.3017F), 0.0F);
      assertEquals((-383.4F), vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals((-30.3017F), vector3f0.getY(), 0.01F);
      assertEquals((-383.4F), vector3f0.x, 0.01F);
      assertEquals((-30.3017F), vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      
      Quaternion quaternion0 = new Quaternion(-0.0F, (-30.3017F), (-30.3017F), 0.005216395F);
      assertEquals((-30.3017F), quaternion0.getZ(), 0.01F);
      assertEquals(-0.0F, quaternion0.getX(), 0.01F);
      assertEquals((-30.3017F), quaternion0.getY(), 0.01F);
      assertEquals(0.005216395F, quaternion0.getW(), 0.01F);
      assertEquals(0.005216395F, quaternion0.w, 0.01F);
      assertEquals((-30.3017F), quaternion0.z, 0.01F);
      assertEquals((-30.3017F), quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      
      Matrix3f matrix3f0 = quaternion0.toRotationMatrix();
      assertEquals((-30.3017F), quaternion0.getZ(), 0.01F);
      assertEquals(-0.0F, quaternion0.getX(), 0.01F);
      assertEquals((-30.3017F), quaternion0.getY(), 0.01F);
      assertEquals(0.005216395F, quaternion0.getW(), 0.01F);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(0.005216395F, quaternion0.w, 0.01F);
      assertEquals((-30.3017F), quaternion0.z, 0.01F);
      assertEquals((-30.3017F), quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertNotNull(matrix3f0);
      
      Matrix4f matrix4f0 = Matrix4f.rotation(matrix3f0);
      assertEquals((-30.3017F), quaternion0.getZ(), 0.01F);
      assertEquals(-0.0F, quaternion0.getX(), 0.01F);
      assertEquals((-30.3017F), quaternion0.getY(), 0.01F);
      assertEquals(0.005216395F, quaternion0.getW(), 0.01F);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.005216395F, quaternion0.w, 0.01F);
      assertEquals((-30.3017F), quaternion0.z, 0.01F);
      assertEquals((-30.3017F), quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(1.721486E-4F, matrix4f0.m20, 0.01F);
      assertEquals((-1.721486E-4F), matrix4f0.m10, 0.01F);
      assertEquals(1.721486E-4F, matrix4f0.m01, 0.01F);
      assertEquals((-1.721486E-4F), matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(1.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals((-1.0F), matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(1.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = matrix4f0.scale(vector3f0);
      assertEquals((-383.4F), vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals((-30.3017F), vector3f0.getY(), 0.01F);
      assertEquals((-30.3017F), quaternion0.getZ(), 0.01F);
      assertEquals(-0.0F, quaternion0.getX(), 0.01F);
      assertEquals((-30.3017F), quaternion0.getY(), 0.01F);
      assertEquals(0.005216395F, quaternion0.getW(), 0.01F);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals((-383.4F), vector3f0.x, 0.01F);
      assertEquals((-30.3017F), vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.005216395F, quaternion0.w, 0.01F);
      assertEquals((-30.3017F), quaternion0.z, 0.01F);
      assertEquals((-30.3017F), quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(1.721486E-4F, matrix4f0.m20, 0.01F);
      assertEquals((-1.721486E-4F), matrix4f0.m10, 0.01F);
      assertEquals(1.721486E-4F, matrix4f0.m01, 0.01F);
      assertEquals((-1.721486E-4F), matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(1.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals((-1.0F), matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(1.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals((-0.06600177F), matrix4f1.m20, 0.01F);
      assertEquals(0.06600177F, matrix4f1.m10, 0.01F);
      assertEquals((-30.3017F), matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals((-0.0052163955F), matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(383.4F, matrix4f1.m00, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
      
      Matrix4f matrix4f2 = matrix4f1.translate(vector3f0);
      assertEquals((-383.4F), vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals((-30.3017F), vector3f0.getY(), 0.01F);
      assertEquals((-30.3017F), quaternion0.getZ(), 0.01F);
      assertEquals(-0.0F, quaternion0.getX(), 0.01F);
      assertEquals((-30.3017F), quaternion0.getY(), 0.01F);
      assertEquals(0.005216395F, quaternion0.getW(), 0.01F);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertFalse(matrix4f2.isIdentity());
      assertEquals(0.0F, matrix4f2.determinant(), 0.01F);
      assertEquals((-383.4F), vector3f0.x, 0.01F);
      assertEquals((-30.3017F), vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.005216395F, quaternion0.w, 0.01F);
      assertEquals((-30.3017F), quaternion0.z, 0.01F);
      assertEquals((-30.3017F), quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(1.721486E-4F, matrix4f0.m20, 0.01F);
      assertEquals((-1.721486E-4F), matrix4f0.m10, 0.01F);
      assertEquals(1.721486E-4F, matrix4f0.m01, 0.01F);
      assertEquals((-1.721486E-4F), matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(1.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals((-1.0F), matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(1.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals((-0.06600177F), matrix4f1.m20, 0.01F);
      assertEquals(0.06600177F, matrix4f1.m10, 0.01F);
      assertEquals((-30.3017F), matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals((-0.0052163955F), matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(383.4F, matrix4f1.m00, 0.01F);
      assertEquals((-25.305079F), matrix4f2.m13, 0.01F);
      assertEquals(943.4981F, matrix4f2.m23, 0.01F);
      assertEquals((-0.06600177F), matrix4f2.m20, 0.01F);
      assertEquals(0.06600177F, matrix4f2.m10, 0.01F);
      assertEquals(383.4F, matrix4f2.m00, 0.01F);
      assertEquals(0.0F, matrix4f2.m02, 0.01F);
      assertEquals((-30.3017F), matrix4f2.m21, 0.01F);
      assertEquals((-0.0052163955F), matrix4f2.m01, 0.01F);
      assertEquals(0.0F, matrix4f2.m11, 0.01F);
      assertEquals(0.0F, matrix4f2.m22, 0.01F);
      assertEquals(1.0F, matrix4f2.m33, 0.01F);
      assertEquals(0.0F, matrix4f2.m12, 0.01F);
      assertEquals(0.0F, matrix4f2.m31, 0.01F);
      assertEquals((-146995.4F), matrix4f2.m03, 0.01F);
      assertEquals(0.0F, matrix4f2.m32, 0.01F);
      assertEquals(0.0F, matrix4f2.m30, 0.01F);
      assertFalse(matrix4f0.equals((Object)matrix4f1));
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertFalse(matrix4f2.equals((Object)matrix4f0));
      assertFalse(matrix4f2.equals((Object)matrix4f1));
      assertNotNull(matrix4f2);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f0, matrix4f2);
      assertNotSame(matrix4f1, matrix4f0);
      assertNotSame(matrix4f1, matrix4f2);
      assertNotSame(matrix4f2, matrix4f0);
      assertNotSame(matrix4f2, matrix4f1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = matrix4f0.scale((-30.3017F));
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals((-27822.81F), matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals((-30.3017F), matrix4f1.m00, 0.01F);
      assertEquals((-30.3017F), matrix4f1.m11, 0.01F);
      assertEquals((-30.3017F), matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
      
      Vector3f vector3f0 = Vector3f.ZERO;
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f2 = matrix4f1.translate(vector3f0);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals((-27822.81F), matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertFalse(matrix4f2.isIdentity());
      assertEquals((-27822.81F), matrix4f2.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals((-30.3017F), matrix4f1.m00, 0.01F);
      assertEquals((-30.3017F), matrix4f1.m11, 0.01F);
      assertEquals((-30.3017F), matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals((-30.3017F), matrix4f2.m00, 0.01F);
      assertEquals((-30.3017F), matrix4f2.m11, 0.01F);
      assertEquals((-30.3017F), matrix4f2.m22, 0.01F);
      assertEquals(0.0F, matrix4f2.m10, 0.01F);
      assertEquals(0.0F, matrix4f2.m21, 0.01F);
      assertEquals(0.0F, matrix4f2.m32, 0.01F);
      assertEquals(0.0F, matrix4f2.m20, 0.01F);
      assertEquals(0.0F, matrix4f2.m31, 0.01F);
      assertEquals(0.0F, matrix4f2.m30, 0.01F);
      assertEquals(0.0F, matrix4f2.m03, 0.01F);
      assertEquals(0.0F, matrix4f2.m02, 0.01F);
      assertEquals(0.0F, matrix4f2.m13, 0.01F);
      assertEquals(0.0F, matrix4f2.m01, 0.01F);
      assertEquals(0.0F, matrix4f2.m12, 0.01F);
      assertEquals(0.0F, matrix4f2.m23, 0.01F);
      assertEquals(1.0F, matrix4f2.m33, 0.01F);
      assertFalse(matrix4f0.equals((Object)matrix4f1));
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertFalse(matrix4f2.equals((Object)matrix4f0));
      assertTrue(matrix4f2.equals((Object)matrix4f1));
      assertNotNull(matrix4f2);
      assertNotSame(matrix4f0, matrix4f2);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
      assertNotSame(matrix4f1, matrix4f2);
      assertNotSame(matrix4f2, matrix4f0);
      assertNotSame(matrix4f2, matrix4f1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector2f vector2f0 = new Vector2f(0.0F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertNotNull(vector2f0);
      
      Matrix4f matrix4f1 = matrix4f0.IDENTITY.translate(vector2f0);
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertTrue(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(1.0F, matrix4f1.m00, 0.01F);
      assertEquals(1.0F, matrix4f1.m11, 0.01F);
      assertEquals(1.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector2f vector2f0 = Vector2f.UNIT_X;
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertNotNull(vector2f0);
      
      Matrix4f matrix4f1 = matrix4f0.translate(vector2f0);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(0.0F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.lookat(vector3f0, vector3f0, vector3f0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector3f vector3f1 = matrix4f0.toTranslationVector();
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertEquals(Float.NaN, vector3f1.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f1.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f1.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
      assertEquals(Float.NaN, vector3f1.y, 0.01F);
      assertEquals(Float.NaN, vector3f1.x, 0.01F);
      assertEquals(Float.NaN, vector3f1.z, 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
      assertNotNull(vector3f1);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f((-2.0F), 1.0F, 1.0F, -0.0F, -0.0F, 1.1920929E-7F, 1.1920929E-7F, (-2038.5731F), 3195.252F, 1.0011753F, 1.0F, (-213.6678F), (-1.0F), (-3336.2644F), 1.1920929E-7F, 2.0F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(2.17452093E10F, matrix4f0.determinant(), 0.01F);
      assertEquals((-2038.5731F), matrix4f0.m13, 0.01F);
      assertEquals((-213.6678F), matrix4f0.m23, 0.01F);
      assertEquals((-2.0F), matrix4f0.m00, 0.01F);
      assertEquals(1.1920929E-7F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(2.0F, matrix4f0.m33, 0.01F);
      assertEquals(-0.0F, matrix4f0.m10, 0.01F);
      assertEquals(1.1920929E-7F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m01, 0.01F);
      assertEquals(1.1920929E-7F, matrix4f0.m12, 0.01F);
      assertEquals((-1.0F), matrix4f0.m30, 0.01F);
      assertEquals(1.0011753F, matrix4f0.m21, 0.01F);
      assertEquals(-0.0F, matrix4f0.m03, 0.01F);
      assertEquals((-3336.2644F), matrix4f0.m31, 0.01F);
      assertEquals(3195.252F, matrix4f0.m20, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector3f vector3f0 = matrix4f0.toTranslationVector();
      assertFalse(matrix4f0.isIdentity());
      assertEquals(2.17452093E10F, matrix4f0.determinant(), 0.01F);
      assertEquals((-2038.5731F), vector3f0.getY(), 0.01F);
      assertEquals(-0.0F, vector3f0.getX(), 0.01F);
      assertEquals((-213.6678F), vector3f0.getZ(), 0.01F);
      assertEquals((-2038.5731F), matrix4f0.m13, 0.01F);
      assertEquals((-213.6678F), matrix4f0.m23, 0.01F);
      assertEquals((-2.0F), matrix4f0.m00, 0.01F);
      assertEquals(1.1920929E-7F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(2.0F, matrix4f0.m33, 0.01F);
      assertEquals(-0.0F, matrix4f0.m10, 0.01F);
      assertEquals(1.1920929E-7F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m01, 0.01F);
      assertEquals(1.1920929E-7F, matrix4f0.m12, 0.01F);
      assertEquals((-1.0F), matrix4f0.m30, 0.01F);
      assertEquals(1.0011753F, matrix4f0.m21, 0.01F);
      assertEquals(-0.0F, matrix4f0.m03, 0.01F);
      assertEquals((-3336.2644F), matrix4f0.m31, 0.01F);
      assertEquals(3195.252F, matrix4f0.m20, 0.01F);
      assertEquals((-2038.5731F), vector3f0.y, 0.01F);
      assertEquals(-0.0F, vector3f0.x, 0.01F);
      assertEquals((-213.6678F), vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(0.35751858F);
      assertEquals(0.35751858F, vector2f0.getX(), 0.01F);
      assertEquals(0.35751858F, vector2f0.getY(), 0.01F);
      assertEquals(0.7853982F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.35751858F, vector2f0.y, 0.01F);
      assertEquals(0.35751858F, vector2f0.x, 0.01F);
      assertNotNull(vector2f0);
      
      Matrix4f matrix4f0 = Matrix4f.translation(vector2f0);
      assertEquals(0.35751858F, vector2f0.getX(), 0.01F);
      assertEquals(0.35751858F, vector2f0.getY(), 0.01F);
      assertEquals(0.7853982F, vector2f0.getAngle(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.35751858F, vector2f0.y, 0.01F);
      assertEquals(0.35751858F, vector2f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.35751858F, matrix4f0.m13, 0.01F);
      assertEquals(0.35751858F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector3f vector3f0 = matrix4f0.toTranslationVector();
      assertEquals(0.35751858F, vector2f0.getX(), 0.01F);
      assertEquals(0.35751858F, vector2f0.getY(), 0.01F);
      assertEquals(0.7853982F, vector2f0.getAngle(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.35751858F, vector3f0.getX(), 0.01F);
      assertEquals(0.35751858F, vector3f0.getY(), 0.01F);
      assertEquals(0.35751858F, vector2f0.y, 0.01F);
      assertEquals(0.35751858F, vector2f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.35751858F, matrix4f0.m13, 0.01F);
      assertEquals(0.35751858F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.35751858F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.35751858F, vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.fromFrustum(226.85141F, 226.85141F, 226.85141F, (-1811.9678F), (-1811.9678F), (-1922.0F), true);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(33.93522F, matrix4f0.m13, 0.01F);
      assertEquals((-0.77746785F), matrix4f0.m03, 0.01F);
      assertEquals(0.018176492F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m23, 0.01F);
      assertEquals((-9.8096E-4F), matrix4f0.m00, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector3f vector3f0 = matrix4f0.toTranslationVector();
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(33.93522F, vector3f0.getY(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals((-0.77746785F), vector3f0.getX(), 0.01F);
      assertEquals(33.93522F, matrix4f0.m13, 0.01F);
      assertEquals((-0.77746785F), matrix4f0.m03, 0.01F);
      assertEquals(0.018176492F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m23, 0.01F);
      assertEquals((-9.8096E-4F), matrix4f0.m00, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(33.93522F, vector3f0.y, 0.01F);
      assertEquals((-0.77746785F), vector3f0.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.rotation((-2030.1199F), vector3f0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.6059972F, matrix4f0.m20, 0.01F);
      assertEquals((-0.6059972F), matrix4f0.m02, 0.01F);
      assertEquals(0.7954668F, matrix4f0.m00, 0.01F);
      assertEquals(0.7954668F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertNotNull(matrix4f0);
      
      Quaternion quaternion0 = matrix4f0.toRotationQuat();
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.94748795F, quaternion0.getW(), 0.01F);
      assertEquals((-0.31979153F), quaternion0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.6059972F, matrix4f0.m20, 0.01F);
      assertEquals((-0.6059972F), matrix4f0.m02, 0.01F);
      assertEquals(0.7954668F, matrix4f0.m00, 0.01F);
      assertEquals(0.7954668F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.94748795F, quaternion0.w, 0.01F);
      assertEquals((-0.31979153F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(3085.0378F, 384.0F, 1.0F, 1.0F, (-2.0F), 1.0F, (-2.0F), 1.0F, 1.0F, (-1707.1328F), 3.9402256E-4F, 1.0F, 1.0F, 1.0F, (-2.0F), 1.0F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(17672.55F, matrix4f0.determinant(), 0.01F);
      assertEquals(3085.0378F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m03, 0.01F);
      assertEquals(384.0F, matrix4f0.m01, 0.01F);
      assertEquals((-2.0F), matrix4f0.m12, 0.01F);
      assertEquals(1.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals((-2.0F), matrix4f0.m10, 0.01F);
      assertEquals((-2.0F), matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(1.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m20, 0.01F);
      assertEquals(1.0F, matrix4f0.m31, 0.01F);
      assertEquals(3.9402256E-4F, matrix4f0.m22, 0.01F);
      assertEquals((-1707.1328F), matrix4f0.m21, 0.01F);
      assertNotNull(matrix4f0);
      
      Quaternion quaternion0 = matrix4f0.toRotationQuat();
      assertFalse(matrix4f0.isIdentity());
      assertEquals(17672.55F, matrix4f0.determinant(), 0.01F);
      assertEquals((-3.473652F), quaternion0.getZ(), 0.01F);
      assertEquals(27.780561F, quaternion0.getW(), 0.01F);
      assertEquals((-15.344658F), quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(3085.0378F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m03, 0.01F);
      assertEquals(384.0F, matrix4f0.m01, 0.01F);
      assertEquals((-2.0F), matrix4f0.m12, 0.01F);
      assertEquals(1.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals((-2.0F), matrix4f0.m10, 0.01F);
      assertEquals((-2.0F), matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(1.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m20, 0.01F);
      assertEquals(1.0F, matrix4f0.m31, 0.01F);
      assertEquals(3.9402256E-4F, matrix4f0.m22, 0.01F);
      assertEquals((-1707.1328F), matrix4f0.m21, 0.01F);
      assertEquals((-15.344658F), quaternion0.x, 0.01F);
      assertEquals((-3.473652F), quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(27.780561F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.orthographic(0.0F, (-2330.7664F), (-2707.0F), 0.0F, 1.0F, 1248.0F);
      assertEquals(1.0168023E-9F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-1.0F), matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals((-8.5808686E-4F), matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(7.3882524E-4F, matrix4f0.m11, 0.01F);
      assertEquals((-0.0016038492F), matrix4f0.m22, 0.01F);
      assertEquals((-1.0016038F), matrix4f0.m23, 0.01F);
      assertNotNull(matrix4f0);
      
      Quaternion quaternion0 = matrix4f0.toRotationQuat();
      assertEquals(1.0168023E-9F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.50079954F, quaternion0.getY(), 0.01F);
      assertEquals((-1.0F), matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals((-8.5808686E-4F), matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(7.3882524E-4F, matrix4f0.m11, 0.01F);
      assertEquals((-0.0016038492F), matrix4f0.m22, 0.01F);
      assertEquals((-1.0016038F), matrix4f0.m23, 0.01F);
      assertEquals(0.50079954F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(57.295776F, (-1706.108F), (-1706.108F));
      assertEquals(0.3488501F, quaternion0.getW(), 0.01F);
      assertEquals((-0.14344507F), quaternion0.getY(), 0.01F);
      assertEquals((-0.06266042F), quaternion0.getZ(), 0.01F);
      assertEquals((-0.92401344F), quaternion0.getX(), 0.01F);
      assertEquals(0.3488501F, quaternion0.w, 0.01F);
      assertEquals((-0.06266042F), quaternion0.z, 0.01F);
      assertEquals((-0.92401344F), quaternion0.x, 0.01F);
      assertEquals((-0.14344507F), quaternion0.y, 0.01F);
      assertNotNull(quaternion0);
      
      Matrix4f matrix4f0 = Matrix4f.rotation(quaternion0);
      assertEquals(0.3488501F, quaternion0.getW(), 0.01F);
      assertEquals((-0.14344507F), quaternion0.getY(), 0.01F);
      assertEquals((-0.06266042F), quaternion0.getZ(), 0.01F);
      assertEquals((-0.92401344F), quaternion0.getX(), 0.01F);
      assertEquals(1.0000001F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.3488501F, quaternion0.w, 0.01F);
      assertEquals((-0.06266042F), quaternion0.z, 0.01F);
      assertEquals((-0.92401344F), quaternion0.x, 0.01F);
      assertEquals((-0.14344507F), quaternion0.y, 0.01F);
      assertEquals(0.2158798F, matrix4f0.m20, 0.01F);
      assertEquals(0.22137216F, matrix4f0.m10, 0.01F);
      assertEquals((-0.71545434F), matrix4f0.m11, 0.01F);
      assertEquals((-0.7487546F), matrix4f0.m22, 0.01F);
      assertEquals(0.662661F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.30880854F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals((-0.62670773F), matrix4f0.m21, 0.01F);
      assertEquals(0.015716478F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.9509944F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      Quaternion quaternion1 = matrix4f0.toRotationQuat();
      assertEquals(0.3488501F, quaternion0.getW(), 0.01F);
      assertEquals((-0.14344507F), quaternion0.getY(), 0.01F);
      assertEquals((-0.06266042F), quaternion0.getZ(), 0.01F);
      assertEquals((-0.92401344F), quaternion0.getX(), 0.01F);
      assertEquals(1.0000001F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-0.34885013F), quaternion1.getW(), 0.01F);
      assertEquals(0.14344509F, quaternion1.getY(), 0.01F);
      assertEquals(0.062660426F, quaternion1.getZ(), 0.01F);
      assertEquals(0.9240134F, quaternion1.getX(), 0.01F);
      assertEquals(0.3488501F, quaternion0.w, 0.01F);
      assertEquals((-0.06266042F), quaternion0.z, 0.01F);
      assertEquals((-0.92401344F), quaternion0.x, 0.01F);
      assertEquals((-0.14344507F), quaternion0.y, 0.01F);
      assertEquals(0.2158798F, matrix4f0.m20, 0.01F);
      assertEquals(0.22137216F, matrix4f0.m10, 0.01F);
      assertEquals((-0.71545434F), matrix4f0.m11, 0.01F);
      assertEquals((-0.7487546F), matrix4f0.m22, 0.01F);
      assertEquals(0.662661F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.30880854F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals((-0.62670773F), matrix4f0.m21, 0.01F);
      assertEquals(0.015716478F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.9509944F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.14344509F, quaternion1.y, 0.01F);
      assertEquals(0.9240134F, quaternion1.x, 0.01F);
      assertEquals((-0.34885013F), quaternion1.w, 0.01F);
      assertEquals(0.062660426F, quaternion1.z, 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertNotNull(quaternion1);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix3f matrix3f0 = matrix4f0.toRotationMatrix();
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertNotNull(matrix3f0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(2284.5818F, 2284.5818F, 2284.5818F, 2284.5818F, 402.81375F, 1020.0F, 2170.511F, 1020.0F, 1.0F, 1020.0F, 2170.511F, 402.81375F, (-2244.7876F), (-4.015909E-6F), (-1.0F), 2284.5818F);
      assertEquals((-6.0552852E12F), matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1020.0F, matrix4f0.m13, 0.01F);
      assertEquals(1020.0F, matrix4f0.m11, 0.01F);
      assertEquals(2170.511F, matrix4f0.m22, 0.01F);
      assertEquals((-2244.7876F), matrix4f0.m30, 0.01F);
      assertEquals(2284.5818F, matrix4f0.m00, 0.01F);
      assertEquals(2284.5818F, matrix4f0.m33, 0.01F);
      assertEquals(1020.0F, matrix4f0.m21, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
      assertEquals(2284.5818F, matrix4f0.m01, 0.01F);
      assertEquals(2284.5818F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m20, 0.01F);
      assertEquals(402.81375F, matrix4f0.m10, 0.01F);
      assertEquals(402.81375F, matrix4f0.m23, 0.01F);
      assertEquals(2284.5818F, matrix4f0.m03, 0.01F);
      assertEquals((-4.015909E-6F), matrix4f0.m31, 0.01F);
      assertEquals(2170.511F, matrix4f0.m12, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix3f matrix3f0 = matrix4f0.toRotationMatrix();
      assertEquals((-6.0552852E12F), matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertFalse(matrix3f0.isIdentity());
      assertEquals((-1.05614189E9F), matrix3f0.determinant(), 0.01F);
      assertEquals(1020.0F, matrix4f0.m13, 0.01F);
      assertEquals(1020.0F, matrix4f0.m11, 0.01F);
      assertEquals(2170.511F, matrix4f0.m22, 0.01F);
      assertEquals((-2244.7876F), matrix4f0.m30, 0.01F);
      assertEquals(2284.5818F, matrix4f0.m00, 0.01F);
      assertEquals(2284.5818F, matrix4f0.m33, 0.01F);
      assertEquals(1020.0F, matrix4f0.m21, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
      assertEquals(2284.5818F, matrix4f0.m01, 0.01F);
      assertEquals(2284.5818F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m20, 0.01F);
      assertEquals(402.81375F, matrix4f0.m10, 0.01F);
      assertEquals(402.81375F, matrix4f0.m23, 0.01F);
      assertEquals(2284.5818F, matrix4f0.m03, 0.01F);
      assertEquals((-4.015909E-6F), matrix4f0.m31, 0.01F);
      assertEquals(2170.511F, matrix4f0.m12, 0.01F);
      assertNotNull(matrix3f0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.scaled(vector3f0);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.scaled(1.0F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.scaled(1002.448F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.00736198E9F, matrix4f0.determinant(), 0.01F);
      assertEquals(1002.448F, matrix4f0.m00, 0.01F);
      assertEquals(1002.448F, matrix4f0.m11, 0.01F);
      assertEquals(1002.448F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f1 = matrix4f0.IDENTITY.scale(vector3f0);
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertTrue(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(1.0F, matrix4f1.m00, 0.01F);
      assertEquals(1.0F, matrix4f1.m11, 0.01F);
      assertEquals(1.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.perspective(1.5707964F, (-0.94996107F), (-0.94996107F), 2.0F);
      assertEquals((-7215.306F), matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(72.94668F, matrix4f0.m11, 0.01F);
      assertEquals((-76.78912F), matrix4f0.m00, 0.01F);
      assertEquals((-0.3559501F), matrix4f0.m22, 0.01F);
      assertEquals(1.2880998F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(-0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
      assertEquals(-0.0F, matrix4f0.m33, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f1 = matrix4f0.scale(vector3f0);
      assertEquals((-7215.306F), matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals((-7215.306F), matrix4f1.determinant(), 0.01F);
      assertEquals(72.94668F, matrix4f0.m11, 0.01F);
      assertEquals((-76.78912F), matrix4f0.m00, 0.01F);
      assertEquals((-0.3559501F), matrix4f0.m22, 0.01F);
      assertEquals(1.2880998F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(-0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
      assertEquals(-0.0F, matrix4f0.m33, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(1.2880998F, matrix4f1.m23, 0.01F);
      assertEquals((-0.3559501F), matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals((-76.78912F), matrix4f1.m00, 0.01F);
      assertEquals(72.94668F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals((-1.0F), matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.rotation(0.0F, vector3f0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      assertTrue(matrix3f0.isIdentity());
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertNotNull(matrix3f0);
      
      Matrix4f matrix4f0 = Matrix4f.rotation(matrix3f0);
      assertTrue(matrix3f0.isIdentity());
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertNotNull(matrix4f0);
      
      Quaternion quaternion0 = Quaternion.ZERO;
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      
      Matrix4f matrix4f1 = matrix4f0.rotate(quaternion0);
      assertTrue(matrix3f0.isIdentity());
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertTrue(matrix4f1.isIdentity());
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(1.0F, matrix4f1.m00, 0.01F);
      assertEquals(1.0F, matrix4f1.m11, 0.01F);
      assertEquals(1.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      Quaternion quaternion0 = Quaternion.fromAngles(0.0F, 0.0F, 2248.27F);
      assertEquals((-0.52707946F), quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.849816F, quaternion0.getW(), 0.01F);
      assertEquals((-0.52707946F), quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.849816F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      
      Matrix4f matrix4f1 = matrix4f0.IDENTITY.rotate(quaternion0);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals((-0.52707946F), quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.849816F, quaternion0.getW(), 0.01F);
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals((-0.52707946F), quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.849816F, quaternion0.w, 0.01F);
      assertEquals(0.4443745F, matrix4f1.m00, 0.01F);
      assertEquals(0.4443745F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals((-0.8958411F), matrix4f1.m10, 0.01F);
      assertEquals(0.8958411F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(1.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(0.5F, 2.317429F, 0.5F, (-3267.9692F), 0.5F, (-1117.3445F), (-909.003F), 77.0F, 1411.9F, (-909.003F), (-909.003F), (-3267.9692F), (-909.003F), 918.0F, (-0.41614684F), (-1117.3445F));
      assertEquals((-4.4051239E12F), matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-1117.3445F), matrix4f0.m11, 0.01F);
      assertEquals((-1117.3445F), matrix4f0.m33, 0.01F);
      assertEquals(1411.9F, matrix4f0.m20, 0.01F);
      assertEquals(77.0F, matrix4f0.m13, 0.01F);
      assertEquals(918.0F, matrix4f0.m31, 0.01F);
      assertEquals(2.317429F, matrix4f0.m01, 0.01F);
      assertEquals((-909.003F), matrix4f0.m30, 0.01F);
      assertEquals((-909.003F), matrix4f0.m12, 0.01F);
      assertEquals((-909.003F), matrix4f0.m22, 0.01F);
      assertEquals(0.5F, matrix4f0.m02, 0.01F);
      assertEquals((-909.003F), matrix4f0.m21, 0.01F);
      assertEquals(0.5F, matrix4f0.m00, 0.01F);
      assertEquals(0.5F, matrix4f0.m10, 0.01F);
      assertEquals((-3267.9692F), matrix4f0.m03, 0.01F);
      assertEquals((-0.41614684F), matrix4f0.m32, 0.01F);
      assertEquals((-3267.9692F), matrix4f0.m23, 0.01F);
      assertNotNull(matrix4f0);
      
      Quaternion quaternion0 = new Quaternion(0.31830987F, 918.0F, (-909.003F), (-1117.3445F));
      assertEquals(918.0F, quaternion0.getY(), 0.01F);
      assertEquals((-909.003F), quaternion0.getZ(), 0.01F);
      assertEquals((-1117.3445F), quaternion0.getW(), 0.01F);
      assertEquals(0.31830987F, quaternion0.getX(), 0.01F);
      assertEquals(918.0F, quaternion0.y, 0.01F);
      assertEquals((-1117.3445F), quaternion0.w, 0.01F);
      assertEquals(0.31830987F, quaternion0.x, 0.01F);
      assertEquals((-909.003F), quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      
      Matrix4f matrix4f1 = matrix4f0.rotate(quaternion0);
      assertEquals((-4.4051239E12F), matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(918.0F, quaternion0.getY(), 0.01F);
      assertEquals((-909.003F), quaternion0.getZ(), 0.01F);
      assertEquals((-1117.3445F), quaternion0.getW(), 0.01F);
      assertEquals(0.31830987F, quaternion0.getX(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals((-4.4051239E12F), matrix4f1.determinant(), 0.01F);
      assertEquals((-1117.3445F), matrix4f0.m11, 0.01F);
      assertEquals((-1117.3445F), matrix4f0.m33, 0.01F);
      assertEquals(1411.9F, matrix4f0.m20, 0.01F);
      assertEquals(77.0F, matrix4f0.m13, 0.01F);
      assertEquals(918.0F, matrix4f0.m31, 0.01F);
      assertEquals(2.317429F, matrix4f0.m01, 0.01F);
      assertEquals((-909.003F), matrix4f0.m30, 0.01F);
      assertEquals((-909.003F), matrix4f0.m12, 0.01F);
      assertEquals((-909.003F), matrix4f0.m22, 0.01F);
      assertEquals(0.5F, matrix4f0.m02, 0.01F);
      assertEquals((-909.003F), matrix4f0.m21, 0.01F);
      assertEquals(0.5F, matrix4f0.m00, 0.01F);
      assertEquals(0.5F, matrix4f0.m10, 0.01F);
      assertEquals((-3267.9692F), matrix4f0.m03, 0.01F);
      assertEquals((-0.41614684F), matrix4f0.m32, 0.01F);
      assertEquals((-3267.9692F), matrix4f0.m23, 0.01F);
      assertEquals(918.0F, quaternion0.y, 0.01F);
      assertEquals((-1117.3445F), quaternion0.w, 0.01F);
      assertEquals(0.31830987F, quaternion0.x, 0.01F);
      assertEquals((-909.003F), quaternion0.z, 0.01F);
      assertEquals((-1117.3445F), matrix4f1.m33, 0.01F);
      assertEquals(770.0972F, matrix4f1.m30, 0.01F);
      assertEquals(114.26286F, matrix4f1.m32, 0.01F);
      assertEquals((-1417.2598F), matrix4f1.m10, 0.01F);
      assertEquals(1.8934202F, matrix4f1.m00, 0.01F);
      assertEquals((-857.1632F), matrix4f1.m22, 0.01F);
      assertEquals(0.37056425F, matrix4f1.m01, 0.01F);
      assertEquals((-3267.9692F), matrix4f1.m03, 0.01F);
      assertEquals((-3267.9692F), matrix4f1.m23, 0.01F);
      assertEquals(1030.9728F, matrix4f1.m31, 0.01F);
      assertEquals((-1475.6091F), matrix4f1.m20, 0.01F);
      assertEquals(254.68561F, matrix4f1.m12, 0.01F);
      assertEquals(35.430878F, matrix4f1.m11, 0.01F);
      assertEquals(77.0F, matrix4f1.m13, 0.01F);
      assertEquals((-856.6699F), matrix4f1.m21, 0.01F);
      assertEquals((-1.4656464F), matrix4f1.m02, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix3f matrix3f0 = new Matrix3f(0.0013050571F, 0.0F, (-1.0F), (-407.39F), 0.0F, 0.0F, (-407.39F), 2177.1543F, 1731.31F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(886950.94F, matrix3f0.determinant(), 0.01F);
      assertNotNull(matrix3f0);
      
      Matrix4f matrix4f1 = matrix4f0.rotate(matrix3f0);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(886950.94F, matrix3f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      assertEquals(0.0F, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertNotNull(matrix3f0);
      
      Matrix4f matrix4f1 = matrix4f0.rotate(matrix3f0);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertTrue(matrix4f1.isIdentity());
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(1.0F, matrix4f1.m00, 0.01F);
      assertEquals(1.0F, matrix4f1.m11, 0.01F);
      assertEquals(1.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = matrix4f0.rotate(0.0F, vector3f0);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertTrue(matrix4f1.isIdentity());
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(1.0F, matrix4f1.m00, 0.01F);
      assertEquals(1.0F, matrix4f1.m11, 0.01F);
      assertEquals(1.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(4936.046F, 4936.046F, 4936.046F, 4936.046F, 4936.046F, 4936.046F, 2.0F, 4936.046F, 2.0F, 4936.046F, 4936.046F, 4936.046F, 4936.046F, 2.0F, 4936.046F, 4936.046F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(5.9291003E14F, matrix4f0.determinant(), 0.01F);
      assertEquals(4936.046F, matrix4f0.m02, 0.01F);
      assertEquals(4936.046F, matrix4f0.m13, 0.01F);
      assertEquals(4936.046F, matrix4f0.m03, 0.01F);
      assertEquals(4936.046F, matrix4f0.m00, 0.01F);
      assertEquals(4936.046F, matrix4f0.m11, 0.01F);
      assertEquals(4936.046F, matrix4f0.m22, 0.01F);
      assertEquals(4936.046F, matrix4f0.m33, 0.01F);
      assertEquals(4936.046F, matrix4f0.m01, 0.01F);
      assertEquals(4936.046F, matrix4f0.m23, 0.01F);
      assertEquals(2.0F, matrix4f0.m20, 0.01F);
      assertEquals(2.0F, matrix4f0.m31, 0.01F);
      assertEquals(4936.046F, matrix4f0.m10, 0.01F);
      assertEquals(4936.046F, matrix4f0.m21, 0.01F);
      assertEquals(4936.046F, matrix4f0.m32, 0.01F);
      assertEquals(2.0F, matrix4f0.m12, 0.01F);
      assertEquals(4936.046F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector2f vector2f0 = new Vector2f(2.0F);
      assertEquals(0.7853982F, vector2f0.getAngle(), 0.01F);
      assertEquals(2.0F, vector2f0.getY(), 0.01F);
      assertEquals(2.0F, vector2f0.getX(), 0.01F);
      assertEquals(2.0F, vector2f0.x, 0.01F);
      assertEquals(2.0F, vector2f0.y, 0.01F);
      assertNotNull(vector2f0);
      
      Vector3f vector3f0 = vector2f0.cross(vector2f0);
      assertEquals(0.7853982F, vector2f0.getAngle(), 0.01F);
      assertEquals(2.0F, vector2f0.getY(), 0.01F);
      assertEquals(2.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(2.0F, vector2f0.x, 0.01F);
      assertEquals(2.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      
      Vector3f vector3f1 = matrix4f0.mult(vector3f0);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(5.9291003E14F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.7853982F, vector2f0.getAngle(), 0.01F);
      assertEquals(2.0F, vector2f0.getY(), 0.01F);
      assertEquals(2.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(4936.046F, vector3f1.getZ(), 0.01F);
      assertEquals(4936.046F, vector3f1.getX(), 0.01F);
      assertEquals(4936.046F, vector3f1.getY(), 0.01F);
      assertEquals(4936.046F, matrix4f0.m02, 0.01F);
      assertEquals(4936.046F, matrix4f0.m13, 0.01F);
      assertEquals(4936.046F, matrix4f0.m03, 0.01F);
      assertEquals(4936.046F, matrix4f0.m00, 0.01F);
      assertEquals(4936.046F, matrix4f0.m11, 0.01F);
      assertEquals(4936.046F, matrix4f0.m22, 0.01F);
      assertEquals(4936.046F, matrix4f0.m33, 0.01F);
      assertEquals(4936.046F, matrix4f0.m01, 0.01F);
      assertEquals(4936.046F, matrix4f0.m23, 0.01F);
      assertEquals(2.0F, matrix4f0.m20, 0.01F);
      assertEquals(2.0F, matrix4f0.m31, 0.01F);
      assertEquals(4936.046F, matrix4f0.m10, 0.01F);
      assertEquals(4936.046F, matrix4f0.m21, 0.01F);
      assertEquals(4936.046F, matrix4f0.m32, 0.01F);
      assertEquals(2.0F, matrix4f0.m12, 0.01F);
      assertEquals(4936.046F, matrix4f0.m30, 0.01F);
      assertEquals(2.0F, vector2f0.x, 0.01F);
      assertEquals(2.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(4936.046F, vector3f1.y, 0.01F);
      assertEquals(4936.046F, vector3f1.z, 0.01F);
      assertEquals(4936.046F, vector3f1.x, 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
      assertNotNull(vector3f1);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      
      Matrix4f matrix4f1 = matrix4f0.ZERO.rotate((-1938.4F), vector3f1);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(5.9291003E14F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.7853982F, vector2f0.getAngle(), 0.01F);
      assertEquals(2.0F, vector2f0.getY(), 0.01F);
      assertEquals(2.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(4936.046F, vector3f1.getZ(), 0.01F);
      assertEquals(4936.046F, vector3f1.getX(), 0.01F);
      assertEquals(4936.046F, vector3f1.getY(), 0.01F);
      assertEquals(0.0F, matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(4936.046F, matrix4f0.m02, 0.01F);
      assertEquals(4936.046F, matrix4f0.m13, 0.01F);
      assertEquals(4936.046F, matrix4f0.m03, 0.01F);
      assertEquals(4936.046F, matrix4f0.m00, 0.01F);
      assertEquals(4936.046F, matrix4f0.m11, 0.01F);
      assertEquals(4936.046F, matrix4f0.m22, 0.01F);
      assertEquals(4936.046F, matrix4f0.m33, 0.01F);
      assertEquals(4936.046F, matrix4f0.m01, 0.01F);
      assertEquals(4936.046F, matrix4f0.m23, 0.01F);
      assertEquals(2.0F, matrix4f0.m20, 0.01F);
      assertEquals(2.0F, matrix4f0.m31, 0.01F);
      assertEquals(4936.046F, matrix4f0.m10, 0.01F);
      assertEquals(4936.046F, matrix4f0.m21, 0.01F);
      assertEquals(4936.046F, matrix4f0.m32, 0.01F);
      assertEquals(2.0F, matrix4f0.m12, 0.01F);
      assertEquals(4936.046F, matrix4f0.m30, 0.01F);
      assertEquals(2.0F, vector2f0.x, 0.01F);
      assertEquals(2.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(4936.046F, vector3f1.y, 0.01F);
      assertEquals(4936.046F, vector3f1.z, 0.01F);
      assertEquals(4936.046F, vector3f1.x, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertFalse(vector3f0.equals((Object)vector3f1));
      assertFalse(vector3f1.equals((Object)vector3f0));
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-3593.1807F));
      assertEquals((-3593.1807F), vector3f0.getX(), 0.01F);
      assertEquals((-3593.1807F), vector3f0.getY(), 0.01F);
      assertEquals((-3593.1807F), vector3f0.getZ(), 0.01F);
      assertEquals((-3593.1807F), vector3f0.x, 0.01F);
      assertEquals((-3593.1807F), vector3f0.z, 0.01F);
      assertEquals((-3593.1807F), vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.scaled(vector3f0);
      assertEquals((-3593.1807F), vector3f0.getX(), 0.01F);
      assertEquals((-3593.1807F), vector3f0.getY(), 0.01F);
      assertEquals((-3593.1807F), vector3f0.getZ(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-4.6391366E10F), matrix4f0.determinant(), 0.01F);
      assertEquals((-3593.1807F), vector3f0.x, 0.01F);
      assertEquals((-3593.1807F), vector3f0.z, 0.01F);
      assertEquals((-3593.1807F), vector3f0.y, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals((-3593.1807F), matrix4f0.m00, 0.01F);
      assertEquals((-3593.1807F), matrix4f0.m11, 0.01F);
      assertEquals((-3593.1807F), matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = matrix4f0.rotate((-3593.1807F), vector3f0);
      assertEquals((-3593.1807F), vector3f0.getX(), 0.01F);
      assertEquals((-3593.1807F), vector3f0.getY(), 0.01F);
      assertEquals((-3593.1807F), vector3f0.getZ(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-4.6391366E10F), matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals((-4.639137E10F), matrix4f1.determinant(), 0.01F);
      assertEquals((-3593.1807F), vector3f0.x, 0.01F);
      assertEquals((-3593.1807F), vector3f0.z, 0.01F);
      assertEquals((-3593.1807F), vector3f0.y, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals((-3593.1807F), matrix4f0.m00, 0.01F);
      assertEquals((-3593.1807F), matrix4f0.m11, 0.01F);
      assertEquals((-3593.1807F), matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(1125.6884F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(1125.6884F, matrix4f1.m10, 0.01F);
      assertEquals(1125.6884F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals((-2864.3657F), matrix4f1.m00, 0.01F);
      assertEquals((-2864.3657F), matrix4f1.m11, 0.01F);
      assertEquals((-2864.3657F), matrix4f1.m22, 0.01F);
      assertEquals((-1854.5033F), matrix4f1.m01, 0.01F);
      assertEquals((-1854.5033F), matrix4f1.m12, 0.01F);
      assertEquals((-1854.5033F), matrix4f1.m20, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.perspective((-1.5707964F), 2652.243F, (-0.9999999F), 0.0F);
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-0.027503772F), matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals((-72.946686F), matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(-0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
      assertNotNull(matrix4f0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.orthographic((-209.776F), 0.0F, (-0.41614684F), 1122.3679F, (-0.05754411F), 7.911713E-4F);
      assertEquals((-5.822462E-4F), matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.97287506F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals((-0.99925876F), matrix4f0.m13, 0.01F);
      assertEquals((-34.284573F), matrix4f0.m22, 0.01F);
      assertEquals(0.0017812864F, matrix4f0.m11, 0.01F);
      assertEquals(0.009533979F, matrix4f0.m00, 0.01F);
      assertNotNull(matrix4f0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector3f vector3f0 = new Vector3f(1.0F, (-1787.0F), (-2876.4836F));
      assertEquals((-2876.4836F), vector3f0.getZ(), 0.01F);
      assertEquals((-1787.0F), vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals((-2876.4836F), vector3f0.z, 0.01F);
      assertEquals((-1787.0F), vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      
      Vector3f vector3f1 = matrix4f0.multNormalAcross(vector3f0);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals((-2876.4836F), vector3f0.getZ(), 0.01F);
      assertEquals((-1787.0F), vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals((-2876.4836F), vector3f1.getZ(), 0.01F);
      assertEquals((-1787.0F), vector3f1.getY(), 0.01F);
      assertEquals(1.0F, vector3f1.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals((-2876.4836F), vector3f0.z, 0.01F);
      assertEquals((-1787.0F), vector3f0.y, 0.01F);
      assertEquals((-1787.0F), vector3f1.y, 0.01F);
      assertEquals((-2876.4836F), vector3f1.z, 0.01F);
      assertEquals(1.0F, vector3f1.x, 0.01F);
      assertTrue(vector3f1.equals((Object)vector3f0));
      assertNotNull(vector3f1);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector3f vector3f0 = new Vector3f();
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Vector3f vector3f1 = matrix4f0.multNormalAcross(vector3f0);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getY(), 0.01F);
      assertEquals(0.0F, vector3f1.getZ(), 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertEquals(0.0F, vector3f1.x, 0.01F);
      assertTrue(vector3f1.equals((Object)vector3f0));
      assertNotNull(vector3f1);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector3f vector3f0 = Vector3f.NAN;
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      
      Vector3f vector3f1 = matrix4f0.multNormalAcross(vector3f0);
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, vector3f1.getX(), 0.01F);
      assertEquals(Float.NaN, vector3f1.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f1.getZ(), 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(Float.NaN, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertEquals(Float.NaN, vector3f1.x, 0.01F);
      assertEquals(Float.NaN, vector3f1.y, 0.01F);
      assertEquals(Float.NaN, vector3f1.z, 0.01F);
      assertTrue(vector3f1.equals((Object)vector3f0));
      assertNotNull(vector3f1);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-383.4F), (-2.0F), 0.0F);
      assertEquals((-383.4F), vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals((-2.0F), vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals((-2.0F), vector3f0.y, 0.01F);
      assertEquals((-383.4F), vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      assertEquals((-383.4F), vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals((-2.0F), vector3f0.getY(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals((-2.0F), vector3f0.y, 0.01F);
      assertEquals((-383.4F), vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals((-2.0F), matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals((-383.4F), matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector3f vector3f1 = matrix4f0.multNormalAcross(vector3f0);
      assertEquals((-383.4F), vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals((-2.0F), vector3f0.getY(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals((-383.4F), vector3f1.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getZ(), 0.01F);
      assertEquals((-2.0F), vector3f1.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals((-2.0F), vector3f0.y, 0.01F);
      assertEquals((-383.4F), vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals((-2.0F), matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals((-383.4F), matrix4f0.m03, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertEquals((-2.0F), vector3f1.y, 0.01F);
      assertEquals((-383.4F), vector3f1.x, 0.01F);
      assertTrue(vector3f1.equals((Object)vector3f0));
      assertNotNull(vector3f1);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-4374.8F));
      assertEquals((-4374.8F), vector3f0.getZ(), 0.01F);
      assertEquals((-4374.8F), vector3f0.getX(), 0.01F);
      assertEquals((-4374.8F), vector3f0.getY(), 0.01F);
      assertEquals((-4374.8F), vector3f0.z, 0.01F);
      assertEquals((-4374.8F), vector3f0.y, 0.01F);
      assertEquals((-4374.8F), vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.scaled(vector3f0);
      assertEquals((-4374.8F), vector3f0.getZ(), 0.01F);
      assertEquals((-4374.8F), vector3f0.getX(), 0.01F);
      assertEquals((-4374.8F), vector3f0.getY(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-8.3728744E10F), matrix4f0.determinant(), 0.01F);
      assertEquals((-4374.8F), vector3f0.z, 0.01F);
      assertEquals((-4374.8F), vector3f0.y, 0.01F);
      assertEquals((-4374.8F), vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals((-4374.8F), matrix4f0.m00, 0.01F);
      assertEquals((-4374.8F), matrix4f0.m11, 0.01F);
      assertEquals((-4374.8F), matrix4f0.m22, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      assertEquals(0.7853982F, vector2f0.getAngle(), 0.01F);
      assertEquals(1.0F, vector2f0.getY(), 0.01F);
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      assertEquals(1.0F, vector2f0.y, 0.01F);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertNotNull(vector2f0);
      
      Vector3f vector3f1 = new Vector3f(vector2f0, 1.0F);
      assertEquals(0.7853982F, vector2f0.getAngle(), 0.01F);
      assertEquals(1.0F, vector2f0.getY(), 0.01F);
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f1.getZ(), 0.01F);
      assertEquals(1.0F, vector3f1.getY(), 0.01F);
      assertEquals(1.0F, vector3f1.getX(), 0.01F);
      assertEquals(1.0F, vector2f0.y, 0.01F);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertEquals(1.0F, vector3f1.z, 0.01F);
      assertEquals(1.0F, vector3f1.x, 0.01F);
      assertEquals(1.0F, vector3f1.y, 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
      assertNotNull(vector3f1);
      
      Vector3f vector3f2 = matrix4f0.multNormal(vector3f1);
      assertEquals((-4374.8F), vector3f0.getZ(), 0.01F);
      assertEquals((-4374.8F), vector3f0.getX(), 0.01F);
      assertEquals((-4374.8F), vector3f0.getY(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-8.3728744E10F), matrix4f0.determinant(), 0.01F);
      assertEquals(0.7853982F, vector2f0.getAngle(), 0.01F);
      assertEquals(1.0F, vector2f0.getY(), 0.01F);
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f1.getZ(), 0.01F);
      assertEquals(1.0F, vector3f1.getY(), 0.01F);
      assertEquals(1.0F, vector3f1.getX(), 0.01F);
      assertEquals((-4374.8F), vector3f2.getZ(), 0.01F);
      assertEquals((-4374.8F), vector3f2.getY(), 0.01F);
      assertEquals((-4374.8F), vector3f2.getX(), 0.01F);
      assertEquals((-4374.8F), vector3f0.z, 0.01F);
      assertEquals((-4374.8F), vector3f0.y, 0.01F);
      assertEquals((-4374.8F), vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals((-4374.8F), matrix4f0.m00, 0.01F);
      assertEquals((-4374.8F), matrix4f0.m11, 0.01F);
      assertEquals((-4374.8F), matrix4f0.m22, 0.01F);
      assertEquals(1.0F, vector2f0.y, 0.01F);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertEquals(1.0F, vector3f1.z, 0.01F);
      assertEquals(1.0F, vector3f1.x, 0.01F);
      assertEquals(1.0F, vector3f1.y, 0.01F);
      assertEquals((-4374.8F), vector3f2.z, 0.01F);
      assertEquals((-4374.8F), vector3f2.y, 0.01F);
      assertEquals((-4374.8F), vector3f2.x, 0.01F);
      assertFalse(vector3f0.equals((Object)vector3f1));
      assertFalse(vector3f1.equals((Object)vector3f0));
      assertTrue(vector3f2.equals((Object)vector3f0));
      assertFalse(vector3f2.equals((Object)vector3f1));
      assertNotNull(vector3f2);
      assertNotSame(vector3f0, vector3f2);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f2);
      assertNotSame(vector3f1, vector3f0);
      assertNotSame(vector3f2, vector3f0);
      assertNotSame(vector3f2, vector3f1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Vector3f vector3f1 = matrix4f0.multNormal(vector3f0);
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getY(), 0.01F);
      assertEquals(0.0F, vector3f1.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getZ(), 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertEquals(0.0F, vector3f1.x, 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
      assertNotNull(vector3f1);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Vector3f vector3f1 = matrix4f0.multNormal(vector3f0);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f1.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f1.getX(), 0.01F);
      assertEquals(Float.NaN, vector3f1.getY(), 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, vector3f1.z, 0.01F);
      assertEquals(Float.NaN, vector3f1.y, 0.01F);
      assertEquals(Float.NaN, vector3f1.x, 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
      assertNotNull(vector3f1);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Vector4f vector4f0 = new Vector4f(vector3f0);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector4f0.getZ(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector4f0.getY(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector4f0.getX(), 0.01F);
      assertEquals(1.0F, vector4f0.getW(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector4f0.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector4f0.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector4f0.y, 0.01F);
      assertEquals(1.0F, vector4f0.w, 0.01F);
      assertNotNull(vector4f0);
      
      Vector4f vector4f1 = matrix4f0.multAcross(vector4f0);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector4f0.getZ(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector4f0.getY(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector4f0.getX(), 0.01F);
      assertEquals(1.0F, vector4f0.getW(), 0.01F);
      assertEquals(Float.NaN, vector4f1.getY(), 0.01F);
      assertEquals(Float.NaN, vector4f1.getX(), 0.01F);
      assertEquals(Float.NaN, vector4f1.getW(), 0.01F);
      assertEquals(Float.NaN, vector4f1.getZ(), 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector4f0.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector4f0.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector4f0.y, 0.01F);
      assertEquals(1.0F, vector4f0.w, 0.01F);
      assertEquals(Float.NaN, vector4f1.w, 0.01F);
      assertEquals(Float.NaN, vector4f1.z, 0.01F);
      assertEquals(Float.NaN, vector4f1.y, 0.01F);
      assertEquals(Float.NaN, vector4f1.x, 0.01F);
      assertFalse(vector4f1.equals((Object)vector4f0));
      assertNotNull(vector4f1);
      assertNotSame(vector4f0, vector4f1);
      assertNotSame(vector4f1, vector4f0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles((-2.0F), (-2.0F), (-2.0F));
      assertEquals(0.75355184F, quaternion0.getW(), 0.01F);
      assertEquals((-0.62822145F), quaternion0.getZ(), 0.01F);
      assertEquals(0.13692595F, quaternion0.getX(), 0.01F);
      assertEquals(0.13692597F, quaternion0.getY(), 0.01F);
      assertEquals(0.13692597F, quaternion0.y, 0.01F);
      assertEquals(0.13692595F, quaternion0.x, 0.01F);
      assertEquals((-0.62822145F), quaternion0.z, 0.01F);
      assertEquals(0.75355184F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      
      Matrix4f matrix4f0 = Matrix4f.rotation(quaternion0);
      assertEquals(0.75355184F, quaternion0.getW(), 0.01F);
      assertEquals((-0.62822145F), quaternion0.getZ(), 0.01F);
      assertEquals(0.13692595F, quaternion0.getX(), 0.01F);
      assertEquals(0.13692597F, quaternion0.getY(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.13692597F, quaternion0.y, 0.01F);
      assertEquals(0.13692595F, quaternion0.x, 0.01F);
      assertEquals((-0.62822145F), quaternion0.z, 0.01F);
      assertEquals(0.75355184F, quaternion0.w, 0.01F);
      assertEquals(0.03432195F, matrix4f0.m21, 0.01F);
      assertEquals(0.92500514F, matrix4f0.m22, 0.01F);
      assertEquals(0.17317814F, matrix4f0.m00, 0.01F);
      assertEquals(0.9842923F, matrix4f0.m01, 0.01F);
      assertEquals(0.1731782F, matrix4f0.m11, 0.01F);
      assertEquals(0.03432198F, matrix4f0.m02, 0.01F);
      assertEquals((-0.9092974F), matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals((-0.37840128F), matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals((-0.37840128F), matrix4f0.m12, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector4f vector4f0 = Vector4f.UNIT_Y;
      assertEquals(0.0F, vector4f0.getX(), 0.01F);
      assertEquals(0.0F, vector4f0.getW(), 0.01F);
      assertEquals(0.0F, vector4f0.getZ(), 0.01F);
      assertEquals(1.0F, vector4f0.getY(), 0.01F);
      assertEquals(0.0F, vector4f0.z, 0.01F);
      assertEquals(1.0F, vector4f0.y, 0.01F);
      assertEquals(0.0F, vector4f0.x, 0.01F);
      assertEquals(0.0F, vector4f0.w, 0.01F);
      assertNotNull(vector4f0);
      
      Vector4f vector4f1 = matrix4f0.multAcross(vector4f0);
      assertEquals(0.75355184F, quaternion0.getW(), 0.01F);
      assertEquals((-0.62822145F), quaternion0.getZ(), 0.01F);
      assertEquals(0.13692595F, quaternion0.getX(), 0.01F);
      assertEquals(0.13692597F, quaternion0.getY(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, vector4f0.getX(), 0.01F);
      assertEquals(0.0F, vector4f0.getW(), 0.01F);
      assertEquals(0.0F, vector4f0.getZ(), 0.01F);
      assertEquals(1.0F, vector4f0.getY(), 0.01F);
      assertEquals(0.1731782F, vector4f1.getY(), 0.01F);
      assertEquals((-0.9092974F), vector4f1.getX(), 0.01F);
      assertEquals((-0.37840128F), vector4f1.getZ(), 0.01F);
      assertEquals(0.0F, vector4f1.getW(), 0.01F);
      assertEquals(0.13692597F, quaternion0.y, 0.01F);
      assertEquals(0.13692595F, quaternion0.x, 0.01F);
      assertEquals((-0.62822145F), quaternion0.z, 0.01F);
      assertEquals(0.75355184F, quaternion0.w, 0.01F);
      assertEquals(0.03432195F, matrix4f0.m21, 0.01F);
      assertEquals(0.92500514F, matrix4f0.m22, 0.01F);
      assertEquals(0.17317814F, matrix4f0.m00, 0.01F);
      assertEquals(0.9842923F, matrix4f0.m01, 0.01F);
      assertEquals(0.1731782F, matrix4f0.m11, 0.01F);
      assertEquals(0.03432198F, matrix4f0.m02, 0.01F);
      assertEquals((-0.9092974F), matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals((-0.37840128F), matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals((-0.37840128F), matrix4f0.m12, 0.01F);
      assertEquals(0.0F, vector4f0.z, 0.01F);
      assertEquals(1.0F, vector4f0.y, 0.01F);
      assertEquals(0.0F, vector4f0.x, 0.01F);
      assertEquals(0.0F, vector4f0.w, 0.01F);
      assertEquals((-0.37840128F), vector4f1.z, 0.01F);
      assertEquals(0.1731782F, vector4f1.y, 0.01F);
      assertEquals((-0.9092974F), vector4f1.x, 0.01F);
      assertEquals(0.0F, vector4f1.w, 0.01F);
      assertFalse(vector4f1.equals((Object)vector4f0));
      assertNotNull(vector4f1);
      assertNotSame(vector4f0, vector4f1);
      assertNotSame(vector4f1, vector4f0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector4f vector4f0 = Vector4f.UNIT_W;
      assertEquals(0.0F, vector4f0.getZ(), 0.01F);
      assertEquals(1.0F, vector4f0.getW(), 0.01F);
      assertEquals(0.0F, vector4f0.getY(), 0.01F);
      assertEquals(0.0F, vector4f0.getX(), 0.01F);
      assertEquals(1.0F, vector4f0.w, 0.01F);
      assertEquals(0.0F, vector4f0.z, 0.01F);
      assertEquals(0.0F, vector4f0.x, 0.01F);
      assertEquals(0.0F, vector4f0.y, 0.01F);
      assertNotNull(vector4f0);
      
      Vector4f vector4f1 = matrix4f0.multAcross(vector4f0);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector4f0.getZ(), 0.01F);
      assertEquals(1.0F, vector4f0.getW(), 0.01F);
      assertEquals(0.0F, vector4f0.getY(), 0.01F);
      assertEquals(0.0F, vector4f0.getX(), 0.01F);
      assertEquals(1.0F, vector4f1.getW(), 0.01F);
      assertEquals(0.0F, vector4f1.getY(), 0.01F);
      assertEquals(0.0F, vector4f1.getX(), 0.01F);
      assertEquals(0.0F, vector4f1.getZ(), 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(1.0F, vector4f0.w, 0.01F);
      assertEquals(0.0F, vector4f0.z, 0.01F);
      assertEquals(0.0F, vector4f0.x, 0.01F);
      assertEquals(0.0F, vector4f0.y, 0.01F);
      assertEquals(1.0F, vector4f1.w, 0.01F);
      assertEquals(0.0F, vector4f1.z, 0.01F);
      assertEquals(0.0F, vector4f1.x, 0.01F);
      assertEquals(0.0F, vector4f1.y, 0.01F);
      assertTrue(vector4f1.equals((Object)vector4f0));
      assertNotNull(vector4f1);
      assertNotSame(vector4f0, vector4f1);
      assertNotSame(vector4f1, vector4f0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-30.3017F), (-30.3017F), (-30.3017F));
      assertEquals((-30.3017F), vector3f0.getZ(), 0.01F);
      assertEquals((-30.3017F), vector3f0.getX(), 0.01F);
      assertEquals((-30.3017F), vector3f0.getY(), 0.01F);
      assertEquals((-30.3017F), vector3f0.z, 0.01F);
      assertEquals((-30.3017F), vector3f0.x, 0.01F);
      assertEquals((-30.3017F), vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      
      Vector4f vector4f0 = new Vector4f(vector3f0, (-1641.657F));
      assertEquals((-30.3017F), vector3f0.getZ(), 0.01F);
      assertEquals((-30.3017F), vector3f0.getX(), 0.01F);
      assertEquals((-30.3017F), vector3f0.getY(), 0.01F);
      assertEquals((-1641.657F), vector4f0.getW(), 0.01F);
      assertEquals((-30.3017F), vector4f0.getZ(), 0.01F);
      assertEquals((-30.3017F), vector4f0.getY(), 0.01F);
      assertEquals((-30.3017F), vector4f0.getX(), 0.01F);
      assertEquals((-30.3017F), vector3f0.z, 0.01F);
      assertEquals((-30.3017F), vector3f0.x, 0.01F);
      assertEquals((-30.3017F), vector3f0.y, 0.01F);
      assertEquals((-30.3017F), vector4f0.y, 0.01F);
      assertEquals((-30.3017F), vector4f0.x, 0.01F);
      assertEquals((-1641.657F), vector4f0.w, 0.01F);
      assertEquals((-30.3017F), vector4f0.z, 0.01F);
      assertNotNull(vector4f0);
      
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector4f vector4f1 = matrix4f0.multAcross(vector4f0);
      assertEquals((-30.3017F), vector3f0.getZ(), 0.01F);
      assertEquals((-30.3017F), vector3f0.getX(), 0.01F);
      assertEquals((-30.3017F), vector3f0.getY(), 0.01F);
      assertEquals((-1641.657F), vector4f0.getW(), 0.01F);
      assertEquals((-30.3017F), vector4f0.getZ(), 0.01F);
      assertEquals((-30.3017F), vector4f0.getY(), 0.01F);
      assertEquals((-30.3017F), vector4f0.getX(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals((-30.3017F), vector4f1.getZ(), 0.01F);
      assertEquals((-1641.657F), vector4f1.getW(), 0.01F);
      assertEquals((-30.3017F), vector4f1.getX(), 0.01F);
      assertEquals((-30.3017F), vector4f1.getY(), 0.01F);
      assertEquals((-30.3017F), vector3f0.z, 0.01F);
      assertEquals((-30.3017F), vector3f0.x, 0.01F);
      assertEquals((-30.3017F), vector3f0.y, 0.01F);
      assertEquals((-30.3017F), vector4f0.y, 0.01F);
      assertEquals((-30.3017F), vector4f0.x, 0.01F);
      assertEquals((-1641.657F), vector4f0.w, 0.01F);
      assertEquals((-30.3017F), vector4f0.z, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals((-1641.657F), vector4f1.w, 0.01F);
      assertEquals((-30.3017F), vector4f1.x, 0.01F);
      assertEquals((-30.3017F), vector4f1.y, 0.01F);
      assertEquals((-30.3017F), vector4f1.z, 0.01F);
      assertTrue(vector4f1.equals((Object)vector4f0));
      assertNotNull(vector4f1);
      assertNotSame(vector4f0, vector4f1);
      assertNotSame(vector4f1, vector4f0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.scaled(vector3f0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector4f vector4f0 = Vector4f.UNIT_W;
      assertEquals(0.0F, vector4f0.getZ(), 0.01F);
      assertEquals(0.0F, vector4f0.getX(), 0.01F);
      assertEquals(0.0F, vector4f0.getY(), 0.01F);
      assertEquals(1.0F, vector4f0.getW(), 0.01F);
      assertEquals(0.0F, vector4f0.x, 0.01F);
      assertEquals(0.0F, vector4f0.y, 0.01F);
      assertEquals(1.0F, vector4f0.w, 0.01F);
      assertEquals(0.0F, vector4f0.z, 0.01F);
      assertNotNull(vector4f0);
      
      Vector4f vector4f1 = matrix4f0.IDENTITY.mult(vector4f0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, vector4f0.getZ(), 0.01F);
      assertEquals(0.0F, vector4f0.getX(), 0.01F);
      assertEquals(0.0F, vector4f0.getY(), 0.01F);
      assertEquals(1.0F, vector4f0.getW(), 0.01F);
      assertEquals(0.0F, vector4f1.getY(), 0.01F);
      assertEquals(0.0F, vector4f1.getX(), 0.01F);
      assertEquals(1.0F, vector4f1.getW(), 0.01F);
      assertEquals(0.0F, vector4f1.getZ(), 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, vector4f0.x, 0.01F);
      assertEquals(0.0F, vector4f0.y, 0.01F);
      assertEquals(1.0F, vector4f0.w, 0.01F);
      assertEquals(0.0F, vector4f0.z, 0.01F);
      assertEquals(1.0F, vector4f1.w, 0.01F);
      assertEquals(0.0F, vector4f1.z, 0.01F);
      assertEquals(0.0F, vector4f1.y, 0.01F);
      assertEquals(0.0F, vector4f1.x, 0.01F);
      assertTrue(vector4f1.equals((Object)vector4f0));
      assertNotNull(vector4f1);
      assertNotSame(vector4f0, vector4f1);
      assertNotSame(vector4f1, vector4f0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(35.8763F, 2.0949024E-6F, (-1780.9049F));
      assertEquals(0.14854142F, quaternion0.getX(), 0.01F);
      assertEquals((-0.1151375F), quaternion0.getW(), 0.01F);
      assertEquals(0.60171854F, quaternion0.getZ(), 0.01F);
      assertEquals((-0.7762819F), quaternion0.getY(), 0.01F);
      assertEquals(0.60171854F, quaternion0.z, 0.01F);
      assertEquals((-0.1151375F), quaternion0.w, 0.01F);
      assertEquals(0.14854142F, quaternion0.x, 0.01F);
      assertEquals((-0.7762819F), quaternion0.y, 0.01F);
      assertNotNull(quaternion0);
      
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      assertEquals(0.14854142F, quaternion0.getX(), 0.01F);
      assertEquals((-0.1151375F), quaternion0.getW(), 0.01F);
      assertEquals(0.60171854F, quaternion0.getZ(), 0.01F);
      assertEquals((-0.7762819F), quaternion0.getY(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.99999994F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.60171854F, quaternion0.z, 0.01F);
      assertEquals((-0.1151375F), quaternion0.w, 0.01F);
      assertEquals(0.14854142F, quaternion0.x, 0.01F);
      assertEquals((-0.7762819F), quaternion0.y, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals((-0.36918077F), matrix4f0.m10, 0.01F);
      assertEquals((-0.092059284F), matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals((-0.90000105F), matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.23174047F, matrix4f0.m11, 0.01F);
      assertEquals(1.937151E-6F, matrix4f0.m20, 0.01F);
      assertEquals((-0.9293575F), matrix4f0.m00, 0.01F);
      assertEquals(0.35751858F, matrix4f0.m02, 0.01F);
      assertEquals((-0.24935627F), matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals((-0.9684118F), matrix4f0.m21, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector4f vector4f0 = Vector4f.UNIT_XYZW;
      assertEquals(1.0F, vector4f0.getZ(), 0.01F);
      assertEquals(1.0F, vector4f0.getY(), 0.01F);
      assertEquals(1.0F, vector4f0.getX(), 0.01F);
      assertEquals(1.0F, vector4f0.getW(), 0.01F);
      assertEquals(1.0F, vector4f0.x, 0.01F);
      assertEquals(1.0F, vector4f0.w, 0.01F);
      assertEquals(1.0F, vector4f0.z, 0.01F);
      assertEquals(1.0F, vector4f0.y, 0.01F);
      assertNotNull(vector4f0);
      
      Vector4f vector4f1 = matrix4f0.mult(vector4f0);
      assertEquals(0.14854142F, quaternion0.getX(), 0.01F);
      assertEquals((-0.1151375F), quaternion0.getW(), 0.01F);
      assertEquals(0.60171854F, quaternion0.getZ(), 0.01F);
      assertEquals((-0.7762819F), quaternion0.getY(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.99999994F, matrix4f0.determinant(), 0.01F);
      assertEquals(1.0F, vector4f0.getZ(), 0.01F);
      assertEquals(1.0F, vector4f0.getY(), 0.01F);
      assertEquals(1.0F, vector4f0.getX(), 0.01F);
      assertEquals(1.0F, vector4f0.getW(), 0.01F);
      assertEquals(1.0F, vector4f1.getW(), 0.01F);
      assertEquals((-0.6638982F), vector4f1.getX(), 0.01F);
      assertEquals((-1.2177662F), vector4f1.getZ(), 0.01F);
      assertEquals((-1.0374414F), vector4f1.getY(), 0.01F);
      assertEquals(0.60171854F, quaternion0.z, 0.01F);
      assertEquals((-0.1151375F), quaternion0.w, 0.01F);
      assertEquals(0.14854142F, quaternion0.x, 0.01F);
      assertEquals((-0.7762819F), quaternion0.y, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals((-0.36918077F), matrix4f0.m10, 0.01F);
      assertEquals((-0.092059284F), matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals((-0.90000105F), matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.23174047F, matrix4f0.m11, 0.01F);
      assertEquals(1.937151E-6F, matrix4f0.m20, 0.01F);
      assertEquals((-0.9293575F), matrix4f0.m00, 0.01F);
      assertEquals(0.35751858F, matrix4f0.m02, 0.01F);
      assertEquals((-0.24935627F), matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals((-0.9684118F), matrix4f0.m21, 0.01F);
      assertEquals(1.0F, vector4f0.x, 0.01F);
      assertEquals(1.0F, vector4f0.w, 0.01F);
      assertEquals(1.0F, vector4f0.z, 0.01F);
      assertEquals(1.0F, vector4f0.y, 0.01F);
      assertEquals(1.0F, vector4f1.w, 0.01F);
      assertEquals((-1.0374414F), vector4f1.y, 0.01F);
      assertEquals((-1.2177662F), vector4f1.z, 0.01F);
      assertEquals((-0.6638982F), vector4f1.x, 0.01F);
      assertFalse(vector4f1.equals((Object)vector4f0));
      assertNotNull(vector4f1);
      assertNotSame(vector4f0, vector4f1);
      assertNotSame(vector4f1, vector4f0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(1.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector4f vector4f0 = Vector4f.UNIT_Z;
      assertEquals(1.0F, vector4f0.getZ(), 0.01F);
      assertEquals(0.0F, vector4f0.getY(), 0.01F);
      assertEquals(0.0F, vector4f0.getX(), 0.01F);
      assertEquals(0.0F, vector4f0.getW(), 0.01F);
      assertEquals(0.0F, vector4f0.x, 0.01F);
      assertEquals(1.0F, vector4f0.z, 0.01F);
      assertEquals(0.0F, vector4f0.y, 0.01F);
      assertEquals(0.0F, vector4f0.w, 0.01F);
      assertNotNull(vector4f0);
      
      Vector4f vector4f1 = matrix4f0.mult(vector4f0);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, vector4f0.getZ(), 0.01F);
      assertEquals(0.0F, vector4f0.getY(), 0.01F);
      assertEquals(0.0F, vector4f0.getX(), 0.01F);
      assertEquals(0.0F, vector4f0.getW(), 0.01F);
      assertEquals(1.0F, vector4f1.getZ(), 0.01F);
      assertEquals(0.0F, vector4f1.getW(), 0.01F);
      assertEquals(0.0F, vector4f1.getX(), 0.01F);
      assertEquals(0.0F, vector4f1.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(1.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, vector4f0.x, 0.01F);
      assertEquals(1.0F, vector4f0.z, 0.01F);
      assertEquals(0.0F, vector4f0.y, 0.01F);
      assertEquals(0.0F, vector4f0.w, 0.01F);
      assertEquals(0.0F, vector4f1.y, 0.01F);
      assertEquals(1.0F, vector4f1.z, 0.01F);
      assertEquals(0.0F, vector4f1.x, 0.01F);
      assertEquals(0.0F, vector4f1.w, 0.01F);
      assertTrue(vector4f1.equals((Object)vector4f0));
      assertNotNull(vector4f1);
      assertNotSame(vector4f0, vector4f1);
      assertNotSame(vector4f1, vector4f0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector4f vector4f0 = Vector4f.UNIT_XYZW;
      assertEquals(1.0F, vector4f0.getW(), 0.01F);
      assertEquals(1.0F, vector4f0.getX(), 0.01F);
      assertEquals(1.0F, vector4f0.getY(), 0.01F);
      assertEquals(1.0F, vector4f0.getZ(), 0.01F);
      assertEquals(1.0F, vector4f0.w, 0.01F);
      assertEquals(1.0F, vector4f0.y, 0.01F);
      assertEquals(1.0F, vector4f0.z, 0.01F);
      assertEquals(1.0F, vector4f0.x, 0.01F);
      assertNotNull(vector4f0);
      
      Vector4f vector4f1 = matrix4f0.mult(vector4f0);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, vector4f0.getW(), 0.01F);
      assertEquals(1.0F, vector4f0.getX(), 0.01F);
      assertEquals(1.0F, vector4f0.getY(), 0.01F);
      assertEquals(1.0F, vector4f0.getZ(), 0.01F);
      assertEquals(1.0F, vector4f1.getZ(), 0.01F);
      assertEquals(1.0F, vector4f1.getW(), 0.01F);
      assertEquals(1.0F, vector4f1.getX(), 0.01F);
      assertEquals(1.0F, vector4f1.getY(), 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(1.0F, vector4f0.w, 0.01F);
      assertEquals(1.0F, vector4f0.y, 0.01F);
      assertEquals(1.0F, vector4f0.z, 0.01F);
      assertEquals(1.0F, vector4f0.x, 0.01F);
      assertEquals(1.0F, vector4f1.w, 0.01F);
      assertEquals(1.0F, vector4f1.z, 0.01F);
      assertEquals(1.0F, vector4f1.y, 0.01F);
      assertEquals(1.0F, vector4f1.x, 0.01F);
      assertTrue(vector4f1.equals((Object)vector4f0));
      assertNotNull(vector4f1);
      assertNotSame(vector4f0, vector4f1);
      assertNotSame(vector4f1, vector4f0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      
      Matrix3f matrix3f0 = quaternion0.toRotationMatrix();
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertTrue(matrix3f0.isIdentity());
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertNotNull(matrix3f0);
      
      Vector4f vector4f0 = new Vector4f(0.0F, (-65504.0F), (-65504.0F), (-65504.0F));
      assertEquals(0.0F, vector4f0.getX(), 0.01F);
      assertEquals((-65504.0F), vector4f0.getZ(), 0.01F);
      assertEquals((-65504.0F), vector4f0.getY(), 0.01F);
      assertEquals((-65504.0F), vector4f0.getW(), 0.01F);
      assertEquals(0.0F, vector4f0.x, 0.01F);
      assertEquals((-65504.0F), vector4f0.w, 0.01F);
      assertEquals((-65504.0F), vector4f0.z, 0.01F);
      assertEquals((-65504.0F), vector4f0.y, 0.01F);
      assertNotNull(vector4f0);
      
      Matrix4f matrix4f0 = Matrix4f.rotation(matrix3f0);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertTrue(matrix3f0.isIdentity());
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector4f vector4f1 = matrix4f0.mult(vector4f0);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertTrue(matrix3f0.isIdentity());
      assertEquals(0.0F, vector4f0.getX(), 0.01F);
      assertEquals((-65504.0F), vector4f0.getZ(), 0.01F);
      assertEquals((-65504.0F), vector4f0.getY(), 0.01F);
      assertEquals((-65504.0F), vector4f0.getW(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals((-65504.0F), vector4f1.getZ(), 0.01F);
      assertEquals((-65504.0F), vector4f1.getW(), 0.01F);
      assertEquals((-65504.0F), vector4f1.getY(), 0.01F);
      assertEquals(0.0F, vector4f1.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector4f0.x, 0.01F);
      assertEquals((-65504.0F), vector4f0.w, 0.01F);
      assertEquals((-65504.0F), vector4f0.z, 0.01F);
      assertEquals((-65504.0F), vector4f0.y, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, vector4f1.x, 0.01F);
      assertEquals((-65504.0F), vector4f1.z, 0.01F);
      assertEquals((-65504.0F), vector4f1.y, 0.01F);
      assertEquals((-65504.0F), vector4f1.w, 0.01F);
      assertTrue(vector4f1.equals((Object)vector4f0));
      assertNotNull(vector4f1);
      assertNotSame(vector4f0, vector4f1);
      assertNotSame(vector4f1, vector4f0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-383.4F), (-30.3017F), 0.0F);
      assertEquals((-383.4F), vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals((-30.3017F), vector3f0.getY(), 0.01F);
      assertEquals((-383.4F), vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals((-30.3017F), vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      
      Quaternion quaternion0 = new Quaternion(-0.0F, (-30.3017F), (-30.3017F), 0.005216395F);
      assertEquals((-30.3017F), quaternion0.getY(), 0.01F);
      assertEquals(-0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.005216395F, quaternion0.getW(), 0.01F);
      assertEquals((-30.3017F), quaternion0.getZ(), 0.01F);
      assertEquals((-30.3017F), quaternion0.z, 0.01F);
      assertEquals((-30.3017F), quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(0.005216395F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      
      Matrix3f matrix3f0 = quaternion0.toRotationMatrix();
      assertEquals((-30.3017F), quaternion0.getY(), 0.01F);
      assertEquals(-0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.005216395F, quaternion0.getW(), 0.01F);
      assertEquals((-30.3017F), quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals((-30.3017F), quaternion0.z, 0.01F);
      assertEquals((-30.3017F), quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(0.005216395F, quaternion0.w, 0.01F);
      assertNotNull(matrix3f0);
      
      Matrix4f matrix4f0 = Matrix4f.rotation(matrix3f0);
      assertEquals((-30.3017F), quaternion0.getY(), 0.01F);
      assertEquals(-0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.005216395F, quaternion0.getW(), 0.01F);
      assertEquals((-30.3017F), quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals((-30.3017F), quaternion0.z, 0.01F);
      assertEquals((-30.3017F), quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(0.005216395F, quaternion0.w, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(1.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals((-1.0F), matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(1.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals((-1.721486E-4F), matrix4f0.m02, 0.01F);
      assertEquals(1.721486E-4F, matrix4f0.m01, 0.01F);
      assertEquals((-1.721486E-4F), matrix4f0.m10, 0.01F);
      assertEquals(1.721486E-4F, matrix4f0.m20, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector3f vector3f1 = matrix4f0.mult(vector3f0);
      assertEquals((-383.4F), vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals((-30.3017F), vector3f0.getY(), 0.01F);
      assertEquals((-30.3017F), quaternion0.getY(), 0.01F);
      assertEquals(-0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.005216395F, quaternion0.getW(), 0.01F);
      assertEquals((-30.3017F), quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.06600177F, vector3f1.getY(), 0.01F);
      assertEquals(383.39478F, vector3f1.getX(), 0.01F);
      assertEquals((-30.367702F), vector3f1.getZ(), 0.01F);
      assertEquals((-383.4F), vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals((-30.3017F), vector3f0.y, 0.01F);
      assertEquals((-30.3017F), quaternion0.z, 0.01F);
      assertEquals((-30.3017F), quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals(0.005216395F, quaternion0.w, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(1.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals((-1.0F), matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(1.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals((-1.721486E-4F), matrix4f0.m02, 0.01F);
      assertEquals(1.721486E-4F, matrix4f0.m01, 0.01F);
      assertEquals((-1.721486E-4F), matrix4f0.m10, 0.01F);
      assertEquals(1.721486E-4F, matrix4f0.m20, 0.01F);
      assertEquals((-30.367702F), vector3f1.z, 0.01F);
      assertEquals(0.06600177F, vector3f1.y, 0.01F);
      assertEquals(383.39478F, vector3f1.x, 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
      assertNotNull(vector3f1);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.scaled(0.0F);
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector3f vector3f0 = new Vector3f();
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      
      Vector3f vector3f1 = matrix4f0.mult(vector3f0);
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f1.getZ(), 0.01F);
      assertEquals(0.0F, vector3f1.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getY(), 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f1.x, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertTrue(vector3f1.equals((Object)vector3f0));
      assertNotNull(vector3f1);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-383.4F), (-2.0F), 0.0F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals((-2.0F), vector3f0.getY(), 0.01F);
      assertEquals((-383.4F), vector3f0.getX(), 0.01F);
      assertEquals((-383.4F), vector3f0.x, 0.01F);
      assertEquals((-2.0F), vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = new Matrix4f();
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector3f vector3f1 = matrix4f0.mult(vector3f0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals((-2.0F), vector3f0.getY(), 0.01F);
      assertEquals((-383.4F), vector3f0.getX(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals((-383.4F), vector3f1.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getZ(), 0.01F);
      assertEquals((-2.0F), vector3f1.getY(), 0.01F);
      assertEquals((-383.4F), vector3f0.x, 0.01F);
      assertEquals((-2.0F), vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals((-2.0F), vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertEquals((-383.4F), vector3f1.x, 0.01F);
      assertTrue(vector3f1.equals((Object)vector3f0));
      assertNotNull(vector3f1);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = matrix4f0.ZERO.mult(matrix4f0);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector3f vector3f0 = Vector3f.NAN;
      assertEquals(Float.NaN, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis(8.8279085E-11F, vector3f0);
      assertEquals(Float.NaN, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      
      Matrix4f matrix4f1 = quaternion0.toRotationMatrix4f();
      assertEquals(Float.NaN, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getZ(), 0.01F);
      assertEquals(Float.NaN, matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(Float.NaN, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
      
      Matrix4f matrix4f2 = matrix4f0.mult(matrix4f1);
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getZ(), 0.01F);
      assertEquals(Float.NaN, matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertFalse(matrix4f2.isIdentity());
      assertEquals(Float.NaN, matrix4f2.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(Float.NaN, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f2.m30, 0.01F);
      assertEquals(Float.NaN, matrix4f2.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f2.m12, 0.01F);
      assertEquals(0.0F, matrix4f2.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f2.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f2.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f2.m22, 0.01F);
      assertEquals(0.0F, matrix4f2.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f2.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f2.m21, 0.01F);
      assertEquals(Float.NaN, matrix4f2.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f2.m20, 0.01F);
      assertEquals(Float.NaN, matrix4f2.m31, 0.01F);
      assertEquals(0.0F, matrix4f2.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f2.m02, 0.01F);
      assertEquals(0.0F, matrix4f2.m13, 0.01F);
      assertFalse(matrix4f0.equals((Object)matrix4f1));
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertFalse(matrix4f2.equals((Object)matrix4f1));
      assertFalse(matrix4f2.equals((Object)matrix4f0));
      assertNotNull(matrix4f2);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f0, matrix4f2);
      assertNotSame(matrix4f1, matrix4f2);
      assertNotSame(matrix4f1, matrix4f0);
      assertNotSame(matrix4f2, matrix4f1);
      assertNotSame(matrix4f2, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = Matrix4f.scaled((-5.96046E-8F));
      assertEquals((-2.1175774E-22F), matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals((-5.96046E-8F), matrix4f1.m00, 0.01F);
      assertEquals((-5.96046E-8F), matrix4f1.m11, 0.01F);
      assertEquals((-5.96046E-8F), matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
      
      Matrix4f matrix4f2 = matrix4f0.mult(matrix4f1);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals((-2.1175774E-22F), matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertFalse(matrix4f2.isIdentity());
      assertEquals((-2.1175774E-22F), matrix4f2.determinant(), 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals((-5.96046E-8F), matrix4f1.m00, 0.01F);
      assertEquals((-5.96046E-8F), matrix4f1.m11, 0.01F);
      assertEquals((-5.96046E-8F), matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f2.m02, 0.01F);
      assertEquals(0.0F, matrix4f2.m13, 0.01F);
      assertEquals(0.0F, matrix4f2.m01, 0.01F);
      assertEquals(0.0F, matrix4f2.m12, 0.01F);
      assertEquals(0.0F, matrix4f2.m23, 0.01F);
      assertEquals(0.0F, matrix4f2.m03, 0.01F);
      assertEquals(0.0F, matrix4f2.m20, 0.01F);
      assertEquals(0.0F, matrix4f2.m31, 0.01F);
      assertEquals(0.0F, matrix4f2.m30, 0.01F);
      assertEquals(1.0F, matrix4f2.m33, 0.01F);
      assertEquals(0.0F, matrix4f2.m10, 0.01F);
      assertEquals(0.0F, matrix4f2.m21, 0.01F);
      assertEquals(0.0F, matrix4f2.m32, 0.01F);
      assertEquals((-5.96046E-8F), matrix4f2.m00, 0.01F);
      assertEquals((-5.96046E-8F), matrix4f2.m11, 0.01F);
      assertEquals((-5.96046E-8F), matrix4f2.m22, 0.01F);
      assertFalse(matrix4f0.equals((Object)matrix4f1));
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertTrue(matrix4f2.equals((Object)matrix4f1));
      assertFalse(matrix4f2.equals((Object)matrix4f0));
      assertNotNull(matrix4f2);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f0, matrix4f2);
      assertNotSame(matrix4f1, matrix4f0);
      assertNotSame(matrix4f1, matrix4f2);
      assertNotSame(matrix4f2, matrix4f1);
      assertNotSame(matrix4f2, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.orthographic(0.33333334F, 0.33333334F, 0.33333334F, 1.5707964F, 1.5707964F, (-177.22F));
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertEquals(1.61621F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.011186258F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals((-0.9824286F), matrix4f0.m23, 0.01F);
      assertEquals((-1.5387367F), matrix4f0.m13, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = matrix4f0.ZERO.mult(0.0F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(1.61621F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.011186258F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals((-0.9824286F), matrix4f0.m23, 0.01F);
      assertEquals((-1.5387367F), matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.scaled((-1.5707964F));
      assertEquals((-3.8757849F), matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals((-1.5707964F), matrix4f0.m00, 0.01F);
      assertEquals((-1.5707964F), matrix4f0.m11, 0.01F);
      assertEquals((-1.5707964F), matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = matrix4f0.mult(3.1415927F);
      assertEquals((-3.8757849F), matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-377.53674F), matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals((-1.5707964F), matrix4f0.m00, 0.01F);
      assertEquals((-1.5707964F), matrix4f0.m11, 0.01F);
      assertEquals((-1.5707964F), matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals((-4.9348025F), matrix4f1.m00, 0.01F);
      assertEquals((-4.9348025F), matrix4f1.m11, 0.01F);
      assertEquals((-4.9348025F), matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(3.1415927F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.scaled((-3767.456F));
      assertEquals((-5.3474234E10F), matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-3767.456F), matrix4f0.m00, 0.01F);
      assertEquals((-3767.456F), matrix4f0.m11, 0.01F);
      assertEquals((-3767.456F), matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = matrix4f0.invert();
      assertEquals((-5.3474234E10F), matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-1.8700593E-11F), matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals((-3767.456F), matrix4f0.m00, 0.01F);
      assertEquals((-3767.456F), matrix4f0.m11, 0.01F);
      assertEquals((-3767.456F), matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(-0.0F, matrix4f1.m02, 0.01F);
      assertEquals(-0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(-0.0F, matrix4f1.m01, 0.01F);
      assertEquals(-0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(-0.0F, matrix4f1.m20, 0.01F);
      assertEquals(-0.0F, matrix4f1.m31, 0.01F);
      assertEquals(-0.0F, matrix4f1.m10, 0.01F);
      assertEquals(-0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals((-2.654311E-4F), matrix4f1.m00, 0.01F);
      assertEquals((-2.654311E-4F), matrix4f1.m11, 0.01F);
      assertEquals((-2.654311E-4F), matrix4f1.m22, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-1009.457F), 1286.8646F, (-4174.81F), (-1009.457F));
      assertEquals((-1009.457F), quaternion0.getW(), 0.01F);
      assertEquals((-1009.457F), quaternion0.getX(), 0.01F);
      assertEquals(1286.8646F, quaternion0.getY(), 0.01F);
      assertEquals((-4174.81F), quaternion0.getZ(), 0.01F);
      assertEquals((-1009.457F), quaternion0.x, 0.01F);
      assertEquals(1286.8646F, quaternion0.y, 0.01F);
      assertEquals((-4174.81F), quaternion0.z, 0.01F);
      assertEquals((-1009.457F), quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      
      Matrix4f matrix4f0 = Matrix4f.rotation(quaternion0);
      assertEquals((-1009.457F), quaternion0.getW(), 0.01F);
      assertEquals((-1009.457F), quaternion0.getX(), 0.01F);
      assertEquals(1286.8646F, quaternion0.getY(), 0.01F);
      assertEquals((-4174.81F), quaternion0.getZ(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.99999964F, matrix4f0.determinant(), 0.01F);
      assertEquals((-1009.457F), quaternion0.x, 0.01F);
      assertEquals(1286.8646F, quaternion0.y, 0.01F);
      assertEquals((-4174.81F), quaternion0.z, 0.01F);
      assertEquals((-1009.457F), quaternion0.w, 0.01F);
      assertEquals(0.74672014F, matrix4f0.m22, 0.01F);
      assertEquals((-0.74671996F), matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals((-0.5220194F), matrix4f0.m01, 0.01F);
      assertEquals((-0.60516006F), matrix4f0.m12, 0.01F);
      assertEquals(0.2760259F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.5220194F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.2760259F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals((-0.80703473F), matrix4f0.m00, 0.01F);
      assertEquals((-0.41219503F), matrix4f0.m21, 0.01F);
      assertNotNull(matrix4f0);
      
      float float0 = matrix4f0.get(0, 0);
      assertEquals((-1009.457F), quaternion0.getW(), 0.01F);
      assertEquals((-1009.457F), quaternion0.getX(), 0.01F);
      assertEquals(1286.8646F, quaternion0.getY(), 0.01F);
      assertEquals((-4174.81F), quaternion0.getZ(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.99999964F, matrix4f0.determinant(), 0.01F);
      assertEquals((-1009.457F), quaternion0.x, 0.01F);
      assertEquals(1286.8646F, quaternion0.y, 0.01F);
      assertEquals((-4174.81F), quaternion0.z, 0.01F);
      assertEquals((-1009.457F), quaternion0.w, 0.01F);
      assertEquals(0.74672014F, matrix4f0.m22, 0.01F);
      assertEquals((-0.74671996F), matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals((-0.5220194F), matrix4f0.m01, 0.01F);
      assertEquals((-0.60516006F), matrix4f0.m12, 0.01F);
      assertEquals(0.2760259F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.5220194F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.2760259F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals((-0.80703473F), matrix4f0.m00, 0.01F);
      assertEquals((-0.41219503F), matrix4f0.m21, 0.01F);
      assertEquals((-0.80703473F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.fromFrustum(702.1869F, 0.0F, (-44.38F), 3.1415927F, 0.0F, 0.1F, true);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-0.0023974315F), matrix4f0.determinant(), 0.01F);
      assertEquals(0.8677825F, matrix4f0.m03, 0.01F);
      assertEquals(0.0028482445F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(1.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.04208613F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals((-20.0F), matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
      
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      assertEquals(1.5707964F, vector2f0.getAngle(), 0.01F);
      assertEquals(1.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(1.0F, vector2f0.y, 0.01F);
      assertNotNull(vector2f0);
      
      Matrix4f matrix4f1 = matrix4f0.translate(vector2f0);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-0.0023974315F), matrix4f0.determinant(), 0.01F);
      assertEquals(1.5707964F, vector2f0.getAngle(), 0.01F);
      assertEquals(1.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals((-0.0023974315F), matrix4f1.determinant(), 0.01F);
      assertEquals(0.8677825F, matrix4f0.m03, 0.01F);
      assertEquals(0.0028482445F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(1.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.04208613F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals((-20.0F), matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(1.0F, vector2f0.y, 0.01F);
      assertEquals(0.04208613F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals((-20.0F), matrix4f1.m11, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(1.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0028482445F, matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.8677825F, matrix4f1.m03, 0.01F);
      assertEquals((-19.0F), matrix4f1.m13, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(0.0F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.fromAngleNormalAxis(0.0F, vector3f0);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.ZERO;
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertNotNull(vector2f0);
      
      Vector3f vector3f0 = vector2f0.cross(vector2f0);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.fromAngleNormalAxis(1041.28F, vector3f0);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-0.003890606F), matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals((-0.15727961F), matrix4f0.m00, 0.01F);
      assertEquals((-0.15727961F), matrix4f0.m11, 0.01F);
      assertEquals((-0.15727961F), matrix4f0.m22, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      assertEquals(0.0F, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertNotNull(matrix3f0);
      
      Matrix4f matrix4f1 = matrix4f0.rotate(matrix3f0);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-0.003890606F), matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals((-0.003890606F), matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals((-0.15727961F), matrix4f0.m00, 0.01F);
      assertEquals((-0.15727961F), matrix4f0.m11, 0.01F);
      assertEquals((-0.15727961F), matrix4f0.m22, 0.01F);
      assertEquals((-0.15727961F), matrix4f1.m00, 0.01F);
      assertEquals((-0.15727961F), matrix4f1.m11, 0.01F);
      assertEquals((-0.15727961F), matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.fromAngleAxis(0.0F, vector3f0);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      assertEquals(Float.NaN, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertEquals(Float.NaN, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.fromAngleAxis(Float.NaN, vector3f0);
      assertEquals(Float.NaN, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertEquals(Float.NaN, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertNotNull(matrix4f0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertNotNull(matrix4f0);
      
      float float0 = matrix4f0.determinant();
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-498.75406F), (-0.99999964F), (-0.99999964F));
      assertEquals((-0.99999964F), vector3f0.getY(), 0.01F);
      assertEquals((-498.75406F), vector3f0.getX(), 0.01F);
      assertEquals((-0.99999964F), vector3f0.getZ(), 0.01F);
      assertEquals((-498.75406F), vector3f0.x, 0.01F);
      assertEquals((-0.99999964F), vector3f0.y, 0.01F);
      assertEquals((-0.99999964F), vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.scaled(vector3f0);
      assertEquals((-0.99999964F), vector3f0.getY(), 0.01F);
      assertEquals((-498.75406F), vector3f0.getX(), 0.01F);
      assertEquals((-0.99999964F), vector3f0.getZ(), 0.01F);
      assertEquals((-498.7537F), matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-498.75406F), vector3f0.x, 0.01F);
      assertEquals((-0.99999964F), vector3f0.y, 0.01F);
      assertEquals((-0.99999964F), vector3f0.z, 0.01F);
      assertEquals((-498.75406F), matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals((-0.99999964F), matrix4f0.m11, 0.01F);
      assertEquals((-0.99999964F), matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
      
      float float0 = matrix4f0.determinant();
      assertEquals((-0.99999964F), vector3f0.getY(), 0.01F);
      assertEquals((-498.75406F), vector3f0.getX(), 0.01F);
      assertEquals((-0.99999964F), vector3f0.getZ(), 0.01F);
      assertEquals((-498.7537F), matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-498.75406F), vector3f0.x, 0.01F);
      assertEquals((-0.99999964F), vector3f0.y, 0.01F);
      assertEquals((-0.99999964F), vector3f0.z, 0.01F);
      assertEquals((-498.75406F), matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals((-0.99999964F), matrix4f0.m11, 0.01F);
      assertEquals((-0.99999964F), matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals((-498.7537F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = matrix4f0.adjoint();
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.scaled((-1.5707964F));
      assertEquals((-3.8757849F), matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals((-1.5707964F), matrix4f0.m00, 0.01F);
      assertEquals((-1.5707964F), matrix4f0.m11, 0.01F);
      assertEquals((-1.5707964F), matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = matrix4f0.adjoint();
      assertEquals((-3.8757849F), matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-58.22091F), matrix4f1.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals((-1.5707964F), matrix4f0.m00, 0.01F);
      assertEquals((-1.5707964F), matrix4f0.m11, 0.01F);
      assertEquals((-1.5707964F), matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals((-3.8757849F), matrix4f1.m33, 0.01F);
      assertEquals(-0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(-0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(-0.0F, matrix4f1.m23, 0.01F);
      assertEquals(2.4674013F, matrix4f1.m00, 0.01F);
      assertEquals(2.4674013F, matrix4f1.m11, 0.01F);
      assertEquals(2.4674013F, matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(-0.0F, matrix4f1.m03, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = Matrix4f.IDENTITY;
      assertTrue(matrix4f1.isIdentity());
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(1.0F, matrix4f1.m00, 0.01F);
      assertEquals(1.0F, matrix4f1.m11, 0.01F);
      assertEquals(1.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
      
      Matrix4f matrix4f2 = matrix4f1.add(matrix4f0);
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertTrue(matrix4f1.isIdentity());
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(1.0F, matrix4f2.determinant(), 0.01F);
      assertTrue(matrix4f2.isIdentity());
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(1.0F, matrix4f1.m00, 0.01F);
      assertEquals(1.0F, matrix4f1.m11, 0.01F);
      assertEquals(1.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(1.0F, matrix4f2.m00, 0.01F);
      assertEquals(1.0F, matrix4f2.m11, 0.01F);
      assertEquals(1.0F, matrix4f2.m22, 0.01F);
      assertEquals(1.0F, matrix4f2.m33, 0.01F);
      assertEquals(0.0F, matrix4f2.m10, 0.01F);
      assertEquals(0.0F, matrix4f2.m21, 0.01F);
      assertEquals(0.0F, matrix4f2.m32, 0.01F);
      assertEquals(0.0F, matrix4f2.m02, 0.01F);
      assertEquals(0.0F, matrix4f2.m13, 0.01F);
      assertEquals(0.0F, matrix4f2.m01, 0.01F);
      assertEquals(0.0F, matrix4f2.m12, 0.01F);
      assertEquals(0.0F, matrix4f2.m23, 0.01F);
      assertEquals(0.0F, matrix4f2.m20, 0.01F);
      assertEquals(0.0F, matrix4f2.m31, 0.01F);
      assertEquals(0.0F, matrix4f2.m30, 0.01F);
      assertEquals(0.0F, matrix4f2.m03, 0.01F);
      assertFalse(matrix4f0.equals((Object)matrix4f1));
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertFalse(matrix4f2.equals((Object)matrix4f0));
      assertTrue(matrix4f2.equals((Object)matrix4f1));
      assertNotNull(matrix4f2);
      assertNotSame(matrix4f0, matrix4f2);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f2);
      assertNotSame(matrix4f1, matrix4f0);
      assertNotSame(matrix4f2, matrix4f0);
      assertNotSame(matrix4f2, matrix4f1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = matrix4f0.add(matrix4f0);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = matrix4f0.scale((-30.3017F));
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals((-27822.81F), matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals((-30.3017F), matrix4f1.m00, 0.01F);
      assertEquals((-30.3017F), matrix4f1.m11, 0.01F);
      assertEquals((-30.3017F), matrix4f1.m22, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
      
      Matrix4f matrix4f2 = matrix4f0.add(matrix4f1);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f1.isIdentity());
      assertEquals((-27822.81F), matrix4f1.determinant(), 0.01F);
      assertEquals((-50316.273F), matrix4f2.determinant(), 0.01F);
      assertFalse(matrix4f2.isIdentity());
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals((-30.3017F), matrix4f1.m00, 0.01F);
      assertEquals((-30.3017F), matrix4f1.m11, 0.01F);
      assertEquals((-30.3017F), matrix4f1.m22, 0.01F);
      assertEquals((-29.3017F), matrix4f2.m00, 0.01F);
      assertEquals((-29.3017F), matrix4f2.m11, 0.01F);
      assertEquals((-29.3017F), matrix4f2.m22, 0.01F);
      assertEquals(0.0F, matrix4f2.m03, 0.01F);
      assertEquals(0.0F, matrix4f2.m01, 0.01F);
      assertEquals(0.0F, matrix4f2.m12, 0.01F);
      assertEquals(0.0F, matrix4f2.m23, 0.01F);
      assertEquals(0.0F, matrix4f2.m02, 0.01F);
      assertEquals(0.0F, matrix4f2.m13, 0.01F);
      assertEquals(0.0F, matrix4f2.m10, 0.01F);
      assertEquals(0.0F, matrix4f2.m21, 0.01F);
      assertEquals(0.0F, matrix4f2.m32, 0.01F);
      assertEquals(2.0F, matrix4f2.m33, 0.01F);
      assertEquals(0.0F, matrix4f2.m30, 0.01F);
      assertEquals(0.0F, matrix4f2.m20, 0.01F);
      assertEquals(0.0F, matrix4f2.m31, 0.01F);
      assertFalse(matrix4f0.equals((Object)matrix4f1));
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertFalse(matrix4f2.equals((Object)matrix4f0));
      assertFalse(matrix4f2.equals((Object)matrix4f1));
      assertNotNull(matrix4f2);
      assertNotSame(matrix4f0, matrix4f2);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
      assertNotSame(matrix4f1, matrix4f2);
      assertNotSame(matrix4f2, matrix4f0);
      assertNotSame(matrix4f2, matrix4f1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.translation((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.scaled((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertNotNull(matrix4f0);
      
      // Undeclared exception!
      try { 
        matrix4f0.scale((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.rotation((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.rotation((Matrix3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      // Undeclared exception!
      try { 
        matrix4f0.rotate(0.800829F, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      // Undeclared exception!
      try { 
        matrix4f0.ZERO.mult((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.lookat((Vector3f) null, (Vector3f) null, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      // Undeclared exception!
      try { 
        matrix4f0.get((float[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertNotNull(matrix4f0);
      
      // Undeclared exception!
      try { 
        matrix4f0.get((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertNotNull(matrix4f0);
      
      float[] floatArray0 = new float[0];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=0 cap=0]", floatBuffer0.toString());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(0, floatBuffer0.capacity());
      assertEquals(0, floatBuffer0.limit());
      assertFalse(floatBuffer0.hasRemaining());
      assertFalse(floatBuffer0.isDirect());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(0, floatBuffer0.position());
      assertEquals(0, floatBuffer0.remaining());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatBuffer0);
      assertEquals(0, floatArray0.length);
      
      // Undeclared exception!
      try { 
        matrix4f0.IDENTITY.fillFloatBuffer(floatBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.equalIdentity((Matrix4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, matrix4f0.m30, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m21, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      // Undeclared exception!
      try { 
        matrix4f0.ZERO.add((Matrix4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f((float[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be of size 16.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(1);
      assertTrue(floatBuffer0.hasRemaining());
      assertFalse(floatBuffer0.isDirect());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=1 cap=1]", floatBuffer0.toString());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals(0, floatBuffer0.position());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(1, floatBuffer0.limit());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(1, floatBuffer0.capacity());
      assertEquals(1, floatBuffer0.remaining());
      assertNotNull(floatBuffer0);
      
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f(floatBuffer0, false);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(9);
      assertTrue(floatBuffer0.hasRemaining());
      assertEquals(9, floatBuffer0.limit());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=9 cap=9]", floatBuffer0.toString());
      assertEquals(9, floatBuffer0.capacity());
      assertEquals(9, floatBuffer0.remaining());
      assertEquals(0, floatBuffer0.position());
      assertFalse(floatBuffer0.isReadOnly());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertFalse(floatBuffer0.isDirect());
      assertNotNull(floatBuffer0);
      
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f(floatBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.fromFrustum(1.0F, 0.0F, (-5.96046E-8F), 0.0F, 0.7853982F, 0.0F, false);
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals((-1.0F), matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(2.546479F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(1.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(-0.0F, matrix4f0.m33, 0.01F);
      assertEquals(3.355446E7F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      // Undeclared exception!
      try { 
        matrix4f0.fillFloatArray((float[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
      
      // Undeclared exception!
      try { 
        matrix4f0.ZERO.fillFloatBuffer((FloatBuffer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.scaled(vector3f0);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4f0.m00, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4f0.m11, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertNotNull(matrix4f0);
      
      float[] floatArray0 = new float[9];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0, 0, 0);
      assertTrue(floatBuffer0.hasArray());
      assertEquals(0, floatBuffer0.limit());
      assertEquals(0, floatBuffer0.position());
      assertFalse(floatBuffer0.hasRemaining());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertFalse(floatBuffer0.isDirect());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(0, floatBuffer0.remaining());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=0 cap=9]", floatBuffer0.toString());
      assertEquals(9, floatBuffer0.capacity());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatBuffer0);
      assertEquals(9, floatArray0.length);
      
      // Undeclared exception!
      try { 
        matrix4f0.fillFloatBuffer(floatBuffer0, false);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertNotNull(matrix4f0);
      
      float[] floatArray0 = new float[7];
      float[] floatArray1 = matrix4f0.getColumn(2, floatArray0);
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertNotNull(matrix4f0);
      
      float[] floatArray0 = new float[7];
      float[] floatArray1 = matrix4f0.getColumn(1, floatArray0);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertNotNull(matrix4f0);
      
      float[] floatArray0 = new float[9];
      float[] floatArray1 = matrix4f0.getColumn(0, floatArray0);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        matrix4f0.getColumn(3, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertNotNull(matrix4f0);
      
      // Undeclared exception!
      try { 
        matrix4f0.IDENTITY.getColumn((-186), (float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid column index. -186
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertNotNull(matrix4f0);
      
      float[] floatArray0 = new float[16];
      matrix4f0.get(floatArray0, true);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(16, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertNotNull(matrix4f0);
      
      float[] floatArray0 = new float[15];
      // Undeclared exception!
      try { 
        matrix4f0.get(floatArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be of size 16.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = matrix4f0.mult(1.0F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix4f1.isIdentity());
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(1.0F, matrix4f1.m00, 0.01F);
      assertEquals(1.0F, matrix4f1.m11, 0.01F);
      assertEquals(1.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(32768);
      assertTrue(floatBuffer0.hasRemaining());
      assertFalse(floatBuffer0.isDirect());
      assertTrue(floatBuffer0.hasArray());
      assertEquals("java.nio.HeapFloatBuffer[pos=0 lim=32768 cap=32768]", floatBuffer0.toString());
      assertEquals(32768, floatBuffer0.capacity());
      assertEquals(32768, floatBuffer0.remaining());
      assertEquals(32768, floatBuffer0.limit());
      assertEquals(0, floatBuffer0.position());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertFalse(floatBuffer0.isReadOnly());
      assertNotNull(floatBuffer0);
      
      Matrix4f matrix4f0 = new Matrix4f(floatBuffer0);
      assertTrue(floatBuffer0.hasRemaining());
      assertFalse(floatBuffer0.isDirect());
      assertTrue(floatBuffer0.hasArray());
      assertEquals(32768, floatBuffer0.capacity());
      assertEquals(32752, floatBuffer0.remaining());
      assertEquals(32768, floatBuffer0.limit());
      assertEquals(16, floatBuffer0.position());
      assertEquals(0, floatBuffer0.arrayOffset());
      assertEquals("java.nio.HeapFloatBuffer[pos=16 lim=32768 cap=32768]", floatBuffer0.toString());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertNotNull(matrix4f0);
      
      // Undeclared exception!
      try { 
        matrix4f0.mult((Matrix4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.scaled(vector3f0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix3f matrix3f0 = matrix4f0.IDENTITY.toRotationMatrix();
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertTrue(matrix3f0.isIdentity());
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix3f0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      // Undeclared exception!
      try { 
        matrix4f0.mult((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertEquals(Float.NaN, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.perspective(Float.NaN, Float.NaN, Float.NaN, Float.NaN);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(-0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      Matrix4f matrix4f1 = matrix4f0.translate(vector3f0);
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertFalse(matrix4f1.isIdentity());
      assertEquals(Float.NaN, matrix4f1.determinant(), 0.01F);
      assertEquals(Float.NaN, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertEquals(Float.NaN, vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(-0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m21, 0.01F);
      assertEquals((-1.0F), matrix4f1.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m13, 0.01F);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotNull(matrix4f1);
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
      
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f1);
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertFalse(matrix4f1.isIdentity());
      assertEquals(Float.NaN, matrix4f1.determinant(), 0.01F);
      assertEquals(Float.NaN, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertEquals(Float.NaN, vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(-0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m21, 0.01F);
      assertEquals((-1.0F), matrix4f1.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m13, 0.01F);
      assertFalse(boolean0);
      assertFalse(matrix4f0.equals((Object)matrix4f1));
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertNotSame(matrix4f0, matrix4f1);
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(1.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(1.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, 3020.3F, Float.NaN, (-2207.36F), Float.NaN, (-3062.14F), (-2207.36F), Float.NaN);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-2207.36F), matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
      assertEquals((-2207.36F), matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m30, 0.01F);
      assertEquals(3020.3F, matrix4f0.m21, 0.01F);
      assertEquals((-3062.14F), matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-2207.36F), matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
      assertEquals((-2207.36F), matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m30, 0.01F);
      assertEquals(3020.3F, matrix4f0.m21, 0.01F);
      assertEquals((-3062.14F), matrix4f0.m31, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, (-1673.854F), (-0.7530876F), Float.NaN, Float.NaN, Float.NaN, (-2297.655F), (-1919.117F), Float.NaN);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, matrix4f0.m30, 0.01F);
      assertEquals((-1919.117F), matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals((-2297.655F), matrix4f0.m31, 0.01F);
      assertEquals((-0.7530876F), matrix4f0.m21, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m33, 0.01F);
      assertEquals((-1673.854F), matrix4f0.m20, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, matrix4f0.m30, 0.01F);
      assertEquals((-1919.117F), matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals((-2297.655F), matrix4f0.m31, 0.01F);
      assertEquals((-0.7530876F), matrix4f0.m21, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m33, 0.01F);
      assertEquals((-1673.854F), matrix4f0.m20, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, (-9.1599626E-4F), (-9.1599626E-4F), Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, (-9.1599626E-4F), Float.NaN, Float.NaN);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-9.1599626E-4F), matrix4f0.m31, 0.01F);
      assertEquals((-9.1599626E-4F), matrix4f0.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
      assertEquals((-9.1599626E-4F), matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m30, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m21, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals((-9.1599626E-4F), matrix4f0.m31, 0.01F);
      assertEquals((-9.1599626E-4F), matrix4f0.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
      assertEquals((-9.1599626E-4F), matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m30, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m21, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, 1.0F, Float.NaN, Float.NaN, Float.NaN, (-1635.04F), Float.NaN, 1.0F, Float.NaN, (-1.0F), 0.66666675F, 782.189F, 1.0F);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(782.189F, matrix4f0.m32, 0.01F);
      assertEquals((-1635.04F), matrix4f0.m20, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
      assertEquals(1.0F, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m21, 0.01F);
      assertEquals(0.66666675F, matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals((-1.0F), matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(782.189F, matrix4f0.m32, 0.01F);
      assertEquals((-1635.04F), matrix4f0.m20, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
      assertEquals(1.0F, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m21, 0.01F);
      assertEquals(0.66666675F, matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals((-1.0F), matrix4f0.m30, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(Float.NaN, Float.NaN, 181.0F, Float.NaN, 181.0F, Float.NaN, 181.0F, (-0.0021853144F), 181.0F, Float.NaN, Float.NaN, (-3056.9F), (-9.534406E-4F), (-1.0F), (-0.0021853144F), Float.NaN);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(181.0F, matrix4f0.m02, 0.01F);
      assertEquals((-9.534406E-4F), matrix4f0.m30, 0.01F);
      assertEquals(181.0F, matrix4f0.m20, 0.01F);
      assertEquals(181.0F, matrix4f0.m10, 0.01F);
      assertEquals(181.0F, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m21, 0.01F);
      assertEquals((-1.0F), matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals((-0.0021853144F), matrix4f0.m32, 0.01F);
      assertEquals((-0.0021853144F), matrix4f0.m13, 0.01F);
      assertEquals((-3056.9F), matrix4f0.m23, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(181.0F, matrix4f0.m02, 0.01F);
      assertEquals((-9.534406E-4F), matrix4f0.m30, 0.01F);
      assertEquals(181.0F, matrix4f0.m20, 0.01F);
      assertEquals(181.0F, matrix4f0.m10, 0.01F);
      assertEquals(181.0F, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m21, 0.01F);
      assertEquals((-1.0F), matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals((-0.0021853144F), matrix4f0.m32, 0.01F);
      assertEquals((-0.0021853144F), matrix4f0.m13, 0.01F);
      assertEquals((-3056.9F), matrix4f0.m23, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(1.0F, matrix4f0.m20, 0.01F);
      assertEquals(1.0F, matrix4f0.m31, 0.01F);
      assertEquals(1.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(1.0F, matrix4f0.m10, 0.01F);
      assertEquals(1.0F, matrix4f0.m21, 0.01F);
      assertEquals(1.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals(1.0F, matrix4f0.m01, 0.01F);
      assertEquals(1.0F, matrix4f0.m12, 0.01F);
      assertEquals(1.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(1.0F, matrix4f0.m20, 0.01F);
      assertEquals(1.0F, matrix4f0.m31, 0.01F);
      assertEquals(1.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(1.0F, matrix4f0.m10, 0.01F);
      assertEquals(1.0F, matrix4f0.m21, 0.01F);
      assertEquals(1.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals(1.0F, matrix4f0.m01, 0.01F);
      assertEquals(1.0F, matrix4f0.m12, 0.01F);
      assertEquals(1.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m03, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F);
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.scaled(vector3f0);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.rotation((-2030.1199F), vector3f0);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.7954668F, matrix4f0.m00, 0.01F);
      assertEquals(0.7954668F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.6059972F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals((-0.6059972F), matrix4f0.m02, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.7954668F, matrix4f0.m00, 0.01F);
      assertEquals(0.7954668F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.6059972F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals((-0.6059972F), matrix4f0.m02, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(1.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = matrix4f0.isIdentity();
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(1.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      assertEquals(1.5707964F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(1.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(1.0F, vector2f0.y, 0.01F);
      assertNotNull(vector2f0);
      
      Matrix4f matrix4f0 = Matrix4f.translation(vector2f0);
      assertEquals(1.5707964F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(1.0F, vector2f0.getY(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(1.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = matrix4f0.isIdentity();
      assertEquals(1.5707964F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(1.0F, vector2f0.getY(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(1.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_X;
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertNotNull(vector2f0);
      
      Vector3f vector3f0 = new Vector3f(vector2f0);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.scaled(vector3f0);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = matrix4f0.isIdentity();
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      assertEquals(Float.NaN, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      assertEquals(Float.NaN, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertEquals(Float.NaN, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = matrix4f0.isIdentity();
      assertEquals(Float.NaN, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
      assertEquals(Float.NaN, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(1.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F);
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertNotNull(matrix4f0);
      
      boolean boolean0 = matrix4f0.isIdentity();
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(1.0F, 1043.2523F, 1.5707964F, (-1360.7408F), (-2777.1F), 0.0F, 0.0F, 1.0F, 0.0F, (-954.8422F), (-65504.0F), 0.5335574F, 2437.885F, (-954.8422F), (-2.0F), 2437.885F);
      matrix4f0.isIdentity();
      assertEquals(0.5335574F, matrix4f0.m23, 0.01F);
      assertEquals((-2.26467787E14F), matrix4f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      boolean boolean0 = matrix4f0.isIdentity();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.scaled((-1.0F));
      boolean boolean0 = matrix4f0.isIdentity();
      assertFalse(boolean0);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals((-1.0F), matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Matrix4f matrix4f1 = matrix4f0.scale(1.0F);
      boolean boolean0 = matrix4f1.equals(matrix4f0);
      assertTrue(boolean0);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Matrix4f matrix4f1 = new Matrix4f(1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      boolean boolean0 = matrix4f0.equals(matrix4f1);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(1.0F, matrix4f1.m11, 0.01F);
      assertEquals(1.0F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m33, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Matrix4f matrix4f1 = Matrix4f.translation(vector2f0);
      boolean boolean0 = matrix4f0.equals(matrix4f1);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertFalse(boolean0);
      assertFalse(matrix4f1.equals((Object)matrix4f0));
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(1.0F, -0.0F, 0.0F);
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      Matrix4f matrix4f1 = matrix4f0.transpose();
      boolean boolean0 = matrix4f1.equals(matrix4f0);
      assertFalse(boolean0);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      Matrix4f matrix4f1 = Matrix4f.scaled(0.0F);
      matrix4f0.equals(matrix4f1);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      Matrix4f matrix4f1 = new Matrix4f(0.0F, 0.0F, 0.0F, 0.0F, (-1079.3923F), -0.0F, (-0.058412936F), 0.0F, (-1179.5F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1079.3923F), 6.2831855F);
      boolean boolean0 = matrix4f0.equals(matrix4f1);
      assertEquals(6.2831855F, matrix4f1.m33, 0.01F);
      assertEquals((-1079.3923F), matrix4f1.m10, 0.01F);
      assertEquals((-1079.3923F), matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals((-1179.5F), matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertFalse(boolean0);
      assertEquals(-0.0F, matrix4f1.m11, 0.01F);
      assertEquals((-0.058412936F), matrix4f1.m12, 0.01F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix4f matrix4f0 = Matrix4f.rotation(Float.NaN, vector3f0);
      Matrix4f matrix4f1 = matrix4f0.translate(vector3f0);
      matrix4f1.equals(matrix4f0);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      Matrix4f matrix4f1 = new Matrix4f(0.0F, 0.0F, 8.9050527E-4F, 8.9050527E-4F, 0.0F, 0.0F, (-0.9326395F), (-4.5308744E-4F), 0.0F, -0.0F, (-0.06589389F), 8.9050527E-4F, (-0.9326395F), 0.0F, 77.071F, 0.0F);
      boolean boolean0 = matrix4f0.equals(matrix4f1);
      assertEquals((-0.9326395F), matrix4f1.m12, 0.01F);
      assertEquals((-4.5308744E-4F), matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m11, 0.01F);
      assertEquals((-0.9326395F), matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(-0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(8.9050527E-4F, matrix4f1.m02, 0.01F);
      assertEquals(8.9050527E-4F, matrix4f1.m03, 0.01F);
      assertEquals(8.9050527E-4F, matrix4f1.m23, 0.01F);
      assertFalse(boolean0);
      assertEquals((-0.06589389F), matrix4f1.m22, 0.01F);
      assertEquals(77.071F, matrix4f1.m32, 0.01F);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix4f matrix4f0 = new Matrix4f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN);
      Matrix4f matrix4f1 = Matrix4f.scaled(vector3f0);
      matrix4f1.equals(matrix4f0);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m21, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Matrix4f matrix4f1 = matrix4f0.scale(0.0F);
      boolean boolean0 = matrix4f0.equals(matrix4f1);
      assertEquals(0.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m11, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      Matrix4f matrix4f1 = new Matrix4f(1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F);
      matrix4f0.equals(matrix4f1);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(1.0F, matrix4f1.m32, 0.01F);
      assertEquals(1.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      boolean boolean0 = matrix4f0.equals(matrix4f0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix4f matrix4f0 = new Matrix4f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, 3020.3F, Float.NaN, (-2207.36F), Float.NaN, (-3062.14F), (-2207.36F), Float.NaN);
      boolean boolean0 = matrix4f0.equals(vector3f0);
      assertEquals((-2207.36F), matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m30, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals(3020.3F, matrix4f0.m21, 0.01F);
      assertEquals((-2207.36F), matrix4f0.m32, 0.01F);
      assertEquals((-3062.14F), matrix4f0.m31, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      // Undeclared exception!
      try { 
        matrix4f0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // This matrix cannot be inverted
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f((FloatBuffer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      matrix4f0.toFloatBuffer(true);
      assertTrue(matrix4f0.isIdentity());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray0[0] = floatArray1;
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be of size 16.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      float[][] floatArray0 = new float[3][6];
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be of size 16.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      float[] floatArray0 = matrix4f0.IDENTITY.getColumn(3);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(matrix4f0.isIdentity());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      float float0 = matrix4f0.get(3, 3);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      float float0 = matrix4f0.get(3, 2);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(matrix4f0.isIdentity());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      float float0 = matrix4f0.get(3, 1);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      float float0 = matrix4f0.get(2, 3);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      float float0 = matrix4f0.get(2, 2);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      float float0 = matrix4f0.get(2, 1);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      float float0 = matrix4f0.get(1, 3);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      float float0 = matrix4f0.get(1, 2);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      float float0 = matrix4f0.get(1, 1);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      float float0 = matrix4f0.get(1, 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      // Undeclared exception!
      try { 
        matrix4f0.get(0, (-3128));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid indices into matrix.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      float float0 = matrix4f0.get(0, 2);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      float float0 = matrix4f0.get(0, 1);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      // Undeclared exception!
      try { 
        matrix4f0.get(2277, 2277);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid indices into matrix.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      float float0 = matrix4f0.get(3, 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      float float0 = matrix4f0.get(2, 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      float float0 = matrix4f0.get(0, 3);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      float[] floatArray0 = new float[16];
      Matrix4f matrix4f0 = new Matrix4f(floatArray0);
      matrix4f0.get(floatArray0, false);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f(floatArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be of size 16.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      // Undeclared exception!
      try { 
        matrix4f0.IDENTITY.fillFloatBuffer((FloatBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      Matrix4f matrix4f1 = matrix4f0.transpose();
      assertTrue(matrix4f1.equals((Object)matrix4f0));
      assertNotSame(matrix4f1, matrix4f0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.fromAngleNormalAxis(0.0F, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.perspective(0.0F, 0.0F, 0.0F, 0.0F);
      Matrix4f.equalIdentity(matrix4f0);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(-0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.multNormalAcross((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f((FloatBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      Matrix4f matrix4f0 = Matrix4f.rotation(quaternion0);
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        matrix4f0.fillFloatArray(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      Vector3f vector3f0 = matrix4f0.toTranslationVector();
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.rotate((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(4530.2F, 4530.2F, 4530.2F, 143.4F, (-0.5168187F), (-0.5168187F), 143.4F, 3022.16F, (-1864.673F), 0.0F, 3022.16F, 0.0F, 0.0F, 1.0F, 4892.5537F, 77.00661F);
      matrix4f0.hashCode();
      assertEquals(1.24743257E14F, matrix4f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.IDENTITY.translate((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      float[] floatArray0 = new float[16];
      matrix4f0.get(floatArray0);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.multAcross((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Matrix4f matrix4f1 = matrix4f0.invert();
      assertTrue(matrix4f1.equals((Object)matrix4f0));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      // Undeclared exception!
      try { 
        matrix4f0.rotate((Matrix3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.multNormal((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.rotation((-1810.2F), (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.translate((Vector2f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      Matrix4f matrix4f1 = matrix4f0.adjoint();
      assertTrue(matrix4f1.equals((Object)matrix4f0));
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      matrix4f0.toFloatBuffer();
      assertTrue(matrix4f0.isIdentity());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      // Undeclared exception!
      try { 
        matrix4f0.getColumn(31743);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid column index. 31743
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.fromAngleAxis(1378.8607F, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.translation((Vector2f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      float float0 = matrix4f0.determinant();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      matrix4f0.multLocal(3.0F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
  }
}
