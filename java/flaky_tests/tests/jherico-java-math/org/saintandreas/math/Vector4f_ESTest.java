/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 19:29:58 GMT 2022
 */

package org.saintandreas.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.saintandreas.math.Vector2f;
import org.saintandreas.math.Vector3f;
import org.saintandreas.math.Vector4f;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector4f_ESTest extends Vector4f_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Vector4f vector4f0 = new Vector4f(vector3f0);
      Vector4f vector4f1 = vector4f0.build(1.0F, (-489.5334F), 0.0F, 1011.627F);
      assertEquals(1.0F, vector4f1.x, 0.01F);
      assertEquals(0.0F, vector4f1.z, 0.01F);
      assertEquals(1011.627F, vector4f1.w, 0.01F);
      assertEquals((-489.5334F), vector4f1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f(0.0F);
      Vector4f vector4f1 = vector4f0.build((-1774.421F), 0.0F, (-189.0F), 3028.9724F);
      assertEquals((-1774.421F), vector4f1.x, 0.01F);
      assertEquals(0.0F, vector4f1.y, 0.01F);
      assertEquals((-189.0F), vector4f1.z, 0.01F);
      assertEquals(3028.9724F, vector4f1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      Vector4f vector4f1 = vector4f0.build(0.0F, 0.0F, 0.0F, 0.0F);
      assertTrue(vector4f1.equals((Object)vector4f0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Vector4f vector4f0 = new Vector4f(vector3f0, 1717.668F);
      Vector4f vector4f1 = vector4f0.build(1717.668F, Float.NaN, 2703.0547F, Float.NaN);
      assertEquals(Float.NaN, vector4f1.y, 0.01F);
      assertEquals(1717.668F, vector4f1.x, 0.01F);
      assertEquals(2703.0547F, vector4f1.z, 0.01F);
      assertEquals(Float.NaN, vector4f1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector4f vector4f0 = new Vector4f(vector2f0);
      Vector4f vector4f1 = vector4f0.build(0.0F, 1.0F, 0.0F, (-296.27F));
      assertEquals(0.0F, vector4f1.x, 0.01F);
      assertEquals(0.0F, vector4f1.z, 0.01F);
      assertEquals(1.0F, vector4f1.y, 0.01F);
      assertEquals((-296.27F), vector4f1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Vector4f vector4f0 = new Vector4f(vector3f0, 1717.668F);
      Vector4f vector4f1 = vector4f0.build(Float.NaN);
      assertEquals(Float.NaN, vector4f1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f(0.0F);
      Vector4f vector4f1 = vector4f0.build((-189.0F));
      assertEquals((-189.0F), vector4f1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector4f vector4f0 = null;
      try {
        vector4f0 = new Vector4f((Vector3f) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector4f vector4f0 = new Vector4f(vector2f0, 0.0F);
      assertEquals(1.0F, vector4f0.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      assertEquals(Float.NEGATIVE_INFINITY, vector4f0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector4f vector4f0 = new Vector4f(vector2f0, 1.0F, 1.0F);
      assertEquals(1.0F, vector4f0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector4f vector4f0 = null;
      try {
        vector4f0 = new Vector4f((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector4f vector4f0 = null;
      try {
        vector4f0 = new Vector4f((Vector2f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector4f vector4f0 = null;
      try {
        vector4f0 = new Vector4f((Vector2f) null, 386.25F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector4f vector4f0 = null;
      try {
        vector4f0 = new Vector4f((Vector2f) null, 57.295776F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      Vector4f vector4f1 = vector4f0.build(0.0F);
      assertEquals(0.0F, vector4f1.w, 0.01F);
  }
}
