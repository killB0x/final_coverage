/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 19:23:36 GMT 2022
 */

package org.saintandreas.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.saintandreas.math.Matrix3f;
import org.saintandreas.math.Vector2f;
import org.saintandreas.math.Vector3f;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Matrix3f_ESTest extends Matrix3f_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN);
      Matrix3f matrix3f1 = new Matrix3f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, (-4063.32F), Float.NaN, Float.NaN, Float.NaN);
      matrix3f1.equals(matrix3f0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Vector3f vector3f0 = Vector3f.UNIT_X;
      Matrix3f matrix3f1 = new Matrix3f((-75.0F), vector3f0);
      matrix3f0.equals(matrix3f1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      Matrix3f matrix3f1 = matrix3f0.invert();
      matrix3f0.equals(matrix3f1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      Vector3f vector3f1 = Vector3f.UNIT_Z;
      Matrix3f matrix3f1 = new Matrix3f(vector3f0, vector3f0, vector3f1);
      matrix3f0.equals(matrix3f1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      Vector2f vector2f0 = new Vector2f();
      Vector3f vector3f1 = new Vector3f(vector2f0);
      Matrix3f matrix3f1 = new Matrix3f(vector3f0, vector3f1, vector3f1);
      matrix3f0.equals(matrix3f1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      Matrix3f matrix3f1 = new Matrix3f((-1902.5002F), (-1902.5002F), 0, (-5015.0F), 306.57F, (-5015.0F), 0.017453292F, 777372.9F, 777372.9F);
      matrix3f1.equals(matrix3f0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      matrix3f0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN);
      matrix3f0.adjoint();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      matrix3f0.invert();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Matrix3f matrix3f0 = new Matrix3f((-118.1F), vector3f0);
      matrix3f0.isIdentity();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(659.0F, 330.75735F, 1.1920929E-7F, 0.0F, (-49.4501F), 1.0F, 1.1920929E-7F, 841759.1F, 1483.47F);
      matrix3f0.isIdentity();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      float[] floatArray0 = new float[9];
      matrix3f0.fillFloatArray(floatArray0, false);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(1490.914F);
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      float[] floatArray0 = new float[7];
      // Undeclared exception!
      try { 
        matrix3f0.fillFloatArray(floatArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      float[] floatArray0 = new float[9];
      matrix3f0.fillFloatArray(floatArray0, true);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Matrix3f matrix3f1 = new Matrix3f(matrix3f0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(777372.9F, 1490.914F, (-2.0F), 369.58F, 564.5927F, 6668473.5F, (-4750.0F), 0.0F, 1490.914F);
      Matrix3f matrix3f1 = matrix3f0.transpose();
      assertEquals((-4.6571538E13F), matrix3f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Matrix3f matrix3f1 = matrix3f0.scale(vector3f0);
      assertTrue(matrix3f1.equals((Object)matrix3f0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix3f matrix3f1 = matrix3f0.scale(vector3f0);
      assertEquals(Float.NaN, matrix3f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Matrix3f matrix3f0 = new Matrix3f(0.0F, 1.0F, 1.0F, 659.0F, 257185.05F, 1843.2129F, 2307.261F, 1519.5731F, 1.0F);
      Matrix3f matrix3f1 = matrix3f0.scale(vector3f0);
      assertTrue(matrix3f1.equals((Object)matrix3f0));
      assertEquals((-5.8813952E8F), matrix3f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      Vector3f vector3f0 = Vector3f.ZERO;
      Vector3f vector3f1 = matrix3f0.mult(vector3f0);
      assertTrue(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      Matrix3f matrix3f0 = new Matrix3f(Float.POSITIVE_INFINITY, 1381.122F, 2503.0F, Float.POSITIVE_INFINITY, (-1338.9132F), 1, (-1351.4304F), 2238127.0F, 2540.2F);
      Vector3f vector3f1 = matrix3f0.mult(vector3f0);
      assertEquals(Float.NaN, vector3f1.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f1.x, 0.01F);
      assertEquals(Float.NaN, matrix3f0.determinant(), 0.01F);
      assertEquals(Float.NaN, vector3f1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-699.6F));
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      Matrix3f matrix3f1 = matrix3f0.scale(vector3f0);
      Matrix3f matrix3f2 = matrix3f1.transpose();
      Vector3f vector3f1 = matrix3f2.mult(vector3f0);
      assertEquals((-1.02723686E9F), vector3f1.z, 0.01F);
      assertEquals((-1.02723686E9F), vector3f1.y, 0.01F);
      assertEquals((-1.02723686E9F), vector3f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Matrix3f matrix3f1 = matrix3f0.mult(matrix3f0);
      assertTrue(matrix3f1.isIdentity());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f((-861.086F), (-1693.0F), (-1693.0F), (-861.086F), (-1693.0F), (-1693.0F), (-22.94102F), (-1693.0F), (-22.94102F));
      Matrix3f matrix3f1 = matrix3f0.mult(matrix3f0);
      assertEquals((-256.0F), matrix3f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix3f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f((-861.086F), (-1693.0F), (-1693.0F), (-861.086F), (-1693.0F), (-1693.0F), (-22.94102F), (-1693.0F), (-22.94102F));
      Matrix3f matrix3f1 = Matrix3f.IDENTITY;
      Matrix3f matrix3f2 = matrix3f0.mult(matrix3f1);
      assertTrue(matrix3f2.equals((Object)matrix3f0));
      assertEquals((-256.0F), matrix3f2.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(0.0F, 1.0F, 1.0F, 659.0F, 257185.05F, 1843.2129F, 2307.261F, 1519.5731F, 1.0F);
      Matrix3f matrix3f1 = matrix3f0.invert();
      assertEquals((-1.7002766E-9F), matrix3f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-699.6F));
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      Matrix3f matrix3f1 = matrix3f0.scale(vector3f0);
      Vector3f vector3f1 = matrix3f1.getRow(2);
      assertEquals(489440.12F, vector3f1.z, 0.01F);
      assertEquals(489440.12F, vector3f1.y, 0.01F);
      assertEquals(489440.12F, vector3f1.x, 0.01F);
      assertEquals(-0.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-699.6F));
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      Vector3f vector3f1 = matrix3f0.getRow(1);
      assertEquals(-0.0F, matrix3f0.determinant(), 0.01F);
      assertTrue(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f((-861.086F), (-1693.0F), (-1693.0F), (-861.086F), (-1693.0F), (-1693.0F), (-22.94102F), (-1693.0F), (-22.94102F));
      Vector3f vector3f0 = matrix3f0.getColumn(0);
      assertEquals((-861.086F), vector3f0.y, 0.01F);
      assertEquals((-861.086F), vector3f0.x, 0.01F);
      assertEquals((-256.0F), matrix3f0.determinant(), 0.01F);
      assertEquals((-22.94102F), vector3f0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f((-861.086F), (-1693.0F), (-1693.0F), (-861.086F), (-1693.0F), (-1693.0F), (-22.94102F), (-1693.0F), (-22.94102F));
      float float0 = matrix3f0.get(0, 0);
      assertEquals((-861.086F), float0, 0.01F);
      assertEquals((-256.0F), matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, (-983.916F), 1.0F, 1.0F, 1.0F);
      float float0 = matrix3f0.determinant();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(0.0F, 1.0F, 1.0F, 659.0F, 257185.05F, 1843.2129F, 2307.261F, 1519.5731F, 1.0F);
      float float0 = matrix3f0.determinant();
      assertEquals((-5.8813952E8F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      Matrix3f matrix3f1 = matrix3f0.adjoint();
      assertTrue(matrix3f1.equals((Object)matrix3f0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      // Undeclared exception!
      try { 
        matrix3f0.get((float[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix3f matrix3f0 = new Matrix3f(Float.NaN, vector3f0);
      // Undeclared exception!
      try { 
        matrix3f0.fillFloatArray((float[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix3f.equalIdentity((Matrix3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      float float0 = matrix3f0.determinant();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, (-2005.954F), Float.NaN);
      boolean boolean0 = Matrix3f.equalIdentity(matrix3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, (-139.1008F), (-1.1081857E-13F), Float.NaN);
      boolean boolean0 = Matrix3f.equalIdentity(matrix3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, (-501.1383F), Float.NaN, Float.NaN, Float.NaN);
      boolean boolean0 = Matrix3f.equalIdentity(matrix3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(Float.NaN, Float.NaN, Float.NaN, (-0.63F), Float.NaN, (-501.1383F), (-0.63F), Float.NaN, Float.NaN);
      boolean boolean0 = Matrix3f.equalIdentity(matrix3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Vector3f vector3f1 = Vector3f.UNIT_XYZ;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f1);
      boolean boolean0 = Matrix3f.equalIdentity(matrix3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Matrix3f matrix3f0 = new Matrix3f(1.0F, vector3f0);
      Matrix3f.equalIdentity(matrix3f0);
      assertEquals(4.637541F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Vector3f vector3f1 = Vector3f.UNIT_Y;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f1);
      boolean boolean0 = Matrix3f.equalIdentity(matrix3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(1.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F);
      boolean boolean0 = Matrix3f.equalIdentity(matrix3f0);
      assertEquals(0.0F, matrix3f0.determinant(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      boolean boolean0 = Matrix3f.equalIdentity(matrix3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      boolean boolean0 = Matrix3f.equalIdentity(matrix3f0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      Vector2f vector2f0 = new Vector2f(Float.NaN, Float.NaN);
      Vector3f vector3f1 = new Vector3f(vector2f0);
      Matrix3f matrix3f1 = new Matrix3f(vector3f0, vector3f0, vector3f1);
      boolean boolean0 = matrix3f0.equals(matrix3f1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Matrix3f matrix3f1 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      boolean boolean0 = matrix3f1.equals(matrix3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      Matrix3f matrix3f0 = new Matrix3f(1.0E-4F, vector3f0);
      Matrix3f matrix3f1 = matrix3f0.transpose();
      boolean boolean0 = matrix3f1.equals(matrix3f0);
      assertFalse(boolean0);
      assertEquals(1.0F, matrix3f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      Matrix3f matrix3f1 = new Matrix3f(1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F);
      boolean boolean0 = matrix3f1.equals(matrix3f0);
      assertFalse(boolean0);
      assertFalse(matrix3f0.equals((Object)matrix3f1));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN);
      Matrix3f matrix3f1 = new Matrix3f(Float.NaN, Float.NaN, Float.NaN, 0.31830987F, Float.NaN, 750.8234F, 0.070167854F, Float.NaN, Float.NaN);
      boolean boolean0 = matrix3f1.equals(matrix3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f();
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      Matrix3f matrix3f1 = new Matrix3f(0.0F, 0.0F, 1.0F, 2238127.0F, 0.0F, (-0.76165843F), 1.0F, 378.0F, 0.0F);
      boolean boolean0 = matrix3f0.equals(matrix3f1);
      assertFalse(boolean0);
      assertEquals(8.4601203E8F, matrix3f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Matrix3f matrix3f1 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      boolean boolean0 = matrix3f0.equals(matrix3f1);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      Matrix3f matrix3f1 = new Matrix3f();
      boolean boolean0 = matrix3f1.equals(matrix3f0);
      assertFalse(boolean0);
      assertTrue(matrix3f1.isIdentity());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      Matrix3f matrix3f1 = new Matrix3f();
      boolean boolean0 = matrix3f1.equals(matrix3f0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      boolean boolean0 = matrix3f0.equals(matrix3f0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      boolean boolean0 = matrix3f0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      Matrix3f matrix3f0 = new Matrix3f((-1.556364E-6F), vector3f0);
      boolean boolean0 = matrix3f0.isIdentity();
      assertFalse(boolean0);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F);
      boolean boolean0 = matrix3f0.isIdentity();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Matrix3f matrix3f0 = new Matrix3f(1.1920929E-7F, vector3f0);
      boolean boolean0 = matrix3f0.isIdentity();
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      boolean boolean0 = matrix3f0.isIdentity();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      boolean boolean0 = matrix3f0.isIdentity();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      boolean boolean0 = matrix3f0.isIdentity();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      // Undeclared exception!
      try { 
        matrix3f0.getRow(82);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid row index. 82
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Vector3f vector3f0 = matrix3f0.getRow(2);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      Vector3f vector3f0 = matrix3f0.getRow(1);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Vector3f vector3f0 = matrix3f0.getRow(0);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      // Undeclared exception!
      try { 
        matrix3f0.getColumn(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid column index. 10
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Vector3f vector3f0 = matrix3f0.getColumn(1);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      Vector3f vector3f0 = matrix3f0.IDENTITY.getColumn(2);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      Vector3f vector3f0 = matrix3f0.IDENTITY.getColumn(0);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      float[] floatArray0 = new float[16];
      matrix3f0.get(floatArray0, false);
      assertEquals(0.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      float[] floatArray0 = new float[16];
      matrix3f0.get(floatArray0, true);
      assertEquals(16, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      float[] floatArray0 = new float[9];
      matrix3f0.get(floatArray0, false);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      float[] floatArray0 = new float[9];
      matrix3f0.get(floatArray0, true);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        matrix3f0.get(floatArray0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array size must be 9 or 16 in Matrix3f.get().
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      float float0 = matrix3f0.get(2, 2);
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      float float0 = matrix3f0.get(2, 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      float float0 = matrix3f0.get(1, 1);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      float float0 = matrix3f0.get(1, 0);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      float float0 = matrix3f0.get(0, 2);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      float float0 = matrix3f0.get(0, 1);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      float float0 = matrix3f0.get(2, 1);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      float float0 = matrix3f0.get(1, 2);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      // Undeclared exception!
      try { 
        matrix3f0.get(4327, 4327);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid indices into matrix.
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      // Undeclared exception!
      try { 
        matrix3f0.get(0, (-3657));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid indices into matrix.
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Matrix3f matrix3f0 = null;
      try {
        matrix3f0 = new Matrix3f((Vector3f) null, (Vector3f) null, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Matrix3f matrix3f1 = matrix3f0.transpose();
      assertTrue(matrix3f1.equals((Object)matrix3f0));
      assertTrue(matrix3f1.isIdentity());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      Matrix3f matrix3f1 = matrix3f0.adjoint();
      assertTrue(matrix3f1.equals((Object)matrix3f0));
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      Matrix3f matrix3f1 = matrix3f0.invert();
      assertTrue(matrix3f1.isIdentity());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      // Undeclared exception!
      try { 
        matrix3f0.scale((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      // Undeclared exception!
      try { 
        matrix3f0.mult((Matrix3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Matrix3f matrix3f0 = null;
      try {
        matrix3f0 = new Matrix3f((Matrix3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      // Undeclared exception!
      try { 
        matrix3f0.mult((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Matrix3f matrix3f0 = null;
      try {
        matrix3f0 = new Matrix3f(Float.NEGATIVE_INFINITY, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }
}
