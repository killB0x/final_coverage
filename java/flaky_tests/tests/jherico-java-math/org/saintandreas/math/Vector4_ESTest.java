/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 19:27:22 GMT 2022
 */

package org.saintandreas.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.saintandreas.math.Quaternion;
import org.saintandreas.math.Vector2f;
import org.saintandreas.math.Vector3f;
import org.saintandreas.math.Vector4f;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector4_ESTest extends Vector4_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_RED;
      float float0 = vector4f0.get(3);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NAN;
      float float0 = vector4f0.get(0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.POSITIVE_INFINITY;
      Vector4f vector4f1 = Vector4f.UNIT_Y;
      float float0 = vector4f0.angleBetween(vector4f1);
      assertEquals(3.1415927F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f(0.33333334F, 0.33333334F, 1970.4F, 1970.4F);
      float float0 = vector4f0.getZ();
      assertEquals(1970.4F, float0, 0.01F);
      assertEquals(0.33333334F, vector4f0.x, 0.01F);
      assertEquals(1970.4F, vector4f0.w, 0.01F);
      assertEquals(0.33333334F, vector4f0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_WHITE;
      Vector4f vector4f1 = vector4f0.build(3289.5F, 1867.0F, 6413.0337F, 0.0F);
      float float0 = vector4f1.getY();
      assertEquals(6413.0337F, vector4f1.z, 0.01F);
      assertEquals(3289.5F, vector4f1.x, 0.01F);
      assertEquals(0.0F, vector4f1.w, 0.01F);
      assertEquals(1867.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector4f vector4f0 = new Vector4f(vector2f0, 0.0F, 0.0F);
      float float0 = vector4f0.getX();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1.0F, vector4f0.y, 0.01F);
      assertEquals(0.0F, vector4f0.z, 0.01F);
      assertEquals(0.0F, vector4f0.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      Vector4f vector4f0 = new Vector4f(vector3f0, (-380.0F));
      String string0 = vector4f0.toString();
      assertEquals("(1.0, 0.0, 0.0, -380.0)", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_Z;
      String string0 = vector4f0.toString();
      assertEquals("(0.0, 0.0, 1.0, 0.0)", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      Vector4f vector4f1 = new Vector4f(vector3f0, 0.0F);
      boolean boolean0 = vector4f1.equals(vector4f0);
      assertEquals(0.0F, vector4f1.z, 0.01F);
      assertEquals(0.0F, vector4f1.x, 0.01F);
      assertEquals(1.0F, vector4f1.y, 0.01F);
      assertFalse(boolean0);
      assertFalse(vector4f0.equals((Object)vector4f1));
      assertEquals(0.0F, vector4f1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector4f vector4f0 = new Vector4f(vector2f0);
      Vector4f vector4f1 = vector4f0.subtract(0.0F);
      boolean boolean0 = vector4f0.equals(vector4f1);
      assertEquals(1.0F, vector4f1.y, 0.01F);
      assertEquals(0.0F, vector4f0.z, 0.01F);
      assertEquals(1.0F, vector4f0.w, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      Vector4f vector4f0 = Vector4f.COLOR_BLUE;
      boolean boolean0 = vector4f0.equals(quaternion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      boolean boolean0 = vector4f0.equals(quaternion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector4f vector4f0 = new Vector4f(vector2f0);
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis(0.0F, vector3f0);
      boolean boolean0 = vector4f0.equals(quaternion0);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, vector4f0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector4f0.x, 0.01F);
      assertEquals(0.0F, vector4f0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f((-2.0F), (-3458.54F), (-3458.54F), (-2468.632F));
      float float0 = vector4f0.getZ();
      assertEquals((-3458.54F), float0, 0.01F);
      assertEquals((-2468.632F), vector4f0.w, 0.01F);
      assertEquals((-2.0F), vector4f0.x, 0.01F);
      assertEquals((-3458.54F), vector4f0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_BLUE;
      float float0 = vector4f0.getY();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_BLUE;
      Vector4f vector4f1 = vector4f0.subtract(18.646563F);
      float float0 = vector4f1.getY();
      assertEquals((-18.646563F), float0, 0.01F);
      assertEquals((-18.646563F), vector4f1.x, 0.01F);
      assertEquals((-17.646563F), vector4f1.w, 0.01F);
      assertEquals((-17.646563F), vector4f1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f(0.33333334F, 0.33333334F, 1970.4F, 1970.4F);
      float float0 = vector4f0.getX();
      assertEquals(1970.4F, vector4f0.z, 0.01F);
      assertEquals(0.33333334F, vector4f0.y, 0.01F);
      assertEquals(1970.4F, vector4f0.w, 0.01F);
      assertEquals(0.33333334F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NEGATIVE_INFINITY;
      float float0 = vector4f0.getX();
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector4f vector4f0 = new Vector4f(vector2f0, 0.0F, 0.0F);
      float float0 = vector4f0.getW();
      assertEquals(0.0F, vector4f0.z, 0.01F);
      assertEquals(0.0F, vector4f0.x, 0.01F);
      assertEquals(1.0F, vector4f0.y, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector3f vector3f0 = vector2f0.cross(vector2f0);
      Vector4f vector4f0 = new Vector4f(vector3f0, 1.0F);
      float float0 = vector4f0.getW();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(0.0F, vector4f0.y, 0.01F);
      assertEquals(0.0F, vector4f0.z, 0.01F);
      assertEquals(0.0F, vector4f0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(517.07F, 517.07F, (-1354.0142F));
      Vector4f vector4f0 = new Vector4f(vector3f0, (-1354.0142F));
      float float0 = vector4f0.getW();
      assertEquals(517.07F, vector4f0.x, 0.01F);
      assertEquals((-1354.0142F), vector4f0.z, 0.01F);
      assertEquals(517.07F, vector4f0.y, 0.01F);
      assertEquals((-1354.0142F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f((-2287.0F));
      float float0 = vector4f0.get(0);
      assertEquals((-2287.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NAN;
      float[] floatArray0 = new float[7];
      floatArray0[2] = 1186.0F;
      Vector4f vector4f1 = vector4f0.build(floatArray0);
      assertEquals(0.0F, vector4f1.w, 0.01F);
      assertEquals(1186.0F, vector4f1.z, 0.01F);
      assertEquals(0.0F, vector4f1.x, 0.01F);
      assertEquals(0.0F, vector4f1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NEGATIVE_INFINITY;
      float[] floatArray0 = new float[5];
      floatArray0[2] = Float.NEGATIVE_INFINITY;
      Vector4f vector4f1 = vector4f0.build(floatArray0);
      assertEquals(0.0F, vector4f1.w, 0.01F);
      assertEquals(0.0F, vector4f1.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector4f1.z, 0.01F);
      assertEquals(0.0F, vector4f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NEGATIVE_INFINITY;
      float[] floatArray0 = new float[5];
      floatArray0[1] = 1.0F;
      Vector4f vector4f1 = vector4f0.build(floatArray0);
      assertEquals(0.0F, vector4f1.x, 0.01F);
      assertEquals(0.0F, vector4f1.z, 0.01F);
      assertEquals(1.0F, vector4f1.y, 0.01F);
      assertEquals(0.0F, vector4f1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_X;
      float[] floatArray0 = new float[8];
      floatArray0[1] = (-5.2831855F);
      Vector4f vector4f1 = vector4f0.build(floatArray0);
      assertEquals(0.0F, vector4f1.z, 0.01F);
      assertEquals(0.0F, vector4f1.w, 0.01F);
      assertEquals(0.0F, vector4f1.x, 0.01F);
      assertEquals((-5.2831855F), vector4f1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_W;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      Vector4f vector4f1 = vector4f0.build(floatArray0);
      assertEquals(0.0F, vector4f1.w, 0.01F);
      assertEquals(0.0F, vector4f1.z, 0.01F);
      assertEquals(1.0F, vector4f1.x, 0.01F);
      assertEquals(0.0F, vector4f1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NEGATIVE_INFINITY;
      float[] floatArray0 = new float[5];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      Vector4f vector4f1 = vector4f0.build(floatArray0);
      assertEquals(0.0F, vector4f1.y, 0.01F);
      assertEquals(0.0F, vector4f1.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector4f1.x, 0.01F);
      assertEquals(0.0F, vector4f1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NAN;
      float[] floatArray0 = new float[7];
      floatArray0[3] = 1.3493689F;
      Vector4f vector4f1 = vector4f0.build(floatArray0);
      assertEquals(1.3493689F, vector4f1.w, 0.01F);
      assertEquals(0.0F, vector4f1.x, 0.01F);
      assertEquals(0.0F, vector4f1.y, 0.01F);
      assertEquals(0.0F, vector4f1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NEGATIVE_INFINITY;
      float[] floatArray0 = new float[5];
      floatArray0[3] = Float.NEGATIVE_INFINITY;
      Vector4f vector4f1 = vector4f0.build(floatArray0);
      assertEquals(Float.NEGATIVE_INFINITY, vector4f1.w, 0.01F);
      assertEquals(0.0F, vector4f1.z, 0.01F);
      assertEquals(0.0F, vector4f1.y, 0.01F);
      assertEquals(0.0F, vector4f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector3f vector3f0 = new Vector3f(vector2f0);
      Vector4f vector4f0 = new Vector4f(vector3f0, 0.0F);
      Vector4f vector4f1 = vector4f0.build(0.0F);
      assertEquals(0.0F, vector4f0.w, 0.01F);
      assertEquals(0.0F, vector4f0.z, 0.01F);
      assertEquals(1.0F, vector4f0.x, 0.01F);
      assertEquals(1.0F, vector4f0.y, 0.01F);
      assertEquals(0.0F, vector4f1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.ZERO;
      Vector4f vector4f1 = vector4f0.build(1201.4653F);
      assertEquals(1201.4653F, vector4f1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.ZERO;
      Vector4f vector4f1 = vector4f0.build((-1838.0403F));
      assertEquals((-1838.0403F), vector4f1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector3f vector3f0 = vector2f0.cross(vector2f0);
      Vector4f vector4f0 = new Vector4f(vector3f0, 1.0F);
      float float0 = vector4f0.angleBetween(vector4f0);
      assertEquals(0.0F, vector4f0.x, 0.01F);
      assertEquals(0.0F, vector4f0.y, 0.01F);
      assertEquals(0.0F, vector4f0.z, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1.0F, vector4f0.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        vector4f0.build(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.saintandreas.math.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      float float0 = vector4f0.get(3);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NAN;
      float float0 = vector4f0.get(2);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_Y;
      float float0 = vector4f0.get(1);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      // Undeclared exception!
      try { 
        vector4f0.get(32768);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must be either 0, 1, 2 or 3
         //
         verifyException("org.saintandreas.math.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      float float0 = vector4f0.get(0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_BLUE;
      Vector2f vector2f0 = Vector2f.UNIT_X;
      Vector2f vector2f1 = Vector2f.UNIT_XY;
      Vector3f vector3f0 = vector2f0.cross(vector2f1);
      Vector4f vector4f1 = new Vector4f(vector3f0);
      boolean boolean0 = vector4f0.equals(vector4f1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.0F, 1.0F, 1.0F, (-800.9F));
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      boolean boolean0 = vector4f0.equals(quaternion0);
      assertEquals(1.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals((-800.9F), quaternion0.w, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.0F, 1309.0F, 0.0F, 0.0F);
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      boolean boolean0 = vector4f0.equals(quaternion0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1309.0F, quaternion0.y, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector4f vector4f0 = new Vector4f(vector2f0);
      Vector4f vector4f1 = new Vector4f();
      boolean boolean0 = vector4f0.equals(vector4f1);
      assertEquals(1.0F, vector4f0.y, 0.01F);
      assertEquals(1.0F, vector4f0.x, 0.01F);
      assertEquals(1.0F, vector4f0.w, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, vector4f0.z, 0.01F);
      assertEquals(0.0F, vector4f1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      Vector4f vector4f1 = Vector4f.UNIT_Y;
      boolean boolean0 = vector4f0.equals(vector4f1);
      assertFalse(vector4f1.equals((Object)vector4f0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      Object object0 = new Object();
      boolean boolean0 = vector4f0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      boolean boolean0 = vector4f0.equals(vector4f0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      // Undeclared exception!
      try { 
        vector4f0.angleBetween((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NAN;
      float[] floatArray0 = vector4f0.toArray();
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN, Float.NaN}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_RED;
      float float0 = vector4f0.getZ();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      // Undeclared exception!
      try { 
        vector4f0.build((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector4", e);
      }
  }
}
