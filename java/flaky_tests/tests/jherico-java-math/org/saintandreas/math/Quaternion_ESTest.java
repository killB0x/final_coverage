/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 19:25:10 GMT 2022
 */

package org.saintandreas.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.saintandreas.math.Matrix3f;
import org.saintandreas.math.Matrix4f;
import org.saintandreas.math.Quaternion;
import org.saintandreas.math.Vector3f;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Quaternion_ESTest extends Quaternion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      
      // Undeclared exception!
      try { 
        quaternion0.divide(quaternion0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      
      Quaternion quaternion1 = Quaternion.ZERO;
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals(0.0F, quaternion1.getW(), 0.01F);
      assertEquals(0.0F, quaternion1.getZ(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      
      Quaternion quaternion2 = quaternion0.slerp(quaternion1, 0.0F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertNotNull(quaternion2);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals(0.0F, quaternion1.getW(), 0.01F);
      assertEquals(0.0F, quaternion1.getZ(), 0.01F);
      assertEquals(0.0F, quaternion2.getY(), 0.01F);
      assertEquals(0.0F, quaternion2.getX(), 0.01F);
      assertEquals(1.0F, quaternion2.getW(), 0.01F);
      assertEquals(0.0F, quaternion2.getZ(), 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertTrue(quaternion2.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      
      Quaternion quaternion1 = Quaternion.fromAngleAxis(4.560048E7F, vector3f0);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.80783933F, quaternion1.w, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals((-0.5894028F), quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.80783933F, quaternion1.getW(), 0.01F);
      assertEquals(-0.0F, quaternion1.getX(), 0.01F);
      assertEquals(-0.0F, quaternion1.getY(), 0.01F);
      assertEquals((-0.5894028F), quaternion1.getZ(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      
      Quaternion quaternion2 = quaternion1.slerp(quaternion0, 0.0F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.80783933F, quaternion1.w, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals((-0.5894028F), quaternion1.z, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals((-0.5894028F), quaternion2.z, 0.01F);
      assertEquals(0.80783933F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertNotNull(quaternion2);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.80783933F, quaternion1.getW(), 0.01F);
      assertEquals(-0.0F, quaternion1.getX(), 0.01F);
      assertEquals(-0.0F, quaternion1.getY(), 0.01F);
      assertEquals((-0.5894028F), quaternion1.getZ(), 0.01F);
      assertEquals(0.0F, quaternion2.getY(), 0.01F);
      assertEquals(0.0F, quaternion2.getX(), 0.01F);
      assertEquals(0.80783933F, quaternion2.getW(), 0.01F);
      assertEquals((-0.5894028F), quaternion2.getZ(), 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(0.0F, 0.0F, (-1662.9323F));
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals((-1662.9323F), vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      assertEquals((-1662.9323F), vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromAngleAxis(0.0F, vector3f0);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals((-1662.9323F), vector3f0.z, 0.01F);
      assertEquals(-0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals((-1662.9323F), vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(-0.0F, quaternion0.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(0.0F, (-3263.0F), 0.0F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals((-3263.0F), vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals((-3263.0F), vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis(2.3149288F, vector3f0);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals((-3263.0F), vector3f0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals((-2988.2148F), quaternion0.y, 0.01F);
      assertEquals(0.40166292F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals((-3263.0F), vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals((-2988.2148F), quaternion0.getY(), 0.01F);
      assertEquals(0.40166292F, quaternion0.getW(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getY(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis(0.0F, vector3f0);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getX(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertNotNull(matrix4f0);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getX(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
      assertEquals(Float.NaN, matrix4f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(2875.2F, (-3082.1448F), (-3082.1448F));
      assertEquals(0.15176794F, quaternion0.z, 0.01F);
      assertEquals((-0.07596253F), quaternion0.y, 0.01F);
      assertEquals(0.2973515F, quaternion0.x, 0.01F);
      assertEquals(0.93956286F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals((-0.07596253F), quaternion0.getY(), 0.01F);
      assertEquals(0.2973515F, quaternion0.getX(), 0.01F);
      assertEquals(0.93956286F, quaternion0.getW(), 0.01F);
      assertEquals(0.15176794F, quaternion0.getZ(), 0.01F);
      
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      assertEquals(0.15176794F, quaternion0.z, 0.01F);
      assertEquals((-0.07596253F), quaternion0.y, 0.01F);
      assertEquals(0.2973515F, quaternion0.x, 0.01F);
      assertEquals(0.93956286F, quaternion0.w, 0.01F);
      assertEquals((-0.58181816F), matrix4f0.m12, 0.01F);
      assertEquals(0.94239235F, matrix4f0.m00, 0.01F);
      assertEquals(0.23299997F, matrix4f0.m20, 0.01F);
      assertEquals(0.24001586F, matrix4f0.m10, 0.01F);
      assertEquals((-0.052486286F), matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals((-0.33036613F), matrix4f0.m01, 0.01F);
      assertEquals(0.8116236F, matrix4f0.m22, 0.01F);
      assertEquals(0.5357035F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.77709717F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertNotNull(matrix4f0);
      assertEquals((-0.07596253F), quaternion0.getY(), 0.01F);
      assertEquals(0.2973515F, quaternion0.getX(), 0.01F);
      assertEquals(0.93956286F, quaternion0.getW(), 0.01F);
      assertEquals(0.15176794F, quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertFalse(matrix4f0.isIdentity());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getY(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis(0.0F, vector3f0);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getX(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getZ(), 0.01F);
      
      Vector3f[] vector3fArray0 = new Vector3f[15];
      quaternion0.toAxes(vector3fArray0);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(15, vector3fArray0.length);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getX(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      
      float[] floatArray0 = quaternion0.toAngles((float[]) null);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.5707964F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        quaternion0.toAngles(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Angles array must have three elements
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-328.10355F));
      assertEquals((-328.10355F), vector3f0.y, 0.01F);
      assertEquals((-328.10355F), vector3f0.x, 0.01F);
      assertEquals((-328.10355F), vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      assertEquals((-328.10355F), vector3f0.getY(), 0.01F);
      assertEquals((-328.10355F), vector3f0.getX(), 0.01F);
      assertEquals((-328.10355F), vector3f0.getZ(), 0.01F);
      
      Vector3f vector3f1 = new Vector3f((-1.0F), (-3957.4553F), (-328.10355F));
      assertEquals((-328.10355F), vector3f1.z, 0.01F);
      assertEquals((-1.0F), vector3f1.x, 0.01F);
      assertEquals((-3957.4553F), vector3f1.y, 0.01F);
      assertNotNull(vector3f1);
      assertEquals((-328.10355F), vector3f1.getZ(), 0.01F);
      assertEquals((-1.0F), vector3f1.getX(), 0.01F);
      assertEquals((-3957.4553F), vector3f1.getY(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
      
      Quaternion quaternion0 = Quaternion.fromAxes(vector3f0, vector3f1, vector3f1);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals((-328.10355F), vector3f0.y, 0.01F);
      assertEquals((-328.10355F), vector3f0.x, 0.01F);
      assertEquals((-328.10355F), vector3f0.z, 0.01F);
      assertEquals((-328.10355F), vector3f1.z, 0.01F);
      assertEquals((-1.0F), vector3f1.x, 0.01F);
      assertEquals((-3957.4553F), vector3f1.y, 0.01F);
      assertEquals(31.458128F, quaternion0.z, 0.01F);
      assertEquals((-34.057644F), quaternion0.y, 0.01F);
      assertEquals((-2.5995152F), quaternion0.w, 0.01F);
      assertEquals((-2.6154094F), quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      assertEquals((-328.10355F), vector3f0.getY(), 0.01F);
      assertEquals((-328.10355F), vector3f0.getX(), 0.01F);
      assertEquals((-328.10355F), vector3f0.getZ(), 0.01F);
      assertEquals((-328.10355F), vector3f1.getZ(), 0.01F);
      assertEquals((-1.0F), vector3f1.getX(), 0.01F);
      assertEquals((-3957.4553F), vector3f1.getY(), 0.01F);
      assertEquals(31.458128F, quaternion0.getZ(), 0.01F);
      assertEquals((-2.5995152F), quaternion0.getW(), 0.01F);
      assertEquals((-34.057644F), quaternion0.getY(), 0.01F);
      assertEquals((-2.6154094F), quaternion0.getX(), 0.01F);
      assertFalse(vector3f0.equals((Object)vector3f1));
      assertFalse(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      
      Vector3f[] vector3fArray0 = new Vector3f[3];
      quaternion0.toAxes(vector3fArray0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(3, vector3fArray0.length);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles((-3038.81F), (-3038.81F), (-3038.81F));
      assertEquals((-0.6556302F), quaternion0.w, 0.01F);
      assertEquals(0.51792586F, quaternion0.x, 0.01F);
      assertEquals(0.51792586F, quaternion0.y, 0.01F);
      assertEquals((-0.18345244F), quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.51792586F, quaternion0.getY(), 0.01F);
      assertEquals((-0.18345244F), quaternion0.getZ(), 0.01F);
      assertEquals(0.51792586F, quaternion0.getX(), 0.01F);
      assertEquals((-0.6556302F), quaternion0.getW(), 0.01F);
      
      Quaternion quaternion1 = Quaternion.slerp(quaternion0, quaternion0, 0.603923F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals((-0.6556302F), quaternion0.w, 0.01F);
      assertEquals(0.51792586F, quaternion0.x, 0.01F);
      assertEquals(0.51792586F, quaternion0.y, 0.01F);
      assertEquals((-0.18345244F), quaternion0.z, 0.01F);
      assertEquals((-0.18345244F), quaternion1.z, 0.01F);
      assertEquals(0.51792586F, quaternion1.x, 0.01F);
      assertEquals((-0.6556302F), quaternion1.w, 0.01F);
      assertEquals(0.51792586F, quaternion1.y, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(0.51792586F, quaternion0.getY(), 0.01F);
      assertEquals((-0.18345244F), quaternion0.getZ(), 0.01F);
      assertEquals(0.51792586F, quaternion0.getX(), 0.01F);
      assertEquals((-0.6556302F), quaternion0.getW(), 0.01F);
      assertEquals(0.51792586F, quaternion1.getY(), 0.01F);
      assertEquals((-0.6556302F), quaternion1.getW(), 0.01F);
      assertEquals((-0.18345244F), quaternion1.getZ(), 0.01F);
      assertEquals(0.51792586F, quaternion1.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      
      Quaternion quaternion1 = quaternion0.slerp(quaternion0, 0.0F);
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals(0.0F, quaternion1.getW(), 0.01F);
      assertEquals(0.0F, quaternion1.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(2875.2F, (-3082.1448F), (-3082.1448F));
      assertEquals(0.15176794F, quaternion0.z, 0.01F);
      assertEquals(0.93956286F, quaternion0.w, 0.01F);
      assertEquals(0.2973515F, quaternion0.x, 0.01F);
      assertEquals((-0.07596253F), quaternion0.y, 0.01F);
      assertNotNull(quaternion0);
      assertEquals((-0.07596253F), quaternion0.getY(), 0.01F);
      assertEquals(0.2973515F, quaternion0.getX(), 0.01F);
      assertEquals(0.15176794F, quaternion0.getZ(), 0.01F);
      assertEquals(0.93956286F, quaternion0.getW(), 0.01F);
      
      Quaternion quaternion1 = quaternion0.nlerp(quaternion0, 1428.4901F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.15176794F, quaternion0.z, 0.01F);
      assertEquals(0.93956286F, quaternion0.w, 0.01F);
      assertEquals(0.2973515F, quaternion0.x, 0.01F);
      assertEquals((-0.07596253F), quaternion0.y, 0.01F);
      assertEquals(0.93956184F, quaternion1.w, 0.01F);
      assertEquals(0.15176177F, quaternion1.z, 0.01F);
      assertEquals((-0.07595717F), quaternion1.y, 0.01F);
      assertEquals(0.29735905F, quaternion1.x, 0.01F);
      assertNotNull(quaternion1);
      assertEquals((-0.07596253F), quaternion0.getY(), 0.01F);
      assertEquals(0.2973515F, quaternion0.getX(), 0.01F);
      assertEquals(0.15176794F, quaternion0.getZ(), 0.01F);
      assertEquals(0.93956286F, quaternion0.getW(), 0.01F);
      assertEquals(0.29735905F, quaternion1.getX(), 0.01F);
      assertEquals(0.93956184F, quaternion1.getW(), 0.01F);
      assertEquals((-0.07595717F), quaternion1.getY(), 0.01F);
      assertEquals(0.15176177F, quaternion1.getZ(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(2875.2F, (-3082.1448F), (-3082.1448F));
      assertEquals(0.2973515F, quaternion0.x, 0.01F);
      assertEquals((-0.07596253F), quaternion0.y, 0.01F);
      assertEquals(0.93956286F, quaternion0.w, 0.01F);
      assertEquals(0.15176794F, quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.2973515F, quaternion0.getX(), 0.01F);
      assertEquals((-0.07596253F), quaternion0.getY(), 0.01F);
      assertEquals(0.93956286F, quaternion0.getW(), 0.01F);
      assertEquals(0.15176794F, quaternion0.getZ(), 0.01F);
      
      Vector3f[] vector3fArray0 = new Vector3f[3];
      Vector3f vector3f0 = new Vector3f(3.0F, 1.1920929E-7F, 1.5707964F);
      assertEquals(1.5707964F, vector3f0.z, 0.01F);
      assertEquals(3.0F, vector3f0.x, 0.01F);
      assertEquals(1.1920929E-7F, vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(1.1920929E-7F, vector3f0.getY(), 0.01F);
      assertEquals(3.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.5707964F, vector3f0.getZ(), 0.01F);
      
      vector3fArray0[0] = vector3f0;
      Vector3f vector3f1 = Vector3f.UNIT_XYZ;
      assertNotSame(vector3f1, vector3f0);
      assertEquals(1.0F, vector3f1.z, 0.01F);
      assertEquals(1.0F, vector3f1.x, 0.01F);
      assertEquals(1.0F, vector3f1.y, 0.01F);
      assertNotNull(vector3f1);
      assertEquals(1.0F, vector3f1.getY(), 0.01F);
      assertEquals(1.0F, vector3f1.getZ(), 0.01F);
      assertEquals(1.0F, vector3f1.getX(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
      
      vector3fArray0[1] = vector3f1;
      vector3fArray0[2] = vector3f0;
      Quaternion quaternion1 = Quaternion.fromAxes(vector3fArray0);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.27877584F, quaternion1.y, 0.01F);
      assertEquals(0.19505674F, quaternion1.x, 0.01F);
      assertEquals((-0.19505674F), quaternion1.z, 0.01F);
      assertEquals(1.2816782F, quaternion1.w, 0.01F);
      assertEquals(3, vector3fArray0.length);
      assertNotNull(quaternion1);
      assertEquals(0.27877584F, quaternion1.getY(), 0.01F);
      assertEquals((-0.19505674F), quaternion1.getZ(), 0.01F);
      assertEquals(1.2816782F, quaternion1.getW(), 0.01F);
      assertEquals(0.19505674F, quaternion1.getX(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      
      Quaternion quaternion2 = quaternion0.nlerp(quaternion1, 1428.4901F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertEquals(0.2973515F, quaternion0.x, 0.01F);
      assertEquals((-0.07596253F), quaternion0.y, 0.01F);
      assertEquals(0.93956286F, quaternion0.w, 0.01F);
      assertEquals(0.15176794F, quaternion0.z, 0.01F);
      assertEquals(0.27877584F, quaternion1.y, 0.01F);
      assertEquals(0.19505674F, quaternion1.x, 0.01F);
      assertEquals((-0.19505674F), quaternion1.z, 0.01F);
      assertEquals(1.2816782F, quaternion1.w, 0.01F);
      assertEquals((-0.16694501F), quaternion2.x, 0.01F);
      assertEquals(0.5800263F, quaternion2.y, 0.01F);
      assertEquals((-0.56699806F), quaternion2.z, 0.01F);
      assertEquals(0.5605461F, quaternion2.w, 0.01F);
      assertEquals(3, vector3fArray0.length);
      assertNotNull(quaternion2);
      assertEquals(0.2973515F, quaternion0.getX(), 0.01F);
      assertEquals((-0.07596253F), quaternion0.getY(), 0.01F);
      assertEquals(0.93956286F, quaternion0.getW(), 0.01F);
      assertEquals(0.15176794F, quaternion0.getZ(), 0.01F);
      assertEquals(0.27877584F, quaternion1.getY(), 0.01F);
      assertEquals((-0.19505674F), quaternion1.getZ(), 0.01F);
      assertEquals(1.2816782F, quaternion1.getW(), 0.01F);
      assertEquals(0.19505674F, quaternion1.getX(), 0.01F);
      assertEquals((-0.16694501F), quaternion2.getX(), 0.01F);
      assertEquals(0.5800263F, quaternion2.getY(), 0.01F);
      assertEquals((-0.56699806F), quaternion2.getZ(), 0.01F);
      assertEquals(0.5605461F, quaternion2.getW(), 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      
      Matrix3f matrix3f0 = new Matrix3f(Float.NEGATIVE_INFINITY, 1.0F, 0.35355338F, 0.0F, 0.0F, 0.57735026F, 0.0F, (-3351.1F), 0.35355338F);
      assertNotNull(matrix3f0);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      
      Quaternion quaternion1 = Quaternion.fromMatrix3f(matrix3f0);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(-0.0F, quaternion1.w, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(Float.POSITIVE_INFINITY, quaternion1.getZ(), 0.01F);
      assertEquals(-0.0F, quaternion1.getW(), 0.01F);
      assertEquals(-0.0F, quaternion1.getY(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      
      Quaternion quaternion2 = quaternion0.nlerp(quaternion1, 2598.0F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion1.w, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
      assertEquals(-0.0F, quaternion2.y, 0.01F);
      assertEquals(-0.0F, quaternion2.w, 0.01F);
      assertNotNull(quaternion2);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(Float.POSITIVE_INFINITY, quaternion1.getZ(), 0.01F);
      assertEquals(-0.0F, quaternion1.getW(), 0.01F);
      assertEquals(-0.0F, quaternion1.getY(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals(Float.NaN, quaternion2.getZ(), 0.01F);
      assertEquals(-0.0F, quaternion2.getY(), 0.01F);
      assertEquals(0.0F, quaternion2.getX(), 0.01F);
      assertEquals(-0.0F, quaternion2.getW(), 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromAngleAxis(1077.86F, vector3f0);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.14632532F, quaternion0.w, 0.01F);
      assertEquals(-0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals((-0.98923653F), quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(-0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.14632532F, quaternion0.getW(), 0.01F);
      assertEquals((-0.98923653F), quaternion0.getX(), 0.01F);
      assertEquals(-0.0F, quaternion0.getZ(), 0.01F);
      
      Quaternion quaternion1 = quaternion0.inverse();
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.14632532F, quaternion0.w, 0.01F);
      assertEquals(-0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals((-0.98923653F), quaternion0.x, 0.01F);
      assertEquals(0.98923653F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.14632532F, quaternion1.w, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(-0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.14632532F, quaternion0.getW(), 0.01F);
      assertEquals((-0.98923653F), quaternion0.getX(), 0.01F);
      assertEquals(-0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion1.getZ(), 0.01F);
      assertEquals(0.14632532F, quaternion1.getW(), 0.01F);
      assertEquals(0.98923653F, quaternion1.getX(), 0.01F);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      
      Quaternion quaternion2 = quaternion1.nlerp(quaternion0, 1077.86F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.14632532F, quaternion0.w, 0.01F);
      assertEquals(-0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals((-0.98923653F), quaternion0.x, 0.01F);
      assertEquals(0.98923653F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.14632532F, quaternion1.w, 0.01F);
      assertEquals(0.0031372088F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals((-0.99999505F), quaternion2.w, 0.01F);
      assertNotNull(quaternion2);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(-0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.14632532F, quaternion0.getW(), 0.01F);
      assertEquals((-0.98923653F), quaternion0.getX(), 0.01F);
      assertEquals(-0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion1.getZ(), 0.01F);
      assertEquals(0.14632532F, quaternion1.getW(), 0.01F);
      assertEquals(0.98923653F, quaternion1.getX(), 0.01F);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertEquals(0.0F, quaternion2.getZ(), 0.01F);
      assertEquals(0.0031372088F, quaternion2.getX(), 0.01F);
      assertEquals(0.0F, quaternion2.getY(), 0.01F);
      assertEquals((-0.99999505F), quaternion2.getW(), 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      
      Vector3f vector3f0 = Vector3f.ZERO;
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      
      Vector3f vector3f1 = quaternion0.mult(vector3f0);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f1.x, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertNotNull(vector3f1);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f1.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getY(), 0.01F);
      assertEquals(0.0F, vector3f1.getZ(), 0.01F);
      assertTrue(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(3.7148132F, (-3713.6929F), (-3713.6929F), (-3713.6929F));
      assertEquals(3.7148132F, quaternion0.x, 0.01F);
      assertEquals((-3713.6929F), quaternion0.y, 0.01F);
      assertEquals((-3713.6929F), quaternion0.z, 0.01F);
      assertEquals((-3713.6929F), quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(3.7148132F, quaternion0.getX(), 0.01F);
      assertEquals((-3713.6929F), quaternion0.getZ(), 0.01F);
      assertEquals((-3713.6929F), quaternion0.getY(), 0.01F);
      assertEquals((-3713.6929F), quaternion0.getW(), 0.01F);
      
      Vector3f vector3f0 = new Vector3f((-3713.6929F), (-3713.6929F), 0.31830987F);
      assertEquals((-3713.6929F), vector3f0.y, 0.01F);
      assertEquals(0.31830987F, vector3f0.z, 0.01F);
      assertEquals((-3713.6929F), vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(0.31830987F, vector3f0.getZ(), 0.01F);
      assertEquals((-3713.6929F), vector3f0.getX(), 0.01F);
      assertEquals((-3713.6929F), vector3f0.getY(), 0.01F);
      
      Vector3f vector3f1 = quaternion0.mult(vector3f0);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(3.7148132F, quaternion0.x, 0.01F);
      assertEquals((-3713.6929F), quaternion0.y, 0.01F);
      assertEquals((-3713.6929F), quaternion0.z, 0.01F);
      assertEquals((-3713.6929F), quaternion0.w, 0.01F);
      assertEquals((-3713.6929F), vector3f0.y, 0.01F);
      assertEquals(0.31830987F, vector3f0.z, 0.01F);
      assertEquals((-3713.6929F), vector3f0.x, 0.01F);
      assertEquals(1.53763529E11F, vector3f1.x, 0.01F);
      assertEquals(2.09322256E8F, vector3f1.z, 0.01F);
      assertEquals((-1.53541034E11F), vector3f1.y, 0.01F);
      assertNotNull(vector3f1);
      assertEquals(3.7148132F, quaternion0.getX(), 0.01F);
      assertEquals((-3713.6929F), quaternion0.getZ(), 0.01F);
      assertEquals((-3713.6929F), quaternion0.getY(), 0.01F);
      assertEquals((-3713.6929F), quaternion0.getW(), 0.01F);
      assertEquals(0.31830987F, vector3f0.getZ(), 0.01F);
      assertEquals((-3713.6929F), vector3f0.getX(), 0.01F);
      assertEquals((-3713.6929F), vector3f0.getY(), 0.01F);
      assertEquals(1.53763529E11F, vector3f1.getX(), 0.01F);
      assertEquals((-1.53541034E11F), vector3f1.getY(), 0.01F);
      assertEquals(2.09322256E8F, vector3f1.getZ(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(2875.2F, (-3082.1448F), (-3082.1448F));
      assertEquals((-0.07596253F), quaternion0.y, 0.01F);
      assertEquals(0.2973515F, quaternion0.x, 0.01F);
      assertEquals(0.93956286F, quaternion0.w, 0.01F);
      assertEquals(0.15176794F, quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.15176794F, quaternion0.getZ(), 0.01F);
      assertEquals(0.93956286F, quaternion0.getW(), 0.01F);
      assertEquals((-0.07596253F), quaternion0.getY(), 0.01F);
      assertEquals(0.2973515F, quaternion0.getX(), 0.01F);
      
      Vector3f[] vector3fArray0 = new Vector3f[3];
      Vector3f vector3f0 = new Vector3f(3.0F, 1.1920929E-7F, 1.5707964F);
      assertEquals(3.0F, vector3f0.x, 0.01F);
      assertEquals(1.1920929E-7F, vector3f0.y, 0.01F);
      assertEquals(1.5707964F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(3.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.1920929E-7F, vector3f0.getY(), 0.01F);
      assertEquals(1.5707964F, vector3f0.getZ(), 0.01F);
      
      vector3fArray0[0] = vector3f0;
      vector3fArray0[1] = vector3f0;
      vector3fArray0[2] = vector3fArray0[1];
      Quaternion quaternion1 = Quaternion.fromAxes(vector3fArray0);
      assertNotSame(quaternion1, quaternion0);
      assertEquals((-0.6355249F), quaternion1.z, 0.01F);
      assertEquals(1.1801268F, quaternion1.w, 0.01F);
      assertEquals(0.30276483F, quaternion1.y, 0.01F);
      assertEquals(0.33276007F, quaternion1.x, 0.01F);
      assertEquals(3, vector3fArray0.length);
      assertNotNull(quaternion1);
      assertEquals(0.33276007F, quaternion1.getX(), 0.01F);
      assertEquals(1.1801268F, quaternion1.getW(), 0.01F);
      assertEquals(0.30276483F, quaternion1.getY(), 0.01F);
      assertEquals((-0.6355249F), quaternion1.getZ(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      
      Quaternion quaternion2 = quaternion0.mult(quaternion1);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertEquals((-0.07596253F), quaternion0.y, 0.01F);
      assertEquals(0.2973515F, quaternion0.x, 0.01F);
      assertEquals(0.93956286F, quaternion0.w, 0.01F);
      assertEquals(0.15176794F, quaternion0.z, 0.01F);
      assertEquals((-0.6355249F), quaternion1.z, 0.01F);
      assertEquals(1.1801268F, quaternion1.w, 0.01F);
      assertEquals(0.30276483F, quaternion1.y, 0.01F);
      assertEquals(0.33276007F, quaternion1.x, 0.01F);
      assertEquals((-0.30270535F), quaternion2.z, 0.01F);
      assertEquals(0.43429777F, quaternion2.y, 0.01F);
      assertEquals(1.1293076F, quaternion2.w, 0.01F);
      assertEquals(0.6658876F, quaternion2.x, 0.01F);
      assertEquals(3, vector3fArray0.length);
      assertNotNull(quaternion2);
      assertEquals(0.15176794F, quaternion0.getZ(), 0.01F);
      assertEquals(0.93956286F, quaternion0.getW(), 0.01F);
      assertEquals((-0.07596253F), quaternion0.getY(), 0.01F);
      assertEquals(0.2973515F, quaternion0.getX(), 0.01F);
      assertEquals(0.33276007F, quaternion1.getX(), 0.01F);
      assertEquals(1.1801268F, quaternion1.getW(), 0.01F);
      assertEquals(0.30276483F, quaternion1.getY(), 0.01F);
      assertEquals((-0.6355249F), quaternion1.getZ(), 0.01F);
      assertEquals(0.6658876F, quaternion2.getX(), 0.01F);
      assertEquals((-0.30270535F), quaternion2.getZ(), 0.01F);
      assertEquals(0.43429777F, quaternion2.getY(), 0.01F);
      assertEquals(1.1293076F, quaternion2.getW(), 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      
      Matrix3f matrix3f0 = new Matrix3f(Float.NEGATIVE_INFINITY, 1.0F, 0.35355338F, 0.0F, 0.0F, 0.57735026F, 0.0F, (-3351.1F), 0.35355338F);
      assertNotNull(matrix3f0);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(Float.NEGATIVE_INFINITY, matrix3f0.determinant(), 0.01F);
      
      Quaternion quaternion1 = Quaternion.fromMatrix3f(matrix3f0);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(-0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, quaternion1.z, 0.01F);
      assertNotNull(quaternion1);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(Float.NEGATIVE_INFINITY, matrix3f0.determinant(), 0.01F);
      assertEquals(-0.0F, quaternion1.getY(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals(-0.0F, quaternion1.getW(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, quaternion1.getZ(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      
      Quaternion quaternion2 = quaternion0.mult(quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(-0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, quaternion1.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, quaternion2.z, 0.01F);
      assertEquals(Float.NaN, quaternion2.x, 0.01F);
      assertEquals(Float.NaN, quaternion2.y, 0.01F);
      assertEquals(Float.NaN, quaternion2.w, 0.01F);
      assertNotNull(quaternion2);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(Float.NEGATIVE_INFINITY, matrix3f0.determinant(), 0.01F);
      assertEquals(-0.0F, quaternion1.getY(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals(-0.0F, quaternion1.getW(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, quaternion1.getZ(), 0.01F);
      assertEquals(Float.NaN, quaternion2.getW(), 0.01F);
      assertEquals(Float.NaN, quaternion2.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion2.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, quaternion2.getZ(), 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(2875.2F, (-3082.1448F), (-3082.1448F));
      assertEquals(0.15176794F, quaternion0.z, 0.01F);
      assertEquals(0.93956286F, quaternion0.w, 0.01F);
      assertEquals((-0.07596253F), quaternion0.y, 0.01F);
      assertEquals(0.2973515F, quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.93956286F, quaternion0.getW(), 0.01F);
      assertEquals((-0.07596253F), quaternion0.getY(), 0.01F);
      assertEquals(0.2973515F, quaternion0.getX(), 0.01F);
      assertEquals(0.15176794F, quaternion0.getZ(), 0.01F);
      
      Vector3f[] vector3fArray0 = new Vector3f[3];
      Vector3f vector3f0 = new Vector3f((-12.552776F), 1.1920929E-7F, 1.5707964F);
      assertEquals((-12.552776F), vector3f0.x, 0.01F);
      assertEquals(1.5707964F, vector3f0.z, 0.01F);
      assertEquals(1.1920929E-7F, vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      assertEquals((-12.552776F), vector3f0.getX(), 0.01F);
      assertEquals(1.5707964F, vector3f0.getZ(), 0.01F);
      assertEquals(1.1920929E-7F, vector3f0.getY(), 0.01F);
      
      vector3fArray0[0] = vector3f0;
      Vector3f vector3f1 = Vector3f.UNIT_XYZ;
      assertNotSame(vector3f1, vector3f0);
      assertEquals(1.0F, vector3f1.z, 0.01F);
      assertEquals(1.0F, vector3f1.y, 0.01F);
      assertEquals(1.0F, vector3f1.x, 0.01F);
      assertNotNull(vector3f1);
      assertEquals(1.0F, vector3f1.getZ(), 0.01F);
      assertEquals(1.0F, vector3f1.getX(), 0.01F);
      assertEquals(1.0F, vector3f1.getY(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
      
      vector3fArray0[1] = vector3f1;
      Vector3f vector3f2 = Vector3f.UNIT_Z;
      assertNotSame(vector3f2, vector3f1);
      assertNotSame(vector3f2, vector3f0);
      assertEquals(0.0F, vector3f2.x, 0.01F);
      assertEquals(0.0F, vector3f2.y, 0.01F);
      assertEquals(1.0F, vector3f2.z, 0.01F);
      assertNotNull(vector3f2);
      assertEquals(0.0F, vector3f2.getY(), 0.01F);
      assertEquals(0.0F, vector3f2.getX(), 0.01F);
      assertEquals(1.0F, vector3f2.getZ(), 0.01F);
      assertFalse(vector3f2.equals((Object)vector3f1));
      assertFalse(vector3f2.equals((Object)vector3f0));
      
      vector3fArray0[2] = vector3f2;
      Quaternion quaternion1 = Quaternion.fromAxes(vector3fArray0);
      assertNotSame(quaternion1, quaternion0);
      assertEquals((-0.13581753F), quaternion1.w, 0.01F);
      assertEquals(1.8407048F, quaternion1.z, 0.01F);
      assertEquals(0.13581754F, quaternion1.y, 0.01F);
      assertEquals(0.2133417F, quaternion1.x, 0.01F);
      assertEquals(3, vector3fArray0.length);
      assertNotNull(quaternion1);
      assertEquals(0.2133417F, quaternion1.getX(), 0.01F);
      assertEquals(1.8407048F, quaternion1.getZ(), 0.01F);
      assertEquals((-0.13581753F), quaternion1.getW(), 0.01F);
      assertEquals(0.13581754F, quaternion1.getY(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      
      Quaternion quaternion2 = quaternion0.mult(quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertEquals(0.15176794F, quaternion0.z, 0.01F);
      assertEquals(0.93956286F, quaternion0.w, 0.01F);
      assertEquals((-0.07596253F), quaternion0.y, 0.01F);
      assertEquals(0.2973515F, quaternion0.x, 0.01F);
      assertEquals((-0.13581753F), quaternion1.w, 0.01F);
      assertEquals(1.8407048F, quaternion1.z, 0.01F);
      assertEquals(0.13581754F, quaternion1.y, 0.01F);
      assertEquals(0.2133417F, quaternion1.x, 0.01F);
      assertEquals((-0.37703174F), quaternion2.y, 0.01F);
      assertEquals((-0.4600895F), quaternion2.w, 0.01F);
      assertEquals(1.7654366F, quaternion2.z, 0.01F);
      assertEquals((-3.7494302E-4F), quaternion2.x, 0.01F);
      assertEquals(3, vector3fArray0.length);
      assertNotNull(quaternion2);
      assertEquals(0.93956286F, quaternion0.getW(), 0.01F);
      assertEquals((-0.07596253F), quaternion0.getY(), 0.01F);
      assertEquals(0.2973515F, quaternion0.getX(), 0.01F);
      assertEquals(0.15176794F, quaternion0.getZ(), 0.01F);
      assertEquals(0.2133417F, quaternion1.getX(), 0.01F);
      assertEquals(1.8407048F, quaternion1.getZ(), 0.01F);
      assertEquals((-0.13581753F), quaternion1.getW(), 0.01F);
      assertEquals(0.13581754F, quaternion1.getY(), 0.01F);
      assertEquals((-0.4600895F), quaternion2.getW(), 0.01F);
      assertEquals((-3.7494302E-4F), quaternion2.getX(), 0.01F);
      assertEquals((-0.37703174F), quaternion2.getY(), 0.01F);
      assertEquals(1.7654366F, quaternion2.getZ(), 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(2875.2F, (-3082.1448F), (-3082.1448F));
      assertEquals(0.93956286F, quaternion0.w, 0.01F);
      assertEquals(0.15176794F, quaternion0.z, 0.01F);
      assertEquals(0.2973515F, quaternion0.x, 0.01F);
      assertEquals((-0.07596253F), quaternion0.y, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.2973515F, quaternion0.getX(), 0.01F);
      assertEquals((-0.07596253F), quaternion0.getY(), 0.01F);
      assertEquals(0.15176794F, quaternion0.getZ(), 0.01F);
      assertEquals(0.93956286F, quaternion0.getW(), 0.01F);
      
      boolean boolean0 = quaternion0.isIdentity();
      assertFalse(boolean0);
      assertEquals(0.93956286F, quaternion0.w, 0.01F);
      assertEquals(0.15176794F, quaternion0.z, 0.01F);
      assertEquals(0.2973515F, quaternion0.x, 0.01F);
      assertEquals((-0.07596253F), quaternion0.y, 0.01F);
      assertEquals(0.2973515F, quaternion0.getX(), 0.01F);
      assertEquals((-0.07596253F), quaternion0.getY(), 0.01F);
      assertEquals(0.15176794F, quaternion0.getZ(), 0.01F);
      assertEquals(0.93956286F, quaternion0.getW(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(3.0F, 3245.5F, (-5.96046E-8F));
      assertEquals((-5.96046E-8F), vector3f0.z, 0.01F);
      assertEquals(3245.5F, vector3f0.y, 0.01F);
      assertEquals(3.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      assertEquals((-5.96046E-8F), vector3f0.getZ(), 0.01F);
      assertEquals(3245.5F, vector3f0.getY(), 0.01F);
      assertEquals(3.0F, vector3f0.getX(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromAxes(vector3f0, vector3f0, vector3f0);
      assertEquals((-5.96046E-8F), vector3f0.z, 0.01F);
      assertEquals(3245.5F, vector3f0.y, 0.01F);
      assertEquals(3.0F, vector3f0.x, 0.01F);
      assertEquals(28.440794F, quaternion0.z, 0.01F);
      assertEquals(28.502193F, quaternion0.w, 0.01F);
      assertEquals(0.026313763F, quaternion0.y, 0.01F);
      assertEquals((-28.467108F), quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      assertEquals((-5.96046E-8F), vector3f0.getZ(), 0.01F);
      assertEquals(3245.5F, vector3f0.getY(), 0.01F);
      assertEquals(3.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.026313763F, quaternion0.getY(), 0.01F);
      assertEquals(28.502193F, quaternion0.getW(), 0.01F);
      assertEquals((-28.467108F), quaternion0.getX(), 0.01F);
      assertEquals(28.440794F, quaternion0.getZ(), 0.01F);
      
      Quaternion quaternion1 = quaternion0.inverse();
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals((-5.96046E-8F), vector3f0.z, 0.01F);
      assertEquals(3245.5F, vector3f0.y, 0.01F);
      assertEquals(3.0F, vector3f0.x, 0.01F);
      assertEquals(28.440794F, quaternion0.z, 0.01F);
      assertEquals(28.502193F, quaternion0.w, 0.01F);
      assertEquals(0.026313763F, quaternion0.y, 0.01F);
      assertEquals((-28.467108F), quaternion0.x, 0.01F);
      assertEquals(0.011721432F, quaternion1.w, 0.01F);
      assertEquals((-0.011696182F), quaternion1.z, 0.01F);
      assertEquals((-1.0821447E-5F), quaternion1.y, 0.01F);
      assertEquals(0.011707003F, quaternion1.x, 0.01F);
      assertNotNull(quaternion1);
      assertEquals((-5.96046E-8F), vector3f0.getZ(), 0.01F);
      assertEquals(3245.5F, vector3f0.getY(), 0.01F);
      assertEquals(3.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.026313763F, quaternion0.getY(), 0.01F);
      assertEquals(28.502193F, quaternion0.getW(), 0.01F);
      assertEquals((-28.467108F), quaternion0.getX(), 0.01F);
      assertEquals(28.440794F, quaternion0.getZ(), 0.01F);
      assertEquals((-0.011696182F), quaternion1.getZ(), 0.01F);
      assertEquals((-1.0821447E-5F), quaternion1.getY(), 0.01F);
      assertEquals(0.011707003F, quaternion1.getX(), 0.01F);
      assertEquals(0.011721432F, quaternion1.getW(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(2875.2F, (-3082.1448F), (-3082.1448F));
      assertEquals(0.93956286F, quaternion0.w, 0.01F);
      assertEquals(0.15176794F, quaternion0.z, 0.01F);
      assertEquals(0.2973515F, quaternion0.x, 0.01F);
      assertEquals((-0.07596253F), quaternion0.y, 0.01F);
      assertNotNull(quaternion0);
      assertEquals((-0.07596253F), quaternion0.getY(), 0.01F);
      assertEquals(0.15176794F, quaternion0.getZ(), 0.01F);
      assertEquals(0.93956286F, quaternion0.getW(), 0.01F);
      assertEquals(0.2973515F, quaternion0.getX(), 0.01F);
      
      Quaternion quaternion1 = quaternion0.inverse();
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.93956286F, quaternion0.w, 0.01F);
      assertEquals(0.15176794F, quaternion0.z, 0.01F);
      assertEquals(0.2973515F, quaternion0.x, 0.01F);
      assertEquals((-0.07596253F), quaternion0.y, 0.01F);
      assertEquals((-0.15176792F), quaternion1.z, 0.01F);
      assertEquals(0.93956274F, quaternion1.w, 0.01F);
      assertEquals(0.07596252F, quaternion1.y, 0.01F);
      assertEquals((-0.29735148F), quaternion1.x, 0.01F);
      assertNotNull(quaternion1);
      assertEquals((-0.07596253F), quaternion0.getY(), 0.01F);
      assertEquals(0.15176794F, quaternion0.getZ(), 0.01F);
      assertEquals(0.93956286F, quaternion0.getW(), 0.01F);
      assertEquals(0.2973515F, quaternion0.getX(), 0.01F);
      assertEquals(0.07596252F, quaternion1.getY(), 0.01F);
      assertEquals((-0.29735148F), quaternion1.getX(), 0.01F);
      assertEquals((-0.15176792F), quaternion1.getZ(), 0.01F);
      assertEquals(0.93956274F, quaternion1.getW(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromMatrix3f((-1127.182F), (-1127.182F), (-1127.182F), (-1127.182F), (-1127.182F), (-1127.182F), (-1127.182F), (-1127.182F), (-1127.182F));
      assertEquals((-33.558647F), quaternion0.x, 0.01F);
      assertEquals((-33.558647F), quaternion0.y, 0.01F);
      assertEquals(16.79421F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(16.79421F, quaternion0.getZ(), 0.01F);
      assertEquals((-33.558647F), quaternion0.getY(), 0.01F);
      assertEquals((-33.558647F), quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      
      Vector3f vector3f0 = quaternion0.getRotationColumn(1);
      assertEquals((-33.558647F), quaternion0.x, 0.01F);
      assertEquals((-33.558647F), quaternion0.y, 0.01F);
      assertEquals(16.79421F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals((-22.390076F), vector3f0.z, 0.01F);
      assertEquals((-54.94542F), vector3f0.y, 0.01F);
      assertEquals(44.74045F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(16.79421F, quaternion0.getZ(), 0.01F);
      assertEquals((-33.558647F), quaternion0.getY(), 0.01F);
      assertEquals((-33.558647F), quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals((-54.94542F), vector3f0.getY(), 0.01F);
      assertEquals((-22.390076F), vector3f0.getZ(), 0.01F);
      assertEquals(44.74045F, vector3f0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      
      Vector3f vector3f0 = quaternion0.getRotationColumn(2);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(2875.2F, (-3082.1448F), (-3082.1448F));
      assertEquals(0.93956286F, quaternion0.w, 0.01F);
      assertEquals(0.15176794F, quaternion0.z, 0.01F);
      assertEquals(0.2973515F, quaternion0.x, 0.01F);
      assertEquals((-0.07596253F), quaternion0.y, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.93956286F, quaternion0.getW(), 0.01F);
      assertEquals(0.15176794F, quaternion0.getZ(), 0.01F);
      assertEquals(0.2973515F, quaternion0.getX(), 0.01F);
      assertEquals((-0.07596253F), quaternion0.getY(), 0.01F);
      
      Vector3f vector3f0 = quaternion0.getRotationColumn(2);
      assertEquals(0.93956286F, quaternion0.w, 0.01F);
      assertEquals(0.15176794F, quaternion0.z, 0.01F);
      assertEquals(0.2973515F, quaternion0.x, 0.01F);
      assertEquals((-0.07596253F), quaternion0.y, 0.01F);
      assertEquals(0.8116236F, vector3f0.z, 0.01F);
      assertEquals((-0.58181816F), vector3f0.y, 0.01F);
      assertEquals((-0.052486278F), vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(0.93956286F, quaternion0.getW(), 0.01F);
      assertEquals(0.15176794F, quaternion0.getZ(), 0.01F);
      assertEquals(0.2973515F, quaternion0.getX(), 0.01F);
      assertEquals((-0.07596253F), quaternion0.getY(), 0.01F);
      assertEquals((-0.58181816F), vector3f0.getY(), 0.01F);
      assertEquals((-0.052486278F), vector3f0.getX(), 0.01F);
      assertEquals(0.8116236F, vector3f0.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(3.0F, 1.1920929E-7F, 1.5707964F);
      assertEquals(3.0F, vector3f0.x, 0.01F);
      assertEquals(1.1920929E-7F, vector3f0.y, 0.01F);
      assertEquals(1.5707964F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(3.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.1920929E-7F, vector3f0.getY(), 0.01F);
      assertEquals(1.5707964F, vector3f0.getZ(), 0.01F);
      
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      assertEquals(3.0F, vector3f0.x, 0.01F);
      assertEquals(1.1920929E-7F, vector3f0.y, 0.01F);
      assertEquals(1.5707964F, vector3f0.z, 0.01F);
      assertNotNull(matrix3f0);
      assertEquals(3.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.1920929E-7F, vector3f0.getY(), 0.01F);
      assertEquals(1.5707964F, vector3f0.getZ(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(0.0F, matrix3f0.determinant(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromMatrix3f(matrix3f0);
      assertEquals(3.0F, vector3f0.x, 0.01F);
      assertEquals(1.1920929E-7F, vector3f0.y, 0.01F);
      assertEquals(1.5707964F, vector3f0.z, 0.01F);
      assertEquals(1.1801268F, quaternion0.w, 0.01F);
      assertEquals(0.33276007F, quaternion0.x, 0.01F);
      assertEquals(0.30276483F, quaternion0.y, 0.01F);
      assertEquals((-0.6355249F), quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(3.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.1920929E-7F, vector3f0.getY(), 0.01F);
      assertEquals(1.5707964F, vector3f0.getZ(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(0.0F, matrix3f0.determinant(), 0.01F);
      assertEquals(1.1801268F, quaternion0.getW(), 0.01F);
      assertEquals(0.30276483F, quaternion0.getY(), 0.01F);
      assertEquals(0.33276007F, quaternion0.getX(), 0.01F);
      assertEquals((-0.6355249F), quaternion0.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-1639.3575F), 0.0F, 0.0F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals((-1639.3575F), vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals((-1639.3575F), vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      
      Vector3f vector3f1 = vector3f0.build((-20.238317F));
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals((-1639.3575F), vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals((-20.238317F), vector3f1.y, 0.01F);
      assertEquals((-20.238317F), vector3f1.z, 0.01F);
      assertEquals((-20.238317F), vector3f1.x, 0.01F);
      assertNotNull(vector3f1);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals((-1639.3575F), vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals((-20.238317F), vector3f1.getZ(), 0.01F);
      assertEquals((-20.238317F), vector3f1.getY(), 0.01F);
      assertEquals((-20.238317F), vector3f1.getX(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
      
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f1);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals((-1639.3575F), vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals((-20.238317F), vector3f1.y, 0.01F);
      assertEquals((-20.238317F), vector3f1.z, 0.01F);
      assertEquals((-20.238317F), vector3f1.x, 0.01F);
      assertNotNull(matrix3f0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals((-1639.3575F), vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals((-20.238317F), vector3f1.getZ(), 0.01F);
      assertEquals((-20.238317F), vector3f1.getY(), 0.01F);
      assertEquals((-20.238317F), vector3f1.getX(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(-0.0F, matrix3f0.determinant(), 0.01F);
      assertFalse(vector3f0.equals((Object)vector3f1));
      assertFalse(vector3f1.equals((Object)vector3f0));
      
      Quaternion quaternion0 = Quaternion.fromMatrix3f(matrix3f0);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals((-1639.3575F), vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals((-20.238317F), vector3f1.y, 0.01F);
      assertEquals((-20.238317F), vector3f1.z, 0.01F);
      assertEquals((-20.238317F), vector3f1.x, 0.01F);
      assertEquals((-0.24832042F), quaternion0.z, 0.01F);
      assertEquals(20.375204F, quaternion0.y, 0.01F);
      assertEquals((-0.24832042F), quaternion0.w, 0.01F);
      assertEquals((-20.114614F), quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals((-1639.3575F), vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals((-20.238317F), vector3f1.getZ(), 0.01F);
      assertEquals((-20.238317F), vector3f1.getY(), 0.01F);
      assertEquals((-20.238317F), vector3f1.getX(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(-0.0F, matrix3f0.determinant(), 0.01F);
      assertEquals((-20.114614F), quaternion0.getX(), 0.01F);
      assertEquals((-0.24832042F), quaternion0.getZ(), 0.01F);
      assertEquals(20.375204F, quaternion0.getY(), 0.01F);
      assertEquals((-0.24832042F), quaternion0.getW(), 0.01F);
      assertFalse(vector3f0.equals((Object)vector3f1));
      assertFalse(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromMatrix3f(0.0F, 0.0F, 1.0F, 1002.993F, Float.POSITIVE_INFINITY, 1.0F, 0.5F, 0.0F, 0.0F);
      assertEquals(Float.POSITIVE_INFINITY, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(-0.0F, quaternion0.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vector3f[] vector3fArray0 = new Vector3f[4];
      Vector3f vector3f0 = new Vector3f();
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      
      vector3fArray0[0] = vector3f0;
      vector3fArray0[1] = vector3f0;
      vector3fArray0[2] = vector3fArray0[1];
      Quaternion quaternion0 = Quaternion.fromAxes(vector3fArray0);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.5F, quaternion0.w, 0.01F);
      assertEquals(4, vector3fArray0.length);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.5F, quaternion0.getW(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector3f[] vector3fArray0 = new Vector3f[3];
      Vector3f vector3f0 = new Vector3f(3.0F, 1.1920929E-7F, 1.5707964F);
      assertEquals(3.0F, vector3f0.x, 0.01F);
      assertEquals(1.1920929E-7F, vector3f0.y, 0.01F);
      assertEquals(1.5707964F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(1.1920929E-7F, vector3f0.getY(), 0.01F);
      assertEquals(1.5707964F, vector3f0.getZ(), 0.01F);
      assertEquals(3.0F, vector3f0.getX(), 0.01F);
      
      vector3fArray0[0] = vector3f0;
      vector3fArray0[1] = vector3fArray0[0];
      Vector3f vector3f1 = Vector3f.UNIT_Z;
      assertNotSame(vector3f1, vector3f0);
      assertEquals(1.0F, vector3f1.z, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f1.x, 0.01F);
      assertNotNull(vector3f1);
      assertEquals(1.0F, vector3f1.getZ(), 0.01F);
      assertEquals(0.0F, vector3f1.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getY(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
      
      vector3fArray0[2] = vector3f1;
      Quaternion quaternion0 = Quaternion.fromAxes(vector3fArray0);
      assertEquals(1.118034F, quaternion0.w, 0.01F);
      assertEquals((-0.67082036F), quaternion0.z, 0.01F);
      assertEquals(0.35124075F, quaternion0.x, 0.01F);
      assertEquals((-0.35124075F), quaternion0.y, 0.01F);
      assertEquals(3, vector3fArray0.length);
      assertNotNull(quaternion0);
      assertEquals(0.35124075F, quaternion0.getX(), 0.01F);
      assertEquals((-0.35124075F), quaternion0.getY(), 0.01F);
      assertEquals((-0.67082036F), quaternion0.getZ(), 0.01F);
      assertEquals(1.118034F, quaternion0.getW(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      
      Vector3f vector3f1 = vector3f0.subtract(0.5F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.5F, vector3f1.z, 0.01F);
      assertEquals((-0.5F), vector3f1.y, 0.01F);
      assertEquals((-0.5F), vector3f1.x, 0.01F);
      assertNotNull(vector3f1);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.5F, vector3f1.getZ(), 0.01F);
      assertEquals((-0.5F), vector3f1.getX(), 0.01F);
      assertEquals((-0.5F), vector3f1.getY(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
      
      Vector3f[] vector3fArray0 = new Vector3f[3];
      vector3fArray0[0] = vector3f1;
      vector3fArray0[1] = vector3f1;
      vector3fArray0[2] = vector3f1;
      Quaternion quaternion0 = Quaternion.fromAxes(vector3fArray0);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.7905694F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(3, vector3fArray0.length);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.7905694F, quaternion0.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      
      Vector3f[] vector3fArray0 = new Vector3f[4];
      vector3fArray0[0] = vector3f0;
      vector3fArray0[1] = vector3f0;
      vector3fArray0[2] = vector3f0;
      Quaternion quaternion0 = Quaternion.fromAxes(vector3fArray0);
      assertEquals(0.70710677F, quaternion0.w, 0.01F);
      assertEquals(0.35355338F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals((-0.35355338F), quaternion0.x, 0.01F);
      assertEquals(4, vector3fArray0.length);
      assertNotNull(quaternion0);
      assertEquals((-0.35355338F), quaternion0.getX(), 0.01F);
      assertEquals(0.70710677F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.35355338F, quaternion0.getZ(), 0.01F);
      
      Vector3f vector3f1 = quaternion0.mult(vector3f0);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(0.70710677F, quaternion0.w, 0.01F);
      assertEquals(0.35355338F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals((-0.35355338F), quaternion0.x, 0.01F);
      assertEquals(0.24999997F, vector3f1.y, 0.01F);
      assertEquals((-0.49999997F), vector3f1.x, 0.01F);
      assertEquals((-0.49999997F), vector3f1.z, 0.01F);
      assertEquals(4, vector3fArray0.length);
      assertNotNull(vector3f1);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals((-0.35355338F), quaternion0.getX(), 0.01F);
      assertEquals(0.70710677F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.35355338F, quaternion0.getZ(), 0.01F);
      assertEquals((-0.49999997F), vector3f1.getZ(), 0.01F);
      assertEquals((-0.49999997F), vector3f1.getX(), 0.01F);
      assertEquals(0.24999997F, vector3f1.getY(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      
      Vector3f vector3f1 = vector3f0.subtract(0.5F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.5F, vector3f1.z, 0.01F);
      assertEquals((-0.5F), vector3f1.y, 0.01F);
      assertEquals((-0.5F), vector3f1.x, 0.01F);
      assertNotNull(vector3f1);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.5F, vector3f1.getZ(), 0.01F);
      assertEquals((-0.5F), vector3f1.getY(), 0.01F);
      assertEquals((-0.5F), vector3f1.getX(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
      
      Quaternion quaternion0 = Quaternion.fromAxes(vector3f1, vector3f1, vector3f1);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.5F, vector3f1.z, 0.01F);
      assertEquals((-0.5F), vector3f1.y, 0.01F);
      assertEquals((-0.5F), vector3f1.x, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.7905694F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.5F, vector3f1.getZ(), 0.01F);
      assertEquals((-0.5F), vector3f1.getY(), 0.01F);
      assertEquals((-0.5F), vector3f1.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.7905694F, quaternion0.getZ(), 0.01F);
      assertFalse(vector3f0.equals((Object)vector3f1));
      assertFalse(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-5957.271F), (-162.9027F), (-3082.1448F));
      assertEquals((-3082.1448F), vector3f0.z, 0.01F);
      assertEquals((-5957.271F), vector3f0.x, 0.01F);
      assertEquals((-162.9027F), vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      assertEquals((-3082.1448F), vector3f0.getZ(), 0.01F);
      assertEquals((-162.9027F), vector3f0.getY(), 0.01F);
      assertEquals((-5957.271F), vector3f0.getX(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromAxes(vector3f0, vector3f0, vector3f0);
      assertEquals((-3082.1448F), vector3f0.z, 0.01F);
      assertEquals((-5957.271F), vector3f0.x, 0.01F);
      assertEquals((-162.9027F), vector3f0.y, 0.01F);
      assertEquals((-17.220486F), quaternion0.z, 0.01F);
      assertEquals(47.110275F, quaternion0.y, 0.01F);
      assertEquals((-32.477913F), quaternion0.x, 0.01F);
      assertEquals((-15.257426F), quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals((-3082.1448F), vector3f0.getZ(), 0.01F);
      assertEquals((-162.9027F), vector3f0.getY(), 0.01F);
      assertEquals((-5957.271F), vector3f0.getX(), 0.01F);
      assertEquals(47.110275F, quaternion0.getY(), 0.01F);
      assertEquals((-32.477913F), quaternion0.getX(), 0.01F);
      assertEquals((-17.220486F), quaternion0.getZ(), 0.01F);
      assertEquals((-15.257426F), quaternion0.getW(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(0.0F, (-326.5F), 0.0F);
      assertEquals(0.9936428F, quaternion0.w, 0.01F);
      assertEquals(0.11257882F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.9936428F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.11257882F, quaternion0.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(0.0F, 0.0F, 65504.0F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
      assertEquals(-0.0F, quaternion0.x, 0.01F);
      assertEquals((-0.6242804F), quaternion0.w, 0.01F);
      assertEquals((-0.78120035F), quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(-0.0F, quaternion0.getY(), 0.01F);
      assertEquals(-0.0F, quaternion0.getX(), 0.01F);
      assertEquals((-0.6242804F), quaternion0.getW(), 0.01F);
      assertEquals((-0.78120035F), quaternion0.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles((-2869.244F), (-2869.244F), (-2869.244F));
      assertEquals(0.17262499F, quaternion0.z, 0.01F);
      assertEquals(0.59122413F, quaternion0.w, 0.01F);
      assertEquals((-0.55707026F), quaternion0.y, 0.01F);
      assertEquals((-0.5570703F), quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.17262499F, quaternion0.getZ(), 0.01F);
      assertEquals(0.59122413F, quaternion0.getW(), 0.01F);
      assertEquals((-0.5570703F), quaternion0.getX(), 0.01F);
      assertEquals((-0.55707026F), quaternion0.getY(), 0.01F);
      
      float float0 = quaternion0.DIRECTION_Z.norm();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(0.17262499F, quaternion0.z, 0.01F);
      assertEquals(0.59122413F, quaternion0.w, 0.01F);
      assertEquals((-0.55707026F), quaternion0.y, 0.01F);
      assertEquals((-0.5570703F), quaternion0.x, 0.01F);
      assertEquals(0.17262499F, quaternion0.getZ(), 0.01F);
      assertEquals(0.59122413F, quaternion0.getW(), 0.01F);
      assertEquals((-0.5570703F), quaternion0.getX(), 0.01F);
      assertEquals((-0.55707026F), quaternion0.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis((-1540.31F), vector3f0);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals((-0.8938981F), quaternion0.w, 0.01F);
      assertEquals(0.4482701F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.4482701F, quaternion0.getX(), 0.01F);
      assertEquals((-0.8938981F), quaternion0.getW(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromAngleAxis(0.0F, vector3f0);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(971.974F);
      assertEquals(971.974F, vector3f0.x, 0.01F);
      assertEquals(971.974F, vector3f0.y, 0.01F);
      assertEquals(971.974F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(971.974F, vector3f0.getX(), 0.01F);
      assertEquals(971.974F, vector3f0.getY(), 0.01F);
      assertEquals(971.974F, vector3f0.getZ(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromAngleAxis(1062.2F, vector3f0);
      assertEquals(971.974F, vector3f0.x, 0.01F);
      assertEquals(971.974F, vector3f0.y, 0.01F);
      assertEquals(971.974F, vector3f0.z, 0.01F);
      assertEquals((-0.098142415F), quaternion0.x, 0.01F);
      assertEquals((-0.098142415F), quaternion0.y, 0.01F);
      assertEquals((-0.098142415F), quaternion0.z, 0.01F);
      assertEquals((-0.9854462F), quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(971.974F, vector3f0.getX(), 0.01F);
      assertEquals(971.974F, vector3f0.getY(), 0.01F);
      assertEquals(971.974F, vector3f0.getZ(), 0.01F);
      assertEquals((-0.9854462F), quaternion0.getW(), 0.01F);
      assertEquals((-0.098142415F), quaternion0.getZ(), 0.01F);
      assertEquals((-0.098142415F), quaternion0.getX(), 0.01F);
      assertEquals((-0.098142415F), quaternion0.getY(), 0.01F);
      
      Quaternion quaternion1 = Quaternion.ZERO;
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(0.0F, quaternion1.getW(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals(0.0F, quaternion1.getZ(), 0.01F);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      
      Quaternion quaternion2 = quaternion0.mult(quaternion1);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertEquals(971.974F, vector3f0.x, 0.01F);
      assertEquals(971.974F, vector3f0.y, 0.01F);
      assertEquals(971.974F, vector3f0.z, 0.01F);
      assertEquals((-0.098142415F), quaternion0.x, 0.01F);
      assertEquals((-0.098142415F), quaternion0.y, 0.01F);
      assertEquals((-0.098142415F), quaternion0.z, 0.01F);
      assertEquals((-0.9854462F), quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertNotNull(quaternion2);
      assertEquals(971.974F, vector3f0.getX(), 0.01F);
      assertEquals(971.974F, vector3f0.getY(), 0.01F);
      assertEquals(971.974F, vector3f0.getZ(), 0.01F);
      assertEquals((-0.9854462F), quaternion0.getW(), 0.01F);
      assertEquals((-0.098142415F), quaternion0.getZ(), 0.01F);
      assertEquals((-0.098142415F), quaternion0.getX(), 0.01F);
      assertEquals((-0.098142415F), quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion1.getW(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals(0.0F, quaternion1.getZ(), 0.01F);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertEquals(0.0F, quaternion2.getW(), 0.01F);
      assertEquals(0.0F, quaternion2.getY(), 0.01F);
      assertEquals(0.0F, quaternion2.getX(), 0.01F);
      assertEquals(0.0F, quaternion2.getZ(), 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      assertNotNull(matrix3f0);
      assertTrue(matrix3f0.isIdentity());
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromMatrix3f(matrix3f0);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertNotNull(quaternion0);
      assertTrue(matrix3f0.isIdentity());
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      
      float[] floatArray0 = new float[5];
      floatArray0[2] = 0.33333334F;
      Quaternion quaternion1 = quaternion0.IDENTITY.build(floatArray0);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(0.33333334F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion1);
      assertTrue(matrix3f0.isIdentity());
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertEquals(0.33333334F, quaternion1.getZ(), 0.01F);
      assertEquals(0.0F, quaternion1.getW(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.33333334F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromAxes(vector3f0, vector3f0, vector3f0);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.70710677F, quaternion0.w, 0.01F);
      assertEquals((-0.35355338F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.35355338F, quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.35355338F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.70710677F, quaternion0.getW(), 0.01F);
      assertEquals((-0.35355338F), quaternion0.getY(), 0.01F);
      
      float[] floatArray0 = new float[4];
      floatArray0[2] = (-3663.169F);
      Quaternion quaternion1 = quaternion0.build(floatArray0);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.70710677F, quaternion0.w, 0.01F);
      assertEquals((-0.35355338F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.35355338F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals((-3663.169F), quaternion1.z, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(quaternion1);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.35355338F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.70710677F, quaternion0.getW(), 0.01F);
      assertEquals((-0.35355338F), quaternion0.getY(), 0.01F);
      assertEquals((-3663.169F), quaternion1.getZ(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertEquals(0.0F, quaternion1.getW(), 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-3663.169F), 0.0F}, floatArray0, 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = 1.0F;
      Quaternion quaternion1 = quaternion0.build(floatArray0);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(7, floatArray0.length);
      assertNotNull(quaternion1);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion1.getW(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals(1.0F, quaternion1.getY(), 0.01F);
      assertEquals(0.0F, quaternion1.getZ(), 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromMatrix3f((-1127.182F), (-1127.182F), (-1127.182F), (-1127.182F), (-1127.182F), (-1127.182F), (-1127.182F), (-1127.182F), (-1127.182F));
      assertEquals((-33.558647F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals((-33.558647F), quaternion0.x, 0.01F);
      assertEquals(16.79421F, quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      assertEquals((-33.558647F), quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals((-33.558647F), quaternion0.getY(), 0.01F);
      assertEquals(16.79421F, quaternion0.getZ(), 0.01F);
      
      float[] floatArray0 = new float[5];
      floatArray0[1] = (-33.558647F);
      Quaternion quaternion1 = quaternion0.IDENTITY.build(floatArray0);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals((-33.558647F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals((-33.558647F), quaternion0.x, 0.01F);
      assertEquals(16.79421F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals((-33.558647F), quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion1);
      assertEquals((-33.558647F), quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals((-33.558647F), quaternion0.getY(), 0.01F);
      assertEquals(16.79421F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals(0.0F, quaternion1.getW(), 0.01F);
      assertEquals((-33.558647F), quaternion1.getY(), 0.01F);
      assertEquals(0.0F, quaternion1.getZ(), 0.01F);
      assertArrayEquals(new float[] {0.0F, (-33.558647F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      Quaternion quaternion1 = quaternion0.build(floatArray0);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(7, floatArray0.length);
      assertNotNull(quaternion1);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion1.getZ(), 0.01F);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertEquals(1.0F, quaternion1.getX(), 0.01F);
      assertEquals(0.0F, quaternion1.getW(), 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromAxes(vector3f0, vector3f0, vector3f0);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals((-0.35355338F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.35355338F, quaternion0.x, 0.01F);
      assertEquals(0.70710677F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals((-0.35355338F), quaternion0.getY(), 0.01F);
      assertEquals(0.35355338F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.70710677F, quaternion0.getW(), 0.01F);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2.2248735F);
      Quaternion quaternion1 = quaternion0.build(floatArray0);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals((-0.35355338F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.35355338F, quaternion0.x, 0.01F);
      assertEquals(0.70710677F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals((-2.2248735F), quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(quaternion1);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals((-0.35355338F), quaternion0.getY(), 0.01F);
      assertEquals(0.35355338F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.70710677F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion1.getW(), 0.01F);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertEquals((-2.2248735F), quaternion1.getX(), 0.01F);
      assertEquals(0.0F, quaternion1.getZ(), 0.01F);
      assertArrayEquals(new float[] {(-2.2248735F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      assertNotNull(matrix3f0);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertTrue(matrix3f0.isIdentity());
      
      Quaternion quaternion0 = Quaternion.fromMatrix3f(matrix3f0);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertTrue(matrix3f0.isIdentity());
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      
      float[] floatArray0 = new float[5];
      floatArray0[3] = 516.6F;
      Quaternion quaternion1 = quaternion0.IDENTITY.build(floatArray0);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(516.6F, quaternion1.w, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(quaternion1);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertTrue(matrix3f0.isIdentity());
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals(0.0F, quaternion1.getZ(), 0.01F);
      assertEquals(516.6F, quaternion1.getW(), 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 516.6F, 0.0F}, floatArray0, 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      
      float[] floatArray0 = new float[7];
      floatArray0[3] = (-2.0F);
      Quaternion quaternion1 = quaternion0.build(floatArray0);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals((-2.0F), quaternion1.w, 0.01F);
      assertEquals(7, floatArray0.length);
      assertNotNull(quaternion1);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion1.getZ(), 0.01F);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals((-2.0F), quaternion1.getW(), 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-2.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      
      Quaternion quaternion1 = quaternion0.DIRECTION_Z.build(469.2F, 1.5707964F, 0.0F, 1.0F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(1.5707964F, quaternion1.y, 0.01F);
      assertEquals(469.2F, quaternion1.x, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, quaternion1.getW(), 0.01F);
      assertEquals(0.0F, quaternion1.getZ(), 0.01F);
      assertEquals(469.2F, quaternion1.getX(), 0.01F);
      assertEquals(1.5707964F, quaternion1.getY(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromAngleAxis(Float.NEGATIVE_INFINITY, vector3f0);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getW(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getX(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getZ(), 0.01F);
      
      Quaternion quaternion1 = quaternion0.build(3.1415927F, (-2293.646F), 0.5F, 0.87758255F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.w, 0.01F);
      assertEquals(3.1415927F, quaternion1.x, 0.01F);
      assertEquals(0.5F, quaternion1.z, 0.01F);
      assertEquals((-2293.646F), quaternion1.y, 0.01F);
      assertEquals(0.87758255F, quaternion1.w, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getW(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getX(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getZ(), 0.01F);
      assertEquals((-2293.646F), quaternion1.getY(), 0.01F);
      assertEquals(0.5F, quaternion1.getZ(), 0.01F);
      assertEquals(0.87758255F, quaternion1.getW(), 0.01F);
      assertEquals(3.1415927F, quaternion1.getX(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(2875.2F, (-3082.1448F), (-3082.1448F));
      assertEquals(0.93956286F, quaternion0.w, 0.01F);
      assertEquals(0.15176794F, quaternion0.z, 0.01F);
      assertEquals((-0.07596253F), quaternion0.y, 0.01F);
      assertEquals(0.2973515F, quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      assertEquals((-0.07596253F), quaternion0.getY(), 0.01F);
      assertEquals(0.2973515F, quaternion0.getX(), 0.01F);
      assertEquals(0.15176794F, quaternion0.getZ(), 0.01F);
      assertEquals(0.93956286F, quaternion0.getW(), 0.01F);
      
      Quaternion quaternion1 = quaternion0.build(0.0F, 0.577F, 2.0F, 0.61304235F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.93956286F, quaternion0.w, 0.01F);
      assertEquals(0.15176794F, quaternion0.z, 0.01F);
      assertEquals((-0.07596253F), quaternion0.y, 0.01F);
      assertEquals(0.2973515F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.61304235F, quaternion1.w, 0.01F);
      assertEquals(0.577F, quaternion1.y, 0.01F);
      assertEquals(2.0F, quaternion1.z, 0.01F);
      assertNotNull(quaternion1);
      assertEquals((-0.07596253F), quaternion0.getY(), 0.01F);
      assertEquals(0.2973515F, quaternion0.getX(), 0.01F);
      assertEquals(0.15176794F, quaternion0.getZ(), 0.01F);
      assertEquals(0.93956286F, quaternion0.getW(), 0.01F);
      assertEquals(2.0F, quaternion1.getZ(), 0.01F);
      assertEquals(0.577F, quaternion1.getY(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals(0.61304235F, quaternion1.getW(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      
      Quaternion quaternion1 = quaternion0.build((-1.5707964F), 0.0F, 1601.1548F, 1032.66F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals((-1.5707964F), quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(1032.66F, quaternion1.w, 0.01F);
      assertEquals(1601.1548F, quaternion1.z, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(1601.1548F, quaternion1.getZ(), 0.01F);
      assertEquals((-1.5707964F), quaternion1.getX(), 0.01F);
      assertEquals(1032.66F, quaternion1.getW(), 0.01F);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      assertNotNull(matrix3f0);
      assertTrue(matrix3f0.isIdentity());
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromMatrix3f(matrix3f0);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertTrue(matrix3f0.isIdentity());
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      
      Quaternion quaternion1 = quaternion0.build(274.69254F, 0.33333334F, Float.NEGATIVE_INFINITY, 0.0F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.33333334F, quaternion1.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(274.69254F, quaternion1.x, 0.01F);
      assertNotNull(quaternion1);
      assertTrue(matrix3f0.isIdentity());
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, quaternion1.getZ(), 0.01F);
      assertEquals(0.33333334F, quaternion1.getY(), 0.01F);
      assertEquals(0.0F, quaternion1.getW(), 0.01F);
      assertEquals(274.69254F, quaternion1.getX(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      
      Quaternion quaternion1 = quaternion0.build(-0.0F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(-0.0F, quaternion1.w, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion1.z, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(-0.0F, quaternion1.getZ(), 0.01F);
      assertEquals(-0.0F, quaternion1.getW(), 0.01F);
      assertEquals(-0.0F, quaternion1.getX(), 0.01F);
      assertEquals(-0.0F, quaternion1.getY(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertEquals(Float.NaN, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getX(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromAngleAxis((-3116.0F), vector3f0);
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertEquals(Float.NaN, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.x, 0.01F);
      assertEquals(0.9736764F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getZ(), 0.01F);
      assertEquals(0.9736764F, quaternion0.getW(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getX(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getY(), 0.01F);
      
      Quaternion quaternion1 = quaternion0.build((-3116.0F));
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertEquals(Float.NaN, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.x, 0.01F);
      assertEquals(0.9736764F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals((-3116.0F), quaternion1.x, 0.01F);
      assertEquals((-3116.0F), quaternion1.y, 0.01F);
      assertEquals((-3116.0F), quaternion1.z, 0.01F);
      assertEquals((-3116.0F), quaternion1.w, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getZ(), 0.01F);
      assertEquals(0.9736764F, quaternion0.getW(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getX(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getY(), 0.01F);
      assertEquals((-3116.0F), quaternion1.getZ(), 0.01F);
      assertEquals((-3116.0F), quaternion1.getY(), 0.01F);
      assertEquals((-3116.0F), quaternion1.getX(), 0.01F);
      assertEquals((-3116.0F), quaternion1.getW(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      
      Quaternion quaternion2 = quaternion1.inverse();
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertEquals(Float.NaN, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.x, 0.01F);
      assertEquals(0.9736764F, quaternion0.w, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals((-3116.0F), quaternion1.x, 0.01F);
      assertEquals((-3116.0F), quaternion1.y, 0.01F);
      assertEquals((-3116.0F), quaternion1.z, 0.01F);
      assertEquals((-3116.0F), quaternion1.w, 0.01F);
      assertEquals(8.023107E-5F, quaternion2.y, 0.01F);
      assertEquals(8.023107E-5F, quaternion2.z, 0.01F);
      assertEquals(8.023107E-5F, quaternion2.x, 0.01F);
      assertEquals((-8.023107E-5F), quaternion2.w, 0.01F);
      assertNotNull(quaternion2);
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getZ(), 0.01F);
      assertEquals(0.9736764F, quaternion0.getW(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getX(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getY(), 0.01F);
      assertEquals((-3116.0F), quaternion1.getZ(), 0.01F);
      assertEquals((-3116.0F), quaternion1.getY(), 0.01F);
      assertEquals((-3116.0F), quaternion1.getX(), 0.01F);
      assertEquals((-3116.0F), quaternion1.getW(), 0.01F);
      assertEquals(8.023107E-5F, quaternion2.getZ(), 0.01F);
      assertEquals((-8.023107E-5F), quaternion2.getW(), 0.01F);
      assertEquals(8.023107E-5F, quaternion2.getX(), 0.01F);
      assertEquals(8.023107E-5F, quaternion2.getY(), 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles((-637.86523F), (-637.86523F), (-637.86523F));
      assertEquals((-0.056993976F), quaternion0.z, 0.01F);
      assertEquals((-0.9942113F), quaternion0.w, 0.01F);
      assertEquals(0.06440392F, quaternion0.x, 0.01F);
      assertEquals(0.06440392F, quaternion0.y, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.06440392F, quaternion0.getY(), 0.01F);
      assertEquals(0.06440392F, quaternion0.getX(), 0.01F);
      assertEquals((-0.9942113F), quaternion0.getW(), 0.01F);
      assertEquals((-0.056993976F), quaternion0.getZ(), 0.01F);
      
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      assertNotNull(matrix3f0);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertTrue(matrix3f0.isIdentity());
      
      Quaternion quaternion1 = quaternion0.apply(matrix3f0);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals((-0.056993976F), quaternion0.z, 0.01F);
      assertEquals((-0.9942113F), quaternion0.w, 0.01F);
      assertEquals(0.06440392F, quaternion0.x, 0.01F);
      assertEquals(0.06440392F, quaternion0.y, 0.01F);
      assertEquals(0.06440392F, quaternion1.y, 0.01F);
      assertEquals(0.06440392F, quaternion1.x, 0.01F);
      assertEquals((-0.056993976F), quaternion1.z, 0.01F);
      assertEquals((-0.9942113F), quaternion1.w, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(0.06440392F, quaternion0.getY(), 0.01F);
      assertEquals(0.06440392F, quaternion0.getX(), 0.01F);
      assertEquals((-0.9942113F), quaternion0.getW(), 0.01F);
      assertEquals((-0.056993976F), quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertTrue(matrix3f0.isIdentity());
      assertEquals(0.06440392F, quaternion1.getX(), 0.01F);
      assertEquals(0.06440392F, quaternion1.getY(), 0.01F);
      assertEquals((-0.056993976F), quaternion1.getZ(), 0.01F);
      assertEquals((-0.9942113F), quaternion1.getW(), 0.01F);
      assertTrue(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(3.0F, (-946.12F), 1.1920929E-7F, (-946.12F));
      assertEquals((-946.12F), quaternion0.y, 0.01F);
      assertEquals(3.0F, quaternion0.x, 0.01F);
      assertEquals((-946.12F), quaternion0.w, 0.01F);
      assertEquals(1.1920929E-7F, quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      assertEquals((-946.12F), quaternion0.getW(), 0.01F);
      assertEquals(3.0F, quaternion0.getX(), 0.01F);
      assertEquals((-946.12F), quaternion0.getY(), 0.01F);
      assertEquals(1.1920929E-7F, quaternion0.getZ(), 0.01F);
      
      Matrix3f matrix3f0 = quaternion0.toRotationMatrix();
      assertEquals((-946.12F), quaternion0.y, 0.01F);
      assertEquals(3.0F, quaternion0.x, 0.01F);
      assertEquals((-946.12F), quaternion0.w, 0.01F);
      assertEquals(1.1920929E-7F, quaternion0.z, 0.01F);
      assertNotNull(matrix3f0);
      assertEquals((-946.12F), quaternion0.getW(), 0.01F);
      assertEquals(3.0F, quaternion0.getX(), 0.01F);
      assertEquals((-946.12F), quaternion0.getY(), 0.01F);
      assertEquals(1.1920929E-7F, quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      
      Quaternion quaternion1 = quaternion0.apply(matrix3f0);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals((-946.12F), quaternion0.y, 0.01F);
      assertEquals(3.0F, quaternion0.x, 0.01F);
      assertEquals((-946.12F), quaternion0.w, 0.01F);
      assertEquals(1.1920929E-7F, quaternion0.z, 0.01F);
      assertEquals(4.78478E-7F, quaternion1.z, 0.01F);
      assertEquals(4.24263F, quaternion1.x, 0.01F);
      assertEquals(0.006652832F, quaternion1.w, 0.01F);
      assertEquals((-1338.0125F), quaternion1.y, 0.01F);
      assertNotNull(quaternion1);
      assertEquals((-946.12F), quaternion0.getW(), 0.01F);
      assertEquals(3.0F, quaternion0.getX(), 0.01F);
      assertEquals((-946.12F), quaternion0.getY(), 0.01F);
      assertEquals(1.1920929E-7F, quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(4.24263F, quaternion1.getX(), 0.01F);
      assertEquals(4.78478E-7F, quaternion1.getZ(), 0.01F);
      assertEquals(0.006652832F, quaternion1.getW(), 0.01F);
      assertEquals((-1338.0125F), quaternion1.getY(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-328.10355F));
      assertEquals((-328.10355F), vector3f0.x, 0.01F);
      assertEquals((-328.10355F), vector3f0.z, 0.01F);
      assertEquals((-328.10355F), vector3f0.y, 0.01F);
      assertNotNull(vector3f0);
      assertEquals((-328.10355F), vector3f0.getY(), 0.01F);
      assertEquals((-328.10355F), vector3f0.getX(), 0.01F);
      assertEquals((-328.10355F), vector3f0.getZ(), 0.01F);
      
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      assertEquals((-328.10355F), vector3f0.x, 0.01F);
      assertEquals((-328.10355F), vector3f0.z, 0.01F);
      assertEquals((-328.10355F), vector3f0.y, 0.01F);
      assertNotNull(matrix3f0);
      assertEquals((-328.10355F), vector3f0.getY(), 0.01F);
      assertEquals((-328.10355F), vector3f0.getX(), 0.01F);
      assertEquals((-328.10355F), vector3f0.getZ(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(-0.0F, matrix3f0.determinant(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromMatrix3f(matrix3f0);
      assertEquals((-328.10355F), vector3f0.x, 0.01F);
      assertEquals((-328.10355F), vector3f0.z, 0.01F);
      assertEquals((-328.10355F), vector3f0.y, 0.01F);
      assertEquals((-18.086088F), quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals((-18.086088F), quaternion0.y, 0.01F);
      assertEquals(9.070605F, quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      assertEquals((-328.10355F), vector3f0.getY(), 0.01F);
      assertEquals((-328.10355F), vector3f0.getX(), 0.01F);
      assertEquals((-328.10355F), vector3f0.getZ(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(-0.0F, matrix3f0.determinant(), 0.01F);
      assertEquals(9.070605F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals((-18.086088F), quaternion0.getY(), 0.01F);
      assertEquals((-18.086088F), quaternion0.getX(), 0.01F);
      
      Quaternion quaternion1 = quaternion0.apply(matrix3f0);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals((-328.10355F), vector3f0.x, 0.01F);
      assertEquals((-328.10355F), vector3f0.z, 0.01F);
      assertEquals((-328.10355F), vector3f0.y, 0.01F);
      assertEquals((-18.086088F), quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals((-18.086088F), quaternion0.y, 0.01F);
      assertEquals(9.070605F, quaternion0.z, 0.01F);
      assertEquals((-736.4891F), quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertNotNull(quaternion1);
      assertEquals((-328.10355F), vector3f0.getY(), 0.01F);
      assertEquals((-328.10355F), vector3f0.getX(), 0.01F);
      assertEquals((-328.10355F), vector3f0.getZ(), 0.01F);
      assertFalse(matrix3f0.isIdentity());
      assertEquals(-0.0F, matrix3f0.determinant(), 0.01F);
      assertEquals(9.070605F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals((-18.086088F), quaternion0.getY(), 0.01F);
      assertEquals((-18.086088F), quaternion0.getX(), 0.01F);
      assertEquals((-736.4891F), quaternion1.getW(), 0.01F);
      assertEquals(0.0F, quaternion1.getZ(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      
      Vector3f[] vector3fArray0 = new Vector3f[1];
      // Undeclared exception!
      try { 
        quaternion0.toAxes(vector3fArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.slerp((Quaternion) null, (Quaternion) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      
      // Undeclared exception!
      try { 
        quaternion0.slerp((Quaternion) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      
      // Undeclared exception!
      try { 
        quaternion0.nlerp((Quaternion) null, (-72.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      
      // Undeclared exception!
      try { 
        quaternion0.mult((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.fromMatrix3f((Matrix3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector3f[] vector3fArray0 = new Vector3f[0];
      // Undeclared exception!
      try { 
        Quaternion.fromAxes(vector3fArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.fromAxes((Vector3f) null, (Vector3f) null, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.fromAngleNormalAxis(0.0F, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.fromAngleAxis((-752.5124F), (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      
      // Undeclared exception!
      try { 
        quaternion0.build((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        quaternion0.build(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      
      // Undeclared exception!
      try { 
        quaternion0.apply((Matrix3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      
      Quaternion quaternion1 = Quaternion.fromMatrix3f(1.0F, 0.0F, (-3588.336F), 0.0F, 0.0F, (-3588.336F), (-3588.336F), 0.0F, (-3588.336F));
      assertNotSame(quaternion1, quaternion0);
      assertEquals(29.943018F, quaternion1.w, 0.01F);
      assertEquals((-59.886036F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(29.959705F, quaternion1.x, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(29.959705F, quaternion1.getX(), 0.01F);
      assertEquals((-59.886036F), quaternion1.getZ(), 0.01F);
      assertEquals(29.943018F, quaternion1.getW(), 0.01F);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      
      Quaternion quaternion2 = quaternion0.slerp(quaternion1, (-3588.336F));
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(29.943018F, quaternion1.w, 0.01F);
      assertEquals((-59.886036F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(29.959705F, quaternion1.x, 0.01F);
      assertEquals((-103856.27F), quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals(214891.22F, quaternion2.z, 0.01F);
      assertEquals((-107505.484F), quaternion2.x, 0.01F);
      assertNotNull(quaternion2);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(29.959705F, quaternion1.getX(), 0.01F);
      assertEquals((-59.886036F), quaternion1.getZ(), 0.01F);
      assertEquals(29.943018F, quaternion1.getW(), 0.01F);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertEquals(0.0F, quaternion2.getY(), 0.01F);
      assertEquals(214891.22F, quaternion2.getZ(), 0.01F);
      assertEquals((-107505.484F), quaternion2.getX(), 0.01F);
      assertEquals((-103856.27F), quaternion2.getW(), 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(0.1F, 1.5707964F, 0.1F);
      assertEquals(0.70710677F, quaternion0.y, 0.01F);
      assertEquals((-3.7252903E-9F), quaternion0.z, 0.01F);
      assertEquals(0.70357424F, quaternion0.w, 0.01F);
      assertEquals(0.07059288F, quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.07059288F, quaternion0.getX(), 0.01F);
      assertEquals(0.70357424F, quaternion0.getW(), 0.01F);
      assertEquals(0.70710677F, quaternion0.getY(), 0.01F);
      assertEquals((-3.7252903E-9F), quaternion0.getZ(), 0.01F);
      
      Quaternion quaternion1 = quaternion0.slerp(quaternion0, (-3637.2F));
      assertSame(quaternion0, quaternion1);
      assertSame(quaternion1, quaternion0);
      assertEquals(0.70710677F, quaternion0.y, 0.01F);
      assertEquals((-3.7252903E-9F), quaternion0.z, 0.01F);
      assertEquals(0.70357424F, quaternion0.w, 0.01F);
      assertEquals(0.07059288F, quaternion0.x, 0.01F);
      assertEquals(0.07059288F, quaternion1.x, 0.01F);
      assertEquals(0.70710677F, quaternion1.y, 0.01F);
      assertEquals(0.70357424F, quaternion1.w, 0.01F);
      assertEquals((-3.7252903E-9F), quaternion1.z, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(0.07059288F, quaternion0.getX(), 0.01F);
      assertEquals(0.70357424F, quaternion0.getW(), 0.01F);
      assertEquals(0.70710677F, quaternion0.getY(), 0.01F);
      assertEquals((-3.7252903E-9F), quaternion0.getZ(), 0.01F);
      assertEquals((-3.7252903E-9F), quaternion1.getZ(), 0.01F);
      assertEquals(0.70357424F, quaternion1.getW(), 0.01F);
      assertEquals(0.70710677F, quaternion1.getY(), 0.01F);
      assertEquals(0.07059288F, quaternion1.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.DIRECTION_Z;
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      
      Vector3f vector3f0 = Vector3f.UNIT_X;
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      
      Quaternion quaternion1 = Quaternion.fromAxes(vector3f0, vector3f0, vector3f0);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.35355338F, quaternion1.y, 0.01F);
      assertEquals((-0.35355338F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.70710677F, quaternion1.w, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.70710677F, quaternion1.getW(), 0.01F);
      assertEquals(0.35355338F, quaternion1.getY(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals((-0.35355338F), quaternion1.getZ(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      
      Quaternion quaternion2 = quaternion1.slerp(quaternion0, 0.0F);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertNotSame(quaternion2, quaternion0);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.35355338F, quaternion1.y, 0.01F);
      assertEquals((-0.35355338F), quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.70710677F, quaternion1.w, 0.01F);
      assertEquals(0.35355335F, quaternion2.y, 0.01F);
      assertEquals((-0.35355335F), quaternion2.z, 0.01F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.7071067F, quaternion2.w, 0.01F);
      assertNotNull(quaternion2);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.70710677F, quaternion1.getW(), 0.01F);
      assertEquals(0.35355338F, quaternion1.getY(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals((-0.35355338F), quaternion1.getZ(), 0.01F);
      assertEquals((-0.35355335F), quaternion2.getZ(), 0.01F);
      assertEquals(0.0F, quaternion2.getX(), 0.01F);
      assertEquals(0.35355335F, quaternion2.getY(), 0.01F);
      assertEquals(0.7071067F, quaternion2.getW(), 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(28.187572F, 1501.0F, 1501.0F);
      assertEquals((-0.072987534F), quaternion0.w, 0.01F);
      assertEquals(0.8923859F, quaternion0.x, 0.01F);
      assertEquals(0.30094475F, quaternion0.z, 0.01F);
      assertEquals((-0.32825708F), quaternion0.y, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.8923859F, quaternion0.getX(), 0.01F);
      assertEquals(0.30094475F, quaternion0.getZ(), 0.01F);
      assertEquals((-0.32825708F), quaternion0.getY(), 0.01F);
      assertEquals((-0.072987534F), quaternion0.getW(), 0.01F);
      
      Quaternion quaternion1 = Quaternion.DIRECTION_Z;
      assertNotSame(quaternion1, quaternion0);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(0.0F, quaternion1.getZ(), 0.01F);
      assertEquals(1.0F, quaternion1.getW(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
      
      Quaternion quaternion2 = quaternion0.slerp(quaternion1, 0.0F);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion0, quaternion2);
      assertNotSame(quaternion1, quaternion2);
      assertNotSame(quaternion1, quaternion0);
      assertNotSame(quaternion2, quaternion0);
      assertNotSame(quaternion2, quaternion1);
      assertEquals((-0.072987534F), quaternion0.w, 0.01F);
      assertEquals(0.8923859F, quaternion0.x, 0.01F);
      assertEquals(0.30094475F, quaternion0.z, 0.01F);
      assertEquals((-0.32825708F), quaternion0.y, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.30094472F, quaternion2.z, 0.01F);
      assertEquals((-0.32825705F), quaternion2.y, 0.01F);
      assertEquals((-0.07298753F), quaternion2.w, 0.01F);
      assertEquals(0.89238584F, quaternion2.x, 0.01F);
      assertNotNull(quaternion2);
      assertEquals(0.8923859F, quaternion0.getX(), 0.01F);
      assertEquals(0.30094475F, quaternion0.getZ(), 0.01F);
      assertEquals((-0.32825708F), quaternion0.getY(), 0.01F);
      assertEquals((-0.072987534F), quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion1.getZ(), 0.01F);
      assertEquals(1.0F, quaternion1.getW(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertEquals((-0.32825705F), quaternion2.getY(), 0.01F);
      assertEquals((-0.07298753F), quaternion2.getW(), 0.01F);
      assertEquals(0.89238584F, quaternion2.getX(), 0.01F);
      assertEquals(0.30094472F, quaternion2.getZ(), 0.01F);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion0));
      assertFalse(quaternion2.equals((Object)quaternion1));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis((-362.4261F), vector3f0);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(0.54086536F, quaternion0.w, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, quaternion0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, quaternion0.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, quaternion0.x, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(0.54086536F, quaternion0.getW(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, quaternion0.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, quaternion0.getX(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, quaternion0.getY(), 0.01F);
      
      Quaternion quaternion1 = quaternion0.inverse();
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(0.54086536F, quaternion0.w, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, quaternion0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, quaternion0.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion1.w, 0.01F);
      assertEquals(Float.NaN, quaternion1.z, 0.01F);
      assertEquals(Float.NaN, quaternion1.y, 0.01F);
      assertEquals(Float.NaN, quaternion1.x, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(0.54086536F, quaternion0.getW(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, quaternion0.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, quaternion0.getX(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, quaternion0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion1.getZ(), 0.01F);
      assertEquals(Float.NaN, quaternion1.getX(), 0.01F);
      assertEquals(0.0F, quaternion1.getW(), 0.01F);
      assertEquals(Float.NaN, quaternion1.getY(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      
      Matrix3f matrix3f0 = quaternion0.toRotationMatrix();
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertNotNull(matrix3f0);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertTrue(matrix3f0.isIdentity());
      
      Quaternion quaternion1 = quaternion0.apply(matrix3f0);
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(1.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertTrue(matrix3f0.isIdentity());
      assertEquals(1.0F, quaternion1.getW(), 0.01F);
      assertEquals(0.0F, quaternion1.getX(), 0.01F);
      assertEquals(0.0F, quaternion1.getZ(), 0.01F);
      assertEquals(0.0F, quaternion1.getY(), 0.01F);
      assertTrue(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      
      float float0 = quaternion0.norm();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.0F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getX(), 0.01F);
      assertEquals(0.0F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromAxes(vector3f0, vector3f0, vector3f0);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals((-0.35355338F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.35355338F, quaternion0.x, 0.01F);
      assertEquals(0.70710677F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.70710677F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals((-0.35355338F), quaternion0.getY(), 0.01F);
      assertEquals(0.35355338F, quaternion0.getX(), 0.01F);
      
      Quaternion quaternion1 = quaternion0.IDENTITY.inverse();
      assertNotSame(quaternion0, quaternion1);
      assertNotSame(quaternion1, quaternion0);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals((-0.35355338F), quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(0.35355338F, quaternion0.x, 0.01F);
      assertEquals(0.70710677F, quaternion0.w, 0.01F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertEquals(-0.0F, quaternion1.x, 0.01F);
      assertEquals(-0.0F, quaternion1.y, 0.01F);
      assertEquals(-0.0F, quaternion1.z, 0.01F);
      assertNotNull(quaternion1);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.70710677F, quaternion0.getW(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals((-0.35355338F), quaternion0.getY(), 0.01F);
      assertEquals(0.35355338F, quaternion0.getX(), 0.01F);
      assertEquals(-0.0F, quaternion1.getX(), 0.01F);
      assertEquals(1.0F, quaternion1.getW(), 0.01F);
      assertEquals(-0.0F, quaternion1.getY(), 0.01F);
      assertEquals(-0.0F, quaternion1.getZ(), 0.01F);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromAngleAxis(1.0F, vector3f0);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(0.87758255F, quaternion0.w, 0.01F);
      assertNotNull(quaternion0);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getX(), 0.01F);
      assertEquals(0.87758255F, quaternion0.getW(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getZ(), 0.01F);
      
      Quaternion quaternion1 = quaternion0.inverse();
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.z, 0.01F);
      assertEquals(Float.NaN, quaternion0.y, 0.01F);
      assertEquals(Float.NaN, quaternion0.x, 0.01F);
      assertEquals(0.87758255F, quaternion0.w, 0.01F);
      assertNull(quaternion1);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getY(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getX(), 0.01F);
      assertEquals(0.87758255F, quaternion0.getW(), 0.01F);
      assertEquals(Float.NaN, quaternion0.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles((-3038.81F), (-3038.81F), (-3038.81F));
      Quaternion quaternion1 = Quaternion.fromMatrix3f((-0.18345244F), 810.1F, (-3038.81F), -0.0F, (-31.17419F), 1.0000002F, 1.0F, (-107.0F), (-540.8725F));
      Quaternion quaternion2 = Quaternion.slerp(quaternion0, quaternion1, (-0.6556302F));
      Quaternion quaternion3 = quaternion2.nlerp(quaternion0, 1090.0F);
      assertEquals(0.2273784F, quaternion3.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = quaternion0.nlerp(quaternion0, Float.POSITIVE_INFINITY);
      assertNotSame(quaternion1, quaternion0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Quaternion quaternion0 = Quaternion.fromAxes(vector3f0, vector3f0, vector3f0);
      Quaternion quaternion1 = new Quaternion(3.0F, 3.0F, 0.0F, (-3663.169F));
      Quaternion quaternion2 = Quaternion.slerp(quaternion0, quaternion1, 0.70710677F);
      assertEquals(0.70710677F, quaternion0.w, 0.01F);
      assertEquals((-2.017767F), quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals((-0.35355338F), quaternion0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      Quaternion quaternion1 = Quaternion.fromMatrix3f(matrix3f0);
      Quaternion quaternion2 = quaternion1.slerp(quaternion0, 2591.202F);
      assertEquals(0.0F, quaternion2.x, 0.01F);
      assertEquals(0.0F, quaternion2.y, 0.01F);
      assertEquals((-0.3071484F), quaternion2.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Quaternion quaternion1 = Quaternion.fromAngleNormalAxis(1.0F, vector3f0);
      Quaternion quaternion2 = quaternion1.slerp(quaternion0, 0.33333334F);
      assertEquals(0.0F, quaternion1.y, 0.01F);
      assertEquals(0.76000875F, quaternion2.w, 0.01F);
      assertEquals(0.0F, quaternion1.x, 0.01F);
      assertEquals(0.4151947F, quaternion2.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Quaternion quaternion1 = Quaternion.fromAngleNormalAxis(1.0F, vector3f0);
      Quaternion quaternion2 = Quaternion.slerp(quaternion0, quaternion1, 0.0F);
      assertEquals(0.87758255F, quaternion1.w, 0.01F);
      assertEquals(0.47942555F, quaternion1.y, 0.01F);
      assertEquals(0.0F, quaternion1.z, 0.01F);
      assertTrue(quaternion2.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis(0.0F, vector3f0);
      assertEquals(1.0F, quaternion0.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Vector3f vector3f0 = quaternion0.getRotationColumn(2);
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.DIRECTION_Z;
      Vector3f vector3f0 = quaternion0.getRotationColumn(1);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Vector3f vector3f0 = quaternion0.getRotationColumn(0);
      assertEquals(Float.NaN, vector3f0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      // Undeclared exception!
      try { 
        quaternion0.getRotationColumn(938);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertTrue(matrix4f0.isIdentity());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Matrix3f matrix3f0 = quaternion0.toRotationMatrix();
      assertTrue(matrix3f0.isIdentity());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1.1920929E-7F, 1.1920929E-7F, (-974.86145F), (-974.86145F));
      float[] floatArray0 = new float[3];
      float[] floatArray1 = quaternion0.toAngles(floatArray0);
      assertArrayEquals(new float[] {0.0F, 6.2831855F, 1.5707964F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.DIRECTION_Z;
      float[] floatArray0 = quaternion0.toAngles((float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Quaternion quaternion0 = Quaternion.fromAxes(vector3f0, vector3f0, vector3f0);
      float[] floatArray0 = new float[4];
      // Undeclared exception!
      try { 
        quaternion0.toAngles(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Angles array must have three elements
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromMatrix3f(0.0F, 0.0F, 0.0F, 2.0F, 0.0F, 2.0F, 0.0F, (-2544.3215F), (-2544.3215F));
      assertEquals((-25.19586F), quaternion0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromMatrix3f(0.0F, Float.NaN, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 0.0F, 0.0F, 1.0F);
      assertEquals(Float.POSITIVE_INFINITY, quaternion0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis((-6155.2017F), vector3f0);
      Quaternion quaternion1 = quaternion0.build(282.0F);
      assertEquals(282.0F, quaternion1.w, 0.01F);
      assertEquals(0.0F, quaternion0.y, 0.01F);
      assertEquals(0.0F, quaternion0.x, 0.01F);
      assertEquals(0.39936662F, quaternion0.w, 0.01F);
      assertEquals(282.0F, quaternion1.x, 0.01F);
      assertEquals(282.0F, quaternion1.y, 0.01F);
      assertEquals(0.9167913F, quaternion0.z, 0.01F);
      assertEquals(282.0F, quaternion1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.mult((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      boolean boolean0 = quaternion0.isIdentity();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.DIRECTION_Z.toAxes((Vector3f[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Quaternion quaternion0 = Quaternion.fromAxes(vector3f0, vector3f0, vector3f0);
      Quaternion quaternion1 = quaternion0.build(2590.4585F, 0.2F, (-280.88022F), (-0.35355338F));
      assertEquals((-0.35355338F), quaternion0.y, 0.01F);
      assertEquals(0.35355338F, quaternion0.x, 0.01F);
      assertEquals((-280.88022F), quaternion1.z, 0.01F);
      assertEquals(0.2F, quaternion1.y, 0.01F);
      assertEquals((-0.35355338F), quaternion1.w, 0.01F);
      assertEquals(0.70710677F, quaternion0.w, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals(2590.4585F, quaternion1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      Quaternion quaternion1 = quaternion0.apply(matrix3f0);
      assertTrue(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.fromAxes((Vector3f[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(0.0F, 1.0F, (-158.64085F));
      float[] floatArray0 = quaternion0.toAngles((float[]) null);
      assertEquals((-0.34062415F), quaternion0.y, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-5.2912216F), (-1.5707964F)}, floatArray0, 0.01F);
  }
}
