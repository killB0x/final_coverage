/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 11:23:07 GMT 2022
 */

package com.iciql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iciql.ConditionAndOr;
import com.iciql.Dao;
import com.iciql.DaoProxy;
import com.iciql.Db;
import com.iciql.Function;
import com.iciql.Iciql;
import com.iciql.Query;
import com.iciql.SQLStatement;
import com.iciql.adapter.XStreamTypeAdapter;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Function_ESTest extends Function_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Boolean boolean0 = Function.like("ui0NyN", "1ds$uhe[G-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = Function.min(object0);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConditionAndOr conditionAndOr0 = ConditionAndOr.AND;
      ConditionAndOr conditionAndOr1 = Function.max(conditionAndOr0);
      assertSame(conditionAndOr1, conditionAndOr0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Function.sum((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.Function", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Dao> class0 = Dao.class;
      DaoProxy<Dao> daoProxy0 = new DaoProxy<Dao>((Db) null, class0);
      // Undeclared exception!
      try { 
        Function.min((Dao) daoProxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing default constructor?! Exception trying to instantiate com.iciql.DaoProxy: com.iciql.DaoProxy
         //
         verifyException("com.iciql.util.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Function.min((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.Function", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Dao> class0 = Dao.class;
      DaoProxy<Dao> daoProxy0 = new DaoProxy<Dao>((Db) null, class0);
      // Undeclared exception!
      try { 
        Function.max((Object) daoProxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing default constructor?! Exception trying to instantiate com.iciql.DaoProxy: com.iciql.DaoProxy
         //
         verifyException("com.iciql.util.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Function.max((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.Function", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      Function function0 = new Function(")", booleanArray0);
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(")").when(databaseMetaData0).getDatabaseProductName();
      DatabaseMetaData databaseMetaData1 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(databaseMetaData1).getDatabaseMajorVersion();
      doReturn(0).when(databaseMetaData1).getDatabaseMinorVersion();
      doReturn((String) null).when(databaseMetaData1).getDatabaseProductName();
      doReturn((String) null).when(databaseMetaData1).getDatabaseProductVersion();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(databaseMetaData0, databaseMetaData1).when(connection0).getMetaData();
      Iciql.Mode iciql_Mode0 = Iciql.Mode.TEST;
      Db db0 = Db.open(connection0, iciql_Mode0);
      SQLStatement sQLStatement0 = new SQLStatement(db0);
      // Undeclared exception!
      try { 
        function0.appendSQL(sQLStatement0, (Query<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.Function", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Function function0 = new Function("", booleanArray0);
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      doReturn("NvH6J(yFNr%A").when(databaseMetaData0).getDatabaseProductName();
      DatabaseMetaData databaseMetaData1 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(databaseMetaData1).getDatabaseMajorVersion();
      doReturn(0).when(databaseMetaData1).getDatabaseMinorVersion();
      doReturn((String) null).when(databaseMetaData1).getDatabaseProductName();
      doReturn((String) null).when(databaseMetaData1).getDatabaseProductVersion();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(databaseMetaData0, databaseMetaData1).when(connection0).getMetaData();
      Iciql.Mode iciql_Mode0 = Iciql.Mode.TEST;
      Db db0 = Db.open(connection0, iciql_Mode0);
      SQLStatement sQLStatement0 = new SQLStatement(db0);
      function0.appendSQL(sQLStatement0, (Query<Integer>) null);
      assertEquals(0L, (long)function0.count());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1001);
      Integer integer1 = Function.max(integer0);
      assertEquals(31, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = Function.not(boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = Function.isNotNull((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Function.or(booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-332));
      Long long0 = Function.count((Object) integer0);
      assertEquals(16L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(1001);
      Integer integer1 = Function.length(integer0);
      assertEquals(11, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XStreamTypeAdapter xStreamTypeAdapter0 = new XStreamTypeAdapter();
      Boolean boolean0 = Function.isNull(xStreamTypeAdapter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(1001);
      Integer integer1 = Function.sum(integer0);
      assertEquals(2, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Long long0 = Function.count();
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Boolean boolean0 = Function.and((Boolean[]) null);
      assertFalse(boolean0);
  }
}
