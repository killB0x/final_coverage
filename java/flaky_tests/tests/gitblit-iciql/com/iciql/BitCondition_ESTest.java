/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 11:17:47 GMT 2022
 */

package com.iciql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iciql.BitCondition;
import com.iciql.Dao;
import com.iciql.Db;
import com.iciql.Function;
import com.iciql.Iciql;
import com.iciql.Query;
import com.iciql.QueryWhere;
import com.iciql.SQLStatement;
import com.iciql.adapter.XStreamTypeAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitCondition_ESTest extends BitCondition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      BitCondition.Bitwise bitCondition_Bitwise0 = BitCondition.Bitwise.AND;
      BitCondition<Integer, Integer> bitCondition0 = new BitCondition<Integer, Integer>(integer0, (Integer) null, bitCondition_Bitwise0, (Query<Integer>) null);
      QueryWhere<Integer> queryWhere0 = bitCondition0.atMost(integer0);
      assertNotNull(queryWhere0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      BitCondition.Bitwise bitCondition_Bitwise0 = BitCondition.Bitwise.XOR;
      BitCondition<Integer, Integer> bitCondition0 = new BitCondition<Integer, Integer>(integer0, integer1, bitCondition_Bitwise0, (Query<Integer>) null);
      QueryWhere<Integer> queryWhere0 = bitCondition0.atMost(integer1);
      assertNotNull(queryWhere0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(0);
      BitCondition.Bitwise bitCondition_Bitwise0 = BitCondition.Bitwise.AND;
      BitCondition<Integer, Integer> bitCondition0 = new BitCondition<Integer, Integer>(integer0, integer0, bitCondition_Bitwise0, (Query<Integer>) null);
      Integer integer1 = new Integer(0);
      bitCondition0.y = integer1;
      QueryWhere<Integer> queryWhere0 = bitCondition0.lessThan(integer0);
      assertNotNull(queryWhere0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BitCondition.Bitwise bitCondition_Bitwise0 = BitCondition.Bitwise.XOR;
      Iciql.DataTypeAdapter<XStreamTypeAdapter> iciql_DataTypeAdapter0 = (Iciql.DataTypeAdapter<XStreamTypeAdapter>) mock(Iciql.DataTypeAdapter.class, new ViolatedAssumptionAnswer());
      BitCondition<Iciql.DataTypeAdapter<XStreamTypeAdapter>, Integer> bitCondition0 = new BitCondition<Iciql.DataTypeAdapter<XStreamTypeAdapter>, Integer>(iciql_DataTypeAdapter0, iciql_DataTypeAdapter0, bitCondition_Bitwise0, (Query<Integer>) null);
      Iciql.DataTypeAdapter<XStreamTypeAdapter> iciql_DataTypeAdapter1 = (Iciql.DataTypeAdapter<XStreamTypeAdapter>) mock(Iciql.DataTypeAdapter.class, new ViolatedAssumptionAnswer());
      QueryWhere<Integer> queryWhere0 = bitCondition0.atLeast(iciql_DataTypeAdapter1);
      assertNotNull(queryWhere0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BitCondition.Bitwise bitCondition_Bitwise0 = BitCondition.Bitwise.XOR;
      Iciql.DataTypeAdapter<XStreamTypeAdapter> iciql_DataTypeAdapter0 = (Iciql.DataTypeAdapter<XStreamTypeAdapter>) mock(Iciql.DataTypeAdapter.class, new ViolatedAssumptionAnswer());
      BitCondition<Iciql.DataTypeAdapter<XStreamTypeAdapter>, Integer> bitCondition0 = new BitCondition<Iciql.DataTypeAdapter<XStreamTypeAdapter>, Integer>(iciql_DataTypeAdapter0, iciql_DataTypeAdapter0, bitCondition_Bitwise0, (Query<Integer>) null);
      Iciql.DataTypeAdapter<XStreamTypeAdapter> iciql_DataTypeAdapter1 = (Iciql.DataTypeAdapter<XStreamTypeAdapter>) mock(Iciql.DataTypeAdapter.class, new ViolatedAssumptionAnswer());
      QueryWhere<Integer> queryWhere0 = bitCondition0.exceeds(iciql_DataTypeAdapter1);
      assertNotNull(queryWhere0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = Function.length((Object) null);
      BitCondition.Bitwise bitCondition_Bitwise0 = BitCondition.Bitwise.AND;
      BitCondition<Integer, Integer> bitCondition0 = new BitCondition<Integer, Integer>((Integer) null, integer0, bitCondition_Bitwise0, (Query<Integer>) null);
      bitCondition0.z = integer0;
      QueryWhere<Integer> queryWhere0 = bitCondition0.lessThan(bitCondition0.z);
      assertNotNull(queryWhere0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BitCondition.Bitwise bitCondition_Bitwise0 = BitCondition.Bitwise.XOR;
      BitCondition<Dao, Integer> bitCondition0 = new BitCondition<Dao, Integer>((Dao) null, (Dao) null, bitCondition_Bitwise0, (Query<Integer>) null);
      SQLStatement sQLStatement0 = new SQLStatement((Db) null);
      // Undeclared exception!
      try { 
        bitCondition0.appendSQL(sQLStatement0, (Query<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.BitCondition", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BitCondition.Bitwise bitCondition_Bitwise0 = BitCondition.Bitwise.AND;
      BitCondition<Dao, Integer> bitCondition0 = new BitCondition<Dao, Integer>((Dao) null, (Dao) null, bitCondition_Bitwise0, (Query<Integer>) null);
      SQLStatement sQLStatement0 = new SQLStatement((Db) null);
      // Undeclared exception!
      try { 
        bitCondition0.appendSQL(sQLStatement0, (Query<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.BitCondition", e);
      }
  }
}
