/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 11:21:27 GMT 2022
 */

package com.iciql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iciql.TableDefinition;
import com.iciql.TableInspector;
import com.iciql.ValidationRemark;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValidationRemark_ESTest extends ValidationRemark_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ValidationRemark validationRemark0 = ValidationRemark.consider("", "", "");
      String string0 = validationRemark0.toCSVString();
      assertEquals("CONSIDER,,,,", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ValidationRemark validationRemark0 = ValidationRemark.consider("", "", "");
      String string0 = validationRemark0.toString();
      assertEquals("CONSIDER                                               ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValidationRemark validationRemark0 = ValidationRemark.error("", "a", "e]7");
      assertNotNull(validationRemark0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ValidationRemark validationRemark0 = ValidationRemark.warn("$VALUES", "j", "CONSIDER");
      String string0 = validationRemark0.toString();
      assertEquals("WARN     $VALUES                                       CONSIDER", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TableInspector.ColumnInspector tableInspector_ColumnInspector0 = new TableInspector.ColumnInspector();
      ValidationRemark validationRemark0 = ValidationRemark.warn("x9XL", tableInspector_ColumnInspector0, "!%E>0ary_-xu!=Vk(}");
      assertNotNull(validationRemark0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ValidationRemark validationRemark0 = ValidationRemark.consider(")/4eo3/{dr%05", "WARN", "");
      boolean boolean0 = validationRemark0.isError();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TableInspector.ColumnInspector tableInspector_ColumnInspector0 = new TableInspector.ColumnInspector();
      ValidationRemark validationRemark0 = ValidationRemark.error("", tableInspector_ColumnInspector0, "com.iciql.ValidationRemark$Level");
      String string0 = validationRemark0.toCSVString();
      assertEquals("ERROR,,null,null,com.iciql.ValidationRemark$Level", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TableInspector.ColumnInspector tableInspector_ColumnInspector0 = new TableInspector.ColumnInspector();
      ValidationRemark validationRemark0 = ValidationRemark.consider("", tableInspector_ColumnInspector0, "&/");
      assertNotNull(validationRemark0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ValidationRemark validationRemark0 = ValidationRemark.error((String) null, (String) null, (String) null);
      // Undeclared exception!
      try { 
        validationRemark0.throwError(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ValidationRemark.error(".E 5dy:34h+aF/Z", (TableDefinition.FieldDefinition) null, ".E 5dy:34h+aF/Z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.ValidationRemark", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ValidationRemark validationRemark0 = ValidationRemark.consider((String) null, (String) null, (String) null);
      // Undeclared exception!
      try { 
        validationRemark0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ValidationRemark validationRemark0 = ValidationRemark.warn("=fD3>G=f`Ip<1", "=fD3>G=f`Ip<1", "=fD3>G=f`Ip<1");
      ValidationRemark validationRemark1 = validationRemark0.throwError(true);
      assertSame(validationRemark1, validationRemark0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ValidationRemark validationRemark0 = ValidationRemark.error("Xr", "Xr", "Xr");
      // Undeclared exception!
      try { 
        validationRemark0.throwError(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ERROR    Xr                                            Xr
         //
         verifyException("com.iciql.ValidationRemark", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ValidationRemark validationRemark0 = ValidationRemark.consider("=DfD3>G=f`Ip1", "=DfD3>G=f`Ip1", "=DfD3>G=f`Ip1");
      ValidationRemark validationRemark1 = validationRemark0.throwError(false);
      assertSame(validationRemark1, validationRemark0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TableDefinition.FieldDefinition tableDefinition_FieldDefinition0 = new TableDefinition.FieldDefinition();
      ValidationRemark validationRemark0 = ValidationRemark.error(" ", tableDefinition_FieldDefinition0, "CONSIDER");
      assertNotNull(validationRemark0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ValidationRemark validationRemark0 = ValidationRemark.error("=fD3>G=f`Ip1", "=fD3>G=f`Ip1", "=fD3>G=f`Ip1");
      boolean boolean0 = validationRemark0.isError();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ValidationRemark.error("2>\" ivt&1R3", (TableInspector.ColumnInspector) null, "2>\" ivt&1R3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.ValidationRemark", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        ValidationRemark.warn("", (TableInspector.ColumnInspector) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.ValidationRemark", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ValidationRemark.consider("2>\" ivt&1R3", (TableInspector.ColumnInspector) null, "2>\" ivt&1R3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.ValidationRemark", e);
      }
  }
}
