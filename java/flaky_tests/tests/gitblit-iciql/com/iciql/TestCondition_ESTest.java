/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 11:36:35 GMT 2022
 */

package com.iciql;

import org.junit.Test;
import static org.junit.Assert.*;
import com.iciql.TestCondition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TestCondition_ESTest extends TestCondition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TestCondition<Boolean> testCondition0 = new TestCondition<Boolean>((Boolean) null);
      Boolean boolean0 = testCondition0.lessThan((Boolean) null);
      TestCondition<Object> testCondition1 = new TestCondition<Object>((Object) null);
      Boolean boolean1 = testCondition1.atMost(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TestCondition<Boolean> testCondition0 = new TestCondition<Boolean>((Boolean) null);
      Boolean boolean0 = testCondition0.lessThan((Boolean) null);
      Boolean boolean1 = testCondition0.is(boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TestCondition<Boolean> testCondition0 = new TestCondition<Boolean>((Boolean) null);
      Boolean boolean0 = testCondition0.lessThan((Boolean) null);
      TestCondition<Object> testCondition1 = new TestCondition<Object>((Object) null);
      Boolean boolean1 = testCondition1.exceeds(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TestCondition<Boolean> testCondition0 = new TestCondition<Boolean>((Boolean) null);
      Boolean boolean0 = testCondition0.lessThan((Boolean) null);
      TestCondition<Object> testCondition1 = new TestCondition<Object>((Object) null);
      Boolean boolean1 = testCondition1.like(boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object object0 = new Object();
      TestCondition<Object> testCondition0 = new TestCondition<Object>(object0);
      Boolean boolean0 = testCondition0.atLeast(object0);
      assertFalse(boolean0);
  }
}
