/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 11:00:45 GMT 2022
 */

package com.iciql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iciql.IciqlException;
import java.sql.SQLException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IciqlException_ESTest extends IciqlException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLException sQLException0 = new SQLException("23000", "23000");
      SQLException sQLException1 = new SQLException("42000", "23000", 2721, sQLException0);
      IciqlException iciqlException0 = new IciqlException(sQLException1);
      assertEquals(3, IciqlException.CODE_OBJECT_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLException sQLException0 = new SQLException("[SQLITE", "", mockThrowable0);
      IciqlException iciqlException0 = IciqlException.fromSQL("Jp", sQLException0);
      iciqlException0.getSQL();
      assertEquals(0, iciqlException0.getIciqlCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      MockThrowable mockThrowable0 = new MockThrowable("5`#_zcTrM", sQLException0);
      IciqlException iciqlException0 = IciqlException.fromSQL("", mockThrowable0);
      iciqlException0.getSQL();
      assertEquals(0, iciqlException0.getIciqlCode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLException sQLException0 = new SQLException("[SQLITE", "", mockThrowable0);
      Object[] objectArray0 = new Object[4];
      IciqlException iciqlException0 = new IciqlException(sQLException0, "2BP01", objectArray0);
      int int0 = iciqlException0.getIciqlCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLException sQLException0 = new SQLException("42501", "");
      Object[] objectArray0 = new Object[1];
      IciqlException iciqlException0 = new IciqlException(sQLException0, "42501", objectArray0);
      SQLException sQLException1 = new SQLException("^L!!7F:dqL(tp", (String) null, (-798), iciqlException0);
      IciqlException iciqlException1 = IciqlException.fromSQL("42501", sQLException1);
      int int0 = iciqlException1.getIciqlCode();
      assertEquals(6, iciqlException0.getIciqlCode());
      assertEquals((-798), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      // Undeclared exception!
      try { 
        IciqlException.fromSQL("%J4150h", sQLException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        IciqlException.checkUnmappedField((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      SQLException sQLException0 = new SQLException("", "42S01");
      IciqlException iciqlException0 = new IciqlException(sQLException0);
      IciqlException iciqlException1 = null;
      try {
        iciqlException1 = new IciqlException(iciqlException0, "]8CgM8g{7=M", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unmatched braces in the pattern.
         //
         verifyException("java.text.MessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      IciqlException iciqlException0 = null;
      try {
        iciqlException0 = new IciqlException(sQLException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IciqlException iciqlException0 = null;
      try {
        iciqlException0 = new IciqlException("2xd6e]ED{MoeO", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.IciqlException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      IciqlException iciqlException0 = null;
      try {
        iciqlException0 = new IciqlException("NJQ8-eKShwQ{g=", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unmatched braces in the pattern.
         //
         verifyException("java.text.MessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLException sQLException0 = new SQLException((String) null, (String) null, mockThrowable0);
      SQLException sQLException1 = new SQLException("X0Y32", "[SQLITE[SQLITE", (-12437164), sQLException0);
      IciqlException iciqlException0 = IciqlException.fromSQL("X0Y32", sQLException1);
      SQLException sQLException2 = new SQLException(">4<\"K{._r$x`", "X0Y32", 4, iciqlException0);
      IciqlException iciqlException1 = IciqlException.fromSQL("hR", sQLException2);
      assertEquals(4, iciqlException1.getIciqlCode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLException sQLException0 = new SQLException((String) null, (String) null);
      Object[] objectArray0 = new Object[0];
      IciqlException iciqlException0 = null;
      try {
        iciqlException0 = new IciqlException(sQLException0, "e$ 'M1R.iW@}!ko", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLException sQLException0 = new SQLException("42501", "");
      IciqlException iciqlException0 = IciqlException.fromSQL("42501", sQLException0);
      String string0 = iciqlException0.toString();
      assertEquals("com.iciql.IciqlException: 42501\n42501", string0);
      assertEquals(6, iciqlException0.getIciqlCode());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLException sQLException0 = new SQLException("42501", "");
      Object[] objectArray0 = new Object[1];
      IciqlException iciqlException0 = new IciqlException(sQLException0, "42501", objectArray0);
      String string0 = iciqlException0.toString();
      assertEquals(6, iciqlException0.getIciqlCode());
      assertEquals("com.iciql.IciqlException: 42501", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      IciqlException iciqlException0 = new IciqlException(mockThrowable0);
      String string0 = iciqlException0.toString();
      assertEquals("com.iciql.IciqlException", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLException sQLException1 = new SQLException("[SQLITE[WQLITE", "[SQLITE[WQLITE", 1, sQLException0);
      IciqlException iciqlException0 = new IciqlException(sQLException1);
      assertEquals(4, IciqlException.CODE_OBJECT_ALREADY_EXISTS);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLException sQLException0 = new SQLException("42Y55");
      SQLException sQLException1 = new SQLException("[SQLITE[WM0QLITU", "slk1TiW", 19, sQLException0);
      IciqlException iciqlException0 = new IciqlException(sQLException1);
      assertEquals(3, IciqlException.CODE_OBJECT_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      SQLException sQLException0 = new SQLException("", "X0Y25");
      IciqlException iciqlException0 = new IciqlException(sQLException0, "2NJ", objectArray0);
      assertEquals(2, IciqlException.CODE_DUPLICATE_KEY);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLException sQLException0 = new SQLException("[SQLITE", "42533");
      IciqlException iciqlException0 = IciqlException.fromSQL(":oZ9T", sQLException0);
      assertEquals(5, iciqlException0.getIciqlCode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      SQLException sQLException0 = new SQLException("'hJh[NYVVaE;V.L_y", "2BP01");
      IciqlException iciqlException0 = new IciqlException(sQLException0, "1UcWpyx", objectArray0);
      assertEquals(6, IciqlException.CODE_UNCHARACTERIZED);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLException sQLException0 = new SQLException("42504", "42504");
      IciqlException iciqlException0 = new IciqlException(sQLException0);
      assertEquals(5, IciqlException.CODE_CONSTRAINT_VIOLATION);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      SQLException sQLException0 = new SQLException("", "42S11", 1668);
      IciqlException iciqlException0 = new IciqlException(sQLException0, "[SQLI|", objectArray0);
      assertEquals(1, IciqlException.CODE_UNMAPPED_FIELD);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLException sQLException0 = new SQLException("42P07", "42P07");
      IciqlException iciqlException0 = new IciqlException(sQLException0);
      assertEquals(6, IciqlException.CODE_UNCHARACTERIZED);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLException sQLException0 = new SQLException("X0X05", "X0X05");
      IciqlException iciqlException0 = new IciqlException(sQLException0);
      assertEquals(1, IciqlException.CODE_UNMAPPED_FIELD);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLException sQLException0 = new SQLException("", "42P01");
      Object[] objectArray0 = new Object[1];
      IciqlException iciqlException0 = new IciqlException(sQLException0, "", objectArray0);
      assertEquals(5, IciqlException.CODE_CONSTRAINT_VIOLATION);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLException sQLException0 = new SQLException("42S02", "42S02");
      IciqlException iciqlException0 = new IciqlException(sQLException0);
      assertEquals(2, IciqlException.CODE_DUPLICATE_KEY);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLException sQLException0 = new SQLException("42Y55", "42Y55");
      IciqlException iciqlException0 = IciqlException.fromSQL("42Y55", sQLException0);
      assertEquals(3, iciqlException0.getIciqlCode());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLException sQLException0 = new SQLException("42X05", "42X05");
      IciqlException iciqlException0 = new IciqlException(sQLException0);
      assertEquals(4, IciqlException.CODE_OBJECT_ALREADY_EXISTS);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLException sQLException0 = new SQLException("[SQLITE", "42Y07", mockThrowable0);
      IciqlException iciqlException0 = IciqlException.fromSQL("42533", sQLException0);
      assertEquals(3, iciqlException0.getIciqlCode());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLException sQLException0 = new SQLException("42000", "42000");
      IciqlException iciqlException0 = IciqlException.fromSQL("42000", sQLException0);
      assertEquals(2, iciqlException0.getIciqlCode());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLException sQLException0 = new SQLException("23505", "23505");
      IciqlException iciqlException0 = new IciqlException(sQLException0);
      assertEquals(6, IciqlException.CODE_UNCHARACTERIZED);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLException sQLException0 = new SQLException("42504", "42504");
      SQLException sQLException1 = new SQLException("42504", "23000", 1217, sQLException0);
      IciqlException iciqlException0 = new IciqlException(sQLException1);
      assertEquals(3, IciqlException.CODE_OBJECT_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLException sQLException0 = new SQLException("42501", "23000", (-665));
      IciqlException iciqlException0 = IciqlException.fromSQL("", sQLException0);
      assertEquals(2, iciqlException0.getIciqlCode());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLException sQLException0 = new SQLException("[SQLITE", "42Y07", mockThrowable0);
      StackTraceElement[] stackTraceElementArray0 = sQLException0.getStackTrace();
      IciqlException iciqlException0 = new IciqlException((Throwable) null, "RJE^", stackTraceElementArray0);
      assertEquals(4, IciqlException.CODE_OBJECT_ALREADY_EXISTS);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IciqlException.checkUnmappedField("42501");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      IciqlException iciqlException0 = new IciqlException("42000", objectArray0);
      assertEquals(6, IciqlException.CODE_UNCHARACTERIZED);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLException sQLException0 = new SQLException("~M5QG'|},g", "42000");
      Throwable[] throwableArray0 = sQLException0.getSuppressed();
      IciqlException iciqlException0 = new IciqlException("q)%}u>X$$<&1", throwableArray0);
      assertEquals(2, IciqlException.CODE_DUPLICATE_KEY);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLException sQLException0 = new SQLException("42501", "");
      Object[] objectArray0 = new Object[1];
      IciqlException iciqlException0 = new IciqlException(sQLException0, "42501", objectArray0);
      int int0 = iciqlException0.getIciqlCode();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLException sQLException0 = new SQLException("42501", "42501");
      IciqlException iciqlException0 = IciqlException.fromSQL("42501", sQLException0);
      iciqlException0.setSQL("42501");
      assertEquals(3, iciqlException0.getIciqlCode());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLException sQLException0 = new SQLException("42501", "");
      Object[] objectArray0 = new Object[1];
      IciqlException iciqlException0 = new IciqlException(sQLException0, "42501", objectArray0);
      iciqlException0.getSQL();
      assertEquals(6, iciqlException0.getIciqlCode());
  }
}
