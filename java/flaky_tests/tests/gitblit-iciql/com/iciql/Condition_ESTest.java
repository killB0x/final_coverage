/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 11:18:36 GMT 2022
 */

package com.iciql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iciql.CompareType;
import com.iciql.Condition;
import com.iciql.Iciql;
import com.iciql.Query;
import com.iciql.SQLStatement;
import java.nio.file.LinkOption;
import java.util.ServiceLoader;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Condition_ESTest extends Condition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(1807);
      CompareType compareType0 = CompareType.EQUAL;
      Vector<Object> vector0 = new Vector<Object>(1807);
      Condition<Object> condition0 = new Condition<Object>(integer0, (Object) null, compareType0, vector0, compareType0);
      // Undeclared exception!
      try { 
        condition0.appendSQL((SQLStatement) null, (Query<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.Condition", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Iciql.ConstraintDeferrabilityType iciql_ConstraintDeferrabilityType0 = Iciql.ConstraintDeferrabilityType.UNSET;
      CompareType compareType0 = CompareType.EXCEEDS;
      Condition<Iciql.ConstraintDeferrabilityType> condition0 = new Condition<Iciql.ConstraintDeferrabilityType>(iciql_ConstraintDeferrabilityType0, iciql_ConstraintDeferrabilityType0, iciql_ConstraintDeferrabilityType0, compareType0);
      // Undeclared exception!
      try { 
        condition0.appendSQL((SQLStatement) null, (Query<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.Condition", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Iciql.ConstraintDeferrabilityType iciql_ConstraintDeferrabilityType0 = Iciql.ConstraintDeferrabilityType.UNSET;
      Class<Iciql.ConstraintDeferrabilityType> class0 = Iciql.ConstraintDeferrabilityType.class;
      ServiceLoader<Iciql.ConstraintDeferrabilityType> serviceLoader0 = ServiceLoader.load(class0);
      CompareType compareType0 = CompareType.LIKE;
      Condition<Iciql.ConstraintDeferrabilityType> condition0 = new Condition<Iciql.ConstraintDeferrabilityType>(iciql_ConstraintDeferrabilityType0, serviceLoader0, compareType0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      CompareType compareType0 = CompareType.EXCEEDS;
      Condition<LinkOption> condition0 = new Condition<LinkOption>(linkOption0, linkOption0, compareType0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Iciql.ConstraintDeferrabilityType iciql_ConstraintDeferrabilityType0 = Iciql.ConstraintDeferrabilityType.DEFERRABLE_INITIALLY_DEFERRED;
      CompareType compareType0 = CompareType.EXCEEDS;
      Condition<Iciql.ConstraintDeferrabilityType> condition0 = new Condition<Iciql.ConstraintDeferrabilityType>(iciql_ConstraintDeferrabilityType0, compareType0);
  }
}
