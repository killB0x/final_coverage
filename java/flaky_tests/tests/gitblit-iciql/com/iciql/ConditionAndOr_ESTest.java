/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 11:38:37 GMT 2022
 */

package com.iciql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iciql.ConditionAndOr;
import com.iciql.Db;
import com.iciql.Query;
import com.iciql.SQLStatement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConditionAndOr_ESTest extends ConditionAndOr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConditionAndOr[] conditionAndOrArray0 = ConditionAndOr.values();
      assertEquals(2, conditionAndOrArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConditionAndOr.valueOf("OR");
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConditionAndOr conditionAndOr0 = ConditionAndOr.AND;
      // Undeclared exception!
      try { 
        conditionAndOr0.appendSQL((SQLStatement) null, (Query<ConditionAndOr>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.ConditionAndOr", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConditionAndOr conditionAndOr0 = ConditionAndOr.AND;
      SQLStatement sQLStatement0 = new SQLStatement((Db) null);
      conditionAndOr0.appendSQL(sQLStatement0, (Query<ConditionAndOr>) null);
  }
}
