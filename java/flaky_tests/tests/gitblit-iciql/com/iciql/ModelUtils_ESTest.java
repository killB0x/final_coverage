/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 10:52:40 GMT 2022
 */

package com.iciql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iciql.ModelUtils;
import com.iciql.TableDefinition;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ModelUtils_ESTest extends ModelUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TableDefinition.FieldDefinition tableDefinition_FieldDefinition0 = new TableDefinition.FieldDefinition();
      tableDefinition_FieldDefinition0.dataType = "DATETIME";
      tableDefinition_FieldDefinition0.defaultValue = "E4hjw+3*0Y";
      tableDefinition_FieldDefinition0.defaultValue = "Can not explicitly reference {0} because there are {1} {0} fields in your model class!";
      Class<Date> class0 = Date.class;
      Object object0 = ModelUtils.getDefaultValue(tableDefinition_FieldDefinition0, class0);
      assertEquals("Can not explicitly reference {0} because there are {1} {0} fields in your model class!", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TableDefinition.FieldDefinition tableDefinition_FieldDefinition0 = new TableDefinition.FieldDefinition();
      tableDefinition_FieldDefinition0.dataType = "DATETIME";
      tableDefinition_FieldDefinition0.defaultValue = "!|Dd&{);f.eLK[}q'";
      Class<Time> class0 = Time.class;
      Object object0 = ModelUtils.getDefaultValue(tableDefinition_FieldDefinition0, class0);
      assertEquals("!|Dd&{);f.eLK[}", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TableDefinition.FieldDefinition tableDefinition_FieldDefinition0 = new TableDefinition.FieldDefinition();
      tableDefinition_FieldDefinition0.dataType = "varchar";
      tableDefinition_FieldDefinition0.defaultValue = "\"PM#^VFPB";
      Class<Time> class0 = Time.class;
      Object object0 = ModelUtils.getDefaultValue(tableDefinition_FieldDefinition0, class0);
      assertEquals("\"PM#^VFPB", object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Date> class0 = Date.class;
      Class<?> class1 = ModelUtils.getClassForSqlType("blob", class0);
      assertTrue(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ModelUtils.convertTableToClassName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = ModelUtils.convertColumnToFieldName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModelUtils.isValidDefaultValue((Class<?>) null, "r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TableDefinition.FieldDefinition tableDefinition_FieldDefinition0 = new TableDefinition.FieldDefinition();
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        ModelUtils.getDefaultValue(tableDefinition_FieldDefinition0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.ModelUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TableDefinition.FieldDefinition tableDefinition_FieldDefinition0 = new TableDefinition.FieldDefinition();
      tableDefinition_FieldDefinition0.dataType = " ";
      Class<MockDate> class0 = MockDate.class;
      // Undeclared exception!
      try { 
        ModelUtils.getDefaultValue(tableDefinition_FieldDefinition0, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.iciql.ModelUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TableDefinition.FieldDefinition tableDefinition_FieldDefinition0 = new TableDefinition.FieldDefinition();
      // Undeclared exception!
      try { 
        ModelUtils.getDataType(tableDefinition_FieldDefinition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.ModelUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        ModelUtils.getClassForSqlType((String) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.ModelUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<MockDate> class0 = MockDate.class;
      // Undeclared exception!
      try { 
        ModelUtils.getClassForSqlType(" ", class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.iciql.ModelUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModelUtils.formatDefaultValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.ModelUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModelUtils.convertTableToClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.ModelUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModelUtils.convertColumnToFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.ModelUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<MockDate> class0 = MockDate.class;
      Class<?> class1 = ModelUtils.getClassForSqlType("int", class0);
      boolean boolean0 = ModelUtils.isValidDefaultValue(class1, "'Wr98+9Iz9-vz");
      assertTrue(boolean0);
      assertEquals("class java.lang.Integer", class1.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      Class<?> class1 = ModelUtils.getClassForSqlType("int", class0);
      boolean boolean0 = ModelUtils.isValidDefaultValue(class1, "cl'");
      assertEquals("class java.lang.Integer", class1.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ModelUtils.isValidDefaultValue(class0, "''");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Time> class0 = Time.class;
      boolean boolean0 = ModelUtils.isValidDefaultValue(class0, "s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      boolean boolean0 = ModelUtils.isValidDefaultValue(class0, "O");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      boolean boolean0 = ModelUtils.isValidDefaultValue(class0, "d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Date> class0 = Date.class;
      boolean boolean0 = ModelUtils.isValidDefaultValue(class0, "s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ModelUtils.isValidDefaultValue(class0, "'.*'");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Date> class0 = Date.class;
      Class<?> class1 = ModelUtils.getClassForSqlType("timestamp", class0);
      boolean boolean0 = ModelUtils.isValidDefaultValue(class1, "nR2uIs(CmA_]B}_Fz");
      assertEquals("class java.util.Date", class1.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Date> class0 = Date.class;
      boolean boolean0 = ModelUtils.isValidDefaultValue(class0, "4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Date> class0 = Date.class;
      boolean boolean0 = ModelUtils.isValidDefaultValue(class0, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ModelUtils.isValidDefaultValue(class0, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = ModelUtils.isProperlyFormattedDefaultValue("S'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = ModelUtils.isProperlyFormattedDefaultValue("''");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = ModelUtils.isProperlyFormattedDefaultValue("23000");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = ModelUtils.isProperlyFormattedDefaultValue((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = ModelUtils.isProperlyFormattedDefaultValue("42X05");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = ModelUtils.formatDefaultValue("Iciql does not support deleting rows from views!");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2161L);
      String string0 = ModelUtils.formatDefaultValue(mockDate0);
      assertEquals("'1970-01-01 00:00:02'", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Time time0 = new Time(1L);
      String string0 = ModelUtils.formatDefaultValue(time0);
      assertEquals("'00:00:00'", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      java.sql.Date date0 = new java.sql.Date(0L);
      String string0 = ModelUtils.formatDefaultValue(date0);
      assertEquals("'1970-01-01'", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = ModelUtils.formatDefaultValue(boolean0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TableDefinition.FieldDefinition tableDefinition_FieldDefinition0 = new TableDefinition.FieldDefinition();
      tableDefinition_FieldDefinition0.dataType = "DATETIME";
      tableDefinition_FieldDefinition0.defaultValue = "00:00:00";
      Class<Time> class0 = Time.class;
      // Undeclared exception!
      try { 
        ModelUtils.getDefaultValue(tableDefinition_FieldDefinition0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to parse 00:00:00 as a time!
         //
         verifyException("com.iciql.ModelUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TableDefinition.FieldDefinition tableDefinition_FieldDefinition0 = new TableDefinition.FieldDefinition();
      tableDefinition_FieldDefinition0.dataType = "DATETIME";
      tableDefinition_FieldDefinition0.defaultValue = "DATETIME";
      Class<java.sql.Date> class0 = java.sql.Date.class;
      Object object0 = ModelUtils.getDefaultValue(tableDefinition_FieldDefinition0, class0);
      assertEquals("DATETIME", object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TableDefinition.FieldDefinition tableDefinition_FieldDefinition0 = new TableDefinition.FieldDefinition();
      tableDefinition_FieldDefinition0.defaultValue = "Tinyint";
      tableDefinition_FieldDefinition0.dataType = "Tinyint";
      Class<MockDate> class0 = MockDate.class;
      Object object0 = ModelUtils.getDefaultValue(tableDefinition_FieldDefinition0, class0);
      assertEquals("Tinyint", object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      TableDefinition.FieldDefinition tableDefinition_FieldDefinition0 = new TableDefinition.FieldDefinition();
      tableDefinition_FieldDefinition0.defaultValue = "i";
      tableDefinition_FieldDefinition0.dataType = "boolean";
      Object object0 = ModelUtils.getDefaultValue(tableDefinition_FieldDefinition0, class0);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TableDefinition.FieldDefinition tableDefinition_FieldDefinition0 = new TableDefinition.FieldDefinition();
      tableDefinition_FieldDefinition0.dataType = "time";
      tableDefinition_FieldDefinition0.defaultValue = "'(V)*bN'";
      Class<Time> class0 = Time.class;
      Object object0 = ModelUtils.getDefaultValue(tableDefinition_FieldDefinition0, class0);
      assertEquals("(V)*b", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TableDefinition.FieldDefinition tableDefinition_FieldDefinition0 = new TableDefinition.FieldDefinition();
      tableDefinition_FieldDefinition0.dataType = "varchar";
      tableDefinition_FieldDefinition0.defaultValue = "'(.|\n)*'";
      Class<Date> class0 = Date.class;
      Object object0 = ModelUtils.getDefaultValue(tableDefinition_FieldDefinition0, class0);
      assertEquals("(.|\n)*", object0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TableDefinition.FieldDefinition tableDefinition_FieldDefinition0 = new TableDefinition.FieldDefinition();
      tableDefinition_FieldDefinition0.dataType = "varchar";
      tableDefinition_FieldDefinition0.defaultValue = "8K;u^n^";
      Class<Time> class0 = Time.class;
      Object object0 = ModelUtils.getDefaultValue(tableDefinition_FieldDefinition0, class0);
      assertEquals("8K;u^n^", object0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TableDefinition.FieldDefinition tableDefinition_FieldDefinition0 = new TableDefinition.FieldDefinition();
      tableDefinition_FieldDefinition0.dataType = "varchar";
      tableDefinition_FieldDefinition0.defaultValue = "'(N*";
      Class<MockDate> class0 = MockDate.class;
      Object object0 = ModelUtils.getDefaultValue(tableDefinition_FieldDefinition0, class0);
      assertEquals("'(N*", object0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TableDefinition.FieldDefinition tableDefinition_FieldDefinition0 = new TableDefinition.FieldDefinition();
      tableDefinition_FieldDefinition0.dataType = "varchar";
      Class<MockDate> class0 = MockDate.class;
      Object object0 = ModelUtils.getDefaultValue(tableDefinition_FieldDefinition0, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = ModelUtils.convertColumnToFieldName("Import");
      assertEquals("importValue", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = ModelUtils.convertTableToClassName("Q%  ^/1-");
      assertEquals("Q%^/1-", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = ModelUtils.convertTableToClassName("?n7Kf?qh0eXe_");
      assertEquals("?n7kf?qh0exe", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TableDefinition.FieldDefinition tableDefinition_FieldDefinition0 = new TableDefinition.FieldDefinition();
      tableDefinition_FieldDefinition0.dataType = "DATETIME";
      Class<Date> class0 = Date.class;
      Object object0 = ModelUtils.getDefaultValue(tableDefinition_FieldDefinition0, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Date> class0 = Date.class;
      Class<?> class1 = ModelUtils.getClassForSqlType("X($", class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ModelUtils modelUtils0 = new ModelUtils();
      String string0 = ModelUtils.formatDefaultValue(modelUtils0);
      assertEquals("''", string0);
  }
}
