/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 11:27:35 GMT 2022
 */

package com.iciql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iciql.Define;
import com.iciql.Iciql;
import com.iciql.TableDefinition;
import com.iciql.adapter.XStreamTypeAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Define_ESTest extends Define_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TableDefinition<Object> tableDefinition0 = new TableDefinition<Object>(class0);
      Iciql iciql0 = mock(Iciql.class, new ViolatedAssumptionAnswer());
      Define.define(tableDefinition0, iciql0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Define.trim(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method may only be called from within the define() method, and the define() method is called by the framework.
         //
         verifyException("com.iciql.Define", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Define.memoryTable();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method may only be called from within the define() method, and the define() method is called by the framework.
         //
         verifyException("com.iciql.Define", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Define.constraintUnique(",yw@.OGK T@M;qQaumQ", (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method may only be called from within the define() method, and the define() method is called by the framework.
         //
         verifyException("com.iciql.Define", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Iciql.IndexType iciql_IndexType0 = Iciql.IndexType.HASH;
      // Undeclared exception!
      try { 
        Define.index("$oR>", iciql_IndexType0, (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method may only be called from within the define() method, and the define() method is called by the framework.
         //
         verifyException("com.iciql.Define", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Define.scale(object0, (-5410));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method may only be called from within the define() method, and the define() method is called by the framework.
         //
         verifyException("com.iciql.Define", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Define.tableName("aT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method may only be called from within the define() method, and the define() method is called by the framework.
         //
         verifyException("com.iciql.Define", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<XStreamTypeAdapter> class0 = XStreamTypeAdapter.class;
      // Undeclared exception!
      try { 
        Define.typeAdapter(class0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method may only be called from within the define() method, and the define() method is called by the framework.
         //
         verifyException("com.iciql.Define", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Iciql.IndexType iciql_IndexType0 = Iciql.IndexType.STANDARD;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Define.index(iciql_IndexType0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method may only be called from within the define() method, and the define() method is called by the framework.
         //
         verifyException("com.iciql.Define", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Define.length(object0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method may only be called from within the define() method, and the define() method is called by the framework.
         //
         verifyException("com.iciql.Define", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Define.autoIncrement(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method may only be called from within the define() method, and the define() method is called by the framework.
         //
         verifyException("com.iciql.Define", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Define.schemaName("CFMN_W1<z@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method may only be called from within the define() method, and the define() method is called by the framework.
         //
         verifyException("com.iciql.Define", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Define.nullable(object0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method may only be called from within the define() method, and the define() method is called by the framework.
         //
         verifyException("com.iciql.Define", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Define.viewTableName("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method may only be called from within the define() method, and the define() method is called by the framework.
         //
         verifyException("com.iciql.Define", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Define.primaryKey(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method may only be called from within the define() method, and the define() method is called by the framework.
         //
         verifyException("com.iciql.Define", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Define define0 = new Define();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Iciql iciql0 = mock(Iciql.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Define.define((TableDefinition<Object>) null, iciql0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.Define", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Define.defaultValue((Object) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method may only be called from within the define() method, and the define() method is called by the framework.
         //
         verifyException("com.iciql.Define", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Define.columnName("&^(hAOu", "&^(hAOu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method may only be called from within the define() method, and the define() method is called by the framework.
         //
         verifyException("com.iciql.Define", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Define.skipCreate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method may only be called from within the define() method, and the define() method is called by the framework.
         //
         verifyException("com.iciql.Define", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Define.constraint("$oR>", "$oR>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method may only be called from within the define() method, and the define() method is called by the framework.
         //
         verifyException("com.iciql.Define", e);
      }
  }
}
