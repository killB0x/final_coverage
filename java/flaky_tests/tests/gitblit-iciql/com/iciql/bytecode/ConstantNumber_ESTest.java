/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 11:33:44 GMT 2022
 */

package com.iciql.bytecode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iciql.Query;
import com.iciql.SQLStatement;
import com.iciql.bytecode.Constant;
import com.iciql.bytecode.ConstantNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConstantNumber_ESTest extends ConstantNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant.Type constant_Type0 = Constant.Type.FIELD_REF;
      ConstantNumber constantNumber0 = ConstantNumber.get((String) null, 0L, constant_Type0);
      String string0 = constantNumber0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant.Type constant_Type0 = Constant.Type.FIELD_REF;
      ConstantNumber constantNumber0 = ConstantNumber.get("", 0L, constant_Type0);
      String string0 = constantNumber0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant.Type constant_Type0 = Constant.Type.FIELD_REF;
      ConstantNumber constantNumber0 = ConstantNumber.get("", 0L, constant_Type0);
      int int0 = constantNumber0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantNumber constantNumber0 = ConstantNumber.get((-2020));
      int int0 = constantNumber0.intValue();
      assertEquals((-2020), int0);
      assertEquals("-2020", constantNumber0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant.Type constant_Type0 = Constant.Type.FIELD_REF;
      ConstantNumber constantNumber0 = ConstantNumber.get("", 1L, constant_Type0);
      assertEquals(1, constantNumber0.intValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant.Type constant_Type0 = Constant.Type.NAME_AND_TYPE;
      ConstantNumber constantNumber0 = ConstantNumber.get("NOT IN", (-1L), constant_Type0);
      assertEquals((-1), constantNumber0.intValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantNumber constantNumber0 = ConstantNumber.get(0L);
      assertEquals(0, constantNumber0.intValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantNumber constantNumber0 = ConstantNumber.get((-1L));
      assertEquals((-1), constantNumber0.intValue());
      assertEquals("-1", constantNumber0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantNumber constantNumber0 = ConstantNumber.get(0);
      assertEquals(0, constantNumber0.intValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantNumber constantNumber0 = ConstantNumber.get(2531);
      SQLStatement sQLStatement0 = mock(SQLStatement.class, new ViolatedAssumptionAnswer());
      doReturn((SQLStatement) null).when(sQLStatement0).appendSQL(anyString());
      constantNumber0.appendSQL(sQLStatement0, (Query<Object>) null);
      assertEquals(2531, constantNumber0.intValue());
      assertEquals("2531", constantNumber0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant.Type constant_Type0 = Constant.Type.FIELD_REF;
      ConstantNumber constantNumber0 = ConstantNumber.get("", 0L, constant_Type0);
      Constant.Type constant_Type1 = constantNumber0.getType();
      assertSame(constant_Type1, constant_Type0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantNumber constantNumber0 = ConstantNumber.get("");
      assertEquals(0, constantNumber0.intValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantNumber constantNumber0 = ConstantNumber.get((-4209));
      // Undeclared exception!
      try { 
        constantNumber0.appendSQL((SQLStatement) null, (Query<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.bytecode.ConstantNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantNumber constantNumber0 = ConstantNumber.get((-4209));
      String string0 = constantNumber0.toString();
      assertEquals((-4209), constantNumber0.intValue());
      assertEquals("-4209", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantNumber constantNumber0 = ConstantNumber.get(671L);
      int int0 = constantNumber0.intValue();
      assertEquals("671", constantNumber0.toString());
      assertEquals(671, int0);
  }
}
