/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 11:41:57 GMT 2022
 */

package com.iciql.bytecode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iciql.Query;
import com.iciql.SQLStatement;
import com.iciql.bytecode.Constant;
import com.iciql.bytecode.ConstantString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConstantString_ESTest extends ConstantString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConstantString constantString0 = ConstantString.get("I");
      String string0 = constantString0.toString();
      assertEquals("I", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantString constantString0 = ConstantString.get("");
      String string0 = constantString0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConstantString constantString0 = ConstantString.get("0J\")ACrqRZOyi.o");
      // Undeclared exception!
      try { 
        constantString0.appendSQL((SQLStatement) null, (Query<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.bytecode.ConstantString", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConstantString constantString0 = ConstantString.get("I");
      SQLStatement sQLStatement0 = mock(SQLStatement.class, new ViolatedAssumptionAnswer());
      doReturn((SQLStatement) null).when(sQLStatement0).appendSQL(anyString());
      constantString0.appendSQL(sQLStatement0, (Query<Object>) null);
      assertEquals(Constant.Type.STRING, constantString0.getType());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConstantString constantString0 = ConstantString.get((String) null);
      Constant.Type constant_Type0 = constantString0.getType();
      assertEquals(Constant.Type.STRING, constant_Type0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConstantString constantString0 = ConstantString.get((String) null);
      String string0 = constantString0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConstantString constantString0 = ConstantString.get("");
      int int0 = constantString0.intValue();
      assertEquals(0, int0);
  }
}
