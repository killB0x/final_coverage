/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 11:30:27 GMT 2022
 */

package com.iciql.bytecode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iciql.Query;
import com.iciql.RuntimeToken;
import com.iciql.SQLStatement;
import com.iciql.Token;
import com.iciql.bytecode.Or;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Or_ESTest extends Or_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RuntimeToken runtimeToken0 = new RuntimeToken("=EM){Rl@", (Object[]) null);
      Or or0 = Or.get(runtimeToken0, runtimeToken0);
      Or or1 = Or.get(or0, runtimeToken0);
      assertFalse(or1.equals((Object)or0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RuntimeToken runtimeToken0 = new RuntimeToken("=EM){Rl@", (Object[]) null);
      Or or0 = Or.get(runtimeToken0, runtimeToken0);
      SQLStatement sQLStatement0 = mock(SQLStatement.class, new ViolatedAssumptionAnswer());
      doReturn((SQLStatement) null, (SQLStatement) null, (SQLStatement) null).when(sQLStatement0).appendSQL(anyString());
      or0.appendSQL(sQLStatement0, (Query<Object>) null);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      RuntimeToken runtimeToken0 = new RuntimeToken("", objectArray0);
      Or or0 = Or.get(runtimeToken0, runtimeToken0);
      // Undeclared exception!
      try { 
        or0.appendSQL((SQLStatement) null, (Query<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Fragment \"\" specifies 0 tokens but you supplied 1 args
         //
         verifyException("com.iciql.RuntimeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Or or0 = Or.get((Token) null, (Token) null);
      // Undeclared exception!
      try { 
        or0.appendSQL((SQLStatement) null, (Query<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.bytecode.Or", e);
      }
  }
}
