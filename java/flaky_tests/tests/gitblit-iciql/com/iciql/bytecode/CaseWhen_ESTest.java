/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 11:12:21 GMT 2022
 */

package com.iciql.bytecode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iciql.Query;
import com.iciql.RuntimeToken;
import com.iciql.SQLStatement;
import com.iciql.Token;
import com.iciql.bytecode.CaseWhen;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CaseWhen_ESTest extends CaseWhen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      RuntimeToken runtimeToken0 = new RuntimeToken(">aSrva3(8D=", objectArray0);
      Token token0 = CaseWhen.get(runtimeToken0, runtimeToken0, runtimeToken0);
      Token token1 = CaseWhen.get(token0, token0, runtimeToken0);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      RuntimeToken runtimeToken0 = new RuntimeToken(">aSrva3(8D=", objectArray0);
      Token token0 = CaseWhen.get(runtimeToken0, runtimeToken0, runtimeToken0);
      Token token1 = CaseWhen.get(token0, runtimeToken0, runtimeToken0);
      assertNotSame(token0, token1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        CaseWhen.get((Token) null, (Token) null, (Token) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      RuntimeToken runtimeToken0 = new RuntimeToken("jq@", objectArray0);
      Token token0 = CaseWhen.get(runtimeToken0, runtimeToken0, runtimeToken0);
      SQLStatement sQLStatement0 = mock(SQLStatement.class, new ViolatedAssumptionAnswer());
      doReturn((SQLStatement) null).when(sQLStatement0).appendSQL(anyString());
      // Undeclared exception!
      try { 
        token0.appendSQL(sQLStatement0, (Query<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Fragment \"jq@\" specifies 0 tokens but you supplied 3 args
         //
         verifyException("com.iciql.RuntimeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      RuntimeToken runtimeToken0 = new RuntimeToken(";-=?0FE4G~2[eI[QV", objectArray0);
      Token token0 = CaseWhen.get(runtimeToken0, runtimeToken0, runtimeToken0);
      // Undeclared exception!
      try { 
        token0.appendSQL((SQLStatement) null, (Query<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.bytecode.CaseWhen", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RuntimeToken runtimeToken0 = new RuntimeToken("+mu CO>-[", (Object[]) null);
      Token token0 = CaseWhen.get(runtimeToken0, runtimeToken0, runtimeToken0);
      SQLStatement sQLStatement0 = mock(SQLStatement.class, new ViolatedAssumptionAnswer());
      SQLStatement sQLStatement1 = mock(SQLStatement.class, new ViolatedAssumptionAnswer());
      doReturn(sQLStatement0, (SQLStatement) null, (SQLStatement) null, (SQLStatement) null, (SQLStatement) null).when(sQLStatement1).appendSQL(anyString());
      token0.appendSQL(sQLStatement1, (Query<Integer>) null);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RuntimeToken runtimeToken0 = new RuntimeToken("+mu CO>-[", (Object[]) null);
      CaseWhen caseWhen0 = (CaseWhen)CaseWhen.get(runtimeToken0, runtimeToken0, runtimeToken0);
      String string0 = caseWhen0.toString();
      assertNotNull(string0);
  }
}
