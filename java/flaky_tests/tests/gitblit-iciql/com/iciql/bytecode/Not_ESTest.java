/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 11:20:39 GMT 2022
 */

package com.iciql.bytecode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iciql.Query;
import com.iciql.RuntimeToken;
import com.iciql.SQLStatement;
import com.iciql.Token;
import com.iciql.bytecode.Not;
import com.iciql.bytecode.Operation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Not_ESTest extends Not_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      RuntimeToken runtimeToken0 = new RuntimeToken("NOT(", objectArray0);
      Token token0 = Not.get(runtimeToken0);
      SQLStatement sQLStatement0 = mock(SQLStatement.class, new ViolatedAssumptionAnswer());
      doReturn((SQLStatement) null, (SQLStatement) null, (SQLStatement) null).when(sQLStatement0).appendSQL(anyString());
      token0.appendSQL(sQLStatement0, (Query<Operation>) null);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Not not0 = (Not)Not.get((Token) null);
      Token token0 = not0.not();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      RuntimeToken runtimeToken0 = new RuntimeToken("NOT(", objectArray0);
      Token token0 = Not.get(runtimeToken0);
      SQLStatement sQLStatement0 = mock(SQLStatement.class, new ViolatedAssumptionAnswer());
      doReturn((SQLStatement) null).when(sQLStatement0).appendSQL(anyString());
      // Undeclared exception!
      try { 
        token0.appendSQL(sQLStatement0, (Query<Operation>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Fragment \"NOT(\" specifies 0 tokens but you supplied 1 args
         //
         verifyException("com.iciql.RuntimeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Token token0 = Not.get((Token) null);
      Operation.Type operation_Type0 = Operation.Type.MULTIPLY;
      Token token1 = Operation.get(token0, operation_Type0, token0);
      Token token2 = Not.get(token1);
      // Undeclared exception!
      try { 
        Not.get(token2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.bytecode.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Token token0 = Not.get((Token) null);
      Token token1 = Not.get(token0);
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Token token0 = Not.get((Token) null);
      // Undeclared exception!
      try { 
        token0.appendSQL((SQLStatement) null, (Query<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.bytecode.Not", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      RuntimeToken runtimeToken0 = new RuntimeToken("NOT(", objectArray0);
      Not not0 = (Not)Not.get(runtimeToken0);
      RuntimeToken runtimeToken1 = (RuntimeToken)not0.not();
      assertSame(runtimeToken0, runtimeToken1);
  }
}
