/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 11:22:17 GMT 2022
 */

package com.iciql.bytecode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iciql.Query;
import com.iciql.RuntimeToken;
import com.iciql.SQLStatement;
import com.iciql.Token;
import com.iciql.bytecode.Operation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Operation_ESTest extends Operation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      RuntimeToken runtimeToken0 = new RuntimeToken("p3K4(g3QY.)1Hrw", objectArray0);
      Operation.Type operation_Type0 = Operation.Type.DIVIDE;
      Token token0 = Operation.get(runtimeToken0, operation_Type0, runtimeToken0);
      Operation.Type operation_Type1 = Operation.Type.NOT_EQUALS;
      Token token1 = Operation.get(token0, operation_Type1, runtimeToken0);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Operation.Type operation_Type0 = Operation.Type.SMALLER_EQUALS;
      Operation.Type operation_Type1 = operation_Type0.reverse();
      assertFalse(operation_Type1.equals((Object)operation_Type0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      RuntimeToken runtimeToken0 = new RuntimeToken("com.iciql.SQLDialectMySQL", objectArray0);
      Operation.Type operation_Type0 = Operation.Type.DIVIDE;
      Token token0 = Operation.get(runtimeToken0, operation_Type0, runtimeToken0);
      SQLStatement sQLStatement0 = mock(SQLStatement.class, new ViolatedAssumptionAnswer());
      doReturn((SQLStatement) null, (SQLStatement) null, (SQLStatement) null).when(sQLStatement0).appendSQL(anyString());
      token0.appendSQL(sQLStatement0, (Query<Integer>) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Operation.Type operation_Type0 = Operation.Type.EQUALS;
      Operation operation0 = (Operation)Operation.get((Token) null, operation_Type0, (Token) null);
      // Undeclared exception!
      try { 
        operation0.reverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Operation.Type operation_Type0 = Operation.Type.NOT_EQUALS;
      // Undeclared exception!
      try { 
        Operation.get((Token) null, operation_Type0, (Token) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Operation.Type operation_Type0 = Operation.Type.BIGGER;
      Token token0 = Operation.get((Token) null, operation_Type0, (Token) null);
      SQLStatement sQLStatement0 = mock(SQLStatement.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        token0.appendSQL(sQLStatement0, (Query<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iciql.bytecode.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Operation.Type operation_Type0 = Operation.Type.ADD;
      String string0 = operation_Type0.toString();
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Operation.Type operation_Type0 = Operation.Type.BIGGER;
      Operation operation0 = (Operation)Operation.get((Token) null, operation_Type0, (Token) null);
      Operation operation1 = (Operation)operation0.reverse();
      assertNotSame(operation0, operation1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Operation.Type operation_Type0 = Operation.Type.BIGGER_EQUALS;
      Operation operation0 = (Operation)Operation.get((Token) null, operation_Type0, (Token) null);
      Operation operation1 = (Operation)operation0.reverse();
      assertFalse(operation1.equals((Object)operation0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Operation.Type operation_Type0 = Operation.Type.MOD;
      Operation operation0 = (Operation)Operation.get((Token) null, operation_Type0, (Token) null);
      Operation operation1 = (Operation)operation0.reverse();
      assertNotSame(operation0, operation1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Operation.Type operation_Type0 = Operation.Type.SMALLER;
      Operation operation0 = (Operation)Operation.get((Token) null, operation_Type0, (Token) null);
      Operation operation1 = (Operation)operation0.reverse();
      assertNotSame(operation0, operation1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[11];
      RuntimeToken runtimeToken0 = new RuntimeToken("p3K4(g3QY.)1Hrw", objectArray0);
      Operation.Type operation_Type0 = Operation.Type.NOT_EQUALS;
      Operation operation0 = (Operation)Operation.get(runtimeToken0, operation_Type0, runtimeToken0);
      Operation operation1 = (Operation)operation0.reverse();
      Operation operation2 = (Operation)operation1.reverse();
      assertFalse(operation2.equals((Object)operation1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Operation.Type[] operation_TypeArray0 = Operation.Type.values();
      RuntimeToken runtimeToken0 = new RuntimeToken("n?w*f@9", operation_TypeArray0);
      Operation.Type operation_Type0 = Operation.Type.NOT_EQUALS;
      Token token0 = Operation.get(runtimeToken0, operation_Type0, runtimeToken0);
      // Undeclared exception!
      try { 
        token0.appendSQL((SQLStatement) null, (Query<Integer>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Fragment \"n?w*f@9\" specifies 1 tokens but you supplied 11 args
         //
         verifyException("com.iciql.RuntimeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[11];
      RuntimeToken runtimeToken0 = new RuntimeToken("p3K4(g3QY.)1Hrw", objectArray0);
      Operation.Type operation_Type0 = Operation.Type.NOT_EQUALS;
      Operation operation0 = (Operation)Operation.get(runtimeToken0, operation_Type0, runtimeToken0);
      String string0 = operation0.toString();
      assertNotNull(string0);
  }
}
