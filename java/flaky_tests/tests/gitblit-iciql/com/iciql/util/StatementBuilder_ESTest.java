/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 11:20:11 GMT 2022
 */

package com.iciql.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iciql.util.StatementBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StatementBuilder_ESTest extends StatementBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StatementBuilder statementBuilder0 = new StatementBuilder();
      statementBuilder0.append('e');
      String string0 = statementBuilder0.toString();
      assertEquals("e", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StatementBuilder statementBuilder0 = new StatementBuilder(")D~n_");
      statementBuilder0.appendExceptFirst("");
      int int0 = statementBuilder0.getCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StatementBuilder statementBuilder0 = new StatementBuilder("MO84O");
      statementBuilder0.appendExceptFirst("");
      statementBuilder0.append("MO84O");
      assertEquals(1, statementBuilder0.getCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StatementBuilder statementBuilder0 = new StatementBuilder();
      statementBuilder0.appendExceptFirst("");
      statementBuilder0.append((long) 1);
      assertEquals("1", statementBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StatementBuilder statementBuilder0 = new StatementBuilder();
      statementBuilder0.appendExceptFirst((String) null);
      statementBuilder0.append('@');
      assertEquals("@", statementBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StatementBuilder statementBuilder0 = new StatementBuilder();
      // Undeclared exception!
      try { 
        statementBuilder0.insert(278, 'e');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StatementBuilder statementBuilder0 = new StatementBuilder();
      String string0 = statementBuilder0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatementBuilder statementBuilder0 = new StatementBuilder();
      statementBuilder0.appendExceptFirst("");
      statementBuilder0.appendExceptFirst("");
      assertEquals(2, statementBuilder0.getCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StatementBuilder statementBuilder0 = new StatementBuilder();
      statementBuilder0.appendOnlyFirst("");
      assertEquals(0, statementBuilder0.getCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StatementBuilder statementBuilder0 = new StatementBuilder();
      statementBuilder0.appendExceptFirst("com.iciql.util.StatementBuilder");
      statementBuilder0.appendOnlyFirst("com.iciql.util.StatementBuilder");
      assertEquals(1, statementBuilder0.getCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StatementBuilder statementBuilder0 = new StatementBuilder();
      StatementBuilder statementBuilder1 = statementBuilder0.resetCount();
      assertEquals(0, statementBuilder1.getCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StatementBuilder statementBuilder0 = new StatementBuilder();
      statementBuilder0.append('5');
      statementBuilder0.length();
      assertEquals("5", statementBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatementBuilder statementBuilder0 = new StatementBuilder();
      StatementBuilder statementBuilder1 = statementBuilder0.append((-916L));
      assertEquals("-916", statementBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StatementBuilder statementBuilder0 = new StatementBuilder();
      statementBuilder0.insert(0, '!');
      assertEquals("!", statementBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StatementBuilder statementBuilder0 = new StatementBuilder();
      int int0 = statementBuilder0.getCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StatementBuilder statementBuilder0 = new StatementBuilder();
      StatementBuilder statementBuilder1 = statementBuilder0.append("");
      assertEquals("", statementBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StatementBuilder statementBuilder0 = new StatementBuilder("com.iciql.util.StatementBuilder");
      StatementBuilder statementBuilder1 = new StatementBuilder();
      statementBuilder1.append(statementBuilder0);
      assertEquals("com.iciql.util.StatementBuilder", statementBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StatementBuilder statementBuilder0 = new StatementBuilder();
      int int0 = statementBuilder0.length();
      assertEquals(0, int0);
  }
}
