/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 11:05:41 GMT 2022
 */

package com.iciql.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iciql.util.JdbcUtils;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;
import javax.sql.XAConnection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JdbcUtils_ESTest extends JdbcUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Properties properties0 = new Properties();
      try { 
        JdbcUtils.getConnection((String) null, "org.apache.derby.jdbc.EmbeddedDriver", properties0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // No suitable driver found for org.apache.derby.jdbc.EmbeddedDriver
         //
         verifyException("java.sql.DriverManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        JdbcUtils.getConnection("8=0NkW`9HMB$I(%q,", "", "wO=J", "CD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class '8=0NkW`9HMB$I(%q,.class' should be in target project, but could not be found!
         //
         verifyException("com.iciql.util.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      try { 
        JdbcUtils.getConnection("", "", (String) null, (String) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // No suitable driver found for 
         //
         verifyException("java.sql.DriverManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      try { 
        JdbcUtils.getConnection("com.iciql.util.Utils", "com.iciql.util.Utils", "com.iciql.util.Utils", "jdcc:com.");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // No suitable driver found for com.iciql.util.Utils
         //
         verifyException("java.sql.DriverManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        JdbcUtils.load((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        JdbcUtils.getDriver((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        JdbcUtils.getConnection("?.@G7", "?.@G7", (Properties) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class '?/@G7.class' should be in target project, but could not be found!
         //
         verifyException("com.iciql.util.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        JdbcUtils.getConnection((String) null, (String) null, properties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = JdbcUtils.getDriver("jdbc:FrontBase:");
      assertNotNull(string0);
      assertEquals("com.frontbase.jdbc.FBJDriver", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = JdbcUtils.getDriver("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      try { 
        JdbcUtils.getConnection("com.iciql.util.Utils", "pointbase:", (Properties) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // No suitable driver found for pointbase:
         //
         verifyException("java.sql.DriverManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      JdbcUtils.closeSilently(resultSet0, false);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JdbcUtils.closeSilently((Statement) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = JdbcUtils.getDriver("jdbc:KkCLM-}");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        JdbcUtils.load("jdbc:pointbase:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class 'com/pointbase/jdbc/jdbcUniversalDriver.class' should be in target project, but could not be found!
         //
         verifyException("com.iciql.util.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JdbcUtils.load("pointbase:");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = JdbcUtils.escapeMetaDataPattern("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = JdbcUtils.escapeMetaDataPattern("pointbase:");
      assertEquals("pointbase:", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = JdbcUtils.escapeMetaDataPattern((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        JdbcUtils.getConnection((String) null, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XAConnection xAConnection0 = mock(XAConnection.class, new ViolatedAssumptionAnswer());
      JdbcUtils.closeSilently(xAConnection0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JdbcUtils.closeSilently((XAConnection) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(resultSet0).getStatement();
      JdbcUtils.closeSilently(resultSet0, true);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JdbcUtils.closeSilently((ResultSet) null, true);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JdbcUtils.closeSilently((Connection) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      JdbcUtils.closeSilently(statement0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      JdbcUtils.closeSilently(resultSet0);
  }
}
