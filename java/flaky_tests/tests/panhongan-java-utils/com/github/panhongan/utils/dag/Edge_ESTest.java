/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 09:49:57 GMT 2022
 */

package com.github.panhongan.utils.dag;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.panhongan.utils.dag.Edge;
import com.github.panhongan.utils.dag.Vertex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Edge_ESTest extends Edge_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vertex vertex0 = new Vertex(", children = [");
      Vertex vertex1 = Vertex.copy(vertex0);
      Edge edge0 = new Edge(vertex1, vertex0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vertex vertex0 = new Vertex("0N'WJ$owd@YcA");
      Edge edge0 = new Edge(vertex0, vertex0);
      vertex0.markTraversed();
      Vertex vertex1 = edge0.getToVertex();
      assertEquals("0N'WJ$owd@YcA", vertex1.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vertex vertex0 = new Vertex(", children = [");
      Edge edge0 = new Edge(vertex0, vertex0);
      vertex0.addDownstream(vertex0);
      vertex0.decreaseInDegree();
      Vertex vertex1 = edge0.getToVertex();
      assertSame(vertex1, vertex0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vertex vertex0 = new Vertex(", children = [");
      Edge edge0 = new Edge(vertex0, vertex0);
      vertex0.addDownstream(vertex0);
      Vertex vertex1 = edge0.getToVertex();
      assertSame(vertex1, vertex0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vertex vertex0 = new Vertex(", children = [");
      Edge edge0 = new Edge(vertex0, vertex0);
      vertex0.markTraversed();
      Vertex vertex1 = edge0.getFromVertex();
      assertTrue(vertex1.isTraversed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vertex vertex0 = new Vertex("0N'WJ$owd@YcA");
      Edge edge0 = new Edge(vertex0, vertex0);
      Vertex vertex1 = edge0.getFromVertex();
      assertSame(vertex0, vertex1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vertex vertex0 = new Vertex(", children = [");
      Edge edge0 = new Edge(vertex0, vertex0);
      vertex0.addDownstream(vertex0);
      Vertex vertex1 = edge0.getFromVertex();
      assertFalse(vertex1.isTraversed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Edge edge0 = new Edge((Vertex) null, (Vertex) null);
      // Undeclared exception!
      try { 
        edge0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.panhongan.utils.dag.Edge", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vertex vertex0 = new Vertex(", children = [");
      Edge edge0 = new Edge(vertex0, vertex0);
      String string0 = edge0.toString();
      assertEquals("edge : from = , children = [, to = , children = [", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Edge edge0 = new Edge((Vertex) null, (Vertex) null);
      Vertex vertex0 = edge0.getFromVertex();
      assertNull(vertex0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Edge edge0 = new Edge((Vertex) null, (Vertex) null);
      Vertex vertex0 = edge0.getToVertex();
      assertNull(vertex0);
  }
}
