/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 09:40:21 GMT 2022
 */

package com.github.panhongan.utils.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.panhongan.utils.reflect.ReflectUtils;
import java.lang.reflect.Field;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReflectUtils_ESTest extends ReflectUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      try { 
        ReflectUtils.newInstance((Class<Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.panhongan.utils.reflect.ReflectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Field> class0 = Field.class;
      try { 
        ReflectUtils.newInstance(class0);
        fail("Expecting exception: InstantiationException");
      
      } catch(InstantiationException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      try { 
        ReflectUtils.getClassFast((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectUtils.getClassBeanFieldFast((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        ReflectUtils.getAllFields(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/ArrayUtils
         //
         verifyException("com.github.panhongan.utils.reflect.ReflectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class class0 = ReflectUtils.getClassFast("com.github.panhongan.utils.reflect.ReflectUtils");
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Collection<Field> collection0 = ReflectUtils.getAllFields((Class) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      try { 
        ReflectUtils.getClassFast("iXQnz#ZGv<");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = ReflectUtils.newInstance(class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ReflectUtils reflectUtils0 = new ReflectUtils();
  }
}
