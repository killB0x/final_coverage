/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 03:23:16 GMT 2022
 */

package io.configrd.core.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.configrd.core.file.DefaultFileConfigSource;
import io.configrd.core.file.DefaultFileStreamSource;
import io.configrd.core.source.StreamPacket;
import io.configrd.core.source.StreamSource;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultFileConfigSource_ESTest extends DefaultFileConfigSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DefaultFileConfigSource defaultFileConfigSource0 = new DefaultFileConfigSource((DefaultFileStreamSource) null, hashMap0);
      boolean boolean0 = defaultFileConfigSource0.isCompatible((StreamSource) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      DefaultFileStreamSource defaultFileStreamSource0 = mock(DefaultFileStreamSource.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(defaultFileStreamSource0).streamFile(anyString());
      DefaultFileConfigSource defaultFileConfigSource0 = new DefaultFileConfigSource(defaultFileStreamSource0, hashMap1);
      Optional<StreamPacket> optional0 = defaultFileConfigSource0.getFile("");
      assertNull(optional0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DefaultFileConfigSource defaultFileConfigSource0 = new DefaultFileConfigSource((DefaultFileStreamSource) null, hashMap0);
      // Undeclared exception!
      try { 
        defaultFileConfigSource0.getRaw("H 6GW!L{TR:)\"cCP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.configrd.core.file.DefaultFileConfigSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DefaultFileConfigSource defaultFileConfigSource0 = new DefaultFileConfigSource((DefaultFileStreamSource) null, hashMap0);
      // Undeclared exception!
      try { 
        defaultFileConfigSource0.getFile("TV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.configrd.core.file.DefaultFileConfigSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultFileConfigSource defaultFileConfigSource0 = null;
      try {
        defaultFileConfigSource0 = new DefaultFileConfigSource((DefaultFileStreamSource) null, (Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.configrd.core.source.DefaultConfigSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      DefaultFileStreamSource defaultFileStreamSource0 = mock(DefaultFileStreamSource.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(defaultFileStreamSource0).stream(anyString());
      DefaultFileConfigSource defaultFileConfigSource0 = new DefaultFileConfigSource(defaultFileStreamSource0, hashMap1);
      // Undeclared exception!
      try { 
        defaultFileConfigSource0.getRaw("io.configrd.core.file.DefaultFileConfigSource");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.configrd.core.file.DefaultFileConfigSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DefaultFileStreamSource defaultFileStreamSource0 = mock(DefaultFileStreamSource.class, new ViolatedAssumptionAnswer());
      DefaultFileConfigSource defaultFileConfigSource0 = new DefaultFileConfigSource(defaultFileStreamSource0, hashMap0);
      DefaultFileStreamSource defaultFileStreamSource1 = defaultFileConfigSource0.getStreamSource();
      boolean boolean0 = defaultFileConfigSource0.isCompatible(defaultFileStreamSource1);
      assertTrue(boolean0);
  }
}
