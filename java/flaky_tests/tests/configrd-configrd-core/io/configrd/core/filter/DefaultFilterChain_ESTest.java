/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 03:16:32 GMT 2022
 */

package io.configrd.core.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.configrd.core.filter.DefaultFilterChain;
import io.configrd.core.filter.Filter;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultFilterChain_ESTest extends DefaultFilterChain_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultFilterChain<Filter> defaultFilterChain0 = new DefaultFilterChain<Filter>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("!0;ZtRaaa#LwuvW", "!0;ZtRaaa#LwuvW");
      defaultFilterChain0.isLast((Filter) null);
      // Undeclared exception!
      try { 
        defaultFilterChain0.apply(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.configrd.core.filter.DefaultFilterChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultFilterChain<Filter> defaultFilterChain0 = new DefaultFilterChain<Filter>();
      defaultFilterChain0.addFilter((Filter) null);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultFilterChain<Filter> defaultFilterChain0 = new DefaultFilterChain<Filter>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("!0;ZtRaaa#LwuvW", "!0;ZtRaaa#LwuvW");
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(filter0).apply(anyMap());
      defaultFilterChain0.addFilter(filter0);
      Map<String, Object> map0 = defaultFilterChain0.apply(hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultFilterChain<Filter> defaultFilterChain0 = new DefaultFilterChain<Filter>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("!0;ZtRaaa#LwuvW", "!0;ZtRaaa#LwuvW");
      Map<String, Object> map0 = defaultFilterChain0.apply(hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultFilterChain<Filter> defaultFilterChain0 = new DefaultFilterChain<Filter>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Map<String, Object> map0 = defaultFilterChain0.apply(hashMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultFilterChain<Filter> defaultFilterChain0 = new DefaultFilterChain<Filter>();
      Map<String, Object> map0 = defaultFilterChain0.apply((Map<String, Object>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DefaultFilterChain<Filter> defaultFilterChain0 = new DefaultFilterChain<Filter>();
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      defaultFilterChain0.isFirst(filter0);
  }
}
