/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 03:21:40 GMT 2022
 */

package io.configrd.core.source;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.configrd.core.file.FileRepoDef;
import io.configrd.core.http.HttpRepoDef;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultRepoDef_ESTest extends DefaultRepoDef_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(213);
      HttpRepoDef httpRepoDef0 = new HttpRepoDef("e", hashMap0);
      httpRepoDef0.setSourceName("e");
      httpRepoDef0.setFileName("B8h-O\"m(aHp:0bz~tsp");
      httpRepoDef0.setUri("e");
      String[] stringArray0 = httpRepoDef0.valid();
      assertFalse(httpRepoDef0.getTrustCert());
      assertEquals("e", httpRepoDef0.getSourceName());
      assertEquals(0, stringArray0.length);
      assertEquals("e", httpRepoDef0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileRepoDef fileRepoDef0 = new FileRepoDef(";cZ%CqZ0@w");
      String string0 = fileRepoDef0.getUri();
      assertFalse(fileRepoDef0.getTrustCert());
      assertNull(string0);
      assertEquals(";cZ%CqZ0@w", fileRepoDef0.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HttpRepoDef httpRepoDef0 = new HttpRepoDef("#D");
      httpRepoDef0.setUri("#D");
      httpRepoDef0.getUri();
      assertFalse(httpRepoDef0.getTrustCert());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileRepoDef fileRepoDef0 = new FileRepoDef((String) null);
      fileRepoDef0.setUri("");
      String string0 = fileRepoDef0.getUri();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(fileRepoDef0.getTrustCert());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HttpRepoDef httpRepoDef0 = new HttpRepoDef(",H", hashMap0);
      assertFalse(httpRepoDef0.getTrustCert());
      
      httpRepoDef0.setTrustCert((Boolean) null);
      Boolean boolean0 = httpRepoDef0.getTrustCert();
      assertEquals(",H", httpRepoDef0.getName());
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HttpRepoDef httpRepoDef0 = new HttpRepoDef(";+");
      httpRepoDef0.setSourceName(";+");
      String string0 = httpRepoDef0.getSourceName();
      assertFalse(httpRepoDef0.getTrustCert());
      assertNotNull(string0);
      assertEquals(";+", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(1, 1);
      HttpRepoDef httpRepoDef0 = new HttpRepoDef("z/u>@C?v", hashMap0);
      httpRepoDef0.setSourceName("");
      String string0 = httpRepoDef0.getSourceName();
      assertNotNull(string0);
      assertFalse(httpRepoDef0.getTrustCert());
      assertEquals("", string0);
      assertEquals("z/u>@C?v", httpRepoDef0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HttpRepoDef httpRepoDef0 = new HttpRepoDef("\"VJa*&nG=G;$PP{%");
      httpRepoDef0.setNamed((Map<String, String>) null);
      Map<String, String> map0 = httpRepoDef0.getNamed();
      assertNull(map0);
      assertFalse(httpRepoDef0.getTrustCert());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HttpRepoDef httpRepoDef0 = new HttpRepoDef("Uri must have a value.");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("D", "Repo's sourceName must be specified.");
      httpRepoDef0.setNamed(hashMap0);
      Map<String, String> map0 = httpRepoDef0.getNamed();
      assertFalse(httpRepoDef0.getTrustCert());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HttpRepoDef httpRepoDef0 = new HttpRepoDef("GU}^Fts<X\"_Nw$z");
      httpRepoDef0.setName((String) null);
      String string0 = httpRepoDef0.getName();
      assertNull(string0);
      assertFalse(httpRepoDef0.getTrustCert());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HttpRepoDef httpRepoDef0 = new HttpRepoDef("");
      String string0 = httpRepoDef0.getName();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(httpRepoDef0.getTrustCert());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HttpRepoDef httpRepoDef0 = new HttpRepoDef("e>(", hashMap0);
      httpRepoDef0.setConfigrdFileName("=R3KhG>lQ3h");
      String string0 = httpRepoDef0.getConfigrdFileName();
      assertEquals("e>(", httpRepoDef0.getName());
      assertFalse(httpRepoDef0.getTrustCert());
      assertEquals("=R3KhG>lQ3h", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HttpRepoDef httpRepoDef0 = new HttpRepoDef(")");
      httpRepoDef0.setConfigrdFileName("");
      String string0 = httpRepoDef0.getConfigrdFileName();
      assertEquals("", string0);
      assertFalse(httpRepoDef0.getTrustCert());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileRepoDef fileRepoDef0 = new FileRepoDef("");
      // Undeclared exception!
      try { 
        fileRepoDef0.valid();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HttpRepoDef httpRepoDef0 = new HttpRepoDef(";+");
      String string0 = httpRepoDef0.getSourceName();
      assertFalse(httpRepoDef0.getTrustCert());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(213);
      HttpRepoDef httpRepoDef0 = new HttpRepoDef("e", hashMap0);
      assertEquals("e", httpRepoDef0.getName());
      
      httpRepoDef0.setName("1*KbH(dQcI0>");
      assertEquals("1*KbH(dQcI0>", httpRepoDef0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(1, 1);
      HttpRepoDef httpRepoDef0 = new HttpRepoDef("z/u>@C?v", hashMap0);
      assertFalse(httpRepoDef0.getTrustCert());
      
      Boolean boolean0 = Boolean.TRUE;
      httpRepoDef0.setTrustCert(boolean0);
      httpRepoDef0.getTrustCert();
      assertTrue(httpRepoDef0.getTrustCert());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(1, 1);
      HttpRepoDef httpRepoDef0 = new HttpRepoDef("z/u>@C?v", hashMap0);
      String string0 = httpRepoDef0.getConfigrdFileName();
      assertEquals("z/u>@C?v", httpRepoDef0.getName());
      assertNull(string0);
      assertFalse(httpRepoDef0.getTrustCert());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HttpRepoDef httpRepoDef0 = new HttpRepoDef(";+");
      String string0 = httpRepoDef0.getName();
      assertEquals(";+", string0);
      assertNotNull(string0);
      assertFalse(httpRepoDef0.getTrustCert());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(213);
      HttpRepoDef httpRepoDef0 = new HttpRepoDef("e", hashMap0);
      httpRepoDef0.setSourceName("e");
      String[] stringArray0 = httpRepoDef0.valid();
      assertFalse(httpRepoDef0.getTrustCert());
      assertEquals("e", httpRepoDef0.getSourceName());
      assertEquals("e", httpRepoDef0.getName());
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HttpRepoDef httpRepoDef0 = new HttpRepoDef("\"VJa*&nG=G;$PP{%");
      httpRepoDef0.getNamed();
      assertFalse(httpRepoDef0.getTrustCert());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HttpRepoDef httpRepoDef0 = new HttpRepoDef((String) null, hashMap0);
      Boolean boolean0 = httpRepoDef0.getTrustCert();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileRepoDef fileRepoDef0 = new FileRepoDef("zB%7");
      fileRepoDef0.setUri("zB%7");
      // Undeclared exception!
      try { 
        fileRepoDef0.valid();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed escape pair at index 2: zB%7
         //
         verifyException("java.net.URI", e);
      }
  }
}
