/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 03:26:55 GMT 2022
 */

package io.configrd.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.configrd.core.util.TemplateReplace;
import java.io.IOException;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TemplateReplace_ESTest extends TemplateReplace_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TemplateReplace templateReplace0 = new TemplateReplace();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        templateReplace0.replace((String) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TemplateReplace templateReplace0 = new TemplateReplace();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        templateReplace0.replace("-:fer236A", hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in scheme name at index 0: -:fer236A
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TemplateReplace templateReplace0 = new TemplateReplace();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        templateReplace0.replace("", hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }
}
