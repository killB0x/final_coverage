/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 03:24:13 GMT 2022
 */

package io.configrd.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.configrd.core.util.CfgrdURI;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CfgrdURI_ESTest extends CfgrdURI_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URI uRI0 = MockURI.URI("cfgrd", "", "cfgrd", 49, "", "cfgrd", "P70m2");
      CfgrdURI cfgrdURI0 = new CfgrdURI(uRI0);
      URI uRI1 = cfgrdURI0.toURI();
      assertEquals("", uRI1.getRawPath());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URI uRI0 = MockURI.URI("cfgrd", "7j<FVQj[#^V^0<f]", "");
      boolean boolean0 = CfgrdURI.isCfgrdURI(uRI0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      boolean boolean0 = CfgrdURI.isCfgrdURI(uRI0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URI uRI0 = MockURI.URI("cfgrd", "7j<FVQj[#^V^0<f]", "");
      CfgrdURI cfgrdURI0 = new CfgrdURI(uRI0);
      boolean boolean0 = cfgrdURI0.hasFile();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URI uRI0 = MockURI.URI("cfgrd", "", "cfgrd", 49, "", "cfgrd", "P70m2");
      CfgrdURI cfgrdURI0 = new CfgrdURI(uRI0);
      String string0 = cfgrdURI0.getUserName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URI uRI0 = MockURI.URI("cfgrd", "", "cfgrd", 49, "", "cfgrd", "");
      CfgrdURI cfgrdURI0 = new CfgrdURI(uRI0);
      String string0 = cfgrdURI0.getRepoName();
      assertEquals("cfgrd", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URI uRI0 = MockURI.URI("cfgrd", "cfgrd", (String) null, "cfgrd", "");
      CfgrdURI cfgrdURI0 = new CfgrdURI(uRI0);
      String string0 = cfgrdURI0.getPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URI uRI0 = MockURI.URI("cfgrd", "", "cfgrd", 49, "", "cfgrd", "P70m2");
      CfgrdURI cfgrdURI0 = new CfgrdURI(uRI0);
      String string0 = cfgrdURI0.getPassword();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URI uRI0 = MockURI.URI("cfgrd", "", "cfgrd", 49, "", "cfgrd", "");
      CfgrdURI cfgrdURI0 = new CfgrdURI(uRI0);
      String string0 = cfgrdURI0.getFileName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CfgrdURI cfgrdURI0 = null;
      try {
        cfgrdURI0 = new CfgrdURI((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        CfgrdURI.isCfgrdURI((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      CfgrdURI cfgrdURI0 = null;
      try {
        cfgrdURI0 = new CfgrdURI(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cfgrd uri must start with 'cfgrd://'
         //
         verifyException("io.configrd.core.util.CfgrdURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URI uRI0 = MockURI.URI("cfgrd", "Uri doesn't contain root uri to offset path from.", "r,1;Rq%*r");
      CfgrdURI cfgrdURI0 = new CfgrdURI(uRI0);
      String string0 = cfgrdURI0.getPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.URI("cfgrd", "Uri doesn't contain root uri to offset path from.", "r,1;Rq%*r");
      CfgrdURI cfgrdURI0 = new CfgrdURI(uRI0);
      String string0 = cfgrdURI0.getRepoName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URI uRI0 = MockURI.URI("cfgrd", "Uri doesn't contain root uri to offset path from.", "r,1;Rq%*r");
      CfgrdURI cfgrdURI0 = new CfgrdURI(uRI0);
      boolean boolean0 = cfgrdURI0.hasFile();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URI uRI0 = MockURI.URI("cfgrd", "Uri doesn't contain root uri to offset path from.", "r,1;Rq%*r");
      CfgrdURI cfgrdURI0 = new CfgrdURI(uRI0);
      String string0 = cfgrdURI0.toString();
      assertEquals("cfgrd:Uri%20doesn't%20contain%20root%20uri%20to%20offset%20path%20from.#r,1;Rq%25*r", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URI uRI0 = MockURI.URI("cfgrd", "Uri doesn't contain root uri to offset path from.", "r,1;Rq%*r");
      CfgrdURI cfgrdURI0 = new CfgrdURI(uRI0);
      String string0 = cfgrdURI0.getPassword();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URI uRI0 = MockURI.URI("cfgrd", "Uri doesn't contain root uri to offset path from.", "r,1;Rq%*r");
      CfgrdURI cfgrdURI0 = new CfgrdURI(uRI0);
      String string0 = cfgrdURI0.getUserName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URI uRI0 = MockURI.URI("cfgrd", "Uri doesn't contain root uri to offset path from.", "r,1;Rq%*r");
      CfgrdURI cfgrdURI0 = new CfgrdURI(uRI0);
      URI uRI1 = cfgrdURI0.toURI();
      assertEquals("cfgrd:Uri%20doesn't%20contain%20root%20uri%20to%20offset%20path%20from.#r,1;Rq%25*r", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URI uRI0 = MockURI.URI("cfgrd", "Uri doesn't contain root uri to offset path from.", "r,1;Rq%*r");
      CfgrdURI cfgrdURI0 = new CfgrdURI(uRI0);
      String string0 = cfgrdURI0.getFileName();
      assertEquals("Uri doesn't contain root uri to offset path from.", string0);
  }
}
