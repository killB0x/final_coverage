/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 03:19:44 GMT 2022
 */

package io.configrd.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.configrd.core.util.FNV;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FNV_ESTest extends FNV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte)1;
      BigInteger bigInteger0 = FNV.fnv1a_64(byteArray0);
      assertEquals((short) (-5120), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)52;
      BigInteger bigInteger0 = FNV.fnv1a_32(byteArray0);
      assertEquals((short)12806, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)81;
      BigInteger bigInteger0 = FNV.fnv1a_32(byteArray0);
      assertEquals((short) (-30208), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-74);
      BigInteger bigInteger0 = FNV.fnv1_64(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-8);
      BigInteger bigInteger0 = FNV.fnv1_64(byteArray0);
      assertEquals((short) (-16209), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-19);
      BigInteger bigInteger0 = FNV.fnv1_64(byteArray0);
      assertEquals((short)28416, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-1);
      byteArray0[3] = (byte)24;
      byteArray0[7] = (byte)108;
      BigInteger bigInteger0 = FNV.fnv1_32(byteArray0);
      assertEquals((short) (-4608), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = FNV.fnv1_32(byteArray0);
      assertEquals((short)19874, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        FNV.fnv1a_64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.configrd.core.util.FNV", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        FNV.fnv1a_32((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.configrd.core.util.FNV", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        FNV.fnv1_64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.configrd.core.util.FNV", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        FNV.fnv1_32((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.configrd.core.util.FNV", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = FNV.fnv1a_64(byteArray0);
      assertEquals((byte) (-59), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = FNV.fnv1a_64(byteArray0);
      assertEquals((short)8997, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = FNV.fnv1a_32(byteArray0);
      assertEquals((short) (-25147), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = FNV.fnv1_64(byteArray0);
      assertEquals((byte)37, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = FNV.fnv1_32(byteArray0);
      assertEquals((short)29029, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FNV fNV0 = new FNV();
  }
}
