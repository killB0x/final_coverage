/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 03:11:07 GMT 2022
 */

package io.configrd.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.configrd.core.util.DirectoryTraverse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirectoryTraverse_ESTest extends DirectoryTraverse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DirectoryTraverse directoryTraverse0 = new DirectoryTraverse("bgh", "m=n|3iF?X]eop#q");
      String string0 = directoryTraverse0.decend();
      assertEquals("bgh/m=n|3iF?X]eop#q", string0);
      
      String string1 = directoryTraverse0.ascend();
      assertTrue(directoryTraverse0.hasNextUp());
      assertEquals("m=n|3iF?X]eop#q", string1);
      assertTrue(directoryTraverse0.hasNextDown());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DirectoryTraverse directoryTraverse0 = new DirectoryTraverse("", (String) null);
      int int0 = directoryTraverse0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DirectoryTraverse directoryTraverse0 = new DirectoryTraverse("");
      String string0 = directoryTraverse0.at(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DirectoryTraverse directoryTraverse0 = new DirectoryTraverse("");
      // Undeclared exception!
      try { 
        directoryTraverse0.at((-16519105));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 > -16519105
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DirectoryTraverse directoryTraverse0 = null;
      try {
        directoryTraverse0 = new DirectoryTraverse((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.configrd.core.util.DirectoryTraverse", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DirectoryTraverse directoryTraverse0 = null;
      try {
        directoryTraverse0 = new DirectoryTraverse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.configrd.core.util.UriUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DirectoryTraverse directoryTraverse0 = new DirectoryTraverse("bgh", "m=n|3iF?X]eop#q");
      boolean boolean0 = directoryTraverse0.hasNextDown();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DirectoryTraverse directoryTraverse0 = new DirectoryTraverse("");
      boolean boolean0 = directoryTraverse0.hasNextUp();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DirectoryTraverse directoryTraverse0 = new DirectoryTraverse("//'}y", "&(!+rsYt7");
      String string0 = directoryTraverse0.at(1765);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DirectoryTraverse directoryTraverse0 = new DirectoryTraverse("bgh", "m=n|3iF?X]eop#q");
      String string0 = directoryTraverse0.at(0);
      assertEquals("m=n|3iF?X]eop#q", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DirectoryTraverse directoryTraverse0 = new DirectoryTraverse("//'}y", "&(!+rsYt7");
      int int0 = directoryTraverse0.available();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DirectoryTraverse directoryTraverse0 = new DirectoryTraverse("", (String) null);
      assertTrue(directoryTraverse0.hasNextDown());
      
      directoryTraverse0.decend();
      boolean boolean0 = directoryTraverse0.hasNextDown();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DirectoryTraverse directoryTraverse0 = new DirectoryTraverse("P{Mj&hK", "P{Mj&hK");
      assertTrue(directoryTraverse0.hasNextUp());
      
      directoryTraverse0.ascend();
      boolean boolean0 = directoryTraverse0.hasNextUp();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DirectoryTraverse directoryTraverse0 = new DirectoryTraverse("", "");
      directoryTraverse0.ascend();
      directoryTraverse0.decend();
      assertTrue(directoryTraverse0.hasNextUp());
      assertFalse(directoryTraverse0.hasNextDown());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DirectoryTraverse directoryTraverse0 = new DirectoryTraverse(")]L2euQ>o8mldx*2!6g", ")]L2euQ>o8mldx*2!6g");
      assertTrue(directoryTraverse0.hasNextUp());
      
      directoryTraverse0.ascend();
      directoryTraverse0.ascend();
      assertFalse(directoryTraverse0.hasNextUp());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DirectoryTraverse directoryTraverse0 = new DirectoryTraverse("");
      assertTrue(directoryTraverse0.hasNextDown());
      
      directoryTraverse0.decend();
      directoryTraverse0.decend();
      assertFalse(directoryTraverse0.hasNextDown());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DirectoryTraverse directoryTraverse0 = new DirectoryTraverse(".", ".");
      directoryTraverse0.decend();
      directoryTraverse0.ascend();
      assertFalse(directoryTraverse0.hasNextUp());
      assertTrue(directoryTraverse0.hasNextDown());
  }
}
