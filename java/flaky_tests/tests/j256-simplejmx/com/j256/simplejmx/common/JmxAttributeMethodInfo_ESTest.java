/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 10:39:50 GMT 2022
 */

package com.j256.simplejmx.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplejmx.common.JmxAttributeMethod;
import com.j256.simplejmx.common.JmxAttributeMethodInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JmxAttributeMethodInfo_ESTest extends JmxAttributeMethodInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JmxAttributeMethod jmxAttributeMethod0 = mock(JmxAttributeMethod.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jmxAttributeMethod0).description();
      JmxAttributeMethodInfo jmxAttributeMethodInfo0 = new JmxAttributeMethodInfo((String) null, jmxAttributeMethod0);
      String string0 = jmxAttributeMethodInfo0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JmxAttributeMethodInfo jmxAttributeMethodInfo0 = new JmxAttributeMethodInfo("", "");
      String string0 = jmxAttributeMethodInfo0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JmxAttributeMethodInfo jmxAttributeMethodInfo0 = new JmxAttributeMethodInfo("", "");
      jmxAttributeMethodInfo0.setMethodName(";u992s=Pag5mk{NBAw");
      String string0 = jmxAttributeMethodInfo0.getMethodName();
      assertEquals(";u992s=Pag5mk{NBAw", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JmxAttributeMethodInfo jmxAttributeMethodInfo0 = new JmxAttributeMethodInfo("", "");
      String string0 = jmxAttributeMethodInfo0.getMethodName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JmxAttributeMethodInfo jmxAttributeMethodInfo0 = new JmxAttributeMethodInfo("VhqPnt%5]Z");
      String string0 = jmxAttributeMethodInfo0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JmxAttributeMethodInfo jmxAttributeMethodInfo0 = new JmxAttributeMethodInfo("", "");
      jmxAttributeMethodInfo0.setDescription("!mwc");
      String string0 = jmxAttributeMethodInfo0.getDescription();
      assertEquals("!mwc", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JmxAttributeMethodInfo jmxAttributeMethodInfo0 = new JmxAttributeMethodInfo();
      String string0 = jmxAttributeMethodInfo0.getMethodName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JmxAttributeMethodInfo jmxAttributeMethodInfo0 = new JmxAttributeMethodInfo("VhqPnt%5]Z");
      String string0 = jmxAttributeMethodInfo0.toString();
      assertEquals("VhqPnt%5]Z", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JmxAttributeMethodInfo jmxAttributeMethodInfo0 = null;
      try {
        jmxAttributeMethodInfo0 = new JmxAttributeMethodInfo((String) null, (JmxAttributeMethod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.common.JmxAttributeMethodInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      JmxAttributeMethodInfo jmxAttributeMethodInfo0 = new JmxAttributeMethodInfo("|\"Hs_V", "");
      String string0 = jmxAttributeMethodInfo0.getDescription();
      assertEquals("", string0);
      assertEquals("|\"Hs_V", jmxAttributeMethodInfo0.getMethodName());
  }
}
