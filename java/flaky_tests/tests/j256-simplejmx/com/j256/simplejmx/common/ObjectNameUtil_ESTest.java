/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 10:33:04 GMT 2022
 */

package com.j256.simplejmx.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplejmx.common.BaseJmxSelfNaming;
import com.j256.simplejmx.common.JmxFolderName;
import com.j256.simplejmx.common.JmxResource;
import com.j256.simplejmx.common.JmxResourceInfo;
import com.j256.simplejmx.common.JmxSelfNaming;
import com.j256.simplejmx.common.ObjectNameUtil;
import javax.management.ObjectName;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectNameUtil_ESTest extends ObjectNameUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectName objectName0 = ObjectNameUtil.makeObjectName("D{D!y|l!|~@Pa3eS", " ]'");
      assertNotNull(objectName0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectName objectName0 = ObjectNameUtil.makeObjectName("", "com.j256.simplejmx.common.ObjectNameUtil", (String[]) null);
      assertNotNull(objectName0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ObjectName objectName0 = ObjectNameUtil.makeObjectName("com.j256.simplejmx.common.ObjectNameUtil", "com.j256.simplejmx.common.ObjectNameUtil", stringArray0);
      assertNotNull(objectName0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectName objectName0 = ObjectNameUtil.makeObjectName("");
      assertNotNull(objectName0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectNameUtil.makeObjectName((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.common.ObjectNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectNameUtil.makeObjectName((JmxResource) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.common.ObjectNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo();
      jmxResourceInfo0.setJmxDomainName("E?H)PyFDEI");
      ObjectName objectName0 = ObjectNameUtil.makeObjectName((JmxResource) null, (JmxSelfNaming) jmxResourceInfo0);
      assertNotNull(objectName0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo();
      // Undeclared exception!
      try { 
        ObjectNameUtil.makeObjectName((JmxResource) null, (JmxSelfNaming) jmxResourceInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not create ObjectName because domain name not specified in getJmxDomainName() nor @JmxResource
         //
         verifyException("com.j256.simplejmx.common.ObjectNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JmxResource jmxResource0 = mock(JmxResource.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(jmxResource0).folderNames();
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo("", "", "");
      ObjectName objectName0 = ObjectNameUtil.makeObjectName(jmxResource0, (JmxSelfNaming) jmxResourceInfo0);
      assertNotNull(objectName0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectNameUtil.makeObjectName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid ObjectName generated: null
         //
         verifyException("com.j256.simplejmx.common.ObjectNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "_#3?x=!i^wJZix";
      // Undeclared exception!
      try { 
        ObjectNameUtil.makeObjectName("_#3?x=!i^wJZix", "_#3?x=!i^wJZix", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid ObjectName generated: _#3?x=!i^wJZix:_#3?x=!i^wJZix,name=_#3?x=!i^wJZix
         //
         verifyException("com.j256.simplejmx.common.ObjectNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Qc\"<Dx1I]DI{";
      // Undeclared exception!
      try { 
        ObjectNameUtil.makeObjectName("Qc\"<Dx1I]DI{", "Qc\"<Dx1I]DI{", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.common.ObjectNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JmxFolderName[] jmxFolderNameArray0 = new JmxFolderName[1];
      JmxFolderName jmxFolderName0 = new JmxFolderName("", "");
      jmxFolderNameArray0[0] = jmxFolderName0;
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo("", "", jmxFolderNameArray0, "");
      // Undeclared exception!
      try { 
        ObjectNameUtil.makeObjectName((JmxSelfNaming) jmxResourceInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid ObjectName generated: :=,name=
         //
         verifyException("com.j256.simplejmx.common.ObjectNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[12];
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo("", "", stringArray0, "");
      ObjectName objectName0 = ObjectNameUtil.makeObjectName((Object) jmxResourceInfo0);
      assertNotNull(objectName0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo("", "", stringArray0, "");
      ObjectName objectName0 = ObjectNameUtil.makeObjectName((JmxSelfNaming) jmxResourceInfo0);
      assertNotNull(objectName0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ObjectNameUtil.makeObjectName(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Registered class must either implement JmxSelfNaming or have JmxResource annotation
         //
         verifyException("com.j256.simplejmx.common.ObjectNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JmxResource jmxResource0 = mock(JmxResource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jmxResource0).beanName();
      doReturn("com.j256.simplejmx.common.BaseJmxSelfNaming").when(jmxResource0).domainName();
      doReturn((String[]) null).when(jmxResource0).folderNames();
      ObjectName objectName0 = ObjectNameUtil.makeObjectName(jmxResource0, (Object) jmxResource0);
      assertNotNull(objectName0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JmxResource jmxResource0 = mock(JmxResource.class, new ViolatedAssumptionAnswer());
      doReturn("").when(jmxResource0).domainName();
      // Undeclared exception!
      try { 
        ObjectNameUtil.makeObjectName(jmxResource0, (Object) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not create ObjectName because domain name not specified in @JmxResource
         //
         verifyException("com.j256.simplejmx.common.ObjectNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JmxResource jmxResource0 = mock(JmxResource.class, new ViolatedAssumptionAnswer());
      doReturn("com.j256.simplejmx.common.BaseJmxSelfNaming").when(jmxResource0).beanName();
      doReturn("com.j256.simplejmx.common.BaseJmxSelfNaming").when(jmxResource0).domainName();
      doReturn((String[]) null).when(jmxResource0).folderNames();
      ObjectName objectName0 = ObjectNameUtil.makeObjectName(jmxResource0, (Object) jmxResource0);
      assertNotNull(objectName0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JmxResource jmxResource0 = mock(JmxResource.class, new ViolatedAssumptionAnswer());
      doReturn(",!he41sor").when(jmxResource0).beanName();
      doReturn(",!he41sor").when(jmxResource0).domainName();
      doReturn(stringArray0).when(jmxResource0).folderNames();
      BaseJmxSelfNaming baseJmxSelfNaming0 = new BaseJmxSelfNaming();
      // Undeclared exception!
      try { 
        ObjectNameUtil.makeObjectName(jmxResource0, (JmxSelfNaming) baseJmxSelfNaming0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.common.ObjectNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectNameUtil.makeObjectName((JmxSelfNaming) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.common.ObjectNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectNameUtil.makeObjectName("name=", "name=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid ObjectName generated: name=:name=name=
         //
         verifyException("com.j256.simplejmx.common.ObjectNameUtil", e);
      }
  }
}
