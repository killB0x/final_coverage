/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 10:36:42 GMT 2022
 */

package com.j256.simplejmx.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplejmx.client.Main;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.management.JMException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Main_ESTest extends Main_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Main main0 = new Main();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Jmx: attrs java.lang:type=Memory";
      try { 
        main0.doMain(stringArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Usage problems: argument should be in 'hostname:port' format, not: Jmx: attrs java.lang:type=Memory
         //
         verifyException("com.j256.simplejmx.client.Main", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Main main0 = new Main();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--usage";
      main0.doMain(stringArray0, false);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "+Ka`p:soP)";
      Main.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "+Ka`p/sWP)";
      try { 
        Main.main(stringArray0);
        fail("Expecting exception: JMException");
      
      } catch(JMException e) {
         //
         // JmxServiceUrl was malformed: +Ka`p/sWP)
         //
         verifyException("com.j256.simplejmx.client.JmxClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "service:jmx:rmi:///jndi/rmi://";
      try { 
        Main.main(stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.sun.jndi.rmi.registry.RegistryContext cannot be cast to class javax.management.remote.rmi.RMIServer (com.sun.jndi.rmi.registry.RegistryContext is in module jdk.naming.rmi of loader 'bootstrap'; javax.management.remote.rmi.RMIServer is in module java.management.rmi of loader 'bootstrap')
         //
         verifyException("javax.management.remote.rmi.RMIConnector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Main main0 = new Main();
      try { 
        main0.doMain(stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.client.Main", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Main main0 = new Main();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "service:jmx:rmi:///jndi/rmi://";
      try { 
        main0.doMain(stringArray0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.sun.jndi.rmi.registry.RegistryContext cannot be cast to class javax.management.remote.rmi.RMIServer (com.sun.jndi.rmi.registry.RegistryContext is in module jdk.naming.rmi of loader 'bootstrap'; javax.management.remote.rmi.RMIServer is in module java.management.rmi of loader 'bootstrap')
         //
         verifyException("javax.management.remote.rmi.RMIConnector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Main main0 = new Main();
      String[] stringArray0 = new String[6];
      try { 
        main0.doMain(stringArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Usage problems: improper number of arguments:[null, null, null, null, null, null]
         //
         verifyException("com.j256.simplejmx.client.Main", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "H";
      Main.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Main main0 = new Main();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/1u)]gfZjVrbP^hJl/";
      try { 
        main0.doMain(stringArray0, true);
        fail("Expecting exception: JMException");
      
      } catch(JMException e) {
         //
         // JmxServiceUrl was malformed: /1u)]gfZjVrbP^hJl/
         //
         verifyException("com.j256.simplejmx.client.JmxClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String[] stringArray0 = new String[1];
          stringArray0[0] = "DoA2r:3";
          try { 
            Main.main(stringArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"DoA2r\" \"resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkConnect(SecurityManager.java:821)
             // java.base/java.net.InetAddress.getAllByName0(InetAddress.java:1467)
             // java.base/java.net.InetAddress.getAllByName(InetAddress.java:1378)
             // java.base/java.net.InetAddress.getAllByName(InetAddress.java:1306)
             // java.base/java.net.InetAddress.getByName(InetAddress.java:1256)
             // java.base/java.net.InetSocketAddress.<init>(InetSocketAddress.java:220)
             // java.base/java.net.Socket.<init>(Socket.java:231)
             // java.rmi/sun.rmi.transport.tcp.TCPDirectSocketFactory.createSocket(TCPDirectSocketFactory.java:40)
             // java.rmi/sun.rmi.transport.tcp.TCPEndpoint.newSocket(TCPEndpoint.java:617)
             // java.rmi/sun.rmi.transport.tcp.TCPChannel.createConnection(TCPChannel.java:209)
             // java.rmi/sun.rmi.transport.tcp.TCPChannel.newConnection(TCPChannel.java:196)
             // java.rmi/sun.rmi.server.UnicastRef.newCall(UnicastRef.java:343)
             // java.rmi/sun.rmi.registry.RegistryImpl_Stub.lookup(RegistryImpl_Stub.java:116)
             // jdk.naming.rmi/com.sun.jndi.rmi.registry.RegistryContext.lookup(RegistryContext.java:133)
             // java.naming/com.sun.jndi.toolkit.url.GenericURLContext.lookup(GenericURLContext.java:220)
             // java.naming/javax.naming.InitialContext.lookup(InitialContext.java:409)
             // java.management.rmi/javax.management.remote.rmi.RMIConnector.findRMIServerJNDI(RMIConnector.java:1839)
             // java.management.rmi/javax.management.remote.rmi.RMIConnector.findRMIServer(RMIConnector.java:1813)
             // java.management.rmi/javax.management.remote.rmi.RMIConnector.connect(RMIConnector.java:302)
             // java.management/javax.management.remote.JMXConnectorFactory.connect(JMXConnectorFactory.java:270)
             // com.j256.simplejmx.client.JmxClient.<init>(JmxClient.java:154)
             // com.j256.simplejmx.client.JmxClient.<init>(JmxClient.java:107)
             // com.j256.simplejmx.client.CommandLineJmxClient.<init>(CommandLineJmxClient.java:63)
             // com.j256.simplejmx.client.Main.doMain(Main.java:60)
             // com.j256.simplejmx.client.Main.main(Main.java:19)
             // jdk.internal.reflect.GeneratedMethodAccessor15.invoke(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--help";
      Main.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      try { 
        Main.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.client.Main", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Main.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Main.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }
}
