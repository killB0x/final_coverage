/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 10:28:18 GMT 2022
 */

package com.j256.simplejmx.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplejmx.client.ClientUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClientUtils_ESTest extends ClientUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      try { 
        ClientUtils.stringToParam("Un", "java.lang.Integer");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Un\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        ClientUtils.stringToParam("HN,E=B", "byte");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"HN,E=B\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      try { 
        ClientUtils.stringToParam("pOfNnJ!?2)WY", "pOfNnJ!?2)WY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class for type pOfNnJ!?2)WY
         //
         verifyException("com.j256.simplejmx.client.ClientUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = ClientUtils.stringToParam((String) null, "java.lang.String");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClientUtils.stringToParam((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = ClientUtils.displayType("javax.management.openmbean.", (Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = ClientUtils.displayType("java.lang.Short", "java.lang.Short");
      assertEquals("Short", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClientUtils.displayType("[L", "[L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = ClientUtils.stringToParam("char", "char");
      assertEquals('c', object0);
      
      String string0 = ClientUtils.displayType("[J", object0);
      assertEquals("array of unknown", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = ClientUtils.displayType("[J", (Object) null);
      assertEquals("array of unknown", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = ClientUtils.displayType((String) null, (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClientUtils clientUtils0 = new ClientUtils();
      String string0 = ClientUtils.displayType("", clientUtils0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = ClientUtils.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      try { 
        ClientUtils.stringToParam("java.lang.Double", "java.lang.Double");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      try { 
        ClientUtils.stringToParam("double", "double");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      try { 
        ClientUtils.stringToParam("rKu2h_kb1)($P", "java.lang.Float");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      try { 
        ClientUtils.stringToParam("float", "float");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = ClientUtils.stringToParam("java.lang.Short", "java.lang.String");
      assertEquals("java.lang.Short", object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      try { 
        ClientUtils.stringToParam("java.lang.Long", "java.lang.Long");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Long\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      try { 
        ClientUtils.stringToParam(" ?1^%{BtY*h}Ijhv\"H", "long");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" ?1^%{BtY*h}Ijhv\"H\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      try { 
        ClientUtils.stringToParam("int", "int");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      try { 
        ClientUtils.stringToParam((String) null, "java.lang.Short");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      try { 
        ClientUtils.stringToParam("short", "short");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"short\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      try { 
        ClientUtils.stringToParam("java.lang.Byte", "java.lang.Byte");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Byte\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = ClientUtils.stringToParam("java.lang.qG%p3M", "java.lang.Character");
      assertEquals('j', object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = ClientUtils.stringToParam("", "char");
      assertEquals('\u0000', object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = ClientUtils.stringToParam("java.lang.Integer", "java.lang.Boolean");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = ClientUtils.stringToParam("boolean", "boolean");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      try { 
        ClientUtils.stringToParam("com.j256.simplejmx.client.ClientUtils", "com.j256.simplejmx.client.ClientUtils");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find constructor with single String argument for class com.j256.simplejmx.client.ClientUtils
         //
         verifyException("com.j256.simplejmx.client.ClientUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClientUtils clientUtils0 = new ClientUtils();
      String string0 = ClientUtils.valueToString(clientUtils0);
      assertNotNull(string0);
  }
}
