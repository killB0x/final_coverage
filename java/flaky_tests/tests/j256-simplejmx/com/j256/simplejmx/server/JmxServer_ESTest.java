/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 10:31:37 GMT 2022
 */

package com.j256.simplejmx.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplejmx.common.JmxAttributeField;
import com.j256.simplejmx.common.JmxAttributeFieldInfo;
import com.j256.simplejmx.common.JmxAttributeMethodInfo;
import com.j256.simplejmx.common.JmxFolderName;
import com.j256.simplejmx.common.JmxOperationInfo;
import com.j256.simplejmx.common.JmxResourceInfo;
import com.j256.simplejmx.server.JmxServer;
import com.j256.simplejmx.server.PublishAllBeanWrapper;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.management.InstanceNotFoundException;
import javax.management.JMException;
import javax.management.MBeanServer;
import javax.management.ObjectInstance;
import javax.management.ObjectName;
import javax.management.RuntimeOperationsException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JmxServer_ESTest extends JmxServer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectName objectName0 = new ObjectName(" hV}y,_ruya{uYIJ_", "w", "xu||U");
      MBeanServer mBeanServer0 = mock(MBeanServer.class, new ViolatedAssumptionAnswer());
      JmxServer jmxServer0 = new JmxServer(mBeanServer0);
      jmxServer0.unregisterThrow(objectName0);
      assertEquals((-1), jmxServer0.getRegisteredCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      JmxServer.LocalSocketFactory jmxServer_LocalSocketFactory0 = new JmxServer.LocalSocketFactory(inetAddress0);
      ServerSocket serverSocket0 = jmxServer_LocalSocketFactory0.createServerSocket((byte)41);
      assertEquals("ServerSocket[addr=null,localport=41]", serverSocket0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      ObjectName objectName0 = ObjectName.WILDCARD;
      jmxServer0.unregister(objectName0);
      assertEquals(0, jmxServer0.getRegisteredCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MBeanServer mBeanServer0 = mock(MBeanServer.class, new ViolatedAssumptionAnswer());
      JmxServer jmxServer0 = new JmxServer(mBeanServer0);
      PublishAllBeanWrapper publishAllBeanWrapper0 = new PublishAllBeanWrapper();
      String[] stringArray0 = new String[2];
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo("", "", stringArray0, "oF79S'u}/:]a~1IJX");
      PublishAllBeanWrapper publishAllBeanWrapper1 = new PublishAllBeanWrapper(publishAllBeanWrapper0, jmxResourceInfo0);
      jmxServer0.unregister((Object) publishAllBeanWrapper1);
      assertEquals((-1), jmxServer0.getRegisteredCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MBeanServer mBeanServer0 = mock(MBeanServer.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectInstance) null, (ObjectInstance) null).when(mBeanServer0).registerMBean(any() , any(javax.management.ObjectName.class));
      JmxServer jmxServer0 = new JmxServer(mBeanServer0);
      Object object0 = new Object();
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo("", "", "");
      PublishAllBeanWrapper publishAllBeanWrapper0 = new PublishAllBeanWrapper(object0, jmxResourceInfo0);
      ObjectName objectName0 = jmxServer0.register((Object) jmxResourceInfo0);
      JmxAttributeFieldInfo[] jmxAttributeFieldInfoArray0 = new JmxAttributeFieldInfo[5];
      JmxAttributeField jmxAttributeField0 = mock(JmxAttributeField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jmxAttributeField0).description();
      doReturn(false).when(jmxAttributeField0).isReadible();
      doReturn(false).when(jmxAttributeField0).isWritable();
      JmxAttributeFieldInfo jmxAttributeFieldInfo0 = new JmxAttributeFieldInfo("", jmxAttributeField0);
      jmxAttributeFieldInfoArray0[0] = jmxAttributeFieldInfo0;
      jmxAttributeFieldInfoArray0[1] = jmxAttributeFieldInfoArray0[0];
      jmxAttributeFieldInfoArray0[2] = jmxAttributeFieldInfo0;
      jmxAttributeFieldInfoArray0[3] = jmxAttributeFieldInfo0;
      jmxAttributeFieldInfoArray0[4] = jmxAttributeFieldInfoArray0[3];
      JmxOperationInfo[] jmxOperationInfoArray0 = new JmxOperationInfo[0];
      jmxServer0.register((Object) publishAllBeanWrapper0, objectName0, jmxAttributeFieldInfoArray0, (JmxAttributeMethodInfo[]) null, jmxOperationInfoArray0);
      assertEquals(2, jmxServer0.getRegisteredCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      JmxServer jmxServer0 = new JmxServer(true);
      ObjectName objectName0 = ObjectName.WILDCARD;
      JmxAttributeMethodInfo jmxAttributeMethodInfo0 = new JmxAttributeMethodInfo();
      JmxAttributeMethodInfo[] jmxAttributeMethodInfoArray0 = new JmxAttributeMethodInfo[3];
      jmxAttributeMethodInfoArray0[0] = jmxAttributeMethodInfo0;
      jmxAttributeMethodInfoArray0[1] = jmxAttributeMethodInfo0;
      jmxAttributeMethodInfoArray0[2] = jmxAttributeMethodInfo0;
      try { 
        jmxServer0.register(object0, objectName0, (String) null, (JmxAttributeFieldInfo[]) null, jmxAttributeMethodInfoArray0, (JmxOperationInfo[]) null);
        fail("Expecting exception: JMException");
      
      } catch(JMException e) {
         //
         // Registering JMX object *:* failed
         //
         verifyException("com.j256.simplejmx.server.JmxServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      Object object0 = new Object();
      JmxFolderName[] jmxFolderNameArray0 = new JmxFolderName[0];
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo("JS", "JS", jmxFolderNameArray0, "");
      JmxAttributeFieldInfo[] jmxAttributeFieldInfoArray0 = new JmxAttributeFieldInfo[9];
      JmxAttributeMethodInfo[] jmxAttributeMethodInfoArray0 = new JmxAttributeMethodInfo[4];
      JmxOperationInfo[] jmxOperationInfoArray0 = new JmxOperationInfo[1];
      try { 
        jmxServer0.register(object0, jmxResourceInfo0, jmxAttributeFieldInfoArray0, jmxAttributeMethodInfoArray0, jmxOperationInfoArray0);
        fail("Expecting exception: JMException");
      
      } catch(JMException e) {
         //
         // JmxServer has not be started
         //
         verifyException("com.j256.simplejmx.server.JmxServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer((-1311), (-1));
      int int0 = jmxServer0.getServerPort();
      assertEquals((-1311), jmxServer0.getRegistryPort());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer((InetAddress) null, (-2731), (-2731));
      int int0 = jmxServer0.getRegistryPort();
      assertEquals((-2731), jmxServer0.getServerPort());
      assertEquals((-2731), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MBeanServer mBeanServer0 = mock(MBeanServer.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectInstance) null).when(mBeanServer0).registerMBean(any() , any(javax.management.ObjectName.class));
      JmxServer jmxServer0 = new JmxServer(mBeanServer0);
      JmxFolderName[] jmxFolderNameArray0 = new JmxFolderName[2];
      JmxFolderName jmxFolderName0 = new JmxFolderName("");
      jmxFolderNameArray0[0] = jmxFolderName0;
      jmxFolderNameArray0[1] = jmxFolderNameArray0[0];
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo("", "", jmxFolderNameArray0, "");
      PublishAllBeanWrapper publishAllBeanWrapper0 = new PublishAllBeanWrapper(jmxServer0, jmxResourceInfo0);
      jmxServer0.register(publishAllBeanWrapper0);
      int int0 = jmxServer0.getRegisteredCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer(true);
      // Undeclared exception!
      try { 
        jmxServer0.unregisterThrow((ObjectName) null);
        fail("Expecting exception: RuntimeOperationsException");
      
      } catch(RuntimeOperationsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      // Undeclared exception!
      try { 
        jmxServer0.unregisterThrow((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.common.ObjectNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer((-23), (-23));
      // Undeclared exception!
      try { 
        jmxServer0.start();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port value out of range: -23
         //
         verifyException("java.net.ServerSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      ObjectName objectName0 = ObjectName.WILDCARD;
      JmxAttributeFieldInfo[] jmxAttributeFieldInfoArray0 = new JmxAttributeFieldInfo[0];
      // Undeclared exception!
      try { 
        jmxServer0.register((Object) null, objectName0, jmxAttributeFieldInfoArray0, (JmxAttributeMethodInfo[]) null, (JmxOperationInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.server.JmxServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      ObjectName objectName0 = ObjectName.WILDCARD;
      JmxAttributeMethodInfo[] jmxAttributeMethodInfoArray0 = new JmxAttributeMethodInfo[1];
      JmxAttributeFieldInfo[] jmxAttributeFieldInfoArray0 = new JmxAttributeFieldInfo[10];
      // Undeclared exception!
      try { 
        jmxServer0.register((Object) objectName0, (JmxResourceInfo) null, jmxAttributeFieldInfoArray0, jmxAttributeMethodInfoArray0, (JmxOperationInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.common.ObjectNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer(true);
      // Undeclared exception!
      try { 
        jmxServer0.register((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.common.ObjectNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      JmxServer jmxServer0 = new JmxServer(true);
      // Undeclared exception!
      try { 
        jmxServer0.register(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Registered class must either implement JmxSelfNaming or have JmxResource annotation
         //
         verifyException("com.j256.simplejmx.common.ObjectNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      // Undeclared exception!
      try { 
        jmxServer0.register((PublishAllBeanWrapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.server.JmxServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo();
      PublishAllBeanWrapper publishAllBeanWrapper0 = new PublishAllBeanWrapper(jmxServer0, jmxResourceInfo0);
      // Undeclared exception!
      try { 
        jmxServer0.register(publishAllBeanWrapper0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not create ObjectName because domain name not specified in getJmxDomainName() nor @JmxResource
         //
         verifyException("com.j256.simplejmx.common.ObjectNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      try { 
        jmxServer0.unregisterThrow((ObjectName) null);
        fail("Expecting exception: JMException");
      
      } catch(JMException e) {
         //
         // JmxServer has not be started
         //
         verifyException("com.j256.simplejmx.server.JmxServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      // Undeclared exception!
      try { 
        jmxServer0.unregisterThrow((Object) jmxServer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Registered class must either implement JmxSelfNaming or have JmxResource annotation
         //
         verifyException("com.j256.simplejmx.common.ObjectNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      JmxServer jmxServer0 = new JmxServer(true);
      ObjectName objectName0 = ObjectName.WILDCARD;
      JmxAttributeMethodInfo[] jmxAttributeMethodInfoArray0 = new JmxAttributeMethodInfo[3];
      try { 
        jmxServer0.register(object0, objectName0, (String) null, (JmxAttributeFieldInfo[]) null, jmxAttributeMethodInfoArray0, (JmxOperationInfo[]) null);
        fail("Expecting exception: JMException");
      
      } catch(JMException e) {
         //
         // Could not build MBean object for: java.lang.Object@2e11eab4
         //
         verifyException("com.j256.simplejmx.server.JmxServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      Object object0 = new Object();
      ObjectName objectName0 = ObjectName.WILDCARD;
      JmxAttributeFieldInfo[] jmxAttributeFieldInfoArray0 = new JmxAttributeFieldInfo[1];
      JmxAttributeMethodInfo[] jmxAttributeMethodInfoArray0 = new JmxAttributeMethodInfo[0];
      try { 
        jmxServer0.register(object0, objectName0, "", jmxAttributeFieldInfoArray0, jmxAttributeMethodInfoArray0, (JmxOperationInfo[]) null);
        fail("Expecting exception: JMException");
      
      } catch(JMException e) {
         //
         // JmxServer has not be started
         //
         verifyException("com.j256.simplejmx.server.JmxServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      JmxServer jmxServer0 = new JmxServer(inetAddress0, 2534);
      jmxServer0.stopThrow();
      assertEquals(2534, jmxServer0.getRegistryPort());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer(1347);
      jmxServer0.setRegistryPort(1347);
      assertEquals(1347, jmxServer0.getRegistryPort());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      JmxServer.LocalSocketFactory jmxServer_LocalSocketFactory0 = new JmxServer.LocalSocketFactory(inetAddress0);
      Object object0 = new Object();
      boolean boolean0 = jmxServer_LocalSocketFactory0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JmxServer.LocalSocketFactory jmxServer_LocalSocketFactory0 = new JmxServer.LocalSocketFactory((InetAddress) null);
      boolean boolean0 = jmxServer_LocalSocketFactory0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      jmxServer0.setUsePlatformMBeanServer(true);
      assertEquals(0, jmxServer0.getRegisteredCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      jmxServer0.setUsePlatformMBeanServer(false);
      assertEquals(0, jmxServer0.getRegisteredCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      int int0 = jmxServer0.getServerPort();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer((-1), 386);
      int int0 = jmxServer0.getServerPort();
      assertEquals(386, int0);
      assertEquals((-1), jmxServer0.getRegistryPort());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo("", "Q%3", "Q%3");
      PublishAllBeanWrapper publishAllBeanWrapper0 = new PublishAllBeanWrapper("", jmxResourceInfo0);
      try { 
        jmxServer0.unregisterThrow((Object) publishAllBeanWrapper0);
        fail("Expecting exception: JMException");
      
      } catch(JMException e) {
         //
         // JmxServer has not be started
         //
         verifyException("com.j256.simplejmx.server.JmxServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MBeanServer mBeanServer0 = mock(MBeanServer.class, new ViolatedAssumptionAnswer());
      JmxServer jmxServer0 = new JmxServer(mBeanServer0);
      Object object0 = new Object();
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo("' has a name that is too short", "' has a name that is too short", "F*gj)jY");
      PublishAllBeanWrapper publishAllBeanWrapper0 = new PublishAllBeanWrapper(object0, jmxResourceInfo0);
      jmxServer0.unregisterThrow((Object) publishAllBeanWrapper0);
      assertEquals((-1), jmxServer0.getRegisteredCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      ObjectName objectName0 = ObjectName.WILDCARD;
      JmxAttributeMethodInfo[] jmxAttributeMethodInfoArray0 = new JmxAttributeMethodInfo[1];
      JmxAttributeFieldInfo[] jmxAttributeFieldInfoArray0 = new JmxAttributeFieldInfo[8];
      try { 
        jmxServer0.register((Object) objectName0, objectName0, jmxAttributeFieldInfoArray0, jmxAttributeMethodInfoArray0, (JmxOperationInfo[]) null);
        fail("Expecting exception: JMException");
      
      } catch(JMException e) {
         //
         // JmxServer has not be started
         //
         verifyException("com.j256.simplejmx.server.JmxServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      try { 
        jmxServer0.register((Object) jmxServer0);
        fail("Expecting exception: JMException");
      
      } catch(JMException e) {
         //
         // JmxServer has not be started
         //
         verifyException("com.j256.simplejmx.server.JmxServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      // Undeclared exception!
      try { 
        jmxServer0.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // registry-port must be already set when JmxServer is initialized
         //
         verifyException("com.j256.simplejmx.server.JmxServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MBeanServer mBeanServer0 = mock(MBeanServer.class, new ViolatedAssumptionAnswer());
      JmxServer jmxServer0 = new JmxServer(mBeanServer0);
      jmxServer0.start();
      assertEquals(0, jmxServer0.getServerPort());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          InetAddress inetAddress0 = MockInetAddress.getLocalHost();
          JmxServer jmxServer0 = new JmxServer(inetAddress0, 2534);
          // Undeclared exception!
          try { 
            jmxServer0.start();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"localhost:2534\" \"listen,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkListen(SecurityManager.java:904)
             // java.rmi/sun.rmi.transport.tcp.TCPTransport.listen(TCPTransport.java:344)
             // java.rmi/sun.rmi.transport.tcp.TCPTransport.exportObject(TCPTransport.java:243)
             // java.rmi/sun.rmi.transport.tcp.TCPEndpoint.exportObject(TCPEndpoint.java:412)
             // java.rmi/sun.rmi.transport.LiveRef.exportObject(LiveRef.java:147)
             // java.rmi/sun.rmi.server.UnicastServerRef.exportObject(UnicastServerRef.java:234)
             // java.rmi/sun.rmi.registry.RegistryImpl.setup(RegistryImpl.java:220)
             // java.rmi/sun.rmi.registry.RegistryImpl.<init>(RegistryImpl.java:180)
             // java.rmi/sun.rmi.registry.RegistryImpl.<init>(RegistryImpl.java:151)
             // java.rmi/java.rmi.registry.LocateRegistry.createRegistry(LocateRegistry.java:239)
             // com.j256.simplejmx.server.JmxServer.startRmiRegistry(JmxServer.java:511)
             // com.j256.simplejmx.server.JmxServer.start(JmxServer.java:158)
             // jdk.internal.reflect.GeneratedMethodAccessor123.invoke(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer(true);
      ObjectName objectName0 = ObjectName.WILDCARD;
      try { 
        jmxServer0.unregisterThrow(objectName0);
        fail("Expecting exception: InstanceNotFoundException");
      
      } catch(InstanceNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer(false);
      jmxServer0.setPort(1);
      int int0 = jmxServer0.getRegistryPort();
      assertEquals(1, jmxServer0.getServerPort());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      Object object0 = new Object();
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo();
      // Undeclared exception!
      try { 
        jmxServer0.register(object0, jmxResourceInfo0, (JmxAttributeFieldInfo[]) null, (JmxAttributeMethodInfo[]) null, (JmxOperationInfo[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not create ObjectName because domain name not specified in getJmxDomainName() nor @JmxResource
         //
         verifyException("com.j256.simplejmx.common.ObjectNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
          JmxServer jmxServer0 = new JmxServer(inetAddress0, 319);
          JmxServer.LocalSocketFactory jmxServer_LocalSocketFactory0 = new JmxServer.LocalSocketFactory((InetAddress) null);
          jmxServer0.setServerSocketFactory(jmxServer_LocalSocketFactory0);
          // Undeclared exception!
          try { 
            jmxServer0.start();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"localhost:319\" \"listen,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkListen(SecurityManager.java:904)
             // java.rmi/sun.rmi.transport.tcp.TCPTransport.listen(TCPTransport.java:344)
             // java.rmi/sun.rmi.transport.tcp.TCPTransport.exportObject(TCPTransport.java:243)
             // java.rmi/sun.rmi.transport.tcp.TCPEndpoint.exportObject(TCPEndpoint.java:412)
             // java.rmi/sun.rmi.transport.LiveRef.exportObject(LiveRef.java:147)
             // java.rmi/sun.rmi.server.UnicastServerRef.exportObject(UnicastServerRef.java:234)
             // java.rmi/sun.rmi.registry.RegistryImpl.setup(RegistryImpl.java:220)
             // java.rmi/sun.rmi.registry.RegistryImpl.<init>(RegistryImpl.java:180)
             // java.rmi/sun.rmi.registry.RegistryImpl.<init>(RegistryImpl.java:151)
             // java.rmi/java.rmi.registry.LocateRegistry.createRegistry(LocateRegistry.java:239)
             // com.j256.simplejmx.server.JmxServer.startRmiRegistry(JmxServer.java:511)
             // com.j256.simplejmx.server.JmxServer.start(JmxServer.java:158)
             // jdk.internal.reflect.GeneratedMethodAccessor123.invoke(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      jmxServer0.setServerPort((-1598));
      assertEquals((-1598), jmxServer0.getServerPort());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      JmxServer jmxServer0 = new JmxServer(inetAddress0, 2534);
      jmxServer0.setServiceUrl("[]_U<5O");
      assertEquals(2534, jmxServer0.getRegistryPort());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      int int0 = jmxServer0.getRegistryPort();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo("com.j256.simplejmx.server.JmxServer$LocalSocketFactory", "com.j256.simplejmx.server.JmxServer$LocalSocketFactory", "com.j256.simplejmx.server.JmxServer$LocalSocketFactory");
      PublishAllBeanWrapper publishAllBeanWrapper0 = new PublishAllBeanWrapper(jmxServer0, jmxResourceInfo0);
      try { 
        jmxServer0.register(publishAllBeanWrapper0);
        fail("Expecting exception: JMException");
      
      } catch(JMException e) {
         //
         // Registering JMX object com.j256.simplejmx.server.JmxServer$LocalSocketFactory:name=com.j256.simplejmx.server.JmxServer$LocalSocketFactory failed
         //
         verifyException("com.j256.simplejmx.server.JmxServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer();
      jmxServer0.stop();
      ObjectName objectName0 = ObjectName.getInstance("", "get", "get");
      ObjectName objectName1 = ObjectName.getInstance(objectName0);
      ObjectName objectName2 = ObjectName.getInstance(objectName1);
      JmxServer jmxServer1 = new JmxServer((-1), 386);
      jmxServer1.setUsePlatformMBeanServer(true);
      PublishAllBeanWrapper publishAllBeanWrapper0 = new PublishAllBeanWrapper();
      JmxOperationInfo[] jmxOperationInfoArray0 = new JmxOperationInfo[8];
      JmxOperationInfo jmxOperationInfo0 = new JmxOperationInfo("");
      jmxOperationInfoArray0[0] = jmxOperationInfo0;
      jmxOperationInfoArray0[1] = jmxOperationInfo0;
      jmxOperationInfoArray0[2] = jmxOperationInfoArray0[0];
      jmxOperationInfoArray0[3] = jmxOperationInfo0;
      jmxOperationInfoArray0[4] = jmxOperationInfo0;
      jmxOperationInfoArray0[5] = jmxOperationInfoArray0[1];
      jmxOperationInfoArray0[6] = jmxOperationInfoArray0[0];
      jmxOperationInfoArray0[7] = jmxOperationInfo0;
      try { 
        jmxServer1.register((Object) publishAllBeanWrapper0, objectName2, "get", (JmxAttributeFieldInfo[]) null, (JmxAttributeMethodInfo[]) null, jmxOperationInfoArray0);
        fail("Expecting exception: JMException");
      
      } catch(JMException e) {
         //
         // Registering JMX object :get=get failed
         //
         verifyException("com.j256.simplejmx.server.JmxServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MBeanServer mBeanServer0 = mock(MBeanServer.class, new ViolatedAssumptionAnswer());
      JmxServer jmxServer0 = new JmxServer(mBeanServer0);
      jmxServer0.close();
      assertEquals(0, jmxServer0.getRegisteredCount());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      JmxServer jmxServer0 = new JmxServer(inetAddress0, 35, (-2604));
      assertEquals(35, jmxServer0.getRegistryPort());
      assertEquals((-2604), jmxServer0.getServerPort());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      JmxServer jmxServer0 = new JmxServer(inetAddress0, 2534);
      jmxServer0.setInetAddress(inetAddress0);
      assertEquals(2534, jmxServer0.getRegistryPort());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JmxServer jmxServer0 = new JmxServer((-553), (-768));
      Object object0 = new Object();
      jmxServer0.unregister(object0);
      assertEquals((-768), jmxServer0.getServerPort());
      assertEquals((-553), jmxServer0.getRegistryPort());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MBeanServer mBeanServer0 = mock(MBeanServer.class, new ViolatedAssumptionAnswer());
      JmxServer jmxServer0 = new JmxServer(mBeanServer0);
      int int0 = jmxServer0.getRegisteredCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MBeanServer mBeanServer0 = mock(MBeanServer.class, new ViolatedAssumptionAnswer());
      JmxServer jmxServer0 = new JmxServer(mBeanServer0);
      jmxServer0.unregister((ObjectName) null);
      int int0 = jmxServer0.getRegisteredCount();
      assertEquals((-1), int0);
  }
}
