/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 10:23:24 GMT 2022
 */

package com.j256.simplejmx.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplejmx.common.JmxAttributeField;
import com.j256.simplejmx.common.JmxAttributeFieldInfo;
import com.j256.simplejmx.common.JmxAttributeMethodInfo;
import com.j256.simplejmx.common.JmxOperationInfo;
import com.j256.simplejmx.common.JmxResourceInfo;
import com.j256.simplejmx.server.PublishAllBeanWrapper;
import com.j256.simplejmx.server.ReflectionMbean;
import javax.management.Attribute;
import javax.management.AttributeList;
import javax.management.AttributeNotFoundException;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.ReflectionException;
import javax.management.RuntimeOperationsException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReflectionMbean_ESTest extends ReflectionMbean_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JmxOperationInfo.OperationAction jmxOperationInfo_OperationAction0 = JmxOperationInfo.OperationAction.ACTION;
      JmxOperationInfo jmxOperationInfo0 = new JmxOperationInfo("get", stringArray0, stringArray0, jmxOperationInfo_OperationAction0, "com.j256.simplejmx.server.ReflectionMbean");
      JmxOperationInfo jmxOperationInfo1 = new JmxOperationInfo("wait");
      JmxAttributeFieldInfo jmxAttributeFieldInfo0 = new JmxAttributeFieldInfo("0y#x:FIw4{gQ&~o3", true, true, "get");
      jmxOperationInfo1.setParameterNames(stringArray0);
      JmxOperationInfo[] jmxOperationInfoArray0 = new JmxOperationInfo[4];
      jmxOperationInfoArray0[0] = jmxOperationInfo1;
      jmxOperationInfoArray0[1] = jmxOperationInfo1;
      jmxOperationInfoArray0[2] = jmxOperationInfoArray0[1];
      jmxOperationInfoArray0[3] = jmxOperationInfo0;
      ReflectionMbean reflectionMbean0 = new ReflectionMbean(jmxAttributeFieldInfo0, "Getting attribute threw: ", (JmxAttributeFieldInfo[]) null, (JmxAttributeMethodInfo[]) null, jmxOperationInfoArray0, true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JmxAttributeField jmxAttributeField0 = mock(JmxAttributeField.class, new ViolatedAssumptionAnswer());
      doReturn("p").when(jmxAttributeField0).description();
      doReturn(true).when(jmxAttributeField0).isReadible();
      doReturn(true).when(jmxAttributeField0).isWritable();
      JmxAttributeFieldInfo[] jmxAttributeFieldInfoArray0 = new JmxAttributeFieldInfo[1];
      JmxAttributeFieldInfo jmxAttributeFieldInfo0 = new JmxAttributeFieldInfo("mockitoInterceptor", jmxAttributeField0);
      jmxAttributeFieldInfoArray0[0] = jmxAttributeFieldInfo0;
      JmxAttributeMethodInfo[] jmxAttributeMethodInfoArray0 = new JmxAttributeMethodInfo[1];
      JmxAttributeMethodInfo jmxAttributeMethodInfo0 = new JmxAttributeMethodInfo();
      jmxAttributeMethodInfoArray0[0] = jmxAttributeMethodInfo0;
      JmxOperationInfo[] jmxOperationInfoArray0 = new JmxOperationInfo[6];
      JmxOperationInfo jmxOperationInfo0 = new JmxOperationInfo();
      jmxOperationInfoArray0[0] = jmxOperationInfo0;
      jmxOperationInfoArray0[1] = jmxOperationInfo0;
      jmxOperationInfoArray0[2] = jmxOperationInfo0;
      jmxOperationInfoArray0[3] = jmxOperationInfo0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "mockitoInterceptor";
      stringArray0[1] = "oSH62I3F1# kC*3)lZ\"";
      stringArray0[2] = "oSH62I3F1# kC*3)lZ\"";
      stringArray0[3] = "mockitoInterceptor";
      jmxOperationInfoArray0[4] = jmxOperationInfoArray0[0];
      jmxOperationInfoArray0[5] = jmxOperationInfo0;
      ReflectionMbean reflectionMbean0 = new ReflectionMbean(jmxAttributeField0, "is", jmxAttributeFieldInfoArray0, jmxAttributeMethodInfoArray0, jmxOperationInfoArray0, true);
      AttributeList attributeList0 = reflectionMbean0.getAttributes(stringArray0);
      AttributeList attributeList1 = reflectionMbean0.setAttributes(attributeList0);
      assertFalse(attributeList1.equals((Object)attributeList0));
      assertNotSame(attributeList1, attributeList0);
      assertEquals(4, attributeList1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReflectionMbean reflectionMbean0 = new ReflectionMbean("serialVersionUID", "serialVersionUID");
      AttributeList attributeList0 = new AttributeList();
      AttributeList attributeList1 = reflectionMbean0.setAttributes(attributeList0);
      assertNotSame(attributeList1, attributeList0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo();
      JmxAttributeField jmxAttributeField0 = mock(JmxAttributeField.class, new ViolatedAssumptionAnswer());
      PublishAllBeanWrapper publishAllBeanWrapper0 = new PublishAllBeanWrapper(jmxAttributeField0, jmxResourceInfo0);
      ReflectionMbean reflectionMbean0 = new ReflectionMbean(publishAllBeanWrapper0);
      Object object0 = reflectionMbean0.getAttribute("mockitoInterceptor");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      ReflectionMbean reflectionMbean0 = new ReflectionMbean(object0, "cachedValue$LHpM0iYa$rf9l333");
      // Undeclared exception!
      try { 
        reflectionMbean0.setAttributes((AttributeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.server.ReflectionMbean", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReflectionMbean reflectionMbean0 = new ReflectionMbean("nkj", "nkj");
      AttributeList attributeList0 = new AttributeList();
      Object object0 = new Object();
      attributeList0.add(object0);
      // Undeclared exception!
      try { 
        reflectionMbean0.setAttributes(attributeList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an Attribute: java.lang.Object@40c2ee16
         //
         verifyException("javax.management.AttributeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo();
      PublishAllBeanWrapper publishAllBeanWrapper0 = new PublishAllBeanWrapper(jmxResourceInfo0, jmxResourceInfo0);
      ReflectionMbean reflectionMbean0 = new ReflectionMbean(publishAllBeanWrapper0);
      Object object0 = new Object();
      Attribute attribute0 = new Attribute("jmxDescription", object0);
      try { 
        reflectionMbean0.setAttribute(attribute0);
        fail("Expecting exception: ReflectionException");
      
      } catch(ReflectionException e) {
         //
         // Invoking setter attribute method setJmxDescription on class com.j256.simplejmx.common.JmxResourceInfo threw exception
         //
         verifyException("com.j256.simplejmx.server.ReflectionMbean", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReflectionMbean reflectionMbean0 = new ReflectionMbean("com.j256.simplejmx.server.eflectinMbean", "com.j256.simplejmx.server.eflectinMbean");
      // Undeclared exception!
      try { 
        reflectionMbean0.setAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.server.ReflectionMbean", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[7];
      Object object0 = new Object();
      ReflectionMbean reflectionMbean0 = new ReflectionMbean(object0, (String) null);
      // Undeclared exception!
      try { 
        reflectionMbean0.invoke((String) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.server.ReflectionMbean$NameParams", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReflectionMbean reflectionMbean0 = new ReflectionMbean("lOC|0~_]?uTcUW(^", "lOC|0~_]?uTcUW(^");
      // Undeclared exception!
      try { 
        reflectionMbean0.getAttributes((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.server.ReflectionMbean", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JmxAttributeMethodInfo[] jmxAttributeMethodInfoArray0 = new JmxAttributeMethodInfo[2];
      JmxOperationInfo[] jmxOperationInfoArray0 = new JmxOperationInfo[0];
      ReflectionMbean reflectionMbean0 = null;
      try {
        reflectionMbean0 = new ReflectionMbean((Object) null, (String) null, (JmxAttributeFieldInfo[]) null, jmxAttributeMethodInfoArray0, jmxOperationInfoArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.server.ReflectionMbean", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReflectionMbean reflectionMbean0 = null;
      try {
        reflectionMbean0 = new ReflectionMbean((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.server.ReflectionMbean", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PublishAllBeanWrapper publishAllBeanWrapper0 = new PublishAllBeanWrapper();
      ReflectionMbean reflectionMbean0 = null;
      try {
        reflectionMbean0 = new ReflectionMbean(publishAllBeanWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.server.PublishAllBeanWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JmxAttributeMethodInfo[] jmxAttributeMethodInfoArray0 = new JmxAttributeMethodInfo[2];
      JmxAttributeMethodInfo jmxAttributeMethodInfo0 = new JmxAttributeMethodInfo("length", "length");
      jmxAttributeMethodInfoArray0[0] = jmxAttributeMethodInfo0;
      jmxAttributeMethodInfoArray0[1] = jmxAttributeMethodInfo0;
      JmxOperationInfo[] jmxOperationInfoArray0 = new JmxOperationInfo[0];
      jmxAttributeMethodInfo0.setMethodName("getClass");
      ReflectionMbean reflectionMbean0 = new ReflectionMbean("com.j256.simplejmx.common.JmxAttributeFieldInfo", "com.j256.simplejmx.common.JmxAttributeFieldInfo", (JmxAttributeFieldInfo[]) null, jmxAttributeMethodInfoArray0, jmxOperationInfoArray0, false);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JmxAttributeFieldInfo[] jmxAttributeFieldInfoArray0 = new JmxAttributeFieldInfo[3];
      JmxAttributeFieldInfo jmxAttributeFieldInfo0 = new JmxAttributeFieldInfo();
      jmxAttributeFieldInfoArray0[0] = jmxAttributeFieldInfo0;
      jmxAttributeFieldInfoArray0[1] = jmxAttributeFieldInfo0;
      jmxAttributeFieldInfoArray0[2] = jmxAttributeFieldInfoArray0[1];
      JmxAttributeMethodInfo[] jmxAttributeMethodInfoArray0 = new JmxAttributeMethodInfo[9];
      JmxAttributeMethodInfo jmxAttributeMethodInfo0 = new JmxAttributeMethodInfo("wait", "wait");
      jmxAttributeMethodInfoArray0[0] = jmxAttributeMethodInfo0;
      jmxAttributeMethodInfoArray0[1] = jmxAttributeMethodInfoArray0[0];
      jmxAttributeMethodInfoArray0[2] = jmxAttributeMethodInfoArray0[1];
      jmxAttributeMethodInfoArray0[3] = jmxAttributeMethodInfoArray0[0];
      jmxAttributeMethodInfoArray0[4] = jmxAttributeMethodInfoArray0[2];
      jmxAttributeMethodInfoArray0[5] = jmxAttributeMethodInfoArray0[2];
      jmxAttributeMethodInfoArray0[6] = jmxAttributeMethodInfo0;
      jmxAttributeMethodInfoArray0[7] = jmxAttributeMethodInfo0;
      jmxAttributeMethodInfoArray0[8] = jmxAttributeMethodInfoArray0[1];
      JmxOperationInfo[] jmxOperationInfoArray0 = new JmxOperationInfo[1];
      JmxOperationInfo.OperationAction jmxOperationInfo_OperationAction0 = JmxOperationInfo.OperationAction.ACTION;
      JmxOperationInfo jmxOperationInfo0 = new JmxOperationInfo("wait", stringArray0, stringArray0, jmxOperationInfo_OperationAction0, "5P'F");
      jmxOperationInfoArray0[0] = jmxOperationInfo0;
      ReflectionMbean reflectionMbean0 = new ReflectionMbean("$jj$hfSw,,[", "$jj$hfSw,,[", jmxAttributeFieldInfoArray0, jmxAttributeMethodInfoArray0, jmxOperationInfoArray0, true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JmxOperationInfo.OperationAction jmxOperationInfo_OperationAction0 = JmxOperationInfo.OperationAction.INFO;
      JmxOperationInfo jmxOperationInfo0 = new JmxOperationInfo("toLowerCase", stringArray0, stringArray0, jmxOperationInfo_OperationAction0, "&ewq<o9p^");
      JmxAttributeFieldInfo[] jmxAttributeFieldInfoArray0 = new JmxAttributeFieldInfo[2];
      JmxAttributeFieldInfo jmxAttributeFieldInfo0 = new JmxAttributeFieldInfo("&ewq<o9p^");
      jmxAttributeFieldInfoArray0[0] = jmxAttributeFieldInfo0;
      jmxAttributeFieldInfoArray0[1] = jmxAttributeFieldInfo0;
      JmxOperationInfo[] jmxOperationInfoArray0 = new JmxOperationInfo[3];
      jmxOperationInfoArray0[0] = jmxOperationInfo0;
      jmxOperationInfoArray0[1] = jmxOperationInfo0;
      jmxOperationInfoArray0[2] = jmxOperationInfo0;
      ReflectionMbean reflectionMbean0 = new ReflectionMbean("toLowerCase", "toLowerCase", jmxAttributeFieldInfoArray0, (JmxAttributeMethodInfo[]) null, jmxOperationInfoArray0, true);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JmxAttributeMethodInfo[] jmxAttributeMethodInfoArray0 = new JmxAttributeMethodInfo[0];
      JmxOperationInfo[] jmxOperationInfoArray0 = new JmxOperationInfo[9];
      JmxOperationInfo jmxOperationInfo0 = new JmxOperationInfo();
      jmxOperationInfoArray0[0] = jmxOperationInfo0;
      jmxOperationInfoArray0[1] = jmxOperationInfo0;
      JmxOperationInfo jmxOperationInfo1 = new JmxOperationInfo("getChars");
      jmxOperationInfoArray0[2] = jmxOperationInfo1;
      jmxOperationInfoArray0[3] = jmxOperationInfo0;
      jmxOperationInfoArray0[4] = jmxOperationInfo0;
      jmxOperationInfoArray0[5] = jmxOperationInfoArray0[3];
      jmxOperationInfoArray0[6] = jmxOperationInfoArray0[3];
      jmxOperationInfoArray0[7] = jmxOperationInfoArray0[1];
      jmxOperationInfoArray0[8] = jmxOperationInfoArray0[3];
      ReflectionMbean reflectionMbean0 = null;
      try {
        reflectionMbean0 = new ReflectionMbean("o`J*", "regionMatches", (JmxAttributeFieldInfo[]) null, jmxAttributeMethodInfoArray0, jmxOperationInfoArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Operation method public void java.lang.String.getChars(int,int,char[],int) cannot start with 'get', 'is', or 'set'.  Did you use the wrong annotation?
         //
         verifyException("com.j256.simplejmx.server.ReflectionMbean", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ReflectionMbean reflectionMbean0 = new ReflectionMbean("&ewhq<o9{3", "&ewhq<o9{3");
      PublishAllBeanWrapper publishAllBeanWrapper0 = new PublishAllBeanWrapper();
      publishAllBeanWrapper0.setTarget(reflectionMbean0);
      ReflectionMbean reflectionMbean1 = new ReflectionMbean(publishAllBeanWrapper0);
      assertFalse(reflectionMbean1.equals((Object)reflectionMbean0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JmxOperationInfo.OperationAction jmxOperationInfo_OperationAction0 = JmxOperationInfo.OperationAction.INFO;
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo("J%f^wC,f", "ACTION", "serialVersionUID");
      PublishAllBeanWrapper publishAllBeanWrapper0 = new PublishAllBeanWrapper(jmxOperationInfo_OperationAction0, jmxResourceInfo0);
      ReflectionMbean reflectionMbean0 = new ReflectionMbean(publishAllBeanWrapper0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JmxAttributeMethodInfo jmxAttributeMethodInfo0 = new JmxAttributeMethodInfo("wait", "wait");
      JmxAttributeMethodInfo[] jmxAttributeMethodInfoArray0 = new JmxAttributeMethodInfo[1];
      jmxAttributeMethodInfoArray0[0] = jmxAttributeMethodInfo0;
      ReflectionMbean reflectionMbean0 = null;
      try {
        reflectionMbean0 = new ReflectionMbean("bm`>", "wait", (JmxAttributeFieldInfo[]) null, jmxAttributeMethodInfoArray0, (JmxOperationInfo[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method 'public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException' is marked as an attribute but does not start with 'get' or 'set'
         //
         verifyException("com.j256.simplejmx.server.ReflectionMbean", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ReflectionMbean reflectionMbean0 = new ReflectionMbean("is", "");
      try { 
        reflectionMbean0.invoke("is", (Object[]) null, (String[]) null);
        fail("Expecting exception: MBeanException");
      
      } catch(MBeanException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplejmx.server.ReflectionMbean", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo();
      PublishAllBeanWrapper publishAllBeanWrapper0 = new PublishAllBeanWrapper(jmxResourceInfo0, jmxResourceInfo0);
      ReflectionMbean reflectionMbean0 = new ReflectionMbean(publishAllBeanWrapper0);
      JmxAttributeFieldInfo[] jmxAttributeFieldInfoArray0 = new JmxAttributeFieldInfo[1];
      JmxAttributeFieldInfo jmxAttributeFieldInfo0 = new JmxAttributeFieldInfo("serialVersionUID", true, true, ">'W2K`-N#D!ik");
      jmxAttributeFieldInfoArray0[0] = jmxAttributeFieldInfo0;
      JmxAttributeMethodInfo[] jmxAttributeMethodInfoArray0 = new JmxAttributeMethodInfo[2];
      JmxAttributeMethodInfo jmxAttributeMethodInfo0 = new JmxAttributeMethodInfo("toString");
      jmxAttributeMethodInfoArray0[0] = jmxAttributeMethodInfo0;
      jmxAttributeMethodInfoArray0[1] = jmxAttributeMethodInfo0;
      JmxOperationInfo[] jmxOperationInfoArray0 = new JmxOperationInfo[0];
      ReflectionMbean reflectionMbean1 = new ReflectionMbean("serialVersionUID", "serialVersionUID", jmxAttributeFieldInfoArray0, jmxAttributeMethodInfoArray0, jmxOperationInfoArray0, true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "serialVersionUID";
      stringArray0[1] = "toString";
      stringArray0[2] = "toString";
      stringArray0[3] = "toString";
      stringArray0[4] = "serialVersionUID";
      stringArray0[5] = "serialVersionUID";
      stringArray0[6] = ">'W2K`-N#D!ik";
      AttributeList attributeList0 = reflectionMbean0.getAttributes(stringArray0);
      AttributeList attributeList1 = reflectionMbean1.setAttributes(attributeList0);
      assertFalse(attributeList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo();
      PublishAllBeanWrapper publishAllBeanWrapper0 = new PublishAllBeanWrapper(jmxResourceInfo0, jmxResourceInfo0);
      ReflectionMbean reflectionMbean0 = new ReflectionMbean(publishAllBeanWrapper0);
      Attribute attribute0 = new Attribute("serialVersionUID", "serialVersionUID");
      try { 
        reflectionMbean0.setAttribute(attribute0);
        fail("Expecting exception: AttributeNotFoundException");
      
      } catch(AttributeNotFoundException e) {
         //
         // Unknown attribute serialVersionUID
         //
         verifyException("com.j256.simplejmx.server.ReflectionMbean", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ReflectionMbean reflectionMbean0 = new ReflectionMbean("nkj", "nkj");
      Attribute attribute0 = new Attribute("nkj", "nkj");
      try { 
        reflectionMbean0.setAttribute(attribute0);
        fail("Expecting exception: AttributeNotFoundException");
      
      } catch(AttributeNotFoundException e) {
         //
         // Unknown attribute nkj
         //
         verifyException("com.j256.simplejmx.server.ReflectionMbean", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo();
      JmxAttributeField jmxAttributeField0 = mock(JmxAttributeField.class, new ViolatedAssumptionAnswer());
      PublishAllBeanWrapper publishAllBeanWrapper0 = new PublishAllBeanWrapper(jmxAttributeField0, jmxResourceInfo0);
      ReflectionMbean reflectionMbean0 = new ReflectionMbean(publishAllBeanWrapper0);
      Attribute attribute0 = new Attribute("mockitoInterceptor", (Object) null);
      reflectionMbean0.setAttribute(attribute0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ReflectionMbean reflectionMbean0 = new ReflectionMbean("serialVersionUID", "serialVersionUID");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        reflectionMbean0.getAttributes(stringArray0);
        fail("Expecting exception: RuntimeOperationsException");
      
      } catch(RuntimeOperationsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.management.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ReflectionMbean reflectionMbean0 = new ReflectionMbean("com.j256.simplejmx.server.eflectinMbean", "com.j256.simplejmx.server.eflectinMbean");
      String[] stringArray0 = new String[0];
      AttributeList attributeList0 = reflectionMbean0.getAttributes(stringArray0);
      assertTrue(attributeList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JmxAttributeMethodInfo jmxAttributeMethodInfo0 = new JmxAttributeMethodInfo("serialVersionUID", "serialVersionUID");
      JmxAttributeFieldInfo[] jmxAttributeFieldInfoArray0 = new JmxAttributeFieldInfo[3];
      JmxAttributeFieldInfo jmxAttributeFieldInfo0 = new JmxAttributeFieldInfo("serialVersionUID", false, false, "?D*q");
      jmxAttributeFieldInfoArray0[0] = jmxAttributeFieldInfo0;
      jmxAttributeFieldInfoArray0[1] = jmxAttributeFieldInfoArray0[0];
      jmxAttributeFieldInfoArray0[2] = jmxAttributeFieldInfoArray0[1];
      JmxAttributeMethodInfo[] jmxAttributeMethodInfoArray0 = new JmxAttributeMethodInfo[5];
      jmxAttributeMethodInfoArray0[0] = jmxAttributeMethodInfo0;
      jmxAttributeMethodInfoArray0[1] = jmxAttributeMethodInfo0;
      jmxAttributeMethodInfoArray0[2] = jmxAttributeMethodInfo0;
      jmxAttributeMethodInfoArray0[3] = jmxAttributeMethodInfoArray0[1];
      jmxAttributeMethodInfoArray0[4] = jmxAttributeMethodInfo0;
      ReflectionMbean reflectionMbean0 = new ReflectionMbean("{gkA", "is", jmxAttributeFieldInfoArray0, jmxAttributeMethodInfoArray0, (JmxOperationInfo[]) null, false);
      try { 
        reflectionMbean0.getAttribute("serialVersionUID");
        fail("Expecting exception: AttributeNotFoundException");
      
      } catch(AttributeNotFoundException e) {
         //
         // Unknown attribute serialVersionUID
         //
         verifyException("com.j256.simplejmx.server.ReflectionMbean", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ReflectionMbean reflectionMbean0 = new ReflectionMbean("&e/h<zo9{4", "&e/h<zo9{4");
      try { 
        reflectionMbean0.getAttribute("&e/h<zo9{4");
        fail("Expecting exception: AttributeNotFoundException");
      
      } catch(AttributeNotFoundException e) {
         //
         // Unknown attribute &e/h<zo9{4
         //
         verifyException("com.j256.simplejmx.server.ReflectionMbean", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JmxResourceInfo jmxResourceInfo0 = new JmxResourceInfo();
      PublishAllBeanWrapper publishAllBeanWrapper0 = new PublishAllBeanWrapper(jmxResourceInfo0, jmxResourceInfo0);
      ReflectionMbean reflectionMbean0 = new ReflectionMbean(publishAllBeanWrapper0);
      Object object0 = reflectionMbean0.getAttribute("jmxDomainName");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ReflectionMbean reflectionMbean0 = new ReflectionMbean("serialVersionUID", "serialVersionUID");
      MBeanInfo mBeanInfo0 = reflectionMbean0.getMBeanInfo();
      assertNotNull(mBeanInfo0);
  }
}
