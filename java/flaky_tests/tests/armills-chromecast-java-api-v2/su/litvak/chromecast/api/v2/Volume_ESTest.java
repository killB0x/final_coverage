/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 27 19:21:38 GMT 2022
 */

package su.litvak.chromecast.api.v2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import su.litvak.chromecast.api.v2.Volume;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Volume_ESTest extends Volume_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Volume volume0 = new Volume();
      Float float0 = Float.valueOf((float) volume0.increment);
      assertEquals(0.05F, (float)float0, 0.01F);
      
      Volume volume1 = new Volume(volume0.level, true, float0, volume0.stepInterval, "u['4tW}>.0w5");
      String string0 = volume1.toString();
      assertEquals("Volume{level: -1.0, muted: true, increment: 0.05, stepInterval: 0.05000000074505806, controlType: u['4tW}>.0w5}", string0);
      assertFalse(volume0.muted);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Volume volume0 = new Volume();
      Float float0 = Float.valueOf((float) volume0.increment);
      assertEquals(0.05F, (float)float0, 0.01F);
      
      Volume volume1 = new Volume(volume0.increment, false, float0, volume0.stepInterval, "attenuation");
      boolean boolean0 = volume0.equals(volume1);
      assertFalse(volume1.muted);
      assertTrue(volume1.equals((Object)volume0));
      assertFalse(volume0.muted);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Volume volume0 = new Volume();
      Float float0 = Float.valueOf((float) volume0.increment);
      assertEquals(0.05F, (float)float0, 0.01F);
      
      Volume volume1 = new Volume(volume0.level, false, float0, volume0.stepInterval, "Volume{level: 0.05, muted: false, increment: 0.05, stepInterval: 0.05000000074505806, controlType: ?xMs4pSN0}");
      boolean boolean0 = volume1.equals(volume0);
      assertFalse(boolean0);
      assertFalse(volume1.muted);
      assertFalse(volume0.muted);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Volume volume0 = new Volume();
      Float float0 = Float.valueOf((float) volume0.increment);
      assertEquals(0.05F, (float)float0, 0.01F);
      
      Volume volume1 = new Volume(volume0.level, true, float0, volume0.stepInterval, "u['_I4tW}>.0w5");
      volume1.hashCode();
      assertFalse(volume1.equals((Object)volume0));
      assertTrue(volume1.muted);
      assertFalse(volume0.muted);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Volume volume0 = new Volume();
      Double double0 = new Double((-45.42726261));
      Float float0 = Float.valueOf((float) volume0.increment);
      assertEquals(0.05F, (float)float0, 0.01F);
      
      Volume volume1 = new Volume(volume0.level, false, float0, double0, "Volume{level: 0.05, muted: false, increment: 0.05, stepInterval: 0.05000000074505806, controlType: ?xMs4pSN0}");
      assertFalse(volume1.muted);
      assertFalse(volume1.equals((Object)volume0));
      assertFalse(volume0.muted);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double(0.0);
      Volume volume0 = new Volume((Float) null, false, (Float) null, double0, "");
      assertFalse(volume0.muted);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Volume volume0 = new Volume();
      Float float0 = Float.valueOf(0.0F);
      Volume volume1 = new Volume(volume0.increment, true, float0, volume0.stepInterval, "Volume{level: -1.0, muted: false, increment: 0.05, stepInterval: 0.05000000074505806, controlType: attenuation}");
      assertFalse(volume0.muted);
      assertFalse(volume1.equals((Object)volume0));
      assertTrue(volume1.muted);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Volume volume0 = new Volume();
      Volume volume1 = new Volume(volume0.level, false, volume0.increment, volume0.stepInterval, (String) null);
      Volume volume2 = new Volume(volume1.level, false, volume1.increment, volume1.stepInterval, (String) null);
      boolean boolean0 = volume1.equals(volume2);
      assertFalse(volume2.equals((Object)volume0));
      assertTrue(boolean0);
      assertFalse(volume0.muted);
      assertFalse(volume2.muted);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Volume volume0 = new Volume();
      Double double0 = new Double(2383.490629593424);
      Volume volume1 = new Volume(volume0.level, false, volume0.level, double0, (String) null);
      // Undeclared exception!
      try { 
        volume1.equals(volume0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Volume volume0 = new Volume();
      Float float0 = Float.valueOf(1.0F);
      Volume volume1 = new Volume(volume0.increment, false, float0, volume0.stepInterval, "attenuation");
      Volume volume2 = new Volume();
      boolean boolean0 = volume1.equals(volume2);
      assertFalse(volume1.muted);
      assertTrue(boolean0);
      assertFalse(volume2.muted);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Volume volume0 = new Volume();
      Volume volume1 = new Volume(volume0.level, true, volume0.level, volume0.stepInterval, "attenuation");
      boolean boolean0 = volume0.equals(volume1);
      assertTrue(volume1.muted);
      assertTrue(volume1.equals((Object)volume0));
      assertFalse(volume0.muted);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Volume volume0 = new Volume();
      Volume volume1 = new Volume((Float) null, false, volume0.increment, volume0.stepInterval, "attenuation");
      Volume volume2 = new Volume((Float) null, false, (Float) null, volume0.stepInterval, "attenuation");
      boolean boolean0 = volume1.equals(volume2);
      assertFalse(volume2.equals((Object)volume0));
      assertTrue(boolean0);
      assertFalse(volume2.muted);
      assertTrue(volume0.equals((Object)volume2));
      assertFalse(volume0.muted);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Volume volume0 = new Volume();
      Object object0 = new Object();
      boolean boolean0 = volume0.equals(object0);
      assertFalse(volume0.muted);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Volume volume0 = new Volume();
      boolean boolean0 = volume0.equals((Object) null);
      assertFalse(volume0.muted);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Volume volume0 = new Volume();
      boolean boolean0 = volume0.equals(volume0);
      assertTrue(boolean0);
      assertFalse(volume0.muted);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Volume volume0 = new Volume();
      Volume volume1 = new Volume(volume0.increment, false, volume0.increment, (Double) null, "?xMs4pSN0");
      assertFalse(volume1.equals((Object)volume0));
      assertFalse(volume0.muted);
      assertFalse(volume1.muted);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Volume volume0 = new Volume();
      Volume volume1 = new Volume(volume0.level, false, volume0.increment, volume0.stepInterval, (String) null);
      boolean boolean0 = volume1.equals(volume0);
      assertFalse(volume0.muted);
      assertFalse(boolean0);
      assertFalse(volume1.muted);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Volume volume0 = new Volume();
      Volume volume1 = new Volume((Float) null, false, (Float) null, volume0.stepInterval, "attenuation");
      boolean boolean0 = volume1.equals(volume0);
      assertFalse(volume1.muted);
      assertTrue(volume0.equals((Object)volume1));
      assertFalse(volume0.muted);
      assertFalse(boolean0);
  }
}
