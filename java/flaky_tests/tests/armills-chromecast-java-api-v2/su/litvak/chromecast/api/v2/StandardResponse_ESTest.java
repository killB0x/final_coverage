/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 27 19:31:52 GMT 2022
 */

package su.litvak.chromecast.api.v2;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import su.litvak.chromecast.api.v2.Application;
import su.litvak.chromecast.api.v2.MediaStatus;
import su.litvak.chromecast.api.v2.StandardResponse;
import su.litvak.chromecast.api.v2.Status;
import su.litvak.chromecast.api.v2.Volume;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StandardResponse_ESTest extends StandardResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MediaStatus[] mediaStatusArray0 = new MediaStatus[6];
      StandardResponse.MediaStatus standardResponse_MediaStatus0 = new StandardResponse.MediaStatus(mediaStatusArray0);
      assertNull(standardResponse_MediaStatus0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StandardResponse.LaunchError standardResponse_LaunchError0 = new StandardResponse.LaunchError("seasonNumber");
      Long long0 = Long.valueOf(0L);
      standardResponse_LaunchError0.setRequestId(long0);
      Long long1 = standardResponse_LaunchError0.getRequestId();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StandardResponse.LoadFailed standardResponse_LoadFailed0 = new StandardResponse.LoadFailed();
      Long long0 = Long.valueOf((-2032L));
      standardResponse_LoadFailed0.setRequestId(long0);
      Long long1 = standardResponse_LoadFailed0.getRequestId();
      assertEquals((-2032L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StandardResponse.Close standardResponse_Close0 = new StandardResponse.Close();
      Long long0 = Long.valueOf(1257L);
      standardResponse_Close0.setRequestId(long0);
      Long long1 = standardResponse_Close0.getRequestId();
      assertEquals(1257L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StandardResponse.Ping standardResponse_Ping0 = new StandardResponse.Ping();
      assertNull(standardResponse_Ping0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StandardResponse.LoadFailed standardResponse_LoadFailed0 = new StandardResponse.LoadFailed();
      Long long0 = standardResponse_LoadFailed0.getRequestId();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StandardResponse.Invalid standardResponse_Invalid0 = new StandardResponse.Invalid("");
      assertNull(standardResponse_Invalid0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Volume volume0 = new Volume((Float) null, false, (Float) null, (Double) null, "PHOTO");
      LinkedList<Application> linkedList0 = new LinkedList<Application>();
      Status status0 = new Status(volume0, linkedList0, false, true);
      StandardResponse.Status standardResponse_Status0 = new StandardResponse.Status(status0);
      assertNull(standardResponse_Status0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      StandardResponse.Pong standardResponse_Pong0 = new StandardResponse.Pong();
      assertNull(standardResponse_Pong0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      StandardResponse.AppAvailability standardResponse_AppAvailability0 = new StandardResponse.AppAvailability();
      assertNull(standardResponse_AppAvailability0.getRequestId());
  }
}
