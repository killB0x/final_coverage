/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 27 19:33:15 GMT 2022
 */

package su.litvak.chromecast.api.v2;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import su.litvak.chromecast.api.v2.Media;
import su.litvak.chromecast.api.v2.StandardRequest;
import su.litvak.chromecast.api.v2.Volume;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StandardRequest_ESTest extends StandardRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardRequest.Seek standardRequest_Seek0 = StandardRequest.seek((String) null, 0L, 1.0);
      assertNull(standardRequest_Seek0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardRequest.Seek standardRequest_Seek0 = new StandardRequest.Seek(2236L, "", 0.0);
      assertNull(standardRequest_Seek0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StandardRequest.Play standardRequest_Play0 = new StandardRequest.Play(522L, "# yv");
      assertNull(standardRequest_Play0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardRequest.Pause standardRequest_Pause0 = new StandardRequest.Pause(0L, "discNumber");
      assertNull(standardRequest_Pause0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardRequest.Launch standardRequest_Launch0 = new StandardRequest.Launch("");
      assertNull(standardRequest_Launch0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardRequest.Status standardRequest_Status0 = StandardRequest.status();
      Long long0 = Long.getLong("Uy 9|NDW", 0L);
      standardRequest_Status0.requestId = long0;
      Long long1 = standardRequest_Status0.getRequestId();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardRequest.Status standardRequest_Status0 = StandardRequest.status();
      Long long0 = Long.getLong("-vin*%c}>B%DRt{7iY", (-10L));
      standardRequest_Status0.requestId = long0;
      Long long1 = standardRequest_Status0.getRequestId();
      assertEquals((-10L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Double double0 = new Double(1094.979486);
      Media.StreamType media_StreamType0 = Media.StreamType.NONE;
      Media media0 = new Media("S;.W!;h;Uv", "su.litvak.chromecast.api.v2.StandardRequest$MediaRequest", double0, media_StreamType0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StandardRequest.Load standardRequest_Load0 = StandardRequest.load("S;.W!;h;Uv", media0, false, 1094.979486, hashMap0);
      assertNull(standardRequest_Load0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      StandardRequest.AppAvailability standardRequest_AppAvailability0 = StandardRequest.appAvailability(stringArray0);
      Long long0 = Long.getLong("Volume{level: null, muted: false, increment: 0.05, stepInterval: 0.05000000074505806, controlType: buffered}", 1752L);
      standardRequest_AppAvailability0.setRequestId(long0);
      Long long1 = standardRequest_AppAvailability0.getRequestId();
      assertEquals(1752L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardRequest.Pause standardRequest_Pause0 = StandardRequest.pause("", 0L);
      assertNull(standardRequest_Pause0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardRequest.Load standardRequest_Load0 = StandardRequest.load((String) null, (Media) null, true, 1315.301510356494, (Map<String, String>) null);
      assertNull(standardRequest_Load0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Float float0 = Volume.DEFAULT_INCREMENT;
      Double double0 = new Double(2258.64275);
      Volume volume0 = new Volume(float0, true, float0, double0, (String) null);
      StandardRequest.SetVolume standardRequest_SetVolume0 = StandardRequest.setVolume(volume0);
      assertNull(standardRequest_SetVolume0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StandardRequest.Launch standardRequest_Launch0 = StandardRequest.launch("eSOS0N>xQ(|4");
      assertNull(standardRequest_Launch0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StandardRequest.Stop standardRequest_Stop0 = StandardRequest.stop("MUSIC_TRACK");
      assertNull(standardRequest_Stop0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StandardRequest.Status standardRequest_Status0 = StandardRequest.status();
      Long long0 = standardRequest_Status0.getRequestId();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StandardRequest.Play standardRequest_Play0 = StandardRequest.play("buffered", (-457L));
      assertNull(standardRequest_Play0.getRequestId());
  }
}
