/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 08:52:29 GMT 2022
 */

package se.mockachino.matchers.matcher;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.mockachino.matchers.matcher.AndMatcher;
import se.mockachino.matchers.matcher.AnyMatcher;
import se.mockachino.matchers.matcher.ArgumentCatcher;
import se.mockachino.matchers.matcher.ClassMatcher;
import se.mockachino.matchers.matcher.IdentityMatcher;
import se.mockachino.matchers.matcher.Matcher;
import se.mockachino.matchers.matcher.NotMatcher;
import se.mockachino.matchers.matcher.OrMatcher;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArgumentCatcher_ESTest extends ArgumentCatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      AnyMatcher<Object> anyMatcher0 = new AnyMatcher<Object>(class0);
      ArgumentCatcher<Object> argumentCatcher0 = new ArgumentCatcher<Object>(anyMatcher0);
      argumentCatcher0.matches("<Any>");
      List<Object> list0 = argumentCatcher0.getValues();
      assertTrue(list0.contains("<Any>"));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassMatcher<Integer> classMatcher0 = ClassMatcher.anyInt();
      ArgumentCatcher<Integer> argumentCatcher0 = ArgumentCatcher.create((Matcher<Integer>) classMatcher0);
      Class<Integer> class0 = argumentCatcher0.getType();
      assertFalse(class0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassMatcher<Integer> classMatcher0 = ClassMatcher.anyInt();
      ArgumentCatcher<Integer> argumentCatcher0 = ArgumentCatcher.create((Matcher<Integer>) classMatcher0);
      String string0 = argumentCatcher0.asString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 1);
      AndMatcher<Object> andMatcher0 = new AndMatcher<Object>(matcherArray0);
      NotMatcher<Object> notMatcher0 = new NotMatcher<Object>(andMatcher0);
      matcherArray0[0] = (Matcher<Object>) notMatcher0;
      OrMatcher<Object> orMatcher0 = new OrMatcher<Object>(matcherArray0);
      ArgumentCatcher<Object> argumentCatcher0 = ArgumentCatcher.create((Matcher<Object>) orMatcher0);
      // Undeclared exception!
      try { 
        argumentCatcher0.matches(orMatcher0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArgumentCatcher<Object> argumentCatcher0 = ArgumentCatcher.create((Matcher<Object>) null);
      // Undeclared exception!
      try { 
        argumentCatcher0.matches((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.matchers.matcher.ArgumentCatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 1);
      AndMatcher<Object> andMatcher0 = new AndMatcher<Object>(matcherArray0);
      matcherArray0[0] = (Matcher<Object>) andMatcher0;
      OrMatcher<Object> orMatcher0 = new OrMatcher<Object>(matcherArray0);
      ArgumentCatcher<Object> argumentCatcher0 = new ArgumentCatcher<Object>(orMatcher0);
      // Undeclared exception!
      try { 
        argumentCatcher0.getType();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      AnyMatcher<Object> anyMatcher0 = new AnyMatcher<Object>(class0);
      ArgumentCatcher<Object> argumentCatcher0 = new ArgumentCatcher<Object>(anyMatcher0);
      argumentCatcher0.matches("<Any>");
      Object object0 = argumentCatcher0.getValue();
      assertEquals("<Any>", object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      IdentityMatcher<Integer> identityMatcher0 = new IdentityMatcher<Integer>(integer0);
      ArgumentCatcher<Integer> argumentCatcher0 = new ArgumentCatcher<Integer>(identityMatcher0);
      Integer integer1 = new Integer((-1));
      boolean boolean0 = argumentCatcher0.matches(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      AnyMatcher<Object> anyMatcher0 = new AnyMatcher<Object>(class0);
      ArgumentCatcher<Object> argumentCatcher0 = new ArgumentCatcher<Object>(anyMatcher0);
      List<Object> list0 = argumentCatcher0.getValues();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArgumentCatcher<Integer> argumentCatcher0 = new ArgumentCatcher<Integer>((Matcher<Integer>) null);
      // Undeclared exception!
      try { 
        argumentCatcher0.asString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArgumentCatcher<Integer> argumentCatcher0 = new ArgumentCatcher<Integer>((Matcher<Integer>) null);
      // Undeclared exception!
      try { 
        argumentCatcher0.getType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.matchers.matcher.ArgumentCatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassMatcher<Integer> classMatcher0 = ClassMatcher.anyInt();
      ArgumentCatcher<Integer> argumentCatcher0 = ArgumentCatcher.create((Matcher<Integer>) classMatcher0);
      Integer integer0 = argumentCatcher0.getValue();
      assertNull(integer0);
  }
}
