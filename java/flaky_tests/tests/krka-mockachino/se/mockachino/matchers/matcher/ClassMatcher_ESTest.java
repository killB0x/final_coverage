/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 08:29:37 GMT 2022
 */

package se.mockachino.matchers.matcher;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.mockachino.matchers.matcher.ClassMatcher;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassMatcher_ESTest extends ClassMatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      ClassMatcher<Object> classMatcher0 = ClassMatcher.create(classArray0[0], (Class[]) classArray0);
      Class<Object> class0 = classMatcher0.getType();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Character> class0 = Character.TYPE;
      ClassMatcher<Character> classMatcher0 = ClassMatcher.create(class0, (Class[]) classArray0);
      Class<Character> class1 = classMatcher0.getType();
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      ClassMatcher<Object> classMatcher0 = new ClassMatcher<Object>(class0, classArray0);
      String string0 = classMatcher0.asString();
      assertEquals("<type:Object,Object>", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      Character character0 = Character.valueOf('r');
      Class<Character> class1 = Character.TYPE;
      ClassMatcher<Character> classMatcher0 = ClassMatcher.create(class1, (Class[]) classArray0);
      boolean boolean0 = classMatcher0.matches(character0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      ClassMatcher<Object> classMatcher0 = new ClassMatcher<Object>(class0, classArray0);
      boolean boolean0 = classMatcher0.matches((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      ClassMatcher<Object> classMatcher0 = new ClassMatcher<Object>(class0, classArray0);
      boolean boolean0 = classMatcher0.matches(classMatcher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      ClassMatcher<Object> classMatcher0 = new ClassMatcher<Object>(class0, classArray0);
      // Undeclared exception!
      try { 
        classMatcher0.matches((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.matchers.matcher.ClassMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassMatcher<Short> classMatcher0 = ClassMatcher.anyShort();
      assertNotNull(classMatcher0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      ClassMatcher<Object> classMatcher0 = new ClassMatcher<Object>(class0, classArray0);
      // Undeclared exception!
      try { 
        classMatcher0.asString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.matchers.matcher.ClassMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassMatcher<Long> classMatcher0 = ClassMatcher.anyLong();
      assertNotNull(classMatcher0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassMatcher<Double> classMatcher0 = ClassMatcher.anyDouble();
      assertNotNull(classMatcher0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      ClassMatcher<Object> classMatcher0 = new ClassMatcher<Object>(class0, classArray0);
      Class<Object> class1 = classMatcher0.getType();
      assertSame(class1, class0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassMatcher<Byte> classMatcher0 = ClassMatcher.anyByte();
      assertNotNull(classMatcher0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassMatcher<Boolean> classMatcher0 = ClassMatcher.anyBoolean();
      assertNotNull(classMatcher0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassMatcher<Float> classMatcher0 = ClassMatcher.anyFloat();
      assertNotNull(classMatcher0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassMatcher<Integer> classMatcher0 = ClassMatcher.anyInt();
      assertNotNull(classMatcher0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassMatcher<Character> classMatcher0 = ClassMatcher.anyChar();
      assertNotNull(classMatcher0);
  }
}
