/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 08:37:06 GMT 2022
 */

package se.mockachino.matchers.matcher;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.mockachino.matchers.matcher.AndMatcher;
import se.mockachino.matchers.matcher.ArgumentCatcher;
import se.mockachino.matchers.matcher.ClassMatcher;
import se.mockachino.matchers.matcher.EqualityMatcher;
import se.mockachino.matchers.matcher.IdentityMatcher;
import se.mockachino.matchers.matcher.Matcher;
import se.mockachino.matchers.matcher.OrMatcher;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AndMatcher_ESTest extends AndMatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Matcher<Integer>[] matcherArray0 = (Matcher<Integer>[]) Array.newInstance(Matcher.class, 1);
      OrMatcher<Integer> orMatcher0 = new OrMatcher<Integer>(matcherArray0);
      matcherArray0[0] = (Matcher<Integer>) orMatcher0;
      AndMatcher<Integer> andMatcher0 = new AndMatcher<Integer>(matcherArray0);
      // Undeclared exception!
      try { 
        andMatcher0.matches((Integer) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Matcher<Integer>[] matcherArray0 = (Matcher<Integer>[]) Array.newInstance(Matcher.class, 1);
      OrMatcher<Integer> orMatcher0 = new OrMatcher<Integer>(matcherArray0);
      ArgumentCatcher<Integer> argumentCatcher0 = ArgumentCatcher.create((Matcher<Integer>) orMatcher0);
      matcherArray0[0] = (Matcher<Integer>) argumentCatcher0;
      AndMatcher<Integer> andMatcher0 = new AndMatcher<Integer>(matcherArray0);
      Integer integer0 = new Integer(380);
      // Undeclared exception!
      try { 
        andMatcher0.matches(integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Matcher<Integer>[] matcherArray0 = (Matcher<Integer>[]) Array.newInstance(Matcher.class, 3);
      AndMatcher<Integer> andMatcher0 = new AndMatcher<Integer>(matcherArray0);
      // Undeclared exception!
      try { 
        andMatcher0.matches((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.matchers.matcher.AndMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Matcher<Integer>[] matcherArray0 = (Matcher<Integer>[]) Array.newInstance(Matcher.class, 1);
      OrMatcher<Integer> orMatcher0 = new OrMatcher<Integer>(matcherArray0);
      matcherArray0[0] = (Matcher<Integer>) orMatcher0;
      AndMatcher<Integer> andMatcher0 = new AndMatcher<Integer>(matcherArray0);
      // Undeclared exception!
      try { 
        andMatcher0.getType();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AndMatcher<Integer> andMatcher0 = new AndMatcher<Integer>((Matcher<Integer>[]) null);
      // Undeclared exception!
      try { 
        andMatcher0.asString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.matchers.matcher.AndMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Matcher<Integer>[] matcherArray0 = (Matcher<Integer>[]) Array.newInstance(Matcher.class, 0);
      AndMatcher<Integer> andMatcher0 = new AndMatcher<Integer>(matcherArray0);
      String string0 = andMatcher0.toString();
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Matcher<Integer>[] matcherArray0 = (Matcher<Integer>[]) Array.newInstance(Matcher.class, 1);
      AndMatcher<Integer> andMatcher0 = new AndMatcher<Integer>(matcherArray0);
      String string0 = andMatcher0.asString();
      assertEquals("(null)", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Matcher<Integer>[] matcherArray0 = (Matcher<Integer>[]) Array.newInstance(Matcher.class, 0);
      AndMatcher<Integer> andMatcher0 = new AndMatcher<Integer>(matcherArray0);
      Class<Integer> class0 = andMatcher0.getType();
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Matcher<Integer>[] matcherArray0 = (Matcher<Integer>[]) Array.newInstance(Matcher.class, 6);
      Integer integer0 = new Integer(46);
      EqualityMatcher<Integer> equalityMatcher0 = new EqualityMatcher<Integer>(integer0);
      matcherArray0[0] = (Matcher<Integer>) equalityMatcher0;
      Integer integer1 = new Integer(46);
      IdentityMatcher<Integer> identityMatcher0 = new IdentityMatcher<Integer>(integer1);
      matcherArray0[1] = (Matcher<Integer>) identityMatcher0;
      ClassMatcher<Integer> classMatcher0 = ClassMatcher.anyInt();
      matcherArray0[2] = (Matcher<Integer>) classMatcher0;
      IdentityMatcher<Integer> identityMatcher1 = new IdentityMatcher<Integer>(integer0);
      matcherArray0[3] = (Matcher<Integer>) identityMatcher1;
      AndMatcher<Integer> andMatcher0 = new AndMatcher<Integer>(matcherArray0);
      boolean boolean0 = andMatcher0.matches(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Matcher<Integer>[] matcherArray0 = (Matcher<Integer>[]) Array.newInstance(Matcher.class, 1);
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      ClassMatcher<Integer> classMatcher0 = ClassMatcher.create(class0, (Class[]) classArray0);
      matcherArray0[0] = (Matcher<Integer>) classMatcher0;
      AndMatcher<Integer> andMatcher0 = new AndMatcher<Integer>(matcherArray0);
      Integer integer0 = new Integer(1);
      boolean boolean0 = andMatcher0.matches(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Matcher<Integer>[] matcherArray0 = (Matcher<Integer>[]) Array.newInstance(Matcher.class, 1);
      AndMatcher<Integer> andMatcher0 = new AndMatcher<Integer>(matcherArray0);
      // Undeclared exception!
      try { 
        andMatcher0.getType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.matchers.matcher.AndMatcher", e);
      }
  }
}
