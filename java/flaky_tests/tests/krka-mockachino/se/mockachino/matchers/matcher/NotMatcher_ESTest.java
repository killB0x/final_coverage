/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 08:51:39 GMT 2022
 */

package se.mockachino.matchers.matcher;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.mockachino.matchers.matcher.AndMatcher;
import se.mockachino.matchers.matcher.AnyMatcher;
import se.mockachino.matchers.matcher.EqualityMatcher;
import se.mockachino.matchers.matcher.Matcher;
import se.mockachino.matchers.matcher.NotMatcher;
import se.mockachino.matchers.matcher.OrMatcher;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NotMatcher_ESTest extends NotMatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      EqualityMatcher<Object> equalityMatcher0 = new EqualityMatcher<Object>(object0);
      NotMatcher<Object> notMatcher0 = new NotMatcher<Object>(equalityMatcher0);
      Class<Object> class0 = notMatcher0.getType();
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      EqualityMatcher<Object> equalityMatcher0 = new EqualityMatcher<Object>(object0);
      NotMatcher<Object> notMatcher0 = new NotMatcher<Object>(equalityMatcher0);
      String string0 = notMatcher0.asString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 1);
      AndMatcher<Object> andMatcher0 = new AndMatcher<Object>(matcherArray0);
      matcherArray0[0] = (Matcher<Object>) andMatcher0;
      OrMatcher<Object> orMatcher0 = new OrMatcher<Object>(matcherArray0);
      NotMatcher<Object> notMatcher0 = new NotMatcher<Object>(orMatcher0);
      // Undeclared exception!
      try { 
        notMatcher0.matches((Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NotMatcher<Object> notMatcher0 = new NotMatcher<Object>((Matcher<Object>) null);
      // Undeclared exception!
      try { 
        notMatcher0.matches((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.matchers.matcher.NotMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 1);
      AndMatcher<Object> andMatcher0 = new AndMatcher<Object>(matcherArray0);
      matcherArray0[0] = (Matcher<Object>) andMatcher0;
      OrMatcher<Object> orMatcher0 = new OrMatcher<Object>(matcherArray0);
      NotMatcher<Object> notMatcher0 = new NotMatcher<Object>(orMatcher0);
      // Undeclared exception!
      try { 
        notMatcher0.getType();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object object0 = new Object();
      EqualityMatcher<Object> equalityMatcher0 = new EqualityMatcher<Object>(object0);
      NotMatcher<Object> notMatcher0 = new NotMatcher<Object>(equalityMatcher0);
      Object object1 = new Object();
      boolean boolean0 = notMatcher0.matches(object1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Object> class0 = Object.class;
      AnyMatcher<Object> anyMatcher0 = new AnyMatcher<Object>(class0);
      NotMatcher<Object> notMatcher0 = new NotMatcher<Object>(anyMatcher0);
      boolean boolean0 = notMatcher0.matches(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NotMatcher<Object> notMatcher0 = new NotMatcher<Object>((Matcher<Object>) null);
      // Undeclared exception!
      try { 
        notMatcher0.asString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NotMatcher<Object> notMatcher0 = new NotMatcher<Object>((Matcher<Object>) null);
      // Undeclared exception!
      try { 
        notMatcher0.getType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.matchers.matcher.NotMatcher", e);
      }
  }
}
