/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 09:04:47 GMT 2022
 */

package se.mockachino.matchers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.mockachino.matchers.Matchers;
import se.mockachino.matchers.MatchersBase;
import se.mockachino.matchers.matcher.AndMatcher;
import se.mockachino.matchers.matcher.ArgumentCatcher;
import se.mockachino.matchers.matcher.Matcher;
import se.mockachino.matchers.matcher.OrMatcher;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Matchers_ESTest extends Matchers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Object object0 = Matchers.type(class0, (Class<?>[]) classArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Matcher<Object> matcher0 = MatchersBase.mType(class0, (Class<?>[]) classArray0);
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 5);
      matcherArray0[0] = matcher0;
      Object object0 = Matchers.or(matcherArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = Matchers.notSame((Object) "0jFz");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Matcher<Object> matcher0 = MatchersBase.mType(class0, (Class<?>[]) classArray0);
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 5);
      matcherArray0[0] = matcher0;
      OrMatcher<Object> orMatcher0 = new OrMatcher<Object>(matcherArray0);
      Object object0 = Matchers.m((Matcher<Object>) orMatcher0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 0);
      Object object0 = Matchers.and(matcherArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matchers.startsWith("lj=\"Ax>#bnJ[y&_70q");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 19
         // lj=\"Ax>#bnJ[y&_70q.*
         //                    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matchers.startsWith((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matchers.regexp("s9s(=KT'<<9s");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 13
         // s9s(=KT'<<9s
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matchers.regexp((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 1);
      AndMatcher<Object> andMatcher0 = new AndMatcher<Object>(matcherArray0);
      matcherArray0[0] = (Matcher<Object>) andMatcher0;
      // Undeclared exception!
      try { 
        Matchers.or(matcherArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 1);
      OrMatcher<Object> orMatcher0 = new OrMatcher<Object>(matcherArray0);
      matcherArray0[0] = (Matcher<Object>) orMatcher0;
      // Undeclared exception!
      try { 
        Matchers.not(matcherArray0[0]);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matchers.not((Matcher<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.matchers.matcher.NotMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 1);
      Matcher<Object> matcher0 = MatchersBase.mOr(matcherArray0);
      matcherArray0[0] = matcher0;
      AndMatcher<Object> andMatcher0 = new AndMatcher<Object>(matcherArray0);
      // Undeclared exception!
      try { 
        Matchers.match((Matcher<Object>) andMatcher0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matchers.match((Matcher<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.matchers.Matchers", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Matcher<Character>[] matcherArray0 = (Matcher<Character>[]) Array.newInstance(Matcher.class, 2);
      Matcher<Character> matcher0 = MatchersBase.mAnd(matcherArray0);
      matcherArray0[0] = matcher0;
      AndMatcher<Character> andMatcher0 = new AndMatcher<Character>(matcherArray0);
      // Undeclared exception!
      try { 
        Matchers.m((Matcher<Character>) andMatcher0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 1);
      OrMatcher<Object> orMatcher0 = new OrMatcher<Object>(matcherArray0);
      ArgumentCatcher<Object> argumentCatcher0 = ArgumentCatcher.create((Matcher<Object>) orMatcher0);
      matcherArray0[0] = (Matcher<Object>) argumentCatcher0;
      // Undeclared exception!
      try { 
        Matchers.m(matcherArray0[0]);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matchers.endsWith("=BaPM|;{zWSpr:");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 8
         // .*=BaPM|;{zWSpr:
         //         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matchers.endsWith((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matchers.contains("[d)<yZ\"3h[ {Qut-5");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal character range near index 18
         // .*[d)<yZ\"3h[ {Qut-5.*
         //                   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matchers.contains((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Matcher<Character>[] matcherArray0 = (Matcher<Character>[]) Array.newInstance(Matcher.class, 1);
      Matcher<Character> matcher0 = MatchersBase.mOr(matcherArray0);
      matcherArray0[0] = matcher0;
      // Undeclared exception!
      try { 
        Matchers.and(matcherArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Matcher<Object> matcher0 = MatchersBase.mAny(class0);
      Object object0 = Matchers.not(matcher0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 5);
      OrMatcher<Object> orMatcher0 = new OrMatcher<Object>(matcherArray0);
      // Undeclared exception!
      try { 
        Matchers.m((Matcher<Object>) orMatcher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.matchers.matcher.OrMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Matcher<Object> matcher0 = MatchersBase.mType(class0, (Class<?>[]) classArray0);
      Object object0 = Matchers.match(matcher0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 5);
      // Undeclared exception!
      try { 
        Matchers.or(matcherArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.matchers.matcher.OrMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Matcher<Character>[] matcherArray0 = (Matcher<Character>[]) Array.newInstance(Matcher.class, 2);
      // Undeclared exception!
      try { 
        Matchers.and(matcherArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.matchers.matcher.AndMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = Matchers.any(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char char0 = Matchers.anyChar();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = Matchers.regexp("EBmoaxSDht");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = Matchers.endsWith("EBmoaxSDht");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Matchers matchers0 = new Matchers();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = Matchers.startsWith("0jFz");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = Matchers.notEq((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = Matchers.eq((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = Matchers.anyInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = Matchers.anyDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object object0 = Matchers.same((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long long0 = Matchers.anyLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      float float0 = Matchers.anyFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      short short0 = Matchers.anyShort();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = Matchers.contains("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte byte0 = Matchers.anyByte();
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = Matchers.anyBoolean();
      assertFalse(boolean0);
  }
}
