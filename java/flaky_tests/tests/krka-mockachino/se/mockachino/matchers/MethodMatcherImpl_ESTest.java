/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 08:01:53 GMT 2022
 */

package se.mockachino.matchers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.mockachino.MethodCall;
import se.mockachino.matchers.MethodMatcherImpl;
import se.mockachino.matchers.matcher.Matcher;
import se.mockachino.util.MockachinoMethod;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MethodMatcherImpl_ESTest extends MethodMatcherImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.EQUALS;
      MethodCall methodCall0 = new MethodCall(mockachinoMethod0, (Object[]) null);
      MethodMatcherImpl methodMatcherImpl0 = MethodMatcherImpl.matchAll(mockachinoMethod0);
      boolean boolean0 = methodMatcherImpl0.matches(methodCall0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MethodMatcherImpl methodMatcherImpl0 = new MethodMatcherImpl((MockachinoMethod) null, (List<Matcher>) null);
      MockachinoMethod mockachinoMethod0 = methodMatcherImpl0.getMethod();
      assertNull(mockachinoMethod0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.find(class0, "toString");
      Object[] objectArray0 = new Object[1];
      MethodMatcherImpl methodMatcherImpl0 = new MethodMatcherImpl(mockachinoMethod0, objectArray0);
      MockachinoMethod mockachinoMethod1 = methodMatcherImpl0.getMethod();
      assertEquals("toString", mockachinoMethod1.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MethodMatcherImpl methodMatcherImpl0 = new MethodMatcherImpl((MockachinoMethod) null, (List<Matcher>) null);
      List<Matcher> list0 = (List<Matcher>)methodMatcherImpl0.getArgumentMatchers();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      MethodMatcherImpl methodMatcherImpl0 = MethodMatcherImpl.matchAll(mockachinoMethod0);
      List<Matcher> list0 = (List<Matcher>)methodMatcherImpl0.getArgumentMatchers();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MethodMatcherImpl methodMatcherImpl0 = new MethodMatcherImpl((MockachinoMethod) null, (List<Matcher>) null);
      // Undeclared exception!
      try { 
        methodMatcherImpl0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.matchers.MethodMatcherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.NULL;
      MethodMatcherImpl methodMatcherImpl0 = MethodMatcherImpl.matchAll(mockachinoMethod0);
      // Undeclared exception!
      try { 
        methodMatcherImpl0.matches((MethodCall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.matchers.MethodMatcherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodMatcherImpl.matchAll((MockachinoMethod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.matchers.MethodMatcherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.NULL;
      Object[] objectArray0 = new Object[0];
      MethodMatcherImpl methodMatcherImpl0 = null;
      try {
        methodMatcherImpl0 = new MethodMatcherImpl(mockachinoMethod0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.matchers.MethodMatcherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockachinoMethod0;
      Object[] objectArray1 = new Object[9];
      MethodMatcherImpl methodMatcherImpl0 = new MethodMatcherImpl(mockachinoMethod0, objectArray1);
      MethodCall methodCall0 = new MethodCall(mockachinoMethod0, objectArray0);
      boolean boolean0 = methodMatcherImpl0.matches(methodCall0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      Object[] objectArray0 = new Object[1];
      MethodMatcherImpl methodMatcherImpl0 = MethodMatcherImpl.matchAll(mockachinoMethod0);
      MethodCall methodCall0 = new MethodCall(mockachinoMethod0, objectArray0);
      boolean boolean0 = methodMatcherImpl0.matches(methodCall0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      Object[] objectArray0 = new Object[2];
      MethodMatcherImpl methodMatcherImpl0 = new MethodMatcherImpl(mockachinoMethod0, objectArray0);
      MockachinoMethod mockachinoMethod1 = MockachinoMethod.EQUALS;
      MethodCall methodCall0 = new MethodCall(mockachinoMethod1, objectArray0);
      boolean boolean0 = methodMatcherImpl0.matches(methodCall0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      Object[] objectArray0 = new Object[9];
      MethodMatcherImpl methodMatcherImpl0 = new MethodMatcherImpl(mockachinoMethod0, objectArray0);
      MethodCall methodCall0 = new MethodCall(mockachinoMethod0, objectArray0);
      boolean boolean0 = methodMatcherImpl0.matches(methodCall0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      MethodMatcherImpl methodMatcherImpl0 = new MethodMatcherImpl(mockachinoMethod0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      Object[] objectArray0 = new Object[1];
      MethodMatcherImpl methodMatcherImpl0 = new MethodMatcherImpl(mockachinoMethod0, objectArray0);
      String string0 = methodMatcherImpl0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.EQUALS;
      MethodMatcherImpl methodMatcherImpl0 = MethodMatcherImpl.matchAll(mockachinoMethod0);
      List<Matcher> list0 = (List<Matcher>)methodMatcherImpl0.getArgumentMatchers();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      Object[] objectArray0 = new Object[9];
      MethodMatcherImpl methodMatcherImpl0 = new MethodMatcherImpl(mockachinoMethod0, objectArray0);
      MockachinoMethod mockachinoMethod1 = methodMatcherImpl0.getMethod();
      assertFalse(mockachinoMethod1.isToStringCall());
  }
}
