/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 08:18:17 GMT 2022
 */

package se.mockachino.matchers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.mockachino.matchers.ArrayMatcher;
import se.mockachino.matchers.matcher.Matcher;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayMatcher_ESTest extends ArrayMatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Matcher<Integer>[] matcherArray0 = (Matcher<Integer>[]) Array.newInstance(Matcher.class, 7);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      ArrayMatcher<Integer> arrayMatcher0 = new ArrayMatcher<Integer>(matcherArray0, classArray0[3], false);
      Class<Integer> class0 = arrayMatcher0.getType();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ArrayMatcher<Integer> arrayMatcher0 = new ArrayMatcher<Integer>((Matcher[]) null, class0, false);
      String string0 = arrayMatcher0.asString();
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Matcher<Integer>[] matcherArray0 = (Matcher<Integer>[]) Array.newInstance(Matcher.class, 0);
      Class<Integer> class0 = Integer.class;
      ArrayMatcher<Integer> arrayMatcher0 = new ArrayMatcher<Integer>(matcherArray0, class0, true);
      String string0 = arrayMatcher0.asString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ArrayMatcher<Integer> arrayMatcher0 = new ArrayMatcher<Integer>((Matcher[]) null, class0, false);
      // Undeclared exception!
      try { 
        arrayMatcher0.matches(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.matchers.ArrayMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Matcher<Integer>[] matcherArray0 = (Matcher<Integer>[]) Array.newInstance(Matcher.class, 7);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      ArrayMatcher<Integer> arrayMatcher0 = new ArrayMatcher<Integer>(matcherArray0, classArray0[3], false);
      boolean boolean0 = arrayMatcher0.matches((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Matcher<Integer>[] matcherArray0 = (Matcher<Integer>[]) Array.newInstance(Matcher.class, 0);
      Class<Integer> class0 = Integer.class;
      ArrayMatcher<Integer> arrayMatcher0 = new ArrayMatcher<Integer>(matcherArray0, class0, false);
      boolean boolean0 = arrayMatcher0.matches((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Matcher<Integer>[] matcherArray0 = (Matcher<Integer>[]) Array.newInstance(Matcher.class, 0);
      Class<Integer> class0 = Integer.class;
      ArrayMatcher<Integer> arrayMatcher0 = new ArrayMatcher<Integer>(matcherArray0, class0, false);
      Integer integer0 = new Integer(1553);
      boolean boolean0 = arrayMatcher0.matches(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Matcher<Integer>[] matcherArray0 = (Matcher<Integer>[]) Array.newInstance(Matcher.class, 0);
      Class<Integer> class0 = Integer.class;
      ArrayMatcher<Integer> arrayMatcher0 = new ArrayMatcher<Integer>(matcherArray0, class0, false);
      Class<Integer> class1 = arrayMatcher0.getType();
      assertFalse(class1.isAnnotation());
  }
}
