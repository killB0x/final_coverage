/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 09:06:31 GMT 2022
 */

package se.mockachino.matchers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.mockachino.matchers.MatchersBase;
import se.mockachino.matchers.matcher.Matcher;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MatchersBase_ESTest extends MatchersBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        MatchersBase.mStartsWith("w[:|i&7~9T0j}`");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 16
         // w[:|i&7~9T0j}`.*
         //                 ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        MatchersBase.mStartsWith((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        MatchersBase.mRegexp("g,Z.=[FUVSQ|~gF");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 14
         // g,Z.=[FUVSQ|~gF
         //               ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        MatchersBase.mRegexp((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        MatchersBase.mEndsWith("w[}|i&7~9T0j}`");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 16
         // .*w[}|i&7~9T0j}`
         //                 ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        MatchersBase.mEndsWith((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        MatchersBase.mContains("1Q((W}He>?");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 14
         // .*1Q((W}He>?.*
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        MatchersBase.mContains((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Matcher<String> matcher0 = MatchersBase.mStartsWith("@0E*$");
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MatchersBase matchersBase0 = new MatchersBase();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Matcher<Character>[] matcherArray0 = (Matcher<Character>[]) Array.newInstance(Matcher.class, 4);
      Matcher<Character> matcher0 = MatchersBase.mAnd(matcherArray0);
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Matcher<Float> matcher0 = MatchersBase.mAnyFloat();
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Matcher<Double> matcher0 = MatchersBase.mAnyDouble();
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Matcher<Integer> matcher0 = MatchersBase.mAnyInt();
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Matcher<Long> matcher0 = MatchersBase.mAnyLong();
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      Matcher<Object> matcher0 = MatchersBase.mType(class0, (Class<?>[]) classArray0);
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Matcher<String> matcher0 = MatchersBase.mRegexp(".*");
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Matcher<Short> matcher0 = MatchersBase.mAnyShort();
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Matcher<Byte> matcher0 = MatchersBase.mAnyByte();
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Character character0 = Character.valueOf('p');
      Matcher<Character> matcher0 = MatchersBase.mSame(character0);
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Matcher<String> matcher0 = MatchersBase.mContains("");
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Matcher<Character> matcher0 = MatchersBase.mAnyChar();
      Matcher<Character> matcher1 = MatchersBase.mNot(matcher0);
      assertFalse(matcher1.equals((Object)matcher0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Matcher<String> matcher0 = MatchersBase.mEndsWith(".*");
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Character character0 = Character.valueOf('p');
      Class<Character> class0 = Character.class;
      Matcher<Character> matcher0 = MatchersBase.matchEq(character0, class0);
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 0);
      Matcher<Object> matcher0 = MatchersBase.mOr(matcherArray0);
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Matcher<Character> matcher0 = MatchersBase.mAny(class0);
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Character character0 = Character.valueOf('p');
      Matcher<Character> matcher0 = MatchersBase.mEq(character0);
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Matcher<Boolean> matcher0 = MatchersBase.mAnyBoolean();
      assertNotNull(matcher0);
  }
}
