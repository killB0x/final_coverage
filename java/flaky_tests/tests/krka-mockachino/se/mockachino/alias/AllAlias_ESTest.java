/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 08:50:03 GMT 2022
 */

package se.mockachino.alias;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.mockachino.Invocation;
import se.mockachino.MethodCall;
import se.mockachino.alias.AllAlias;
import se.mockachino.util.MockachinoMethod;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AllAlias_ESTest extends AllAlias_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AllAlias allAlias0 = new AllAlias((Iterable<Invocation>) null);
      // Undeclared exception!
      try { 
        allAlias0.getMatches();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.alias.AllAlias", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) objectArray0;
      MethodCall methodCall0 = new MethodCall(mockachinoMethod0, objectArray0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      Invocation invocation0 = new Invocation(object0, methodCall0, 1152, stackTraceElementArray0);
      // Undeclared exception!
      try { 
        AllAlias.fromMock(invocation0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      Invocation invocation0 = new Invocation(object0, (MethodCall) null, 1, stackTraceElementArray0);
      // Undeclared exception!
      try { 
        AllAlias.fromMock(invocation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.Invocation", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Vector<Invocation> vector0 = new Vector<Invocation>();
      Invocation invocation0 = Invocation.NULL;
      vector0.add(invocation0);
      AllAlias allAlias0 = new AllAlias(vector0);
      List<Invocation> list0 = allAlias0.getMatches();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Vector<Invocation> vector0 = new Vector<Invocation>();
      AllAlias allAlias0 = new AllAlias(vector0);
      List<Invocation> list0 = allAlias0.getMatches();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        AllAlias.fromMock((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // mock can not be null
         //
      }
  }
}
