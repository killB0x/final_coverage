/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 08:44:07 GMT 2022
 */

package se.mockachino.alias;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.mockachino.Invocation;
import se.mockachino.alias.Alias;
import se.mockachino.alias.AllAlias;
import se.mockachino.alias.IntersectionAlias;
import se.mockachino.alias.SimpleAlias;
import se.mockachino.alias.UnionAlias;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntersectionAlias_ESTest extends IntersectionAlias_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Alias[] aliasArray0 = new Alias[5];
      LinkedList<Invocation> linkedList0 = new LinkedList<Invocation>();
      AllAlias allAlias0 = new AllAlias(linkedList0);
      aliasArray0[0] = (Alias) allAlias0;
      aliasArray0[1] = (Alias) allAlias0;
      IntersectionAlias intersectionAlias0 = new IntersectionAlias(aliasArray0);
      // Undeclared exception!
      try { 
        intersectionAlias0.getMatches();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.alias.IntersectionAlias", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Alias[] aliasArray0 = new Alias[1];
      HashSet<Invocation> hashSet0 = new HashSet<Invocation>();
      Invocation invocation0 = Invocation.NULL;
      hashSet0.add(invocation0);
      AllAlias allAlias0 = new AllAlias(hashSet0);
      aliasArray0[0] = (Alias) allAlias0;
      IntersectionAlias intersectionAlias0 = new IntersectionAlias(aliasArray0);
      List<Invocation> list0 = intersectionAlias0.getMatches();
      assertTrue(list0.contains(invocation0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Alias[] aliasArray0 = new Alias[1];
      SimpleAlias simpleAlias0 = new SimpleAlias();
      aliasArray0[0] = (Alias) simpleAlias0;
      IntersectionAlias intersectionAlias0 = new IntersectionAlias(aliasArray0);
      // Undeclared exception!
      try { 
        intersectionAlias0.getMatches();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Alias must be bound to a mock method
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Invocation> linkedList0 = new LinkedList<Invocation>();
      Alias[] aliasArray0 = new Alias[2];
      AllAlias allAlias0 = new AllAlias(linkedList0);
      aliasArray0[0] = (Alias) allAlias0;
      UnionAlias unionAlias0 = new UnionAlias(aliasArray0);
      aliasArray0[1] = (Alias) unionAlias0;
      IntersectionAlias intersectionAlias0 = new IntersectionAlias(aliasArray0);
      // Undeclared exception!
      try { 
        intersectionAlias0.getMatches();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Alias[] aliasArray0 = new Alias[1];
      LinkedList<Invocation> linkedList0 = new LinkedList<Invocation>();
      AllAlias allAlias0 = new AllAlias(linkedList0);
      aliasArray0[0] = (Alias) allAlias0;
      IntersectionAlias intersectionAlias0 = new IntersectionAlias(aliasArray0);
      List<Invocation> list0 = intersectionAlias0.getMatches();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Alias[] aliasArray0 = new Alias[0];
      IntersectionAlias intersectionAlias0 = new IntersectionAlias(aliasArray0);
      List<Invocation> list0 = intersectionAlias0.getMatches();
      assertTrue(list0.isEmpty());
  }
}
