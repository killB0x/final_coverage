/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 07:59:47 GMT 2022
 */

package se.mockachino.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.mockachino.util.MockachinoMethod;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MockachinoMethod_ESTest extends MockachinoMethod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.find(class0, "getClass");
      Method method0 = mockachinoMethod0.getMethod();
      Class<?> class1 = MockachinoMethod.getReturnClass(class0, method0);
      MockachinoMethod mockachinoMethod1 = new MockachinoMethod(class1, method0);
      assertTrue(method0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.find(class0, "getParameters");
      Class<?> class1 = mockachinoMethod0.HASHCODE.getReturnType();
      Method method0 = mockachinoMethod0.getMethod();
      MockachinoMethod.getReturnClass(class1, method0);
      assertTrue(method0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockachinoMethod mockachinoMethod0 = new MockachinoMethod("isToStringCall", (Class<Object>[]) null, class0);
      Class[] classArray0 = mockachinoMethod0.getParameters();
      assertNull(classArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      Class[] classArray0 = mockachinoMethod0.getParameters();
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      Class<Object> class0 = Object.class;
      MockachinoMethod mockachinoMethod0 = new MockachinoMethod((String) null, classArray0, class0);
      String string0 = mockachinoMethod0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.find(class0, "getClass");
      String string0 = mockachinoMethod0.getName();
      assertEquals("getClass", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.NULL;
      Method method0 = mockachinoMethod0.getMethod();
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      MockachinoMethod mockachinoMethod0 = new MockachinoMethod("toString", classArray0, classArray0[0]);
      // Undeclared exception!
      try { 
        mockachinoMethod0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.util.MockachinoMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockachinoMethod mockachinoMethod0 = new MockachinoMethod((String) null, (Class<Object>[]) null, class0);
      // Undeclared exception!
      try { 
        mockachinoMethod0.isToStringCall();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.NULL;
      Object[] objectArray0 = new Object[5];
      try { 
        mockachinoMethod0.invoke(mockachinoMethod0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.util.MockachinoMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.find(class0, "notify");
      Object[] objectArray0 = new Object[0];
      try { 
        mockachinoMethod0.invoke(mockachinoMethod0, objectArray0);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.find(class0, "getClass");
      Object[] objectArray0 = new Object[7];
      try { 
        mockachinoMethod0.invoke(mockachinoMethod0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockachinoMethod mockachinoMethod0 = new MockachinoMethod((String) null, classArray0, class0);
      // Undeclared exception!
      try { 
        mockachinoMethod0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.util.MockachinoMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.NULL;
      // Undeclared exception!
      try { 
        mockachinoMethod0.getReturnType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.util.MockachinoMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        MockachinoMethod.getReturnClass((Type) null, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.util.MockachinoMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      // Undeclared exception!
      try { 
        MockachinoMethod.find(classArray0[0], "notify");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.EQUALS;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      MockachinoMethod mockachinoMethod1 = new MockachinoMethod((String) null, classArray0, class0);
      // Undeclared exception!
      try { 
        mockachinoMethod1.equals(mockachinoMethod0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.EQUALS;
      Method method0 = mockachinoMethod0.getMethod();
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = MockachinoMethod.getReturnClass(class0, method0);
      assertEquals("boolean", class1.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        MockachinoMethod.getReturnType((Type) null, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.util.MockachinoMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockachinoMethod mockachinoMethod0 = null;
      try {
        mockachinoMethod0 = new MockachinoMethod(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.util.MockachinoMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      MockachinoMethod mockachinoMethod0 = new MockachinoMethod("toString", classArray0, classArray0[0]);
      boolean boolean0 = mockachinoMethod0.isToStringCall();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.find(class0, "toString");
      boolean boolean0 = mockachinoMethod0.isToStringCall();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.EQUALS;
      boolean boolean0 = mockachinoMethod0.isToStringCall();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.find(class0, "not implemented: mapping ");
      assertNull(mockachinoMethod0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.find(class0, "equals");
      MockachinoMethod mockachinoMethod1 = MockachinoMethod.find(class0, "equals");
      assertNotNull(mockachinoMethod1);
      
      boolean boolean0 = mockachinoMethod0.equals(mockachinoMethod1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.find(class0, "toString");
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      MockachinoMethod mockachinoMethod1 = new MockachinoMethod("toString", classArray0, class0);
      boolean boolean0 = mockachinoMethod0.equals(mockachinoMethod1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.EQUALS;
      MockachinoMethod mockachinoMethod1 = MockachinoMethod.HASHCODE;
      boolean boolean0 = mockachinoMethod0.equals(mockachinoMethod1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      Object object0 = new Object();
      boolean boolean0 = mockachinoMethod0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.EQUALS;
      boolean boolean0 = mockachinoMethod0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      boolean boolean0 = mockachinoMethod0.equals(mockachinoMethod0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.EQUALS;
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      MockachinoMethod mockachinoMethod1 = new MockachinoMethod("equals", classArray0, class0);
      boolean boolean0 = mockachinoMethod0.equals(mockachinoMethod1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.find(class0, "getReturnClass");
      String string0 = mockachinoMethod0.toString();
      assertEquals("Class getReturnClass(Type, Method)", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      MockachinoMethod mockachinoMethod0 = new MockachinoMethod("", (Class<Object>[]) null, class0);
      String string0 = mockachinoMethod0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.EQUALS;
      Class[] classArray0 = mockachinoMethod0.getParameters();
      assertEquals(1, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      mockachinoMethod0.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.find(class0, "toString");
      assertTrue(mockachinoMethod0.isToStringCall());
      assertNotNull(mockachinoMethod0);
      
      Object object0 = mockachinoMethod0.invoke(mockachinoMethod0, (Object[]) null);
      assertEquals("String toString()", object0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.EQUALS;
      Class<?> class0 = mockachinoMethod0.HASHCODE.getReturnType();
      Method method0 = mockachinoMethod0.getMethod();
      Class class1 = (Class)MockachinoMethod.getReturnType((Type) class0, method0);
      assertFalse(class1.isArray());
  }
}
