/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 07:54:47 GMT 2022
 */

package se.mockachino.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import se.mockachino.matchers.matcher.ArgumentCatcher;
import se.mockachino.matchers.matcher.EqualityMatcher;
import se.mockachino.matchers.matcher.Matcher;
import se.mockachino.matchers.matcher.RegexpMatcher;
import se.mockachino.util.Formatting;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Formatting_ESTest extends Formatting_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = Formatting.calls((-648));
      assertEquals("-648 calls", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = Formatting.quote("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegexpMatcher regexpMatcher0 = new RegexpMatcher("se.mockachino.matchers.matcher.IdentityMatcher");
      EqualityMatcher<RegexpMatcher> equalityMatcher0 = new EqualityMatcher<RegexpMatcher>(regexpMatcher0);
      ArgumentCatcher<RegexpMatcher> argumentCatcher0 = ArgumentCatcher.create((Matcher<RegexpMatcher>) equalityMatcher0);
      Iterator<Matcher> iterator0 = (Iterator<Matcher>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn(argumentCatcher0).when(iterator0).next();
      Iterable<Matcher> iterable0 = (Iterable<Matcher>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(iterable0).iterator();
      String string0 = Formatting.list(iterable0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = Formatting.join((String) null, (Object[]) stackTraceElementArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[14];
      // Undeclared exception!
      try { 
        Formatting.toString(stackTraceElementArray0, 2028);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.util.Formatting", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Formatting.quote((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        Formatting.list(objectArray0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class [Ljava.lang.Object; (java.lang.Object is in module java.base of loader 'bootstrap')
         //
         verifyException("se.mockachino.util.Formatting", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Formatting.quote(", ");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      int int0 = 2147483646;
      Formatting.toString(stackTraceElementArray0, 2147483646);
      Iterator<Matcher> iterator0 = (Iterator<Matcher>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      Iterable<Matcher> iterable0 = (Iterable<Matcher>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(iterable0).iterator();
      Formatting.list(iterable0);
      boolean boolean0 = true;
      Formatting.list((Object[]) stackTraceElementArray0, boolean0);
      String string0 = Formatting.toString(stackTraceElementArray0, int0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "/=5hv-(c@U}BNR";
      // Undeclared exception!
      try { 
        Formatting.join(true, "/=5hv-(c@U}BNR", objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.String cannot be cast to class [Ljava.lang.Object; (java.lang.String is in module java.base of loader 'bootstrap')
         //
         verifyException("se.mockachino.util.Formatting", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Iterable<Matcher> iterable0 = (Iterable<Matcher>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      doReturn((Iterator) null).when(iterable0).iterator();
      // Undeclared exception!
      try { 
        Formatting.join("QQQ^T>E\\EQEEE", iterable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.util.Formatting", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("[WWtH<cx^C;", "??<MbN_`[W^NR", "[WWtH<cx^C;", 1);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string0 = Formatting.toString(stackTraceElementArray0, 1);
      assertNotNull(string0);
      assertEquals("\tat [WWtH<cx^C;.??<MbN_`[W^NR([WWtH<cx^C;:1)\n", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = Formatting.toString((StackTraceElement[]) null, (-455));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String string0 = Formatting.join(true, (String) null, objectArray0);
      assertEquals("nullnullnullnullnullnullnullnullnullnull", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String string0 = Formatting.join(false, "", objectArray0);
      assertEquals("nullnullnullnull", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = Formatting.join(true, "/=5hv-(c@U}BNR", objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = Formatting.join(false, "null", (Object[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = Formatting.join("I;.*={", (Iterable) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeSet<RegexpMatcher> treeSet0 = new TreeSet<RegexpMatcher>();
      String string0 = Formatting.argument(treeSet0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<RegexpMatcher> linkedList0 = new LinkedList<RegexpMatcher>();
      String string0 = Formatting.argument(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = Formatting.argument("null");
      assertEquals("\"null\"", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = Formatting.argument((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      String string0 = Formatting.toString(stackTraceElementArray0, (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("[WWtH<cx^C;", "??<MbN_`[W^NR", "[WWtH<cx^C;", 1);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string0 = Formatting.toString(stackTraceElementArray0);
      assertEquals("\tat [WWtH<cx^C;.??<MbN_`[W^NR([WWtH<cx^C;:1)\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = Formatting.toString((StackTraceElement[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[16];
      String string0 = Formatting.list((Object[]) stackTraceElementArray0, true);
      assertEquals("null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, ", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      String string0 = Formatting.quote("E");
      assertEquals("E", string0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string1 = Formatting.toString(stackTraceElementArray0, 2147483629);
      assertNull(string1);
      
      Iterator<Matcher> iterator0 = (Iterator<Matcher>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      Iterable<Matcher> iterable0 = (Iterable<Matcher>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(iterable0).iterator();
      String string2 = Formatting.join("QE\\EQE", iterable0);
      assertEquals("null", string2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = Formatting.list((Iterable<Matcher>) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<EqualityMatcher<RegexpMatcher>, Locale.Category> hashMap0 = new HashMap<EqualityMatcher<RegexpMatcher>, Locale.Category>();
      EqualityMatcher<RegexpMatcher> equalityMatcher0 = new EqualityMatcher<RegexpMatcher>(hashMap0);
      String string0 = equalityMatcher0.toString();
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<RegexpMatcher> linkedList0 = new LinkedList<RegexpMatcher>();
      TreeSet<RegexpMatcher> treeSet0 = new TreeSet<RegexpMatcher>(linkedList0);
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) treeSet0;
      String string0 = Formatting.join("", objectArray0);
      assertEquals("nullnull{}null", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      String string0 = Formatting.argument(locale_Category0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = Formatting.calls(0);
      assertEquals("no calls", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = Formatting.calls(1);
      assertEquals("1 call", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = Formatting.calls(808);
      assertEquals("808 calls", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Iterable<Matcher> iterable0 = (Iterable<Matcher>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      doReturn((Iterator) null).when(iterable0).iterator();
      // Undeclared exception!
      try { 
        Formatting.list(iterable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.util.Formatting", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      // Undeclared exception!
      try { 
        Formatting.toString(stackTraceElementArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.util.Formatting", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Formatting formatting0 = new Formatting();
  }
}
