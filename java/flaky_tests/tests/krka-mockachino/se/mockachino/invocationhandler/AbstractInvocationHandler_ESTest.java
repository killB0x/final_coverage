/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 08:45:03 GMT 2022
 */

package se.mockachino.invocationhandler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.mockachino.CallHandler;
import se.mockachino.MockData;
import se.mockachino.observer.AddObserverHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractInvocationHandler_ESTest extends AbstractInvocationHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MockData<Object> mockData0 = new MockData<Object>(class0, class0, "6eKzNH|<");
      AddObserverHandler addObserverHandler0 = new AddObserverHandler(mockData0, (Object) null, (CallHandler) null);
      try { 
        addObserverHandler0.invoke((Object) null, (Method) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.util.MockachinoMethod", e);
      }
  }
}
