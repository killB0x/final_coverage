/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 08:39:18 GMT 2022
 */

package se.mockachino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.mockachino.MockSettings;
import se.mockachino.MockUtil;
import se.mockachino.util.MockachinoMethod;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MockUtil_ESTest extends MockUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockUtil.checkNull("47311", "47311");
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.find(class0, "toString");
      Class<?> class1 = mockachinoMethod0.getReturnType();
      MockSettings mockSettings0 = new MockSettings();
      Object object0 = MockUtil.mockType(class1, mockSettings0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        MockUtil.checkNull((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null can not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      Class<?> class0 = mockachinoMethod0.getReturnType();
      MockSettings mockSettings0 = new MockSettings();
      MockSettings mockSettings1 = mockSettings0.spyOn(mockachinoMethod0);
      // Undeclared exception!
      try { 
        MockUtil.mockType(class0, mockSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.proxy.ProxyUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.EQUALS;
      Class<?> class0 = mockachinoMethod0.getReturnType();
      MockSettings mockSettings0 = new MockSettings();
      MockSettings mockSettings1 = mockSettings0.name("unBB&_N6Ny*k6tj");
      // Undeclared exception!
      try { 
        MockUtil.mockType(class0, mockSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.proxy.ProxyUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockUtil mockUtil0 = new MockUtil();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String string0 = MockUtil.nextMockId();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockSettings mockSettings0 = new MockSettings();
      // Undeclared exception!
      try { 
        MockUtil.mockType((Type) null, mockSettings0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type can not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      int int0 = MockUtil.incrementSequence();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      int int0 = MockUtil.getSequence();
      assertEquals(0, int0);
  }
}
