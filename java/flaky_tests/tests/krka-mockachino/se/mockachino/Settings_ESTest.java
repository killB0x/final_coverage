/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 09:03:26 GMT 2022
 */

package se.mockachino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import se.mockachino.CallHandler;
import se.mockachino.MockSettings;
import se.mockachino.Settings;
import se.mockachino.VerifyableCallHandlerWrapper;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Settings_ESTest extends Settings_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        Settings.spyOn((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // impl can not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        Settings.name((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // name can not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Settings.fallback((CallHandler) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // fallback can not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object object0 = new Object();
      MockSettings mockSettings0 = Settings.spyOn(object0);
      assertFalse(mockSettings0.isQuick());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockSettings mockSettings0 = Settings.name("N|^I$C#9?'/|X$");
      assertFalse(mockSettings0.isQuick());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockSettings mockSettings0 = Settings.newSettings();
      assertNull(mockSettings0.getName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Settings settings0 = new Settings();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockSettings mockSettings0 = Settings.quick();
      assertTrue(mockSettings0.isQuick());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CallHandler callHandler0 = mock(CallHandler.class, new ViolatedAssumptionAnswer());
      VerifyableCallHandlerWrapper verifyableCallHandlerWrapper0 = new VerifyableCallHandlerWrapper(callHandler0);
      MockSettings mockSettings0 = Settings.fallback(verifyableCallHandlerWrapper0);
      assertFalse(mockSettings0.isQuick());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MockSettings mockSettings0 = Settings.notQuick();
      assertNull(mockSettings0.getName());
  }
}
