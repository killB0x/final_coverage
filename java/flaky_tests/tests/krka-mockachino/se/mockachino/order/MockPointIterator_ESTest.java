/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 08:22:52 GMT 2022
 */

package se.mockachino.order;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import se.mockachino.Invocation;
import se.mockachino.order.MockPoint;
import se.mockachino.order.MockPointIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MockPointIterator_ESTest extends MockPointIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Invocation invocation0 = Invocation.NULL;
      Iterator<Invocation> iterator0 = (Iterator<Invocation>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn(invocation0).when(iterator0).next();
      MockPoint mockPoint0 = new MockPoint(1);
      MockPoint mockPoint1 = new MockPoint((-1135));
      MockPointIterator mockPointIterator0 = new MockPointIterator(iterator0, mockPoint1, mockPoint0);
      Invocation invocation1 = mockPointIterator0.next();
      assertSame(invocation0, invocation1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Iterator<Invocation> iterator0 = (Iterator<Invocation>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      MockPoint mockPoint0 = new MockPoint((-207));
      MockPointIterator mockPointIterator0 = new MockPointIterator(iterator0, mockPoint0, mockPoint0);
      Invocation invocation0 = mockPointIterator0.next();
      assertNull(invocation0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Invocation invocation0 = Invocation.NULL;
      Iterator<Invocation> iterator0 = (Iterator<Invocation>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn(invocation0).when(iterator0).next();
      MockPoint mockPoint0 = new MockPoint((-1));
      MockPointIterator mockPointIterator0 = new MockPointIterator(iterator0, mockPoint0, mockPoint0);
      Invocation invocation1 = mockPointIterator0.next();
      assertEquals((-1), invocation1.getCallNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Iterator<Invocation> iterator0 = (Iterator<Invocation>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      MockPointIterator mockPointIterator0 = new MockPointIterator(iterator0, (MockPoint) null, (MockPoint) null);
      // Undeclared exception!
      try { 
        mockPointIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockPoint mockPoint0 = new MockPoint((-1295));
      MockPointIterator mockPointIterator0 = new MockPointIterator((Iterator<Invocation>) null, mockPoint0, mockPoint0);
      // Undeclared exception!
      try { 
        mockPointIterator0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Iterator<Invocation> iterator0 = (Iterator<Invocation>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      MockPoint mockPoint0 = new MockPoint(543);
      MockPointIterator mockPointIterator0 = new MockPointIterator(iterator0, mockPoint0, mockPoint0);
      // Undeclared exception!
      try { 
        mockPointIterator0.fetchNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Invocation invocation0 = Invocation.NULL;
      Iterator<Invocation> iterator0 = (Iterator<Invocation>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn(invocation0).when(iterator0).next();
      MockPoint mockPoint0 = new MockPoint((-1));
      MockPointIterator mockPointIterator0 = new MockPointIterator(iterator0, mockPoint0, mockPoint0);
      Invocation invocation1 = mockPointIterator0.fetchNext();
      assertEquals((-1), invocation1.getCallNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(invocation0).getCallNumber();
      Iterator<Invocation> iterator0 = (Iterator<Invocation>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(iterator0).hasNext();
      doReturn(invocation0).when(iterator0).next();
      MockPoint mockPoint0 = new MockPoint((-207));
      MockPointIterator mockPointIterator0 = new MockPointIterator(iterator0, mockPoint0, mockPoint0);
      mockPointIterator0.hasNext();
      Invocation invocation1 = mockPointIterator0.fetchNext();
      assertNull(invocation1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Invocation invocation0 = Invocation.NULL;
      Iterator<Invocation> iterator0 = (Iterator<Invocation>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(iterator0).hasNext();
      doReturn(invocation0, invocation0, invocation0, invocation0, invocation0).when(iterator0).next();
      MockPoint mockPoint0 = new MockPoint(31);
      MockPointIterator mockPointIterator0 = new MockPointIterator(iterator0, mockPoint0, mockPoint0);
      // Undeclared exception!
      mockPointIterator0.fetchNext();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Iterator<Invocation> iterator0 = (Iterator<Invocation>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      MockPoint mockPoint0 = new MockPoint((-4221));
      MockPointIterator mockPointIterator0 = new MockPointIterator(iterator0, mockPoint0, (MockPoint) null);
      Invocation invocation0 = mockPointIterator0.fetchNext();
      assertNull(invocation0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Invocation invocation0 = Invocation.NULL;
      Iterator<Invocation> iterator0 = (Iterator<Invocation>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, false).when(iterator0).hasNext();
      doReturn(invocation0, invocation0, invocation0, invocation0).when(iterator0).next();
      MockPoint mockPoint0 = new MockPoint(1);
      MockPoint mockPoint1 = new MockPoint((-1));
      MockPointIterator mockPointIterator0 = new MockPointIterator(iterator0, mockPoint1, mockPoint0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      mockPointIterator0.forEachRemaining(consumer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Invocation invocation0 = Invocation.NULL;
      Iterator<Invocation> iterator0 = (Iterator<Invocation>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn(invocation0).when(iterator0).next();
      MockPoint mockPoint0 = new MockPoint(1);
      MockPointIterator mockPointIterator0 = new MockPointIterator(iterator0, mockPoint0, mockPoint0);
      Invocation invocation1 = mockPointIterator0.next();
      assertNull(invocation1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Invocation invocation0 = Invocation.NULL;
      Iterator<Invocation> iterator0 = (Iterator<Invocation>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn(invocation0).when(iterator0).next();
      MockPoint mockPoint0 = new MockPoint(1);
      MockPoint mockPoint1 = new MockPoint((-1));
      MockPointIterator mockPointIterator0 = new MockPointIterator(iterator0, mockPoint1, mockPoint0);
      MockPointIterator mockPointIterator1 = new MockPointIterator(mockPointIterator0, mockPoint0, mockPoint0);
      boolean boolean0 = mockPointIterator1.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Invocation invocation0 = Invocation.NULL;
      Iterator<Invocation> iterator0 = (Iterator<Invocation>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn(invocation0).when(iterator0).next();
      MockPoint mockPoint0 = new MockPoint(1);
      MockPoint mockPoint1 = new MockPoint((-1));
      MockPointIterator mockPointIterator0 = new MockPointIterator(iterator0, mockPoint1, mockPoint0);
      boolean boolean0 = mockPointIterator0.hasNext();
      assertTrue(boolean0);
      
      boolean boolean1 = mockPointIterator0.hasNext();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockPoint mockPoint0 = new MockPoint(0);
      MockPointIterator mockPointIterator0 = new MockPointIterator((Iterator<Invocation>) null, mockPoint0, mockPoint0);
      // Undeclared exception!
      try { 
        mockPointIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("se.mockachino.order.MockPointIterator", e);
      }
  }
}
