/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 08:38:12 GMT 2022
 */

package se.mockachino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import se.mockachino.CallHandler;
import se.mockachino.MockSettings;
import se.mockachino.VerifyableCallHandlerWrapper;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MockSettings_ESTest extends MockSettings_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockSettings mockSettings0 = new MockSettings();
      mockSettings0.quick();
      MockSettings mockSettings1 = mockSettings0.spyOn("@-3V g-is");
      assertTrue(mockSettings1.isQuick());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockSettings mockSettings0 = new MockSettings();
      mockSettings0.quick();
      MockSettings mockSettings1 = mockSettings0.name("");
      assertTrue(mockSettings1.isQuick());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockSettings mockSettings0 = new MockSettings();
      mockSettings0.name("");
      String string0 = mockSettings0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockSettings mockSettings0 = new MockSettings();
      CallHandler callHandler0 = mock(CallHandler.class, new ViolatedAssumptionAnswer());
      VerifyableCallHandlerWrapper verifyableCallHandlerWrapper0 = new VerifyableCallHandlerWrapper(callHandler0);
      mockSettings0.quick();
      MockSettings mockSettings1 = mockSettings0.fallback(verifyableCallHandlerWrapper0);
      assertTrue(mockSettings1.isQuick());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockSettings mockSettings0 = new MockSettings();
      // Undeclared exception!
      try { 
        mockSettings0.name((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // name can not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockSettings mockSettings0 = new MockSettings();
      mockSettings0.name("Q.uyl");
      String string0 = mockSettings0.getName();
      assertEquals("Q.uyl", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockSettings mockSettings0 = new MockSettings();
      // Undeclared exception!
      try { 
        mockSettings0.fallback((CallHandler) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // fallback can not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockSettings mockSettings0 = new MockSettings();
      CallHandler callHandler0 = mock(CallHandler.class, new ViolatedAssumptionAnswer());
      VerifyableCallHandlerWrapper verifyableCallHandlerWrapper0 = new VerifyableCallHandlerWrapper(callHandler0);
      MockSettings mockSettings1 = mockSettings0.fallback(verifyableCallHandlerWrapper0);
      assertSame(mockSettings1, mockSettings0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockSettings mockSettings0 = new MockSettings();
      // Undeclared exception!
      try { 
        mockSettings0.spyOn((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // impl can not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockSettings mockSettings0 = new MockSettings();
      CallHandler callHandler0 = mock(CallHandler.class, new ViolatedAssumptionAnswer());
      MockSettings mockSettings1 = mockSettings0.spyOn(callHandler0);
      assertSame(mockSettings1, mockSettings0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockSettings mockSettings0 = new MockSettings();
      mockSettings0.quick();
      boolean boolean0 = mockSettings0.isQuick();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockSettings mockSettings0 = new MockSettings();
      CallHandler callHandler0 = mockSettings0.getFallback();
      assertNotNull(callHandler0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockSettings mockSettings0 = new MockSettings();
      String string0 = mockSettings0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockSettings mockSettings0 = new MockSettings();
      MockSettings mockSettings1 = mockSettings0.notQuick();
      assertFalse(mockSettings1.isQuick());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockSettings mockSettings0 = new MockSettings();
      boolean boolean0 = mockSettings0.isQuick();
      assertFalse(boolean0);
  }
}
