/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 08:53:52 GMT 2022
 */

package se.mockachino.stub;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import se.mockachino.CallHandler;
import se.mockachino.MockData;
import se.mockachino.VerifyableCallHandler;
import se.mockachino.VerifyableCallHandlerWrapper;
import se.mockachino.matchers.MethodMatcherImpl;
import se.mockachino.stub.StubHandler;
import se.mockachino.util.MockachinoMethod;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StubHandler_ESTest extends StubHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CallHandler callHandler0 = mock(CallHandler.class, new ViolatedAssumptionAnswer());
      VerifyableCallHandlerWrapper verifyableCallHandlerWrapper0 = new VerifyableCallHandlerWrapper(callHandler0);
      Class<Integer> class0 = Integer.class;
      MockData<Integer> mockData0 = new MockData<Integer>(class0, class0, ")cWB`da}");
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      StubHandler stubHandler0 = new StubHandler(verifyableCallHandlerWrapper0, mockData0);
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      Object object0 = stubHandler0.doInvoke(verifyableCallHandlerWrapper0, mockachinoMethod0, classArray0);
      MethodMatcherImpl methodMatcherImpl0 = MethodMatcherImpl.matchAll(mockachinoMethod0);
      stubHandler0.match(object0, mockachinoMethod0, methodMatcherImpl0);
      assertFalse(mockachinoMethod0.isToStringCall());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MockData<Object> mockData0 = new MockData<Object>(class0, class0, "Incorrect usage. You can not chain calls when stubbing a deep mock. You probably used stubReturn(value).on(mock).method1().method2(). Correct usage is stubReturn(value).on(mock.method1()).method2()");
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.EQUALS;
      StackTraceElement stackTraceElement0 = new StackTraceElement("Incorrect usage. You can not chain calls when stubbing a deep mock. You probably used stubReturn(value).on(mock).method1().method2(). Correct usage is stubReturn(value).on(mock.method1()).method2()", "Incorrect usage. You can not chain calls when stubbing a deep mock. You probably used stubReturn(value).on(mock).method1().method2(). Correct usage is stubReturn(value).on(mock.method1()).method2()", "7|z=@J", 0);
      StubHandler stubHandler0 = new StubHandler((VerifyableCallHandler) null, mockData0);
      MethodMatcherImpl methodMatcherImpl0 = MethodMatcherImpl.matchAll(mockachinoMethod0);
      // Undeclared exception!
      try { 
        stubHandler0.match(stackTraceElement0, mockachinoMethod0, methodMatcherImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.stub.StubHandler", e);
      }
  }
}
