/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 08:16:46 GMT 2022
 */

package se.mockachino.stub.returnvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.mockachino.MethodCall;
import se.mockachino.stub.returnvalue.ReturnAnswer;
import se.mockachino.util.MockachinoMethod;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReturnAnswer_ESTest extends ReturnAnswer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      ReturnAnswer returnAnswer0 = new ReturnAnswer((Object) null);
      Object object1 = returnAnswer0.invoke(object0, (MethodCall) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      ReturnAnswer returnAnswer0 = new ReturnAnswer(class0);
      Class class1 = (Class)returnAnswer0.invoke(object0, (MethodCall) null);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ReturnAnswer.verifyReturnType((Class<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.stub.returnvalue.ReturnAnswer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.NULL;
      ReturnAnswer returnAnswer0 = new ReturnAnswer(mockachinoMethod0);
      // Undeclared exception!
      try { 
        returnAnswer0.verify(mockachinoMethod0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.util.MockachinoMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ReturnAnswer.error(class0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a return value of type Object but was Class
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        ReturnAnswer.error(class0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.stub.returnvalue.ReturnAnswer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = new Object();
      ReturnAnswer.verifyReturnType(class0, object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        ReturnAnswer.verifyReturnType(class0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a return value of type Integer but was Class
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ReturnAnswer.verifyReturnType(class0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.EQUALS;
      ReturnAnswer returnAnswer0 = new ReturnAnswer((Object) null);
      // Undeclared exception!
      try { 
        returnAnswer0.verify(mockachinoMethod0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a return value of type boolean but was null
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      Object object1 = mockachinoMethod0.invoke(object0, objectArray0);
      ReturnAnswer returnAnswer0 = new ReturnAnswer(object1);
      ReturnAnswer returnAnswer1 = new ReturnAnswer(returnAnswer0);
      // Undeclared exception!
      try { 
        returnAnswer1.verify(mockachinoMethod0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a return value of type int but was ReturnAnswer
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ReturnAnswer returnAnswer0 = new ReturnAnswer(integer0);
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      returnAnswer0.verify(mockachinoMethod0);
      assertFalse(mockachinoMethod0.isToStringCall());
  }
}
