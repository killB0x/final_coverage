/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 08:30:51 GMT 2022
 */

package se.mockachino.mock;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import se.mockachino.CallHandler;
import se.mockachino.MockData;
import se.mockachino.VerifyableCallHandlerWrapper;
import se.mockachino.mock.MockHandler;
import se.mockachino.observer.MethodObserver;
import se.mockachino.util.MockachinoMethod;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MockHandler_ESTest extends MockHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CallHandler callHandler0 = mock(CallHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callHandler0).invoke(any() , any(se.mockachino.MethodCall.class));
      VerifyableCallHandlerWrapper verifyableCallHandlerWrapper0 = new VerifyableCallHandlerWrapper(callHandler0);
      Class<MethodObserver> class0 = MethodObserver.class;
      MockData<MethodObserver> mockData0 = new MockData<MethodObserver>(class0, class0, "dt2wT$T(r^YnS");
      Class<Object> class1 = Object.class;
      Type type0 = mockData0.getTypeLiteral();
      MockData<Object> mockData1 = new MockData<Object>(class1, type0, "dt2wT$T(r^YnS");
      MockHandler<Object> mockHandler0 = new MockHandler<Object>(verifyableCallHandlerWrapper0, mockData1, false, "dt2wT$T(r^YnS");
      Object[] objectArray0 = new Object[2];
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.EQUALS;
      Object object0 = mockHandler0.doInvoke(objectArray0[0], mockachinoMethod0, objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      CallHandler callHandler0 = mock(CallHandler.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(callHandler0).invoke(any() , any(se.mockachino.MethodCall.class));
      VerifyableCallHandlerWrapper verifyableCallHandlerWrapper0 = new VerifyableCallHandlerWrapper(callHandler0);
      Class<Object> class0 = Object.class;
      MockData<Object> mockData0 = new MockData<Object>(class0, class0, "J=5#U;8j'7vX$");
      MockHandler<Object> mockHandler0 = new MockHandler<Object>(verifyableCallHandlerWrapper0, mockData0, false, "J=5#U;8j'7vX$");
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.EQUALS;
      Object[] objectArray0 = new Object[4];
      Object object1 = mockHandler0.doInvoke(verifyableCallHandlerWrapper0, mockachinoMethod0, objectArray0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockHandler<MethodObserver> mockHandler0 = null;
      try {
        mockHandler0 = new MockHandler<MethodObserver>((CallHandler) null, (MockData<MethodObserver>) null, true, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.mock.MockHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MockData<Object> mockData0 = new MockData<Object>(class0, class0, "L[^Ye{c");
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.EQUALS;
      MockHandler<Object> mockHandler0 = new MockHandler<Object>((CallHandler) null, mockData0, true, "L[^Ye{c");
      try { 
        mockHandler0.doInvoke(class0, mockachinoMethod0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.mock.MockHandler", e);
      }
  }
}
