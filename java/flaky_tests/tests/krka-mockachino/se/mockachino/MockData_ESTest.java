/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 08:11:31 GMT 2022
 */

package se.mockachino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.mockachino.Invocation;
import se.mockachino.MockData;
import se.mockachino.observer.MethodObserver;
import se.mockachino.order.MockPoint;
import se.mockachino.stub.MethodStubs;
import se.mockachino.util.MockachinoMethod;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MockData_ESTest extends MockData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, class0, (String) null);
      Object object0 = new Object();
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      Object[] objectArray0 = new Object[6];
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      mockData0.addCall(object0, mockachinoMethod0, objectArray0, stackTraceElementArray0);
      mockData0.addCall(object0, mockachinoMethod0, (Object[]) null, stackTraceElementArray0);
      mockData0.deleteLastInvocation();
      assertNull(mockData0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, class0, "3nH?Y?y!a<Q^|>A>J");
      MockPoint mockPoint0 = new MockPoint((-3428));
      MockPoint mockPoint1 = new MockPoint(1366);
      Iterable<Invocation> iterable0 = mockData0.getCalls(mockPoint0, mockPoint1);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, (Type) null, (String) null);
      Type type0 = mockData0.getTypeLiteral();
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, class0, (String) null);
      MethodStubs methodStubs0 = mockData0.getStubs((MockachinoMethod) null);
      assertNull(methodStubs0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, class0, (String) null);
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.NULL;
      List<MethodObserver> list0 = mockData0.getObservers(mockachinoMethod0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, class0, (String) null);
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      List<MethodObserver> list0 = mockData0.getObservers(mockachinoMethod0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>((Class<MockachinoMethod>) null, class0, "se.mockachino.Invocation$1");
      String string0 = mockData0.getName();
      assertEquals("se.mockachino.Invocation$1", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, class0, "");
      String string0 = mockData0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>((Class<MockachinoMethod>) null, class0, (String) null);
      Class<MockachinoMethod> class1 = mockData0.getInterface();
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, class0, "Yuq+");
      Object[] objectArray0 = new Object[0];
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      // Undeclared exception!
      try { 
        mockData0.addCall((Object) null, (MockachinoMethod) null, objectArray0, stackTraceElementArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.MockData", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>((Class<MockachinoMethod>) null, class0, "5");
      MockData<MockachinoMethod> mockData1 = new MockData<MockachinoMethod>(class0, class0, "#y4s=`1_Z\"4OJw_N(");
      assertEquals("#y4s=`1_Z\"4OJw_N(", mockData1.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, class0, (String) null);
      mockData0.deleteLastInvocation();
      assertNull(mockData0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, class0, (String) null);
      mockData0.resetObservers();
      assertNull(mockData0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, class0, (String) null);
      mockData0.resetStubs();
      assertNull(mockData0.getName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, class0, (String) null);
      Object object0 = new Object();
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.NULL;
      Object[] objectArray0 = new Object[4];
      mockData0.addCall(object0, mockachinoMethod0, objectArray0, (StackTraceElement[]) null);
      mockData0.deleteLastInvocation();
      assertNull(mockData0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, class0, "toString");
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.find(class0, "toString");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      Invocation invocation0 = mockData0.addCall(mockachinoMethod0, mockachinoMethod0, (Object[]) null, stackTraceElementArray0);
      assertEquals(1, invocation0.getCallNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, (Type) null, (String) null);
      Set<MockachinoMethod> set0 = mockData0.getMethods();
      assertEquals(22, set0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, class0, (String) null);
      Iterable<Invocation> iterable0 = mockData0.getInvocations();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, class0, (String) null);
      Class<MockachinoMethod> class1 = mockData0.getInterface();
      assertSame(class0, class1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, class0, (String) null);
      MockachinoMethod mockachinoMethod0 = MockachinoMethod.HASHCODE;
      MethodStubs methodStubs0 = mockData0.getStubs(mockachinoMethod0);
      assertNotNull(methodStubs0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, class0, (String) null);
      String string0 = mockData0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, class0, (String) null);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      MockachinoMethod mockachinoMethod0 = new MockachinoMethod((String) null, classArray0, class0);
      // Undeclared exception!
      try { 
        mockData0.getObservers(mockachinoMethod0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.mockachino.util.MockachinoMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, class0, (String) null);
      mockData0.resetCalls();
      assertNull(mockData0.getName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<MockachinoMethod> class0 = MockachinoMethod.class;
      MockData<MockachinoMethod> mockData0 = new MockData<MockachinoMethod>(class0, class0, "mAmmC|vb;s9q");
      Class class1 = (Class)mockData0.getTypeLiteral();
      assertEquals(1, class1.getModifiers());
  }
}
