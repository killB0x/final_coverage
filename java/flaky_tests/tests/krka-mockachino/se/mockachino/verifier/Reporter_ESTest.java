/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 08:07:48 GMT 2022
 */

package se.mockachino.verifier;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.mockachino.verifier.Reporter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Reporter_ESTest extends Reporter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Reporter reporter0 = new Reporter((-28), 584, 584);
      String string0 = reporter0.getErrorLine();
      assertNotNull(string0);
      assertEquals("Expected 584 calls but only got -28 calls", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Reporter reporter0 = new Reporter(0, 0, 7);
      String string0 = reporter0.getErrorLine();
      assertNull(string0);
      assertTrue(reporter0.isOk());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Reporter reporter0 = new Reporter((-664), (-1), (-1));
      String string0 = reporter0.getErrorLine();
      assertNull(string0);
      assertFalse(reporter0.isOk());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Reporter reporter0 = new Reporter(1, 0, 440);
      boolean boolean0 = reporter0.isOk();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Reporter reporter0 = new Reporter(852, 4500, 852);
      String string0 = reporter0.getErrorLine();
      assertNotNull(string0);
      assertEquals("Expected at least 4500 calls but only got 852 calls", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Reporter reporter0 = new Reporter(1085, 1085, 1085);
      String string0 = reporter0.getErrorLine();
      assertNull(string0);
      assertTrue(reporter0.isOk());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Reporter reporter0 = new Reporter(0, 529, 529);
      String string0 = reporter0.getErrorLine();
      assertEquals("Expected 529 calls but got no calls", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Reporter reporter0 = new Reporter(1569, 1, 1);
      String string0 = reporter0.getErrorLine();
      assertEquals("Expected 1 call but got 1569 calls", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Reporter reporter0 = new Reporter(38, (-1), (-1));
      String string0 = reporter0.getErrorLine();
      assertEquals("Expected no calls but got 38 calls", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Reporter reporter0 = new Reporter(0, 0, 0);
      String string0 = reporter0.getErrorLine();
      assertTrue(reporter0.isOk());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Reporter reporter0 = new Reporter(529, (-1), 139);
      String string0 = reporter0.getErrorLine();
      assertEquals("Expected at most 139 calls but got 529 calls", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Reporter reporter0 = new Reporter(529, (-1), 139);
      boolean boolean0 = reporter0.isOk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Reporter reporter0 = new Reporter(0, 529, 529);
      boolean boolean0 = reporter0.isOk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Reporter reporter0 = new Reporter(0, 0, 0);
      boolean boolean0 = reporter0.isOk();
      assertTrue(boolean0);
  }
}
