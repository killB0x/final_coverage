/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 03:55:38 GMT 2022
 */

package net.goldolphin.cate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import net.goldolphin.cate.Action1;
import net.goldolphin.cate.Action1Task;
import net.goldolphin.cate.CollectTask;
import net.goldolphin.cate.Context;
import net.goldolphin.cate.ContextAction;
import net.goldolphin.cate.ContextCollectTask;
import net.goldolphin.cate.ContextTask;
import net.goldolphin.cate.Environment;
import net.goldolphin.cate.ExecutorScheduler;
import net.goldolphin.cate.FlattenTask;
import net.goldolphin.cate.Func0;
import net.goldolphin.cate.Func0Task;
import net.goldolphin.cate.Func1;
import net.goldolphin.cate.Func1Task;
import net.goldolphin.cate.IContinuation;
import net.goldolphin.cate.IScheduler;
import net.goldolphin.cate.ITask;
import net.goldolphin.cate.SeqTask;
import net.goldolphin.cate.SynchronizedScheduler;
import net.goldolphin.cate.Task;
import net.goldolphin.cate.TaskWithInitState;
import net.goldolphin.cate.TaskWithScheduler;
import net.goldolphin.cate.Waiter;
import net.goldolphin.cate.WhenAllTask;
import net.goldolphin.cate.WhenAnyTask;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Context_ESTest extends Context_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      IContinuation iContinuation0 = IContinuation.END_CONTINUATION;
      Environment environment0 = Environment.empty();
      Context<Integer, ForkJoinPool> context0 = new Context<Integer, ForkJoinPool>(integer0, iContinuation0, environment0, (IScheduler) null);
      ForkJoinTask.getPool();
      TaskWithInitState<ForkJoinPool, Integer> taskWithInitState0 = new TaskWithInitState<ForkJoinPool, Integer>((ITask<ForkJoinPool, Integer>) null, (ForkJoinPool) null);
      Context<TaskWithInitState<ForkJoinPool, Integer>, TaskWithInitState<Integer, Integer>> context1 = new Context<TaskWithInitState<ForkJoinPool, Integer>, TaskWithInitState<Integer, Integer>>(taskWithInitState0, iContinuation0, environment0, (IScheduler) null);
      context1.getScheduler();
      Func1<Integer, TaskWithInitState<Integer, Integer>> func1_0 = (Func1<Integer, TaskWithInitState<Integer, Integer>>) mock(Func1.class, new ViolatedAssumptionAnswer());
      Func1Task<Integer, TaskWithInitState<Integer, Integer>> func1Task0 = new Func1Task<Integer, TaskWithInitState<Integer, Integer>>(func1_0);
      FlattenTask<Integer, Integer, TaskWithInitState<Integer, Integer>> flattenTask0 = new FlattenTask<Integer, Integer, TaskWithInitState<Integer, Integer>>(func1Task0);
      Integer integer1 = new Integer(36);
      TaskWithInitState<Integer, Integer> taskWithInitState1 = new TaskWithInitState<Integer, Integer>(flattenTask0, integer1);
      Context<TaskWithInitState<Integer, Integer>, Integer> context2 = new Context<TaskWithInitState<Integer, Integer>, Integer>(taskWithInitState1, iContinuation0, environment0, (IScheduler) null);
      context2.getScheduler();
      Context<ForkJoinPool, Integer> context3 = new Context<ForkJoinPool, Integer>((ForkJoinPool) null, iContinuation0, environment0, (IScheduler) null);
      IScheduler iScheduler0 = context3.getScheduler();
      assertNull(iScheduler0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(733);
      Func1<Integer, Integer> func1_0 = (Func1<Integer, Integer>) mock(Func1.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func1_0).apply(anyInt());
      Func1Task<Integer, Integer> func1Task0 = new Func1Task<Integer, Integer>(func1_0);
      ITask<Integer, Integer>[] iTaskArray0 = (ITask<Integer, Integer>[]) Array.newInstance(ITask.class, 8);
      iTaskArray0[0] = (ITask<Integer, Integer>) func1Task0;
      iTaskArray0[1] = (ITask<Integer, Integer>) func1Task0;
      iTaskArray0[2] = (ITask<Integer, Integer>) func1Task0;
      iTaskArray0[3] = (ITask<Integer, Integer>) func1Task0;
      iTaskArray0[4] = (ITask<Integer, Integer>) func1Task0;
      iTaskArray0[5] = (ITask<Integer, Integer>) func1Task0;
      iTaskArray0[6] = (ITask<Integer, Integer>) func1Task0;
      iTaskArray0[7] = (ITask<Integer, Integer>) func1Task0;
      WhenAnyTask<Integer> whenAnyTask0 = new WhenAnyTask<Integer>(iTaskArray0);
      IContinuation[] iContinuationArray0 = new IContinuation[1];
      Func0<Integer> func0_0 = (Func0<Integer>) mock(Func0.class, new ViolatedAssumptionAnswer());
      Func0Task<Integer> func0Task0 = new Func0Task<Integer>(func0_0);
      IContinuation iContinuation0 = func0Task0.buildContinuation((IContinuation) null);
      iContinuationArray0[0] = iContinuation0;
      ContextCollectTask.DispatcherContinuation contextCollectTask_DispatcherContinuation0 = new ContextCollectTask.DispatcherContinuation(iContinuationArray0);
      WhenAnyTask.Continuation whenAnyTask_Continuation0 = whenAnyTask0.new Continuation(contextCollectTask_DispatcherContinuation0);
      CollectTask.IndexContinuation collectTask_IndexContinuation0 = new CollectTask.IndexContinuation(733, whenAnyTask_Continuation0);
      IContinuation iContinuation1 = func1Task0.buildContinuation(collectTask_IndexContinuation0);
      Environment environment0 = Environment.empty();
      Environment environment1 = environment0.extend(integer0);
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      Context<Integer, Integer> context0 = new Context<Integer, Integer>(integer0, iContinuation1, environment1, synchronizedScheduler0);
      Integer integer1 = new Integer(733);
      // Undeclared exception!
      try { 
        context0.resume(integer1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Integer cannot be cast to class net.goldolphin.cate.CollectTask$Counter (java.lang.Integer is in module java.base of loader 'bootstrap'; net.goldolphin.cate.CollectTask$Counter is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @25dfecc3)
         //
         verifyException("net.goldolphin.cate.WhenAnyTask$Continuation", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(0);
      IContinuation iContinuation0 = IContinuation.END_CONTINUATION;
      Environment environment0 = Environment.empty();
      ContextAction<Integer, Integer> contextAction0 = (ContextAction<Integer, Integer>) mock(ContextAction.class, new ViolatedAssumptionAnswer());
      ContextTask<Integer, Integer> contextTask0 = new ContextTask<Integer, Integer>(contextAction0);
      Integer integer1 = new Integer(0);
      TaskWithInitState<Integer, Integer> taskWithInitState0 = new TaskWithInitState<Integer, Integer>(contextTask0, integer1);
      Integer integer2 = new Integer(0);
      ITask<Integer, Integer>[] iTaskArray0 = (ITask<Integer, Integer>[]) Array.newInstance(ITask.class, 0);
      WhenAllTask<Integer> whenAllTask0 = new WhenAllTask<Integer>(iTaskArray0);
      IContinuation iContinuation1 = whenAllTask0.buildContinuation(iContinuation0);
      Context<Integer, TaskWithInitState<Integer, Integer>> context0 = new Context<Integer, TaskWithInitState<Integer, Integer>>(integer2, iContinuation1, environment0, (IScheduler) null);
      // Undeclared exception!
      try { 
        context0.resume(taskWithInitState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.goldolphin.cate.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Func1<Integer, Integer> func1_0 = (Func1<Integer, Integer>) mock(Func1.class, new ViolatedAssumptionAnswer());
      Func1Task<Integer, Integer> func1Task0 = new Func1Task<Integer, Integer>(func1_0);
      Task<Integer, TaskWithInitState<Integer, Integer>> task0 = Task.create((ContextAction<Integer, TaskWithInitState<Integer, Integer>>) null);
      SeqTask<Integer, Integer, TaskWithInitState<Integer, Integer>> seqTask0 = new SeqTask<Integer, Integer, TaskWithInitState<Integer, Integer>>(func1Task0, task0);
      FlattenTask<Integer, Integer, TaskWithInitState<Integer, Integer>> flattenTask0 = new FlattenTask<Integer, Integer, TaskWithInitState<Integer, Integer>>(seqTask0);
      IContinuation iContinuation0 = flattenTask0.buildContinuation((IContinuation) null);
      Environment environment0 = Environment.empty();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      ExecutorScheduler executorScheduler0 = new ExecutorScheduler(forkJoinPool0);
      Context<Integer, Integer> context0 = new Context<Integer, Integer>(integer0, iContinuation0, environment0, executorScheduler0);
      context0.resume(integer0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IContinuation iContinuation0 = IContinuation.END_CONTINUATION;
      Environment environment0 = Environment.empty();
      environment0.getParent();
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      Context<Integer, Integer> context0 = new Context<Integer, Integer>((Integer) null, iContinuation0, (Environment) null, synchronizedScheduler0);
      Context<Integer, TaskWithInitState<Integer, Integer>> context1 = new Context<Integer, TaskWithInitState<Integer, Integer>>((Integer) null, iContinuation0, (Environment) null, synchronizedScheduler0);
      context1.getState();
      Func1<Integer, Integer> func1_0 = (Func1<Integer, Integer>) mock(Func1.class, new ViolatedAssumptionAnswer());
      Func1Task<Integer, Integer> func1Task0 = new Func1Task<Integer, Integer>(func1_0);
      TaskWithScheduler<Integer, Integer> taskWithScheduler0 = new TaskWithScheduler<Integer, Integer>(func1Task0, synchronizedScheduler0);
      Task<Integer, Integer> task0 = taskWithScheduler0.flatten();
      TaskWithInitState<Integer, Integer> taskWithInitState0 = new TaskWithInitState<Integer, Integer>(task0, (Integer) null);
      Context<TaskWithInitState<Integer, Integer>, Integer> context2 = new Context<TaskWithInitState<Integer, Integer>, Integer>(taskWithInitState0, iContinuation0, environment0, synchronizedScheduler0);
      Integer integer0 = new Integer(1057);
      context2.resume(integer0);
      context2.resume((Integer) null);
      Integer integer1 = new Integer(796);
      context0.resume(integer1);
      context1.resume(taskWithInitState0);
      TaskWithInitState<Integer, Integer> taskWithInitState1 = context2.getState();
      assertSame(taskWithInitState1, taskWithInitState0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Action1Task<Integer> action1Task0 = new Action1Task<Integer>((Action1<Integer>) null);
      Func1<Integer, Integer> func1_0 = (Func1<Integer, Integer>) mock(Func1.class, new ViolatedAssumptionAnswer());
      Func1Task<Integer, Integer> func1Task0 = new Func1Task<Integer, Integer>(func1_0);
      IContinuation iContinuation0 = IContinuation.END_CONTINUATION;
      FlattenTask.Continuation flattenTask_Continuation0 = new FlattenTask.Continuation(iContinuation0);
      IContinuation iContinuation1 = func1Task0.buildContinuation(flattenTask_Continuation0);
      IContinuation iContinuation2 = action1Task0.buildContinuation(iContinuation1);
      Environment environment0 = Environment.empty();
      Task.create((ContextAction<Delayed, Integer>) null);
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      Context<Integer, Integer> context0 = new Context<Integer, Integer>(integer0, iContinuation2, environment0, synchronizedScheduler0);
      IScheduler iScheduler0 = context0.getScheduler();
      Context<Delayed, Delayed> context1 = new Context<Delayed, Delayed>((Delayed) null, iContinuation0, environment0, iScheduler0);
      context1.resume((Delayed) null);
      Integer integer1 = new Integer(0);
      IScheduler iScheduler1 = context0.getScheduler();
      assertSame(iScheduler1, synchronizedScheduler0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ContextAction<CollectTask.Result, TaskWithInitState<Integer, Integer>> contextAction0 = (ContextAction<CollectTask.Result, TaskWithInitState<Integer, Integer>>) mock(ContextAction.class, new ViolatedAssumptionAnswer());
      ITask<Integer, Integer>[] iTaskArray0 = (ITask<Integer, Integer>[]) Array.newInstance(ITask.class, 1);
      ContextAction<Integer, Integer> contextAction1 = (ContextAction<Integer, Integer>) mock(ContextAction.class, new ViolatedAssumptionAnswer());
      ContextTask<Integer, Integer> contextTask0 = new ContextTask<Integer, Integer>(contextAction1);
      Waiter<Integer, Integer> waiter0 = new Waiter<Integer, Integer>(contextTask0);
      iTaskArray0[0] = (ITask<Integer, Integer>) waiter0;
      ContextCollectTask<Integer, TaskWithInitState<Integer, Integer>> contextCollectTask0 = new ContextCollectTask<Integer, TaskWithInitState<Integer, Integer>>(contextAction0, iTaskArray0);
      FlattenTask<Integer, Integer, TaskWithInitState<Integer, Integer>> flattenTask0 = new FlattenTask<Integer, Integer, TaskWithInitState<Integer, Integer>>(contextCollectTask0);
      TaskWithInitState<Integer, Integer> taskWithInitState0 = new TaskWithInitState<Integer, Integer>(flattenTask0, (Integer) null);
      WhenAllTask<Integer> whenAllTask0 = new WhenAllTask<Integer>(iTaskArray0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      ExecutorScheduler executorScheduler0 = new ExecutorScheduler(forkJoinPool0);
      TaskWithScheduler<Integer, Integer> taskWithScheduler0 = new TaskWithScheduler<Integer, Integer>(iTaskArray0[0], executorScheduler0);
      TaskWithScheduler.Continuation taskWithScheduler_Continuation0 = taskWithScheduler0.new Continuation((IContinuation) null);
      IContinuation iContinuation0 = whenAllTask0.buildContinuation(taskWithScheduler_Continuation0);
      Environment environment0 = Environment.empty();
      Context<TaskWithInitState<Integer, Integer>, Integer> context0 = new Context<TaskWithInitState<Integer, Integer>, Integer>(taskWithInitState0, iContinuation0, environment0, executorScheduler0);
      Context<Integer, Integer> context1 = new Context<Integer, Integer>((Integer) null, iContinuation0, environment0, executorScheduler0);
      context1.getState();
      IScheduler iScheduler0 = context1.getScheduler();
      context1.resume((Integer) null);
      context1.resume((Integer) null);
      IScheduler iScheduler1 = context1.getScheduler();
      Context<TaskWithInitState<Integer, Integer>, TaskWithInitState<Integer, Integer>> context2 = new Context<TaskWithInitState<Integer, Integer>, TaskWithInitState<Integer, Integer>>(taskWithInitState0, (IContinuation) null, environment0, iScheduler1);
      TaskWithInitState<Integer, Integer> taskWithInitState1 = context2.getState();
      context0.getScheduler();
      Integer integer0 = new Integer((-1));
      Context<Integer, TaskWithInitState<Integer, Integer>> context3 = new Context<Integer, TaskWithInitState<Integer, Integer>>(integer0, taskWithScheduler_Continuation0, environment0, iScheduler0);
      context3.resume(taskWithInitState0);
      assertSame(taskWithInitState0, taskWithInitState1);
  }
}
