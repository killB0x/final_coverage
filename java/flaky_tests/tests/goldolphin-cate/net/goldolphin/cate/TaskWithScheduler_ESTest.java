/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 03:41:46 GMT 2022
 */

package net.goldolphin.cate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import net.goldolphin.cate.Action0Task;
import net.goldolphin.cate.CollectTask;
import net.goldolphin.cate.ContextAction;
import net.goldolphin.cate.ContextCollectTask;
import net.goldolphin.cate.ContextTask;
import net.goldolphin.cate.Environment;
import net.goldolphin.cate.Func0Task;
import net.goldolphin.cate.Func1;
import net.goldolphin.cate.Func1Task;
import net.goldolphin.cate.IContinuation;
import net.goldolphin.cate.IScheduler;
import net.goldolphin.cate.ITask;
import net.goldolphin.cate.IdenticalTask;
import net.goldolphin.cate.SeqTask;
import net.goldolphin.cate.SynchronizedScheduler;
import net.goldolphin.cate.Task;
import net.goldolphin.cate.TaskWithInitState;
import net.goldolphin.cate.TaskWithScheduler;
import net.goldolphin.cate.Waiter;
import net.goldolphin.cate.WhenAllTask;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TaskWithScheduler_ESTest extends TaskWithScheduler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Func1<Action0Task, Func0Task<Integer>> func1_0 = (Func1<Action0Task, Func0Task<Integer>>) mock(Func1.class, new ViolatedAssumptionAnswer());
      Func1<TaskWithInitState<Object, Integer>, Object> func1_1 = (Func1<TaskWithInitState<Object, Integer>, Object>) mock(Func1.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func1_1).apply(any(net.goldolphin.cate.TaskWithInitState.class));
      Func1Task<TaskWithInitState<Object, Integer>, Object> func1Task0 = new Func1Task<TaskWithInitState<Object, Integer>, Object>(func1_1);
      Waiter<TaskWithInitState<Object, Integer>, Object> waiter0 = new Waiter<TaskWithInitState<Object, Integer>, Object>(func1Task0);
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      TaskWithScheduler<TaskWithInitState<Object, Integer>, Object> taskWithScheduler0 = new TaskWithScheduler<TaskWithInitState<Object, Integer>, Object>(waiter0, synchronizedScheduler0);
      IContinuation iContinuation0 = IContinuation.END_CONTINUATION;
      TaskWithScheduler.Continuation taskWithScheduler_Continuation0 = taskWithScheduler0.new Continuation(iContinuation0);
      Object object0 = new Object();
      Environment environment0 = Environment.empty();
      Object object1 = new Object();
      taskWithScheduler_Continuation0.apply(object1, environment0, synchronizedScheduler0);
      ContextAction<CollectTask.Result, WhenAllTask<Integer>> contextAction0 = (ContextAction<CollectTask.Result, WhenAllTask<Integer>>) mock(ContextAction.class, new ViolatedAssumptionAnswer());
      ITask<SeqTask<Integer, Object, Integer>, Integer>[] iTaskArray0 = (ITask<SeqTask<Integer, Object, Integer>, Integer>[]) Array.newInstance(ITask.class, 3);
      Task<SeqTask<Integer, Object, Integer>, Integer> task0 = Task.create((Func1<SeqTask<Integer, Object, Integer>, Integer>) null);
      iTaskArray0[0] = (ITask<SeqTask<Integer, Object, Integer>, Integer>) task0;
      ContextAction<CollectTask.Result, Integer> contextAction1 = (ContextAction<CollectTask.Result, Integer>) mock(ContextAction.class, new ViolatedAssumptionAnswer());
      ContextCollectTask<SeqTask<Integer, Object, Integer>, Integer> contextCollectTask0 = new ContextCollectTask<SeqTask<Integer, Object, Integer>, Integer>(contextAction1, iTaskArray0);
      iTaskArray0[1] = (ITask<SeqTask<Integer, Object, Integer>, Integer>) contextCollectTask0;
      Task<SeqTask<Integer, Object, Integer>, Integer> task1 = Task.create((Func1<SeqTask<Integer, Object, Integer>, Integer>) null);
      Waiter<SeqTask<Integer, Object, Integer>, Integer> waiter1 = new Waiter<SeqTask<Integer, Object, Integer>, Integer>(task1);
      iTaskArray0[2] = (ITask<SeqTask<Integer, Object, Integer>, Integer>) waiter1;
      CollectTask<SeqTask<Integer, Object, Integer>, WhenAllTask<Integer>> collectTask0 = Task.when((ContextAction<CollectTask.Result, WhenAllTask<Integer>>) contextAction0, (ITask<SeqTask<Integer, Object, Integer>, ?>[]) iTaskArray0);
      TaskWithScheduler<SeqTask<Integer, Object, Integer>, WhenAllTask<Integer>> taskWithScheduler1 = new TaskWithScheduler<SeqTask<Integer, Object, Integer>, WhenAllTask<Integer>>(collectTask0, synchronizedScheduler0);
      // Undeclared exception!
      taskWithScheduler1.buildContinuation(iContinuation0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Func1<Integer, Integer> func1_0 = (Func1<Integer, Integer>) mock(Func1.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(func1_0).apply(anyInt());
      Task<Integer, Integer> task0 = Task.create(func1_0);
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      TaskWithScheduler<Integer, Integer> taskWithScheduler0 = new TaskWithScheduler<Integer, Integer>(task0, synchronizedScheduler0);
      TaskWithScheduler<Integer, Integer> taskWithScheduler1 = new TaskWithScheduler<Integer, Integer>(taskWithScheduler0, synchronizedScheduler0);
      TaskWithScheduler<Integer, Integer> taskWithScheduler2 = new TaskWithScheduler<Integer, Integer>(task0, synchronizedScheduler0);
      TaskWithScheduler.Continuation taskWithScheduler_Continuation0 = taskWithScheduler2.new Continuation((IContinuation) null);
      SynchronizedScheduler synchronizedScheduler1 = new SynchronizedScheduler();
      TaskWithScheduler<Integer, Integer> taskWithScheduler3 = new TaskWithScheduler<Integer, Integer>(taskWithScheduler1, synchronizedScheduler1);
      ITask<Integer, Integer>[] iTaskArray0 = (ITask<Integer, Integer>[]) Array.newInstance(ITask.class, 9);
      iTaskArray0[0] = (ITask<Integer, Integer>) taskWithScheduler1;
      Waiter<Integer, Integer> waiter0 = taskWithScheduler3.continueWithWaiter();
      iTaskArray0[1] = (ITask<Integer, Integer>) waiter0;
      iTaskArray0[2] = (ITask<Integer, Integer>) task0;
      iTaskArray0[3] = (ITask<Integer, Integer>) taskWithScheduler2;
      iTaskArray0[4] = (ITask<Integer, Integer>) taskWithScheduler3;
      iTaskArray0[5] = (ITask<Integer, Integer>) taskWithScheduler1;
      iTaskArray0[6] = (ITask<Integer, Integer>) taskWithScheduler3;
      iTaskArray0[7] = (ITask<Integer, Integer>) task0;
      iTaskArray0[8] = (ITask<Integer, Integer>) taskWithScheduler0;
      Task.whenAny((ITask<Integer, ?>[]) iTaskArray0);
      TaskWithScheduler.Continuation taskWithScheduler_Continuation1 = taskWithScheduler0.new Continuation(taskWithScheduler_Continuation0);
      Func1<Integer, Integer> func1_1 = (Func1<Integer, Integer>) mock(Func1.class, new ViolatedAssumptionAnswer());
      taskWithScheduler2.continueWith(func1_1);
      Environment environment0 = Environment.empty();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        taskWithScheduler_Continuation0.apply(object0, environment0, synchronizedScheduler1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.goldolphin.cate.SynchronizedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Func1Task<TaskWithInitState<Object, Integer>, Object> func1Task0 = new Func1Task<TaskWithInitState<Object, Integer>, Object>((Func1<TaskWithInitState<Object, Integer>, Object>) null);
      TaskWithScheduler<TaskWithInitState<Object, Integer>, Object> taskWithScheduler0 = new TaskWithScheduler<TaskWithInitState<Object, Integer>, Object>(func1Task0, (IScheduler) null);
      IContinuation iContinuation0 = IContinuation.END_CONTINUATION;
      TaskWithScheduler.Continuation taskWithScheduler_Continuation0 = taskWithScheduler0.new Continuation(iContinuation0);
      Object object0 = new Object();
      Environment environment0 = Environment.empty();
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      // Undeclared exception!
      try { 
        taskWithScheduler_Continuation0.apply(object0, environment0, synchronizedScheduler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.goldolphin.cate.TaskWithScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ContextAction<Integer, Action0Task> contextAction0 = (ContextAction<Integer, Action0Task>) mock(ContextAction.class, new ViolatedAssumptionAnswer());
      ContextTask<Integer, Action0Task> contextTask0 = new ContextTask<Integer, Action0Task>(contextAction0);
      TaskWithScheduler<Integer, Action0Task> taskWithScheduler0 = new TaskWithScheduler<Integer, Action0Task>(contextTask0, (IScheduler) null);
      CollectTask.IndexContinuation collectTask_IndexContinuation0 = new CollectTask.IndexContinuation((-2404), (IContinuation) null);
      TaskWithScheduler.Continuation taskWithScheduler_Continuation0 = taskWithScheduler0.new Continuation(collectTask_IndexContinuation0);
      Environment environment0 = Environment.empty();
      Object object0 = new Object();
      Environment environment1 = environment0.extend(object0);
      taskWithScheduler_Continuation0.apply((Object) null, environment1, (IScheduler) null);
      assertFalse(environment1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IContinuation iContinuation0 = IContinuation.END_CONTINUATION;
      Object object0 = new Object();
      Environment.empty();
      TaskWithScheduler<Integer, TaskWithInitState<Integer, Object>> taskWithScheduler0 = new TaskWithScheduler<Integer, TaskWithInitState<Integer, Object>>((ITask<Integer, TaskWithInitState<Integer, Object>>) null, (IScheduler) null);
      // Undeclared exception!
      try { 
        taskWithScheduler0.buildContinuation(iContinuation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.goldolphin.cate.TaskWithScheduler$Continuation", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Func1<Func0Task<Integer>, Action0Task> func1_0 = (Func1<Func0Task<Integer>, Action0Task>) mock(Func1.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(func1_0).apply(any(net.goldolphin.cate.Func0Task.class));
      Task<Func0Task<Integer>, Action0Task> task0 = Task.create(func1_0);
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      TaskWithScheduler<Func0Task<Integer>, Action0Task> taskWithScheduler0 = new TaskWithScheduler<Func0Task<Integer>, Action0Task>(task0, synchronizedScheduler0);
      Func1<Integer, Integer> func1_1 = (Func1<Integer, Integer>) mock(Func1.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func1_1).apply(anyInt());
      Func1Task<Integer, Integer> func1Task0 = new Func1Task<Integer, Integer>(func1_1);
      taskWithScheduler0.continueWithWaiter();
      IContinuation iContinuation0 = func1Task0.buildContinuation((IContinuation) null);
      IContinuation iContinuation1 = taskWithScheduler0.buildContinuation(iContinuation0);
      TaskWithScheduler.Continuation taskWithScheduler_Continuation0 = taskWithScheduler0.new Continuation(iContinuation1);
      Integer integer0 = new Integer((-489));
      Environment environment0 = Environment.empty();
      Environment environment1 = environment0.extend(integer0);
      // Undeclared exception!
      try { 
        taskWithScheduler_Continuation0.apply(integer0, environment1, synchronizedScheduler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.goldolphin.cate.Func1Task$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Func1Task<TaskWithInitState<Object, Integer>, Object> func1Task0 = new Func1Task<TaskWithInitState<Object, Integer>, Object>((Func1<TaskWithInitState<Object, Integer>, Object>) null);
      TaskWithScheduler<TaskWithInitState<Object, Integer>, Object> taskWithScheduler0 = new TaskWithScheduler<TaskWithInitState<Object, Integer>, Object>(func1Task0, (IScheduler) null);
      IContinuation iContinuation0 = IContinuation.END_CONTINUATION;
      TaskWithScheduler.Continuation taskWithScheduler_Continuation0 = taskWithScheduler0.new Continuation(iContinuation0);
      Object object0 = new Object();
      Environment environment0 = Environment.empty();
      // Undeclared exception!
      try { 
        taskWithScheduler_Continuation0.apply(object0, environment0, (IScheduler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.goldolphin.cate.Func1Task$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Func1Task<Action0Task, Func0Task<Integer>> func1Task0 = new Func1Task<Action0Task, Func0Task<Integer>>((Func1<Action0Task, Func0Task<Integer>>) null);
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      TaskWithScheduler<Action0Task, Func0Task<Integer>> taskWithScheduler0 = new TaskWithScheduler<Action0Task, Func0Task<Integer>>(func1Task0, synchronizedScheduler0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      IdenticalTask<Action0Task> identicalTask0 = IdenticalTask.instance();
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      TaskWithScheduler<Action0Task, Action0Task> taskWithScheduler0 = new TaskWithScheduler<Action0Task, Action0Task>(identicalTask0, synchronizedScheduler0);
      TaskWithScheduler.Continuation taskWithScheduler_Continuation0 = taskWithScheduler0.new Continuation((IContinuation) null);
      Object object0 = new Object();
      Environment.empty();
      IContinuation iContinuation0 = IContinuation.END_CONTINUATION;
      TaskWithScheduler.Continuation taskWithScheduler_Continuation1 = taskWithScheduler0.new Continuation(taskWithScheduler_Continuation0);
      Object object1 = new Object();
      Environment.empty();
      TaskWithScheduler.Continuation taskWithScheduler_Continuation2 = taskWithScheduler0.new Continuation((IContinuation) null);
      Environment environment0 = Environment.empty();
      // Undeclared exception!
      try { 
        taskWithScheduler_Continuation2.apply(object1, environment0, synchronizedScheduler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.goldolphin.cate.TaskWithScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Func1<Integer, Integer> func1_0 = (Func1<Integer, Integer>) mock(Func1.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func1_0).apply(anyInt());
      Task<Integer, Integer> task0 = Task.create(func1_0);
      SeqTask<Integer, Integer, Integer> seqTask0 = new SeqTask<Integer, Integer, Integer>(task0, task0);
      ITask<Integer, Integer> iTask0 = seqTask0.subsequent;
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      TaskWithScheduler<Integer, Integer> taskWithScheduler0 = new TaskWithScheduler<Integer, Integer>(iTask0, synchronizedScheduler0);
      TaskWithScheduler.Continuation taskWithScheduler_Continuation0 = taskWithScheduler0.new Continuation((IContinuation) null);
      Func1<Integer, Integer> func1_1 = (Func1<Integer, Integer>) mock(Func1.class, new ViolatedAssumptionAnswer());
      taskWithScheduler0.continueWith(func1_1);
      Environment environment0 = Environment.empty();
      // Undeclared exception!
      try { 
        taskWithScheduler_Continuation0.apply(taskWithScheduler0, environment0, synchronizedScheduler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.goldolphin.cate.TaskWithScheduler", e);
      }
  }
}
