/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 03:32:46 GMT 2022
 */

package net.goldolphin.cate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.concurrent.ForkJoinPool;
import net.goldolphin.cate.Action0Task;
import net.goldolphin.cate.ContextAction;
import net.goldolphin.cate.ContextCollectTask;
import net.goldolphin.cate.ContextTask;
import net.goldolphin.cate.ExecutorScheduler;
import net.goldolphin.cate.Func1;
import net.goldolphin.cate.Func1Task;
import net.goldolphin.cate.IContinuation;
import net.goldolphin.cate.ITask;
import net.goldolphin.cate.SeqTask;
import net.goldolphin.cate.Task;
import net.goldolphin.cate.TaskWithInitState;
import net.goldolphin.cate.TaskWithScheduler;
import net.goldolphin.cate.Waiter;
import net.goldolphin.cate.WhenAllTask;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Waiter_ESTest extends Waiter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Waiter<Object, WhenAllTask<Integer>> waiter0 = new Waiter<Object, WhenAllTask<Integer>>((ITask<Object, WhenAllTask<Integer>>) null);
      assertFalse(waiter0.isComplete());
      
      ITask<Integer, Integer>[] iTaskArray0 = (ITask<Integer, Integer>[]) Array.newInstance(ITask.class, 3);
      WhenAllTask<Integer> whenAllTask0 = new WhenAllTask<Integer>(iTaskArray0);
      waiter0.setResult(whenAllTask0);
      boolean boolean0 = waiter0.isComplete();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Func1<WhenAllTask<Object>, Object> func1_0 = (Func1<WhenAllTask<Object>, Object>) mock(Func1.class, new ViolatedAssumptionAnswer());
      Func1Task<WhenAllTask<Object>, Object> func1Task0 = new Func1Task<WhenAllTask<Object>, Object>(func1_0);
      ContextAction<Object, Integer> contextAction0 = (ContextAction<Object, Integer>) mock(ContextAction.class, new ViolatedAssumptionAnswer());
      ContextTask<Object, Integer> contextTask0 = new ContextTask<Object, Integer>(contextAction0);
      SeqTask<WhenAllTask<Object>, Object, Integer> seqTask0 = new SeqTask<WhenAllTask<Object>, Object, Integer>(func1Task0, contextTask0);
      Waiter<WhenAllTask<Object>, Integer> waiter0 = new Waiter<WhenAllTask<Object>, Integer>(seqTask0);
      IContinuation iContinuation0 = IContinuation.END_CONTINUATION;
      waiter0.buildContinuation(iContinuation0);
      assertFalse(waiter0.isComplete());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Waiter<Action0Task, TaskWithInitState<Action0Task, Integer>> waiter0 = new Waiter<Action0Task, TaskWithInitState<Action0Task, Integer>>((ITask<Action0Task, TaskWithInitState<Action0Task, Integer>>) null);
      ContextAction<Integer, Action0Task> contextAction0 = (ContextAction<Integer, Action0Task>) mock(ContextAction.class, new ViolatedAssumptionAnswer());
      Task<Integer, Action0Task> task0 = Task.create(contextAction0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(554);
      ExecutorScheduler executorScheduler0 = new ExecutorScheduler(forkJoinPool0);
      TaskWithScheduler<Integer, Action0Task> taskWithScheduler0 = new TaskWithScheduler<Integer, Action0Task>(task0, executorScheduler0);
      IContinuation[] iContinuationArray0 = new IContinuation[0];
      ContextCollectTask.DispatcherContinuation contextCollectTask_DispatcherContinuation0 = new ContextCollectTask.DispatcherContinuation(iContinuationArray0);
      IContinuation iContinuation0 = taskWithScheduler0.buildContinuation(contextCollectTask_DispatcherContinuation0);
      // Undeclared exception!
      try { 
        waiter0.buildContinuation(iContinuation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.goldolphin.cate.Waiter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Task<Integer, Integer> task0 = Task.create((ContextAction<Integer, Integer>) null);
      Waiter<Integer, Integer> waiter0 = new Waiter<Integer, Integer>(task0);
      Integer integer0 = new Integer(1);
      waiter0.setResult(integer0);
      // Undeclared exception!
      try { 
        waiter0.setResult(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The task is already completed.
         //
         verifyException("net.goldolphin.cate.Waiter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Func1<Integer, Integer> func1_0 = (Func1<Integer, Integer>) mock(Func1.class, new ViolatedAssumptionAnswer());
      Task<Integer, Integer> task0 = Task.create(func1_0);
      Waiter<Integer, Integer> waiter0 = new Waiter<Integer, Integer>(task0);
      boolean boolean0 = waiter0.isComplete();
      assertFalse(boolean0);
  }
}
