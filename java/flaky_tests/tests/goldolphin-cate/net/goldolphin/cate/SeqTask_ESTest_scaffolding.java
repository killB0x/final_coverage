/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Wed Nov 09 03:53:42 GMT 2022
 */

package net.goldolphin.cate;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class SeqTask_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "net.goldolphin.cate.SeqTask"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/user"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SeqTask_ESTest_scaffolding.class.getClassLoader() ,
      "net.goldolphin.cate.Task",
      "net.goldolphin.cate.ContextTask",
      "net.goldolphin.cate.ContextCollectTask$DispatcherContinuation",
      "net.goldolphin.cate.Environment",
      "net.goldolphin.cate.WhenAllTask",
      "net.goldolphin.cate.Waiter",
      "net.goldolphin.cate.TaskWithScheduler",
      "net.goldolphin.cate.ITask",
      "net.goldolphin.cate.Waiter$1",
      "net.goldolphin.cate.Func0",
      "net.goldolphin.cate.Func1",
      "net.goldolphin.cate.FlattenTask",
      "net.goldolphin.cate.Action0Task",
      "net.goldolphin.cate.Func1Task",
      "net.goldolphin.cate.WhenAnyTask",
      "net.goldolphin.cate.CollectTask",
      "net.goldolphin.cate.Action1Task",
      "net.goldolphin.cate.ContextTask$1",
      "net.goldolphin.cate.TaskWithInitState",
      "net.goldolphin.cate.Action1",
      "net.goldolphin.cate.CollectTask$Counter",
      "net.goldolphin.cate.Action0",
      "net.goldolphin.cate.ContextCollectTask$1",
      "net.goldolphin.cate.SeqTask",
      "net.goldolphin.cate.Func0Task",
      "net.goldolphin.cate.ContextAction",
      "net.goldolphin.cate.IScheduler",
      "net.goldolphin.cate.Context",
      "net.goldolphin.cate.IContinuation",
      "net.goldolphin.cate.CollectTask$Result",
      "net.goldolphin.cate.CollectTask$IndexContinuation",
      "net.goldolphin.cate.ContextCollectTask"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("net.goldolphin.cate.ContextAction", false, SeqTask_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SeqTask_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "net.goldolphin.cate.Task",
      "net.goldolphin.cate.SeqTask",
      "net.goldolphin.cate.ContextTask",
      "net.goldolphin.cate.Action0Task",
      "net.goldolphin.cate.TaskWithInitState",
      "net.goldolphin.cate.Waiter",
      "net.goldolphin.cate.ContextCollectTask$DispatcherContinuation",
      "net.goldolphin.cate.FlattenTask$Continuation",
      "net.goldolphin.cate.CollectTask$IndexContinuation",
      "net.goldolphin.cate.Waiter$1",
      "net.goldolphin.cate.ContextTask$1",
      "net.goldolphin.cate.TaskWithInitState$1",
      "net.goldolphin.cate.SynchronizedScheduler",
      "net.goldolphin.cate.TaskWithScheduler",
      "net.goldolphin.cate.CollectTask",
      "net.goldolphin.cate.WhenAllTask",
      "net.goldolphin.cate.IContinuation$1",
      "net.goldolphin.cate.IContinuation",
      "net.goldolphin.cate.WhenAllTask$Continuation",
      "net.goldolphin.cate.IdenticalTask",
      "net.goldolphin.cate.ContextCollectTask",
      "net.goldolphin.cate.Func1Task",
      "net.goldolphin.cate.FlattenTask",
      "net.goldolphin.cate.Func1Task$1",
      "net.goldolphin.cate.Action0Task$1",
      "net.goldolphin.cate.ContextCollectTask$1",
      "net.goldolphin.cate.TaskWithScheduler$Continuation",
      "net.goldolphin.cate.TaskWithScheduler$Continuation$1",
      "net.goldolphin.cate.ExecutorScheduler",
      "net.goldolphin.cate.WhenAnyTask",
      "net.goldolphin.cate.WhenAnyTask$Continuation",
      "net.goldolphin.cate.WhenAnyTask$1",
      "net.goldolphin.cate.Action1Task",
      "net.goldolphin.cate.Action1Task$1",
      "net.goldolphin.cate.WhenAllTask$1",
      "net.goldolphin.cate.Func0Task",
      "net.goldolphin.cate.Func0Task$1",
      "net.goldolphin.cate.Environment",
      "net.goldolphin.cate.CollectTask$Result",
      "net.goldolphin.cate.ExecutorScheduler$1",
      "net.goldolphin.cate.Context"
    );
  }
}
