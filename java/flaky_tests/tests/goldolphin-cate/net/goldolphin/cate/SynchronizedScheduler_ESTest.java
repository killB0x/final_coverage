/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 03:50:42 GMT 2022
 */

package net.goldolphin.cate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import net.goldolphin.cate.Action0;
import net.goldolphin.cate.Action1;
import net.goldolphin.cate.Action1Task;
import net.goldolphin.cate.CollectTask;
import net.goldolphin.cate.ContextAction;
import net.goldolphin.cate.ContextCollectTask;
import net.goldolphin.cate.Environment;
import net.goldolphin.cate.ExecutorScheduler;
import net.goldolphin.cate.FlattenTask;
import net.goldolphin.cate.Func1;
import net.goldolphin.cate.Func1Task;
import net.goldolphin.cate.IContinuation;
import net.goldolphin.cate.ITask;
import net.goldolphin.cate.IdenticalTask;
import net.goldolphin.cate.SynchronizedScheduler;
import net.goldolphin.cate.Task;
import net.goldolphin.cate.TaskWithInitState;
import net.goldolphin.cate.TaskWithScheduler;
import net.goldolphin.cate.Waiter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SynchronizedScheduler_ESTest extends SynchronizedScheduler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      ContextAction<CollectTask.Result, TaskWithInitState<Object, Integer>> contextAction0 = (ContextAction<CollectTask.Result, TaskWithInitState<Object, Integer>>) mock(ContextAction.class, new ViolatedAssumptionAnswer());
      ITask<Object, Integer>[] iTaskArray0 = (ITask<Object, Integer>[]) Array.newInstance(ITask.class, 2);
      Func1<Object, TaskWithInitState<Integer, Object>> func1_0 = (Func1<Object, TaskWithInitState<Integer, Object>>) mock(Func1.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(func1_0).apply(any());
      Func1Task<Object, TaskWithInitState<Integer, Object>> func1Task0 = new Func1Task<Object, TaskWithInitState<Integer, Object>>(func1_0);
      Waiter<Object, TaskWithInitState<Integer, Object>> waiter0 = new Waiter<Object, TaskWithInitState<Integer, Object>>(func1Task0);
      TaskWithScheduler<Object, TaskWithInitState<Integer, Object>> taskWithScheduler0 = new TaskWithScheduler<Object, TaskWithInitState<Integer, Object>>(waiter0, synchronizedScheduler0);
      Func1<TaskWithInitState<Integer, Object>, Integer> func1_1 = (Func1<TaskWithInitState<Integer, Object>, Integer>) mock(Func1.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func1_1).apply(any(net.goldolphin.cate.TaskWithInitState.class));
      Task<Object, Integer> task0 = taskWithScheduler0.continueWith(func1_1);
      iTaskArray0[0] = (ITask<Object, Integer>) task0;
      IContinuation iContinuation0 = IContinuation.END_CONTINUATION;
      FlattenTask.Continuation flattenTask_Continuation0 = new FlattenTask.Continuation(iContinuation0);
      task0.buildContinuation(flattenTask_Continuation0);
      Func1<TaskWithInitState<Integer, Object>, Integer> func1_2 = (Func1<TaskWithInitState<Integer, Object>, Integer>) mock(Func1.class, new ViolatedAssumptionAnswer());
      Task<Object, Integer> task1 = taskWithScheduler0.continueWith(func1_2);
      iTaskArray0[1] = (ITask<Object, Integer>) task1;
      Func1<TaskWithInitState<Integer, Object>, ForkJoinTask<Object>> func1_3 = (Func1<TaskWithInitState<Integer, Object>, ForkJoinTask<Object>>) mock(Func1.class, new ViolatedAssumptionAnswer());
      taskWithScheduler0.continueWith(func1_3);
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      Task.create(action0_0);
      ContextCollectTask<Object, TaskWithInitState<Object, Integer>> contextCollectTask0 = new ContextCollectTask<Object, TaskWithInitState<Object, Integer>>(contextAction0, iTaskArray0);
      FlattenTask<Object, Integer, TaskWithInitState<Object, Integer>> flattenTask0 = new FlattenTask<Object, Integer, TaskWithInitState<Object, Integer>>(contextCollectTask0);
      IContinuation iContinuation1 = flattenTask0.buildContinuation((IContinuation) null);
      Environment environment0 = Environment.empty();
      // Undeclared exception!
      try { 
        synchronizedScheduler0.schedule(iContinuation1, iContinuation1, environment0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The task is already completed.
         //
         verifyException("net.goldolphin.cate.Waiter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1, 1, 1, timeUnit0, synchronousQueue0, threadPoolExecutor_AbortPolicy0);
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      threadPoolExecutor0.setKeepAliveTime(2681L, timeUnit1);
      threadPoolExecutor0.getCorePoolSize();
      threadPoolExecutor0.allowCoreThreadTimeOut(false);
      ExecutorScheduler executorScheduler0 = new ExecutorScheduler(threadPoolExecutor0);
      Environment environment0 = Environment.empty();
      executorScheduler0.schedule((IContinuation) null, (Object) null, environment0);
      // Undeclared exception!
      try { 
        executorScheduler0.schedule((IContinuation) null, timeUnit0, environment0);
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task net.goldolphin.cate.ExecutorScheduler$1@3 rejected from java.util.concurrent.ThreadPoolExecutor@b1d6579[Running, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      IdenticalTask<Object> identicalTask0 = IdenticalTask.instance();
      IContinuation iContinuation0 = IContinuation.END_CONTINUATION;
      IContinuation iContinuation1 = identicalTask0.buildContinuation(iContinuation0);
      CollectTask.IndexContinuation collectTask_IndexContinuation0 = new CollectTask.IndexContinuation(0, iContinuation1);
      Environment environment0 = Environment.empty();
      Environment environment1 = environment0.extend(collectTask_IndexContinuation0);
      Environment environment2 = environment1.getParent();
      synchronizedScheduler0.schedule(collectTask_IndexContinuation0, iContinuation0, environment2);
      assertSame(iContinuation1, iContinuation0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ExecutorScheduler executorScheduler0 = new ExecutorScheduler((Executor) null);
      ContextCollectTask.DispatcherContinuation contextCollectTask_DispatcherContinuation0 = new ContextCollectTask.DispatcherContinuation((IContinuation[]) null);
      Object object0 = new Object();
      Environment environment0 = Environment.empty();
      Environment environment1 = environment0.extend((Object) null);
      Environment environment2 = environment1.getParent();
      // Undeclared exception!
      try { 
        executorScheduler0.schedule(contextCollectTask_DispatcherContinuation0, object0, environment2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.goldolphin.cate.ExecutorScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      Environment environment0 = Environment.empty();
      assertTrue(environment0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      IContinuation iContinuation0 = IContinuation.END_CONTINUATION;
      Environment environment0 = Environment.empty();
      Environment environment1 = environment0.extend(synchronizedScheduler0);
      Environment environment2 = environment1.getParent();
      synchronizedScheduler0.schedule(iContinuation0, (Object) null, environment2);
      assertSame(environment2, environment0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      FlattenTask.Continuation flattenTask_Continuation0 = new FlattenTask.Continuation((IContinuation) null);
      CollectTask.IndexContinuation collectTask_IndexContinuation0 = new CollectTask.IndexContinuation(0, flattenTask_Continuation0);
      Object object0 = new Object();
      Environment environment0 = Environment.empty();
      Environment environment1 = environment0.extend(collectTask_IndexContinuation0);
      // Undeclared exception!
      try { 
        synchronizedScheduler0.schedule(collectTask_IndexContinuation0, object0, environment1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.goldolphin.cate.CollectTask$Result cannot be cast to class net.goldolphin.cate.ITask (net.goldolphin.cate.CollectTask$Result and net.goldolphin.cate.ITask are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @409834a)
         //
         verifyException("net.goldolphin.cate.FlattenTask$Continuation", e);
      }
  }
}
