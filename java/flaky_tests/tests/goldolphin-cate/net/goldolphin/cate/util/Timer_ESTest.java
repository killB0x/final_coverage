/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 03:48:55 GMT 2022
 */

package net.goldolphin.cate.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Delayed;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.TimeUnit;
import net.goldolphin.cate.Action1;
import net.goldolphin.cate.Context;
import net.goldolphin.cate.ITask;
import net.goldolphin.cate.Maybe;
import net.goldolphin.cate.Task;
import net.goldolphin.cate.util.ExecutorTimer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Timer_ESTest extends Timer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExecutorTimer executorTimer0 = new ExecutorTimer();
      executorTimer0.shutdown();
      Context<Delayed, Object> context0 = (Context<Delayed, Object>) mock(Context.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        executorTimer0.resumeAfter((Context<?, Object>) context0, (Object) context0, 459L, timeUnit0);
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@63059423[Not completed, task = java.util.concurrent.Executors$RunnableAdapter@406dee35[Wrapped task = net.goldolphin.cate.util.ExecutorTimer$1@2]] rejected from java.util.concurrent.ScheduledThreadPoolExecutor@594ec3ba[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ExecutorTimer executorTimer0 = new ExecutorTimer();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Task<?, ?> task0 = executorTimer0.delay((-1L), timeUnit0);
      assertNotNull(task0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ExecutorTimer executorTimer0 = new ExecutorTimer();
      Action1<Maybe<Object>> action1_0 = (Action1<Maybe<Object>>) mock(Action1.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Task<Maybe<Object>, Maybe<Object>> task0 = executorTimer0.withTimeout((ITask<Maybe<Object>, Object>) null, action1_0, (-337L), timeUnit0);
      assertNotNull(task0);
  }
}
