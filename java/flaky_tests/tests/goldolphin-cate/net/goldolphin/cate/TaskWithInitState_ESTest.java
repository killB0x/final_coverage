/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 03:53:00 GMT 2022
 */

package net.goldolphin.cate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import net.goldolphin.cate.Action0Task;
import net.goldolphin.cate.Action1;
import net.goldolphin.cate.CollectTask;
import net.goldolphin.cate.ContextAction;
import net.goldolphin.cate.ContextCollectTask;
import net.goldolphin.cate.ContextTask;
import net.goldolphin.cate.FlattenTask;
import net.goldolphin.cate.Func0Task;
import net.goldolphin.cate.IContinuation;
import net.goldolphin.cate.IScheduler;
import net.goldolphin.cate.ITask;
import net.goldolphin.cate.SeqTask;
import net.goldolphin.cate.SynchronizedScheduler;
import net.goldolphin.cate.Task;
import net.goldolphin.cate.TaskWithInitState;
import net.goldolphin.cate.TaskWithScheduler;
import net.goldolphin.cate.Unit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TaskWithInitState_ESTest extends TaskWithInitState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Unit unit0 = Unit.VALUE;
      ContextAction<Unit, Action0Task> contextAction0 = (ContextAction<Unit, Action0Task>) mock(ContextAction.class, new ViolatedAssumptionAnswer());
      ContextTask<Unit, Action0Task> contextTask0 = new ContextTask<Unit, Action0Task>(contextAction0);
      TaskWithInitState<Unit, Action0Task> taskWithInitState0 = new TaskWithInitState<Unit, Action0Task>(contextTask0, unit0);
      IContinuation iContinuation0 = taskWithInitState0.buildContinuation((IContinuation) null);
      assertNotNull(iContinuation0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ContextAction<CollectTask.Result, Func0Task<Unit>> contextAction0 = (ContextAction<CollectTask.Result, Func0Task<Unit>>) mock(ContextAction.class, new ViolatedAssumptionAnswer());
      ITask<SeqTask<Action0Task, Action0Task, Unit>, Unit>[] iTaskArray0 = (ITask<SeqTask<Action0Task, Action0Task, Unit>, Unit>[]) Array.newInstance(ITask.class, 2);
      ContextAction<SeqTask<Action0Task, Action0Task, Unit>, Unit> contextAction1 = (ContextAction<SeqTask<Action0Task, Action0Task, Unit>, Unit>) mock(ContextAction.class, new ViolatedAssumptionAnswer());
      Task<SeqTask<Action0Task, Action0Task, Unit>, Unit> task0 = Task.create(contextAction1);
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      TaskWithScheduler<SeqTask<Action0Task, Action0Task, Unit>, Unit> taskWithScheduler0 = new TaskWithScheduler<SeqTask<Action0Task, Action0Task, Unit>, Unit>(task0, synchronizedScheduler0);
      iTaskArray0[0] = (ITask<SeqTask<Action0Task, Action0Task, Unit>, Unit>) taskWithScheduler0;
      ContextAction<CollectTask.Result, Unit> contextAction2 = (ContextAction<CollectTask.Result, Unit>) mock(ContextAction.class, new ViolatedAssumptionAnswer());
      ContextCollectTask<SeqTask<Action0Task, Action0Task, Unit>, Unit> contextCollectTask0 = new ContextCollectTask<SeqTask<Action0Task, Action0Task, Unit>, Unit>(contextAction2, iTaskArray0);
      iTaskArray0[1] = (ITask<SeqTask<Action0Task, Action0Task, Unit>, Unit>) contextCollectTask0;
      CollectTask<SeqTask<Action0Task, Action0Task, Unit>, Func0Task<Unit>> collectTask0 = Task.when((ContextAction<CollectTask.Result, Func0Task<Unit>>) contextAction0, (ITask<SeqTask<Action0Task, Action0Task, Unit>, ?>[]) iTaskArray0);
      ContextAction<Func0Task<Unit>, SeqTask<Unit, Unit, Action0Task>> contextAction3 = (ContextAction<Func0Task<Unit>, SeqTask<Unit, Unit, Action0Task>>) mock(ContextAction.class, new ViolatedAssumptionAnswer());
      Task<Func0Task<Unit>, SeqTask<Unit, Unit, Action0Task>> task1 = Task.create(contextAction3);
      SeqTask<SeqTask<Action0Task, Action0Task, Unit>, Func0Task<Unit>, SeqTask<Unit, Unit, Action0Task>> seqTask0 = new SeqTask<SeqTask<Action0Task, Action0Task, Unit>, Func0Task<Unit>, SeqTask<Unit, Unit, Action0Task>>(collectTask0, task1);
      FlattenTask<SeqTask<Action0Task, Action0Task, Unit>, Action0Task, SeqTask<Unit, Unit, Action0Task>> flattenTask0 = new FlattenTask<SeqTask<Action0Task, Action0Task, Unit>, Action0Task, SeqTask<Unit, Unit, Action0Task>>(seqTask0);
      SeqTask<Action0Task, Action0Task, Unit> seqTask1 = (SeqTask<Action0Task, Action0Task, Unit>) mock(SeqTask.class, new ViolatedAssumptionAnswer());
      TaskWithInitState<SeqTask<Action0Task, Action0Task, Unit>, Action0Task> taskWithInitState0 = new TaskWithInitState<SeqTask<Action0Task, Action0Task, Unit>, Action0Task>(flattenTask0, seqTask1);
      // Undeclared exception!
      try { 
        taskWithInitState0.buildContinuation((IContinuation) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Unit unit0 = Unit.VALUE;
      TaskWithInitState<Unit, Action0Task> taskWithInitState0 = new TaskWithInitState<Unit, Action0Task>((ITask<Unit, Action0Task>) null, unit0);
      IContinuation iContinuation0 = IContinuation.END_CONTINUATION;
      // Undeclared exception!
      try { 
        taskWithInitState0.buildContinuation(iContinuation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.goldolphin.cate.TaskWithInitState", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Unit unit0 = Unit.VALUE;
      Task<Unit, Unit> task0 = Task.create((Action1<Unit>) null);
      TaskWithInitState<Unit, Unit> taskWithInitState0 = new TaskWithInitState<Unit, Unit>(task0, unit0);
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        taskWithInitState0.execute(object0, (IScheduler) synchronizedScheduler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.goldolphin.cate.Action1Task$1", e);
      }
  }
}
