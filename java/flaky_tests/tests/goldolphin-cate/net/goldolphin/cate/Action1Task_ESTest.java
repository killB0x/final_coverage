/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 03:52:15 GMT 2022
 */

package net.goldolphin.cate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.concurrent.Delayed;
import net.goldolphin.cate.Action0Task;
import net.goldolphin.cate.Action1;
import net.goldolphin.cate.Action1Task;
import net.goldolphin.cate.CollectTask;
import net.goldolphin.cate.ContextAction;
import net.goldolphin.cate.ContextCollectTask;
import net.goldolphin.cate.ContextTask;
import net.goldolphin.cate.Environment;
import net.goldolphin.cate.IContinuation;
import net.goldolphin.cate.IScheduler;
import net.goldolphin.cate.ITask;
import net.goldolphin.cate.SeqTask;
import net.goldolphin.cate.SynchronizedScheduler;
import net.goldolphin.cate.Task;
import net.goldolphin.cate.TaskWithScheduler;
import net.goldolphin.cate.Unit;
import net.goldolphin.cate.Waiter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Action1Task_ESTest extends Action1Task_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      ContextAction<CollectTask.Result, Unit> contextAction0 = (ContextAction<CollectTask.Result, Unit>) mock(ContextAction.class, new ViolatedAssumptionAnswer());
      ITask<Action0Task, Unit>[] iTaskArray0 = (ITask<Action0Task, Unit>[]) Array.newInstance(ITask.class, 6);
      ContextAction<Action0Task, Unit> contextAction1 = (ContextAction<Action0Task, Unit>) mock(ContextAction.class, new ViolatedAssumptionAnswer());
      Task<Action0Task, Unit> task0 = Task.create(contextAction1);
      iTaskArray0[0] = (ITask<Action0Task, Unit>) task0;
      iTaskArray0[1] = (ITask<Action0Task, Unit>) task0;
      iTaskArray0[2] = (ITask<Action0Task, Unit>) task0;
      Waiter<Action0Task, Unit> waiter0 = new Waiter<Action0Task, Unit>(task0);
      iTaskArray0[3] = (ITask<Action0Task, Unit>) waiter0;
      iTaskArray0[4] = (ITask<Action0Task, Unit>) waiter0;
      Action1<Action0Task> action1_0 = (Action1<Action0Task>) mock(Action1.class, new ViolatedAssumptionAnswer());
      Action1Task<Action0Task> action1Task0 = new Action1Task<Action0Task>(action1_0);
      Task<Action0Task, Object> task1 = action1Task0.continueWith((ContextAction<Unit, Object>) null);
      ContextAction<Object, Unit> contextAction2 = (ContextAction<Object, Unit>) mock(ContextAction.class, new ViolatedAssumptionAnswer());
      ContextTask<Object, Unit> contextTask0 = new ContextTask<Object, Unit>(contextAction2);
      SeqTask<Action0Task, Object, Unit> seqTask0 = new SeqTask<Action0Task, Object, Unit>(task1, contextTask0);
      iTaskArray0[5] = (ITask<Action0Task, Unit>) seqTask0;
      ContextCollectTask<Action0Task, Unit> contextCollectTask0 = new ContextCollectTask<Action0Task, Unit>(contextAction0, iTaskArray0);
      TaskWithScheduler<Object, Unit> taskWithScheduler0 = new TaskWithScheduler<Object, Unit>(contextTask0, synchronizedScheduler0);
      ContextCollectTask.DispatcherContinuation contextCollectTask_DispatcherContinuation0 = new ContextCollectTask.DispatcherContinuation((IContinuation[]) null);
      TaskWithScheduler.Continuation taskWithScheduler_Continuation0 = taskWithScheduler0.new Continuation(contextCollectTask_DispatcherContinuation0);
      IContinuation iContinuation0 = contextCollectTask0.buildContinuation(taskWithScheduler_Continuation0);
      Environment environment0 = Environment.empty();
      // Undeclared exception!
      try { 
        synchronizedScheduler0.schedule(iContinuation0, object0, environment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.goldolphin.cate.ContextTask$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Action1<ITask<Object, Unit>> action1_0 = (Action1<ITask<Object, Unit>>) mock(Action1.class, new ViolatedAssumptionAnswer());
      Action1Task<ITask<Object, Unit>> action1Task0 = new Action1Task<ITask<Object, Unit>>(action1_0);
      Object object0 = new Object();
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      action1Task0.execute(object0, (IScheduler) synchronizedScheduler0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IContinuation iContinuation0 = IContinuation.END_CONTINUATION;
      Action1Task<ITask<Unit, Delayed>> action1Task0 = new Action1Task<ITask<Unit, Delayed>>((Action1<ITask<Unit, Delayed>>) null);
      IContinuation iContinuation1 = action1Task0.buildContinuation(iContinuation0);
      assertFalse(iContinuation1.equals((Object)iContinuation0));
  }
}
