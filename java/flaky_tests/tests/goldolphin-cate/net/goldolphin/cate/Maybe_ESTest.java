/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 03:36:45 GMT 2022
 */

package net.goldolphin.cate;

import org.junit.Test;
import static org.junit.Assert.*;
import net.goldolphin.cate.Maybe;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Maybe_ESTest extends Maybe_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Maybe<Object> maybe0 = Maybe.nothing();
      Maybe<Object> maybe1 = Maybe.just((Object) maybe0);
      Maybe maybe2 = (Maybe)maybe1.get();
      assertTrue(maybe2.isNothing());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Maybe<Object> maybe0 = Maybe.nothing();
      String string0 = maybe0.toString();
      assertEquals("Maybe{Nothing}", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Maybe<Object> maybe0 = Maybe.nothing();
      Maybe<Object> maybe1 = Maybe.just((Object) maybe0);
      boolean boolean0 = maybe1.isNothing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Maybe<Object> maybe0 = Maybe.nothing();
      boolean boolean0 = maybe0.isNothing();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Maybe<Integer> maybe0 = Maybe.nothing();
      Integer integer0 = maybe0.get();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Maybe<Object> maybe0 = Maybe.nothing();
      Maybe<Object> maybe1 = Maybe.just((Object) maybe0);
      String string0 = maybe1.toString();
      assertEquals("Maybe{Just Maybe{Nothing}}", string0);
  }
}
