/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 03:45:27 GMT 2022
 */

package net.goldolphin.cate.partitioned;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import net.goldolphin.cate.ExecutorScheduler;
import net.goldolphin.cate.IScheduler;
import net.goldolphin.cate.SynchronizedScheduler;
import net.goldolphin.cate.TaskWithInitState;
import net.goldolphin.cate.partitioned.HashedPartitioner;
import net.goldolphin.cate.partitioned.IPartitioner;
import net.goldolphin.cate.partitioned.PartitionedSchedulerPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PartitionedSchedulerPool_ESTest extends PartitionedSchedulerPool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IScheduler[] iSchedulerArray0 = new IScheduler[1];
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      ExecutorScheduler executorScheduler0 = new ExecutorScheduler(forkJoinPool0);
      iSchedulerArray0[0] = (IScheduler) executorScheduler0;
      PartitionedSchedulerPool<Integer> partitionedSchedulerPool0 = new PartitionedSchedulerPool<Integer>(iSchedulerArray0, (IPartitioner<Integer>) null);
      int int0 = (-2611);
      Integer integer0 = new Integer((-2611));
      // Undeclared exception!
      try { 
        partitionedSchedulerPool0.getScheduler(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.goldolphin.cate.partitioned.PartitionedSchedulerPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IScheduler[] iSchedulerArray0 = new IScheduler[1];
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      ExecutorScheduler executorScheduler0 = new ExecutorScheduler(forkJoinPool0);
      iSchedulerArray0[0] = (IScheduler) executorScheduler0;
      PartitionedSchedulerPool<Integer> partitionedSchedulerPool0 = new PartitionedSchedulerPool<Integer>(iSchedulerArray0, (IPartitioner<Integer>) null);
      IPartitioner iPartitioner0 = partitionedSchedulerPool0.getPartitioner();
      assertNull(iPartitioner0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IScheduler[] iSchedulerArray0 = new IScheduler[1];
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      iSchedulerArray0[0] = (IScheduler) synchronizedScheduler0;
      HashedPartitioner<Object> hashedPartitioner0 = HashedPartitioner.instance();
      PartitionedSchedulerPool<Object> partitionedSchedulerPool0 = new PartitionedSchedulerPool<Object>(iSchedulerArray0, hashedPartitioner0);
      IPartitioner iPartitioner0 = partitionedSchedulerPool0.getPartitioner();
      partitionedSchedulerPool0.getPartitionNum();
      HashedPartitioner<TaskWithInitState<Integer, Integer>> hashedPartitioner1 = HashedPartitioner.instance();
      PartitionedSchedulerPool<TaskWithInitState<Integer, Integer>> partitionedSchedulerPool1 = new PartitionedSchedulerPool<TaskWithInitState<Integer, Integer>>(iSchedulerArray0, hashedPartitioner1);
      IPartitioner iPartitioner1 = partitionedSchedulerPool1.getPartitioner();
      assertSame(iPartitioner1, iPartitioner0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IScheduler[] iSchedulerArray0 = new IScheduler[0];
      HashedPartitioner<ForkJoinTask<Delayed>> hashedPartitioner0 = HashedPartitioner.instance();
      PartitionedSchedulerPool<ForkJoinTask<Delayed>> partitionedSchedulerPool0 = new PartitionedSchedulerPool<ForkJoinTask<Delayed>>(iSchedulerArray0, hashedPartitioner0);
      IPartitioner iPartitioner0 = partitionedSchedulerPool0.getPartitioner();
      assertNotNull(iPartitioner0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IScheduler[] iSchedulerArray0 = new IScheduler[2];
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      iSchedulerArray0[0] = (IScheduler) synchronizedScheduler0;
      ExecutorScheduler executorScheduler0 = new ExecutorScheduler((Executor) null);
      iSchedulerArray0[1] = (IScheduler) executorScheduler0;
      HashedPartitioner<Delayed> hashedPartitioner0 = HashedPartitioner.instance();
      PartitionedSchedulerPool<Delayed> partitionedSchedulerPool0 = new PartitionedSchedulerPool<Delayed>(iSchedulerArray0, hashedPartitioner0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      MockThread mockThread0 = new MockThread();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1302, 1302, 1302, timeUnit0, synchronousQueue0, threadFactory0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread0, threadPoolExecutor0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1302, threadPoolExecutor_DiscardPolicy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread("net.goldolphin.cate.Action0Task");
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, "net.goldolphin.cate.Action0Task", 1302);
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) mockThread2, (long) 1302, timeUnit1);
      partitionedSchedulerPool0.getScheduler(scheduledFuture0);
      HashedPartitioner<Object> hashedPartitioner1 = HashedPartitioner.instance();
      PartitionedSchedulerPool<Object> partitionedSchedulerPool1 = new PartitionedSchedulerPool<Object>(iSchedulerArray0, hashedPartitioner1);
      Object object0 = new Object();
      partitionedSchedulerPool1.getScheduler(object0);
      int int0 = partitionedSchedulerPool0.getPartitionNum();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IScheduler[] iSchedulerArray0 = new IScheduler[0];
      HashedPartitioner<Integer> hashedPartitioner0 = HashedPartitioner.instance();
      PartitionedSchedulerPool<Integer> partitionedSchedulerPool0 = new PartitionedSchedulerPool<Integer>(iSchedulerArray0, hashedPartitioner0);
      partitionedSchedulerPool0.getPartitionNum();
      Integer integer0 = new Integer(218);
      // Undeclared exception!
      try { 
        partitionedSchedulerPool0.getScheduler(integer0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.goldolphin.cate.partitioned.HashedPartitioner", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashedPartitioner<Delayed> hashedPartitioner0 = HashedPartitioner.instance();
      PartitionedSchedulerPool<Delayed> partitionedSchedulerPool0 = new PartitionedSchedulerPool<Delayed>((IScheduler[]) null, hashedPartitioner0);
      partitionedSchedulerPool0.getPartitioner();
      // Undeclared exception!
      try { 
        partitionedSchedulerPool0.getPartitionNum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.goldolphin.cate.partitioned.PartitionedSchedulerPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IScheduler[] iSchedulerArray0 = null;
      HashedPartitioner<Object> hashedPartitioner0 = HashedPartitioner.instance();
      PartitionedSchedulerPool<Object> partitionedSchedulerPool0 = new PartitionedSchedulerPool<Object>((IScheduler[]) null, hashedPartitioner0);
      // Undeclared exception!
      try { 
        partitionedSchedulerPool0.getPartitionNum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.goldolphin.cate.partitioned.PartitionedSchedulerPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IScheduler[] iSchedulerArray0 = new IScheduler[5];
      SynchronizedScheduler synchronizedScheduler0 = new SynchronizedScheduler();
      iSchedulerArray0[0] = (IScheduler) synchronizedScheduler0;
      HashedPartitioner<Object> hashedPartitioner0 = HashedPartitioner.instance();
      PartitionedSchedulerPool<Object> partitionedSchedulerPool0 = new PartitionedSchedulerPool<Object>(iSchedulerArray0, hashedPartitioner0);
      Object object0 = new Object();
      partitionedSchedulerPool0.getScheduler(object0);
      iSchedulerArray0[1] = null;
      int int0 = (-218);
      int int1 = (-3925);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-3925));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IScheduler[] iSchedulerArray0 = new IScheduler[0];
      HashedPartitioner<Delayed> hashedPartitioner0 = HashedPartitioner.instance();
      PartitionedSchedulerPool<Delayed> partitionedSchedulerPool0 = new PartitionedSchedulerPool<Delayed>(iSchedulerArray0, hashedPartitioner0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.poll();
      // Undeclared exception!
      try { 
        partitionedSchedulerPool0.getScheduler((Delayed) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.goldolphin.cate.partitioned.HashedPartitioner", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IScheduler[] iSchedulerArray0 = new IScheduler[4];
      HashedPartitioner<Object> hashedPartitioner0 = HashedPartitioner.instance();
      PartitionedSchedulerPool<Object> partitionedSchedulerPool0 = new PartitionedSchedulerPool<Object>(iSchedulerArray0, hashedPartitioner0);
      partitionedSchedulerPool0.getScheduler(hashedPartitioner0);
      iSchedulerArray0[0] = null;
      HashedPartitioner<Delayed> hashedPartitioner1 = HashedPartitioner.instance();
      PartitionedSchedulerPool<Delayed> partitionedSchedulerPool1 = new PartitionedSchedulerPool<Delayed>(iSchedulerArray0, hashedPartitioner1);
      int int0 = partitionedSchedulerPool0.getPartitionNum();
      PartitionedSchedulerPool<Integer> partitionedSchedulerPool2 = new PartitionedSchedulerPool<Integer>(iSchedulerArray0, (IPartitioner<Integer>) null);
      int int1 = partitionedSchedulerPool2.getPartitionNum();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IScheduler[] iSchedulerArray0 = new IScheduler[0];
      HashedPartitioner<Object> hashedPartitioner0 = HashedPartitioner.instance();
      PartitionedSchedulerPool<Object> partitionedSchedulerPool0 = new PartitionedSchedulerPool<Object>(iSchedulerArray0, hashedPartitioner0);
      // Undeclared exception!
      try { 
        partitionedSchedulerPool0.getScheduler(hashedPartitioner0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.goldolphin.cate.partitioned.HashedPartitioner", e);
      }
  }
}
