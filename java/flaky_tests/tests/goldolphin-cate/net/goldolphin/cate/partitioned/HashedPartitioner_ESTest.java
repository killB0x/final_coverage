/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 03:46:06 GMT 2022
 */

package net.goldolphin.cate.partitioned;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.goldolphin.cate.partitioned.HashedPartitioner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HashedPartitioner_ESTest extends HashedPartitioner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashedPartitioner<Object> hashedPartitioner0 = HashedPartitioner.instance();
      Object object0 = new Object();
      int int0 = hashedPartitioner0.partition(object0, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashedPartitioner<Integer> hashedPartitioner0 = HashedPartitioner.instance();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        hashedPartitioner0.partition(integer0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.goldolphin.cate.partitioned.HashedPartitioner", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashedPartitioner<Object> hashedPartitioner0 = HashedPartitioner.instance();
      Object object0 = new Object();
      int int0 = hashedPartitioner0.partition(object0, 2143);
      assertEquals(2, int0);
  }
}
