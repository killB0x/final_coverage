/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 04:12:38 GMT 2022
 */

package io.github.stepio.jgforms.answer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.stepio.jgforms.answer.Builder;
import io.github.stepio.jgforms.question.MetaData;
import java.net.URL;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Builder_ESTest extends Builder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Builder builder0 = Builder.formKey("GpC=4F*yi2X)JdGJ");
      Locale locale0 = Locale.US;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      MetaData metaData0 = mock(MetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(metaData0).getId();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2495), 0, 0, 0, 0, 0);
      Builder builder1 = builder0.putDuration(metaData0, (Calendar) mockGregorianCalendar0, calendar0);
      assertSame(builder1, builder0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Builder builder0 = Builder.formKey("");
      MetaData metaData0 = mock(MetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(metaData0).getId();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Builder builder1 = builder0.putDuration(metaData0, (-1487L), timeUnit0);
      assertSame(builder0, builder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Builder builder0 = Builder.formKey("");
      MetaData metaData0 = mock(MetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(metaData0).getId();
      Builder builder1 = builder0.putDuration(metaData0, 459, 0, (-1));
      assertSame(builder0, builder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Builder builder0 = Builder.formKey((String) null);
      MetaData metaData0 = mock(MetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(metaData0).getId();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-293), 1, 12, 0, 3466);
      Builder builder1 = builder0.putDate(metaData0, (Calendar) mockGregorianCalendar0);
      assertSame(builder0, builder1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Builder builder0 = Builder.formKey("");
      MetaData metaData0 = mock(MetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(metaData0).getId();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      Builder builder1 = builder0.put(metaData0, (List<String>) linkedList0);
      assertSame(builder0, builder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Builder builder0 = Builder.formKey("7s;w6=F/");
      MetaData metaData0 = mock(MetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(metaData0).getId();
      Double double0 = Double.valueOf(1.0);
      Builder builder1 = builder0.put(metaData0, (Number) double0);
      assertSame(builder0, builder1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Builder builder0 = Builder.formKey("`-");
      // Undeclared exception!
      try { 
        builder0.toUrlString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At least one answer is mandatory to submit a form
         //
         verifyException("io.github.stepio.jgforms.answer.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Builder builder0 = Builder.formKey("f28l");
      builder0.put("f28l", (List<String>) null);
      // Undeclared exception!
      try { 
        builder0.toUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.stepio.jgforms.answer.Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Builder builder0 = Builder.formKey("_month");
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        builder0.putTime((MetaData) null, calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MetaData for answer is mandatory
         //
         verifyException("io.github.stepio.jgforms.answer.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Builder builder0 = Builder.formKey("Value of answer is mandatory");
      // Undeclared exception!
      try { 
        builder0.putDuration((MetaData) null, (Calendar) null, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MetaData for answer is mandatory
         //
         verifyException("io.github.stepio.jgforms.answer.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Builder builder0 = Builder.formKey((String) null);
      // Undeclared exception!
      try { 
        builder0.putDate((MetaData) null, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MetaData for answer is mandatory
         //
         verifyException("io.github.stepio.jgforms.answer.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Builder builder0 = Builder.formKey("sJ6.7(C");
      // Undeclared exception!
      try { 
        builder0.put((MetaData) null, "sJ6.7(C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MetaData for answer is mandatory
         //
         verifyException("io.github.stepio.jgforms.answer.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Builder builder0 = Builder.formKey("");
      MetaData metaData0 = mock(MetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(metaData0).getId();
      builder0.putDate(metaData0, 0, (-1));
      String string0 = builder0.toUrlString();
      assertEquals("https://docs.google.com/forms/d/e//formResponse?entry.0_day=-1&entry.0_month=0", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Builder builder0 = Builder.formKey("GpC=4F*yi2X)JdGJ");
      Builder builder1 = builder0.put("GpC=4F*yi2X)JdGJ", (Number) null);
      assertSame(builder0, builder1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Builder builder0 = Builder.formKey("");
      builder0.put("", (List<String>) null);
      // Undeclared exception!
      try { 
        builder0.toUrlString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.stepio.jgforms.answer.Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Builder builder0 = Builder.formKey(":k.3<xg4\"R<aYL");
      Builder builder1 = builder0.put(":k.3<xg4\"R<aYL", ":k.3<xg4\"R<aYL");
      builder1.put("AGAYq", ":k.3<xg4\"R<aYL");
      URL uRL0 = builder0.toUrl();
      assertEquals("https://docs.google.com/forms/d/e/:k.3<xg4\"R<aYL/formResponse?AGAYq=%3Ak.3%3Cxg4%22R%3CaYL&:k.3<xg4\"R<aYL=%3Ak.3%3Cxg4%22R%3CaYL", uRL0.toExternalForm());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Builder builder0 = Builder.formKey("GpC=4F*yi2X)JdGJ");
      Locale locale0 = Locale.US;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      MetaData metaData0 = mock(MetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L).when(metaData0).getId();
      Builder builder1 = builder0.putDateTime(metaData0, calendar0);
      assertSame(builder0, builder1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Builder builder0 = Builder.formKey("GpC=4F*yi2X)JdGJ");
      Locale locale0 = Locale.US;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      MetaData metaData0 = mock(MetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(metaData0).getId();
      Builder builder1 = builder0.putDuration(metaData0, calendar0, calendar0);
      assertSame(builder1, builder0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Builder builder0 = Builder.formKey("GpC=4F*yi2X)JdGJ");
      MetaData metaData0 = mock(MetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(metaData0).getId();
      Locale locale0 = Locale.US;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Builder builder1 = builder0.putTime(metaData0, calendar0);
      assertSame(builder0, builder1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Builder builder0 = Builder.formKey("");
      MetaData metaData0 = mock(MetaData.class, new ViolatedAssumptionAnswer());
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        builder0.put(metaData0, (List<String>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value of answer is mandatory
         //
         verifyException("io.github.stepio.jgforms.answer.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Builder builder0 = Builder.formKey("30%gH7UPX%/ktse");
      // Undeclared exception!
      try { 
        builder0.putDate((MetaData) null, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MetaData for answer is mandatory
         //
         verifyException("io.github.stepio.jgforms.answer.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Builder builder0 = Builder.formKey("TimeUnit for answer is mandatory");
      // Undeclared exception!
      try { 
        builder0.put((MetaData) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MetaData for answer is mandatory
         //
         verifyException("io.github.stepio.jgforms.answer.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Builder builder0 = Builder.formKey("");
      // Undeclared exception!
      try { 
        builder0.putDateTime((MetaData) null, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MetaData for answer is mandatory
         //
         verifyException("io.github.stepio.jgforms.answer.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Builder builder0 = Builder.formKey("_second");
      MetaData metaData0 = mock(MetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(metaData0).getId();
      Builder builder1 = builder0.put(metaData0, "_second");
      assertSame(builder1, builder0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Builder builder0 = Builder.formKey("W@AWl7.0");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        builder0.putDuration((MetaData) null, 74L, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MetaData for answer is mandatory
         //
         verifyException("io.github.stepio.jgforms.answer.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Builder builder0 = Builder.formKey("io.github.stepio.jgforms.answer.Builder");
      // Undeclared exception!
      try { 
        builder0.toUrl();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At least one answer is mandatory to submit a form
         //
         verifyException("io.github.stepio.jgforms.answer.Validation", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Builder builder0 = Builder.formKey("");
      // Undeclared exception!
      try { 
        builder0.putDuration((MetaData) null, 1, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MetaData for answer is mandatory
         //
         verifyException("io.github.stepio.jgforms.answer.Validation", e);
      }
  }
}
