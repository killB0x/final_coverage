/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 16:41:16 GMT 2022
 */

package io.joshworks.stream.client.sse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.joshworks.stream.client.sse.EventStreamParser;
import io.joshworks.stream.client.sse.UTF8Output;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8Output_ESTest extends UTF8Output_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UTF8Output uTF8Output0 = new UTF8Output((EventStreamParser) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-107);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[1];
      byteBufferArray0[0] = byteBuffer0;
      uTF8Output0.write(byteBufferArray0);
      assertEquals(1, byteBufferArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UTF8Output uTF8Output0 = new UTF8Output((EventStreamParser) null);
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[6];
      byte[] byteArray0 = new byte[3];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      byteBufferArray0[0] = byteBuffer0;
      byteBufferArray0[1] = byteBuffer0;
      byteBufferArray0[2] = byteBuffer0;
      byteBufferArray0[3] = byteBufferArray0[1];
      byteBufferArray0[4] = byteBufferArray0[3];
      byteBufferArray0[5] = byteBufferArray0[1];
      uTF8Output0.write(byteBufferArray0);
      String string0 = uTF8Output0.extract();
      assertEquals("\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UTF8Output uTF8Output0 = new UTF8Output((EventStreamParser) null);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(8192);
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[5];
      byteBufferArray0[0] = byteBuffer0;
      // Undeclared exception!
      uTF8Output0.write(byteBufferArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UTF8Output uTF8Output0 = new UTF8Output((EventStreamParser) null);
      boolean boolean0 = uTF8Output0.hasData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      UTF8Output uTF8Output0 = new UTF8Output((EventStreamParser) null);
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[2];
      byteBufferArray0[0] = byteBuffer0;
      // Undeclared exception!
      try { 
        uTF8Output0.write(byteBufferArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.joshworks.stream.client.sse.UTF8Output", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UTF8Output uTF8Output0 = new UTF8Output((EventStreamParser) null);
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[1];
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(5);
      byteBufferArray0[0] = byteBuffer0;
      uTF8Output0.write(byteBufferArray0);
      boolean boolean0 = uTF8Output0.hasData();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UTF8Output uTF8Output0 = new UTF8Output((EventStreamParser) null);
      String string0 = uTF8Output0.extract();
      assertEquals("", string0);
  }
}
