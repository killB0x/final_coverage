/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 03:38:38 GMT 2022
 */

package com.github.ruediste.c3java.linearization;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.ruediste.c3java.linearization.DefaultDirectSuperclassesInspector;
import com.github.ruediste.c3java.linearization.DirectSuperclassesInspector;
import com.github.ruediste.c3java.linearization.ImplementsFirstDirectSuperclassesInspector;
import com.github.ruediste.c3java.linearization.ImplementsOnlyDirectSuperclassesInspector;
import java.awt.ImageCapabilities;
import java.time.Month;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoUnit;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultDirectSuperclassesInspector_ESTest extends DefaultDirectSuperclassesInspector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        DefaultDirectSuperclassesInspector.makeArrayClasses((List<Class<?>>) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.ruediste.c3java.linearization.DefaultDirectSuperclassesInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImplementsFirstDirectSuperclassesInspector implementsFirstDirectSuperclassesInspector0 = new ImplementsFirstDirectSuperclassesInspector();
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      List<Class<?>> list0 = DefaultDirectSuperclassesInspector.arrayDirectSuperclasses(187, class0, implementsFirstDirectSuperclassesInspector0);
      // Undeclared exception!
      try { 
        DefaultDirectSuperclassesInspector.makeArrayClasses(list0, 187);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        DefaultDirectSuperclassesInspector.makeArrayClass((Class<?>) null, 536);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      // Undeclared exception!
      try { 
        DefaultDirectSuperclassesInspector.makeArrayClass(class0, (-2638));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2638
         //
         verifyException("com.github.ruediste.c3java.linearization.DefaultDirectSuperclassesInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      // Undeclared exception!
      try { 
        DefaultDirectSuperclassesInspector.makeArrayClass(class0, 536);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDirectSuperclassesInspector defaultDirectSuperclassesInspector0 = new DefaultDirectSuperclassesInspector();
      // Undeclared exception!
      try { 
        defaultDirectSuperclassesInspector0.directParentClasses((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.ruediste.c3java.linearization.DefaultDirectSuperclassesInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImplementsOnlyDirectSuperclassesInspector implementsOnlyDirectSuperclassesInspector0 = (ImplementsOnlyDirectSuperclassesInspector)ImplementsOnlyDirectSuperclassesInspector.INSTANCE;
      Class<Month> class0 = Month.class;
      // Undeclared exception!
      try { 
        implementsOnlyDirectSuperclassesInspector0.directParentClasses(class0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDirectSuperclassesInspector defaultDirectSuperclassesInspector0 = (DefaultDirectSuperclassesInspector)DefaultDirectSuperclassesInspector.INSTANCE;
      Class<Month> class0 = Month.class;
      // Undeclared exception!
      try { 
        DefaultDirectSuperclassesInspector.arrayDirectSuperclasses(2101, class0, defaultDirectSuperclassesInspector0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Iterables
         //
         verifyException("com.github.ruediste.c3java.linearization.DefaultDirectSuperclassesInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      ImplementsOnlyDirectSuperclassesInspector implementsOnlyDirectSuperclassesInspector0 = new ImplementsOnlyDirectSuperclassesInspector();
      // Undeclared exception!
      try { 
        DefaultDirectSuperclassesInspector.arrayDirectSuperclasses((-2950), class0, implementsOnlyDirectSuperclassesInspector0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2950
         //
         verifyException("com.github.ruediste.c3java.linearization.DefaultDirectSuperclassesInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      ImplementsOnlyDirectSuperclassesInspector implementsOnlyDirectSuperclassesInspector0 = new ImplementsOnlyDirectSuperclassesInspector();
      List<Class<?>> list0 = implementsOnlyDirectSuperclassesInspector0.directParentClasses(class0);
      List<Class<?>> list1 = DefaultDirectSuperclassesInspector.makeArrayClasses(list0, 1);
      assertEquals(2, list1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDirectSuperclassesInspector defaultDirectSuperclassesInspector0 = (DefaultDirectSuperclassesInspector)DefaultDirectSuperclassesInspector.INSTANCE;
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      List<Class<?>> list0 = defaultDirectSuperclassesInspector0.directParentClasses(class0);
      // Undeclared exception!
      try { 
        DefaultDirectSuperclassesInspector.makeArrayClasses(list0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2
         //
         verifyException("com.github.ruediste.c3java.linearization.DefaultDirectSuperclassesInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      ImplementsOnlyDirectSuperclassesInspector implementsOnlyDirectSuperclassesInspector0 = (ImplementsOnlyDirectSuperclassesInspector)ImplementsOnlyDirectSuperclassesInspector.INSTANCE;
      // Undeclared exception!
      try { 
        DefaultDirectSuperclassesInspector.arrayDirectSuperclasses(0, class0, implementsOnlyDirectSuperclassesInspector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      // Undeclared exception!
      try { 
        DefaultDirectSuperclassesInspector.arrayDirectSuperclasses((-3), class0, (DirectSuperclassesInspector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.ruediste.c3java.linearization.DefaultDirectSuperclassesInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Month> class0 = Month.class;
      Class<?> class1 = DefaultDirectSuperclassesInspector.makeArrayClass(class0, 1);
      ImplementsOnlyDirectSuperclassesInspector implementsOnlyDirectSuperclassesInspector0 = new ImplementsOnlyDirectSuperclassesInspector();
      List<Class<?>> list0 = implementsOnlyDirectSuperclassesInspector0.directParentClasses(class1);
      assertEquals("class [Ljava.time.Month;", class1.toString());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Month> class0 = Month.class;
      Class<?> class1 = DefaultDirectSuperclassesInspector.makeArrayClass(class0, 2);
      DefaultDirectSuperclassesInspector defaultDirectSuperclassesInspector0 = new DefaultDirectSuperclassesInspector();
      // Undeclared exception!
      try { 
        defaultDirectSuperclassesInspector0.directParentClasses(class1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Iterables
         //
         verifyException("com.github.ruediste.c3java.linearization.DefaultDirectSuperclassesInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      DefaultDirectSuperclassesInspector defaultDirectSuperclassesInspector0 = new DefaultDirectSuperclassesInspector();
      Class<?> class1 = DefaultDirectSuperclassesInspector.makeArrayClass(class0, 8);
      List<Class<?>> list0 = defaultDirectSuperclassesInspector0.directParentClasses(class1);
      assertNotNull(list0);
      assertEquals("class [[[[[[[[Ljava.time.chrono.ChronoLocalDate;", class1.toString());
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Month> class0 = Month.class;
      List<Class<?>> list0 = DefaultDirectSuperclassesInspector.primitiveSuperclasses(class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDirectSuperclassesInspector defaultDirectSuperclassesInspector0 = new DefaultDirectSuperclassesInspector();
      Class<ChronoUnit> class0 = ChronoUnit.class;
      // Undeclared exception!
      try { 
        defaultDirectSuperclassesInspector0.directParentClasses(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Iterables
         //
         verifyException("com.github.ruediste.c3java.linearization.DefaultDirectSuperclassesInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDirectSuperclassesInspector defaultDirectSuperclassesInspector0 = (DefaultDirectSuperclassesInspector)DefaultDirectSuperclassesInspector.INSTANCE;
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      // Undeclared exception!
      try { 
        defaultDirectSuperclassesInspector0.directParentClasses(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Iterables
         //
         verifyException("com.github.ruediste.c3java.linearization.DefaultDirectSuperclassesInspector", e);
      }
  }
}
