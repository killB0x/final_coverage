/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 01:32:27 GMT 2022
 */

package net.sf.sojo.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.LinkedHashMap;
import net.sf.sojo.common.CompareResult;
import net.sf.sojo.common.ObjectUtil;
import net.sf.sojo.core.filter.ClassPropertyFilter;
import net.sf.sojo.core.filter.ClassPropertyFilterHandlerImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectUtil_ESTest extends ObjectUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      Class<CompareResult> class0 = CompareResult.class;
      int int0 = objectUtil0.compareTo(class0, objectUtil0);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
      assertEquals(0, int0);
      assertFalse(objectUtil0.getIgnoreAllNullValues());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil(false);
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter();
      ClassPropertyFilterHandlerImpl classPropertyFilterHandlerImpl0 = new ClassPropertyFilterHandlerImpl(classPropertyFilter0);
      objectUtil0.setClassPropertyFilterHandler(classPropertyFilterHandlerImpl0);
      objectUtil0.copy(classPropertyFilter0);
      assertFalse(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      CompareResult compareResult0 = new CompareResult();
      Object object0 = objectUtil0.makeComplex((Object) compareResult0);
      objectUtil0.makeSimple(object0);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil(true);
      Class<CompareResult> class0 = CompareResult.class;
      objectUtil0.makeComplex((Object) null, class0);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      CompareResult compareResult0 = new CompareResult();
      Object object0 = objectUtil0.makeComplex((Object) compareResult0);
      Class<Object> class0 = Object.class;
      objectUtil0.makeComplex(object0, class0);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil(true);
      objectUtil0.makeComplex((Object) null);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil(true);
      boolean boolean0 = objectUtil0.getWithSimpleKeyMapper();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil(false);
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter();
      ClassPropertyFilterHandlerImpl classPropertyFilterHandlerImpl0 = new ClassPropertyFilterHandlerImpl(classPropertyFilter0);
      objectUtil0.setClassPropertyFilterHandler(classPropertyFilterHandlerImpl0);
      objectUtil0.getClassPropertyFilterHandler();
      assertFalse(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      objectUtil0.copy((Object) null);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      int int0 = objectUtil0.compareTo("gP_xH-RwC%~QG+oR", "inZO ");
      assertEquals((-2), int0);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      String[] stringArray0 = new String[0];
      Object object0 = new Object();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Class<Object> class0 = Object.class;
      objectUtil0.addFormatterForType(dateFormat0, class0);
      // Undeclared exception!
      try { 
        objectUtil0.makeSimple(object0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.IllegalArgumentException: Cannot format given Object as a Date
         //
         verifyException("net.sf.sojo.core.Converter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Class<Object> class0 = Object.class;
      objectUtil0.addFormatterForType(decimalFormat0, class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        objectUtil0.makeSimple(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.IllegalArgumentException: Cannot format given Object as a Number
         //
         verifyException("net.sf.sojo.core.Converter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil(true);
      CompareResult compareResult0 = new CompareResult();
      Class<Object> class0 = Object.class;
      compareResult0.differentValue1 = (Object) compareResult0;
      // Undeclared exception!
      try { 
        objectUtil0.makeComplex((Object) compareResult0, (Class<?>) class0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Object object0 = objectUtil0.makeComplex((Object) mockSimpleDateFormat0);
      // Undeclared exception!
      try { 
        objectUtil0.makeComplex(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't create a class for String: org.evosuite.runtime.mock.java.text.MockSimpleDateFormat
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2BeanConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      Object object0 = new Object();
      CompareResult compareResult0 = objectUtil0.compare(object0, objectUtil0);
      assertFalse(objectUtil0.getIgnoreAllNullValues());
      assertEquals(1, compareResult0.numberOfRecursion);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
      assertNotNull(compareResult0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      CompareResult compareResult0 = new CompareResult();
      CompareResult compareResult1 = objectUtil0.compare(compareResult0, compareResult0);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
      assertNull(compareResult1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil(true);
      CompareResult compareResult0 = new CompareResult();
      Object object0 = objectUtil0.makeSimple((Object) compareResult0, (String[]) null);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      objectUtil0.setWithCycleDetection(true);
      boolean boolean0 = objectUtil0.getWithCycleDetection();
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      boolean boolean0 = objectUtil0.getWithCycleDetection();
      assertFalse(boolean0);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil(false);
      assertFalse(objectUtil0.getWithSimpleKeyMapper());
      
      objectUtil0.setWithSimpleKeyMapper(true);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil(false);
      objectUtil0.setWithSimpleKeyMapper(false);
      assertFalse(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      boolean boolean0 = objectUtil0.getIgnoreAllNullValues();
      assertFalse(boolean0);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil(false);
      objectUtil0.getClassPropertyFilterHandler();
      assertFalse(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      objectUtil0.getConverter();
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil(true);
      objectUtil0.makeSimple((Object) null);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil(false);
      boolean boolean0 = objectUtil0.getWithSimpleKeyMapper();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      Class<CompareResult> class0 = CompareResult.class;
      // Undeclared exception!
      try { 
        objectUtil0.makeComplex((Object) class0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassCastException: class java.lang.Class cannot be cast to class java.util.Map (java.lang.Class and java.util.Map are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.Converter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      CompareResult[] compareResultArray0 = objectUtil0.compareAll(objectUtil0, (Object) null);
      assertNull(compareResultArray0);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      objectUtil0.compareAll((Object) null, (Object) null);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      CompareResult compareResult0 = new CompareResult();
      CompareResult compareResult1 = new CompareResult();
      int int0 = objectUtil0.compareTo(compareResult0, compareResult1);
      assertEquals(0, int0);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      int int0 = objectUtil0.compareTo(objectUtil0, objectUtil0);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      CompareResult compareResult0 = new CompareResult();
      // Undeclared exception!
      try { 
        objectUtil0.compareTo(compareResult0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Second arg by compareTo is Null
         //
         verifyException("net.sf.sojo.common.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      // Undeclared exception!
      try { 
        objectUtil0.compareTo((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // First arg by compareTo is Null
         //
         verifyException("net.sf.sojo.common.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      Object object0 = new Object();
      boolean boolean0 = objectUtil0.equals(object0, object0);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      CompareResult compareResult0 = new CompareResult();
      boolean boolean0 = objectUtil0.equals((Object) compareResult0, (Object) null);
      assertFalse(boolean0);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      Object object0 = new Object();
      CompareResult compareResult0 = new CompareResult();
      boolean boolean0 = objectUtil0.equals(object0, (Object) compareResult0);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      boolean boolean0 = objectUtil0.equals((Object) null, (Object) null);
      assertFalse(boolean0);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<CompareResult> class0 = CompareResult.class;
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter(class0, (String[]) null);
      ObjectUtil objectUtil0 = new ObjectUtil();
      objectUtil0.hashCode((Object) classPropertyFilter0);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      CompareResult compareResult0 = new CompareResult();
      String[] stringArray0 = new String[1];
      LinkedHashMap linkedHashMap0 = (LinkedHashMap)objectUtil0.makeSimple((Object) compareResult0, stringArray0);
      assertNotNull(linkedHashMap0);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
      assertEquals(0, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      objectUtil0.makeSimple((Object) null, (String[]) null);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil(false);
      CompareResult compareResult0 = new CompareResult();
      objectUtil0.setWithCycleDetection(true);
      int int0 = objectUtil0.compareTo(objectUtil0, compareResult0);
      assertFalse(objectUtil0.getWithSimpleKeyMapper());
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      Class<CompareResult> class0 = CompareResult.class;
      objectUtil0.removeFormatterByType(class0);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      Class<Object> class0 = Object.class;
      objectUtil0.addFormatterForType(dateFormat0, class0);
      Class<CompareResult> class1 = CompareResult.class;
      objectUtil0.removeFormatterByType(class1);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil(false);
      CompareResult compareResult0 = new CompareResult();
      CompareResult[] compareResultArray0 = objectUtil0.compareAll(objectUtil0, compareResult0);
      assertFalse(objectUtil0.getIgnoreAllNullValues());
      assertFalse(objectUtil0.getWithSimpleKeyMapper());
      assertNotNull(compareResultArray0);
      assertEquals(4, compareResultArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      Class<CompareResult> class0 = CompareResult.class;
      objectUtil0.addFormatterForType(numberFormat0, class0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      objectUtil0.addFormatterForType(mockSimpleDateFormat0, class0);
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil(false);
      objectUtil0.setIgnoreAllNullValues(true);
      boolean boolean0 = objectUtil0.getIgnoreAllNullValues();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil(false);
      CompareResult compareResult0 = new CompareResult();
      // Undeclared exception!
      try { 
        objectUtil0.copy(compareResult0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't create a class for String: net.sf.sojo.common.CompareResult
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2BeanConversion", e);
      }
  }
}
