/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:21:52 GMT 2022
 */

package net.sf.sojo.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.sf.sojo.common.CompareResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CompareResult_ESTest extends CompareResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompareResult compareResult0 = new CompareResult();
      assertEquals((-1), compareResult0.index);
      assertEquals((-1), compareResult0.numberOfRecursion);
      
      String string0 = compareResult0.toString();
      assertEquals((-1), compareResult0.numberOfRecursion);
      assertEquals("Path: null: null <--> null", string0);
      assertEquals((-1), compareResult0.index);
      
      compareResult0.getCompareToValue();
      compareResult0.differentValue2 = (Object) "Path: null: null <--> null";
      compareResult0.toString();
      compareResult0.getCompareToValue();
      compareResult0.differentValue1 = (Object) "Path: null: null <--> Path: null: null <--> null";
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
      compareResult0.differentPath = ">$V61y\"?n";
      compareResult0.getCompareToValue();
      compareResult0.toString();
      compareResult0.toString();
      compareResult0.toString();
      compareResult0.differentPath = "Path: ";
      compareResult0.numberOfRecursion = 965;
      Integer.getInteger("Path: >$V61y\"?n: Path: null: null <--> Path: null: null <--> null <--> Path: null: null <--> null");
      compareResult0.key = (Object) null;
      compareResult0.key = (Object) "Path: >$V61y\"?n: Path: null: null <--> Path: null: null <--> null <--> Path: null: null <--> null";
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
      compareResult0.toString();
      compareResult0.toString();
      compareResult0.toString();
      compareResult0.toString();
      compareResult0.toString();
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompareResult compareResult0 = new CompareResult();
      Object object0 = compareResult0.differentValue1;
      compareResult0.differentValue2 = null;
      Integer integer0 = new Integer((-204));
      compareResult0.key = (Object) integer0;
      Integer integer1 = new Integer(3538);
      compareResult0.key = (Object) integer1;
      Object object1 = compareResult0.differentValue2;
      compareResult0.key = null;
      compareResult0.getCompareToValue();
      compareResult0.differentValue2 = (Object) integer0;
      Integer integer2 = new Integer(0);
      compareResult0.differentValue1 = (Object) integer2;
      compareResult0.getCompareToValue();
      compareResult0.differentPath = "";
      compareResult0.toString();
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
      Object object2 = compareResult0.key;
      compareResult0.differentValue2 = null;
      compareResult0.getCompareToValue();
      compareResult0.numberOfRecursion = 0;
      compareResult0.numberOfRecursion = (-204);
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
      compareResult0.toString();
      compareResult0.toString();
      compareResult0.getCompareToValue();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompareResult compareResult0 = new CompareResult();
      String string0 = compareResult0.toString();
      compareResult0.differentPath = "Path: null: null <--> null";
      compareResult0.differentValue2 = (Object) compareResult0;
      compareResult0.toString();
      compareResult0.differentValue1 = (Object) string0;
      int int0 = (-717);
      compareResult0.numberOfRecursion = int0;
      compareResult0.differentPath = string0;
      compareResult0.getCompareToValue();
      compareResult0.key = (Object) string0;
      int int1 = compareResult0.getCompareToValue();
      compareResult0.toString();
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
      compareResult0.numberOfRecursion = int1;
      compareResult0.getCompareToValue();
      compareResult0.toString();
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
      compareResult0.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompareResult compareResult0 = new CompareResult();
      compareResult0.toString();
      compareResult0.differentValue2 = (Object) "Path: null: null <--> null";
      Integer integer0 = new Integer((-1));
      compareResult0.differentValue1 = (Object) integer0;
      // Undeclared exception!
      try { 
        compareResult0.getCompareToValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.String cannot be cast to class java.lang.Integer (java.lang.String and java.lang.Integer are in module java.base of loader 'bootstrap')
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompareResult compareResult0 = new CompareResult();
      compareResult0.toString();
      Object object0 = compareResult0.differentValue1;
      compareResult0.differentValue2 = null;
      compareResult0.getCompareToValue();
      compareResult0.toString();
      Integer integer0 = new Integer(0);
      compareResult0.differentValue1 = (Object) "Path: null: null <--> null";
      compareResult0.getCompareToValue();
      compareResult0.differentValue2 = (Object) integer0;
      compareResult0.differentPath = "Path: null: null <--> null";
      // Undeclared exception!
      try { 
        compareResult0.getCompareToValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompareResult compareResult0 = new CompareResult();
      assertEquals((-1), compareResult0.numberOfRecursion);
      
      Object object0 = new Object();
      compareResult0.differentPath = "9d4[a*Y?8pniu$v75G";
      compareResult0.differentValue1 = object0;
      compareResult0.numberOfRecursion = 0;
      Integer integer0 = new Integer((-1));
      compareResult0.differentValue2 = (Object) integer0;
      compareResult0.getCompareToValue();
      Integer integer1 = (Integer)compareResult0.differentValue2;
      compareResult0.key = (Object) integer1;
      compareResult0.toString();
      compareResult0.getCompareToValue();
      compareResult0.toString();
      compareResult0.toString();
      compareResult0.toString();
      compareResult0.toString();
      int int0 = compareResult0.getCompareToValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompareResult compareResult0 = new CompareResult();
      Object object0 = new Object();
      compareResult0.differentValue2 = object0;
      compareResult0.differentValue2 = object0;
      compareResult0.key = null;
      Object object1 = compareResult0.differentValue2;
      compareResult0.differentValue1 = object1;
      compareResult0.toString();
      compareResult0.differentPath = "Path: null: java.lang.Object@22366859 <--> java.lang.Object@22366859";
      int int0 = compareResult0.getCompareToValue();
      assertEquals(0, int0);
      
      compareResult0.toString();
      compareResult0.toString();
      assertEquals((-1), compareResult0.index);
      assertEquals((-1), compareResult0.numberOfRecursion);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompareResult compareResult0 = new CompareResult();
      Object object0 = new Object();
      Integer integer0 = new Integer((-1964));
      compareResult0.differentValue1 = (Object) integer0;
      compareResult0.differentValue2 = object0;
      compareResult0.toString();
      int int0 = compareResult0.getCompareToValue();
      assertEquals(0, int0);
      
      compareResult0.toString();
      assertEquals((-1), compareResult0.numberOfRecursion);
      assertEquals((-1), compareResult0.index);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompareResult compareResult0 = new CompareResult();
      compareResult0.differentPath = "";
      compareResult0.differentPath = "";
      compareResult0.toString();
      Integer integer0 = new Integer((-1));
      compareResult0.toString();
      compareResult0.differentValue1 = (Object) integer0;
      compareResult0.differentPath = "";
      compareResult0.differentPath = ")/@zaH#";
      compareResult0.toString();
      assertEquals((-1), compareResult0.index);
      
      compareResult0.key = (Object) "";
      compareResult0.index = 956;
      compareResult0.getCompareToValue();
      compareResult0.differentPath = "";
      compareResult0.getCompareToValue();
      Object object0 = new Object();
      compareResult0.differentValue2 = object0;
      compareResult0.toString();
      compareResult0.differentValue1 = (Object) "Path: )/@zaH#: -1 <--> null";
      compareResult0.getCompareToValue();
      String string0 = (String)compareResult0.differentValue1;
      compareResult0.key = (Object) "Path: )/@zaH#: -1 <--> null";
      compareResult0.toString();
      compareResult0.getCompareToValue();
      compareResult0.toString();
      compareResult0.toString();
      compareResult0.getCompareToValue();
      compareResult0.toString();
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
      compareResult0.toString();
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
      compareResult0.toString();
      assertEquals((-1), compareResult0.numberOfRecursion);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompareResult compareResult0 = new CompareResult();
      Object object0 = new Object();
      compareResult0.differentValue1 = object0;
      int int0 = compareResult0.getCompareToValue();
      assertEquals((-1), compareResult0.numberOfRecursion);
      assertEquals(0, int0);
      assertEquals((-1), compareResult0.index);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompareResult compareResult0 = new CompareResult();
      Integer integer0 = new Integer((-1));
      compareResult0.differentValue2 = (Object) integer0;
      compareResult0.differentValue1 = (Object) integer0;
      String string0 = compareResult0.toString();
      assertEquals("Path: null: -1 <--> -1", string0);
      
      compareResult0.getCompareToValue();
      assertEquals((-1), compareResult0.index);
      assertEquals((-1), compareResult0.numberOfRecursion);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompareResult compareResult0 = new CompareResult();
      assertEquals((-1), compareResult0.numberOfRecursion);
      
      Object object0 = compareResult0.differentValue1;
      compareResult0.differentPath = "3O0E}{";
      compareResult0.index = 1482;
      compareResult0.differentPath = "p3";
      compareResult0.differentValue1 = (Object) "p3";
      compareResult0.numberOfRecursion = (-3502);
      compareResult0.differentValue1 = null;
      Object object1 = compareResult0.key;
      compareResult0.key = null;
      compareResult0.differentValue1 = null;
      compareResult0.getCompareToValue();
      compareResult0.differentValue2 = null;
      Integer integer0 = Integer.valueOf((-3739));
      compareResult0.key = (Object) integer0;
      Integer integer1 = Integer.getInteger("p3", 1482);
      compareResult0.numberOfRecursion = (-1);
      compareResult0.differentValue2 = (Object) integer1;
      compareResult0.toString();
      compareResult0.numberOfRecursion = 581;
      compareResult0.key = (Object) integer1;
      compareResult0.getCompareToValue();
      compareResult0.toString();
      compareResult0.toString();
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
      compareResult0.getCompareToValue();
      compareResult0.toString();
      compareResult0.getCompareToValue();
      compareResult0.toString();
      int int0 = compareResult0.getCompareToValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompareResult compareResult0 = new CompareResult();
      int int0 = compareResult0.getCompareToValue();
      assertEquals((-1), compareResult0.index);
      assertEquals((-1), compareResult0.numberOfRecursion);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompareResult compareResult0 = new CompareResult();
      compareResult0.toString();
      compareResult0.differentValue2 = (Object) "Path: null: null <--> null";
      int int0 = compareResult0.getCompareToValue();
      assertEquals(0, int0);
      
      String string0 = compareResult0.toString();
      assertEquals((-1), compareResult0.numberOfRecursion);
      assertEquals("Path: null: null <--> Path: null: null <--> null", string0);
      assertEquals((-1), compareResult0.index);
  }
}
