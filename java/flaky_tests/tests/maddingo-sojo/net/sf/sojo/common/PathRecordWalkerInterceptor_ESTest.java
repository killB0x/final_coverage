/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:17:50 GMT 2022
 */

package net.sf.sojo.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import net.sf.sojo.common.PathRecordWalkerInterceptor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PathRecordWalkerInterceptor_ESTest extends PathRecordWalkerInterceptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PathRecordWalkerInterceptor pathRecordWalkerInterceptor0 = new PathRecordWalkerInterceptor();
      pathRecordWalkerInterceptor0.visitElement("", 1023, "", 1023, "", 199);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        pathRecordWalkerInterceptor0.visitElement(object0, (-657), "", 7, "", 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Path is not unique:  - 
         //
         verifyException("net.sf.sojo.common.PathRecordWalkerInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PathRecordWalkerInterceptor pathRecordWalkerInterceptor0 = new PathRecordWalkerInterceptor();
      assertFalse(pathRecordWalkerInterceptor0.getOnlySimpleProperties());
      
      pathRecordWalkerInterceptor0.setOnlySimpleProperties(true);
      boolean boolean0 = pathRecordWalkerInterceptor0.addToPaths(2, "");
      assertTrue(pathRecordWalkerInterceptor0.getOnlySimpleProperties());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PathRecordWalkerInterceptor pathRecordWalkerInterceptor0 = new PathRecordWalkerInterceptor();
      assertFalse(pathRecordWalkerInterceptor0.getOnlySimpleProperties());
      
      pathRecordWalkerInterceptor0.setOnlySimpleProperties(true);
      boolean boolean0 = pathRecordWalkerInterceptor0.getOnlySimpleProperties();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PathRecordWalkerInterceptor pathRecordWalkerInterceptor0 = new PathRecordWalkerInterceptor();
      assertFalse(pathRecordWalkerInterceptor0.getFilterUniqueIdProperty());
      
      pathRecordWalkerInterceptor0.setFilterUniqueIdProperty(true);
      boolean boolean0 = pathRecordWalkerInterceptor0.getFilterUniqueIdProperty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PathRecordWalkerInterceptor pathRecordWalkerInterceptor0 = new PathRecordWalkerInterceptor();
      Object object0 = new Object();
      boolean boolean0 = pathRecordWalkerInterceptor0.visitElement(object0, (-1578), object0, (-1578), "~unique-id~", (-1578));
      assertFalse(boolean0);
      
      Map<String, Object> map0 = pathRecordWalkerInterceptor0.getAllRecordedPaths();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PathRecordWalkerInterceptor pathRecordWalkerInterceptor0 = new PathRecordWalkerInterceptor();
      // Undeclared exception!
      try { 
        pathRecordWalkerInterceptor0.visitElement((Object) null, (-1351), (Object) null, (-1351), (String) null, (-1351));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PathRecordWalkerInterceptor pathRecordWalkerInterceptor0 = new PathRecordWalkerInterceptor();
      pathRecordWalkerInterceptor0.setFilterUniqueIdProperty(true);
      // Undeclared exception!
      try { 
        pathRecordWalkerInterceptor0.addToPaths((-2829), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.common.PathRecordWalkerInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PathRecordWalkerInterceptor pathRecordWalkerInterceptor0 = new PathRecordWalkerInterceptor();
      boolean boolean0 = pathRecordWalkerInterceptor0.getOnlySimpleProperties();
      assertFalse(boolean0);
      assertFalse(pathRecordWalkerInterceptor0.getFilterUniqueIdProperty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PathRecordWalkerInterceptor pathRecordWalkerInterceptor0 = new PathRecordWalkerInterceptor();
      boolean boolean0 = pathRecordWalkerInterceptor0.getFilterUniqueIdProperty();
      assertFalse(boolean0);
      assertFalse(pathRecordWalkerInterceptor0.getOnlySimpleProperties());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PathRecordWalkerInterceptor pathRecordWalkerInterceptor0 = new PathRecordWalkerInterceptor();
      assertFalse(pathRecordWalkerInterceptor0.getFilterUniqueIdProperty());
      
      pathRecordWalkerInterceptor0.setFilterUniqueIdProperty(true);
      boolean boolean0 = pathRecordWalkerInterceptor0.visitElement("~unique-id~", (-40), "~unique-id~", (-40), "~unique-id~", (-40));
      assertTrue(pathRecordWalkerInterceptor0.getFilterUniqueIdProperty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PathRecordWalkerInterceptor pathRecordWalkerInterceptor0 = new PathRecordWalkerInterceptor();
      assertFalse(pathRecordWalkerInterceptor0.getOnlySimpleProperties());
      
      pathRecordWalkerInterceptor0.setOnlySimpleProperties(true);
      boolean boolean0 = pathRecordWalkerInterceptor0.addToPaths(1, "2JMnyWHZ3r*rwK6t");
      assertTrue(pathRecordWalkerInterceptor0.getOnlySimpleProperties());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PathRecordWalkerInterceptor pathRecordWalkerInterceptor0 = new PathRecordWalkerInterceptor();
      assertFalse(pathRecordWalkerInterceptor0.getOnlySimpleProperties());
      
      pathRecordWalkerInterceptor0.setOnlySimpleProperties(true);
      boolean boolean0 = pathRecordWalkerInterceptor0.addToPaths((-2817), "");
      assertTrue(pathRecordWalkerInterceptor0.getOnlySimpleProperties());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PathRecordWalkerInterceptor pathRecordWalkerInterceptor0 = new PathRecordWalkerInterceptor();
      assertFalse(pathRecordWalkerInterceptor0.getFilterUniqueIdProperty());
      
      pathRecordWalkerInterceptor0.setFilterUniqueIdProperty(true);
      boolean boolean0 = pathRecordWalkerInterceptor0.addToPaths(421, "");
      assertTrue(pathRecordWalkerInterceptor0.getFilterUniqueIdProperty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PathRecordWalkerInterceptor pathRecordWalkerInterceptor0 = new PathRecordWalkerInterceptor();
      pathRecordWalkerInterceptor0.endWalk();
      assertFalse(pathRecordWalkerInterceptor0.getOnlySimpleProperties());
      assertFalse(pathRecordWalkerInterceptor0.getFilterUniqueIdProperty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PathRecordWalkerInterceptor pathRecordWalkerInterceptor0 = new PathRecordWalkerInterceptor();
      Object object0 = new Object();
      pathRecordWalkerInterceptor0.visitIterateableElement(object0, 2, "", 2407);
      assertFalse(pathRecordWalkerInterceptor0.getOnlySimpleProperties());
      assertFalse(pathRecordWalkerInterceptor0.getFilterUniqueIdProperty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PathRecordWalkerInterceptor pathRecordWalkerInterceptor0 = new PathRecordWalkerInterceptor();
      pathRecordWalkerInterceptor0.startWalk("");
      assertFalse(pathRecordWalkerInterceptor0.getOnlySimpleProperties());
      assertFalse(pathRecordWalkerInterceptor0.getFilterUniqueIdProperty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PathRecordWalkerInterceptor pathRecordWalkerInterceptor0 = new PathRecordWalkerInterceptor();
      pathRecordWalkerInterceptor0.getAllRecordedPaths();
      assertFalse(pathRecordWalkerInterceptor0.getOnlySimpleProperties());
      assertFalse(pathRecordWalkerInterceptor0.getFilterUniqueIdProperty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PathRecordWalkerInterceptor pathRecordWalkerInterceptor0 = new PathRecordWalkerInterceptor();
      assertFalse(pathRecordWalkerInterceptor0.getFilterUniqueIdProperty());
      
      pathRecordWalkerInterceptor0.setFilterUniqueIdProperty(true);
      boolean boolean0 = pathRecordWalkerInterceptor0.addToPaths(359, "a~unique-id~");
      assertTrue(pathRecordWalkerInterceptor0.getFilterUniqueIdProperty());
      assertFalse(boolean0);
  }
}
