/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:16:54 GMT 2022
 */

package net.sf.sojo.core.conversion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalTime;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import java.util.Locale;
import net.sf.sojo.core.conversion.Simple2SimpleConversion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Simple2SimpleConversion_ESTest extends Simple2SimpleConversion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Date> class0 = Date.class;
      Simple2SimpleConversion simple2SimpleConversion0 = new Simple2SimpleConversion(class0, class0);
      // Undeclared exception!
      try { 
        simple2SimpleConversion0.convert((Object) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.Simple2SimpleConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Date> class0 = Date.class;
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      Simple2SimpleConversion simple2SimpleConversion0 = null;
      try {
        simple2SimpleConversion0 = new Simple2SimpleConversion(class0, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The classes: class java.util.Date and interface java.time.chrono.ChronoLocalDate must be a simple type.
         //
         verifyException("net.sf.sojo.core.SimpleConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      Simple2SimpleConversion simple2SimpleConversion0 = null;
      try {
        simple2SimpleConversion0 = new Simple2SimpleConversion(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The classes: class java.util.Locale$LanguageRange and class java.util.Locale$LanguageRange must be a simple type.
         //
         verifyException("net.sf.sojo.core.SimpleConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Date> class1 = Date.class;
      Simple2SimpleConversion simple2SimpleConversion0 = new Simple2SimpleConversion(class0, class1);
      // Undeclared exception!
      try { 
        simple2SimpleConversion0.convert(class0, (Class<?>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Class@0000000003
         //
         verifyException("net.sf.sojo.core.conversion.Simple2SimpleConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Date> class1 = Date.class;
      Simple2SimpleConversion simple2SimpleConversion0 = new Simple2SimpleConversion(class0, class1);
      LocalTime localTime0 = MockLocalTime.now();
      Time time0 = Time.valueOf(localTime0);
      Object object0 = simple2SimpleConversion0.convert(time0, class0);
      assertEquals(73281000L, object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Date> class1 = Date.class;
      Simple2SimpleConversion simple2SimpleConversion0 = new Simple2SimpleConversion(class0, class1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Object object0 = simple2SimpleConversion0.convert(date0, class0);
      assertEquals((-12219292800000L), object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Date> class1 = Date.class;
      Simple2SimpleConversion simple2SimpleConversion0 = new Simple2SimpleConversion(class0, class1);
      java.sql.Date date0 = new java.sql.Date((-1L));
      Object object0 = simple2SimpleConversion0.convert(date0, class0);
      assertEquals((-1L), object0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Simple2SimpleConversion simple2SimpleConversion0 = new Simple2SimpleConversion(class0);
      Object object0 = new Object();
      Class<Date> class1 = Date.class;
      Object object1 = simple2SimpleConversion0.convert(object0, class1);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Date> class1 = Date.class;
      Simple2SimpleConversion simple2SimpleConversion0 = new Simple2SimpleConversion(class1, class0);
      Timestamp timestamp0 = new Timestamp(2802L);
      Object object0 = simple2SimpleConversion0.convert(timestamp0, class0);
      assertEquals(2802L, object0);
  }
}
