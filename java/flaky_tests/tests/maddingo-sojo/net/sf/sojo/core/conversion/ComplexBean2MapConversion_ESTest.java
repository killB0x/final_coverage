/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:00:19 GMT 2022
 */

package net.sf.sojo.core.conversion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashMap;
import net.sf.sojo.core.Converter;
import net.sf.sojo.core.IConverterExtension;
import net.sf.sojo.core.NonCriticalExceptionHandler;
import net.sf.sojo.core.conversion.ComplexBean2MapConversion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ComplexBean2MapConversion_ESTest extends ComplexBean2MapConversion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      Class<Object> class0 = Object.class;
      IConverterExtension iConverterExtension0 = mock(IConverterExtension.class, new ViolatedAssumptionAnswer());
      Object object0 = complexBean2MapConversion0.convert(complexBean2MapConversion0, class0, iConverterExtension0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      LinkedHashMap linkedHashMap0 = (LinkedHashMap)complexBean2MapConversion0.convert(complexBean2MapConversion0, (Class<?>) null, (IConverterExtension) null);
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      Class<Object> class0 = Object.class;
      boolean boolean0 = complexBean2MapConversion0.isAssignableTo(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      LinkedHashMap<Object, ComplexBean2MapConversion> linkedHashMap0 = new LinkedHashMap<Object, ComplexBean2MapConversion>();
      boolean boolean0 = complexBean2MapConversion0.isAssignableFrom(linkedHashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      // Undeclared exception!
      try { 
        complexBean2MapConversion0.doTransformIteratorObject2KeyValuePair((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.ComplexBean2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      // Undeclared exception!
      try { 
        complexBean2MapConversion0.doTransformIteratorObject2KeyValuePair(linkedHashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.util.LinkedHashMap cannot be cast to class java.util.Map$Entry (java.util.LinkedHashMap and java.util.Map$Entry are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.ComplexBean2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      IConverterExtension iConverterExtension0 = mock(IConverterExtension.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(iConverterExtension0).convert(any());
      doReturn((String) null).when(iConverterExtension0).getUniqueId(any());
      Object object0 = complexBean2MapConversion0.convert(complexBean2MapConversion0, complexBean2MapConversion0.DEFAULT_MAP_TYPE, iConverterExtension0);
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      Object object1 = new Object();
      Converter converter0 = new Converter();
      // Undeclared exception!
      try { 
        complexBean2MapConversion0.doConvert(object0, linkedHashMap0, object1, complexBean2MapConversion0, converter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.String (java.lang.Object and java.lang.String are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.ComplexBean2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      Class<Object> class0 = Object.class;
      LinkedHashMap<ComplexBean2MapConversion, ComplexBean2MapConversion> linkedHashMap0 = new LinkedHashMap<ComplexBean2MapConversion, ComplexBean2MapConversion>(2147483645);
      // Undeclared exception!
      complexBean2MapConversion0.doAddObject(complexBean2MapConversion0, linkedHashMap0, (Object) null, class0, 2147483645);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        complexBean2MapConversion0.doAddObject(object0, object0, object0, object0, 3064);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.util.Map (java.lang.Object and java.util.Map are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.ComplexBean2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      NonCriticalExceptionHandler.setNonCriticalExceptionHandler((NonCriticalExceptionHandler) null);
      Class<Object> class0 = Object.class;
      NonCriticalExceptionHandler.setNonCriticalExceptionHandlerEnabled(true);
      // Undeclared exception!
      try { 
        complexBean2MapConversion0.convert((Object) null, class0, (IConverterExtension) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.NonCriticalExceptionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      NonCriticalExceptionHandler.setNonCriticalExceptionHandlerEnabled(true);
      // Undeclared exception!
      try { 
        complexBean2MapConversion0.doAddObject((Object) null, (Object) null, (Object) null, (Object) null, (-1542637413));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.ComplexBean2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      complexBean2MapConversion0.doAddObject((Object) null, (Object) null, (Object) null, (Object) null, (-1441));
      assertFalse(complexBean2MapConversion0.getWithCycleDetection());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      NonCriticalExceptionHandler.setNonCriticalExceptionHandlerEnabled(true);
      IConverterExtension iConverterExtension0 = mock(IConverterExtension.class, new ViolatedAssumptionAnswer());
      doReturn(complexBean2MapConversion0, complexBean2MapConversion0, complexBean2MapConversion0).when(iConverterExtension0).convert(any());
      doReturn("7#pN,F#/EPOx}u&R3s").when(iConverterExtension0).getUniqueId(any());
      LinkedHashMap linkedHashMap0 = (LinkedHashMap)complexBean2MapConversion0.convert(complexBean2MapConversion0, complexBean2MapConversion0.DEFAULT_MAP_TYPE, iConverterExtension0);
      assertNotNull(linkedHashMap0);
      
      Object object0 = new Object();
      Converter converter0 = new Converter();
      Object[] objectArray0 = complexBean2MapConversion0.doConvert(linkedHashMap0, object0, (Object) null, converter0, converter0);
      assertEquals(5, linkedHashMap0.size());
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<ComplexBean2MapConversion> class0 = ComplexBean2MapConversion.class;
      ComplexBean2MapConversion complexBean2MapConversion0 = null;
      try {
        complexBean2MapConversion0 = new ComplexBean2MapConversion(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The class: class net.sf.sojo.core.conversion.ComplexBean2MapConversion must be implements the java.util.Map interface.
         //
         verifyException("net.sf.sojo.core.conversion.ComplexBean2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      ComplexBean2MapConversion complexBean2MapConversion1 = new ComplexBean2MapConversion(complexBean2MapConversion0.DEFAULT_MAP_TYPE);
      assertFalse(complexBean2MapConversion1.getWithCycleDetection());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      boolean boolean0 = complexBean2MapConversion0.isAssignableTo(complexBean2MapConversion0.DEFAULT_MAP_TYPE);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      IConverterExtension iConverterExtension0 = mock(IConverterExtension.class, new ViolatedAssumptionAnswer());
      doReturn(complexBean2MapConversion0, complexBean2MapConversion0, complexBean2MapConversion0).when(iConverterExtension0).convert(any());
      doReturn("7#pN,F#/EPOx}u&R3s").when(iConverterExtension0).getUniqueId(any());
      LinkedHashMap linkedHashMap0 = (LinkedHashMap)complexBean2MapConversion0.convert(complexBean2MapConversion0, complexBean2MapConversion0.DEFAULT_MAP_TYPE, iConverterExtension0);
      assertNotNull(linkedHashMap0);
      assertEquals(5, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      boolean boolean0 = complexBean2MapConversion0.isAssignableFrom(complexBean2MapConversion0);
      assertTrue(boolean0);
  }
}
