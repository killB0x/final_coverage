/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:29:18 GMT 2022
 */

package net.sf.sojo.core.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.Map;
import net.sf.sojo.core.reflect.ClassPropertiesCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassPropertiesCache_ESTest extends ClassPropertiesCache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClassPropertiesCache classPropertiesCache0 = new ClassPropertiesCache();
      Class<Integer> class0 = Integer.class;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      classPropertiesCache0.addClassPropertiesMap(class0, hashMap0);
      int int0 = classPropertiesCache0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClassPropertiesCache classPropertiesCache0 = new ClassPropertiesCache();
      Class<Integer> class0 = Integer.class;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      classPropertiesCache0.addClassPropertiesMap(class0, hashMap0);
      Map<Object, Object> map0 = classPropertiesCache0.getClassPropertiesMapByClass(class0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassPropertiesCache classPropertiesCache0 = new ClassPropertiesCache();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      classPropertiesCache0.addClassPropertiesMap(class0, hashMap0);
      boolean boolean0 = classPropertiesCache0.containsClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ClassPropertiesCache classPropertiesCache0 = new ClassPropertiesCache();
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = classPropertiesCache0.containsClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClassPropertiesCache classPropertiesCache0 = new ClassPropertiesCache();
      classPropertiesCache0.clear();
      assertEquals(0, classPropertiesCache0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClassPropertiesCache classPropertiesCache0 = new ClassPropertiesCache();
      Class<Integer> class0 = Integer.class;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      classPropertiesCache0.addClassPropertiesMap(class0, hashMap0);
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      Map<Object, Object> map0 = classPropertiesCache0.getClassPropertiesMapByClass(class0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ClassPropertiesCache classPropertiesCache0 = new ClassPropertiesCache();
      Class<Integer> class0 = Integer.class;
      classPropertiesCache0.removePropertiesByClass(class0);
      assertEquals(0, classPropertiesCache0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ClassPropertiesCache classPropertiesCache0 = new ClassPropertiesCache();
      Class<Integer> class0 = Integer.class;
      Map<Object, Object> map0 = classPropertiesCache0.getClassPropertiesMapByClass(class0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ClassPropertiesCache classPropertiesCache0 = new ClassPropertiesCache();
      int int0 = classPropertiesCache0.size();
      assertEquals(0, int0);
  }
}
