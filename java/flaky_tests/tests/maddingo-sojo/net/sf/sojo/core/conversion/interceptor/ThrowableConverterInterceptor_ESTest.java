/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:26:15 GMT 2022
 */

package net.sf.sojo.core.conversion.interceptor;

import org.junit.Test;
import static org.junit.Assert.*;
import net.sf.sojo.core.conversion.interceptor.ThrowableConverterInterceptor;
import net.sf.sojo.util.ThrowableWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ThrowableConverterInterceptor_ESTest extends ThrowableConverterInterceptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      Class<Object> class0 = Object.class;
      Object object0 = throwableConverterInterceptor0.beforeConvert((Object) null, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      Class<Object> class0 = Object.class;
      Object object0 = throwableConverterInterceptor0.afterConvert((Object) null, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      Class<ThrowableWrapper> class0 = ThrowableWrapper.class;
      Class class1 = (Class)throwableConverterInterceptor0.afterConvert(class0, class0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper();
      Class<ThrowableWrapper> class0 = ThrowableWrapper.class;
      Object object0 = throwableConverterInterceptor0.afterConvert(throwableWrapper0, class0);
      ThrowableWrapper throwableWrapper1 = (ThrowableWrapper)throwableConverterInterceptor0.beforeConvert(object0, class0);
      assertEquals("The Class: net.sf.sojo.util.ThrowableWrapper is not from type Throwable!", throwableWrapper1.getMessage());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      MockException mockException0 = new MockException();
      throwableConverterInterceptor0.onError(mockException0);
  }
}
