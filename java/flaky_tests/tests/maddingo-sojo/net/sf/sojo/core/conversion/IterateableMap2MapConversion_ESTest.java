/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:14:52 GMT 2022
 */

package net.sf.sojo.core.conversion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashMap;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import net.sf.sojo.core.Converter;
import net.sf.sojo.core.ConverterInterceptorHandler;
import net.sf.sojo.core.IConverter;
import net.sf.sojo.core.IConverterExtension;
import net.sf.sojo.core.conversion.IterateableMap2BeanConversion;
import net.sf.sojo.core.conversion.IterateableMap2MapConversion;
import net.sf.sojo.core.filter.ClassPropertyFilterHandlerImpl;
import net.sf.sojo.util.Util;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IterateableMap2MapConversion_ESTest extends IterateableMap2MapConversion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      assertFalse(iterateableMap2MapConversion0.getIgnoreNullValues());
      
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      LinkedHashMap<Integer, Object> linkedHashMap1 = new LinkedHashMap<Integer, Object>();
      Converter converter0 = new Converter();
      converter0.clearConverterInterceptorSize();
      converter0.addConversion(iterateableMap2MapConversion0);
      iterateableMap2MapConversion0.doAddObject(linkedHashMap0, linkedHashMap0, linkedHashMap1, linkedHashMap0, (-4340));
      LinkedHashMap<Integer, Integer> linkedHashMap2 = new LinkedHashMap<Integer, Integer>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion0.doConvert(linkedHashMap2, object0, linkedHashMap1, linkedHashMap0, converter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      Converter converter0 = new Converter();
      converter0.addConversion(iterateableMap2MapConversion0);
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      IConverterExtension iConverterExtension0 = mock(IConverterExtension.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion0.convert((Object) null, (Class<?>) null, iConverterExtension0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      LinkedHashMap<Integer, Object> linkedHashMap1 = new LinkedHashMap<Integer, Object>();
      linkedHashMap0.put(linkedHashMap1, iterateableMap2MapConversion0);
      Converter converter0 = new Converter();
      converter0.addConversion(iterateableMap2MapConversion0);
      Integer integer0 = new Integer((-1989));
      LinkedHashMap<Object, Object> linkedHashMap2 = new LinkedHashMap<Object, Object>();
      linkedHashMap1.put(integer0, linkedHashMap2);
      LinkedHashMap<Integer, Integer> linkedHashMap3 = new LinkedHashMap<Integer, Integer>();
      Object object0 = new Object();
      iterateableMap2MapConversion0.doConvert(linkedHashMap3, object0, linkedHashMap1, linkedHashMap0, converter0);
      LinkedHashMap<Object, Integer> linkedHashMap4 = new LinkedHashMap<Object, Integer>();
      LinkedHashMap<Object, Integer> linkedHashMap5 = new LinkedHashMap<Object, Integer>();
      Integer integer1 = new Integer((-290));
      Integer integer2 = new Integer((-1));
      iterateableMap2MapConversion0.isAssignableFrom(integer2);
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion0.doTransformIteratorObject2KeyValuePair(integer1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Integer cannot be cast to class java.util.Map$Entry (java.lang.Integer and java.util.Map$Entry are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      LinkedHashMap<Integer, Object> linkedHashMap1 = new LinkedHashMap<Integer, Object>();
      Converter converter0 = new Converter();
      converter0.addConversion(iterateableMap2MapConversion0);
      LinkedHashMap<Integer, Integer> linkedHashMap2 = new LinkedHashMap<Integer, Integer>();
      Object object0 = new Object();
      iterateableMap2MapConversion0.doConvert(linkedHashMap2, object0, linkedHashMap1, linkedHashMap0, converter0);
      LinkedHashMap<Object, Integer> linkedHashMap3 = new LinkedHashMap<Object, Integer>();
      Integer integer0 = new Integer((-1));
      iterateableMap2MapConversion0.isAssignableFrom(integer0);
      LinkedHashMap<Integer, Integer> linkedHashMap4 = new LinkedHashMap<Integer, Integer>();
      LinkedHashMap<Object, Integer> linkedHashMap5 = new LinkedHashMap<Object, Integer>();
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion0.doTransformIteratorObject2KeyValuePair(linkedHashMap5);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.util.LinkedHashMap cannot be cast to class java.util.Map$Entry (java.util.LinkedHashMap and java.util.Map$Entry are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      Converter converter0 = new Converter();
      converter0.addConversion(iterateableMap2MapConversion0);
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      Object object0 = new Object();
      Object[] objectArray0 = iterateableMap2MapConversion0.doConvert(object0, converter0, linkedHashMap0, linkedHashMap0, converter0);
      assertFalse(iterateableMap2MapConversion0.getIgnoreNullValues());
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      Class<Integer> class0 = Integer.class;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        iterateableMap2BeanConversion0.convert((Object) null, class0, (IConverterExtension) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't create a Bean from class: class java.lang.Integer
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2BeanConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      Class<Integer> class0 = Integer.class;
      IConverterExtension iConverterExtension0 = mock(IConverterExtension.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(iConverterExtension0).convert(any());
      IConverterExtension iConverterExtension1 = null;
      Integer integer0 = new Integer(3);
      iterateableMap2MapConversion0.doConvert(class0, iConverterExtension0, iConverterExtension0, integer0, iConverterExtension0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion0.doTransformIteratorObject2KeyValuePair(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Class cannot be cast to class java.util.Map$Entry (java.lang.Class and java.util.Map$Entry are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      LinkedHashMap<Object, Integer> linkedHashMap0 = new LinkedHashMap<Object, Integer>();
      IterateableMap2MapConversion iterateableMap2MapConversion1 = new IterateableMap2MapConversion(iterateableMap2MapConversion0.DEFAULT_MAP_TYPE, false);
      Integer integer0 = new Integer((-1930));
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion1.doTransformIteratorObject2KeyValuePair(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Integer cannot be cast to class java.util.Map$Entry (java.lang.Integer and java.util.Map$Entry are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      ConverterInterceptorHandler converterInterceptorHandler0 = iterateableMap2BeanConversion0.getConverterInterceptorHandler();
      iterateableMap2BeanConversion0.setConverterInterceptorHandler(converterInterceptorHandler0);
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      Object object0 = new Object();
      LinkedHashMap<Object, Object> linkedHashMap1 = new LinkedHashMap<Object, Object>();
      // Undeclared exception!
      try { 
        iterateableMap2BeanConversion0.doConvert(linkedHashMap1, linkedHashMap1, linkedHashMap0, (Object) null, (IConverter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only Method or Field are allowed: null
         //
         verifyException("net.sf.sojo.core.reflect.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      LinkedHashMap<Object, Integer> linkedHashMap0 = new LinkedHashMap<Object, Integer>();
      Converter converter0 = new Converter();
      // Undeclared exception!
      try { 
        iterateableMap2BeanConversion0.doConvert(linkedHashMap0, linkedHashMap0, linkedHashMap0, linkedHashMap0, converter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.util.LinkedHashMap cannot be cast to class java.lang.reflect.AccessibleObject (java.util.LinkedHashMap and java.lang.reflect.AccessibleObject are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2BeanConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion0.doTransformIteratorObject2KeyValuePair((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      LinkedHashMap<Integer, Object> linkedHashMap1 = new LinkedHashMap<Integer, Object>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion0.doTransformIteratorObject2KeyValuePair((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      ClassPropertyFilterHandlerImpl classPropertyFilterHandlerImpl0 = new ClassPropertyFilterHandlerImpl();
      classPropertyFilterHandlerImpl0.setWithAssignableFilterClasses(true);
      iterateableMap2MapConversion0.setClassPropertyFilterHandler(classPropertyFilterHandlerImpl0);
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      Function<Object, Object> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function1 = function0.compose((Function<? super Object, ?>) unaryOperator0);
      linkedHashMap0.computeIfAbsent(classPropertyFilterHandlerImpl0, function1);
      LinkedHashMap<Integer, Object> linkedHashMap1 = new LinkedHashMap<Integer, Object>();
      Converter converter0 = new Converter();
      iterateableMap2MapConversion0.doConvert(linkedHashMap0, linkedHashMap1, (Object) null, (Object) null, converter0);
      LinkedHashMap<Object, Integer> linkedHashMap2 = new LinkedHashMap<Object, Integer>();
      iterateableMap2MapConversion0.isAssignableFrom(linkedHashMap2);
      Class<Object> class0 = Object.class;
      iterateableMap2MapConversion0.isAssignableTo(class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion0.doAddObject(converter0, (Object) null, object0, class0, 3254);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      ClassPropertyFilterHandlerImpl classPropertyFilterHandlerImpl0 = new ClassPropertyFilterHandlerImpl();
      classPropertyFilterHandlerImpl0.setWithAssignableFilterClasses(true);
      iterateableMap2MapConversion0.setClassPropertyFilterHandler(classPropertyFilterHandlerImpl0);
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      LinkedHashMap<Integer, Object> linkedHashMap1 = new LinkedHashMap<Integer, Object>();
      Converter converter0 = new Converter();
      IterateableMap2MapConversion iterateableMap2MapConversion1 = new IterateableMap2MapConversion(iterateableMap2MapConversion0.DEFAULT_MAP_TYPE);
      assertFalse(iterateableMap2MapConversion1.getIgnoreNullValues());
      
      Integer integer0 = new Integer(1);
      iterateableMap2MapConversion1.setIgnoreNullValues(true);
      IConverterExtension iConverterExtension0 = mock(IConverterExtension.class, new ViolatedAssumptionAnswer());
      Object object0 = iterateableMap2MapConversion0.convert(linkedHashMap0, iterateableMap2MapConversion1.DEFAULT_MAP_TYPE, iConverterExtension0);
      iterateableMap2MapConversion1.doConvert(integer0, object0, linkedHashMap0, object0, converter0);
      Class<Object> class0 = Object.class;
      boolean boolean0 = iterateableMap2MapConversion1.isAssignableTo(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion0.doAddObject(object0, (Object) null, (Object) null, (Object) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      iterateableMap2MapConversion0.setIgnoreNullValues(false);
      Util.setKeyWordClass("=ndz2+Y");
      IterateableMap2MapConversion iterateableMap2MapConversion1 = new IterateableMap2MapConversion();
      Class<Object> class0 = Object.class;
      boolean boolean0 = iterateableMap2MapConversion1.isAssignableTo(class0);
      assertFalse(boolean0);
      
      iterateableMap2MapConversion1.setWithCycleDetection(false);
      iterateableMap2MapConversion1.isAssignableTo(iterateableMap2MapConversion0.DEFAULT_MAP_TYPE);
      assertFalse(iterateableMap2MapConversion1.getIgnoreNullValues());
      
      LinkedHashMap<Object, Integer> linkedHashMap0 = new LinkedHashMap<Object, Integer>();
      Integer integer0 = new Integer((-901));
      Object object0 = new Object();
      Converter converter0 = new Converter();
      Integer integer1 = new Integer((-901));
      Object object1 = new Object();
      Object[] objectArray0 = iterateableMap2MapConversion0.doConvert(integer1, (Object) null, integer1, object1, converter0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      Object object0 = new Object();
      IterateableMap2MapConversion iterateableMap2MapConversion1 = new IterateableMap2MapConversion(iterateableMap2MapConversion0.DEFAULT_MAP_TYPE);
      Object object1 = new Object();
      ConverterInterceptorHandler converterInterceptorHandler0 = iterateableMap2MapConversion0.getConverterInterceptorHandler();
      iterateableMap2MapConversion0.setConverterInterceptorHandler(converterInterceptorHandler0);
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion0.doTransformIteratorObject2KeyValuePair(object2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.util.Map$Entry (java.lang.Object and java.util.Map$Entry are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion0.doConvert(object0, object0, object0, object0, (IConverter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      iterateableMap2MapConversion0.setIgnoreNullValues(false);
      Util.setKeyWordClass("=ndz2+Y");
      Class<Object> class0 = Object.class;
      iterateableMap2MapConversion0.isAssignableTo(class0);
      LinkedHashMap<Object, Integer> linkedHashMap0 = new LinkedHashMap<Object, Integer>();
      Integer integer0 = new Integer((-1));
      Object object0 = new Object();
      LinkedHashMap<Object, Object> linkedHashMap1 = new LinkedHashMap<Object, Object>();
      Class<Object> class1 = Object.class;
      IConverterExtension iConverterExtension0 = mock(IConverterExtension.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion0.convert(linkedHashMap1, class1, iConverterExtension0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.util.Map (java.lang.Object and java.util.Map are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion0.convert((Object) null, class0, (IConverterExtension) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        iterateableMap2BeanConversion0.convert(class0, class0, (IConverterExtension) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Class cannot be cast to class java.util.Map (java.lang.Class and java.util.Map are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2BeanConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      LinkedHashMap<Object, Integer> linkedHashMap0 = new LinkedHashMap<Object, Integer>();
      boolean boolean0 = iterateableMap2MapConversion0.isAssignableFrom(linkedHashMap0);
      assertFalse(iterateableMap2MapConversion0.getIgnoreNullValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      Object object0 = new Object();
      boolean boolean0 = iterateableMap2MapConversion0.isAssignableFrom(object0);
      assertFalse(boolean0);
      assertFalse(iterateableMap2MapConversion0.getIgnoreNullValues());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion0.doAddObject(object0, object0, object0, object0, (-2297));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.util.Map (java.lang.Object and java.util.Map are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion(iterateableMap2BeanConversion0.DEFAULT_MAP_TYPE);
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion0.convert(iterateableMap2BeanConversion0, iterateableMap2BeanConversion0.DEFAULT_MAP_TYPE, (IConverterExtension) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.sf.sojo.core.conversion.IterateableMap2BeanConversion cannot be cast to class java.util.Map (net.sf.sojo.core.conversion.IterateableMap2BeanConversion is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @18f78251; java.util.Map is in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      LinkedHashMap<Integer, Object> linkedHashMap0 = new LinkedHashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      LinkedHashMap<Object, Object> linkedHashMap1 = new LinkedHashMap<Object, Object>();
      iterateableMap2MapConversion0.doAddObject(linkedHashMap0, linkedHashMap0, integer0, linkedHashMap1, 1);
      iterateableMap2MapConversion0.setWithCycleDetection(true);
      Object object0 = new Object();
      ClassPropertyFilterHandlerImpl classPropertyFilterHandlerImpl0 = new ClassPropertyFilterHandlerImpl((Class<?>[]) null);
      iterateableMap2MapConversion0.setClassPropertyFilterHandler(classPropertyFilterHandlerImpl0);
      iterateableMap2MapConversion0.isAssignableFrom(object0);
      iterateableMap2MapConversion0.isAssignableFrom(linkedHashMap1);
      Class<Integer> class0 = Integer.class;
      iterateableMap2MapConversion0.isAssignableTo(class0);
      Object object1 = new Object();
      iterateableMap2MapConversion0.isAssignableFrom(object1);
      iterateableMap2MapConversion0.isAssignableFrom(integer0);
      iterateableMap2MapConversion0.isAssignableTo(class0);
      LinkedHashMap<Object, Object> linkedHashMap2 = new LinkedHashMap<Object, Object>();
      Integer integer1 = new Integer(1);
      Object object2 = new Object();
      Converter converter0 = new Converter();
      iterateableMap2MapConversion0.doConvert(linkedHashMap2, (Object) null, integer1, object2, converter0);
      Object object3 = new Object();
      Integer integer2 = new Integer((-2979));
      Integer integer3 = new Integer(0);
      IConverterExtension iConverterExtension0 = mock(IConverterExtension.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion0.convert(integer3, class0, iConverterExtension0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Integer cannot be cast to class java.util.Map (java.lang.Integer and java.util.Map are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IterateableMap2MapConversion iterateableMap2MapConversion0 = null;
      try {
        iterateableMap2MapConversion0 = new IterateableMap2MapConversion(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The class: class java.lang.Object must be implements the java.util.Map interface.
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      Class<Integer> class0 = Integer.class;
      Converter converter0 = new Converter();
      converter0.setThrowExceptionIfNoConversionFind(true);
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion0.doConvert(object0, class0, converter0, linkedHashMap0, converter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No conversion find for object: net.sf.sojo.core.Converter@7 from type: net.sf.sojo.core.Converter
         //
         verifyException("net.sf.sojo.core.Converter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      Converter converter0 = new Converter();
      Object[] objectArray0 = iterateableMap2MapConversion0.doConvert(linkedHashMap0, linkedHashMap0, linkedHashMap0, linkedHashMap0, converter0);
      assertFalse(iterateableMap2MapConversion0.getIgnoreNullValues());
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      Integer integer0 = new Integer((-1));
      Object object0 = new Object();
      Integer integer1 = new Integer(0);
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      Converter converter0 = new Converter();
      converter0.setThrowExceptionIfNoConversionFind(true);
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion0.doConvert(integer0, object0, integer1, linkedHashMap0, converter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No conversion find for object: 0 from type: java.lang.Integer
         //
         verifyException("net.sf.sojo.core.Converter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      Class<Integer> class0 = Integer.class;
      iterateableMap2BeanConversion0.isAssignableFrom(class0);
      iterateableMap2BeanConversion0.isAssignableTo(class0);
      Object object0 = null;
      iterateableMap2BeanConversion0.isAssignableFrom((Object) null);
      iterateableMap2BeanConversion0.isAssignableTo(class0);
      IConverterExtension iConverterExtension0 = mock(IConverterExtension.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(1845);
      Object object1 = new Object();
      Converter converter0 = new Converter();
      converter0.convert((Object) null);
      // Undeclared exception!
      try { 
        iterateableMap2BeanConversion0.doConvert(integer0, class0, integer0, object1, converter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.reflect.AccessibleObject (java.lang.Object and java.lang.reflect.AccessibleObject are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2BeanConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        iterateableMap2BeanConversion0.doTransformIteratorObject2KeyValuePair(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.util.Map$Entry (java.lang.Object and java.util.Map$Entry are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      Class<Object> class0 = Object.class;
      boolean boolean0 = iterateableMap2MapConversion0.isAssignableTo(class0);
      assertFalse(boolean0);
      assertFalse(iterateableMap2MapConversion0.getIgnoreNullValues());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      Class<Integer> class0 = Integer.class;
      iterateableMap2MapConversion0.isAssignableTo(class0);
      Class<Object> class1 = Object.class;
      iterateableMap2MapConversion0.isAssignableTo(class1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        iterateableMap2MapConversion0.doTransformIteratorObject2KeyValuePair(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.util.Map$Entry (java.lang.Object and java.util.Map$Entry are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IterateableMap2MapConversion iterateableMap2MapConversion0 = null;
      try {
        iterateableMap2MapConversion0 = new IterateableMap2MapConversion(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The class: class java.lang.Object must be implements the java.util.Map interface.
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2MapConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      IterateableMap2MapConversion iterateableMap2MapConversion1 = new IterateableMap2MapConversion(iterateableMap2MapConversion0.DEFAULT_MAP_TYPE);
      boolean boolean0 = iterateableMap2MapConversion1.isAssignableFrom(iterateableMap2MapConversion0);
      assertFalse(iterateableMap2MapConversion1.getIgnoreNullValues());
      assertFalse(boolean0);
  }
}
