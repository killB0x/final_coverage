/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:09:16 GMT 2022
 */

package net.sf.sojo.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.LinkedHashMap;
import net.sf.sojo.core.Conversion;
import net.sf.sojo.core.ConversionException;
import net.sf.sojo.core.ConversionHandler;
import net.sf.sojo.core.Converter;
import net.sf.sojo.core.ConverterInterceptor;
import net.sf.sojo.core.ConverterInterceptorHandler;
import net.sf.sojo.core.NonCriticalExceptionHandler;
import net.sf.sojo.core.conversion.ComplexBean2MapConversion;
import net.sf.sojo.core.conversion.Iterateable2IterateableConversion;
import net.sf.sojo.core.conversion.IterateableMap2BeanConversion;
import net.sf.sojo.core.conversion.NotSupportedClassConversion;
import net.sf.sojo.core.conversion.NullConversion;
import net.sf.sojo.core.conversion.Simple2SimpleConversion;
import net.sf.sojo.core.conversion.SimpleFormatConversion;
import net.sf.sojo.core.conversion.interceptor.SimpleKeyMapperInterceptor;
import net.sf.sojo.core.conversion.interceptor.ThrowableConverterInterceptor;
import net.sf.sojo.core.filter.ClassPropertyFilterHandler;
import net.sf.sojo.core.filter.ClassPropertyFilterHandlerImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Converter_ESTest extends Converter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Converter converter0 = new Converter();
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      converter0.addConverterInterceptor(throwableConverterInterceptor0);
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      converter0.addConversion(complexBean2MapConversion0);
      ConversionException conversionException0 = new ConversionException("c0/3H}Ti={*bnt");
      complexBean2MapConversion0.setConverterInterceptorHandler((ConverterInterceptorHandler) null);
      // Undeclared exception!
      try { 
        converter0.convert((Object) conversionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("net.sf.sojo.core.Converter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Converter converter0 = new Converter();
      Iterateable2IterateableConversion iterateable2IterateableConversion0 = new Iterateable2IterateableConversion();
      converter0.addConversion(iterateable2IterateableConversion0);
      NullConversion nullConversion0 = new NullConversion((Object) null);
      converter0.replaceConversion(nullConversion0);
      assertEquals((-1), converter0.getNumberOfRecursion());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Converter converter0 = new Converter();
      Class<Object> class0 = Object.class;
      Simple2SimpleConversion simple2SimpleConversion0 = new Simple2SimpleConversion(class0);
      converter0.addConversion(simple2SimpleConversion0);
      converter0.replaceAllConversion(simple2SimpleConversion0);
      assertEquals((-1), converter0.getNumberOfRecursion());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Converter converter0 = new Converter();
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      converter0.addConversion(complexBean2MapConversion0);
      converter0.removeConversion(complexBean2MapConversion0);
      assertEquals((-1), converter0.getNumberOfRecursion());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Converter converter0 = new Converter();
      converter0.setThrowExceptionIfNoConversionFind(true);
      boolean boolean0 = converter0.getThrowExceptionIfNoConversionFind();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Converter converter0 = new Converter();
      Class<Object> class0 = Object.class;
      converter0.convertInternal((Object) null, class0);
      int int0 = converter0.getNumberOfRecursion();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Converter converter0 = new Converter();
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      converter0.addConverterInterceptor(throwableConverterInterceptor0);
      converter0.getConverterInterceptorSize();
      assertEquals((-1), converter0.getNumberOfRecursion());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Converter converter0 = new Converter();
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      converter0.addConverterInterceptor(throwableConverterInterceptor0);
      converter0.getConverterInterceptorByPosition(0);
      assertEquals((-1), converter0.getNumberOfRecursion());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Converter converter0 = new Converter();
      converter0.setConversionHandler((ConversionHandler) null);
      converter0.getConversionHandler();
      assertEquals((-1), converter0.getNumberOfRecursion());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Converter converter0 = new Converter();
      Class<ConversionException>[] classArray0 = (Class<ConversionException>[]) Array.newInstance(Class.class, 1);
      NotSupportedClassConversion notSupportedClassConversion0 = new NotSupportedClassConversion(classArray0);
      converter0.addConversion(notSupportedClassConversion0);
      converter0.getConversionHandler();
      assertEquals((-1), converter0.getNumberOfRecursion());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Converter converter0 = new Converter();
      ClassPropertyFilterHandlerImpl classPropertyFilterHandlerImpl0 = new ClassPropertyFilterHandlerImpl();
      converter0.setClassPropertyFilterHandler(classPropertyFilterHandlerImpl0);
      ClassPropertyFilterHandler classPropertyFilterHandler0 = converter0.getClassPropertyFilterHandler();
      assertEquals((-1), converter0.getNumberOfRecursion());
      assertNotNull(classPropertyFilterHandler0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Converter converter0 = new Converter();
      Class<Object> class0 = Object.class;
      converter0.convertInternal((Object) null, class0);
      Class<ConversionException> class1 = ConversionException.class;
      converter0.convertInternal((Object) null, class1);
      int int0 = converter0.getNumberOfRecursion();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Converter converter0 = new Converter();
      converter0.setConversionHandler((ConversionHandler) null);
      SimpleFormatConversion simpleFormatConversion0 = new SimpleFormatConversion();
      // Undeclared exception!
      try { 
        converter0.replaceConversion(simpleFormatConversion0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.Converter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Converter converter0 = new Converter();
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      ConversionHandler conversionHandler0 = converter0.getConversionHandler();
      conversionHandler0.addConversion(iterateableMap2BeanConversion0);
      // Undeclared exception!
      try { 
        converter0.replaceAllConversion((Conversion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.ConversionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Converter converter0 = new Converter();
      converter0.setConversionHandler((ConversionHandler) null);
      // Undeclared exception!
      try { 
        converter0.removeConversion((Conversion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.Converter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Converter converter0 = new Converter();
      converter0.setThrowExceptionIfNoConversionFind(true);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        converter0.convertInternal(class0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No conversion find for object: class java.lang.Object from type: java.lang.Class
         //
         verifyException("net.sf.sojo.core.Converter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Converter converter0 = new Converter();
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor(true);
      converter0.addConverterInterceptor(simpleKeyMapperInterceptor0);
      ConversionHandler conversionHandler0 = converter0.getConversionHandler();
      Class<ConversionException> class0 = ConversionException.class;
      // Undeclared exception!
      try { 
        converter0.convertInternal(conversionHandler0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Converter converter0 = new Converter();
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      iterateableMap2BeanConversion0.setConverterInterceptorHandler((ConverterInterceptorHandler) null);
      converter0.addConversion(iterateableMap2BeanConversion0);
      Class<ConversionException> class0 = ConversionException.class;
      // Undeclared exception!
      try { 
        converter0.convertInternal(class0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.Converter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Converter converter0 = new Converter();
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      converter0.addConverterInterceptor(throwableConverterInterceptor0);
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      MockException mockException0 = new MockException();
      mockException0.initCause(mockException0);
      // Undeclared exception!
      converter0.convert((Object) mockException0, complexBean2MapConversion0.DEFAULT_MAP_TYPE);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Converter converter0 = new Converter();
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor(false);
      converter0.addConverterInterceptor(simpleKeyMapperInterceptor0);
      Class<ConversionException> class0 = ConversionException.class;
      // Undeclared exception!
      try { 
        converter0.convert((Object) null, (Class<?>) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.interceptor.SimpleKeyMapperInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Converter converter0 = new Converter();
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor();
      converter0.addConverterInterceptor(simpleKeyMapperInterceptor0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        converter0.convert((Object) class0, (Class<?>) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Class cannot be cast to class java.util.Map (java.lang.Class and java.util.Map are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.interceptor.SimpleKeyMapperInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Converter converter0 = new Converter();
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      converter0.addConverterInterceptor(throwableConverterInterceptor0);
      MockException mockException0 = new MockException();
      MockThrowable mockThrowable0 = new MockThrowable("net.sf.sojo.core.Converter$InternalRecursiveConverterExtension", mockException0);
      mockException0.initCause(mockThrowable0);
      // Undeclared exception!
      try { 
        converter0.convert((Object) mockException0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Converter converter0 = new Converter();
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor();
      converter0.addConverterInterceptor(simpleKeyMapperInterceptor0);
      // Undeclared exception!
      try { 
        converter0.convert((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.interceptor.SimpleKeyMapperInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Converter converter0 = new Converter();
      // Undeclared exception!
      try { 
        converter0.addConverterInterceptor((ConverterInterceptor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ConverterInterceptor must be different from null
         //
         verifyException("net.sf.sojo.core.ConverterInterceptorHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Converter converter0 = new Converter();
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      converter0.setConversionHandler((ConversionHandler) null);
      // Undeclared exception!
      try { 
        converter0.addConversion(complexBean2MapConversion0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.Converter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Converter converter0 = new Converter();
      // Undeclared exception!
      try { 
        converter0.addConversion((Conversion) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Conversion must be different from null
         //
         verifyException("net.sf.sojo.core.ConversionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Converter converter0 = new Converter();
      converter0.getThrowExceptionIfNoConversionFind();
      assertEquals((-1), converter0.getNumberOfRecursion());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Converter converter0 = new Converter();
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      converter0.addConverterInterceptor(throwableConverterInterceptor0);
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      MockException mockException0 = new MockException();
      converter0.addConversion(complexBean2MapConversion0);
      LinkedHashMap linkedHashMap0 = (LinkedHashMap)converter0.convert((Object) mockException0);
      assertEquals((-1), converter0.getNumberOfRecursion());
      assertEquals(6, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Converter converter0 = new Converter();
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      converter0.addConversion(complexBean2MapConversion0);
      Object object0 = converter0.convertInternal(complexBean2MapConversion0, complexBean2MapConversion0.DEFAULT_MAP_TYPE);
      assertEquals(3, converter0.getNumberOfRecursion());
      
      Object object1 = converter0.convert((Object) complexBean2MapConversion0, complexBean2MapConversion0.DEFAULT_MAP_TYPE);
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Converter converter0 = new Converter();
      NonCriticalExceptionHandler.setNonCriticalExceptionHandlerEnabled(true);
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      converter0.convertInternal(object0, class0);
      assertEquals(0, converter0.getNumberOfRecursion());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Converter converter0 = new Converter();
      assertFalse(converter0.getThrowExceptionIfNoConversionFind());
      
      Class<Object> class0 = Object.class;
      converter0.convert((Object) null, (Class<?>) class0);
      assertEquals((-1), converter0.getNumberOfRecursion());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Converter converter0 = new Converter();
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      converter0.addConversion(iterateableMap2BeanConversion0);
      Class<ConversionException> class0 = ConversionException.class;
      // Undeclared exception!
      try { 
        converter0.convertInternal(converter0, class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.sf.sojo.core.Converter cannot be cast to class java.util.Map (net.sf.sojo.core.Converter is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @ea5e705; java.util.Map is in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2BeanConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Converter converter0 = new Converter();
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      NullConversion nullConversion0 = new NullConversion(complexBean2MapConversion0);
      converter0.addConversion(nullConversion0);
      Object object0 = converter0.convert((Object) complexBean2MapConversion0);
      assertEquals((-1), converter0.getNumberOfRecursion());
      assertNull(object0);
      assertFalse(converter0.getThrowExceptionIfNoConversionFind());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Converter converter0 = new Converter();
      converter0.clearConversion();
      assertFalse(converter0.getThrowExceptionIfNoConversionFind());
      assertEquals((-1), converter0.getNumberOfRecursion());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Converter converter0 = new Converter();
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor();
      converter0.addConverterInterceptor(simpleKeyMapperInterceptor0);
      // Undeclared exception!
      try { 
        converter0.convert((Object) converter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.sf.sojo.core.Converter cannot be cast to class java.util.Map (net.sf.sojo.core.Converter is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @ea5e705; java.util.Map is in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.interceptor.SimpleKeyMapperInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Converter converter0 = new Converter();
      // Undeclared exception!
      try { 
        converter0.getConverterInterceptorByPosition(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Converter converter0 = new Converter();
      converter0.setConversionHandler((ConversionHandler) null);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        converter0.convert((Object) converter0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("net.sf.sojo.core.Converter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Converter converter0 = new Converter();
      converter0.removeConversion((Conversion) null);
      assertEquals((-1), converter0.getNumberOfRecursion());
      assertFalse(converter0.getThrowExceptionIfNoConversionFind());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Converter converter0 = new Converter();
      converter0.removeConverterInterceptor((ConverterInterceptor) null);
      assertEquals((-1), converter0.getNumberOfRecursion());
      assertFalse(converter0.getThrowExceptionIfNoConversionFind());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Converter converter0 = new Converter();
      Class<Object> class0 = Object.class;
      Simple2SimpleConversion simple2SimpleConversion0 = new Simple2SimpleConversion(class0);
      converter0.replaceAllConversion(simple2SimpleConversion0);
      assertEquals((-1), converter0.getNumberOfRecursion());
      assertFalse(converter0.getThrowExceptionIfNoConversionFind());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Converter converter0 = new Converter();
      converter0.setThrowExceptionIfNoConversionFind(true);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        converter0.convert((Object) class0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No conversion find for object: class java.lang.Object from type: java.lang.Class
         //
         verifyException("net.sf.sojo.core.Converter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Converter converter0 = new Converter();
      converter0.getConverterInterceptorSize();
      assertEquals((-1), converter0.getNumberOfRecursion());
      assertFalse(converter0.getThrowExceptionIfNoConversionFind());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Converter converter0 = new Converter();
      converter0.getClassPropertyFilterHandler();
      assertEquals((-1), converter0.getNumberOfRecursion());
      assertFalse(converter0.getThrowExceptionIfNoConversionFind());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Converter converter0 = new Converter();
      converter0.clearConverterInterceptorSize();
      assertEquals((-1), converter0.getNumberOfRecursion());
      assertFalse(converter0.getThrowExceptionIfNoConversionFind());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Converter converter0 = new Converter();
      Iterateable2IterateableConversion iterateable2IterateableConversion0 = new Iterateable2IterateableConversion();
      converter0.replaceConversion(iterateable2IterateableConversion0);
      assertFalse(converter0.getThrowExceptionIfNoConversionFind());
      assertEquals((-1), converter0.getNumberOfRecursion());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Converter converter0 = new Converter();
      int int0 = converter0.getNumberOfRecursion();
      assertFalse(converter0.getThrowExceptionIfNoConversionFind());
      assertEquals((-1), int0);
  }
}
