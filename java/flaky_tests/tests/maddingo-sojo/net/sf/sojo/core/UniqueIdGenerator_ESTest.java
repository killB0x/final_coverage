/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:05:56 GMT 2022
 */

package net.sf.sojo.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.sf.sojo.core.UniqueIdGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UniqueIdGenerator_ESTest extends UniqueIdGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      assertFalse(uniqueIdGenerator0.getWithHashCodeInUniqueId());
      
      uniqueIdGenerator0.setWithHashCodeInUniqueId(true);
      boolean boolean0 = uniqueIdGenerator0.getWithHashCodeInUniqueId();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      String string0 = uniqueIdGenerator0.getStringRepresentationFromId((-1), "1");
      assertEquals(0, uniqueIdGenerator0.getMinimalUniqueID());
      assertEquals(0, uniqueIdGenerator0.getCurrentUniqueID());
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      uniqueIdGenerator0.setMinimalUniqueID(1127);
      int int0 = uniqueIdGenerator0.getMinimalUniqueID();
      assertEquals(1127, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      uniqueIdGenerator0.setMinimalUniqueID((-3239));
      int int0 = uniqueIdGenerator0.getMinimalUniqueID();
      assertEquals((-3239), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      uniqueIdGenerator0.getUniqueId("~unique-id~");
      int int0 = uniqueIdGenerator0.getCurrentUniqueID();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      uniqueIdGenerator0.addObject("-", (Object) null);
      Object object0 = uniqueIdGenerator0.addObject("YPc2GB{--", (Object) null);
      assertFalse(uniqueIdGenerator0.getWithHashCodeInUniqueId());
      assertEquals("-", object0);
      assertEquals(0, uniqueIdGenerator0.getCurrentUniqueID());
      assertEquals(0, uniqueIdGenerator0.getMinimalUniqueID());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      uniqueIdGenerator0.addObject((String) null, (Object) null);
      // Undeclared exception!
      try { 
        uniqueIdGenerator0.getObjectByUniqueId("k/0-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.UniqueIdGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      boolean boolean0 = uniqueIdGenerator0.getWithHashCodeInUniqueId();
      assertEquals(0, uniqueIdGenerator0.getCurrentUniqueID());
      assertEquals(0, uniqueIdGenerator0.getMinimalUniqueID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      Object object0 = new Object();
      uniqueIdGenerator0.getUniqueId(object0);
      uniqueIdGenerator0.getUniqueId("0");
      uniqueIdGenerator0.getObjectByUniqueId("1");
      assertEquals(2, uniqueIdGenerator0.getCurrentUniqueID());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      uniqueIdGenerator0.getObjectByUniqueId("-");
      assertFalse(uniqueIdGenerator0.getWithHashCodeInUniqueId());
      assertEquals(0, uniqueIdGenerator0.getCurrentUniqueID());
      assertEquals(0, uniqueIdGenerator0.getMinimalUniqueID());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      uniqueIdGenerator0.getUniqueId("0");
      boolean boolean0 = uniqueIdGenerator0.isKnownObject("0");
      assertEquals(1, uniqueIdGenerator0.getCurrentUniqueID());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      boolean boolean0 = uniqueIdGenerator0.isKnownObject("0");
      assertFalse(uniqueIdGenerator0.getWithHashCodeInUniqueId());
      assertFalse(boolean0);
      assertEquals(0, uniqueIdGenerator0.getMinimalUniqueID());
      assertEquals(0, uniqueIdGenerator0.getCurrentUniqueID());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      uniqueIdGenerator0.getUniqueId("0");
      uniqueIdGenerator0.getUniqueId("0");
      assertEquals(1, uniqueIdGenerator0.getCurrentUniqueID());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      uniqueIdGenerator0.getUniqueId((Object) null);
      assertEquals(0, uniqueIdGenerator0.getCurrentUniqueID());
      assertEquals(0, uniqueIdGenerator0.getMinimalUniqueID());
      assertFalse(uniqueIdGenerator0.getWithHashCodeInUniqueId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      int int0 = uniqueIdGenerator0.getCurrentUniqueID();
      assertFalse(uniqueIdGenerator0.getWithHashCodeInUniqueId());
      assertEquals(0, uniqueIdGenerator0.getMinimalUniqueID());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      int int0 = uniqueIdGenerator0.getMinimalUniqueID();
      assertFalse(uniqueIdGenerator0.getWithHashCodeInUniqueId());
      assertEquals(0, uniqueIdGenerator0.getCurrentUniqueID());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      uniqueIdGenerator0.clear();
      assertEquals(0, uniqueIdGenerator0.getCurrentUniqueID());
      assertEquals(0, uniqueIdGenerator0.getMinimalUniqueID());
      assertFalse(uniqueIdGenerator0.getWithHashCodeInUniqueId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      Object object0 = new Object();
      uniqueIdGenerator0.getUniqueId(object0);
      uniqueIdGenerator0.getObjectByUniqueId("1");
      assertEquals(1, uniqueIdGenerator0.getCurrentUniqueID());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      uniqueIdGenerator0.addObject("", "1");
      String string0 = uniqueIdGenerator0.getUniqueId("1");
      assertEquals(0, uniqueIdGenerator0.getMinimalUniqueID());
      assertFalse(uniqueIdGenerator0.getWithHashCodeInUniqueId());
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, uniqueIdGenerator0.getCurrentUniqueID());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UniqueIdGenerator uniqueIdGenerator0 = new UniqueIdGenerator();
      uniqueIdGenerator0.setWithHashCodeInUniqueId(true);
      uniqueIdGenerator0.getUniqueId("Sd*^9>6HH/3MgoX,");
      assertEquals(1, uniqueIdGenerator0.getCurrentUniqueID());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = UniqueIdGenerator.getUniqueIdStringByNumber("1");
      assertEquals("~unique-id~1", string0);
  }
}
