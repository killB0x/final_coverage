/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:11:31 GMT 2022
 */

package net.sf.sojo.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.sf.sojo.core.ConversionContext;
import net.sf.sojo.core.ConverterInterceptor;
import net.sf.sojo.core.ConverterInterceptorHandler;
import net.sf.sojo.core.conversion.NullConversion;
import net.sf.sojo.core.conversion.interceptor.SimpleKeyMapperInterceptor;
import net.sf.sojo.core.conversion.interceptor.ThrowableConverterInterceptor;
import net.sf.sojo.util.ThrowableWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConverterInterceptorHandler_ESTest extends ConverterInterceptorHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      NullConversion nullConversion0 = new NullConversion(throwableConverterInterceptor0);
      Class<ThrowableConverterInterceptor> class0 = ThrowableConverterInterceptor.class;
      ConverterInterceptorHandler converterInterceptorHandler0 = nullConversion0.getConverterInterceptorHandler();
      converterInterceptorHandler0.addConverterInterceptor(throwableConverterInterceptor0);
      MockException mockException0 = new MockException("");
      Object object0 = converterInterceptorHandler0.fireBeforeConvert(mockException0, class0);
      Object object1 = converterInterceptorHandler0.fireAfterConvert(object0, class0);
      assertEquals("java.lang.InstantiationException: The Class: net.sf.sojo.core.conversion.interceptor.ThrowableConverterInterceptor is not from type Throwable!", object1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      ConverterInterceptorHandler converterInterceptorHandler0 = new ConverterInterceptorHandler();
      converterInterceptorHandler0.addConverterInterceptor(throwableConverterInterceptor0);
      ThrowableConverterInterceptor throwableConverterInterceptor1 = new ThrowableConverterInterceptor();
      Class<Object> class0 = Object.class;
      MockException mockException0 = new MockException(" is not from type Throwable!");
      converterInterceptorHandler0.addConverterInterceptor(throwableConverterInterceptor1);
      ThrowableWrapper throwableWrapper0 = (ThrowableWrapper)converterInterceptorHandler0.fireBeforeConvert(mockException0, class0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockException", throwableWrapper0.getExceptionClassName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      NullConversion nullConversion0 = new NullConversion(throwableConverterInterceptor0);
      ConverterInterceptorHandler converterInterceptorHandler0 = nullConversion0.getConverterInterceptorHandler();
      converterInterceptorHandler0.addConverterInterceptor(throwableConverterInterceptor0);
      int int0 = converterInterceptorHandler0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      Class<Object> class0 = Object.class;
      NullConversion nullConversion0 = new NullConversion(class0);
      ConverterInterceptorHandler converterInterceptorHandler0 = nullConversion0.getConverterInterceptorHandler();
      converterInterceptorHandler0.addConverterInterceptor(throwableConverterInterceptor0);
      ConverterInterceptor converterInterceptor0 = converterInterceptorHandler0.getConverterInterceptorByPosition(0);
      assertSame(converterInterceptor0, throwableConverterInterceptor0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NullConversion nullConversion0 = new NullConversion((Object) null);
      ConverterInterceptorHandler converterInterceptorHandler0 = nullConversion0.getConverterInterceptorHandler();
      Class<ThrowableConverterInterceptor> class0 = ThrowableConverterInterceptor.class;
      Object object0 = converterInterceptorHandler0.fireBeforeConvert((Object) null, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NullConversion nullConversion0 = new NullConversion((Object) null);
      ConverterInterceptorHandler converterInterceptorHandler0 = nullConversion0.getConverterInterceptorHandler();
      Class<Object> class0 = Object.class;
      Object object0 = converterInterceptorHandler0.fireAfterConvert((Object) null, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConverterInterceptorHandler converterInterceptorHandler0 = new ConverterInterceptorHandler();
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor();
      converterInterceptorHandler0.addConverterInterceptor(simpleKeyMapperInterceptor0);
      Class<ThrowableConverterInterceptor> class0 = ThrowableConverterInterceptor.class;
      // Undeclared exception!
      try { 
        converterInterceptorHandler0.fireBeforeConvert((Object) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.interceptor.SimpleKeyMapperInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConverterInterceptorHandler converterInterceptorHandler0 = new ConverterInterceptorHandler();
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor();
      converterInterceptorHandler0.addConverterInterceptor(simpleKeyMapperInterceptor0);
      Class<ThrowableConverterInterceptor> class0 = ThrowableConverterInterceptor.class;
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      // Undeclared exception!
      try { 
        converterInterceptorHandler0.fireBeforeConvert(throwableConverterInterceptor0, class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.sf.sojo.core.conversion.interceptor.ThrowableConverterInterceptor cannot be cast to class java.util.Map (net.sf.sojo.core.conversion.interceptor.ThrowableConverterInterceptor is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @201f6451; java.util.Map is in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.interceptor.SimpleKeyMapperInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConverterInterceptorHandler converterInterceptorHandler0 = new ConverterInterceptorHandler();
      Object object0 = new Object();
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      converterInterceptorHandler0.addConverterInterceptor(throwableConverterInterceptor0);
      ConversionContext conversionContext0 = new ConversionContext((-1966), object0, (Object) null);
      converterInterceptorHandler0.fireAfterConvertRecursion(conversionContext0);
      assertFalse(conversionContext0.cancelConvert);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConverterInterceptorHandler converterInterceptorHandler0 = new ConverterInterceptorHandler();
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor();
      converterInterceptorHandler0.addConverterInterceptor(simpleKeyMapperInterceptor0);
      ConversionContext conversionContext0 = new ConversionContext();
      converterInterceptorHandler0.fireAfterConvertRecursion(conversionContext0);
      assertFalse(conversionContext0.cancelConvert);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConverterInterceptorHandler converterInterceptorHandler0 = new ConverterInterceptorHandler();
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor(true);
      converterInterceptorHandler0.addConverterInterceptor(simpleKeyMapperInterceptor0);
      // Undeclared exception!
      try { 
        converterInterceptorHandler0.fireBeforeConvertRecursion((ConversionContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.interceptor.SimpleKeyMapperInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      ConverterInterceptorHandler converterInterceptorHandler0 = new ConverterInterceptorHandler();
      converterInterceptorHandler0.addConverterInterceptor(throwableConverterInterceptor0);
      converterInterceptorHandler0.fireBeforeConvertRecursion((ConversionContext) null);
      assertEquals(1, converterInterceptorHandler0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      ConverterInterceptorHandler converterInterceptorHandler0 = new ConverterInterceptorHandler();
      converterInterceptorHandler0.addConverterInterceptor(throwableConverterInterceptor0);
      MockException mockException0 = new MockException(" is not from type Throwable!");
      converterInterceptorHandler0.fireOnError(mockException0);
      assertEquals(1, converterInterceptorHandler0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConverterInterceptorHandler converterInterceptorHandler0 = new ConverterInterceptorHandler();
      // Undeclared exception!
      try { 
        converterInterceptorHandler0.addConverterInterceptor((ConverterInterceptor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ConverterInterceptor must be different from null
         //
         verifyException("net.sf.sojo.core.ConverterInterceptorHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NullConversion nullConversion0 = new NullConversion(class0);
      ConverterInterceptorHandler converterInterceptorHandler0 = nullConversion0.getConverterInterceptorHandler();
      // Undeclared exception!
      try { 
        converterInterceptorHandler0.getConverterInterceptorByPosition(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConverterInterceptorHandler converterInterceptorHandler0 = new ConverterInterceptorHandler();
      int int0 = converterInterceptorHandler0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      NullConversion nullConversion0 = new NullConversion(throwableConverterInterceptor0);
      ConverterInterceptorHandler converterInterceptorHandler0 = nullConversion0.getConverterInterceptorHandler();
      converterInterceptorHandler0.clear();
      assertEquals(0, converterInterceptorHandler0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThrowableConverterInterceptor throwableConverterInterceptor0 = new ThrowableConverterInterceptor();
      ConverterInterceptorHandler converterInterceptorHandler0 = new ConverterInterceptorHandler();
      converterInterceptorHandler0.removeConverterInterceptor(throwableConverterInterceptor0);
      assertEquals(0, converterInterceptorHandler0.size());
  }
}
