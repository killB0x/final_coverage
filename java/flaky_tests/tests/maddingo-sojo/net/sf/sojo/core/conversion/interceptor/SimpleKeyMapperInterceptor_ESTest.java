/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:07:04 GMT 2022
 */

package net.sf.sojo.core.conversion.interceptor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.chrono.HijrahDate;
import java.util.Date;
import net.sf.sojo.core.ConversionContext;
import net.sf.sojo.core.conversion.interceptor.SimpleKeyMapperInterceptor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleKeyMapperInterceptor_ESTest extends SimpleKeyMapperInterceptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor(true);
      boolean boolean0 = simpleKeyMapperInterceptor0.getMakeSimple();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor(true);
      Class<Date> class0 = Date.class;
      Object object0 = simpleKeyMapperInterceptor0.beforeConvert(simpleKeyMapperInterceptor0, class0);
      assertSame(object0, simpleKeyMapperInterceptor0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor();
      Class<Date> class0 = Date.class;
      Object object0 = simpleKeyMapperInterceptor0.afterConvert((Object) null, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor();
      ConversionContext conversionContext0 = new ConversionContext();
      // Undeclared exception!
      try { 
        simpleKeyMapperInterceptor0.toSimple(conversionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor(true);
      // Undeclared exception!
      try { 
        simpleKeyMapperInterceptor0.beforeConvertRecursion((ConversionContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.interceptor.SimpleKeyMapperInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor();
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        simpleKeyMapperInterceptor0.beforeConvert((Object) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.interceptor.SimpleKeyMapperInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor();
      simpleKeyMapperInterceptor0.setMakeSimple(true);
      assertTrue(simpleKeyMapperInterceptor0.getMakeSimple());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor();
      boolean boolean0 = simpleKeyMapperInterceptor0.getMakeSimple();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor(true);
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      ConversionContext conversionContext0 = new ConversionContext(942, hijrahDate0, hijrahDate0);
      simpleKeyMapperInterceptor0.toSimple(conversionContext0);
      simpleKeyMapperInterceptor0.toSimple(conversionContext0);
      assertFalse(conversionContext0.cancelConvert);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        simpleKeyMapperInterceptor0.beforeConvert("~_-_~", class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.String cannot be cast to class java.util.Map (java.lang.String and java.util.Map are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.interceptor.SimpleKeyMapperInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor(true);
      MockDate mockDate0 = new MockDate(0L);
      ConversionContext conversionContext0 = new ConversionContext(3351, mockDate0, mockDate0);
      simpleKeyMapperInterceptor0.beforeConvertRecursion(conversionContext0);
      assertTrue(simpleKeyMapperInterceptor0.getMakeSimple());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor(true);
      MockDate mockDate0 = new MockDate(0L);
      ConversionContext conversionContext0 = new ConversionContext(3351, mockDate0, mockDate0);
      simpleKeyMapperInterceptor0.afterConvertRecursion(conversionContext0);
      assertFalse(conversionContext0.cancelConvert);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor(false);
      MockException mockException0 = new MockException("~_-_~");
      simpleKeyMapperInterceptor0.onError(mockException0);
      assertFalse(simpleKeyMapperInterceptor0.getMakeSimple());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor(true);
      Object object0 = new Object();
      Class<Date> class0 = Date.class;
      Object object1 = simpleKeyMapperInterceptor0.afterConvert(object0, class0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor();
      ConversionContext conversionContext0 = new ConversionContext();
      simpleKeyMapperInterceptor0.beforeConvertRecursion(conversionContext0);
      assertFalse(conversionContext0.cancelConvert);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleKeyMapperInterceptor simpleKeyMapperInterceptor0 = new SimpleKeyMapperInterceptor(true);
      Class<Date> class0 = Date.class;
      Object object0 = simpleKeyMapperInterceptor0.beforeConvert((Object) null, class0);
      assertNull(object0);
  }
}
