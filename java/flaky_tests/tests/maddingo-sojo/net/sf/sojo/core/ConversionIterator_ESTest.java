/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:02:35 GMT 2022
 */

package net.sf.sojo.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.LinkedHashMap;
import net.sf.sojo.core.IConverterExtension;
import net.sf.sojo.core.conversion.ComplexBean2MapConversion;
import net.sf.sojo.core.conversion.IterateableMap2BeanConversion;
import net.sf.sojo.core.conversion.IterateableMap2MapConversion;
import net.sf.sojo.core.filter.ClassPropertyFilter;
import net.sf.sojo.core.filter.ClassPropertyFilterHandlerImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConversionIterator_ESTest extends ConversionIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      iterateableMap2BeanConversion0.setIgnoreNullValues(true);
      boolean boolean0 = iterateableMap2BeanConversion0.getIgnoreNullValues();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      boolean boolean0 = iterateableMap2MapConversion0.getIgnoreNullValues();
      assertFalse(iterateableMap2MapConversion0.getWithCycleDetection());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      boolean boolean0 = complexBean2MapConversion0.getWithCycleDetection();
      assertFalse(boolean0);
      assertFalse(complexBean2MapConversion0.getIgnoreNullValues());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      assertFalse(complexBean2MapConversion0.getIgnoreNullValues());
      
      complexBean2MapConversion0.setIgnoreNullValues(true);
      IConverterExtension iConverterExtension0 = mock(IConverterExtension.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(iConverterExtension0).convert(any());
      doReturn((String) null).when(iConverterExtension0).getUniqueId(any());
      complexBean2MapConversion0.convert(iterateableMap2BeanConversion0, iterateableMap2BeanConversion0.DEFAULT_MAP_TYPE, iConverterExtension0);
      assertTrue(complexBean2MapConversion0.getIgnoreNullValues());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion(iterateableMap2BeanConversion0.DEFAULT_MAP_TYPE);
      IConverterExtension iConverterExtension0 = mock(IConverterExtension.class, new ViolatedAssumptionAnswer());
      doReturn(complexBean2MapConversion0, complexBean2MapConversion0, complexBean2MapConversion0).when(iConverterExtension0).convert(any());
      doReturn(".'g").when(iConverterExtension0).getUniqueId(any());
      LinkedHashMap linkedHashMap0 = (LinkedHashMap)complexBean2MapConversion0.convert(iterateableMap2BeanConversion0, iterateableMap2BeanConversion0.DEFAULT_MAP_TYPE, iConverterExtension0);
      assertEquals(5, linkedHashMap0.size());
      assertFalse(complexBean2MapConversion0.getIgnoreNullValues());
      assertFalse(iterateableMap2BeanConversion0.getIgnoreNullValues());
      assertFalse(complexBean2MapConversion0.getWithCycleDetection());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      complexBean2MapConversion0.setWithCycleDetection(true);
      IConverterExtension iConverterExtension0 = mock(IConverterExtension.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(iConverterExtension0).convert(any());
      doReturn((String) null).when(iConverterExtension0).getUniqueId(any());
      complexBean2MapConversion0.convert(iterateableMap2BeanConversion0, iterateableMap2BeanConversion0.DEFAULT_MAP_TYPE, iConverterExtension0);
      assertTrue(complexBean2MapConversion0.getWithCycleDetection());
      assertFalse(iterateableMap2BeanConversion0.getWithCycleDetection());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      assertFalse(complexBean2MapConversion0.getWithCycleDetection());
      
      complexBean2MapConversion0.setWithCycleDetection(true);
      boolean boolean0 = complexBean2MapConversion0.getWithCycleDetection();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter(iterateableMap2BeanConversion0.DEFAULT_MAP_TYPE);
      ClassPropertyFilterHandlerImpl classPropertyFilterHandlerImpl0 = new ClassPropertyFilterHandlerImpl(classPropertyFilter0);
      iterateableMap2BeanConversion0.setClassPropertyFilterHandler(classPropertyFilterHandlerImpl0);
      assertFalse(iterateableMap2BeanConversion0.getIgnoreNullValues());
      assertFalse(iterateableMap2BeanConversion0.getWithCycleDetection());
  }
}
