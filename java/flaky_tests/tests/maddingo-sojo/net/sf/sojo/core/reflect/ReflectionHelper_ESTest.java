/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 01:16:07 GMT 2022
 */

package net.sf.sojo.core.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.chrono.ChronoLocalDate;
import java.util.HashMap;
import java.util.Map;
import net.sf.sojo.core.reflect.ReflectionHelper;
import net.sf.sojo.util.ThrowableWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReflectionHelper_ESTest extends ReflectionHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      Timestamp timestamp0 = (Timestamp)ReflectionHelper.createNewSimpleObject(class0, (Object) null);
      assertEquals(0, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Date> class0 = Date.class;
      Object object0 = ReflectionHelper.createNewSimpleObject(class0, (Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      try { 
        ReflectionHelper.createBeanFromMap((Map<?, ?>) null, class0);
        fail("Expecting exception: InstantiationException");
      
      } catch(InstantiationException e) {
         //
         // Can't create a Bean from class: interface java.time.chrono.ChronoLocalDate
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<?> class0 = ReflectionHelper.mapFromSimpeToWrapper((Class<?>) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Class<?> class1 = ReflectionHelper.mapFromSimpeToWrapper(class0);
      assertEquals("interface java.time.chrono.ChronoLocalDate", class1.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<?> class0 = ReflectionHelper.forName("net.sf.sojo.core.reflect.ReflectionHelper");
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionHelper.forName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      // Undeclared exception!
      try { 
        ReflectionHelper.findConstructorByParameterTypes(class0, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      // Undeclared exception!
      try { 
        ReflectionHelper.createThrowable((ThrowableWrapper) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionHelper.createThrowable((ThrowableWrapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        ReflectionHelper.createNewIterableInstance(class0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't create a new instance of class : interface java.time.chrono.ChronoLocalDate
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper(instantiationException0);
      Throwable throwable0 = ReflectionHelper.createThrowable(throwableWrapper0, (Class<?>) null);
      assertEquals("java.lang.InstantiationException", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      Constructor<?> constructor0 = ReflectionHelper.findConstructorByParameterTypes(class0, classArray0);
      assertNotNull(constructor0);
      assertEquals("public java.lang.String(java.lang.String)", constructor0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      Class<java.util.Date>[] classArray0 = (Class<java.util.Date>[]) Array.newInstance(Class.class, 6);
      Constructor<?> constructor0 = ReflectionHelper.findConstructorByParameterTypes(class0, classArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      boolean boolean0 = ReflectionHelper.isIterateableType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ReflectionHelper.isIterableType(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      boolean boolean0 = ReflectionHelper.isMapType((Object) class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = ReflectionHelper.isMapType((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<java.util.Date, ChronoLocalDate> hashMap0 = new HashMap<java.util.Date, ChronoLocalDate>();
      boolean boolean0 = ReflectionHelper.isMapType((Object) hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      boolean boolean0 = ReflectionHelper.isMapType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      boolean boolean0 = ReflectionHelper.isSimpleType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      boolean boolean0 = ReflectionHelper.isSimpleType((Object) class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      try { 
        ReflectionHelper.forName("");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper();
      throwableWrapper0.setExceptionClassName("net.sf.sojo.util.ThrowableWrapper");
      Throwable throwable0 = ReflectionHelper.createThrowable(throwableWrapper0);
      //  // Unstable assertion: assertEquals("java.lang.ClassCastException: class net.sf.sojo.util.ThrowableWrapper cannot be cast to class java.lang.Throwable (net.sf.sojo.util.ThrowableWrapper is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @cf6ad1f; java.lang.Throwable is in module java.base of loader 'bootstrap')", throwable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper(instantiationException0);
      throwableWrapper0.setExceptionClassName("net.sf.sojo.core.reflect.ReflectionMethodHelper");
      Throwable throwable0 = ReflectionHelper.createThrowable(throwableWrapper0, (Class<?>) null);
      assertEquals("java.lang.InstantiationException: java.lang.NoSuchMethodException: net.sf.sojo.core.reflect.ReflectionMethodHelper.<init>()", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable("", mockThrowable0);
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper(mockThrowable1);
      Throwable throwable0 = ReflectionHelper.createThrowable(throwableWrapper0, (Class<?>) null);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("", (Throwable) null);
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper(mockThrowable0);
      Throwable throwable0 = ReflectionHelper.createThrowable(throwableWrapper0, (Class<?>) null);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      Class<?> class1 = ReflectionHelper.mapFromSimpeToWrapper(class0);
      assertEquals("class java.util.Date", class1.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = ReflectionHelper.mapFromSimpeToWrapper(class0);
      assertEquals("class java.lang.Long", class1.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<java.util.Date, java.util.Date> hashMap0 = new HashMap<java.util.Date, java.util.Date>();
      // Undeclared exception!
      try { 
        ReflectionHelper.createBeanFromMap(hashMap0, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No type (class) was set for create a Bean. Map is: {} an type is: null
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("class", "class");
      Class<String> class0 = String.class;
      try { 
        ReflectionHelper.createBeanFromMap(hashMap0, class0);
        fail("Expecting exception: InstantiationException");
      
      } catch(InstantiationException e) {
         //
         // Can't create a class for String: class
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<String> class0 = String.class;
      Object object0 = ReflectionHelper.createBeanFromMap(hashMap0, class0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      Object object0 = ReflectionHelper.createNewIterableInstance(class0, 4034);
      //  // Unstable assertion: assertEquals("Mon Nov 07 01:15:45 GMT 2022", object0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Timestamp> class1 = Timestamp.class;
      // Undeclared exception!
      try { 
        ReflectionHelper.createNewSimpleObject(class1, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.Class@0000000001
         //
         verifyException("net.sf.sojo.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Time> class0 = Time.class;
      try { 
        ReflectionHelper.createNewSimpleObject(class0, class0);
        fail("Expecting exception: InstantiationException");
      
      } catch(InstantiationException e) {
         //
         // Can't create a new instance from type: java.sql.Time with constructor-argument: class java.sql.Time
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      // Undeclared exception!
      try { 
        ReflectionHelper.createNewSimpleObject(class0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.Class@0000000001
         //
         verifyException("net.sf.sojo.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Long> class0 = Long.class;
      try { 
        ReflectionHelper.createNewSimpleObject(class0, class0);
        fail("Expecting exception: InstantiationException");
      
      } catch(InstantiationException e) {
         //
         // Can't create a new instance from type: java.lang.Long with constructor-argument: class java.lang.Long
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      try { 
        ReflectionHelper.createNewSimpleObject(class0, class0);
        fail("Expecting exception: InstantiationException");
      
      } catch(InstantiationException e) {
         //
         // Can't create a new instance from type: long with constructor-argument: long
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<String> class0 = String.class;
      Object object0 = ReflectionHelper.createNewSimpleObject(class0, class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Object object0 = ReflectionHelper.createNewSimpleObject(class0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object object0 = ReflectionHelper.createNewSimpleObject((Class<?>) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      boolean boolean0 = ReflectionHelper.isComplexType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = ReflectionHelper.isComplexType((Class<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      boolean boolean0 = ReflectionHelper.isComplexType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<java.util.Date, java.util.Date> hashMap0 = new HashMap<java.util.Date, java.util.Date>();
      boolean boolean0 = ReflectionHelper.isComplexType((Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      boolean boolean0 = ReflectionHelper.isComplexType((Object) class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = ReflectionHelper.isComplexType((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("class", "class");
      boolean boolean0 = ReflectionHelper.isComplexMapType((Object) hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = ReflectionHelper.isComplexMapType((Class<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = ReflectionHelper.isIterateableType((Class<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = ReflectionHelper.isIterableType((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      boolean boolean0 = ReflectionHelper.isComplexMapType((Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = ReflectionHelper.isComplexMapType((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = ReflectionHelper.isMapType((Class<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ReflectionHelper.removeSimpleType(class0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ReflectionHelper.removeSimpleType((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ReflectionHelper.addSimpleType(class0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ReflectionHelper.addSimpleType((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      boolean boolean0 = ReflectionHelper.isComplexMapType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = ReflectionHelper.isSimpleType((Class<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = ReflectionHelper.isSimpleType((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      Object object0 = ReflectionHelper.createBeanFromMap((Map<?, ?>) null, class0);
      boolean boolean0 = ReflectionHelper.isComplexType(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ReflectionHelper reflectionHelper0 = new ReflectionHelper();
  }
}
