/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:15:54 GMT 2022
 */

package net.sf.sojo.core.conversion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import net.sf.sojo.core.conversion.NotSupportedClassConversion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NotSupportedClassConversion_ESTest extends NotSupportedClassConversion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NotSupportedClassConversion notSupportedClassConversion0 = new NotSupportedClassConversion();
      notSupportedClassConversion0.notSupportedClassArray = null;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        notSupportedClassConversion0.isAssignableTo(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.NotSupportedClassConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      NotSupportedClassConversion notSupportedClassConversion0 = new NotSupportedClassConversion(classArray0);
      boolean boolean0 = notSupportedClassConversion0.isAssignableTo(classArray0[3]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      NotSupportedClassConversion notSupportedClassConversion0 = new NotSupportedClassConversion(classArray0);
      Class<Object> class0 = Object.class;
      boolean boolean0 = notSupportedClassConversion0.isAssignableTo(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      NotSupportedClassConversion notSupportedClassConversion0 = new NotSupportedClassConversion(classArray0);
      boolean boolean0 = notSupportedClassConversion0.isAssignableFrom((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      NotSupportedClassConversion notSupportedClassConversion0 = new NotSupportedClassConversion(classArray0);
      notSupportedClassConversion0.notSupportedClassArray = classArray0;
      Class<String>[] classArray1 = (Class<String>[]) Array.newInstance(Class.class, 7);
      Class<String> class0 = String.class;
      classArray1[3] = class0;
      classArray1[5] = classArray1[3];
      notSupportedClassConversion0.notSupportedClassArray = classArray1;
      boolean boolean0 = notSupportedClassConversion0.isAssignableTo(classArray1[5]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      NotSupportedClassConversion notSupportedClassConversion0 = new NotSupportedClassConversion(classArray0);
      Object object0 = new Object();
      boolean boolean0 = notSupportedClassConversion0.isAssignableFrom(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NotSupportedClassConversion notSupportedClassConversion0 = new NotSupportedClassConversion();
      notSupportedClassConversion0.notSupportedClassArray = null;
      // Undeclared exception!
      try { 
        notSupportedClassConversion0.isAssignableFrom((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.NotSupportedClassConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      NotSupportedClassConversion notSupportedClassConversion0 = new NotSupportedClassConversion(classArray0);
      Object object0 = new Object();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        notSupportedClassConversion0.convert(object0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not supported Conversion for Object: java.lang.Object@1c326deb (class java.lang.String).
         //
         verifyException("net.sf.sojo.core.conversion.NotSupportedClassConversion", e);
      }
  }
}
