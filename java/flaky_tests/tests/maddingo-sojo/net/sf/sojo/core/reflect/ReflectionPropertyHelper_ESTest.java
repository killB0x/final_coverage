/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:27:04 GMT 2022
 */

package net.sf.sojo.core.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import net.sf.sojo.core.reflect.ReflectionPropertyHelper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReflectionPropertyHelper_ESTest extends ReflectionPropertyHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[9];
      Map<?, ?> map0 = ReflectionPropertyHelper.getAllSetterProperties(class0, stringArray0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ReflectionPropertyHelper.getAllGetterProperties(class0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionMethodHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ReflectionPropertyHelper.getAllSetterProperties(class0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionMethodHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[9];
      Map<?, ?> map0 = ReflectionPropertyHelper.getAllGetterProperties(class0, stringArray0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ReflectionPropertyHelper reflectionPropertyHelper0 = new ReflectionPropertyHelper();
  }
}
