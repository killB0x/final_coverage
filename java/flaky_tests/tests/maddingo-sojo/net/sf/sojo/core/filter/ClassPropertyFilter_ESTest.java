/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:04:48 GMT 2022
 */

package net.sf.sojo.core.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.PatternSyntaxException;
import net.sf.sojo.core.filter.ClassPropertyFilter;
import net.sf.sojo.util.Util;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassPropertyFilter_ESTest extends ClassPropertyFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter();
      assertFalse(classPropertyFilter0.getSupport4AddClassProperty());
      
      classPropertyFilter0.setSupport4AddClassProperty(true);
      classPropertyFilter0.removeProperty("");
      assertTrue(classPropertyFilter0.getSupport4AddClassProperty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[1];
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter(class0, stringArray0);
      Class<?> class1 = classPropertyFilter0.getFilterClass();
      ClassPropertyFilter classPropertyFilter1 = new ClassPropertyFilter(class1);
      ClassPropertyFilter classPropertyFilter2 = classPropertyFilter1.removeProperty("net.sf.sojo.core.filter.ClassPropertyFilter");
      assertFalse(classPropertyFilter2.getSupport4AddClassProperty());
      assertEquals(1, classPropertyFilter0.getPropertySize());
      assertFalse(classPropertyFilter0.getSupport4AddClassProperty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter();
      assertFalse(classPropertyFilter0.getSupport4AddClassProperty());
      
      String[] stringArray0 = new String[6];
      classPropertyFilter0.setSupport4AddClassProperty(true);
      classPropertyFilter0.removeProperties(stringArray0);
      assertTrue(classPropertyFilter0.getSupport4AddClassProperty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter();
      assertFalse(classPropertyFilter0.getSupport4AddClassProperty());
      
      classPropertyFilter0.setSupport4AddClassProperty(true);
      boolean boolean0 = classPropertyFilter0.getSupport4AddClassProperty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter();
      classPropertyFilter0.getPropertySize();
      assertFalse(classPropertyFilter0.getSupport4AddClassProperty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter();
      classPropertyFilter0.getFilterClass();
      assertFalse(classPropertyFilter0.getSupport4AddClassProperty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter();
      classPropertyFilter0.getAllProperties();
      assertFalse(classPropertyFilter0.getSupport4AddClassProperty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[1];
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter(class0, stringArray0);
      Util.setKeyWordClass("haVi O*");
      Class<?> class1 = classPropertyFilter0.getFilterClass();
      ClassPropertyFilter classPropertyFilter1 = new ClassPropertyFilter(class1);
      ClassPropertyFilter classPropertyFilter2 = classPropertyFilter1.addProperty("haVi O*");
      assertEquals(0, classPropertyFilter2.getPropertySize());
      assertFalse(classPropertyFilter0.getSupport4AddClassProperty());
      assertEquals(1, classPropertyFilter0.getPropertySize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[1];
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter(class0, stringArray0);
      classPropertyFilter0.setSupport4AddClassProperty(true);
      classPropertyFilter0.addProperties(stringArray0);
      assertEquals(2, classPropertyFilter0.getPropertySize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter(class0, stringArray0);
      classPropertyFilter0.addProperty("&)*jw>");
      // Undeclared exception!
      try { 
        classPropertyFilter0.isKnownProperty(".Ld^9N8RND");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 0
         // &)*jw>
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter();
      ClassPropertyFilter classPropertyFilter1 = classPropertyFilter0.addProperty("e+=\"]p`t7");
      // Undeclared exception!
      try { 
        classPropertyFilter1.isKnownProperty("EEE MMM dd HH:mm:ss z yyyy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter(class0);
      ClassPropertyFilter classPropertyFilter1 = classPropertyFilter0.addProperties((String[]) null);
      assertFalse(classPropertyFilter1.getSupport4AddClassProperty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[1];
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter(class0, stringArray0);
      ClassPropertyFilter classPropertyFilter1 = classPropertyFilter0.removeProperty("net.sf.sojo.core.filter.ClassPropertyFilter");
      assertEquals(1, classPropertyFilter1.getPropertySize());
      assertFalse(classPropertyFilter1.getSupport4AddClassProperty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[1];
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter(class0, stringArray0);
      boolean boolean0 = classPropertyFilter0.getSupport4AddClassProperty();
      assertFalse(boolean0);
      assertEquals(1, classPropertyFilter0.getPropertySize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "KjY";
      stringArray0[1] = "";
      stringArray0[2] = "3nd pass string2Date: ";
      stringArray0[3] = "Nn@(UTx9*zEP me)";
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter(class0, stringArray0);
      boolean boolean0 = classPropertyFilter0.isKnownProperty("Nn@UTxzEP me");
      assertFalse(classPropertyFilter0.getSupport4AddClassProperty());
      assertTrue(boolean0);
      assertEquals(8, classPropertyFilter0.getPropertySize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter(class0, stringArray0);
      boolean boolean0 = classPropertyFilter0.isKnownProperty("");
      assertTrue(boolean0);
      assertFalse(classPropertyFilter0.getSupport4AddClassProperty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[1];
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter(class0, stringArray0);
      ClassPropertyFilter classPropertyFilter1 = classPropertyFilter0.addProperty("haVi O*");
      ClassPropertyFilter classPropertyFilter2 = classPropertyFilter1.removeProperties(stringArray0);
      boolean boolean0 = classPropertyFilter2.isKnownProperty("");
      assertEquals(1, classPropertyFilter0.getPropertySize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[1];
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter(class0, stringArray0);
      // Undeclared exception!
      try { 
        classPropertyFilter0.isKnownProperty("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[8];
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter(class0, stringArray0);
      boolean boolean0 = classPropertyFilter0.isKnownProperty(stringArray0[4]);
      assertEquals(8, classPropertyFilter0.getPropertySize());
      assertFalse(boolean0);
      assertFalse(classPropertyFilter0.getSupport4AddClassProperty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[1];
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter(class0, stringArray0);
      String[] stringArray1 = classPropertyFilter0.getAllProperties();
      assertFalse(classPropertyFilter0.getSupport4AddClassProperty());
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[1];
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter(class0, stringArray0);
      classPropertyFilter0.setSupport4AddClassProperty(true);
      Util.setKeyWordClass("haVi O*");
      classPropertyFilter0.addProperty("haVi O*");
      assertEquals(2, classPropertyFilter0.getPropertySize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter();
      ClassPropertyFilter classPropertyFilter1 = classPropertyFilter0.removeProperties((String[]) null);
      assertFalse(classPropertyFilter1.getSupport4AddClassProperty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[1];
      ClassPropertyFilter classPropertyFilter0 = new ClassPropertyFilter(class0, stringArray0);
      int int0 = classPropertyFilter0.getPropertySize();
      assertEquals(1, int0);
      assertFalse(classPropertyFilter0.getSupport4AddClassProperty());
  }
}
