/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:18:49 GMT 2022
 */

package net.sf.sojo.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import net.sf.sojo.core.conversion.NotSupportedClassConversion;
import net.sf.sojo.core.conversion.NullConversion;
import net.sf.sojo.core.conversion.Simple2SimpleConversion;
import net.sf.sojo.core.conversion.SimpleFormatConversion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleConversion_ESTest extends SimpleConversion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Simple2SimpleConversion simple2SimpleConversion0 = new Simple2SimpleConversion(class0, class0);
      Class<Object> class1 = Object.class;
      boolean boolean0 = simple2SimpleConversion0.isAssignableTo(class1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      Simple2SimpleConversion simple2SimpleConversion0 = new Simple2SimpleConversion(class1, class0);
      boolean boolean0 = simple2SimpleConversion0.isAssignableFrom(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      NullConversion nullConversion0 = new NullConversion(object0);
      Class<?> class0 = nullConversion0.getToType();
      assertEquals(1, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NotSupportedClassConversion notSupportedClassConversion0 = new NotSupportedClassConversion();
      NullConversion nullConversion0 = new NullConversion(notSupportedClassConversion0);
      Class<?> class0 = nullConversion0.getFromType();
      assertEquals("class java.lang.String", class0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NotSupportedClassConversion notSupportedClassConversion0 = new NotSupportedClassConversion();
      Class<Object> class0 = Object.class;
      boolean boolean0 = notSupportedClassConversion0.isFromTypeAndToTypeDifferent(class0, class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Simple2SimpleConversion simple2SimpleConversion0 = new Simple2SimpleConversion(class0);
      Class class1 = (Class)simple2SimpleConversion0.convert(class0, class0);
      NullConversion nullConversion0 = new NullConversion((Object) null);
      boolean boolean0 = nullConversion0.isAssignableTo(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NotSupportedClassConversion notSupportedClassConversion0 = new NotSupportedClassConversion();
      Class<Integer> class0 = Integer.class;
      NullConversion nullConversion0 = new NullConversion(notSupportedClassConversion0);
      Object object0 = nullConversion0.convert(class0, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      Simple2SimpleConversion simple2SimpleConversion0 = new Simple2SimpleConversion(class0, class1);
      // Undeclared exception!
      try { 
        simple2SimpleConversion0.convert(class0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't create a new instance from type: java.lang.Integer with constructor-argument: class java.lang.Integer
         //
         verifyException("net.sf.sojo.core.conversion.Simple2SimpleConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleFormatConversion simpleFormatConversion0 = new SimpleFormatConversion();
      Class<Locale> class0 = Locale.class;
      // Undeclared exception!
      try { 
        simpleFormatConversion0.convert((Object) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.SimpleFormatConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Simple2SimpleConversion simple2SimpleConversion0 = new Simple2SimpleConversion(class0);
      boolean boolean0 = simple2SimpleConversion0.isAssignableFrom((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Simple2SimpleConversion simple2SimpleConversion0 = new Simple2SimpleConversion(class0);
      Object object0 = new Object();
      boolean boolean0 = simple2SimpleConversion0.isAssignableFrom(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = new Object();
      NullConversion nullConversion0 = new NullConversion(object0);
      boolean boolean0 = nullConversion0.isFromTypeAndToTypeDifferent(class0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Simple2SimpleConversion simple2SimpleConversion0 = new Simple2SimpleConversion(class0);
      Class class1 = (Class)simple2SimpleConversion0.convert(class0, class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Simple2SimpleConversion simple2SimpleConversion0 = null;
      try {
        simple2SimpleConversion0 = new Simple2SimpleConversion(class0, (Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The classes: class java.lang.Object and null must be a simple type.
         //
         verifyException("net.sf.sojo.core.SimpleConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Simple2SimpleConversion simple2SimpleConversion0 = null;
      try {
        simple2SimpleConversion0 = new Simple2SimpleConversion(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The classes: class java.util.Locale and class java.util.Locale must be a simple type.
         //
         verifyException("net.sf.sojo.core.SimpleConversion", e);
      }
  }
}
