/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 01:42:47 GMT 2022
 */

package net.sf.sojo.core.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import net.sf.sojo.core.NonCriticalExceptionHandler;
import net.sf.sojo.core.reflect.ReflectionMethodHelper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReflectionMethodHelper_ESTest extends ReflectionMethodHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<ReflectionMethodHelper> class0 = ReflectionMethodHelper.class;
      Map<Object, Object> map0 = ReflectionMethodHelper.getAllGetterMethod(class0);
      Map<Object, Object> map1 = ReflectionMethodHelper.getAllGetterMethod(class0);
      Map<Object, Object> map2 = ReflectionMethodHelper.getAllNotEqualsGetterAndSetterAndRemoveThisProperties(map0, map1);
      assertEquals(10, map2.size());
      assertTrue(map2.equals((Object)map0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReflectionMethodHelper.clearPropertiesCache();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<String> class0 = String.class;
      Map<Object, Object> map0 = ReflectionMethodHelper.getAllSetterMethodWithCache(class0, (String[]) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<ReflectionMethodHelper> class0 = ReflectionMethodHelper.class;
      String[] stringArray0 = new String[1];
      Map<Object, Object> map0 = ReflectionMethodHelper.getAllSetterMethodWithCache(class0, stringArray0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ReflectionMethodHelper.getAllSetterMethod(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionMethodHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionMethodHelper.getAllNotEqualsGetterAndSetterAndRemoveThisProperties((Map<Object, Object>) null, (Map<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionMethodHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      hashMap0.put(object0, object0);
      // Undeclared exception!
      try { 
        ReflectionMethodHelper.getAllNotEqualsGetterAndSetterAndRemoveThisProperties(hashMap0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.Comparable (java.lang.Object and java.lang.Comparable are in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ReflectionMethodHelper.getAllMethodsByClass(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionMethodHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ReflectionMethodHelper.getAllGetterMethodWithCache(class0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionMethodHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ReflectionMethodHelper.getAllGetterMethod(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionMethodHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ReflectionMethodHelper.getAllGetterAndSetterMethod(class0, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionMethodHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<ReflectionMethodHelper> class0 = ReflectionMethodHelper.class;
      boolean boolean0 = ReflectionMethodHelper.isMethodSetterAndGetterCompliant(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionMethodHelper.isMethodSetterAndGetterCompliant((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionMethodHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ReflectionMethodHelper.isMethodSetterAndGetterCompliant(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<ReflectionMethodHelper> class0 = ReflectionMethodHelper.class;
      Map<Object, Object> map0 = ReflectionMethodHelper.getAllGetterAndSetterMethod(class0, 1);
      assertEquals(10, map0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<ReflectionMethodHelper> class0 = ReflectionMethodHelper.class;
      Map<Object, Object> map0 = ReflectionMethodHelper.getAllGetterAndSetterMethod(class0, 2);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Map<Object, Object> map0 = ReflectionMethodHelper.getAllNotEqualsGetterAndSetterAndRemoveThisProperties(hashMap0, hashMap0);
      ReflectionMethodHelper.getAllNotEqualsGetterAndSetterAndRemoveThisProperties(map0, hashMap0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = ReflectionMethodHelper.getAllMethodsByClass(class0);
      assertEquals(10, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<ReflectionMethodHelper> class0 = ReflectionMethodHelper.class;
      NonCriticalExceptionHandler.setNonCriticalExceptionHandlerEnabled(true);
      Map<Object, Object> map0 = ReflectionMethodHelper.getAllGetterAndSetterMethod(class0, 1);
      assertEquals(10, map0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<String> class0 = String.class;
      Map<Object, Object> map0 = ReflectionMethodHelper.getAllGetterAndSetterMethod(class0, 12);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ReflectionMethodHelper.getAllSetterMethodWithCache(class0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionMethodHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<ReflectionMethodHelper> class0 = ReflectionMethodHelper.class;
      String[] stringArray0 = new String[0];
      Map<Object, Object> map0 = ReflectionMethodHelper.getAllGetterMethodWithCache(class0, stringArray0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ReflectionMethodHelper reflectionMethodHelper0 = new ReflectionMethodHelper();
      assertEquals(2, ReflectionMethodHelper.SET_METHOD);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<ReflectionMethodHelper> class0 = ReflectionMethodHelper.class;
      Map<Object, Object> map0 = ReflectionMethodHelper.getAllSetterMethod(class0);
      assertTrue(map0.isEmpty());
  }
}
