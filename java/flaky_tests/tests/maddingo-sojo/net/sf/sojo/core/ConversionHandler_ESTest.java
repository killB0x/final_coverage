/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 01:59:00 GMT 2022
 */

package net.sf.sojo.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.sf.sojo.core.Conversion;
import net.sf.sojo.core.ConversionHandler;
import net.sf.sojo.core.conversion.Iterateable2IterateableConversion;
import net.sf.sojo.core.conversion.IterateableMap2BeanConversion;
import net.sf.sojo.core.conversion.IterateableMap2MapConversion;
import net.sf.sojo.core.conversion.NullConversion;
import net.sf.sojo.core.conversion.Simple2SimpleConversion;
import net.sf.sojo.core.conversion.SimpleFormatConversion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConversionHandler_ESTest extends ConversionHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      Iterateable2IterateableConversion iterateable2IterateableConversion0 = new Iterateable2IterateableConversion();
      conversionHandler0.addConversion(iterateable2IterateableConversion0);
      Iterateable2IterateableConversion iterateable2IterateableConversion1 = new Iterateable2IterateableConversion();
      Conversion conversion0 = conversionHandler0.replaceAllConversion(iterateable2IterateableConversion1);
      assertNotNull(conversion0);
      assertSame(conversion0, iterateable2IterateableConversion0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      conversionHandler0.addConversion(iterateableMap2MapConversion0);
      int int0 = conversionHandler0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      Iterateable2IterateableConversion iterateable2IterateableConversion0 = new Iterateable2IterateableConversion();
      conversionHandler0.addConversion(iterateable2IterateableConversion0);
      Iterateable2IterateableConversion iterateable2IterateableConversion1 = (Iterateable2IterateableConversion)conversionHandler0.getConversionByPosition(0);
      assertFalse(iterateable2IterateableConversion1.getIgnoreNullValues());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      SimpleFormatConversion simpleFormatConversion0 = new SimpleFormatConversion();
      conversionHandler0.addConversion(simpleFormatConversion0);
      // Undeclared exception!
      try { 
        conversionHandler0.replaceConversion((Conversion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.ConversionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      conversionHandler0.addConversion(iterateableMap2MapConversion0);
      // Undeclared exception!
      try { 
        conversionHandler0.replaceAllConversion((Conversion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.ConversionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      conversionHandler0.addConversion(iterateableMap2MapConversion0);
      boolean boolean0 = conversionHandler0.containsConversion(iterateableMap2MapConversion0);
      assertEquals(1, conversionHandler0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      boolean boolean0 = conversionHandler0.containsConversion(iterateableMap2MapConversion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      Iterateable2IterateableConversion iterateable2IterateableConversion0 = new Iterateable2IterateableConversion();
      conversionHandler0.addConversion(iterateable2IterateableConversion0);
      conversionHandler0.replaceConversion((Conversion) iterateable2IterateableConversion0, false);
      assertEquals(1, conversionHandler0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      conversionHandler0.addConversion(iterateableMap2MapConversion0);
      conversionHandler0.replaceConversion((Conversion) iterateableMap2MapConversion0, true);
      assertEquals(1, conversionHandler0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      Object object0 = new Object();
      NullConversion nullConversion0 = new NullConversion(object0);
      Iterateable2IterateableConversion iterateable2IterateableConversion0 = new Iterateable2IterateableConversion();
      conversionHandler0.addConversion(nullConversion0);
      conversionHandler0.replaceConversion((Conversion) iterateable2IterateableConversion0, false);
      assertEquals(1, conversionHandler0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      IterateableMap2MapConversion iterateableMap2MapConversion0 = new IterateableMap2MapConversion();
      Conversion conversion0 = conversionHandler0.replaceConversion((Conversion) iterateableMap2MapConversion0, true);
      assertNull(conversion0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      Iterateable2IterateableConversion iterateable2IterateableConversion0 = new Iterateable2IterateableConversion();
      conversionHandler0.addConversion(iterateable2IterateableConversion0);
      // Undeclared exception!
      try { 
        conversionHandler0.replaceConversion((Conversion) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.ConversionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      Iterateable2IterateableConversion iterateable2IterateableConversion0 = new Iterateable2IterateableConversion();
      conversionHandler0.addConversion(iterateable2IterateableConversion0);
      Conversion conversion0 = conversionHandler0.removeConversion(iterateable2IterateableConversion0);
      assertSame(conversion0, iterateable2IterateableConversion0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      Iterateable2IterateableConversion iterateable2IterateableConversion0 = new Iterateable2IterateableConversion();
      Conversion conversion0 = conversionHandler0.removeConversion(iterateable2IterateableConversion0);
      assertNull(conversion0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      Simple2SimpleConversion simple2SimpleConversion0 = new Simple2SimpleConversion(class0, class0);
      conversionHandler0.addConversion(simple2SimpleConversion0);
      conversionHandler0.getConversion(object0, class0);
      assertEquals(1, conversionHandler0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      Iterateable2IterateableConversion iterateable2IterateableConversion0 = new Iterateable2IterateableConversion();
      conversionHandler0.addConversion(iterateable2IterateableConversion0);
      conversionHandler0.getConversion(iterateable2IterateableConversion0, iterateable2IterateableConversion0.DEFAULT_COLLECTION_TYPE);
      assertEquals(1, conversionHandler0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      conversionHandler0.addConversion(iterateableMap2BeanConversion0);
      Class<Iterateable2IterateableConversion> class0 = Iterateable2IterateableConversion.class;
      iterateableMap2BeanConversion0.isAssignableTo(class0);
      conversionHandler0.getConversion(iterateableMap2BeanConversion0, (Class<?>) null);
      assertEquals(1, conversionHandler0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      Iterateable2IterateableConversion iterateable2IterateableConversion0 = new Iterateable2IterateableConversion();
      conversionHandler0.addConversion(iterateable2IterateableConversion0);
      Class<Object> class0 = Object.class;
      conversionHandler0.getConversion(iterateable2IterateableConversion0, class0);
      assertEquals(1, conversionHandler0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Iterateable2IterateableConversion iterateable2IterateableConversion0 = new Iterateable2IterateableConversion();
      ConversionHandler conversionHandler0 = new ConversionHandler();
      conversionHandler0.addConversion(iterateable2IterateableConversion0);
      conversionHandler0.getConversion(iterateable2IterateableConversion0, (Class<?>) null);
      assertEquals(1, conversionHandler0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      Iterateable2IterateableConversion iterateable2IterateableConversion0 = new Iterateable2IterateableConversion();
      conversionHandler0.addConversion(iterateable2IterateableConversion0);
      conversionHandler0.replaceConversion(iterateable2IterateableConversion0);
      assertEquals(1, conversionHandler0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      Iterateable2IterateableConversion iterateable2IterateableConversion0 = new Iterateable2IterateableConversion();
      conversionHandler0.addConversion(iterateable2IterateableConversion0);
      conversionHandler0.addConversion(iterateable2IterateableConversion0);
      assertEquals(1, conversionHandler0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      // Undeclared exception!
      try { 
        conversionHandler0.addConversion((Conversion) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Conversion must be different from null
         //
         verifyException("net.sf.sojo.core.ConversionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      int int0 = conversionHandler0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      conversionHandler0.clear();
      assertEquals(0, conversionHandler0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      // Undeclared exception!
      try { 
        conversionHandler0.getConversionByPosition(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Iterateable2IterateableConversion iterateable2IterateableConversion0 = new Iterateable2IterateableConversion();
      ConversionHandler conversionHandler0 = new ConversionHandler();
      Conversion conversion0 = conversionHandler0.replaceAllConversion(iterateable2IterateableConversion0);
      assertNull(conversion0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConversionHandler conversionHandler0 = new ConversionHandler();
      Conversion conversion0 = conversionHandler0.replaceConversion((Conversion) null);
      assertNull(conversion0);
  }
}
