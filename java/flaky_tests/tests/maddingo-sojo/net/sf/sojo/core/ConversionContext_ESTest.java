/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:31:42 GMT 2022
 */

package net.sf.sojo.core;

import org.junit.Test;
import static org.junit.Assert.*;
import net.sf.sojo.core.Conversion;
import net.sf.sojo.core.ConversionContext;
import net.sf.sojo.core.conversion.ComplexBean2MapConversion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConversionContext_ESTest extends ConversionContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ComplexBean2MapConversion complexBean2MapConversion0 = new ComplexBean2MapConversion();
      Object object0 = new Object();
      ConversionContext conversionContext0 = new ConversionContext(0, (Conversion) complexBean2MapConversion0, object0);
      assertFalse(conversionContext0.cancelConvert);
      assertEquals(0, conversionContext0.numberOfRecursion);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      ConversionContext conversionContext0 = new ConversionContext(28, (Object) null, object0);
      ConversionContext conversionContext1 = new ConversionContext(0, conversionContext0.value, conversionContext0.value);
      assertFalse(conversionContext1.cancelConvert);
      assertEquals(28, conversionContext0.numberOfRecursion);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConversionContext conversionContext0 = new ConversionContext();
      assertEquals(0, conversionContext0.numberOfRecursion);
      assertFalse(conversionContext0.cancelConvert);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConversionContext conversionContext0 = new ConversionContext(1380, (Conversion) null, (Object) null);
      assertFalse(conversionContext0.cancelConvert);
      assertEquals(1380, conversionContext0.numberOfRecursion);
  }
}
