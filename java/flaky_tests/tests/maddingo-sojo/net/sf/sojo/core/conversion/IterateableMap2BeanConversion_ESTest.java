/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:01:27 GMT 2022
 */

package net.sf.sojo.core.conversion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.sf.sojo.core.ConversionException;
import net.sf.sojo.core.Converter;
import net.sf.sojo.core.IConverterExtension;
import net.sf.sojo.core.conversion.IterateableMap2BeanConversion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IterateableMap2BeanConversion_ESTest extends IterateableMap2BeanConversion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      Class<Object> class0 = Object.class;
      Object object0 = new Object();
      Object object1 = new Object();
      Converter converter0 = new Converter();
      // Undeclared exception!
      try { 
        iterateableMap2BeanConversion0.doConvert(object0, class0, object1, object0, converter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.reflect.AccessibleObject (java.lang.Object and java.lang.reflect.AccessibleObject are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2BeanConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      Object object0 = new Object();
      MockThrowable mockThrowable0 = new MockThrowable(".e[M J&", (Throwable) null);
      ConversionException conversionException0 = new ConversionException(";%?;$[jArbedYM", mockThrowable0);
      Converter converter0 = new Converter();
      // Undeclared exception!
      try { 
        iterateableMap2BeanConversion0.doConvert(conversionException0, object0, (Object) null, (Object) null, converter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only Method or Field are allowed: null
         //
         verifyException("net.sf.sojo.core.reflect.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      Class<ConversionException> class0 = ConversionException.class;
      // Undeclared exception!
      try { 
        iterateableMap2BeanConversion0.convert((Object) null, class0, (IConverterExtension) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't create a Bean from class: class net.sf.sojo.core.ConversionException
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2BeanConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      // Undeclared exception!
      try { 
        iterateableMap2BeanConversion0.convert((Object) null, iterateableMap2BeanConversion0.DEFAULT_MAP_TYPE, (IConverterExtension) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2BeanConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      // Undeclared exception!
      try { 
        iterateableMap2BeanConversion0.convert(iterateableMap2BeanConversion0, iterateableMap2BeanConversion0.DEFAULT_MAP_TYPE, (IConverterExtension) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.sf.sojo.core.conversion.IterateableMap2BeanConversion cannot be cast to class java.util.Map (net.sf.sojo.core.conversion.IterateableMap2BeanConversion is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @5a7b3c5d; java.util.Map is in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.core.conversion.IterateableMap2BeanConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      Class<ConversionException> class0 = ConversionException.class;
      boolean boolean0 = iterateableMap2BeanConversion0.isAssignableTo(class0);
      Object object0 = new Object();
      boolean boolean1 = iterateableMap2BeanConversion0.isAssignableFrom(object0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      Object object0 = new Object();
      boolean boolean0 = iterateableMap2BeanConversion0.isAssignableFrom(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      boolean boolean0 = iterateableMap2BeanConversion0.isAssignableFrom((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      Class<Object> class0 = Object.class;
      boolean boolean0 = iterateableMap2BeanConversion0.isAssignableTo(class0);
      Object object0 = new Object();
      boolean boolean1 = iterateableMap2BeanConversion0.isAssignableFrom(object0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      IterateableMap2BeanConversion iterateableMap2BeanConversion0 = new IterateableMap2BeanConversion();
      Object object0 = new Object();
      ConversionException conversionException0 = new ConversionException((String) null);
      iterateableMap2BeanConversion0.doAddObject(conversionException0, conversionException0, object0, object0, 0);
      assertFalse(iterateableMap2BeanConversion0.getWithCycleDetection());
  }
}
