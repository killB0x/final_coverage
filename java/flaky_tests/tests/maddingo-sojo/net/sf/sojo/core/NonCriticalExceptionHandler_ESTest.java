/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:29:31 GMT 2022
 */

package net.sf.sojo.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.sf.sojo.core.NonCriticalExceptionHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NonCriticalExceptionHandler_ESTest extends NonCriticalExceptionHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NonCriticalExceptionHandler nonCriticalExceptionHandler0 = new NonCriticalExceptionHandler();
      Class<Object> class0 = Object.class;
      nonCriticalExceptionHandler0.handleExceptionInternal(class0, "MESSAGE: ");
      assertFalse(nonCriticalExceptionHandler0.isNonCriticalExceptionHandlerEnabled());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NonCriticalExceptionHandler nonCriticalExceptionHandler0 = new NonCriticalExceptionHandler();
      Class<Object> class0 = Object.class;
      MockThrowable mockThrowable0 = new MockThrowable("MESSAGE: ");
      MockException mockException0 = new MockException(mockThrowable0);
      nonCriticalExceptionHandler0.handleExceptionInternal(class0, mockException0, "MESSAGE: ");
      assertFalse(nonCriticalExceptionHandler0.isNonCriticalExceptionHandlerEnabled());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NonCriticalExceptionHandler.setNonCriticalExceptionHandlerEnabled(true);
      boolean boolean0 = NonCriticalExceptionHandler.isNonCriticalExceptionHandlerEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NonCriticalExceptionHandler.setNonCriticalExceptionHandler((NonCriticalExceptionHandler) null);
      NonCriticalExceptionHandler nonCriticalExceptionHandler0 = NonCriticalExceptionHandler.getNonCriticalExceptionHandler();
      assertNull(nonCriticalExceptionHandler0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NonCriticalExceptionHandler.setNonCriticalExceptionHandlerEnabled(true);
      NonCriticalExceptionHandler nonCriticalExceptionHandler0 = NonCriticalExceptionHandler.getNonCriticalExceptionHandler();
      assertTrue(nonCriticalExceptionHandler0.isNonCriticalExceptionHandlerEnabled());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NonCriticalExceptionHandler.setNonCriticalExceptionHandler((NonCriticalExceptionHandler) null);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        NonCriticalExceptionHandler.handleException(class0, "9'_}H~D[_L4``!)[d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.NonCriticalExceptionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NonCriticalExceptionHandler.setNonCriticalExceptionHandler((NonCriticalExceptionHandler) null);
      Class<Object> class0 = Object.class;
      MockException mockException0 = new MockException();
      // Undeclared exception!
      try { 
        NonCriticalExceptionHandler.handleException((Class<?>) class0, (Exception) mockException0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.NonCriticalExceptionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NonCriticalExceptionHandler nonCriticalExceptionHandler0 = NonCriticalExceptionHandler.getNonCriticalExceptionHandler();
      assertFalse(nonCriticalExceptionHandler0.isNonCriticalExceptionHandlerEnabled());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MockThrowable mockThrowable0 = new MockThrowable("", (Throwable) null);
      MockException mockException0 = new MockException(mockThrowable0);
      NonCriticalExceptionHandler.handleException((Class<?>) class0, (Exception) mockException0, ";{>b>f&1nGXI%xv");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NonCriticalExceptionHandler.handleException(class0, "[--)-");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = NonCriticalExceptionHandler.isNonCriticalExceptionHandlerEnabled();
      assertFalse(boolean0);
  }
}
