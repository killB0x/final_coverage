/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 01:52:21 GMT 2022
 */

package net.sf.sojo.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import net.sf.sojo.util.Table;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Table_ESTest extends Table_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Table table0 = new Table();
      table0.removeRow(0);
      assertEquals(",", table0.getDelimiter());
      assertEquals((-1), table0.getNumberOfColumns());
      assertTrue(table0.getWithColumnNames());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Table table0 = new Table();
      assertTrue(table0.getWithColumnNames());
      
      table0.setWithColumnNames(false);
      boolean boolean0 = table0.getWithColumnNames();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Table table0 = new Table();
      String string0 = table0.getRowsWithColumnsAndColumnsNamesAsString();
      assertEquals((-1), table0.getNumberOfColumns());
      assertEquals("", string0);
      assertTrue(table0.getWithColumnNames());
      assertEquals(",", table0.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Table table0 = new Table();
      table0.clear();
      table0.getRows();
      assertEquals(",", table0.getDelimiter());
      assertTrue(table0.getWithColumnNames());
      assertEquals((-1), table0.getNumberOfColumns());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Table table0 = new Table();
      assertEquals((-1), table0.getNumberOfColumns());
      
      Object object0 = new Object();
      table0.addValue2NewRow(object0);
      int int0 = table0.getNumberOfColumns();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Table table0 = new Table();
      assertEquals((-1), table0.getNumberOfColumns());
      
      table0.addValue2NewRow("F^");
      table0.getLastRow();
      assertEquals(",", table0.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Table table0 = new Table();
      assertEquals(",", table0.getDelimiter());
      
      table0.setDelimiter((String) null);
      String string0 = table0.getDelimiter();
      assertEquals((-1), table0.getNumberOfColumns());
      assertTrue(table0.getWithColumnNames());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Table table0 = new Table();
      assertEquals(",", table0.getDelimiter());
      
      table0.setDelimiter("");
      table0.getDelimiter();
      assertEquals("", table0.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Table table0 = new Table();
      table0.clear();
      table0.getCurrentRowNumber();
      assertEquals((-1), table0.getNumberOfColumns());
      assertEquals(",", table0.getDelimiter());
      assertTrue(table0.getWithColumnNames());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Table table0 = new Table();
      assertEquals((-1), table0.getCurrentColumnNumber());
      
      Object object0 = new Object();
      table0.addValue2CurrentRow("", object0);
      int int0 = table0.getCurrentColumnNumber();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Table table0 = new Table();
      table0.addValue2CurrentRow((Object) "");
      table0.addValue2CurrentRow("", (Object) "");
      int int0 = table0.getCurrentColumnNumber();
      assertEquals(2, table0.getNumberOfColumns());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Table table0 = new Table();
      table0.addValue2CurrentRow(",", (Object) ",");
      table0.addValue2CurrentRow(",", (Object) ",");
      table0.addValue2NewRow((Object) null);
      // Undeclared exception!
      try { 
        table0.validateAndRemoveEmptyRows();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Table table0 = new Table();
      // Undeclared exception!
      try { 
        table0.row2String((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Table table0 = new Table();
      Object object0 = new Object();
      table0.clear();
      table0.addValue2NewRow(object0);
      table0.addValue2CurrentRow((Object) ",");
      table0.row2String(0);
      assertEquals(2, table0.getNumberOfColumns());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Table table0 = new Table();
      table0.row2String(0);
      assertTrue(table0.getWithColumnNames());
      assertEquals(",", table0.getDelimiter());
      assertEquals((-1), table0.getNumberOfColumns());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Table table0 = new Table();
      Object object0 = new Object();
      table0.clear();
      table0.addValue2NewRow(object0);
      table0.addValue2CurrentRow((Object) ",");
      table0.getColumnNames();
      assertEquals(2, table0.getNumberOfColumns());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Table table0 = new Table();
      table0.getColumnNames();
      assertEquals(",", table0.getDelimiter());
      assertEquals((-1), table0.getNumberOfColumns());
      assertTrue(table0.getWithColumnNames());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Table table0 = new Table();
      assertEquals((-1), table0.getNumberOfColumns());
      
      table0.addValue2NewRow("\r\n");
      table0.addValue2NewRow("\r\n");
      String string0 = table0.getRowsWithColumnsAsString();
      assertEquals("\r\n\r\n\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Table table0 = new Table();
      String string0 = table0.getRowsWithColumnsAsString();
      assertEquals((-1), table0.getNumberOfColumns());
      assertEquals(",", table0.getDelimiter());
      assertEquals("", string0);
      assertTrue(table0.getWithColumnNames());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Table table0 = new Table();
      assertEquals((-1), table0.getNumberOfColumns());
      
      Object object0 = new Object();
      table0.addValue2CurrentRow((String) null, object0);
      assertTrue(table0.getWithColumnNames());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Table table0 = new Table();
      table0.setWithColumnNames(false);
      assertEquals((-1), table0.getNumberOfColumns());
      
      Object object0 = new Object();
      table0.addValue2CurrentRow((String) null, object0);
      assertFalse(table0.getWithColumnNames());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Table table0 = new Table();
      boolean boolean0 = table0.getWithColumnNames();
      assertEquals(",", table0.getDelimiter());
      assertEquals((-1), table0.getNumberOfColumns());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Table table0 = new Table();
      String string0 = table0.getDelimiter();
      assertEquals(",", string0);
      assertEquals((-1), table0.getNumberOfColumns());
      assertTrue(table0.getWithColumnNames());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Table table0 = new Table();
      // Undeclared exception!
      try { 
        table0.validateAndRemoveEmptyRows();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Row: 0 - expected number of columns: -1 but was 0 --> []
         //
         verifyException("net.sf.sojo.util.Table", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Table table0 = new Table();
      table0.addValue2CurrentRow(",", (Object) ",");
      table0.addValue2CurrentRow(",", (Object) ",");
      table0.addValue2NewRow(",");
      // Undeclared exception!
      try { 
        table0.validateAndRemoveEmptyRows();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Row: 1 - expected number of columns: 2 but was 1 --> [,]
         //
         verifyException("net.sf.sojo.util.Table", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Table table0 = new Table();
      assertEquals((-1), table0.getNumberOfColumns());
      
      table0.addValue2CurrentRow((Object) ",");
      assertEquals(1, table0.getNumberOfColumns());
      
      table0.validateAndRemoveEmptyRows();
      assertTrue(table0.getWithColumnNames());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Table table0 = new Table();
      String string0 = table0.toString();
      assertEquals((-1), table0.getNumberOfColumns());
      assertTrue(table0.getWithColumnNames());
      assertEquals("\n\n", string0);
      assertEquals(",", table0.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Table table0 = new Table();
      assertEquals((-1), table0.getNumberOfColumns());
      
      table0.addValue2CurrentRow("\r\n", (Object) "\r\n");
      table0.newRow();
      table0.getRowsWithColumnsAndColumnsNamesAsString();
      assertEquals(1, table0.getNumberOfColumns());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Table table0 = new Table();
      assertEquals((-1), table0.getNumberOfColumns());
      
      table0.addValue2CurrentRow((String) null, (Object) null);
      assertEquals(1, table0.getNumberOfColumns());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Table table0 = new Table();
      table0.getLastRow();
      assertEquals(",", table0.getDelimiter());
      assertEquals((-1), table0.getNumberOfColumns());
      assertTrue(table0.getWithColumnNames());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Table table0 = new Table();
      Object object0 = new Object();
      table0.addValue2NewRow(object0);
      table0.addValue2CurrentRow("", (Object) "\r\n");
      table0.addValue2NewRow(object0);
      table0.addValue2CurrentRow((String) null, (Object) null);
      assertEquals(2, table0.getNumberOfColumns());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Table table0 = new Table();
      int int0 = table0.getNumberOfColumns();
      assertTrue(table0.getWithColumnNames());
      assertEquals(",", table0.getDelimiter());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Table table0 = new Table();
      // Undeclared exception!
      try { 
        table0.removeRow(1768);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Table table0 = new Table();
      int int0 = table0.getCurrentColumnNumber();
      assertEquals((-1), table0.getNumberOfColumns());
      assertTrue(table0.getWithColumnNames());
      assertEquals(",", table0.getDelimiter());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Table table0 = new Table();
      table0.getCurrentRowNumber();
      assertEquals(",", table0.getDelimiter());
      assertTrue(table0.getWithColumnNames());
      assertEquals((-1), table0.getNumberOfColumns());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Table table0 = new Table();
      table0.clear();
      // Undeclared exception!
      try { 
        table0.getLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Table table0 = new Table();
      List<List<?>> list0 = table0.getRows();
      table0.addValue2CurrentRow(",,L[F_\r\n", (Object) list0);
      // Undeclared exception!
      try { 
        table0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Table table0 = new Table();
      table0.addValue2CurrentRow((Object) ",");
      table0.addValue2CurrentRow((Object) ",");
      table0.getRowsWithColumnsAndColumnsNamesAsString();
      assertEquals(2, table0.getNumberOfColumns());
  }
}
