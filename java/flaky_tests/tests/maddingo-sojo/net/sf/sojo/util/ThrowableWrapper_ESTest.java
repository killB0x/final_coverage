/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:23:46 GMT 2022
 */

package net.sf.sojo.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import net.sf.sojo.util.StackTraceElementWrapper;
import net.sf.sojo.util.ThrowableWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ThrowableWrapper_ESTest extends ThrowableWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      MockThrowable mockThrowable2 = new MockThrowable("1cvBjTi", mockThrowable1);
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper(mockThrowable2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper();
      throwableWrapper0.setStackTraceElementWrapperList((StackTraceElementWrapper[]) null);
      throwableWrapper0.getStackTraceElementWrapperList();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper(mockThrowable0);
      throwableWrapper0.getStackTraceElementWrapperList();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper(mockThrowable1);
      ThrowableWrapper throwableWrapper1 = throwableWrapper0.getCauseWrapper();
      assertNotNull(throwableWrapper1);
      
      String string0 = throwableWrapper1.getMessage();
      assertNull(string0);
      assertNotSame(throwableWrapper0, throwableWrapper1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper(mockThrowable0);
      String string0 = throwableWrapper0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper();
      assertEquals("no exception class name available", throwableWrapper0.getExceptionClassName());
      
      throwableWrapper0.setExceptionClassName((String) null);
      throwableWrapper0.getExceptionClassName();
      assertEquals("no message available", throwableWrapper0.getMessage());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper();
      // Undeclared exception!
      try { 
        throwableWrapper0.printStackTrace((PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.util.ThrowableWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper(mockThrowable0);
      MockFile mockFile0 = new MockFile("6!,8M*M3rGPY%", "6!,8M*M3rGPY%");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      throwableWrapper0.printStackTrace((PrintStream) mockPrintStream0);
      assertEquals(217L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper(mockThrowable0);
      throwableWrapper0.setMessage("x*~N6k1=T*=&C@ay");
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwableWrapper0.getExceptionClassName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper();
      throwableWrapper0.setCauseWrapper(throwableWrapper0);
      assertEquals("no exception class name available", throwableWrapper0.getExceptionClassName());
      assertEquals("no message available", throwableWrapper0.getMessage());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper();
      String string0 = throwableWrapper0.getExceptionClassName();
      assertEquals("no exception class name available", string0);
      assertEquals("no message available", throwableWrapper0.getMessage());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper();
      assertEquals("no exception class name available", throwableWrapper0.getExceptionClassName());
      
      throwableWrapper0.setExceptionClassName("");
      throwableWrapper0.getExceptionClassName();
      assertEquals("no message available", throwableWrapper0.getMessage());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper();
      String string0 = throwableWrapper0.getMessage();
      assertEquals("no exception class name available", throwableWrapper0.getExceptionClassName());
      assertEquals("no message available", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThrowableWrapper throwableWrapper0 = null;
      try {
        throwableWrapper0 = new ThrowableWrapper((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The parameter Throwable must be different from value null.
         //
         verifyException("net.sf.sojo.util.ThrowableWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper();
      StackTraceElementWrapper[] stackTraceElementWrapperArray0 = throwableWrapper0.getStackTraceElementWrapperList();
      assertEquals("no exception class name available", throwableWrapper0.getExceptionClassName());
      assertEquals(0, stackTraceElementWrapperArray0.length);
      assertEquals("no message available", throwableWrapper0.getMessage());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper();
      throwableWrapper0.getCauseWrapper();
      assertEquals("no exception class name available", throwableWrapper0.getExceptionClassName());
      assertEquals("no message available", throwableWrapper0.getMessage());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper();
      throwableWrapper0.setStackTraceElementWrapperList((StackTraceElementWrapper[]) null);
      // Undeclared exception!
      try { 
        throwableWrapper0.printStackTrace();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.util.ThrowableWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ThrowableWrapper throwableWrapper0 = new ThrowableWrapper(mockThrowable0);
      throwableWrapper0.printStackTrace();
      assertNull(throwableWrapper0.getMessage());
  }
}
