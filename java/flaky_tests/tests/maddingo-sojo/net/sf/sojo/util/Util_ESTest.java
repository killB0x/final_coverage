/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 01:44:37 GMT 2022
 */

package net.sf.sojo.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.text.DateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import net.sf.sojo.util.Util;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Util_ESTest extends Util_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(0);
      char[] charArray0 = new char[6];
      charArray0[5] = 'Y';
      stringBuffer0.append(charArray0);
      Util.delLastComma(stringBuffer0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000Y", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(1186);
      char[] charArray0 = new char[1];
      StringBuffer stringBuffer1 = stringBuffer0.append(charArray0);
      Util.delLastComma(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, DateFormat> hashMap0 = new HashMap<String, DateFormat>();
      Util.setDateFormats(hashMap0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Date date0 = Util.string2Date("6");
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = Util.initJdkLogger((InputStream) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      hashMap0.put(object0, object0);
      Map<Object, Object> map0 = Util.filterMapByKeys(hashMap0, (String[]) null);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.registerDateFormat((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.registerDateFormat("U|FptA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'U'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        Util.filterMapByKeys((Map<Object, Object>) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      hashMap0.put(object0, object0);
      // Undeclared exception!
      try { 
        Util.filterMapByKeys(hashMap0, stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.String (java.lang.Object and java.lang.String are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "F8";
      // Undeclared exception!
      try { 
        Util.isStringInArray(stringArray0, stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3nd pass string2Date: ";
      boolean boolean0 = Util.isStringInArray(stringArray0, "3nd pass string2Date: ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = Util.isStringInArray(stringArray0, "*.)T,cC2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Util.setKeyWordClass("7]P\"tuC_~F");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 577, 0);
      boolean boolean0 = Util.initJdkLogger((InputStream) byteArrayInputStream0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0);
      DateFormat dateFormat1 = Util.registerDateFormat("", dateFormat0);
      assertNull(dateFormat1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Map<Object, Object> map0 = Util.filterMapByKeys((Map<Object, Object>) null, stringArray0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Map<Object, Object> map0 = Util.filterMapByKeys(hashMap0, (String[]) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      String[] stringArray0 = new String[1];
      hashMap0.put("class", "class");
      stringArray0[0] = "class";
      Map<Object, Object> map0 = Util.filterMapByKeys(hashMap0, stringArray0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      String[] stringArray0 = new String[1];
      hashMap0.put((Object) null, (Object) null);
      stringArray0[0] = "[TmI{f[bOo7YX=";
      Map<Object, Object> map0 = Util.filterMapByKeys(hashMap0, stringArray0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("/O,");
      Util.delLastComma(stringBuffer0);
      assertEquals("/O", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("RV+");
      Util.delLastComma(stringBuffer0);
      assertEquals(3, stringBuffer0.length());
      assertEquals("RV+", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Util.delLastComma(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<?> class0 = Util.getArrayType((Object) null);
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      Class<?> class0 = Util.getArrayType(object0);
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.string2Date((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Util.setKeyWordClass("");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Util.setKeyWordClass((String) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, DateFormat> hashMap0 = new HashMap<String, DateFormat>();
      Util.clearDateFormats(hashMap0);
      //  // Unstable assertion: assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Util.clearDateFormats((Map<String, DateFormat>) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = Util.getKeyWordClass();
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.string2Date("mLADZ,YD<YEX3@&&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // mLADZ,YD<YEX3@&&
         //
         verifyException("net.sf.sojo.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Util.resetKeyWordClass();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateFormat dateFormat0 = Util.registerDateFormat("[2Z,1<!");
      assertNull(dateFormat0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.setDateFormats((Map<String, DateFormat>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Util.unregisterDateFormat((String) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Util.initJdkLogger();
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0);
      Util.registerDateFormat("", dateFormat0);
      String[] stringArray0 = new String[0];
      Util.isStringInArray(stringArray0, "_JnwW_0;");
      Util.registerDateFormat((String) null, dateFormat0);
      Map<Object, Object> map0 = Util.filterMapByKeys((Map<Object, Object>) null, stringArray0);
      assertNull(map0);
  }
}
