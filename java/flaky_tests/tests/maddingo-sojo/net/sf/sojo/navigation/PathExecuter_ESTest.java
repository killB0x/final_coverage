/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 01:25:18 GMT 2022
 */

package net.sf.sojo.navigation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.util.HashMap;
import java.util.Map;
import net.sf.sojo.navigation.PathAction;
import net.sf.sojo.navigation.PathExecuter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PathExecuter_ESTest extends PathExecuter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      PathExecuter.setSimpleProperty(hashMap0, "I{A97V8|0pU", hashMap0);
      PathExecuter.setNestedProperty((Object) hashMap0, "I{A97V8|0pU", (Object) hashMap0);
      assertEquals(2, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        PathExecuter.getKeyProperty(object0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The object must be a Map: java.lang.Object@135eefd0
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<AccessibleObject, Annotation> hashMap0 = new HashMap<AccessibleObject, Annotation>();
      // Undeclared exception!
      try { 
        PathExecuter.setIndexProperty((Object) hashMap0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The object must be a Collection: {}
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      Object object0 = new Object();
      HashMap hashMap1 = (HashMap)PathExecuter.getIndexProperty(hashMap0, (-2693));
      PathExecuter.setSimpleProperty(hashMap1, "6B2b", object0);
      assertEquals(1, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<AccessibleObject, Annotation> hashMap0 = new HashMap<AccessibleObject, Annotation>();
      // Undeclared exception!
      try { 
        PathExecuter.getNestedProperty((Object) hashMap0, "wc.I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PathAction pathAction0 = new PathAction((-1613948159));
      pathAction0.setType(1);
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        PathExecuter.setNestedProperty(object1, pathAction0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The object must be a Collection: java.lang.Object@2394b798
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      PathAction pathAction0 = new PathAction(2);
      pathAction0.setKey("oy;R(u");
      Object object0 = PathExecuter.getNestedProperty((Object) hashMap0, pathAction0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = PathExecuter.getNestedProperty((Object) null, (String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = PathExecuter.getIndexProperty((Object) null, (-1064));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        PathExecuter.setSimpleProperty(object0, "T", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionMethodHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        PathExecuter.setNestedProperty(object0, (PathAction) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        PathExecuter.setNestedProperty(object0, ".a,2<", object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.sf.sojo.navigation.PathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        PathExecuter.getSimpleProperty(object0, "[M2'kI`jK<z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.core.reflect.ReflectionMethodHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        PathExecuter.getNestedProperty(object0, ".j'MBc{-KMC?");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.sf.sojo.navigation.PathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      PathExecuter.setSimpleProperty(hashMap0, "I{A9ZC=V8|0pU", hashMap0);
      // Undeclared exception!
      try { 
        PathExecuter.getKeyProperty(hashMap0, hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathExecuter.getKeyProperty((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        PathExecuter.findKeyIfKeyIsNotStringType((Map<?, ?>) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<AccessibleObject, AccessibleObject> hashMap0 = new HashMap<AccessibleObject, AccessibleObject>();
      PathExecuter.setKeyProperty(hashMap0, hashMap0, hashMap0);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        PathExecuter.setIndexProperty(object0, 2095, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The object must be a Collection: java.lang.Object@2c3ae0fb
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathExecuter.setIndexProperty((Object) null, (-1955769712), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathExecuter.setSimpleProperty("/7", "/7", "/7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No such method find for path: /7 and class: java.lang.String
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PathExecuter.setSimpleProperty("", "", "");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        PathExecuter.setSimpleProperty((Object) null, (String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The property-path must be different from null.
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      Object object0 = PathExecuter.getSimpleProperty(hashMap0, "?Cos");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = PathExecuter.getSimpleProperty("class", "class");
      assertEquals("class java.lang.String", object0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathExecuter.getSimpleProperty("La", "La");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No such method find for path: La and class: java.lang.String
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathExecuter.getSimpleProperty((Object) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The property-path must be different from null.
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      PathAction pathAction0 = new PathAction(2);
      pathAction0.setProperty(" by a array, without a valid index.");
      // Undeclared exception!
      try { 
        PathExecuter.getNestedProperty((Object) hashMap0, pathAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PathAction pathAction0 = new PathAction(2);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        PathExecuter.setNestedProperty(object0, pathAction0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The object must be a Map: java.lang.Object@19738624
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      PathExecuter.setSimpleProperty(hashMap0, "0{A9ZwC=V8|0pU", hashMap0);
      Object object0 = PathExecuter.findKeyIfKeyIsNotStringType(hashMap0, hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      // Undeclared exception!
      try { 
        PathExecuter.setKeyProperty((Object) null, (Object) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The object must be a Map: null
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      Object object0 = PathExecuter.getKeyProperty(hashMap0, hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      // Undeclared exception!
      try { 
        PathExecuter.getKeyProperty((Object) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The object must be a Map: null
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      // Undeclared exception!
      try { 
        PathExecuter.getIndexProperty(hashMap0, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The object must be a Collection: {}
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathExecuter.getIndexProperty((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PathAction pathAction0 = new PathAction();
      pathAction0.setPath("");
      PathExecuter.setNestedProperty((Object) null, pathAction0, (Object) null);
      assertEquals(0, pathAction0.getType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      PathAction pathAction0 = new PathAction();
      // Undeclared exception!
      try { 
        PathExecuter.setNestedProperty((Object) hashMap0, pathAction0, (Object) pathAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The property-path must be different from null.
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object object0 = PathExecuter.getSimpleProperty("", "");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PathAction pathAction0 = new PathAction();
      // Undeclared exception!
      try { 
        PathExecuter.getNestedProperty((Object) pathAction0, pathAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The property-path must be different from null.
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      PathAction pathAction0 = new PathAction(1);
      pathAction0.setProperty(" by a aray, withoua valid index.");
      Object object0 = PathExecuter.getNestedProperty((Object) hashMap0, pathAction0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      PathAction pathAction0 = new PathAction((-4333));
      // Undeclared exception!
      try { 
        PathExecuter.getNestedProperty((Object) hashMap0, pathAction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalide action type: -4333
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathExecuter.getNestedProperty((Object) " isnot valid gtter-ethod (+Jancomlaint)", " isnot valid gtter-ethod (+Jancomlaint)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No such method find for path: isnot valid gtter-ethod  and class: java.lang.String
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      PathAction pathAction0 = new PathAction(1);
      HashMap hashMap1 = (HashMap)PathExecuter.getNestedProperty((Object) hashMap0, pathAction0);
      assertTrue(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      Class class0 = (Class)PathExecuter.getNestedProperty(object0, "class");
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      PathAction pathAction0 = new PathAction(3478);
      // Undeclared exception!
      try { 
        PathExecuter.setNestedProperty((Object) hashMap0, pathAction0, (Object) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalide action type: 3478
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      // Undeclared exception!
      try { 
        PathExecuter.setNestedProperty((Object) hashMap0, "class", (Object) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No such method find for path: class and class: java.lang.Class
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      // Undeclared exception!
      try { 
        PathExecuter.setNestedProperty((Object) hashMap0, ";r%%J4x.z;", (Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      // Undeclared exception!
      try { 
        PathExecuter.setNestedProperty((Object) hashMap0, "org.evosuite.shaded.org.mockito.codegen.Annotation$MockitoMock$511966759@0000000002", (Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Annotation, AccessibleObject> hashMap0 = new HashMap<Annotation, AccessibleObject>();
      PathExecuter.setSimpleProperty(hashMap0, "0{A9ZwC=V8|0pU", hashMap0);
      PathExecuter.setNestedProperty((Object) hashMap0, "0{A9ZwC=V8|0pU", (Object) null);
      assertEquals(2, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathExecuter.setIndexProperty((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.navigation.PathExecuter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PathExecuter pathExecuter0 = new PathExecuter();
  }
}
