/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:30:16 GMT 2022
 */

package net.sf.sojo.interchange.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.sf.sojo.interchange.json.JsonSerializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonSerializer_ESTest extends JsonSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JsonSerializer jsonSerializer0 = new JsonSerializer();
      jsonSerializer0.setWithNullValuesInMap(false);
      boolean boolean0 = jsonSerializer0.getWithNullValuesInMap();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JsonSerializer jsonSerializer0 = new JsonSerializer();
      Class<Integer> class0 = Integer.class;
      Object object0 = jsonSerializer0.deserialize((Object) null, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JsonSerializer jsonSerializer0 = new JsonSerializer();
      Object object0 = new Object();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jsonSerializer0.deserialize(object0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception in String: 'java.lang.Object@0000000030' --> Lexical error at line 1, column 1.  Encountered: \"j\" (106), after : \"\"
         //
         verifyException("net.sf.sojo.interchange.json.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JsonSerializer jsonSerializer0 = new JsonSerializer();
      boolean boolean0 = jsonSerializer0.getWithNullValuesInMap();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JsonSerializer jsonSerializer0 = new JsonSerializer();
      Object object0 = jsonSerializer0.serialize((Object) null);
      assertEquals("null", object0);
  }
}
