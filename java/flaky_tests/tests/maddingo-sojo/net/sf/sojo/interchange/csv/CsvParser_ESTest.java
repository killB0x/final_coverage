/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 01:34:57 GMT 2022
 */

package net.sf.sojo.interchange.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import net.sf.sojo.interchange.csv.CsvParser;
import net.sf.sojo.util.Table;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CsvParser_ESTest extends CsvParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\n', CsvParser.LF);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals('\r', CsvParser.CR);
      assertEquals(',', CsvParser.COMMA);
      assertEquals(' ', CsvParser.SPACE);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(',', csvParser0.getSeperator());
      assertNotNull(csvParser0);
      
      List<?> list0 = csvParser0.parseAndGetFirstLine("u\"a\" ");
      assertEquals('\n', CsvParser.LF);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals('\r', CsvParser.CR);
      assertEquals(',', CsvParser.COMMA);
      assertEquals(' ', CsvParser.SPACE);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(',', csvParser0.getSeperator());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains("u\"a\" "));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\r', CsvParser.CR);
      assertEquals(',', CsvParser.COMMA);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(',', csvParser0.getSeperator());
      assertNotNull(csvParser0);
      
      // Undeclared exception!
      try { 
        csvParser0.parse("k\"0L.!ZUX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing closed double quote.
         //
         verifyException("net.sf.sojo.interchange.csv.CsvParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\r', CsvParser.CR);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals('\n', CsvParser.LF);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(',', csvParser0.getSeperator());
      assertNotNull(csvParser0);
      
      csvParser0.setWithLineFeed(false);
      assertEquals('\r', CsvParser.CR);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', csvParser0.getSeperator());
      assertFalse(csvParser0.getWithLineFeed());
      
      boolean boolean0 = csvParser0.getWithLineFeed();
      assertEquals('\r', CsvParser.CR);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', csvParser0.getSeperator());
      assertFalse(csvParser0.getWithLineFeed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', CsvParser.COMMA);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertNotNull(csvParser0);
      
      csvParser0.setSeperator('0');
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', CsvParser.COMMA);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals('0', csvParser0.getSeperator());
      
      char char0 = csvParser0.getSeperator();
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', CsvParser.COMMA);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals('0', csvParser0.getSeperator());
      assertEquals('0', char0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(',', csvParser0.getSeperator());
      assertNotNull(csvParser0);
      
      csvParser0.setSeperator('y');
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals('y', csvParser0.getSeperator());
      
      char char0 = csvParser0.getSeperator();
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals('y', csvParser0.getSeperator());
      assertEquals('y', char0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals('\r', CsvParser.CR);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(',', csvParser0.getSeperator());
      assertNotNull(csvParser0);
      
      // Undeclared exception!
      csvParser0.parseAndGetFirstLine("\r`");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\r', CsvParser.CR);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(',', csvParser0.getSeperator());
      assertNotNull(csvParser0);
      
      // Undeclared exception!
      csvParser0.parse("\r`");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals('\r', CsvParser.CR);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\n', CsvParser.LF);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(',', csvParser0.getSeperator());
      assertNotNull(csvParser0);
      
      csvParser0.setWithLineFeed(false);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals('\r', CsvParser.CR);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', csvParser0.getSeperator());
      assertFalse(csvParser0.getWithLineFeed());
      
      // Undeclared exception!
      try { 
        csvParser0.parse("\r\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Row: 0 - expected number of columns: 1 but was 0 --> []
         //
         verifyException("net.sf.sojo.interchange.csv.CsvParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\n', CsvParser.LF);
      assertEquals('\r', CsvParser.CR);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(',', CsvParser.COMMA);
      assertEquals(' ', CsvParser.SPACE);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(',', csvParser0.getSeperator());
      assertNotNull(csvParser0);
      
      Table table0 = csvParser0.parse("\r");
      assertEquals('\n', CsvParser.LF);
      assertEquals('\r', CsvParser.CR);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(',', CsvParser.COMMA);
      assertEquals(' ', CsvParser.SPACE);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(',', csvParser0.getSeperator());
      assertEquals((-1), table0.getCurrentColumnNumber());
      assertEquals(1, table0.getNumberOfColumns());
      assertEquals(1, table0.getCurrentRowNumber());
      assertEquals(",", table0.getDelimiter());
      assertTrue(table0.getWithColumnNames());
      assertNotNull(table0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals(' ', CsvParser.SPACE);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals('\r', CsvParser.CR);
      assertEquals(',', CsvParser.COMMA);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(',', csvParser0.getSeperator());
      assertNotNull(csvParser0);
      
      // Undeclared exception!
      try { 
        csvParser0.parse("\r\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Row: 0 - expected number of columns: 1 but was 0 --> []
         //
         verifyException("net.sf.sojo.interchange.csv.CsvParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\r', CsvParser.CR);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertNotNull(csvParser0);
      
      Table table0 = csvParser0.parse(",");
      assertEquals('\r', CsvParser.CR);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(2, table0.getNumberOfColumns());
      assertEquals(1, table0.getCurrentRowNumber());
      assertEquals(",", table0.getDelimiter());
      assertEquals((-1), table0.getCurrentColumnNumber());
      assertTrue(table0.getWithColumnNames());
      assertNotNull(table0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\r', CsvParser.CR);
      assertEquals(',', CsvParser.COMMA);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertNotNull(csvParser0);
      
      Table table0 = csvParser0.parse("");
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\r', CsvParser.CR);
      assertEquals(',', CsvParser.COMMA);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(0, table0.getCurrentRowNumber());
      assertEquals((-1), table0.getNumberOfColumns());
      assertEquals(",", table0.getDelimiter());
      assertTrue(table0.getWithColumnNames());
      assertEquals((-1), table0.getCurrentColumnNumber());
      assertNotNull(table0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertNotNull(csvParser0);
      
      char char0 = csvParser0.getSeperator();
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(',', char0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', CsvParser.COMMA);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertNotNull(csvParser0);
      
      boolean boolean0 = csvParser0.getWithLineFeed();
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', CsvParser.COMMA);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\r', CsvParser.CR);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertNotNull(csvParser0);
      
      csvParser0.setWithLineFeed(false);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\r', CsvParser.CR);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertFalse(csvParser0.getWithLineFeed());
      assertEquals(',', csvParser0.getSeperator());
      
      // Undeclared exception!
      try { 
        csvParser0.parseAndGetFirstLine("\r\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Row: 0 - expected number of columns: 1 but was 0 --> []
         //
         verifyException("net.sf.sojo.interchange.csv.CsvParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(',', CsvParser.COMMA);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertNotNull(csvParser0);
      
      Table table0 = csvParser0.parse(",,stuhRAOT");
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(',', CsvParser.COMMA);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(1, table0.getCurrentRowNumber());
      assertEquals((-1), table0.getCurrentColumnNumber());
      assertTrue(table0.getWithColumnNames());
      assertEquals(",", table0.getDelimiter());
      assertEquals(3, table0.getNumberOfColumns());
      assertNotNull(table0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\r', CsvParser.CR);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertNotNull(csvParser0);
      
      csvParser0.setSeperator('\r');
      assertEquals('\r', CsvParser.CR);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\n', CsvParser.LF);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals('\r', csvParser0.getSeperator());
      
      List<?> list0 = csvParser0.parseAndGetFirstLine("\r\n");
      assertEquals('\r', CsvParser.CR);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\n', CsvParser.LF);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals('\r', csvParser0.getSeperator());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(list0.contains("\r\n"));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\r', CsvParser.CR);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertNotNull(csvParser0);
      
      Table table0 = csvParser0.parse((String) null);
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\r', CsvParser.CR);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(0, table0.getCurrentRowNumber());
      assertTrue(table0.getWithColumnNames());
      assertEquals((-1), table0.getCurrentColumnNumber());
      assertEquals(",", table0.getDelimiter());
      assertEquals((-1), table0.getNumberOfColumns());
      assertNotNull(table0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\r', CsvParser.CR);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertNotNull(csvParser0);
      
      List<?> list0 = csvParser0.parseAndGetFirstLine("");
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\r', CsvParser.CR);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(""));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\r', CsvParser.CR);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(',', csvParser0.getSeperator());
      assertNotNull(csvParser0);
      
      // Undeclared exception!
      try { 
        csvParser0.parseAndGetFirstLine("= #n`z0D\"V@p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid char: # on column 2 in csv string: = #n`z0D\"V@p
         //
         verifyException("net.sf.sojo.interchange.csv.CsvParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\r', CsvParser.CR);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertNotNull(csvParser0);
      
      Table table0 = csvParser0.parse("A\r\n");
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\r', CsvParser.CR);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals((-1), table0.getCurrentColumnNumber());
      assertTrue(table0.getWithColumnNames());
      assertEquals(1, table0.getNumberOfColumns());
      assertEquals(2, table0.getCurrentRowNumber());
      assertEquals(",", table0.getDelimiter());
      assertNotNull(table0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertNotNull(csvParser0);
      
      csvParser0.setWithLineFeed(false);
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', csvParser0.getSeperator());
      assertFalse(csvParser0.getWithLineFeed());
      
      Table table0 = csvParser0.parse("A\r\n");
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', CsvParser.COMMA);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', csvParser0.getSeperator());
      assertFalse(csvParser0.getWithLineFeed());
      assertTrue(table0.getWithColumnNames());
      assertEquals(",", table0.getDelimiter());
      assertEquals((-1), table0.getCurrentColumnNumber());
      assertEquals(2, table0.getCurrentRowNumber());
      assertEquals(1, table0.getNumberOfColumns());
      assertNotNull(table0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(',', CsvParser.COMMA);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertNotNull(csvParser0);
      
      csvParser0.setSeperator(':');
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(',', CsvParser.COMMA);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(':', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      
      List<?> list0 = csvParser0.parseAndGetFirstLine("YkzPV::{>,o:6m37");
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(',', CsvParser.COMMA);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals(':', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertFalse(list0.contains("YkzPV::{>,o:6m37"));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', CsvParser.COMMA);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertNotNull(csvParser0);
      
      List<?> list0 = csvParser0.parseAndGetFirstLine("T[B}r}g,");
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals('\r', CsvParser.CR);
      assertEquals('\n', CsvParser.LF);
      assertEquals(',', CsvParser.COMMA);
      assertEquals(',', csvParser0.getSeperator());
      assertTrue(csvParser0.getWithLineFeed());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(list0.contains("T[B}r}g,"));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      assertEquals('\n', CsvParser.LF);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals('\r', CsvParser.CR);
      assertEquals(',', CsvParser.COMMA);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(',', csvParser0.getSeperator());
      assertNotNull(csvParser0);
      
      Table table0 = csvParser0.parse("Un[8]#}m8,tl;X");
      assertEquals('\n', CsvParser.LF);
      assertEquals('\"', CsvParser.DQUOTE);
      assertEquals(' ', CsvParser.SPACE);
      assertEquals('\r', CsvParser.CR);
      assertEquals(',', CsvParser.COMMA);
      assertTrue(csvParser0.getWithLineFeed());
      assertEquals(',', csvParser0.getSeperator());
      assertEquals((-1), table0.getCurrentColumnNumber());
      assertTrue(table0.getWithColumnNames());
      assertEquals(2, table0.getNumberOfColumns());
      assertEquals(1, table0.getCurrentRowNumber());
      assertEquals(",", table0.getDelimiter());
      assertNotNull(table0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      List<?> list0 = csvParser0.parseAndGetFirstLine("j\"cL6*n\"u]uG)00,25+");
      assertEquals(',', csvParser0.getSeperator());
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      // Undeclared exception!
      try { 
        csvParser0.parseAndGetFirstLine("j\"cL6*n\"\"]uG)00,25+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing closed double quote.
         //
         verifyException("net.sf.sojo.interchange.csv.CsvParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CsvParser csvParser0 = new CsvParser();
      // Undeclared exception!
      try { 
        csvParser0.parse("A\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected LF and not - -
         //
         verifyException("net.sf.sojo.interchange.csv.CsvParser", e);
      }
  }
}
