/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:35:43 GMT 2022
 */

package net.sf.sojo.interchange;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.sf.sojo.common.ObjectUtil;
import net.sf.sojo.core.filter.ClassPropertyFilterHandler;
import net.sf.sojo.core.filter.ClassPropertyFilterHandlerImpl;
import net.sf.sojo.interchange.csv.CsvSerializer;
import net.sf.sojo.interchange.json.JsonSerializer;
import net.sf.sojo.interchange.object.ObjectSerializer;
import net.sf.sojo.interchange.xmlrpc.XmlRpcSerializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractSerializer_ESTest extends AbstractSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      String[] stringArray0 = new String[4];
      Object object0 = csvSerializer0.serialize((Object) null, stringArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      Object object0 = csvSerializer0.serialize((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRpcSerializer xmlRpcSerializer0 = new XmlRpcSerializer();
      CsvSerializer csvSerializer0 = new CsvSerializer();
      Object object0 = csvSerializer0.serialize((Object) xmlRpcSerializer0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectSerializer objectSerializer0 = new ObjectSerializer();
      objectSerializer0.setWithSimpleKeyMapper(true);
      boolean boolean0 = objectSerializer0.getWithSimpleKeyMapper();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      csvSerializer0.setWithSimpleKeyMapper(true);
      ObjectUtil objectUtil0 = csvSerializer0.getObjectUtil();
      assertTrue(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      ClassPropertyFilterHandlerImpl classPropertyFilterHandlerImpl0 = new ClassPropertyFilterHandlerImpl();
      csvSerializer0.setClassPropertyFilterHandler(classPropertyFilterHandlerImpl0);
      ClassPropertyFilterHandlerImpl classPropertyFilterHandlerImpl1 = (ClassPropertyFilterHandlerImpl)csvSerializer0.getClassPropertyFilterHandler();
      assertEquals(0, classPropertyFilterHandlerImpl1.getClassPropertyFilterSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      Class<Object> class0 = Object.class;
      Object object0 = csvSerializer0.deserialize((Object) null, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      Class<Object> class0 = Object.class;
      Object object0 = csvSerializer0.deserialize((Object) "", (Class<?>) class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonSerializer jsonSerializer0 = new JsonSerializer();
      Object object0 = jsonSerializer0.deserialize((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      Object object0 = csvSerializer0.deserialize((Object) "{\"java.lang.String@0000000133\":\"java.lang.String@0000000134\",\"java.lang.String@0000000135\":\"java.lang.String@0000000136\",\"java.lang.String@0000000137\":\"java.lang.String@0000000110\",\"java.lang.String@0000000138\":false,\"java.lang.String@0000000139\":\"java.lang.String@0000000121\",\"java.lang.String@0000000140\":true,\"java.lang.String@0000000141\":false}");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectSerializer objectSerializer0 = new ObjectSerializer();
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        objectSerializer0.serialize(object0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception by serialize object: java.lang.Object@31dcd33c - java.io.NotSerializableException: java.lang.Object
         //
         verifyException("net.sf.sojo.interchange.object.ObjectSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectSerializer objectSerializer0 = new ObjectSerializer();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        objectSerializer0.serialize(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception by serialize object: java.lang.Object@f80bc9a - java.io.NotSerializableException: java.lang.Object
         //
         verifyException("net.sf.sojo.interchange.object.ObjectSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectSerializer objectSerializer0 = new ObjectSerializer();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        objectSerializer0.deserialize((Object) null, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The deserialize object must be an byte array and not: null
         //
         verifyException("net.sf.sojo.interchange.object.ObjectSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlRpcSerializer xmlRpcSerializer0 = new XmlRpcSerializer();
      Class<Object> class0 = Object.class;
      CsvSerializer csvSerializer0 = new CsvSerializer();
      // Undeclared exception!
      try { 
        csvSerializer0.deserialize((Object) xmlRpcSerializer0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Only objects from type String can deserialize: net.sf.sojo.interchange.xmlrpc.XmlRpcSerializer
         //
         verifyException("net.sf.sojo.interchange.csv.CsvSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      boolean boolean0 = csvSerializer0.getWithSimpleKeyMapper();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      ObjectUtil objectUtil0 = csvSerializer0.getObjectUtil();
      assertFalse(objectUtil0.getWithSimpleKeyMapper());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      ClassPropertyFilterHandler classPropertyFilterHandler0 = csvSerializer0.getClassPropertyFilterHandler();
      assertNull(classPropertyFilterHandler0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      JsonSerializer jsonSerializer0 = new JsonSerializer();
      // Undeclared exception!
      try { 
        jsonSerializer0.deserialize((Object) csvSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception in String: 'net.sf.sojo.interchange.csv.CsvSerializer@0000000028' --> Lexical error at line 1, column 2.  Encountered: \"e\" (101), after : \"n\"
         //
         verifyException("net.sf.sojo.interchange.json.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlRpcSerializer xmlRpcSerializer0 = new XmlRpcSerializer();
      CsvSerializer csvSerializer0 = new CsvSerializer();
      String[] stringArray0 = new String[0];
      Object object0 = csvSerializer0.serialize((Object) xmlRpcSerializer0, stringArray0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectSerializer objectSerializer0 = new ObjectSerializer();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        objectSerializer0.deserialize(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The deserialize object must be an byte array and not: java.lang.Object
         //
         verifyException("net.sf.sojo.interchange.object.ObjectSerializer", e);
      }
  }
}
