/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:25:37 GMT 2022
 */

package net.sf.sojo.interchange.xmlrpc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.sf.sojo.interchange.xmlrpc.XmlRpcSerializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlRpcSerializer_ESTest extends XmlRpcSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRpcSerializer xmlRpcSerializer0 = new XmlRpcSerializer();
      xmlRpcSerializer0.serialize((Object) null);
      assertFalse(xmlRpcSerializer0.getConvertResult2XmlRpcExceptionAndThrow());
      assertFalse(xmlRpcSerializer0.getReturnValueAsList());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRpcSerializer xmlRpcSerializer0 = new XmlRpcSerializer(true);
      Class<Integer> class0 = Integer.class;
      xmlRpcSerializer0.deserialize((Object) null, class0);
      assertFalse(xmlRpcSerializer0.getConvertResult2XmlRpcExceptionAndThrow());
      assertTrue(xmlRpcSerializer0.getReturnValueAsList());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRpcSerializer xmlRpcSerializer0 = new XmlRpcSerializer();
      xmlRpcSerializer0.xmlRpcWalker = null;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        xmlRpcSerializer0.serializeXmlRpcResponse(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.interchange.xmlrpc.XmlRpcSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlRpcSerializer xmlRpcSerializer0 = new XmlRpcSerializer();
      xmlRpcSerializer0.xmlRpcWalker = null;
      // Undeclared exception!
      try { 
        xmlRpcSerializer0.serializeXmlRpcRequest("</methodResponse>", "</methodResponse>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.interchange.xmlrpc.XmlRpcSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRpcSerializer xmlRpcSerializer0 = new XmlRpcSerializer();
      xmlRpcSerializer0.xmlRpcWalker = null;
      // Undeclared exception!
      try { 
        xmlRpcSerializer0.serialize((Object) "W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.interchange.xmlrpc.XmlRpcSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRpcSerializer xmlRpcSerializer0 = new XmlRpcSerializer();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        xmlRpcSerializer0.deserialize((Object) class0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Content is not allowed in prolog.
         //
         verifyException("net.sf.sojo.interchange.xmlrpc.XmlRpcParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlRpcSerializer xmlRpcSerializer0 = new XmlRpcSerializer();
      boolean boolean0 = xmlRpcSerializer0.getReturnValueAsList();
      assertFalse(xmlRpcSerializer0.getConvertResult2XmlRpcExceptionAndThrow());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRpcSerializer xmlRpcSerializer0 = new XmlRpcSerializer();
      assertFalse(xmlRpcSerializer0.getReturnValueAsList());
      
      xmlRpcSerializer0.setReturnValueAsList(true);
      boolean boolean0 = xmlRpcSerializer0.getReturnValueAsList();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRpcSerializer xmlRpcSerializer0 = new XmlRpcSerializer(true);
      boolean boolean0 = xmlRpcSerializer0.getConvertResult2XmlRpcExceptionAndThrow();
      assertFalse(boolean0);
      assertTrue(xmlRpcSerializer0.getReturnValueAsList());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlRpcSerializer xmlRpcSerializer0 = new XmlRpcSerializer();
      xmlRpcSerializer0.serializeXmlRpcRequest(",0yDCff}p3+.4D", ",0yDCff}p3+.4D");
      assertFalse(xmlRpcSerializer0.getConvertResult2XmlRpcExceptionAndThrow());
      assertFalse(xmlRpcSerializer0.getReturnValueAsList());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRpcSerializer xmlRpcSerializer0 = new XmlRpcSerializer();
      // Undeclared exception!
      try { 
        xmlRpcSerializer0.serializeXmlRpcRequest("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing method-name: null
         //
         verifyException("net.sf.sojo.interchange.xmlrpc.XmlRpcSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRpcSerializer xmlRpcSerializer0 = new XmlRpcSerializer();
      // Undeclared exception!
      try { 
        xmlRpcSerializer0.serializeXmlRpcRequest((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing method-name: null
         //
         verifyException("net.sf.sojo.interchange.xmlrpc.XmlRpcSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlRpcSerializer xmlRpcSerializer0 = new XmlRpcSerializer();
      Object object0 = new Object();
      String string0 = xmlRpcSerializer0.serializeXmlRpcResponse(object0);
      assertEquals("<?xml version='1.0' encoding='UTF-8'?><methodResponse><params><param><value></value></param></params></methodResponse>", string0);
      assertFalse(xmlRpcSerializer0.getReturnValueAsList());
      assertFalse(xmlRpcSerializer0.getConvertResult2XmlRpcExceptionAndThrow());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlRpcSerializer xmlRpcSerializer0 = new XmlRpcSerializer(true);
      xmlRpcSerializer0.getMethodName();
      assertFalse(xmlRpcSerializer0.getConvertResult2XmlRpcExceptionAndThrow());
      assertTrue(xmlRpcSerializer0.getReturnValueAsList());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlRpcSerializer xmlRpcSerializer0 = new XmlRpcSerializer(true);
      assertFalse(xmlRpcSerializer0.getConvertResult2XmlRpcExceptionAndThrow());
      
      xmlRpcSerializer0.setConvertResult2XmlRpcExceptionAndThrow(true);
      boolean boolean0 = xmlRpcSerializer0.getConvertResult2XmlRpcExceptionAndThrow();
      assertTrue(boolean0);
  }
}
