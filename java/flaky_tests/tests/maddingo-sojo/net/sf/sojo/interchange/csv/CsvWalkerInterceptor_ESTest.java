/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 01:53:49 GMT 2022
 */

package net.sf.sojo.interchange.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.sf.sojo.interchange.csv.CsvWalkerInterceptor;
import net.sf.sojo.util.Table;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CsvWalkerInterceptor_ESTest extends CsvWalkerInterceptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        csvWalkerInterceptor0.visitIterateableElement(object0, 1755, " but was ", 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.util.Map (java.lang.Object and java.util.Map are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.interchange.csv.CsvWalkerInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      Object object0 = new Object();
      csvWalkerInterceptor0.visitIterateableElement(object0, 0, "", 1046);
      assertFalse(csvWalkerInterceptor0.gettWrapSimpleValueAsList());
      assertTrue(csvWalkerInterceptor0.getWithColumnNames());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = csvWalkerInterceptor0.visitElement(object1, (-787), object0, 0, "[h]eA0sr?Of6}Ov%71+", 44);
      assertTrue(csvWalkerInterceptor0.getWithColumnNames());
      assertFalse(boolean0);
      assertFalse(csvWalkerInterceptor0.gettWrapSimpleValueAsList());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      Object object0 = new Object();
      boolean boolean0 = csvWalkerInterceptor0.visitElement(object0, 323, object0, 323, "\"\"", 323);
      assertFalse(csvWalkerInterceptor0.gettWrapSimpleValueAsList());
      assertTrue(csvWalkerInterceptor0.getWithColumnNames());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      assertTrue(csvWalkerInterceptor0.getWithColumnNames());
      
      csvWalkerInterceptor0.setWithColumnNames(false);
      boolean boolean0 = csvWalkerInterceptor0.getWithColumnNames();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      assertTrue(csvWalkerInterceptor0.getWithColumnNames());
      
      Object object0 = new Object();
      csvWalkerInterceptor0.setWithColumnNames(false);
      csvWalkerInterceptor0.startWalk(object0);
      csvWalkerInterceptor0.getTable();
      assertFalse(csvWalkerInterceptor0.getWithColumnNames());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      Object object0 = new Object();
      csvWalkerInterceptor0.startWalk(object0);
      Table table0 = csvWalkerInterceptor0.getTable();
      assertTrue(table0.getWithColumnNames());
      assertFalse(csvWalkerInterceptor0.gettWrapSimpleValueAsList());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      boolean boolean0 = csvWalkerInterceptor0.visitElement((Object) null, 0, (Object) null, 0, "><VlOzeC?h)M>T0KmT", 0);
      assertFalse(boolean0);
      
      Table table0 = csvWalkerInterceptor0.getTable();
      assertEquals(1, table0.getNumberOfColumns());
      assertFalse(csvWalkerInterceptor0.gettWrapSimpleValueAsList());
      assertTrue(csvWalkerInterceptor0.getWithColumnNames());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      csvWalkerInterceptor0.setNullValue((String) null);
      csvWalkerInterceptor0.getNullValue();
      assertTrue(csvWalkerInterceptor0.getWithColumnNames());
      assertFalse(csvWalkerInterceptor0.gettWrapSimpleValueAsList());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      csvWalkerInterceptor0.setNullValue("n");
      csvWalkerInterceptor0.getNullValue();
      assertFalse(csvWalkerInterceptor0.gettWrapSimpleValueAsList());
      assertTrue(csvWalkerInterceptor0.getWithColumnNames());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      boolean boolean0 = csvWalkerInterceptor0.visitElement((Object) null, 0, (Object) null, 0, "><VlOzeC?h)M>T0KmT", 0);
      assertFalse(boolean0);
      
      String string0 = csvWalkerInterceptor0.getCsvString();
      assertEquals("><VlOzeC?h)M>T0KmT\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      // Undeclared exception!
      try { 
        csvWalkerInterceptor0.visitIterateableElement(csvWalkerInterceptor0, 1, (String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.interchange.csv.CsvWalkerInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      // Undeclared exception!
      try { 
        csvWalkerInterceptor0.visitElement((Object) null, 1, (Object) null, 1, "fP7aPe;exT!!.N6", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      boolean boolean0 = csvWalkerInterceptor0.gettWrapSimpleValueAsList();
      assertFalse(boolean0);
      assertTrue(csvWalkerInterceptor0.getWithColumnNames());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      boolean boolean0 = csvWalkerInterceptor0.getWithColumnNames();
      assertTrue(boolean0);
      assertFalse(csvWalkerInterceptor0.gettWrapSimpleValueAsList());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      csvWalkerInterceptor0.getCsvString();
      assertFalse(csvWalkerInterceptor0.gettWrapSimpleValueAsList());
      assertTrue(csvWalkerInterceptor0.getWithColumnNames());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      // Undeclared exception!
      try { 
        csvWalkerInterceptor0.visitIterateableElement("gDcK", 1, "gDcK", 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.String cannot be cast to class java.util.Map (java.lang.String and java.util.Map are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.interchange.csv.CsvWalkerInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        csvWalkerInterceptor0.visitIterateableElement(object0, 7, "Dc/dY;Y2gXY}]1~", 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class [Ljava.lang.Object; (java.lang.Object and [Ljava.lang.Object; are in module java.base of loader 'bootstrap')
         //
         verifyException("net.sf.sojo.interchange.csv.CsvWalkerInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      Object object0 = new Object();
      csvWalkerInterceptor0.visitIterateableElement(object0, 1, "", 1);
      assertTrue(csvWalkerInterceptor0.getWithColumnNames());
      assertFalse(csvWalkerInterceptor0.gettWrapSimpleValueAsList());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      csvWalkerInterceptor0.visitIterateableElement(csvWalkerInterceptor0, (-1095), (String) null, (-1095));
      assertFalse(csvWalkerInterceptor0.gettWrapSimpleValueAsList());
      assertTrue(csvWalkerInterceptor0.getWithColumnNames());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      Object object0 = new Object();
      boolean boolean0 = csvWalkerInterceptor0.visitElement(object0, 1436, object0, (-511), "", 1);
      assertFalse(boolean0);
      assertFalse(csvWalkerInterceptor0.gettWrapSimpleValueAsList());
      assertTrue(csvWalkerInterceptor0.getWithColumnNames());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      assertFalse(csvWalkerInterceptor0.gettWrapSimpleValueAsList());
      
      Object object0 = new Object();
      csvWalkerInterceptor0.setWrapSimpleValueAsList(true);
      boolean boolean0 = csvWalkerInterceptor0.visitElement((Object) null, 1, object0, 1, "L-svTJ:%8IR)\"O #`6%", 1);
      assertTrue(csvWalkerInterceptor0.gettWrapSimpleValueAsList());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      Object object0 = new Object();
      csvWalkerInterceptor0.visitElement(object0, 1, object0, 1, "", 1);
      boolean boolean0 = csvWalkerInterceptor0.visitElement(object0, 1, object0, 1, "", 9);
      assertFalse(boolean0);
      
      Table table0 = csvWalkerInterceptor0.getTable();
      assertFalse(csvWalkerInterceptor0.gettWrapSimpleValueAsList());
      assertTrue(csvWalkerInterceptor0.getWithColumnNames());
      assertEquals(2, table0.getNumberOfColumns());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      assertTrue(csvWalkerInterceptor0.getWithColumnNames());
      
      Object object0 = new Object();
      csvWalkerInterceptor0.setWithColumnNames(false);
      boolean boolean0 = csvWalkerInterceptor0.visitElement(object0, 1, object0, 1, "x", 1);
      assertFalse(csvWalkerInterceptor0.getWithColumnNames());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      assertTrue(csvWalkerInterceptor0.getWithColumnNames());
      
      csvWalkerInterceptor0.setWithColumnNames(false);
      csvWalkerInterceptor0.getCsvString();
      assertFalse(csvWalkerInterceptor0.getWithColumnNames());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      csvWalkerInterceptor0.getNullValue();
      assertTrue(csvWalkerInterceptor0.getWithColumnNames());
      assertFalse(csvWalkerInterceptor0.gettWrapSimpleValueAsList());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      Object object0 = new Object();
      csvWalkerInterceptor0.startWalk(object0);
      boolean boolean0 = csvWalkerInterceptor0.visitElement(object0, 1, object0, 1, "", 1);
      assertFalse(boolean0);
      assertTrue(csvWalkerInterceptor0.getWithColumnNames());
      assertFalse(csvWalkerInterceptor0.gettWrapSimpleValueAsList());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      assertFalse(csvWalkerInterceptor0.gettWrapSimpleValueAsList());
      
      csvWalkerInterceptor0.setWrapSimpleValueAsList(true);
      boolean boolean0 = csvWalkerInterceptor0.gettWrapSimpleValueAsList();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CsvWalkerInterceptor csvWalkerInterceptor0 = new CsvWalkerInterceptor();
      csvWalkerInterceptor0.endWalk();
      assertTrue(csvWalkerInterceptor0.getWithColumnNames());
      assertFalse(csvWalkerInterceptor0.gettWrapSimpleValueAsList());
  }
}
