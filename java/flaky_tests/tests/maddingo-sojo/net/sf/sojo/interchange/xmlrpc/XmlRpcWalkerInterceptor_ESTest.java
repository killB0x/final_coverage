/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 01:27:40 GMT 2022
 */

package net.sf.sojo.interchange.xmlrpc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.chrono.HijrahDate;
import net.sf.sojo.interchange.xmlrpc.XmlRpcWalkerInterceptor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlRpcWalkerInterceptor_ESTest extends XmlRpcWalkerInterceptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      xmlRpcWalkerInterceptor0.visitElement("[=V3Dqr9pL;]v@0Ywr.", (-2093064), (Object) null, 1431, "hhW", 2);
      Object object0 = new Object();
      xmlRpcWalkerInterceptor0.visitIterateableElement(object0, 7, "hhW", 2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      xmlRpcWalkerInterceptor0.visitIterateableElement("", 0, "", 0);
      assertEquals("", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      xmlRpcWalkerInterceptor0.visitIterateableElement("[=VIBDqr9pL;]v@0,kr.", 1, "[=VIBDqr9pL;]v@0,kr.", 1);
      assertEquals("", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      boolean boolean0 = xmlRpcWalkerInterceptor0.visitElement((Object) null, 0, hijrahDate0, 0, "n?T`n'.nj85FK#@Fd", 7);
      assertEquals("<value></value>", xmlRpcWalkerInterceptor0.getXmlRpcString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      MockDate mockDate0 = new MockDate(0, 1, 0);
      MockDate mockDate1 = new MockDate(7, 0, 1, (-1), 0);
      // Undeclared exception!
      try { 
        xmlRpcWalkerInterceptor0.visitElement(mockDate0, 0, mockDate1, 0, "=VIDqr9pL;]v@0,kr.", 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Key must be from type String and not: class org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("net.sf.sojo.interchange.xmlrpc.XmlRpcWalkerInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      xmlRpcWalkerInterceptor0.visitIterateableElement(xmlRpcWalkerInterceptor0, 9, "net.sf.sojo.interchange.SerializerException", 1);
      assertEquals("<value><struct>", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      Object object0 = new Object();
      xmlRpcWalkerInterceptor0.visitElement("[V}Br9QL;]v@0,ir.", 9, object0, 9, "[V}Br9QL;]v@0,ir.", 9);
      String string0 = xmlRpcWalkerInterceptor0.getXmlRpcString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      // Undeclared exception!
      try { 
        xmlRpcWalkerInterceptor0.visitElement("", 0, "", 0, (String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.interchange.xmlrpc.XmlRpcWalkerInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      xmlRpcWalkerInterceptor0.mapping2XmlRpcDataType("[<i4>");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      xmlRpcWalkerInterceptor0.mapping2XmlRpcDataType((Object) null);
      assertEquals("<value><ex:nil>null</ex:nil></value>", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      xmlRpcWalkerInterceptor0.mapping2XmlRpcDataType(mockGregorianCalendar0);
      assertEquals("<value><ex:dateTime>20140214T20:21:21.320</ex:dateTime></value>", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      Long long0 = new Long((-995L));
      xmlRpcWalkerInterceptor0.mapping2XmlRpcDataType(long0);
      assertEquals("<value><ex:i8>-995</ex:i8></value>", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      MockDate mockDate0 = new MockDate();
      xmlRpcWalkerInterceptor0.mapping2XmlRpcDataType(mockDate0);
      assertEquals("<value><dateTime.iso8601>20140214T20:21:21</dateTime.iso8601></value>", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      Object object0 = new Object();
      xmlRpcWalkerInterceptor0.mapping2XmlRpcDataType(object0);
      assertEquals("<value></value>", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      MockDate mockDate0 = new MockDate(2637, 2637, 2637, 2637, 2637);
      xmlRpcWalkerInterceptor0.visitElement("3^U8O b-", 2637, mockDate0, 2637, "3^U8O b-", 2637);
      xmlRpcWalkerInterceptor0.visitIterateableElement("3^U8O b-", 9, "3^U8O b-", 2);
      assertEquals("<member><name>3^U8O b-</name></struct></value>", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      Object object0 = new Object();
      xmlRpcWalkerInterceptor0.visitElement("[V}Br9QL;]v@0,ir.", 9, object0, 9, "[V}Br9QL;]v@0,ir.", 9);
      xmlRpcWalkerInterceptor0.visitIterateableElement("[V}Br9QL;]v@0,ir.", 9, "[V}Br9QL;]v@0,ir.", 2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      xmlRpcWalkerInterceptor0.visitIterateableElement("[V}Br9QL;]v@0,ir.", 9, "[V}Br9QL;]v@0,ir.", 2);
      assertEquals("</struct></value></param>", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      xmlRpcWalkerInterceptor0.visitElement("I6x'|yXO[B\"[*8dwA", 7, "I6x'|yXO[B\"[*8dwA", 7, "I6x'|yXO[B\"[*8dwA", (-404));
      xmlRpcWalkerInterceptor0.visitIterateableElement(xmlRpcWalkerInterceptor0, 7, "I6x'|yXO[B\"[*8dwA", 2);
      assertEquals("<member><name>I6x'|yXO[B\"[*8dwA</name></data></array></value></member>", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      xmlRpcWalkerInterceptor0.visitElement("]`,#*r}xn", 7, "]`,#*r}xn", 2, "]`,#*r}xn", 7);
      xmlRpcWalkerInterceptor0.visitIterateableElement(xmlRpcWalkerInterceptor0, 7, "]`,#*r}xn", 2);
      assertEquals("<member><name>]`,#*r}xn</name></data></array></value>", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      xmlRpcWalkerInterceptor0.visitIterateableElement(xmlRpcWalkerInterceptor0, 7, "]`,#*r}xn", 2);
      assertEquals("</data></array></value>", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      Object object0 = new Object();
      xmlRpcWalkerInterceptor0.visitIterateableElement(object0, 0, "", 7);
      assertEquals("", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      // Undeclared exception!
      try { 
        xmlRpcWalkerInterceptor0.visitIterateableElement(xmlRpcWalkerInterceptor0, 9, (String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.interchange.xmlrpc.XmlRpcWalkerInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      xmlRpcWalkerInterceptor0.visitIterateableElement("l", 7, "l", 1);
      assertEquals("<value><array><data>", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      Object object0 = new Object();
      xmlRpcWalkerInterceptor0.visitIterateableElement(object0, 262, "", 1);
      assertEquals("", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      xmlRpcWalkerInterceptor0.visitIterateableElement(xmlRpcWalkerInterceptor0, 2, "|f", 2);
      assertEquals("", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      boolean boolean0 = xmlRpcWalkerInterceptor0.visitElement((Object) null, (-1168), (Object) null, (-1168), "Xe|7%B_A_h", (-1));
      assertFalse(boolean0);
      assertEquals("", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      boolean boolean0 = xmlRpcWalkerInterceptor0.visitElement("[?jQ?Ur).,8-fDv", 0, "[?jQ?Ur).,8-fDv", 0, "[?jQ?Ur).,8-fDv", 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      boolean boolean0 = xmlRpcWalkerInterceptor0.visitElement("[", 0, "[", 0, "[", 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      boolean boolean0 = xmlRpcWalkerInterceptor0.visitElement("", 1, "", 1, "", 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      Object object0 = new Object();
      xmlRpcWalkerInterceptor0.startWalk(object0);
      assertEquals("<params>", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      xmlRpcWalkerInterceptor0.startWalk((Object) null);
      assertEquals("<params>", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      String string0 = xmlRpcWalkerInterceptor0.getXmlRpcString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmlRpcWalkerInterceptor xmlRpcWalkerInterceptor0 = new XmlRpcWalkerInterceptor();
      xmlRpcWalkerInterceptor0.endWalk();
      assertEquals("</params>", xmlRpcWalkerInterceptor0.getXmlRpcString());
  }
}
