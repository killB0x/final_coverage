/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 01:50:44 GMT 2022
 */

package net.sf.sojo.interchange.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.sf.sojo.common.ObjectUtil;
import net.sf.sojo.core.filter.ClassPropertyFilterHandlerImpl;
import net.sf.sojo.interchange.csv.CsvSerializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CsvSerializer_ESTest extends CsvSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      csvSerializer0.serialize((Object) null);
      assertFalse(csvSerializer0.getIgnoreNullValues());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      csvSerializer0.setNullValue((String) null);
      csvSerializer0.getNullValue();
      assertFalse(csvSerializer0.getIgnoreNullValues());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      csvSerializer0.setNullValue("90tPf");
      csvSerializer0.getNullValue();
      assertFalse(csvSerializer0.getIgnoreNullValues());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      assertFalse(csvSerializer0.getIgnoreNullValues());
      
      csvSerializer0.setIgnoreNullValues(true);
      boolean boolean0 = csvSerializer0.getIgnoreNullValues();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      csvSerializer0.setDelimiter((String) null);
      csvSerializer0.getDelimiter();
      assertFalse(csvSerializer0.getIgnoreNullValues());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      Class<Object> class0 = Object.class;
      csvSerializer0.deserialize((Object) null, class0);
      assertFalse(csvSerializer0.getIgnoreNullValues());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      ClassPropertyFilterHandlerImpl classPropertyFilterHandlerImpl0 = new ClassPropertyFilterHandlerImpl();
      csvSerializer0.setClassPropertyFilterHandler(classPropertyFilterHandlerImpl0);
      // Undeclared exception!
      try { 
        csvSerializer0.serialize((Object) csvSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The properties are to deep nested for CSV (property-path: [0].classPropertyFilterHandler.)
         //
         verifyException("net.sf.sojo.interchange.csv.CsvWalkerInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      Object object0 = csvSerializer0.deserialize((Object) ",");
      assertFalse(csvSerializer0.getIgnoreNullValues());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      Class<Object> class0 = Object.class;
      ObjectUtil objectUtil0 = csvSerializer0.getObjectUtil();
      // Undeclared exception!
      try { 
        csvSerializer0.deserialize((Object) objectUtil0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Only objects from type String can deserialize: net.sf.sojo.common.ObjectUtil
         //
         verifyException("net.sf.sojo.interchange.csv.CsvSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      Class<Object> class0 = Object.class;
      Object object0 = csvSerializer0.deserialize((Object) "java.lang.Object@0000000069", (Class<?>) class0);
      assertNotNull(object0);
      assertFalse(csvSerializer0.getIgnoreNullValues());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      Object object0 = new Object();
      Object object1 = csvSerializer0.serialize(object0);
      assertNotNull(object1);
      assertFalse(csvSerializer0.getIgnoreNullValues());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      csvSerializer0.setWithPropertyNamesInFirstLine(false);
      boolean boolean0 = csvSerializer0.getWithPropertyNamesInFirstLine();
      assertFalse(csvSerializer0.getIgnoreNullValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      csvSerializer0.getWithPropertyNamesInFirstLine();
      assertFalse(csvSerializer0.getIgnoreNullValues());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      csvSerializer0.getNullValue();
      assertFalse(csvSerializer0.getIgnoreNullValues());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      csvSerializer0.getDelimiter();
      assertFalse(csvSerializer0.getIgnoreNullValues());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      boolean boolean0 = csvSerializer0.getIgnoreNullValues();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CsvSerializer csvSerializer0 = new CsvSerializer();
      csvSerializer0.setDelimiter("");
      csvSerializer0.getDelimiter();
      assertFalse(csvSerializer0.getIgnoreNullValues());
  }
}
