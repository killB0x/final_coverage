/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 01:30:03 GMT 2022
 */

package net.sf.sojo.interchange.xmlrpc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EmptyStackException;
import net.sf.sojo.interchange.xmlrpc.XmlRpcContentHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xml.sax.Attributes;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.helpers.AttributesImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlRpcContentHandler_ESTest extends XmlRpcContentHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      char[] charArray0 = new char[9];
      xmlRpcContentHandler0.characters(charArray0, 1, 1);
      // Undeclared exception!
      try { 
        xmlRpcContentHandler0.endElement("ex:dateTime", "ex:dateTime", "ex:dateTime");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value: \u0000 is not a valid date value.
         //
         verifyException("net.sf.sojo.interchange.xmlrpc.XmlRpcContentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      char[] charArray0 = new char[7];
      charArray0[1] = '5';
      xmlRpcContentHandler0.characters(charArray0, 1, 1);
      xmlRpcContentHandler0.endElement("ex:bigdecimal", "ex:bigdecimal", "ex:bigdecimal");
      assertFalse(xmlRpcContentHandler0.isFault());
      assertTrue(xmlRpcContentHandler0.getReturnValueAsList());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      xmlRpcContentHandler0.startElement("struct", "+n_<Q3&@4BzbA'1@%u", "struct", attributes2Impl0);
      xmlRpcContentHandler0.endElement("struct", "struct", "struct");
      assertTrue(xmlRpcContentHandler0.getReturnValueAsList());
      assertFalse(xmlRpcContentHandler0.isFault());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      char[] charArray0 = new char[5];
      xmlRpcContentHandler0.characters(charArray0, 1, 1);
      // Undeclared exception!
      try { 
        xmlRpcContentHandler0.endElement("dateTime.iso8601", "dateTime.iso8601", "dateTime.iso8601");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value: \u0000 is not a valid date value.
         //
         verifyException("net.sf.sojo.interchange.xmlrpc.XmlRpcContentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      char[] charArray0 = new char[2];
      xmlRpcContentHandler0.characters(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        xmlRpcContentHandler0.endElement("double", "double", "double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value:  is not a valid double value.
         //
         verifyException("net.sf.sojo.interchange.xmlrpc.XmlRpcContentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      assertFalse(xmlRpcContentHandler0.isFault());
      
      AttributesImpl attributesImpl0 = new AttributesImpl();
      xmlRpcContentHandler0.startElement("Co_{P8X1Nvi{wg5?i2", "Co_{P8X1Nvi{wg5?i2", "fault", attributesImpl0);
      boolean boolean0 = xmlRpcContentHandler0.isFault();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      assertTrue(xmlRpcContentHandler0.getReturnValueAsList());
      
      xmlRpcContentHandler0.setReturnValueAsList(false);
      boolean boolean0 = xmlRpcContentHandler0.getReturnValueAsList();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      // Undeclared exception!
      try { 
        xmlRpcContentHandler0.characters((char[]) null, 1174, 1174);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      boolean boolean0 = xmlRpcContentHandler0.getReturnValueAsList();
      assertTrue(boolean0);
      assertFalse(xmlRpcContentHandler0.isFault());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      xmlRpcContentHandler0.endElement("name", "name", "name");
      assertTrue(xmlRpcContentHandler0.getReturnValueAsList());
      
      xmlRpcContentHandler0.setReturnValueAsList(false);
      xmlRpcContentHandler0.getResults();
      assertFalse(xmlRpcContentHandler0.getReturnValueAsList());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      assertTrue(xmlRpcContentHandler0.getReturnValueAsList());
      
      xmlRpcContentHandler0.setReturnValueAsList(false);
      xmlRpcContentHandler0.getResults();
      assertFalse(xmlRpcContentHandler0.getReturnValueAsList());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      char[] charArray0 = new char[9];
      xmlRpcContentHandler0.characters(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        xmlRpcContentHandler0.characters(charArray0, 0, (-1852863214));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      // Undeclared exception!
      try { 
        xmlRpcContentHandler0.endElement("net.sf.sojo.interchange.SerializerException", "6%'%B&7~N7", "T<?KKI~\"5(S_{E6l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The Tag: T<?KKI~\"5(S_{E6l is not supported
         //
         verifyException("net.sf.sojo.interchange.xmlrpc.XmlRpcContentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      // Undeclared exception!
      try { 
        xmlRpcContentHandler0.endElement("member", "member", "member");
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      xmlRpcContentHandler0.endElement("net.sf.sojo.interchange.xmlrpc.XmlRpcException", "params", "methodName");
      assertTrue(xmlRpcContentHandler0.getReturnValueAsList());
      assertFalse(xmlRpcContentHandler0.isFault());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      xmlRpcContentHandler0.endElement("ex:nil", "ex:nil", "ex:nil");
      assertFalse(xmlRpcContentHandler0.isFault());
      assertTrue(xmlRpcContentHandler0.getReturnValueAsList());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      // Undeclared exception!
      try { 
        xmlRpcContentHandler0.endElement("ex:dateTime", "ex:dateTime", "ex:dateTime");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      // Undeclared exception!
      try { 
        xmlRpcContentHandler0.endElement("l**CTf|fn]AKUD3 ^", "ex:float", "ex:biginteger");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      // Undeclared exception!
      try { 
        xmlRpcContentHandler0.endElement("` ^j", "MESSAGE: ", "ex:float");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      // Undeclared exception!
      try { 
        xmlRpcContentHandler0.endElement("ex:i8", "ex:i8", "ex:i8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      // Undeclared exception!
      try { 
        xmlRpcContentHandler0.endElement("string", "ex:i2", "ex:i2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      // Undeclared exception!
      try { 
        xmlRpcContentHandler0.endElement("qRe|qM0e", "", "ex:i1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      // Undeclared exception!
      try { 
        xmlRpcContentHandler0.endElement("6WI#Yk{RT<<;b68p", ":Z3f`lo", "array");
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      // Undeclared exception!
      try { 
        xmlRpcContentHandler0.endElement("boolean", "boolean", "boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value: null is not a valid boolean value.
         //
         verifyException("net.sf.sojo.interchange.xmlrpc.XmlRpcContentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      // Undeclared exception!
      try { 
        xmlRpcContentHandler0.endElement("[zEUS&rZuu/d{o[oD(0", "C8Xf,-_e", "int");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      // Undeclared exception!
      try { 
        xmlRpcContentHandler0.endElement("i4", "i4", "i4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      char[] charArray0 = new char[6];
      xmlRpcContentHandler0.characters(charArray0, 1, 1);
      xmlRpcContentHandler0.endElement("value", "value", "value");
      assertTrue(xmlRpcContentHandler0.getReturnValueAsList());
      assertFalse(xmlRpcContentHandler0.isFault());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      xmlRpcContentHandler0.endElement("p47dle0aD@", "p47dle0aD@", "value");
      assertTrue(xmlRpcContentHandler0.getReturnValueAsList());
      assertFalse(xmlRpcContentHandler0.isFault());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      // Undeclared exception!
      try { 
        xmlRpcContentHandler0.endElement("AWQaX+KG\":k_i}:", "string", "string");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.interchange.xmlrpc.XmlRpcContentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      xmlRpcContentHandler0.startElement("strin", "6WI#Yk{RT<<;b68p", "array", attributes2Impl0);
      xmlRpcContentHandler0.endElement("6WI#Yk{RT<<;b68p", ":Z3f`lo", "array");
      assertTrue(xmlRpcContentHandler0.getReturnValueAsList());
      assertFalse(xmlRpcContentHandler0.isFault());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      xmlRpcContentHandler0.startElement("ex:nil", "ex:nil", "params", (Attributes) null);
      assertTrue(xmlRpcContentHandler0.getReturnValueAsList());
      assertFalse(xmlRpcContentHandler0.isFault());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      xmlRpcContentHandler0.startElement("3d@dJ:O7]J", "net.sf.sojo.core.NonCriticalExceptionHandler", "Q\"Z~0l&e;Xx#bUE", attributesImpl0);
      assertTrue(xmlRpcContentHandler0.getReturnValueAsList());
      assertFalse(xmlRpcContentHandler0.isFault());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      xmlRpcContentHandler0.startDocument();
      assertFalse(xmlRpcContentHandler0.isFault());
      assertTrue(xmlRpcContentHandler0.getReturnValueAsList());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      boolean boolean0 = xmlRpcContentHandler0.isFault();
      assertFalse(boolean0);
      assertTrue(xmlRpcContentHandler0.getReturnValueAsList());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      xmlRpcContentHandler0.getResults();
      assertFalse(xmlRpcContentHandler0.isFault());
      assertTrue(xmlRpcContentHandler0.getReturnValueAsList());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      xmlRpcContentHandler0.endDocument();
      assertTrue(xmlRpcContentHandler0.getReturnValueAsList());
      assertFalse(xmlRpcContentHandler0.isFault());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlRpcContentHandler xmlRpcContentHandler0 = new XmlRpcContentHandler();
      xmlRpcContentHandler0.getMethodName();
      assertTrue(xmlRpcContentHandler0.getReturnValueAsList());
      assertFalse(xmlRpcContentHandler0.isFault());
  }
}
