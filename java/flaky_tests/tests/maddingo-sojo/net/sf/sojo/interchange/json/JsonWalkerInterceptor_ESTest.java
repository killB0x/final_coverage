/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 01:22:44 GMT 2022
 */

package net.sf.sojo.interchange.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Date;
import net.sf.sojo.interchange.json.JsonWalkerInterceptor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonWalkerInterceptor_ESTest extends JsonWalkerInterceptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      jsonWalkerInterceptor0.visitIterateableElement("M", 2, "M", 2);
      assertFalse(jsonWalkerInterceptor0.getWithNullValuesInMap());
      assertEquals("", jsonWalkerInterceptor0.getJsonString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      jsonWalkerInterceptor0.visitIterateableElement("?q0F", 0, "?q0F", 0);
      assertFalse(jsonWalkerInterceptor0.getWithNullValuesInMap());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      jsonWalkerInterceptor0.visitIterateableElement(jsonWalkerInterceptor0, 21, (String) null, 1);
      assertEquals("", jsonWalkerInterceptor0.getJsonString());
      assertFalse(jsonWalkerInterceptor0.getWithNullValuesInMap());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      jsonWalkerInterceptor0.setWithNullValuesInMap(true);
      jsonWalkerInterceptor0.visitElement("\b", 0, "\"Fri Sep 09 00:00:00 GMT 1904\")", 0, "\"Fri Sep 09 00:00:00 GMT 1904\")", (-4480));
      assertTrue(jsonWalkerInterceptor0.getWithNullValuesInMap());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      MockDate mockDate0 = new MockDate(114, 7, 114);
      Object object0 = mockDate0.clone();
      // Undeclared exception!
      try { 
        jsonWalkerInterceptor0.visitElement(object0, (-3111), mockDate0, 1, "", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON support only properties/keys from type String and not: 'org.evosuite.runtime.mock.java.util.MockDate' (Sat Nov 22 00:00:00 GMT 2014)
         //
         verifyException("net.sf.sojo.interchange.json.JsonWalkerInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = JsonWalkerInterceptor.handleControlCharacterBack("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      assertFalse(jsonWalkerInterceptor0.getWithNullValuesInMap());
      
      jsonWalkerInterceptor0.setWithNullValuesInMap(true);
      boolean boolean0 = jsonWalkerInterceptor0.getWithNullValuesInMap();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      MockDate mockDate0 = new MockDate(7, 0, 7, 0, 7);
      jsonWalkerInterceptor0.visitIterateableElement(mockDate0, 9, "java.lang.Object@7aaaca3a", 1);
      jsonWalkerInterceptor0.getJsonString();
      assertEquals("{", jsonWalkerInterceptor0.getJsonString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      // Undeclared exception!
      try { 
        jsonWalkerInterceptor0.visitElement("JSON support only properties/keys from type String and not: '", 0, "JSON support only properties/keys from type String and not: '", 0, (String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonWalkerInterceptor.object2StringWithDoubleQuote((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.sojo.interchange.json.JsonWalkerInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = JsonWalkerInterceptor.handleJsonValue("dz*hE");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = JsonWalkerInterceptor.handleJsonValue((Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = JsonWalkerInterceptor.object2StringWithDoubleQuote("p26D6tjzFh");
      assertEquals("\"p26D6tjzFh\"", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-2320), 0, 0, 0);
      String string0 = JsonWalkerInterceptor.object2StringWithDoubleQuote(mockDate0);
      assertEquals("\"Tue Aug 31 00:00:00 GMT 1706\"", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = JsonWalkerInterceptor.handleControlCharacter("");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = JsonWalkerInterceptor.handleControlCharacter(object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      boolean boolean0 = jsonWalkerInterceptor0.getWithNullValuesInMap();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      jsonWalkerInterceptor0.visitIterateableElement(object0, 9, "3nd pass string2Dave: ", 2);
      assertEquals("},", jsonWalkerInterceptor0.getJsonString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      jsonWalkerInterceptor0.visitIterateableElement("", 3008, "null,)", 2);
      assertFalse(jsonWalkerInterceptor0.getWithNullValuesInMap());
      assertEquals("", jsonWalkerInterceptor0.getJsonString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      jsonWalkerInterceptor0.visitIterateableElement(object0, 7, "p26D6tjzFh", 2);
      assertEquals("],", jsonWalkerInterceptor0.getJsonString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      jsonWalkerInterceptor0.visitIterateableElement(jsonWalkerInterceptor0, 7, (String) null, 1);
      assertEquals("[", jsonWalkerInterceptor0.getJsonString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      jsonWalkerInterceptor0.visitIterateableElement("\"java.lang.String@0000000004\"", (-1592), "./A%hB1h,,^%C3|xYb", 1);
      assertFalse(jsonWalkerInterceptor0.getWithNullValuesInMap());
      assertEquals("", jsonWalkerInterceptor0.getJsonString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      Object object0 = new Object();
      jsonWalkerInterceptor0.visitIterateableElement(object0, 1, "net.sf.sojo.interchange.json.JsonWalkerInterceptor@1", 9);
      assertFalse(jsonWalkerInterceptor0.getWithNullValuesInMap());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      MockDate mockDate0 = new MockDate(9, 9, 9);
      // Undeclared exception!
      try { 
        jsonWalkerInterceptor0.visitElement(mockDate0, 0, "java.lang.String@0000000002", (-1), "", 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON support only properties/keys from type String and not: 'org.evosuite.runtime.mock.java.util.MockDate' (Sat Oct 09 00:00:00 GMT 1909)
         //
         verifyException("net.sf.sojo.interchange.json.JsonWalkerInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      jsonWalkerInterceptor0.visitElement("R ", 3038, (Object) null, 3038, "R ", 3038);
      assertEquals("", jsonWalkerInterceptor0.getJsonString());
      assertFalse(jsonWalkerInterceptor0.getWithNullValuesInMap());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      jsonWalkerInterceptor0.visitElement((Object) null, 2258, jsonWalkerInterceptor0, 2258, ":null,", (-805));
      assertEquals("", jsonWalkerInterceptor0.getJsonString());
      assertFalse(jsonWalkerInterceptor0.getWithNullValuesInMap());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      jsonWalkerInterceptor0.visitElement(object0, 0, object0, 0, "java.lang.Object@53324e83", 2167);
      assertEquals("null,", jsonWalkerInterceptor0.getJsonString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      Object object0 = new Object();
      jsonWalkerInterceptor0.visitElement("\n", 0, object0, 92, "yyyy-MM-dd", 114);
      assertFalse(jsonWalkerInterceptor0.getWithNullValuesInMap());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      jsonWalkerInterceptor0.visitElement((Object) null, 0, (Object) null, 1, "D1+wzs6_D", 1);
      assertEquals(",", jsonWalkerInterceptor0.getJsonString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      JsonWalkerInterceptor.object2StringWithDoubleQuote(jsonWalkerInterceptor0);
      assertFalse(jsonWalkerInterceptor0.getWithNullValuesInMap());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      Instant instant0 = MockInstant.ofEpochMilli(1696L);
      Date date0 = Date.from(instant0);
      jsonWalkerInterceptor0.visitElement("\t", 18, date0, 1, "JSON support only properties/keys from type String and not: '", 48);
      assertFalse(jsonWalkerInterceptor0.getWithNullValuesInMap());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object object0 = JsonWalkerInterceptor.handleControlCharacter((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = JsonWalkerInterceptor.handleControlCharacterBack("v{U}6P4:s(:6/2bV");
      assertEquals("v{U}6P4:s(:6/2bV", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = JsonWalkerInterceptor.handleControlCharacterBack("\r");
      assertEquals("\r", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = JsonWalkerInterceptor.handleControlCharacterBack("\n");
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = JsonWalkerInterceptor.handleControlCharacterBack((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = JsonWalkerInterceptor.handleControlCharacterBack("\t");
      assertNotNull(string0);
      assertEquals("\t", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      jsonWalkerInterceptor0.getJsonString();
      assertFalse(jsonWalkerInterceptor0.getWithNullValuesInMap());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      jsonWalkerInterceptor0.endWalk();
      assertFalse(jsonWalkerInterceptor0.getWithNullValuesInMap());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      jsonWalkerInterceptor0.visitElement("null{*,)", 0, "null{*,)", 0, "null{*,)", 0);
      assertEquals("", jsonWalkerInterceptor0.getJsonString());
      assertFalse(jsonWalkerInterceptor0.getWithNullValuesInMap());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonWalkerInterceptor jsonWalkerInterceptor0 = new JsonWalkerInterceptor();
      jsonWalkerInterceptor0.startWalk("\b");
      assertFalse(jsonWalkerInterceptor0.getWithNullValuesInMap());
  }
}
