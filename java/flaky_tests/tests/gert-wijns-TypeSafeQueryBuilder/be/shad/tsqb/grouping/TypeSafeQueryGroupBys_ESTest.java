/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 23:13:26 GMT 2022
 */

package be.shad.tsqb.grouping;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import be.shad.tsqb.grouping.TypeSafeQueryGroupBys;
import be.shad.tsqb.hql.HqlQuery;
import be.shad.tsqb.query.TypeSafeQuery;
import be.shad.tsqb.query.copy.CopyContext;
import be.shad.tsqb.query.copy.Copyable;
import be.shad.tsqb.values.CustomTypeSafeValue;
import be.shad.tsqb.values.DirectTypeSafeStringValue;
import be.shad.tsqb.values.DirectTypeSafeValue;
import be.shad.tsqb.values.HqlQueryBuilderParamsImpl;
import be.shad.tsqb.values.TypeSafeValue;
import be.shad.tsqb.values.WrappedTypeSafeValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeSafeQueryGroupBys_ESTest extends TypeSafeQueryGroupBys_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TypeSafeQueryGroupBys typeSafeQueryGroupBys0 = new TypeSafeQueryGroupBys();
      Class<DirectTypeSafeStringValue> class0 = DirectTypeSafeStringValue.class;
      HqlQuery hqlQuery0 = new HqlQuery();
      CustomTypeSafeValue<DirectTypeSafeStringValue> customTypeSafeValue0 = new CustomTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, class0, hqlQuery0);
      WrappedTypeSafeValue<DirectTypeSafeStringValue> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, "Zd(jE", customTypeSafeValue0);
      typeSafeQueryGroupBys0.add((TypeSafeValue<DirectTypeSafeStringValue>) wrappedTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      typeSafeQueryGroupBys0.appendTo(hqlQuery0, hqlQueryBuilderParamsImpl0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TypeSafeQueryGroupBys typeSafeQueryGroupBys0 = new TypeSafeQueryGroupBys();
      typeSafeQueryGroupBys0.add((TypeSafeValue<DirectTypeSafeStringValue>) null);
      CopyContext copyContext0 = new CopyContext();
      Copyable copyable0 = typeSafeQueryGroupBys0.copy(copyContext0);
      assertFalse(copyable0.equals((Object)typeSafeQueryGroupBys0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TypeSafeQueryGroupBys typeSafeQueryGroupBys0 = new TypeSafeQueryGroupBys();
      Class<DirectTypeSafeStringValue> class0 = DirectTypeSafeStringValue.class;
      HqlQuery hqlQuery0 = new HqlQuery();
      CustomTypeSafeValue<DirectTypeSafeStringValue> customTypeSafeValue0 = new CustomTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, class0, hqlQuery0);
      WrappedTypeSafeValue<DirectTypeSafeStringValue> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, "Zd(jE", customTypeSafeValue0);
      typeSafeQueryGroupBys0.add((TypeSafeValue<DirectTypeSafeStringValue>) wrappedTypeSafeValue0);
      CopyContext copyContext0 = new CopyContext();
      // Undeclared exception!
      try { 
        typeSafeQueryGroupBys0.copy(copyContext0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object [ from  --- with: []] is not copyable, so its copy should have been added before trying to get its copy.
         //
         verifyException("be.shad.tsqb.query.copy.CopyContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TypeSafeQueryGroupBys typeSafeQueryGroupBys0 = new TypeSafeQueryGroupBys();
      typeSafeQueryGroupBys0.add((TypeSafeValue<DirectTypeSafeStringValue>) null);
      HqlQuery hqlQuery0 = new HqlQuery();
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      // Undeclared exception!
      try { 
        typeSafeQueryGroupBys0.appendTo(hqlQuery0, hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.grouping.TypeSafeQueryGroupBys", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      TypeSafeQueryGroupBys typeSafeQueryGroupBys0 = new TypeSafeQueryGroupBys();
      TypeSafeQueryGroupBys typeSafeQueryGroupBys1 = new TypeSafeQueryGroupBys(copyContext0, typeSafeQueryGroupBys0);
      assertFalse(typeSafeQueryGroupBys1.equals((Object)typeSafeQueryGroupBys0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TypeSafeQueryGroupBys typeSafeQueryGroupBys0 = new TypeSafeQueryGroupBys();
      typeSafeQueryGroupBys0.add((TypeSafeValue<DirectTypeSafeStringValue>) null);
      TypeSafeQueryGroupBys typeSafeQueryGroupBys1 = null;
      try {
        typeSafeQueryGroupBys1 = new TypeSafeQueryGroupBys((CopyContext) null, typeSafeQueryGroupBys0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.grouping.TypeSafeQueryGroupBys", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TypeSafeQueryGroupBys typeSafeQueryGroupBys0 = new TypeSafeQueryGroupBys();
      typeSafeQueryGroupBys0.add((TypeSafeValue<DirectTypeSafeStringValue>) null);
      HqlQuery hqlQuery0 = new HqlQuery();
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      hqlQueryBuilderParamsImpl0.setSelectingCount(true);
      // Undeclared exception!
      try { 
        typeSafeQueryGroupBys0.appendTo(hqlQuery0, hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create a selecting count query when group by is used.
         //
         verifyException("be.shad.tsqb.grouping.TypeSafeQueryGroupBys", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TypeSafeQueryGroupBys typeSafeQueryGroupBys0 = new TypeSafeQueryGroupBys();
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      typeSafeQueryGroupBys0.appendTo((HqlQuery) null, hqlQueryBuilderParamsImpl0);
      assertFalse(hqlQueryBuilderParamsImpl0.isBuildingForDisplay());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TypeSafeQueryGroupBys typeSafeQueryGroupBys0 = new TypeSafeQueryGroupBys();
      typeSafeQueryGroupBys0.add((TypeSafeValue<DirectTypeSafeStringValue>) null);
      // Undeclared exception!
      try { 
        typeSafeQueryGroupBys0.copy((CopyContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.grouping.TypeSafeQueryGroupBys", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TypeSafeQueryGroupBys typeSafeQueryGroupBys0 = new TypeSafeQueryGroupBys();
      Class<DirectTypeSafeStringValue> class0 = DirectTypeSafeStringValue.class;
      DirectTypeSafeValue<DirectTypeSafeStringValue> directTypeSafeValue0 = new DirectTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, class0);
      typeSafeQueryGroupBys0.add((TypeSafeValue<DirectTypeSafeStringValue>) directTypeSafeValue0);
      HqlQuery hqlQuery0 = new HqlQuery();
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      // Undeclared exception!
      try { 
        typeSafeQueryGroupBys0.appendTo(hqlQuery0, hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Value is null when transforming to query
         //
         verifyException("be.shad.tsqb.values.DirectTypeSafeValue", e);
      }
  }
}
