/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 23:45:15 GMT 2022
 */

package be.shad.tsqb.restrictions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import be.shad.tsqb.data.TypeSafeQueryProxyData;
import be.shad.tsqb.query.TypeSafeQuery;
import be.shad.tsqb.query.TypeSafeQueryInternal;
import be.shad.tsqb.restrictions.OnGoingBooleanRestrictionImpl;
import be.shad.tsqb.restrictions.OnGoingDateRestriction;
import be.shad.tsqb.restrictions.OnGoingDateRestrictionImpl;
import be.shad.tsqb.restrictions.OnGoingEnumRestrictionImpl;
import be.shad.tsqb.restrictions.Restriction;
import be.shad.tsqb.restrictions.RestrictionNodeType;
import be.shad.tsqb.restrictions.RestrictionsGroup;
import be.shad.tsqb.restrictions.RestrictionsGroupImpl;
import be.shad.tsqb.restrictions.RestrictionsGroupInternal;
import be.shad.tsqb.values.CaseTypeSafeValue;
import be.shad.tsqb.values.TypeSafeValue;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RestrictionChainableDelegatingImpl_ESTest extends RestrictionChainableDelegatingImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RestrictionsGroup.RestrictionsGroupBracketsPolicy restrictionsGroup_RestrictionsGroupBracketsPolicy0 = RestrictionsGroup.RestrictionsGroupBracketsPolicy.Always;
      RestrictionsGroupImpl restrictionsGroupImpl0 = new RestrictionsGroupImpl((TypeSafeQueryInternal) null, (TypeSafeQueryProxyData) null, restrictionsGroup_RestrictionsGroupBracketsPolicy0);
      RestrictionNodeType restrictionNodeType0 = RestrictionNodeType.And;
      OnGoingEnumRestrictionImpl<RestrictionNodeType> onGoingEnumRestrictionImpl0 = new OnGoingEnumRestrictionImpl<RestrictionNodeType>(restrictionsGroupImpl0, restrictionNodeType0, (TypeSafeValue<RestrictionNodeType>) null);
      // Undeclared exception!
      try { 
        onGoingEnumRestrictionImpl0.or((RestrictionsGroup) restrictionsGroupImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attempting to add a restriction group to itself. Did you nest query.where inside a query.where?
         //
         verifyException("be.shad.tsqb.restrictions.RestrictionsGroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RestrictionNodeType restrictionNodeType0 = RestrictionNodeType.Or;
      Class<Boolean> class0 = Boolean.class;
      CaseTypeSafeValue<Boolean> caseTypeSafeValue0 = new CaseTypeSafeValue<Boolean>((TypeSafeQuery) null, class0);
      OnGoingBooleanRestrictionImpl onGoingBooleanRestrictionImpl0 = new OnGoingBooleanRestrictionImpl((RestrictionsGroupInternal) null, restrictionNodeType0, caseTypeSafeValue0);
      // Undeclared exception!
      try { 
        onGoingBooleanRestrictionImpl0.and((RestrictionsGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.restrictions.OnGoingBooleanRestrictionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RestrictionNodeType restrictionNodeType0 = RestrictionNodeType.Or;
      OnGoingDateRestrictionImpl onGoingDateRestrictionImpl0 = new OnGoingDateRestrictionImpl((RestrictionsGroupInternal) null, restrictionNodeType0, (TypeSafeValue<Date>) null);
      // Undeclared exception!
      try { 
        onGoingDateRestrictionImpl0.or((RestrictionsGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.restrictions.RestrictionChainableDelegatingImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RestrictionNodeType restrictionNodeType0 = RestrictionNodeType.Or;
      OnGoingDateRestrictionImpl onGoingDateRestrictionImpl0 = new OnGoingDateRestrictionImpl((RestrictionsGroupInternal) null, restrictionNodeType0, (TypeSafeValue<Date>) null);
      OnGoingDateRestriction onGoingDateRestriction0 = onGoingDateRestrictionImpl0.orDate((TypeSafeValue<Date>) null);
      assertNotSame(onGoingDateRestrictionImpl0, onGoingDateRestriction0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RestrictionNodeType restrictionNodeType0 = RestrictionNodeType.Or;
      OnGoingBooleanRestrictionImpl onGoingBooleanRestrictionImpl0 = new OnGoingBooleanRestrictionImpl((RestrictionsGroupInternal) null, restrictionNodeType0, (TypeSafeValue<Boolean>) null);
      Restriction restriction0 = onGoingBooleanRestrictionImpl0.getRestriction();
      assertNull(restriction0);
  }
}
