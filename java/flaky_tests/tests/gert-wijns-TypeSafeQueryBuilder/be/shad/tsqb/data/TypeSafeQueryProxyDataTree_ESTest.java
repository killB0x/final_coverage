/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 22:18:08 GMT 2022
 */

package be.shad.tsqb.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import be.shad.tsqb.data.TypeSafeQueryFrom;
import be.shad.tsqb.data.TypeSafeQueryProxyData;
import be.shad.tsqb.data.TypeSafeQueryProxyDataTree;
import be.shad.tsqb.data.TypeSafeQuerySelectionProxyPropertyData;
import be.shad.tsqb.helper.BuildFn;
import be.shad.tsqb.helper.SelectionBuilderSpec;
import be.shad.tsqb.helper.TypeSafeQueryHelper;
import be.shad.tsqb.hql.HqlQuery;
import be.shad.tsqb.proxy.TypeSafeQueryProxy;
import be.shad.tsqb.proxy.TypeSafeQueryProxyType;
import be.shad.tsqb.query.TypeSafeQuery;
import be.shad.tsqb.query.TypeSafeQueryInternal;
import be.shad.tsqb.query.copy.CopyContext;
import be.shad.tsqb.restrictions.WhereRestrictions;
import be.shad.tsqb.selection.group.TypeSafeQuerySelectionGroupImpl;
import be.shad.tsqb.selection.group.TypeSafeQuerySelectionGroupInternal;
import be.shad.tsqb.values.HqlQueryBuilderParams;
import be.shad.tsqb.values.HqlQueryBuilderParamsImpl;
import be.shad.tsqb.values.HqlQueryValue;
import be.shad.tsqb.values.ReferenceTypeSafeValue;
import java.time.Month;
import java.time.chrono.ThaiBuddhistEra;
import java.util.ConcurrentModificationException;
import java.util.List;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeSafeQueryProxyDataTree_ESTest extends TypeSafeQueryProxyDataTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      TypeSafeQueryProxyData typeSafeQueryProxyData0 = new TypeSafeQueryProxyData((TypeSafeQueryProxyData) null, "f)E%", class0);
      TypeSafeQueryProxyType typeSafeQueryProxyType0 = TypeSafeQueryProxyType.EntityType;
      TypeSafeQueryProxy typeSafeQueryProxy0 = mock(TypeSafeQueryProxy.class, new ViolatedAssumptionAnswer());
      TypeSafeQueryProxyData typeSafeQueryProxyData1 = new TypeSafeQueryProxyData(typeSafeQueryProxyData0, (String) null, class0, typeSafeQueryProxyType0, typeSafeQueryProxy0, (String) null, "f)E%");
      TypeSafeQueryProxyData typeSafeQueryProxyData2 = typeSafeQueryProxyDataTree0.createData(typeSafeQueryProxyData1, (String) null, class0);
      TypeSafeQueryProxyData typeSafeQueryProxyData3 = new TypeSafeQueryProxyData((TypeSafeQueryProxyData) null, "f)E%", class0);
      boolean boolean0 = typeSafeQueryProxyDataTree0.isInScope(typeSafeQueryProxyData2, typeSafeQueryProxyData3);
      assertEquals(TypeSafeQueryProxyType.EntityPropertyType, typeSafeQueryProxyData2.getProxyType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      TypeSafeQueryProxyData typeSafeQueryProxyData0 = new TypeSafeQueryProxyData((TypeSafeQueryProxyData) null, ", buildingForDisplay=", class0);
      TypeSafeQueryProxyType typeSafeQueryProxyType0 = TypeSafeQueryProxyType.EntityType;
      TypeSafeQueryProxy typeSafeQueryProxy0 = mock(TypeSafeQueryProxy.class, new ViolatedAssumptionAnswer());
      Class<Object> class1 = Object.class;
      TypeSafeQueryProxyData typeSafeQueryProxyData1 = new TypeSafeQueryProxyData(typeSafeQueryProxyData0, (String) null, class1, typeSafeQueryProxyType0, typeSafeQueryProxy0, "IS_NOT_NULL", (String) null);
      TypeSafeQueryProxy typeSafeQueryProxy1 = mock(TypeSafeQueryProxy.class, new ViolatedAssumptionAnswer());
      TypeSafeQueryProxyData typeSafeQueryProxyData2 = new TypeSafeQueryProxyData(typeSafeQueryProxyData1, "GZ1A? Y)", class1, typeSafeQueryProxyType0, typeSafeQueryProxy1, "ehY4\"_WQ0", "VjPHC}fB`eC3Je\"%/");
      Class<Month> class2 = Month.class;
      TypeSafeQueryProxyData typeSafeQueryProxyData3 = typeSafeQueryProxyDataTree0.createData(typeSafeQueryProxyData2, ", buildingForDisplay=", class2);
      boolean boolean0 = typeSafeQueryProxyDataTree0.isInScope(typeSafeQueryProxyData3, typeSafeQueryProxyData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      TypeSafeQueryProxy typeSafeQueryProxy0 = mock(TypeSafeQueryProxy.class, new ViolatedAssumptionAnswer());
      Class<Object> class0 = Object.class;
      TypeSafeQueryProxyType typeSafeQueryProxyType0 = TypeSafeQueryProxyType.SelectionDtoType;
      // Undeclared exception!
      try { 
        typeSafeQueryProxyDataTree0.createData((TypeSafeQueryProxyData) null, ".AM=D/!", class0, typeSafeQueryProxyType0, "be.shad.tsqb.data.TypeSafeQueryProxyDataTree", typeSafeQueryProxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.data.TypeSafeQueryProxyDataTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree1 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      Class<Byte> class0 = Byte.TYPE;
      TypeSafeQueryProxyData typeSafeQueryProxyData0 = new TypeSafeQueryProxyData((TypeSafeQueryProxyData) null, (String) null, class0);
      TypeSafeQueryProxyData typeSafeQueryProxyData1 = typeSafeQueryProxyDataTree0.createData(typeSafeQueryProxyData0, (String) null, class0);
      CopyContext copyContext0 = new CopyContext();
      copyContext0.put(typeSafeQueryProxyData1, typeSafeQueryProxyData0);
      // Undeclared exception!
      try { 
        typeSafeQueryProxyDataTree1.replay(copyContext0, typeSafeQueryProxyDataTree0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.data.TypeSafeQueryProxyDataTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      Class<Object> class0 = Object.class;
      BuildFn<Object, Object> buildFn0 = (BuildFn<Object, Object>) mock(BuildFn.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SelectionBuilderSpec<Object, Object> selectionBuilderSpec0 = new SelectionBuilderSpec<Object, Object>(class0, class0, buildFn0, supplier0);
      TypeSafeQuerySelectionGroupImpl<Object, Object> typeSafeQuerySelectionGroupImpl0 = new TypeSafeQuerySelectionGroupImpl<Object, Object>("", selectionBuilderSpec0);
      typeSafeQueryProxyDataTree0.createSelectionData("", class0, (TypeSafeQuerySelectionGroupInternal<?, ?>) typeSafeQuerySelectionGroupImpl0);
      List<TypeSafeQuerySelectionProxyPropertyData<?>> list0 = typeSafeQueryProxyDataTree0.getSelectionDatas();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        typeSafeQueryProxyDataTree0.createSelectionData("Wv-#*`{", class0, (TypeSafeQuerySelectionGroupInternal<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.data.TypeSafeQueryProxyDataTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      HqlQueryValue hqlQueryValue0 = typeSafeQueryProxyDataTree0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      assertEquals("", hqlQueryValue0.getHql());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HqlQuery hqlQuery0 = new HqlQuery();
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      typeSafeQueryProxyDataTree0.appendTo(hqlQuery0, (HqlQueryBuilderParams) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      TypeSafeQueryProxyType typeSafeQueryProxyType0 = TypeSafeQueryProxyType.EntityMapType;
      Class<Object> class0 = Object.class;
      TypeSafeQueryProxyData typeSafeQueryProxyData0 = new TypeSafeQueryProxyData((TypeSafeQueryProxyData) null, "l\"tBsn3", class0, typeSafeQueryProxyType0, (TypeSafeQueryProxy) null, "l\"tBsn3", "l\"tBsn3");
      TypeSafeQueryProxyData typeSafeQueryProxyData1 = typeSafeQueryProxyDataTree0.createData(typeSafeQueryProxyData0, "l\"tBsn3", class0);
      // Undeclared exception!
      try { 
        typeSafeQueryProxyDataTree0.isInScope(typeSafeQueryProxyData1, typeSafeQueryProxyData1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.data.TypeSafeQueryProxyDataTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      Class<Object> class0 = Object.class;
      TypeSafeQueryProxyType typeSafeQueryProxyType0 = TypeSafeQueryProxyType.EntityCollectionType;
      TypeSafeQueryProxyData typeSafeQueryProxyData0 = new TypeSafeQueryProxyData((TypeSafeQueryProxyData) null, "TV(ir_u", class0, typeSafeQueryProxyType0, (TypeSafeQueryProxy) null, "_&Bl3gJg^`0]^9", "");
      TypeSafeQueryProxyData typeSafeQueryProxyData1 = typeSafeQueryProxyDataTree0.createData(typeSafeQueryProxyData0, "_&Bl3gJg^`0]^9", class0);
      boolean boolean0 = typeSafeQueryProxyDataTree0.isInScope(typeSafeQueryProxyData1, typeSafeQueryProxyData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      Class<Short> class0 = Short.class;
      TypeSafeQueryProxyData typeSafeQueryProxyData0 = new TypeSafeQueryProxyData((TypeSafeQueryProxyData) null, "X=O(;&ZK&j,lMb9Y", class0);
      TypeSafeQueryProxyData typeSafeQueryProxyData1 = typeSafeQueryProxyDataTree0.createData(typeSafeQueryProxyData0, "BrU$rnf}HS$/$-", class0);
      ReferenceTypeSafeValue<Object> referenceTypeSafeValue0 = new ReferenceTypeSafeValue<Object>((TypeSafeQuery) null, typeSafeQueryProxyData1);
      TypeSafeQueryProxyData typeSafeQueryProxyData2 = referenceTypeSafeValue0.getData();
      // Undeclared exception!
      try { 
        typeSafeQueryProxyDataTree0.isInScope(typeSafeQueryProxyData2, typeSafeQueryProxyData1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.data.TypeSafeQueryProxyDataTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      Class<Object> class0 = Object.class;
      TypeSafeQueryProxyData typeSafeQueryProxyData0 = new TypeSafeQueryProxyData((TypeSafeQueryProxyData) null, "", class0);
      TypeSafeQueryProxyData typeSafeQueryProxyData1 = typeSafeQueryProxyDataTree0.createData(typeSafeQueryProxyData0, "QP`MSglp", class0);
      boolean boolean0 = typeSafeQueryProxyDataTree0.isInScope(typeSafeQueryProxyData1, (TypeSafeQueryProxyData) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      boolean boolean0 = typeSafeQueryProxyDataTree0.isInScope((TypeSafeQueryProxyData) null, (TypeSafeQueryProxyData) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      Class<TypeSafeQueryProxyData> class0 = TypeSafeQueryProxyData.class;
      TypeSafeQueryProxyType typeSafeQueryProxyType0 = TypeSafeQueryProxyType.SelectionDtoType;
      TypeSafeQueryProxy typeSafeQueryProxy0 = mock(TypeSafeQueryProxy.class, new ViolatedAssumptionAnswer());
      TypeSafeQueryProxyData typeSafeQueryProxyData0 = new TypeSafeQueryProxyData((TypeSafeQueryProxyData) null, (String) null, class0, typeSafeQueryProxyType0, typeSafeQueryProxy0, "", (String) null);
      boolean boolean0 = typeSafeQueryProxyDataTree0.isInScope((TypeSafeQueryProxyData) null, typeSafeQueryProxyData0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        typeSafeQueryProxyDataTree0.createData((TypeSafeQueryProxyData) null, "Left", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("be.shad.tsqb.data.TypeSafeQueryProxyDataTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      CopyContext copyContext0 = new CopyContext();
      Class<TypeSafeQueryFrom> class0 = TypeSafeQueryFrom.class;
      Class<TypeSafeQueryProxyData> class1 = TypeSafeQueryProxyData.class;
      Class<Float> class2 = Float.class;
      SelectionBuilderSpec<TypeSafeQueryProxyData, Float> selectionBuilderSpec0 = new SelectionBuilderSpec<TypeSafeQueryProxyData, Float>(class1, class2, (BuildFn<TypeSafeQueryProxyData, Float>) null, (Supplier<TypeSafeQueryProxyData>) null);
      TypeSafeQuerySelectionGroupImpl<TypeSafeQueryProxyData, Float> typeSafeQuerySelectionGroupImpl0 = new TypeSafeQuerySelectionGroupImpl<TypeSafeQueryProxyData, Float>("|$8JFr{qcb#", selectionBuilderSpec0);
      typeSafeQueryProxyDataTree0.createSelectionData("|$8JFr{qcb#", class0, (TypeSafeQuerySelectionGroupInternal<?, ?>) typeSafeQuerySelectionGroupImpl0);
      // Undeclared exception!
      try { 
        typeSafeQueryProxyDataTree0.replay(copyContext0, typeSafeQueryProxyDataTree0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree1 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      Class<Byte> class0 = Byte.class;
      TypeSafeQueryProxyData typeSafeQueryProxyData0 = new TypeSafeQueryProxyData((TypeSafeQueryProxyData) null, (String) null, class0);
      Class<Object> class1 = Object.class;
      typeSafeQueryProxyDataTree1.createData(typeSafeQueryProxyData0, (String) null, class1);
      CopyContext copyContext0 = new CopyContext();
      // Undeclared exception!
      try { 
        typeSafeQueryProxyDataTree0.replay(copyContext0, typeSafeQueryProxyDataTree1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object [Byte:Byte] is not copyable, so its copy should have been added before trying to get its copy.
         //
         verifyException("be.shad.tsqb.query.copy.CopyContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      CopyContext copyContext0 = new CopyContext();
      typeSafeQueryProxyDataTree0.replay(copyContext0, typeSafeQueryProxyDataTree0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      Class<Byte> class0 = Byte.TYPE;
      TypeSafeQueryProxyData typeSafeQueryProxyData0 = new TypeSafeQueryProxyData((TypeSafeQueryProxyData) null, (String) null, class0);
      typeSafeQueryProxyDataTree0.createData(typeSafeQueryProxyData0, (String) null, class0);
      CopyContext copyContext0 = new CopyContext();
      // Undeclared exception!
      try { 
        typeSafeQueryProxyDataTree0.replay(copyContext0, typeSafeQueryProxyDataTree0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Replaying on a non-empty tree is not supported.
         //
         verifyException("be.shad.tsqb.data.TypeSafeQueryProxyDataTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      List<TypeSafeQueryFrom> list0 = typeSafeQueryProxyDataTree0.getFroms();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      List<TypeSafeQuerySelectionProxyPropertyData<?>> list0 = typeSafeQueryProxyDataTree0.getSelectionDatas();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeSafeQueryProxyDataTree typeSafeQueryProxyDataTree0 = new TypeSafeQueryProxyDataTree((TypeSafeQueryHelper) null, (TypeSafeQueryInternal) null);
      WhereRestrictions whereRestrictions0 = typeSafeQueryProxyDataTree0.getJoinRestrictions((TypeSafeQueryProxyData) null);
      assertNull(whereRestrictions0);
  }
}
