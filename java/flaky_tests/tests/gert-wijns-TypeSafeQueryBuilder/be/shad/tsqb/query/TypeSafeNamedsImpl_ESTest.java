/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 22:50:31 GMT 2022
 */

package be.shad.tsqb.query;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import be.shad.tsqb.query.TypeSafeNamedsImpl;
import be.shad.tsqb.query.TypeSafeQuery;
import be.shad.tsqb.query.copy.CopyContext;
import be.shad.tsqb.query.copy.Copyable;
import be.shad.tsqb.restrictions.RestrictionNodeType;
import be.shad.tsqb.values.DirectTypeSafeValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeSafeNamedsImpl_ESTest extends TypeSafeNamedsImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeSafeNamedsImpl typeSafeNamedsImpl0 = new TypeSafeNamedsImpl();
      CopyContext copyContext0 = new CopyContext();
      typeSafeNamedsImpl0.name((Object) "ZQV{CV@C$nVMl_dp<?N", "@0%E4;!'L)'U,o");
      // Undeclared exception!
      try { 
        typeSafeNamedsImpl0.copy(copyContext0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object [ZQV{CV@C$nVMl_dp<?N] is not copyable, so its copy should have been added before trying to get its copy.
         //
         verifyException("be.shad.tsqb.query.copy.CopyContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeSafeNamedsImpl typeSafeNamedsImpl0 = new TypeSafeNamedsImpl();
      Byte byte0 = typeSafeNamedsImpl0.name((Byte) null, " O?L_r1aTN");
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeSafeNamedsImpl typeSafeNamedsImpl0 = new TypeSafeNamedsImpl();
      typeSafeNamedsImpl0.name((Object) "Name is'blank when trying to set name for [%s].", "Name is'blank when trying to set name for [%s].");
      Object object0 = typeSafeNamedsImpl0.get("Name is'blank when trying to set name for [%s].");
      assertEquals("Name is'blank when trying to set name for [%s].", object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      TypeSafeNamedsImpl typeSafeNamedsImpl0 = null;
      try {
        typeSafeNamedsImpl0 = new TypeSafeNamedsImpl(copyContext0, (TypeSafeNamedsImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.query.TypeSafeNamedsImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeSafeNamedsImpl typeSafeNamedsImpl0 = new TypeSafeNamedsImpl();
      typeSafeNamedsImpl0.name((Object) "Name is blank when trying to set name for [%s].", "be.shad.tsqb.query.TypeSafeNamedsImpl");
      Class<Object> class0 = Object.class;
      Object object0 = typeSafeNamedsImpl0.getOrNull(class0, "be.shad.tsqb.query.TypeSafeNamedsImpl");
      assertEquals("Name is blank when trying to set name for [%s].", object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeSafeNamedsImpl typeSafeNamedsImpl0 = new TypeSafeNamedsImpl();
      Class<Object> class0 = Object.class;
      Object object0 = typeSafeNamedsImpl0.getOrNull(class0, "be.shad.tsqb.restrictions.predicate.AbstractDirectValueRestrictionPredicate");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      TypeSafeNamedsImpl typeSafeNamedsImpl0 = new TypeSafeNamedsImpl();
      TypeSafeNamedsImpl typeSafeNamedsImpl1 = new TypeSafeNamedsImpl(copyContext0, typeSafeNamedsImpl0);
      assertFalse(typeSafeNamedsImpl1.equals((Object)typeSafeNamedsImpl0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      TypeSafeNamedsImpl typeSafeNamedsImpl0 = new TypeSafeNamedsImpl();
      typeSafeNamedsImpl0.name((Object) copyContext0, "K]??u,[uE^:7 3LG");
      TypeSafeNamedsImpl typeSafeNamedsImpl1 = null;
      try {
        typeSafeNamedsImpl1 = new TypeSafeNamedsImpl(copyContext0, typeSafeNamedsImpl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object [be.shad.tsqb.query.copy.CopyContext@1] is not copyable, so its copy should have been added before trying to get its copy.
         //
         verifyException("be.shad.tsqb.query.copy.CopyContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeSafeNamedsImpl typeSafeNamedsImpl0 = new TypeSafeNamedsImpl();
      Class<Object> class0 = Object.class;
      try { 
        typeSafeNamedsImpl0.get(class0, "Name is null when trying to set name for [%s].");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No named object found for [Name is null when trying to set name for [%s].].
         //
         verifyException("be.shad.tsqb.query.TypeSafeNamedsImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeSafeNamedsImpl typeSafeNamedsImpl0 = new TypeSafeNamedsImpl();
      typeSafeNamedsImpl0.name((Object) "s/", "s/");
      Class<RestrictionNodeType> class0 = RestrictionNodeType.class;
      // Undeclared exception!
      try { 
        typeSafeNamedsImpl0.getOrNull(class0, "s/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Named object [s/] doesn't have the correct type [class be.shad.tsqb.restrictions.RestrictionNodeType].
         //
         verifyException("be.shad.tsqb.query.TypeSafeNamedsImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeSafeNamedsImpl typeSafeNamedsImpl0 = new TypeSafeNamedsImpl();
      Class<Object> class0 = Object.class;
      DirectTypeSafeValue<Object> directTypeSafeValue0 = new DirectTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      typeSafeNamedsImpl0.name(directTypeSafeValue0, "be.shad.tsqb.exceptions.TsqbException");
      typeSafeNamedsImpl0.setValue("be.shad.tsqb.exceptions.TsqbException", "be.shad.tsqb.exceptions.TsqbException");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeSafeNamedsImpl typeSafeNamedsImpl0 = new TypeSafeNamedsImpl();
      typeSafeNamedsImpl0.name((Object) "f#8~o:O\"X]u>Nbls/b", "f#8~o:O\"X]u>Nbls/b");
      // Undeclared exception!
      try { 
        typeSafeNamedsImpl0.name((Object) "f#8~o:O\"X]u>Nbls/b", "f#8~o:O\"X]u>Nbls/b");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Naming [f#8~o:O\"X]u>Nbls/b] with name [f#8~o:O\"X]u>Nbls/b] is illegal because another named object [f#8~o:O\"X]u>Nbls/b] already used the name.
         //
         verifyException("be.shad.tsqb.query.TypeSafeNamedsImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeSafeNamedsImpl typeSafeNamedsImpl0 = new TypeSafeNamedsImpl();
      Class<Object> class0 = Object.class;
      DirectTypeSafeValue<Object> directTypeSafeValue0 = new DirectTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      DirectTypeSafeValue<Object> directTypeSafeValue1 = typeSafeNamedsImpl0.name(directTypeSafeValue0, "be.shad.tsqb.exceptions.TsqbException");
      Object object0 = typeSafeNamedsImpl0.name((Object) directTypeSafeValue1, "be.shad.tsqb.exceptions.TsqbException");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeSafeNamedsImpl typeSafeNamedsImpl0 = new TypeSafeNamedsImpl();
      // Undeclared exception!
      try { 
        typeSafeNamedsImpl0.name((Object) " ", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name is blank when trying to set name for [ ].
         //
         verifyException("be.shad.tsqb.query.TypeSafeNamedsImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeSafeNamedsImpl typeSafeNamedsImpl0 = new TypeSafeNamedsImpl();
      // Undeclared exception!
      try { 
        typeSafeNamedsImpl0.name((Object) typeSafeNamedsImpl0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name is null when trying to set name for [be.shad.tsqb.query.TypeSafeNamedsImpl@1].
         //
         verifyException("be.shad.tsqb.query.TypeSafeNamedsImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeSafeNamedsImpl typeSafeNamedsImpl0 = new TypeSafeNamedsImpl();
      typeSafeNamedsImpl0.name((Object) "zs", "zs");
      // Undeclared exception!
      try { 
        typeSafeNamedsImpl0.copy((CopyContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.query.TypeSafeNamedsImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeSafeNamedsImpl typeSafeNamedsImpl0 = new TypeSafeNamedsImpl();
      // Undeclared exception!
      try { 
        typeSafeNamedsImpl0.setValue("be.shad.tsqb.exceptions.TsqbException", "be.shad.tsqb.exceptions.TsqbException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No named object found for [be.shad.tsqb.exceptions.TsqbException].
         //
         verifyException("be.shad.tsqb.query.TypeSafeNamedsImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeSafeNamedsImpl typeSafeNamedsImpl0 = new TypeSafeNamedsImpl();
      Copyable copyable0 = typeSafeNamedsImpl0.copy((CopyContext) null);
      assertNotSame(copyable0, typeSafeNamedsImpl0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeSafeNamedsImpl typeSafeNamedsImpl0 = new TypeSafeNamedsImpl();
      try { 
        typeSafeNamedsImpl0.get("Name is blank when trying to set name for [%s].");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No named object found for [Name is blank when trying to set name for [%s].].
         //
         verifyException("be.shad.tsqb.query.TypeSafeNamedsImpl", e);
      }
  }
}
