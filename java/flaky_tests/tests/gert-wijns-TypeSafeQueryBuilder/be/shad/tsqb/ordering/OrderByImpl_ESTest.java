/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 23:29:58 GMT 2022
 */

package be.shad.tsqb.ordering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import be.shad.tsqb.hql.HqlQuery;
import be.shad.tsqb.ordering.OrderByImpl;
import be.shad.tsqb.query.TypeSafeQuery;
import be.shad.tsqb.query.copy.CopyContext;
import be.shad.tsqb.query.copy.Copyable;
import be.shad.tsqb.values.CoalesceTypeSafeValue;
import be.shad.tsqb.values.CollectionTypeSafeValue;
import be.shad.tsqb.values.CustomTypeSafeValue;
import be.shad.tsqb.values.DirectTypeSafeStringValue;
import be.shad.tsqb.values.DirectTypeSafeValue;
import be.shad.tsqb.values.HqlQueryBuilderParamsImpl;
import be.shad.tsqb.values.ProjectionTypeSafeValue;
import be.shad.tsqb.values.TypeSafeValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OrderByImpl_ESTest extends OrderByImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<DirectTypeSafeStringValue> class0 = DirectTypeSafeStringValue.class;
      DirectTypeSafeValue<DirectTypeSafeStringValue> directTypeSafeValue0 = new DirectTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, class0);
      OrderByImpl orderByImpl0 = new OrderByImpl(directTypeSafeValue0, false);
      Copyable copyable0 = orderByImpl0.copy(copyContext0);
      assertFalse(copyable0.equals((Object)orderByImpl0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<Short> class0 = Short.class;
      ProjectionTypeSafeValue<Short> projectionTypeSafeValue0 = new ProjectionTypeSafeValue<Short>((TypeSafeQuery) null, class0, "");
      CoalesceTypeSafeValue<Short> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Short>((TypeSafeQuery) null, projectionTypeSafeValue0);
      OrderByImpl orderByImpl0 = new OrderByImpl(coalesceTypeSafeValue0, false);
      coalesceTypeSafeValue0.or((TypeSafeValue<Short>) coalesceTypeSafeValue0);
      // Undeclared exception!
      try { 
        orderByImpl0.copy(copyContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<DirectTypeSafeStringValue> class0 = DirectTypeSafeStringValue.class;
      DirectTypeSafeValue<DirectTypeSafeStringValue> directTypeSafeValue0 = new DirectTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, class0);
      OrderByImpl orderByImpl0 = new OrderByImpl(directTypeSafeValue0, false);
      HqlQuery hqlQuery0 = new HqlQuery();
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      // Undeclared exception!
      try { 
        orderByImpl0.appendTo(hqlQuery0, hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Value is null when transforming to query
         //
         verifyException("be.shad.tsqb.values.DirectTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HqlQuery hqlQuery0 = new HqlQuery();
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      Class<Object> class0 = Object.class;
      CollectionTypeSafeValue<Object> collectionTypeSafeValue0 = new CollectionTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      OrderByImpl orderByImpl0 = new OrderByImpl(collectionTypeSafeValue0, true);
      // Undeclared exception!
      try { 
        orderByImpl0.appendTo(hqlQuery0, hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Collection is empty when transforming to query
         //
         verifyException("be.shad.tsqb.values.CollectionTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<Short> class0 = Short.class;
      ProjectionTypeSafeValue<Short> projectionTypeSafeValue0 = new ProjectionTypeSafeValue<Short>((TypeSafeQuery) null, class0, "");
      CoalesceTypeSafeValue<Short> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Short>((TypeSafeQuery) null, projectionTypeSafeValue0);
      OrderByImpl orderByImpl0 = new OrderByImpl(coalesceTypeSafeValue0, true);
      coalesceTypeSafeValue0.or((TypeSafeValue<Short>) coalesceTypeSafeValue0);
      OrderByImpl orderByImpl1 = null;
      try {
        orderByImpl1 = new OrderByImpl(copyContext0, orderByImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      OrderByImpl orderByImpl0 = null;
      try {
        orderByImpl0 = new OrderByImpl(copyContext0, (OrderByImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.ordering.OrderByImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CustomTypeSafeValue<Object> customTypeSafeValue0 = new CustomTypeSafeValue<Object>((TypeSafeQuery) null, class0, "");
      CopyContext copyContext0 = new CopyContext();
      OrderByImpl orderByImpl0 = new OrderByImpl(customTypeSafeValue0, false);
      OrderByImpl orderByImpl1 = new OrderByImpl(copyContext0, orderByImpl0);
      assertFalse(orderByImpl1.equals((Object)orderByImpl0));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      OrderByImpl orderByImpl0 = new OrderByImpl((TypeSafeValue<?>) null, true);
      // Undeclared exception!
      try { 
        orderByImpl0.appendTo((HqlQuery) null, hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.ordering.OrderByImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CustomTypeSafeValue<Object> customTypeSafeValue0 = new CustomTypeSafeValue<Object>((TypeSafeQuery) null, class0, "");
      OrderByImpl orderByImpl0 = new OrderByImpl(customTypeSafeValue0, false);
      HqlQuery hqlQuery0 = new HqlQuery();
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl(0, false, false, false, false);
      orderByImpl0.appendTo(hqlQuery0, hqlQueryBuilderParamsImpl0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      OrderByImpl orderByImpl0 = new OrderByImpl((TypeSafeValue<?>) null, false);
      // Undeclared exception!
      try { 
        orderByImpl0.copy((CopyContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.ordering.OrderByImpl", e);
      }
  }
}
