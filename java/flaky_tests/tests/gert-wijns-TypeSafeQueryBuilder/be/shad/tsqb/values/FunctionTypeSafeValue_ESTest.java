/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 23:06:34 GMT 2022
 */

package be.shad.tsqb.values;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import be.shad.tsqb.query.TypeSafeQuery;
import be.shad.tsqb.query.TypeSafeQueryScopeValidator;
import be.shad.tsqb.query.copy.CopyContext;
import be.shad.tsqb.query.copy.Copyable;
import be.shad.tsqb.values.CoalesceTypeSafeValue;
import be.shad.tsqb.values.CollectionTypeSafeValue;
import be.shad.tsqb.values.CustomTypeSafeValue;
import be.shad.tsqb.values.DirectTypeSafeStringValue;
import be.shad.tsqb.values.DirectTypeSafeValue;
import be.shad.tsqb.values.EntityTypeSafeValue;
import be.shad.tsqb.values.FunctionTypeSafeValue;
import be.shad.tsqb.values.HqlQueryBuilderParams;
import be.shad.tsqb.values.HqlQueryBuilderParamsImpl;
import be.shad.tsqb.values.HqlQueryValue;
import be.shad.tsqb.values.NullIfTypeSafeValue;
import be.shad.tsqb.values.NullTypeSafeValue;
import be.shad.tsqb.values.ProjectionTypeSafeValue;
import be.shad.tsqb.values.TypeSafeValue;
import be.shad.tsqb.values.WrappedTypeSafeValue;
import java.time.Month;
import java.time.format.ResolverStyle;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionTypeSafeValue_ESTest extends FunctionTypeSafeValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeSafeQuery typeSafeQuery0 = null;
      TypeSafeQueryScopeValidator typeSafeQueryScopeValidator0 = mock(TypeSafeQueryScopeValidator.class, new ViolatedAssumptionAnswer());
      CopyContext copyContext0 = new CopyContext();
      Class<Byte> class0 = Byte.class;
      FunctionTypeSafeValue<Byte> functionTypeSafeValue0 = new FunctionTypeSafeValue<Byte>((TypeSafeQuery) null, "~T9Qv0A\"9er06UiG}w", class0);
      CopyContext copyContext1 = new CopyContext();
      Class<DirectTypeSafeStringValue> class1 = DirectTypeSafeStringValue.class;
      WrappedTypeSafeValue<DirectTypeSafeStringValue> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, "DR", class1, functionTypeSafeValue0);
      functionTypeSafeValue0.add((TypeSafeValue<DirectTypeSafeStringValue>) wrappedTypeSafeValue0);
      FunctionTypeSafeValue<Byte> functionTypeSafeValue1 = null;
      try {
        functionTypeSafeValue1 = new FunctionTypeSafeValue<Byte>(copyContext1, functionTypeSafeValue0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "", class0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      FunctionTypeSafeValue<Month> functionTypeSafeValue1 = null;
      try {
        functionTypeSafeValue1 = new FunctionTypeSafeValue<Month>((TypeSafeQuery) null, "", (TypeSafeValue<Month>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.FunctionTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "~T9Qv0A\"9er06iG}w", class0);
      // Undeclared exception!
      try { 
        functionTypeSafeValue0.copy((CopyContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.TypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Month> class0 = Month.class;
      DirectTypeSafeValue<Month> directTypeSafeValue0 = new DirectTypeSafeValue<Month>((TypeSafeQuery) null, class0);
      NullIfTypeSafeValue<Month> nullIfTypeSafeValue0 = new NullIfTypeSafeValue<Month>((TypeSafeQuery) null, directTypeSafeValue0, directTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      // Undeclared exception!
      try { 
        nullIfTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Value is null when transforming to query
         //
         verifyException("be.shad.tsqb.values.DirectTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "~T9Qv0A\"9er06iG}w", class0);
      Copyable copyable0 = null;
      try {
        copyable0 = new FunctionTypeSafeValue<Object>((CopyContext) null, functionTypeSafeValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.TypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      LinkedHashSet<ResolverStyle> linkedHashSet0 = new LinkedHashSet<ResolverStyle>();
      CopyContext copyContext1 = new CopyContext();
      Month month0 = Month.JUNE;
      DirectTypeSafeValue<Month> directTypeSafeValue0 = new DirectTypeSafeValue<Month>((TypeSafeQuery) null, month0);
      DirectTypeSafeValue<Month> directTypeSafeValue1 = new DirectTypeSafeValue<Month>(copyContext1, directTypeSafeValue0);
      FunctionTypeSafeValue<Month> functionTypeSafeValue0 = new FunctionTypeSafeValue<Month>((TypeSafeQuery) null, "", directTypeSafeValue0);
      CopyContext copyContext2 = new CopyContext();
      functionTypeSafeValue0.copy(copyContext2);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      // Undeclared exception!
      try { 
        functionTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.DirectTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "Yo{dY64ya-o]", class0);
      // Undeclared exception!
      try { 
        functionTypeSafeValue0.toHqlQueryValue((HqlQueryBuilderParams) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.FunctionTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      TypeSafeQuery typeSafeQuery0 = null;
      Class<Object> class0 = Object.class;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      CustomTypeSafeValue<Object> customTypeSafeValue0 = new CustomTypeSafeValue<Object>((TypeSafeQuery) null, class0, "t@y-)U(", linkedList0);
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "", customTypeSafeValue0);
      NullIfTypeSafeValue<Object> nullIfTypeSafeValue0 = new NullIfTypeSafeValue<Object>(copyContext0, functionTypeSafeValue0);
      FunctionTypeSafeValue<Object> functionTypeSafeValue1 = new FunctionTypeSafeValue<Object>(copyContext0, nullIfTypeSafeValue0);
      Class<Locale.FilteringMode> class1 = Locale.FilteringMode.class;
      FunctionTypeSafeValue<Locale.FilteringMode> functionTypeSafeValue2 = new FunctionTypeSafeValue<Locale.FilteringMode>((TypeSafeQuery) null, "", class1);
      TypeSafeQueryScopeValidator typeSafeQueryScopeValidator0 = mock(TypeSafeQueryScopeValidator.class, new ViolatedAssumptionAnswer());
      functionTypeSafeValue2.validateContainedInScope(typeSafeQueryScopeValidator0);
      Class<DirectTypeSafeStringValue> class2 = DirectTypeSafeStringValue.class;
      Class<Byte> class3 = Byte.class;
      LinkedHashSet<Byte> linkedHashSet0 = new LinkedHashSet<Byte>();
      try { 
        Integer.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Month> class0 = Month.class;
      CollectionTypeSafeValue<Month> collectionTypeSafeValue0 = new CollectionTypeSafeValue<Month>((TypeSafeQuery) null, class0);
      NullIfTypeSafeValue<Month> nullIfTypeSafeValue0 = new NullIfTypeSafeValue<Month>((TypeSafeQuery) null, collectionTypeSafeValue0, collectionTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      // Undeclared exception!
      try { 
        nullIfTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Collection is empty when transforming to query
         //
         verifyException("be.shad.tsqb.values.CollectionTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Month> class0 = Month.class;
      FunctionTypeSafeValue<Month> functionTypeSafeValue0 = new FunctionTypeSafeValue<Month>((TypeSafeQuery) null, "*JYiDo=O~*Q!PI5N5'", class0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      NullIfTypeSafeValue<Month> nullIfTypeSafeValue0 = new NullIfTypeSafeValue<Month>((TypeSafeQuery) null, functionTypeSafeValue0, functionTypeSafeValue0);
      HqlQueryValue hqlQueryValue0 = nullIfTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      assertEquals("nullif (,)", hqlQueryValue0.getHql());
      assertFalse(hqlQueryBuilderParamsImpl0.isRequiresLiterals());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<Object> class0 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "", class0);
      Class<Object> class1 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue1 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "8", class1);
      CopyContext copyContext1 = new CopyContext();
      FunctionTypeSafeValue<Object> functionTypeSafeValue2 = new FunctionTypeSafeValue<Object>(copyContext1, functionTypeSafeValue0);
      Class<Locale.FilteringMode> class2 = Locale.FilteringMode.class;
      FunctionTypeSafeValue<Locale.FilteringMode> functionTypeSafeValue3 = new FunctionTypeSafeValue<Locale.FilteringMode>((TypeSafeQuery) null, "DR", class2);
      TypeSafeQueryScopeValidator typeSafeQueryScopeValidator0 = mock(TypeSafeQueryScopeValidator.class, new ViolatedAssumptionAnswer());
      functionTypeSafeValue3.validateContainedInScope(typeSafeQueryScopeValidator0);
      CopyContext copyContext2 = new CopyContext();
      Class<Byte> class3 = Byte.class;
      FunctionTypeSafeValue<Byte> functionTypeSafeValue4 = new FunctionTypeSafeValue<Byte>((TypeSafeQuery) null, "DR", class3);
      CoalesceTypeSafeValue<Byte> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Byte>((TypeSafeQuery) null, functionTypeSafeValue4);
      FunctionTypeSafeValue<Byte> functionTypeSafeValue5 = new FunctionTypeSafeValue<Byte>(copyContext2, coalesceTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      hqlQueryBuilderParamsImpl0.setBuildingForDisplay(true);
      functionTypeSafeValue5.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      DirectTypeSafeStringValue directTypeSafeStringValue0 = new DirectTypeSafeStringValue((TypeSafeQuery) null);
      // Undeclared exception!
      try { 
        functionTypeSafeValue0.add(directTypeSafeStringValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.FunctionTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<Object> class0 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "", class0);
      FunctionTypeSafeValue<Object> functionTypeSafeValue1 = new FunctionTypeSafeValue<Object>(copyContext0, functionTypeSafeValue0);
      CopyContext copyContext1 = new CopyContext();
      DirectTypeSafeStringValue directTypeSafeStringValue0 = new DirectTypeSafeStringValue((TypeSafeQuery) null, "");
      DirectTypeSafeStringValue directTypeSafeStringValue1 = new DirectTypeSafeStringValue(copyContext1, directTypeSafeStringValue0);
      CopyContext copyContext2 = new CopyContext();
      Class<DirectTypeSafeStringValue> class1 = DirectTypeSafeStringValue.class;
      EntityTypeSafeValue<DirectTypeSafeStringValue> entityTypeSafeValue0 = new EntityTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, class1, functionTypeSafeValue0);
      EntityTypeSafeValue<DirectTypeSafeStringValue> entityTypeSafeValue1 = new EntityTypeSafeValue<DirectTypeSafeStringValue>(copyContext2, entityTypeSafeValue0);
      NullIfTypeSafeValue<DirectTypeSafeStringValue> nullIfTypeSafeValue0 = new NullIfTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, entityTypeSafeValue1, entityTypeSafeValue1);
      // Undeclared exception!
      try { 
        nullIfTypeSafeValue0.add(directTypeSafeStringValue1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.FunctionTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ProjectionTypeSafeValue<Object> projectionTypeSafeValue0 = new ProjectionTypeSafeValue<Object>((TypeSafeQuery) null, class0, "~T9Qv0A\"9er06iG}w");
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      CopyContext copyContext0 = new CopyContext();
      Class<Month> class1 = Month.class;
      FunctionTypeSafeValue<Month> functionTypeSafeValue0 = new FunctionTypeSafeValue<Month>((TypeSafeQuery) null, "qep8e6}I::m", class1);
      FunctionTypeSafeValue<Month> functionTypeSafeValue1 = new FunctionTypeSafeValue<Month>(copyContext0, functionTypeSafeValue0);
      CoalesceTypeSafeValue<Month> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Month>((TypeSafeQuery) null, functionTypeSafeValue1);
      CoalesceTypeSafeValue<Month> coalesceTypeSafeValue1 = coalesceTypeSafeValue0.or((TypeSafeValue<Month>) functionTypeSafeValue0);
      HqlQueryValue hqlQueryValue0 = coalesceTypeSafeValue1.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      assertEquals("coalesce (,)", hqlQueryValue0.getHql());
      assertFalse(hqlQueryBuilderParamsImpl0.isRequiresLiterals());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "ls+3}3o@}V", class0);
      // Undeclared exception!
      try { 
        functionTypeSafeValue0.equals("ls+3}3o@}V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.exceptions.EqualsNotAllowedException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, (String) null, class0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl(1087, true, false, true, true);
      functionTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      CopyContext copyContext0 = new CopyContext();
      CoalesceTypeSafeValue<Month> coalesceTypeSafeValue0 = null;
      try {
        coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Month>(copyContext0, (CoalesceTypeSafeValue<Month>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.TypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<Object> class0 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "", class0);
      FunctionTypeSafeValue<Object> functionTypeSafeValue1 = new FunctionTypeSafeValue<Object>(copyContext0, functionTypeSafeValue0);
      Class<Locale.FilteringMode> class1 = Locale.FilteringMode.class;
      FunctionTypeSafeValue<Locale.FilteringMode> functionTypeSafeValue2 = new FunctionTypeSafeValue<Locale.FilteringMode>((TypeSafeQuery) null, "H@mpY", class1);
      TypeSafeQueryScopeValidator typeSafeQueryScopeValidator0 = mock(TypeSafeQueryScopeValidator.class, new ViolatedAssumptionAnswer());
      functionTypeSafeValue2.validateContainedInScope(typeSafeQueryScopeValidator0);
      copyContext0.getOrOriginal((Object) "");
      Class<Month> class2 = Month.class;
      LinkedList<Month> linkedList0 = new LinkedList<Month>();
      Integer integer0 = new Integer((-499));
      CollectionTypeSafeValue<Month> collectionTypeSafeValue0 = new CollectionTypeSafeValue<Month>((TypeSafeQuery) null, class2, linkedList0, integer0);
      CollectionTypeSafeValue<Month> collectionTypeSafeValue1 = new CollectionTypeSafeValue<Month>(copyContext0, collectionTypeSafeValue0);
      CoalesceTypeSafeValue<Month> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Month>((TypeSafeQuery) null, collectionTypeSafeValue1);
      NullIfTypeSafeValue<Month> nullIfTypeSafeValue0 = new NullIfTypeSafeValue<Month>(copyContext0, coalesceTypeSafeValue0);
      TypeSafeQueryScopeValidator typeSafeQueryScopeValidator1 = mock(TypeSafeQueryScopeValidator.class, new ViolatedAssumptionAnswer());
      nullIfTypeSafeValue0.validateContainedInScope(typeSafeQueryScopeValidator1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Month> class0 = Month.class;
      CollectionTypeSafeValue<Month> collectionTypeSafeValue0 = new CollectionTypeSafeValue<Month>((TypeSafeQuery) null, class0);
      NullIfTypeSafeValue<Month> nullIfTypeSafeValue0 = new NullIfTypeSafeValue<Month>((TypeSafeQuery) null, collectionTypeSafeValue0, collectionTypeSafeValue0);
      // Undeclared exception!
      try { 
        nullIfTypeSafeValue0.validateContainedInScope((TypeSafeQueryScopeValidator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.FunctionTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      DirectTypeSafeValue<Object> directTypeSafeValue0 = new DirectTypeSafeValue<Object>((TypeSafeQuery) null, "~Woc{X_=");
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "~Woc{X_=", directTypeSafeValue0);
      FunctionTypeSafeValue<Object> functionTypeSafeValue1 = new FunctionTypeSafeValue<Object>(copyContext0, functionTypeSafeValue0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeSafeQuery typeSafeQuery0 = null;
      Class<DirectTypeSafeStringValue> class0 = DirectTypeSafeStringValue.class;
      FunctionTypeSafeValue<DirectTypeSafeStringValue> functionTypeSafeValue0 = new FunctionTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, "F8gnB uMJ s", class0);
      String string0 = "ZPR.$|X[tosh0f7Q";
      TypeSafeValue<Object> typeSafeValue0 = null;
      DirectTypeSafeStringValue directTypeSafeStringValue0 = new DirectTypeSafeStringValue((TypeSafeQuery) null);
      // Undeclared exception!
      try { 
        functionTypeSafeValue0.add(directTypeSafeStringValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.FunctionTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "~T9Qv0A\"9er06iG}w", class0);
      CopyContext copyContext0 = new CopyContext();
      Copyable copyable0 = functionTypeSafeValue0.copy(copyContext0);
      assertNotNull(copyable0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "", class0);
      functionTypeSafeValue0.add((TypeSafeValue<Double>) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "Attempting to get join restrictions for a 'from' proxy [", class0);
      functionTypeSafeValue0.validateContainedInScope((TypeSafeQueryScopeValidator) null);
      // Undeclared exception!
      try { 
        functionTypeSafeValue0.add((Object) "Attempting to get join restrictions for a 'from' proxy [");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.FunctionTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeSafeQuery typeSafeQuery0 = null;
      Class<DirectTypeSafeStringValue> class0 = DirectTypeSafeStringValue.class;
      FunctionTypeSafeValue<DirectTypeSafeStringValue> functionTypeSafeValue0 = new FunctionTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, "]H9~ ;9J\"_C($Q_", class0);
      functionTypeSafeValue0.validateContainedInScope((TypeSafeQueryScopeValidator) null);
      CoalesceTypeSafeValue<Object> coalesceTypeSafeValue0 = null;
      try {
        coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Object>((TypeSafeQuery) null, (TypeSafeValue<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.FunctionTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      CollectionTypeSafeValue<Integer> collectionTypeSafeValue0 = new CollectionTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      CoalesceTypeSafeValue<Integer> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Integer>((TypeSafeQuery) null, collectionTypeSafeValue0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "~T9Qv0A\"9er06UiG}w", class0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "Attempting to get join restrictions for a 'from' proxy [", class0);
      // Undeclared exception!
      try { 
        functionTypeSafeValue0.add((Object) "Attempting to get join restrictions for a 'from' proxy [");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.FunctionTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      TypeSafeQuery typeSafeQuery0 = null;
      Class<Object> class0 = Object.class;
      NullTypeSafeValue<Object> nullTypeSafeValue0 = new NullTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      CoalesceTypeSafeValue<Object> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Object>((TypeSafeQuery) null, nullTypeSafeValue0);
      // Undeclared exception!
      try { 
        coalesceTypeSafeValue0.or((Object) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.FunctionTypeSafeValue", e);
      }
  }
}
