/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 23:54:31 GMT 2022
 */

package be.shad.tsqb.values;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import be.shad.tsqb.query.TypeSafeQuery;
import be.shad.tsqb.query.copy.CopyContext;
import be.shad.tsqb.query.copy.Copyable;
import be.shad.tsqb.values.CoalesceTypeSafeValue;
import be.shad.tsqb.values.CollectionTypeSafeValue;
import be.shad.tsqb.values.CustomTypeSafeValue;
import be.shad.tsqb.values.DirectTypeSafeValue;
import be.shad.tsqb.values.DistinctTypeSafeValue;
import be.shad.tsqb.values.EntityTypeSafeValue;
import be.shad.tsqb.values.FunctionTypeSafeValue;
import be.shad.tsqb.values.TypeSafeValue;
import be.shad.tsqb.values.WrappedTypeSafeValue;
import java.time.temporal.ChronoField;
import java.util.Collection;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoalesceTypeSafeValue_ESTest extends CoalesceTypeSafeValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      DirectTypeSafeValue<Integer> directTypeSafeValue0 = new DirectTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      CoalesceTypeSafeValue<Integer> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Integer>((TypeSafeQuery) null, directTypeSafeValue0);
      Class<ChronoField> class1 = ChronoField.class;
      Class<Object> class2 = Object.class;
      CollectionTypeSafeValue<Object> collectionTypeSafeValue0 = new CollectionTypeSafeValue<Object>((TypeSafeQuery) null, class2);
      collectionTypeSafeValue0.getWrappedValue();
      CustomTypeSafeValue<ChronoField> customTypeSafeValue0 = new CustomTypeSafeValue<ChronoField>((TypeSafeQuery) null, class1, "", (Collection<Object>) null);
      CoalesceTypeSafeValue<ChronoField> coalesceTypeSafeValue1 = new CoalesceTypeSafeValue<ChronoField>((TypeSafeQuery) null, customTypeSafeValue0);
      Class<ChronoField> class3 = ChronoField.class;
      EntityTypeSafeValue<ChronoField> entityTypeSafeValue0 = new EntityTypeSafeValue<ChronoField>((TypeSafeQuery) null, class3, coalesceTypeSafeValue1);
      CoalesceTypeSafeValue<ChronoField> coalesceTypeSafeValue2 = coalesceTypeSafeValue1.or((TypeSafeValue<ChronoField>) entityTypeSafeValue0);
      CopyContext copyContext0 = new CopyContext();
      // Undeclared exception!
      try { 
        coalesceTypeSafeValue2.copy(copyContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      CustomTypeSafeValue<Integer> customTypeSafeValue0 = new CustomTypeSafeValue<Integer>((TypeSafeQuery) null, class0, "coalesce");
      CoalesceTypeSafeValue<Integer> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Integer>((TypeSafeQuery) null, customTypeSafeValue0);
      // Undeclared exception!
      try { 
        coalesceTypeSafeValue0.copy((CopyContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.TypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<Integer> class0 = Integer.class;
      CustomTypeSafeValue<Integer> customTypeSafeValue0 = new CustomTypeSafeValue<Integer>((TypeSafeQuery) null, class0, "RW;$a");
      CopyContext copyContext1 = new CopyContext();
      CoalesceTypeSafeValue<Integer> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Integer>((TypeSafeQuery) null, customTypeSafeValue0);
      EntityTypeSafeValue<Integer> entityTypeSafeValue0 = new EntityTypeSafeValue<Integer>((TypeSafeQuery) null, class0, coalesceTypeSafeValue0);
      CoalesceTypeSafeValue<Integer> coalesceTypeSafeValue1 = coalesceTypeSafeValue0.or((TypeSafeValue<Integer>) entityTypeSafeValue0);
      CoalesceTypeSafeValue<Integer> coalesceTypeSafeValue2 = null;
      try {
        coalesceTypeSafeValue2 = new CoalesceTypeSafeValue<Integer>(copyContext1, coalesceTypeSafeValue1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      DirectTypeSafeValue<Integer> directTypeSafeValue0 = new DirectTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      CoalesceTypeSafeValue<Integer> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Integer>((TypeSafeQuery) null, directTypeSafeValue0);
      CopyContext copyContext0 = new CopyContext();
      CoalesceTypeSafeValue<Object> coalesceTypeSafeValue1 = null;
      CoalesceTypeSafeValue<Object> coalesceTypeSafeValue2 = null;
      try {
        coalesceTypeSafeValue2 = new CoalesceTypeSafeValue<Object>(copyContext0, (CoalesceTypeSafeValue<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.TypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<Integer> class0 = Integer.class;
      CustomTypeSafeValue<Integer> customTypeSafeValue0 = new CustomTypeSafeValue<Integer>((TypeSafeQuery) null, class0, "RW;$a");
      CustomTypeSafeValue<Integer> customTypeSafeValue1 = new CustomTypeSafeValue<Integer>(copyContext0, customTypeSafeValue0);
      customTypeSafeValue1.copy(copyContext0);
      CoalesceTypeSafeValue<Integer> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Integer>((TypeSafeQuery) null, customTypeSafeValue1);
      Copyable copyable0 = coalesceTypeSafeValue0.copy(copyContext0);
      assertNotNull(copyable0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      DirectTypeSafeValue<Integer> directTypeSafeValue0 = new DirectTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      CoalesceTypeSafeValue<Integer> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Integer>((TypeSafeQuery) null, directTypeSafeValue0);
      CoalesceTypeSafeValue<Integer> coalesceTypeSafeValue1 = coalesceTypeSafeValue0.or((TypeSafeValue<Integer>) directTypeSafeValue0);
      assertSame(coalesceTypeSafeValue1, coalesceTypeSafeValue0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<Integer> class0 = Integer.class;
      CustomTypeSafeValue<Integer> customTypeSafeValue0 = new CustomTypeSafeValue<Integer>((TypeSafeQuery) null, class0, "be.shad.tsqb.exceptions.TsqbException");
      CustomTypeSafeValue<Integer> customTypeSafeValue1 = new CustomTypeSafeValue<Integer>(copyContext0, customTypeSafeValue0);
      CoalesceTypeSafeValue<Integer> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Integer>((TypeSafeQuery) null, customTypeSafeValue0);
      coalesceTypeSafeValue0.or((TypeSafeValue<Integer>) customTypeSafeValue1);
      Class<Object> class1 = Object.class;
      WrappedTypeSafeValue<Object> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<Object>((TypeSafeQuery) null, "be.shad.tsqb.exceptions.TsqbException", class1, customTypeSafeValue0);
      DistinctTypeSafeValue<Object> distinctTypeSafeValue0 = new DistinctTypeSafeValue<Object>((TypeSafeQuery) null, wrappedTypeSafeValue0);
      DistinctTypeSafeValue<Object> distinctTypeSafeValue1 = new DistinctTypeSafeValue<Object>(copyContext0, distinctTypeSafeValue0);
      CoalesceTypeSafeValue<Object> coalesceTypeSafeValue1 = new CoalesceTypeSafeValue<Object>((TypeSafeQuery) null, distinctTypeSafeValue1);
      CoalesceTypeSafeValue<Object> coalesceTypeSafeValue2 = new CoalesceTypeSafeValue<Object>(copyContext0, coalesceTypeSafeValue1);
      coalesceTypeSafeValue2.or((TypeSafeValue<Object>) distinctTypeSafeValue0);
      CoalesceTypeSafeValue<Object> coalesceTypeSafeValue3 = coalesceTypeSafeValue2.or((TypeSafeValue<Object>) coalesceTypeSafeValue1);
      assertSame(coalesceTypeSafeValue2, coalesceTypeSafeValue3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Class<Object> class1 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, ".>V(Y(", class1);
      EntityTypeSafeValue<Locale.FilteringMode> entityTypeSafeValue0 = new EntityTypeSafeValue<Locale.FilteringMode>((TypeSafeQuery) null, class0, functionTypeSafeValue0);
      EntityTypeSafeValue<Locale.FilteringMode> entityTypeSafeValue1 = new EntityTypeSafeValue<Locale.FilteringMode>(copyContext0, entityTypeSafeValue0);
      CoalesceTypeSafeValue<Locale.FilteringMode> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Locale.FilteringMode>((TypeSafeQuery) null, entityTypeSafeValue1);
      CoalesceTypeSafeValue<Locale.FilteringMode> coalesceTypeSafeValue1 = new CoalesceTypeSafeValue<Locale.FilteringMode>(copyContext0, coalesceTypeSafeValue0);
      CoalesceTypeSafeValue<Object> coalesceTypeSafeValue2 = new CoalesceTypeSafeValue<Object>((TypeSafeQuery) null, functionTypeSafeValue0);
      CoalesceTypeSafeValue<Object> coalesceTypeSafeValue3 = new CoalesceTypeSafeValue<Object>(copyContext0, coalesceTypeSafeValue2);
      // Undeclared exception!
      try { 
        coalesceTypeSafeValue3.or((Object) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.FunctionTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      DirectTypeSafeValue<Integer> directTypeSafeValue0 = new DirectTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      directTypeSafeValue0.getValue();
      CoalesceTypeSafeValue<Integer> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Integer>((TypeSafeQuery) null, directTypeSafeValue0);
      // Undeclared exception!
      try { 
        coalesceTypeSafeValue0.or((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.FunctionTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      DirectTypeSafeValue<Integer> directTypeSafeValue0 = new DirectTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      CoalesceTypeSafeValue<Integer> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Integer>((TypeSafeQuery) null, directTypeSafeValue0);
      CopyContext copyContext0 = new CopyContext();
      Copyable copyable0 = coalesceTypeSafeValue0.copy(copyContext0);
      assertNotNull(copyable0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      CustomTypeSafeValue<Integer> customTypeSafeValue0 = new CustomTypeSafeValue<Integer>((TypeSafeQuery) null, class0, "SkS64x*~^z]XlB");
      CoalesceTypeSafeValue<Integer> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Integer>((TypeSafeQuery) null, customTypeSafeValue0);
      CoalesceTypeSafeValue<Integer> coalesceTypeSafeValue1 = null;
      try {
        coalesceTypeSafeValue1 = new CoalesceTypeSafeValue<Integer>((TypeSafeQuery) null, (TypeSafeValue<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.FunctionTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CollectionTypeSafeValue<Object> collectionTypeSafeValue0 = new CollectionTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      CoalesceTypeSafeValue<Object> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Object>((TypeSafeQuery) null, collectionTypeSafeValue0);
      CopyContext copyContext0 = new CopyContext();
      CoalesceTypeSafeValue<Integer> coalesceTypeSafeValue1 = null;
      try {
        coalesceTypeSafeValue1 = new CoalesceTypeSafeValue<Integer>((TypeSafeQuery) null, (TypeSafeValue<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.FunctionTypeSafeValue", e);
      }
  }
}
