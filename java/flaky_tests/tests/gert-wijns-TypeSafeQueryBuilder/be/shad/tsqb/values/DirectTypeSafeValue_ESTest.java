/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 23:14:40 GMT 2022
 */

package be.shad.tsqb.values;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import be.shad.tsqb.query.JoinType;
import be.shad.tsqb.query.TypeSafeQuery;
import be.shad.tsqb.query.copy.CopyContext;
import be.shad.tsqb.query.copy.Copyable;
import be.shad.tsqb.values.DirectTypeSafeValue;
import be.shad.tsqb.values.HqlQueryBuilderParamsImpl;
import be.shad.tsqb.values.HqlQueryValue;
import be.shad.tsqb.values.HqlQueryValueImpl;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirectTypeSafeValue_ESTest extends DirectTypeSafeValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JoinType joinType0 = JoinType.Right;
      DirectTypeSafeValue<JoinType> directTypeSafeValue0 = new DirectTypeSafeValue<JoinType>((TypeSafeQuery) null, joinType0);
      directTypeSafeValue0.setNamedValue((Object) null);
      directTypeSafeValue0.getWrappedValue();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DirectTypeSafeValue<Object> directTypeSafeValue0 = new DirectTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      Object object0 = new Object();
      directTypeSafeValue0.setValue(object0);
      Object object1 = directTypeSafeValue0.getWrappedValue();
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DirectTypeSafeValue<Object> directTypeSafeValue0 = new DirectTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      // Undeclared exception!
      try { 
        directTypeSafeValue0.copy((CopyContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.TypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DirectTypeSafeValue<Object> directTypeSafeValue0 = new DirectTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      DirectTypeSafeValue<Object> directTypeSafeValue1 = null;
      try {
        directTypeSafeValue1 = new DirectTypeSafeValue<Object>((CopyContext) null, directTypeSafeValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.TypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DirectTypeSafeValue<Object> directTypeSafeValue0 = null;
      try {
        directTypeSafeValue0 = new DirectTypeSafeValue<Object>((TypeSafeQuery) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.DirectTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DirectTypeSafeValue<Object> directTypeSafeValue0 = new DirectTypeSafeValue<Object>((TypeSafeQuery) null, integer0);
      Object object0 = directTypeSafeValue0.getValue();
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<Object> class0 = Object.class;
      DirectTypeSafeValue<Object> directTypeSafeValue0 = new DirectTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      DirectTypeSafeValue<Object> directTypeSafeValue1 = new DirectTypeSafeValue<Object>(copyContext0, directTypeSafeValue0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      DirectTypeSafeValue<Integer> directTypeSafeValue0 = new DirectTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      // Undeclared exception!
      try { 
        directTypeSafeValue0.setNamedValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value must be of type [class java.lang.Integer] but was of type [class java.lang.Class].
         //
         verifyException("be.shad.tsqb.values.DirectTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      HqlQueryValue hqlQueryValue0 = HqlQueryValueImpl.hql("Tm", (Collection<Object>) null);
      DirectTypeSafeValue<Object> directTypeSafeValue0 = new DirectTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      directTypeSafeValue0.setNamedValue(hqlQueryValue0);
      HqlQueryValueImpl hqlQueryValueImpl0 = (HqlQueryValueImpl)directTypeSafeValue0.getValue();
      assertEquals("Tm", hqlQueryValueImpl0.getHql());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JoinType joinType0 = JoinType.Right;
      DirectTypeSafeValue<JoinType> directTypeSafeValue0 = new DirectTypeSafeValue<JoinType>((TypeSafeQuery) null, joinType0);
      directTypeSafeValue0.setNamedValue((Object) null);
      directTypeSafeValue0.getValue();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-2763));
      DirectTypeSafeValue<Integer> directTypeSafeValue0 = new DirectTypeSafeValue<Integer>((TypeSafeQuery) null, integer0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl((-2763), true, true, true, true);
      // Undeclared exception!
      try { 
        directTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.DirectTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DirectTypeSafeValue<Object> directTypeSafeValue0 = new DirectTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      // Undeclared exception!
      try { 
        directTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Value is null when transforming to query
         //
         verifyException("be.shad.tsqb.values.DirectTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<JoinType> class0 = JoinType.class;
      DirectTypeSafeValue<JoinType> directTypeSafeValue0 = new DirectTypeSafeValue<JoinType>((TypeSafeQuery) null, class0);
      CopyContext copyContext0 = new CopyContext();
      Copyable copyable0 = directTypeSafeValue0.copy(copyContext0);
      assertNotNull(copyable0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DirectTypeSafeValue<Object> directTypeSafeValue0 = new DirectTypeSafeValue<Object>((TypeSafeQuery) null, (Object) class0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      HqlQueryValueImpl hqlQueryValueImpl0 = directTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      assertEquals(":np1", hqlQueryValueImpl0.getHql());
  }
}
