/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 23:31:54 GMT 2022
 */

package be.shad.tsqb.values;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import be.shad.tsqb.query.TypeSafeQuery;
import be.shad.tsqb.query.TypeSafeQueryScopeValidator;
import be.shad.tsqb.query.copy.CopyContext;
import be.shad.tsqb.query.copy.Copyable;
import be.shad.tsqb.values.CaseTypeSafeValue;
import be.shad.tsqb.values.CoalesceTypeSafeValue;
import be.shad.tsqb.values.CollectionTypeSafeValue;
import be.shad.tsqb.values.CustomTypeSafeValue;
import be.shad.tsqb.values.DirectTypeSafeStringValue;
import be.shad.tsqb.values.DirectTypeSafeValue;
import be.shad.tsqb.values.FunctionTypeSafeValue;
import be.shad.tsqb.values.HqlQueryBuilderParamsImpl;
import be.shad.tsqb.values.HqlQueryValue;
import be.shad.tsqb.values.HqlQueryValueImpl;
import be.shad.tsqb.values.NullTypeSafeValue;
import be.shad.tsqb.values.OperationTypeSafeValue;
import be.shad.tsqb.values.ProjectionTypeSafeValue;
import be.shad.tsqb.values.TypeSafeValue;
import be.shad.tsqb.values.WrappedTypeSafeValue;
import java.time.format.FormatStyle;
import java.time.temporal.ChronoField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WrappedTypeSafeValue_ESTest extends WrappedTypeSafeValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<Object> class0 = Object.class;
      DirectTypeSafeValue<Object> directTypeSafeValue0 = new DirectTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      DirectTypeSafeValue<Object> directTypeSafeValue1 = new DirectTypeSafeValue<Object>(copyContext0, directTypeSafeValue0);
      WrappedTypeSafeValue<Object> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<Object>((TypeSafeQuery) null, "", directTypeSafeValue1);
      directTypeSafeValue1.setNamedValue(wrappedTypeSafeValue0);
      WrappedTypeSafeValue<Object> wrappedTypeSafeValue1 = null;
      try {
        wrappedTypeSafeValue1 = new WrappedTypeSafeValue<Object>(copyContext0, wrappedTypeSafeValue0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Float> class0 = Float.class;
      NullTypeSafeValue<Float> nullTypeSafeValue0 = new NullTypeSafeValue<Float>((TypeSafeQuery) null, class0);
      OperationTypeSafeValue.OperationTypeSafeValueBracketsPolicy operationTypeSafeValue_OperationTypeSafeValueBracketsPolicy0 = OperationTypeSafeValue.OperationTypeSafeValueBracketsPolicy.Always;
      OperationTypeSafeValue<Float> operationTypeSafeValue0 = new OperationTypeSafeValue<Float>((TypeSafeQuery) null, nullTypeSafeValue0, operationTypeSafeValue_OperationTypeSafeValueBracketsPolicy0);
      WrappedTypeSafeValue<Float> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<Float>((TypeSafeQuery) null, "A>T$!7(]Zu|qCx", operationTypeSafeValue0);
      operationTypeSafeValue0.add("A>T$!7(]Zu|qCx", wrappedTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      // Undeclared exception!
      try { 
        wrappedTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Float> class0 = Float.class;
      FunctionTypeSafeValue<Float> functionTypeSafeValue0 = new FunctionTypeSafeValue<Float>((TypeSafeQuery) null, "", class0);
      WrappedTypeSafeValue<Float> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<Float>((TypeSafeQuery) null, "", functionTypeSafeValue0);
      WrappedTypeSafeValue<DirectTypeSafeStringValue> wrappedTypeSafeValue1 = null;
      try {
        wrappedTypeSafeValue1 = new WrappedTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, "", (TypeSafeValue<DirectTypeSafeStringValue>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.WrappedTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Float> class0 = Float.class;
      FunctionTypeSafeValue<Float> functionTypeSafeValue0 = new FunctionTypeSafeValue<Float>((TypeSafeQuery) null, "", class0);
      WrappedTypeSafeValue<Float> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<Float>((TypeSafeQuery) null, "", functionTypeSafeValue0);
      CopyContext copyContext0 = new CopyContext();
      WrappedTypeSafeValue<DirectTypeSafeStringValue> wrappedTypeSafeValue1 = null;
      try {
        wrappedTypeSafeValue1 = new WrappedTypeSafeValue<DirectTypeSafeStringValue>(copyContext0, (WrappedTypeSafeValue<DirectTypeSafeStringValue>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.TypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Float> class0 = Float.class;
      NullTypeSafeValue<Float> nullTypeSafeValue0 = new NullTypeSafeValue<Float>((TypeSafeQuery) null, class0);
      OperationTypeSafeValue.OperationTypeSafeValueBracketsPolicy operationTypeSafeValue_OperationTypeSafeValueBracketsPolicy0 = OperationTypeSafeValue.OperationTypeSafeValueBracketsPolicy.Always;
      OperationTypeSafeValue<Float> operationTypeSafeValue0 = new OperationTypeSafeValue<Float>((TypeSafeQuery) null, nullTypeSafeValue0, operationTypeSafeValue_OperationTypeSafeValueBracketsPolicy0);
      WrappedTypeSafeValue<Float> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<Float>((TypeSafeQuery) null, "A>T$!7(]Zu|qCx", operationTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      HqlQueryValue hqlQueryValue0 = wrappedTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      assertEquals("A>T$!7(]Zu|qCx((NULLIF(1,1)))", hqlQueryValue0.getHql());
      
      TypeSafeQueryScopeValidator typeSafeQueryScopeValidator0 = mock(TypeSafeQueryScopeValidator.class, new ViolatedAssumptionAnswer());
      operationTypeSafeValue0.validateContainedInScope(typeSafeQueryScopeValidator0);
      operationTypeSafeValue0.add("H", nullTypeSafeValue0);
      CopyContext copyContext0 = new CopyContext();
      wrappedTypeSafeValue0.copy(copyContext0);
      wrappedTypeSafeValue0.copy(copyContext0);
      Class<Object> class1 = Object.class;
      NullTypeSafeValue<Object> nullTypeSafeValue1 = new NullTypeSafeValue<Object>((TypeSafeQuery) null, class1);
      NullTypeSafeValue<Object> nullTypeSafeValue2 = new NullTypeSafeValue<Object>(copyContext0, nullTypeSafeValue1);
      WrappedTypeSafeValue<Object> wrappedTypeSafeValue1 = new WrappedTypeSafeValue<Object>((TypeSafeQuery) null, (String) null, nullTypeSafeValue2);
      nullTypeSafeValue1.copy(copyContext0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl1 = new HqlQueryBuilderParamsImpl();
      hqlQueryBuilderParamsImpl1.setSelectingCount(false);
      Class<Float> class2 = Float.class;
      FunctionTypeSafeValue<Float> functionTypeSafeValue0 = new FunctionTypeSafeValue<Float>((TypeSafeQuery) null, (String) null, class2);
      CoalesceTypeSafeValue<Float> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Float>((TypeSafeQuery) null, functionTypeSafeValue0);
      WrappedTypeSafeValue<Float> wrappedTypeSafeValue2 = new WrappedTypeSafeValue<Float>((TypeSafeQuery) null, (String) null, coalesceTypeSafeValue0);
      TypeSafeQueryScopeValidator typeSafeQueryScopeValidator1 = mock(TypeSafeQueryScopeValidator.class, new ViolatedAssumptionAnswer());
      wrappedTypeSafeValue2.validateContainedInScope(typeSafeQueryScopeValidator1);
      CopyContext copyContext1 = new CopyContext();
      wrappedTypeSafeValue1.copy(copyContext1);
      Class<DirectTypeSafeStringValue> class3 = DirectTypeSafeStringValue.class;
      WrappedTypeSafeValue<DirectTypeSafeStringValue> wrappedTypeSafeValue3 = new WrappedTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, (String) null, class3, nullTypeSafeValue2);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl2 = new HqlQueryBuilderParamsImpl((-94), false, false, false, false);
      HqlQueryValue hqlQueryValue1 = wrappedTypeSafeValue3.toHqlQueryValue(hqlQueryBuilderParamsImpl2);
      assertEquals("NULLIF(1,1)", hqlQueryValue1.getHql());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = new Object();
      DirectTypeSafeValue<Object> directTypeSafeValue0 = new DirectTypeSafeValue<Object>((TypeSafeQuery) null, object0);
      WrappedTypeSafeValue<Object> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<Object>((TypeSafeQuery) null, (String) null, class0, directTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      HqlQueryValue hqlQueryValue0 = wrappedTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      assertEquals(":np1", hqlQueryValue0.getHql());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeSafeQuery typeSafeQuery0 = null;
      String string0 = "A>T$!7(]Zu|qCx";
      Class<Float> class0 = Float.class;
      NullTypeSafeValue<Float> nullTypeSafeValue0 = new NullTypeSafeValue<Float>((TypeSafeQuery) null, class0);
      OperationTypeSafeValue.OperationTypeSafeValueBracketsPolicy operationTypeSafeValue_OperationTypeSafeValueBracketsPolicy0 = OperationTypeSafeValue.OperationTypeSafeValueBracketsPolicy.Always;
      OperationTypeSafeValue<Float> operationTypeSafeValue0 = new OperationTypeSafeValue<Float>((TypeSafeQuery) null, nullTypeSafeValue0, operationTypeSafeValue_OperationTypeSafeValueBracketsPolicy0);
      WrappedTypeSafeValue<Float> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<Float>((TypeSafeQuery) null, "A>T$!7(]Zu|qCx", operationTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      wrappedTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      operationTypeSafeValue0.add("A>T$!7(]Zu|qCx", wrappedTypeSafeValue0);
      CopyContext copyContext0 = new CopyContext();
      // Undeclared exception!
      try { 
        wrappedTypeSafeValue0.copy(copyContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<ChronoField> class0 = ChronoField.class;
      WrappedTypeSafeValue<ChronoField> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<ChronoField>((TypeSafeQuery) null, "%}f*e\"Et88mfl4MR", class0, (TypeSafeValue<?>) null);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      // Undeclared exception!
      try { 
        wrappedTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.WrappedTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<Long> class0 = Long.class;
      CollectionTypeSafeValue<Long> collectionTypeSafeValue0 = new CollectionTypeSafeValue<Long>((TypeSafeQuery) null, class0);
      WrappedTypeSafeValue<Long> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<Long>((TypeSafeQuery) null, "TLCt)!%q0G~E@,2$S a", collectionTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      Class<DirectTypeSafeStringValue> class1 = DirectTypeSafeStringValue.class;
      WrappedTypeSafeValue<DirectTypeSafeStringValue> wrappedTypeSafeValue1 = new WrappedTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, "TLCt)!%q0G~E@,2$S a", class1, collectionTypeSafeValue0);
      wrappedTypeSafeValue1.copy(copyContext0);
      // Undeclared exception!
      try { 
        wrappedTypeSafeValue1.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Collection is empty when transforming to query
         //
         verifyException("be.shad.tsqb.values.CollectionTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Float> class0 = Float.class;
      FunctionTypeSafeValue<Float> functionTypeSafeValue0 = new FunctionTypeSafeValue<Float>((TypeSafeQuery) null, "-3Qs1uOLW^", class0);
      WrappedTypeSafeValue<Float> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<Float>((TypeSafeQuery) null, "-3Qs1uOLW^", functionTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      HqlQueryValue hqlQueryValue0 = wrappedTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      assertEquals("-3Qs1uOLW^()", hqlQueryValue0.getHql());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Float> class0 = Float.class;
      NullTypeSafeValue<Float> nullTypeSafeValue0 = new NullTypeSafeValue<Float>((TypeSafeQuery) null, class0);
      OperationTypeSafeValue.OperationTypeSafeValueBracketsPolicy operationTypeSafeValue_OperationTypeSafeValueBracketsPolicy0 = OperationTypeSafeValue.OperationTypeSafeValueBracketsPolicy.Always;
      OperationTypeSafeValue<Float> operationTypeSafeValue0 = new OperationTypeSafeValue<Float>((TypeSafeQuery) null, nullTypeSafeValue0, operationTypeSafeValue_OperationTypeSafeValueBracketsPolicy0);
      WrappedTypeSafeValue<Float> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<Float>((TypeSafeQuery) null, "A>T$!7(]Zu|qCx", operationTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      wrappedTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      TypeSafeQueryScopeValidator typeSafeQueryScopeValidator0 = mock(TypeSafeQueryScopeValidator.class, new ViolatedAssumptionAnswer());
      operationTypeSafeValue0.validateContainedInScope(typeSafeQueryScopeValidator0);
      operationTypeSafeValue0.add("", nullTypeSafeValue0);
      CopyContext copyContext0 = new CopyContext();
      wrappedTypeSafeValue0.copy(copyContext0);
      wrappedTypeSafeValue0.copy(copyContext0);
      Class<Object> class1 = Object.class;
      NullTypeSafeValue<Object> nullTypeSafeValue1 = new NullTypeSafeValue<Object>((TypeSafeQuery) null, class1);
      NullTypeSafeValue<Object> nullTypeSafeValue2 = new NullTypeSafeValue<Object>(copyContext0, nullTypeSafeValue1);
      WrappedTypeSafeValue<Object> wrappedTypeSafeValue1 = new WrappedTypeSafeValue<Object>((TypeSafeQuery) null, (String) null, nullTypeSafeValue2);
      nullTypeSafeValue1.copy(copyContext0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl1 = new HqlQueryBuilderParamsImpl();
      boolean boolean0 = false;
      hqlQueryBuilderParamsImpl1.setSelectingCount(false);
      hqlQueryBuilderParamsImpl1.setBuildingForDisplay(true);
      nullTypeSafeValue1.toHqlQueryValue(hqlQueryBuilderParamsImpl1);
      // Undeclared exception!
      try { 
        wrappedTypeSafeValue1.validateContainedInScope((TypeSafeQueryScopeValidator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.WrappedTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<DirectTypeSafeStringValue> class0 = DirectTypeSafeStringValue.class;
      DirectTypeSafeValue<DirectTypeSafeStringValue> directTypeSafeValue0 = new DirectTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, class0);
      WrappedTypeSafeValue<DirectTypeSafeStringValue> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, "", directTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      // Undeclared exception!
      try { 
        wrappedTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Value is null when transforming to query
         //
         verifyException("be.shad.tsqb.values.DirectTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      TypeSafeQuery typeSafeQuery0 = null;
      String string0 = "";
      Class<DirectTypeSafeStringValue> class0 = DirectTypeSafeStringValue.class;
      Class<FormatStyle> class1 = FormatStyle.class;
      DirectTypeSafeValue<FormatStyle> directTypeSafeValue0 = new DirectTypeSafeValue<FormatStyle>((TypeSafeQuery) null, class1);
      DirectTypeSafeValue<FormatStyle> directTypeSafeValue1 = new DirectTypeSafeValue<FormatStyle>(copyContext0, directTypeSafeValue0);
      WrappedTypeSafeValue<DirectTypeSafeStringValue> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, "", class0, directTypeSafeValue1);
      Object object0 = new Object();
      directTypeSafeValue0.getValue();
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      // Undeclared exception!
      try { 
        wrappedTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Value is null when transforming to query
         //
         verifyException("be.shad.tsqb.values.DirectTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ProjectionTypeSafeValue<Float> projectionTypeSafeValue0 = new ProjectionTypeSafeValue<Float>((TypeSafeQuery) null, class0, (String) null);
      WrappedTypeSafeValue<Float> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<Float>((TypeSafeQuery) null, (String) null, projectionTypeSafeValue0);
      // Undeclared exception!
      try { 
        wrappedTypeSafeValue0.copy((CopyContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<Object> class0 = Object.class;
      CaseTypeSafeValue<Object> caseTypeSafeValue0 = new CaseTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      WrappedTypeSafeValue<Object> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<Object>((TypeSafeQuery) null, "1M-I]a2y<]HD}S", caseTypeSafeValue0);
      caseTypeSafeValue0.copy(copyContext0);
      Copyable copyable0 = wrappedTypeSafeValue0.copy(copyContext0);
      Long long0 = new Long(3521L);
      Long long1 = Long.getLong("1M-I]a2y<]HD}S", long0);
      DirectTypeSafeStringValue directTypeSafeStringValue0 = new DirectTypeSafeStringValue((TypeSafeQuery) null, "1M-I]a2y<]HD}S");
      copyContext0.put((Object) long1, directTypeSafeStringValue0);
      WrappedTypeSafeValue<Object> wrappedTypeSafeValue1 = new WrappedTypeSafeValue<Object>(copyContext0, wrappedTypeSafeValue0);
      TypeSafeQueryScopeValidator typeSafeQueryScopeValidator0 = mock(TypeSafeQueryScopeValidator.class, new ViolatedAssumptionAnswer());
      wrappedTypeSafeValue1.validateContainedInScope(typeSafeQueryScopeValidator0);
      wrappedTypeSafeValue1.copy(copyContext0);
      Class<DirectTypeSafeStringValue> class1 = DirectTypeSafeStringValue.class;
      WrappedTypeSafeValue<DirectTypeSafeStringValue> wrappedTypeSafeValue2 = new WrappedTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, "1M-I]a2y<]HD}S", class1, caseTypeSafeValue0);
      Copyable copyable1 = wrappedTypeSafeValue2.copy(copyContext0);
      assertNotSame(copyable1, copyable0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Float> class0 = Float.class;
      FunctionTypeSafeValue<Float> functionTypeSafeValue0 = new FunctionTypeSafeValue<Float>((TypeSafeQuery) null, "", class0);
      WrappedTypeSafeValue<Float> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<Float>((TypeSafeQuery) null, "", functionTypeSafeValue0);
      CopyContext copyContext0 = new CopyContext();
      Copyable copyable0 = wrappedTypeSafeValue0.copy(copyContext0);
      assertNotNull(copyable0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) class0;
      objectArray0[7] = (Object) class0;
      HqlQueryValue hqlQueryValue0 = HqlQueryValueImpl.hql("/KF$zk\"Tt9%Yv\ny{e", objectArray0);
      CustomTypeSafeValue<Integer> customTypeSafeValue0 = new CustomTypeSafeValue<Integer>((TypeSafeQuery) null, class0, hqlQueryValue0);
      WrappedTypeSafeValue<Integer> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<Integer>((TypeSafeQuery) null, (String) null, customTypeSafeValue0);
      WrappedTypeSafeValue<Integer> wrappedTypeSafeValue1 = new WrappedTypeSafeValue<Integer>(copyContext0, wrappedTypeSafeValue0);
      TypeSafeQueryScopeValidator typeSafeQueryScopeValidator0 = mock(TypeSafeQueryScopeValidator.class, new ViolatedAssumptionAnswer());
      wrappedTypeSafeValue1.validateContainedInScope(typeSafeQueryScopeValidator0);
      assertNotSame(wrappedTypeSafeValue1, wrappedTypeSafeValue0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Float> class0 = Float.class;
      FunctionTypeSafeValue<Float> functionTypeSafeValue0 = new FunctionTypeSafeValue<Float>((TypeSafeQuery) null, "", class0);
      CopyContext copyContext0 = new CopyContext();
      Class<Object> class1 = Object.class;
      WrappedTypeSafeValue<Object> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<Object>((TypeSafeQuery) null, "", class1, functionTypeSafeValue0);
      WrappedTypeSafeValue<Object> wrappedTypeSafeValue1 = new WrappedTypeSafeValue<Object>(copyContext0, wrappedTypeSafeValue0);
      WrappedTypeSafeValue<Object> wrappedTypeSafeValue2 = new WrappedTypeSafeValue<Object>(copyContext0, wrappedTypeSafeValue0);
      // Undeclared exception!
      try { 
        wrappedTypeSafeValue2.validateContainedInScope((TypeSafeQueryScopeValidator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.WrappedTypeSafeValue", e);
      }
  }
}
