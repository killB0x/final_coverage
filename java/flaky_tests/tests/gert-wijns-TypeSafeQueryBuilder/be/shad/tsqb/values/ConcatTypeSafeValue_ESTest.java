/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 23:03:20 GMT 2022
 */

package be.shad.tsqb.values;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import be.shad.tsqb.query.TypeSafeQuery;
import be.shad.tsqb.query.TypeSafeQueryScopeValidator;
import be.shad.tsqb.query.copy.CopyContext;
import be.shad.tsqb.query.copy.Copyable;
import be.shad.tsqb.values.CaseTypeSafeValue;
import be.shad.tsqb.values.CollectionTypeSafeValue;
import be.shad.tsqb.values.ConcatTypeSafeValue;
import be.shad.tsqb.values.CustomTypeSafeValue;
import be.shad.tsqb.values.DirectTypeSafeStringValue;
import be.shad.tsqb.values.DirectTypeSafeValue;
import be.shad.tsqb.values.FunctionTypeSafeValue;
import be.shad.tsqb.values.HqlQueryBuilderParamsImpl;
import be.shad.tsqb.values.HqlQueryValue;
import be.shad.tsqb.values.HqlQueryValueImpl;
import be.shad.tsqb.values.NullIfTypeSafeValue;
import be.shad.tsqb.values.NullTypeSafeValue;
import be.shad.tsqb.values.ProjectionTypeSafeValue;
import be.shad.tsqb.values.TypeSafeValue;
import be.shad.tsqb.values.WrappedTypeSafeValue;
import java.time.temporal.ChronoField;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConcatTypeSafeValue_ESTest extends ConcatTypeSafeValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      concatTypeSafeValue0.append((TypeSafeValue<?>) null);
      // Undeclared exception!
      try { 
        concatTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.ConcatTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      concatTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      Class<DirectTypeSafeStringValue> class0 = DirectTypeSafeStringValue.class;
      WrappedTypeSafeValue<DirectTypeSafeStringValue> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, "pH>Rh!76c+", class0, concatTypeSafeValue0);
      ConcatTypeSafeValue concatTypeSafeValue1 = concatTypeSafeValue0.append((TypeSafeValue<?>) wrappedTypeSafeValue0);
      Class<Object> class1 = Object.class;
      DirectTypeSafeValue<Object> directTypeSafeValue0 = new DirectTypeSafeValue<Object>((TypeSafeQuery) null, class1);
      concatTypeSafeValue1.append((TypeSafeValue<?>) directTypeSafeValue0);
      // Undeclared exception!
      try { 
        concatTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      DirectTypeSafeStringValue directTypeSafeStringValue0 = new DirectTypeSafeStringValue((TypeSafeQuery) null);
      DirectTypeSafeValue<DirectTypeSafeStringValue> directTypeSafeValue0 = new DirectTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, directTypeSafeStringValue0);
      ConcatTypeSafeValue concatTypeSafeValue1 = concatTypeSafeValue0.append((TypeSafeValue<?>) directTypeSafeValue0);
      concatTypeSafeValue1.append((TypeSafeValue<?>) concatTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl((-1), false, false, false, true);
      // Undeclared exception!
      try { 
        concatTypeSafeValue1.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      CopyContext copyContext0 = new CopyContext();
      Class<Object> class0 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "be.shad.tsqb.values.ConcatTypeSafeValue", class0);
      FunctionTypeSafeValue<Object> functionTypeSafeValue1 = new FunctionTypeSafeValue<Object>(copyContext0, functionTypeSafeValue0);
      NullIfTypeSafeValue<Object> nullIfTypeSafeValue0 = new NullIfTypeSafeValue<Object>((TypeSafeQuery) null, functionTypeSafeValue1, functionTypeSafeValue0);
      WrappedTypeSafeValue<Object> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<Object>((TypeSafeQuery) null, "%K[BoMK`LGj", nullIfTypeSafeValue0);
      ConcatTypeSafeValue concatTypeSafeValue1 = concatTypeSafeValue0.append((TypeSafeValue<?>) wrappedTypeSafeValue0);
      ConcatTypeSafeValue concatTypeSafeValue2 = new ConcatTypeSafeValue(copyContext0, concatTypeSafeValue1);
      TypeSafeQueryScopeValidator typeSafeQueryScopeValidator0 = mock(TypeSafeQueryScopeValidator.class, new ViolatedAssumptionAnswer());
      concatTypeSafeValue2.validateContainedInScope(typeSafeQueryScopeValidator0);
      // Undeclared exception!
      try { 
        concatTypeSafeValue0.validateContainedInScope((TypeSafeQueryScopeValidator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.ConcatTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      CopyContext copyContext0 = new CopyContext();
      ConcatTypeSafeValue concatTypeSafeValue1 = new ConcatTypeSafeValue(copyContext0, concatTypeSafeValue0);
      ConcatTypeSafeValue concatTypeSafeValue2 = new ConcatTypeSafeValue(copyContext0, concatTypeSafeValue1);
      DirectTypeSafeStringValue directTypeSafeStringValue0 = new DirectTypeSafeStringValue((TypeSafeQuery) null);
      copyContext0.getOrOriginal(directTypeSafeStringValue0);
      concatTypeSafeValue1.validateContainedInScope((TypeSafeQueryScopeValidator) null);
      concatTypeSafeValue0.validateContainedInScope((TypeSafeQueryScopeValidator) null);
      hqlQueryBuilderParamsImpl0.createNamedParameter();
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl1 = new HqlQueryBuilderParamsImpl((-265), true, true, true, false);
      hqlQueryBuilderParamsImpl0.createNamedParameter();
      concatTypeSafeValue1.toHqlQueryValue(hqlQueryBuilderParamsImpl1);
      hqlQueryBuilderParamsImpl0.setRequiresLiterals(true);
      concatTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl1);
      ConcatTypeSafeValue concatTypeSafeValue3 = new ConcatTypeSafeValue(copyContext0, concatTypeSafeValue1);
      concatTypeSafeValue0.append((TypeSafeValue<?>) directTypeSafeStringValue0);
      concatTypeSafeValue3.append((TypeSafeValue<?>) concatTypeSafeValue2);
      // Undeclared exception!
      try { 
        concatTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Value is null when transforming to query
         //
         verifyException("be.shad.tsqb.values.DirectTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      HqlQueryValueImpl hqlQueryValueImpl0 = new HqlQueryValueImpl();
      Class<DirectTypeSafeStringValue> class0 = DirectTypeSafeStringValue.class;
      WrappedTypeSafeValue<DirectTypeSafeStringValue> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, "t\"MmI6dlPp,&", class0, concatTypeSafeValue0);
      ConcatTypeSafeValue concatTypeSafeValue1 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      concatTypeSafeValue1.append((TypeSafeValue<?>) concatTypeSafeValue0);
      HqlQueryValue hqlQueryValue0 = concatTypeSafeValue1.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      assertEquals("concat()", hqlQueryValue0.getHql());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<String> class0 = String.class;
      NullTypeSafeValue<String> nullTypeSafeValue0 = new NullTypeSafeValue<String>((TypeSafeQuery) null, class0);
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue(copyContext0, nullTypeSafeValue0);
      ConcatTypeSafeValue concatTypeSafeValue1 = new ConcatTypeSafeValue(copyContext0, concatTypeSafeValue0);
      DirectTypeSafeStringValue directTypeSafeStringValue0 = new DirectTypeSafeStringValue((TypeSafeQuery) null);
      copyContext0.getOrOriginal(directTypeSafeStringValue0);
      TypeSafeQueryScopeValidator typeSafeQueryScopeValidator0 = mock(TypeSafeQueryScopeValidator.class, new ViolatedAssumptionAnswer());
      concatTypeSafeValue0.validateContainedInScope(typeSafeQueryScopeValidator0);
      concatTypeSafeValue0.validateContainedInScope((TypeSafeQueryScopeValidator) null);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl((-265), false, false, false, true);
      hqlQueryBuilderParamsImpl0.createNamedParameter();
      hqlQueryBuilderParamsImpl0.createNamedParameter();
      concatTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      ConcatTypeSafeValue concatTypeSafeValue2 = concatTypeSafeValue1.append((TypeSafeValue<?>) concatTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl1 = new HqlQueryBuilderParamsImpl((-537), true, false, false, false);
      HqlQueryValue hqlQueryValue0 = concatTypeSafeValue2.toHqlQueryValue(hqlQueryBuilderParamsImpl1);
      assertEquals("concat()", hqlQueryValue0.getHql());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      HqlQueryValue hqlQueryValue0 = concatTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      assertEquals("", hqlQueryValue0.getHql());
      
      Class<DirectTypeSafeStringValue> class0 = DirectTypeSafeStringValue.class;
      WrappedTypeSafeValue<DirectTypeSafeStringValue> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, "pH>Rh!76c+", class0, concatTypeSafeValue0);
      ConcatTypeSafeValue concatTypeSafeValue1 = concatTypeSafeValue0.append((TypeSafeValue<?>) wrappedTypeSafeValue0);
      // Undeclared exception!
      try { 
        concatTypeSafeValue1.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      TypeSafeQueryScopeValidator typeSafeQueryScopeValidator0 = mock(TypeSafeQueryScopeValidator.class, new ViolatedAssumptionAnswer());
      concatTypeSafeValue0.validateContainedInScope(typeSafeQueryScopeValidator0);
      // Undeclared exception!
      try { 
        concatTypeSafeValue0.copy((CopyContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.TypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<String> class0 = String.class;
      CaseTypeSafeValue<String> caseTypeSafeValue0 = new CaseTypeSafeValue<String>((TypeSafeQuery) null, class0);
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue(copyContext0, caseTypeSafeValue0);
      TypeSafeQueryScopeValidator typeSafeQueryScopeValidator0 = mock(TypeSafeQueryScopeValidator.class, new ViolatedAssumptionAnswer());
      concatTypeSafeValue0.validateContainedInScope(typeSafeQueryScopeValidator0);
      ConcatTypeSafeValue concatTypeSafeValue1 = new ConcatTypeSafeValue(copyContext0, concatTypeSafeValue0);
      DirectTypeSafeStringValue directTypeSafeStringValue0 = new DirectTypeSafeStringValue((TypeSafeQuery) null);
      DirectTypeSafeStringValue directTypeSafeStringValue1 = copyContext0.getOrOriginal(directTypeSafeStringValue0);
      TypeSafeQueryScopeValidator typeSafeQueryScopeValidator1 = mock(TypeSafeQueryScopeValidator.class, new ViolatedAssumptionAnswer());
      concatTypeSafeValue1.append((TypeSafeValue<?>) directTypeSafeStringValue1);
      concatTypeSafeValue1.validateContainedInScope(typeSafeQueryScopeValidator1);
      // Undeclared exception!
      try { 
        concatTypeSafeValue1.validateContainedInScope((TypeSafeQueryScopeValidator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.ConcatTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      CopyContext copyContext0 = new CopyContext();
      Class<Object> class0 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "be.shad.tsqb.values.ConcatTypeSafeValue", class0);
      FunctionTypeSafeValue<Object> functionTypeSafeValue1 = new FunctionTypeSafeValue<Object>(copyContext0, functionTypeSafeValue0);
      NullIfTypeSafeValue<Object> nullIfTypeSafeValue0 = new NullIfTypeSafeValue<Object>((TypeSafeQuery) null, functionTypeSafeValue1, functionTypeSafeValue0);
      WrappedTypeSafeValue<Object> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<Object>((TypeSafeQuery) null, "%K[BoMK`LGj", nullIfTypeSafeValue0);
      concatTypeSafeValue0.append((TypeSafeValue<?>) wrappedTypeSafeValue0);
      concatTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      // Undeclared exception!
      try { 
        concatTypeSafeValue0.validateContainedInScope((TypeSafeQueryScopeValidator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.ConcatTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      concatTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      ConcatTypeSafeValue concatTypeSafeValue1 = null;
      try {
        concatTypeSafeValue1 = new ConcatTypeSafeValue((CopyContext) null, concatTypeSafeValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.TypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      Class<Object> class0 = Object.class;
      CaseTypeSafeValue<Object> caseTypeSafeValue0 = new CaseTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      ConcatTypeSafeValue concatTypeSafeValue1 = concatTypeSafeValue0.append((TypeSafeValue<?>) caseTypeSafeValue0);
      CopyContext copyContext0 = new CopyContext();
      Copyable copyable0 = concatTypeSafeValue1.copy(copyContext0);
      assertNotSame(concatTypeSafeValue1, copyable0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<String> class0 = String.class;
      HqlQueryValueImpl hqlQueryValueImpl0 = new HqlQueryValueImpl("pG");
      CustomTypeSafeValue<String> customTypeSafeValue0 = new CustomTypeSafeValue<String>((TypeSafeQuery) null, class0, hqlQueryValueImpl0);
      CustomTypeSafeValue<String> customTypeSafeValue1 = new CustomTypeSafeValue<String>(copyContext0, customTypeSafeValue0);
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue(copyContext0, customTypeSafeValue1);
      ConcatTypeSafeValue concatTypeSafeValue1 = new ConcatTypeSafeValue(copyContext0, concatTypeSafeValue0);
      ConcatTypeSafeValue concatTypeSafeValue2 = concatTypeSafeValue1.append((TypeSafeValue<?>) customTypeSafeValue1);
      assertSame(concatTypeSafeValue1, concatTypeSafeValue2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      // Undeclared exception!
      try { 
        concatTypeSafeValue0.append("M&uwvfLwY]+(=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.ConcatTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      hqlQueryBuilderParamsImpl0.setBuildingForDisplay(true);
      hqlQueryBuilderParamsImpl0.setBuildingForDisplay(true);
      hqlQueryBuilderParamsImpl0.setBuildingForDisplay(false);
      hqlQueryBuilderParamsImpl0.setBuildingForDisplay(false);
      HqlQueryBuilderParamsImpl.builder();
      hqlQueryBuilderParamsImpl0.setCreatingOrderingBy(false);
      concatTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      String string0 = "_nHgaG}q18";
      // Undeclared exception!
      try { 
        concatTypeSafeValue0.append((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.ConcatTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      ConcatTypeSafeValue concatTypeSafeValue1 = null;
      try {
        concatTypeSafeValue1 = new ConcatTypeSafeValue((CopyContext) null, concatTypeSafeValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.TypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<String> class0 = String.class;
      CaseTypeSafeValue<String> caseTypeSafeValue0 = new CaseTypeSafeValue<String>((TypeSafeQuery) null, class0);
      copyContext0.getOrOriginal((DirectTypeSafeStringValue) null);
      CaseTypeSafeValue<String> caseTypeSafeValue1 = new CaseTypeSafeValue<String>(copyContext0, caseTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      caseTypeSafeValue1.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue(copyContext0, caseTypeSafeValue1);
      ConcatTypeSafeValue concatTypeSafeValue1 = new ConcatTypeSafeValue(copyContext0, concatTypeSafeValue0);
      concatTypeSafeValue0.copy(copyContext0);
      HqlQueryValue hqlQueryValue0 = concatTypeSafeValue1.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      assertEquals("", hqlQueryValue0.getHql());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      concatTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      concatTypeSafeValue0.validateContainedInScope((TypeSafeQueryScopeValidator) null);
      // Undeclared exception!
      try { 
        concatTypeSafeValue0.append("uQ/wJ_U/;HJ(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.ConcatTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<String> class0 = String.class;
      CaseTypeSafeValue<String> caseTypeSafeValue0 = new CaseTypeSafeValue<String>((TypeSafeQuery) null, class0);
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue(copyContext0, caseTypeSafeValue0);
      TypeSafeQueryScopeValidator typeSafeQueryScopeValidator0 = mock(TypeSafeQueryScopeValidator.class, new ViolatedAssumptionAnswer());
      concatTypeSafeValue0.validateContainedInScope(typeSafeQueryScopeValidator0);
      ConcatTypeSafeValue concatTypeSafeValue1 = new ConcatTypeSafeValue(copyContext0, concatTypeSafeValue0);
      DirectTypeSafeStringValue directTypeSafeStringValue0 = new DirectTypeSafeStringValue((TypeSafeQuery) null);
      copyContext0.getOrOriginal(directTypeSafeStringValue0);
      TypeSafeQueryScopeValidator typeSafeQueryScopeValidator1 = mock(TypeSafeQueryScopeValidator.class, new ViolatedAssumptionAnswer());
      concatTypeSafeValue1.validateContainedInScope(typeSafeQueryScopeValidator1);
      concatTypeSafeValue1.validateContainedInScope((TypeSafeQueryScopeValidator) null);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl((-66), false, false, true, false);
      HqlQueryValue hqlQueryValue0 = concatTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      assertEquals("", hqlQueryValue0.getHql());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      // Undeclared exception!
      try { 
        concatTypeSafeValue0.append((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.ConcatTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<String> class0 = String.class;
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Integer integer0 = Integer.valueOf(0);
      CollectionTypeSafeValue<String> collectionTypeSafeValue0 = new CollectionTypeSafeValue<String>((TypeSafeQuery) null, class0, set0, integer0);
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue(copyContext0, collectionTypeSafeValue0);
      // Undeclared exception!
      try { 
        concatTypeSafeValue0.append((Number) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.ConcatTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      CopyContext copyContext0 = new CopyContext();
      Copyable copyable0 = concatTypeSafeValue0.copy(copyContext0);
      assertNotSame(copyable0, concatTypeSafeValue0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      CopyContext copyContext0 = new CopyContext();
      ConcatTypeSafeValue concatTypeSafeValue1 = new ConcatTypeSafeValue(copyContext0, concatTypeSafeValue0);
      // Undeclared exception!
      try { 
        concatTypeSafeValue1.append("hY0hw");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.ConcatTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CopyContext copyContext0 = new CopyContext();
      Class<String> class0 = String.class;
      ProjectionTypeSafeValue<String> projectionTypeSafeValue0 = new ProjectionTypeSafeValue<String>((TypeSafeQuery) null, class0, (String) null);
      ProjectionTypeSafeValue<String> projectionTypeSafeValue1 = new ProjectionTypeSafeValue<String>(copyContext0, projectionTypeSafeValue0);
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue(copyContext0, projectionTypeSafeValue1);
      ConcatTypeSafeValue concatTypeSafeValue1 = new ConcatTypeSafeValue(copyContext0, concatTypeSafeValue0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      CopyContext copyContext0 = new CopyContext();
      Class<Object> class0 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "be.shad.tsqb.values.ConcatTypeSafeValue", class0);
      FunctionTypeSafeValue<Object> functionTypeSafeValue1 = new FunctionTypeSafeValue<Object>(copyContext0, functionTypeSafeValue0);
      NullIfTypeSafeValue<Object> nullIfTypeSafeValue0 = new NullIfTypeSafeValue<Object>((TypeSafeQuery) null, functionTypeSafeValue1, functionTypeSafeValue0);
      WrappedTypeSafeValue<Object> wrappedTypeSafeValue0 = new WrappedTypeSafeValue<Object>((TypeSafeQuery) null, "%K[BoMK`LGj", nullIfTypeSafeValue0);
      ConcatTypeSafeValue concatTypeSafeValue1 = concatTypeSafeValue0.append((TypeSafeValue<?>) wrappedTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl1 = new HqlQueryBuilderParamsImpl((-265), false, false, false, false);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl2 = new HqlQueryBuilderParamsImpl();
      hqlQueryBuilderParamsImpl2.createNamedParameter();
      hqlQueryBuilderParamsImpl2.createNamedParameter();
      concatTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl1);
      hqlQueryBuilderParamsImpl1.setRequiresLiterals(false);
      concatTypeSafeValue0.append((TypeSafeValue<?>) concatTypeSafeValue1);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl3 = new HqlQueryBuilderParamsImpl((-1105), false, false, true, false);
      concatTypeSafeValue1.toHqlQueryValue(hqlQueryBuilderParamsImpl1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConcatTypeSafeValue concatTypeSafeValue0 = new ConcatTypeSafeValue((TypeSafeQuery) null);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl(2538, false, true, false, false);
      hqlQueryBuilderParamsImpl0.setCreatingOrderingBy(false);
      hqlQueryBuilderParamsImpl0.setRequiresLiterals(false);
      concatTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      ChronoField chronoField0 = ChronoField.OFFSET_SECONDS;
      chronoField0.checkValidIntValue(0L);
      // Undeclared exception!
      try { 
        ChronoField.valueOf("be.shad.tsqb.restrictions.predicate.AbstractDirectValueRestrictionPredicate");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.time.temporal.ChronoField.be.shad.tsqb.restrictions.predicate.AbstractDirectValueRestrictionPredicate
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
