/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 23:25:31 GMT 2022
 */

package be.shad.tsqb.values;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import be.shad.tsqb.query.TypeSafeQuery;
import be.shad.tsqb.query.TypeSafeQueryScopeValidator;
import be.shad.tsqb.query.copy.CopyContext;
import be.shad.tsqb.values.CaseTypeSafeValue;
import be.shad.tsqb.values.CoalesceTypeSafeValue;
import be.shad.tsqb.values.CollectionTypeSafeValue;
import be.shad.tsqb.values.CountTypeSafeValue;
import be.shad.tsqb.values.CustomTypeSafeValue;
import be.shad.tsqb.values.DirectTypeSafeStringValue;
import be.shad.tsqb.values.DirectTypeSafeValue;
import be.shad.tsqb.values.DistinctTypeSafeValue;
import be.shad.tsqb.values.EntityTypeSafeValue;
import be.shad.tsqb.values.FunctionTypeSafeValue;
import be.shad.tsqb.values.HqlQueryBuilderParamsImpl;
import be.shad.tsqb.values.HqlQueryValue;
import be.shad.tsqb.values.TypeSafeValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CountTypeSafeValue_ESTest extends CountTypeSafeValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      CaseTypeSafeValue<Integer> caseTypeSafeValue0 = new CaseTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      CountTypeSafeValue countTypeSafeValue0 = new CountTypeSafeValue((TypeSafeQuery) null, caseTypeSafeValue0);
      TypeSafeQueryScopeValidator typeSafeQueryScopeValidator0 = mock(TypeSafeQueryScopeValidator.class, new ViolatedAssumptionAnswer());
      countTypeSafeValue0.validateContainedInScope(typeSafeQueryScopeValidator0);
      assertFalse(countTypeSafeValue0.isDistinct());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      CaseTypeSafeValue<Integer> caseTypeSafeValue0 = new CaseTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      CountTypeSafeValue countTypeSafeValue0 = new CountTypeSafeValue((TypeSafeQuery) null, caseTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl((-2586), false, false, false, false);
      HqlQueryValue hqlQueryValue0 = countTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
      assertEquals("count()", hqlQueryValue0.getHql());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      CaseTypeSafeValue<Integer> caseTypeSafeValue0 = new CaseTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      CountTypeSafeValue countTypeSafeValue0 = new CountTypeSafeValue((TypeSafeQuery) null, caseTypeSafeValue0);
      EntityTypeSafeValue<Integer> entityTypeSafeValue0 = new EntityTypeSafeValue<Integer>((TypeSafeQuery) null, class0, caseTypeSafeValue0);
      caseTypeSafeValue0.is((TypeSafeValue<Integer>) entityTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl((-1), false, false, false, false);
      // Undeclared exception!
      try { 
        countTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CountTypeSafeValue countTypeSafeValue0 = new CountTypeSafeValue((TypeSafeQuery) null, (TypeSafeValue<?>) null);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      // Undeclared exception!
      try { 
        countTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.CountTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CollectionTypeSafeValue<Object> collectionTypeSafeValue0 = new CollectionTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      CountTypeSafeValue countTypeSafeValue0 = new CountTypeSafeValue((TypeSafeQuery) null, collectionTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      // Undeclared exception!
      try { 
        countTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Collection is empty when transforming to query
         //
         verifyException("be.shad.tsqb.values.CollectionTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      CaseTypeSafeValue<Integer> caseTypeSafeValue0 = new CaseTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      CountTypeSafeValue countTypeSafeValue0 = new CountTypeSafeValue((TypeSafeQuery) null, caseTypeSafeValue0);
      EntityTypeSafeValue<Integer> entityTypeSafeValue0 = new EntityTypeSafeValue<Integer>((TypeSafeQuery) null, class0, caseTypeSafeValue0);
      caseTypeSafeValue0.is((TypeSafeValue<Integer>) entityTypeSafeValue0);
      CopyContext copyContext0 = new CopyContext();
      // Undeclared exception!
      try { 
        countTypeSafeValue0.copy(copyContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CountTypeSafeValue countTypeSafeValue0 = new CountTypeSafeValue((TypeSafeQuery) null, (TypeSafeValue<?>) null);
      // Undeclared exception!
      try { 
        countTypeSafeValue0.copy((CopyContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.TypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "w/C+%0LO1oi^qD9[}&", class0);
      CoalesceTypeSafeValue<Object> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Object>((TypeSafeQuery) null, functionTypeSafeValue0);
      CoalesceTypeSafeValue<Object> coalesceTypeSafeValue1 = coalesceTypeSafeValue0.or((TypeSafeValue<Object>) coalesceTypeSafeValue0);
      CopyContext copyContext0 = new CopyContext();
      CountTypeSafeValue countTypeSafeValue0 = new CountTypeSafeValue((TypeSafeQuery) null, coalesceTypeSafeValue1);
      CountTypeSafeValue countTypeSafeValue1 = null;
      try {
        countTypeSafeValue1 = new CountTypeSafeValue(copyContext0, countTypeSafeValue0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FunctionTypeSafeValue<Object> functionTypeSafeValue0 = new FunctionTypeSafeValue<Object>((TypeSafeQuery) null, "w/C+%0LO1oi^qD9[}&", class0);
      CoalesceTypeSafeValue<Object> coalesceTypeSafeValue0 = new CoalesceTypeSafeValue<Object>((TypeSafeQuery) null, functionTypeSafeValue0);
      CopyContext copyContext0 = new CopyContext();
      CountTypeSafeValue countTypeSafeValue0 = new CountTypeSafeValue((TypeSafeQuery) null, coalesceTypeSafeValue0);
      CountTypeSafeValue countTypeSafeValue1 = new CountTypeSafeValue(copyContext0, countTypeSafeValue0);
      assertFalse(countTypeSafeValue1.isDistinct());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<DirectTypeSafeStringValue> class0 = DirectTypeSafeStringValue.class;
      CustomTypeSafeValue<DirectTypeSafeStringValue> customTypeSafeValue0 = new CustomTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, class0, ".t-jYw~M|=iA}*R\"QA");
      DistinctTypeSafeValue<DirectTypeSafeStringValue> distinctTypeSafeValue0 = new DistinctTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, customTypeSafeValue0);
      CountTypeSafeValue countTypeSafeValue0 = new CountTypeSafeValue((TypeSafeQuery) null, distinctTypeSafeValue0);
      boolean boolean0 = countTypeSafeValue0.isDistinct();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      CaseTypeSafeValue<Integer> caseTypeSafeValue0 = new CaseTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      CountTypeSafeValue countTypeSafeValue0 = new CountTypeSafeValue((TypeSafeQuery) null, caseTypeSafeValue0);
      CountTypeSafeValue countTypeSafeValue1 = new CountTypeSafeValue((TypeSafeQuery) null, countTypeSafeValue0);
      boolean boolean0 = countTypeSafeValue1.isDistinct();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      CaseTypeSafeValue<Integer> caseTypeSafeValue0 = new CaseTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      CountTypeSafeValue countTypeSafeValue0 = new CountTypeSafeValue((TypeSafeQuery) null, caseTypeSafeValue0);
      boolean boolean0 = countTypeSafeValue0.isDistinct();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      CaseTypeSafeValue<Integer> caseTypeSafeValue0 = new CaseTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      CountTypeSafeValue countTypeSafeValue0 = new CountTypeSafeValue((TypeSafeQuery) null, caseTypeSafeValue0);
      CopyContext copyContext0 = new CopyContext();
      CountTypeSafeValue countTypeSafeValue1 = (CountTypeSafeValue)countTypeSafeValue0.copy(copyContext0);
      assertFalse(countTypeSafeValue1.isDistinct());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CountTypeSafeValue countTypeSafeValue0 = new CountTypeSafeValue((TypeSafeQuery) null, (TypeSafeValue<?>) null);
      CountTypeSafeValue countTypeSafeValue1 = null;
      try {
        countTypeSafeValue1 = new CountTypeSafeValue((CopyContext) null, countTypeSafeValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.TypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      CaseTypeSafeValue<Integer> caseTypeSafeValue0 = new CaseTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      CountTypeSafeValue countTypeSafeValue0 = new CountTypeSafeValue((TypeSafeQuery) null, caseTypeSafeValue0);
      // Undeclared exception!
      try { 
        countTypeSafeValue0.validateContainedInScope((TypeSafeQueryScopeValidator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.CountTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DirectTypeSafeValue<Object> directTypeSafeValue0 = new DirectTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      CountTypeSafeValue countTypeSafeValue0 = new CountTypeSafeValue((TypeSafeQuery) null, directTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      // Undeclared exception!
      try { 
        countTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Value is null when transforming to query
         //
         verifyException("be.shad.tsqb.values.DirectTypeSafeValue", e);
      }
  }
}
