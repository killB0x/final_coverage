/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 23:42:49 GMT 2022
 */

package be.shad.tsqb.values;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import be.shad.tsqb.query.TypeSafeQuery;
import be.shad.tsqb.query.TypeSafeQueryScopeValidator;
import be.shad.tsqb.query.copy.CopyContext;
import be.shad.tsqb.values.CaseTypeSafeValue;
import be.shad.tsqb.values.CollectionTypeSafeValue;
import be.shad.tsqb.values.DirectTypeSafeStringValue;
import be.shad.tsqb.values.DirectTypeSafeValue;
import be.shad.tsqb.values.DistinctTypeSafeValue;
import be.shad.tsqb.values.HqlQueryBuilderParams;
import be.shad.tsqb.values.HqlQueryBuilderParamsImpl;
import be.shad.tsqb.values.HqlQueryValue;
import be.shad.tsqb.values.NullTypeSafeValue;
import be.shad.tsqb.values.OperationTypeSafeValue;
import be.shad.tsqb.values.ProjectionTypeSafeValue;
import be.shad.tsqb.values.TypeSafeValue;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DistinctTypeSafeValue_ESTest extends DistinctTypeSafeValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      DirectTypeSafeValue<Object> directTypeSafeValue0 = new DirectTypeSafeValue<Object>((TypeSafeQuery) null, object0);
      DistinctTypeSafeValue<Object> distinctTypeSafeValue0 = new DistinctTypeSafeValue<Object>((TypeSafeQuery) null, directTypeSafeValue0);
      TypeSafeQueryScopeValidator typeSafeQueryScopeValidator0 = mock(TypeSafeQueryScopeValidator.class, new ViolatedAssumptionAnswer());
      distinctTypeSafeValue0.validateContainedInScope(typeSafeQueryScopeValidator0);
      assertTrue(distinctTypeSafeValue0.isDistinct());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ProjectionTypeSafeValue<Object> projectionTypeSafeValue0 = new ProjectionTypeSafeValue<Object>((TypeSafeQuery) null, class0, "");
      DistinctTypeSafeValue<Object> distinctTypeSafeValue0 = new DistinctTypeSafeValue<Object>((TypeSafeQuery) null, projectionTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      // Undeclared exception!
      try { 
        distinctTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.ProjectionTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DirectTypeSafeValue<Object> directTypeSafeValue0 = new DirectTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      DistinctTypeSafeValue<Object> distinctTypeSafeValue0 = new DistinctTypeSafeValue<Object>((TypeSafeQuery) null, directTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      // Undeclared exception!
      try { 
        distinctTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Value is null when transforming to query
         //
         verifyException("be.shad.tsqb.values.DirectTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<DirectTypeSafeStringValue> class0 = DirectTypeSafeStringValue.class;
      LinkedList<DirectTypeSafeStringValue> linkedList0 = new LinkedList<DirectTypeSafeStringValue>();
      Integer integer0 = new Integer((-681));
      CollectionTypeSafeValue<DirectTypeSafeStringValue> collectionTypeSafeValue0 = new CollectionTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, class0, linkedList0, integer0);
      DistinctTypeSafeValue<DirectTypeSafeStringValue> distinctTypeSafeValue0 = new DistinctTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, collectionTypeSafeValue0);
      HqlQueryBuilderParamsImpl hqlQueryBuilderParamsImpl0 = new HqlQueryBuilderParamsImpl();
      // Undeclared exception!
      try { 
        distinctTypeSafeValue0.toHqlQueryValue(hqlQueryBuilderParamsImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Collection is empty when transforming to query
         //
         verifyException("be.shad.tsqb.values.CollectionTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NullTypeSafeValue<Object> nullTypeSafeValue0 = new NullTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      DistinctTypeSafeValue<Object> distinctTypeSafeValue0 = new DistinctTypeSafeValue<Object>((TypeSafeQuery) null, nullTypeSafeValue0);
      // Undeclared exception!
      try { 
        distinctTypeSafeValue0.copy((CopyContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.TypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NullTypeSafeValue<Object> nullTypeSafeValue0 = new NullTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      DistinctTypeSafeValue<Object> distinctTypeSafeValue0 = new DistinctTypeSafeValue<Object>((TypeSafeQuery) null, nullTypeSafeValue0);
      DistinctTypeSafeValue<Object> distinctTypeSafeValue1 = null;
      try {
        distinctTypeSafeValue1 = new DistinctTypeSafeValue<Object>((CopyContext) null, distinctTypeSafeValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.TypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DistinctTypeSafeValue<DirectTypeSafeStringValue> distinctTypeSafeValue0 = null;
      try {
        distinctTypeSafeValue0 = new DistinctTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, (TypeSafeValue<DirectTypeSafeStringValue>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.DistinctTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NullTypeSafeValue<Object> nullTypeSafeValue0 = new NullTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      DistinctTypeSafeValue<Object> distinctTypeSafeValue0 = new DistinctTypeSafeValue<Object>((TypeSafeQuery) null, nullTypeSafeValue0);
      CopyContext copyContext0 = new CopyContext();
      DistinctTypeSafeValue distinctTypeSafeValue1 = (DistinctTypeSafeValue)distinctTypeSafeValue0.copy(copyContext0);
      assertTrue(distinctTypeSafeValue1.isDistinct());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<DirectTypeSafeStringValue> class0 = DirectTypeSafeStringValue.class;
      DirectTypeSafeValue<DirectTypeSafeStringValue> directTypeSafeValue0 = new DirectTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, class0);
      OperationTypeSafeValue.OperationTypeSafeValueBracketsPolicy operationTypeSafeValue_OperationTypeSafeValueBracketsPolicy0 = OperationTypeSafeValue.OperationTypeSafeValueBracketsPolicy.Never;
      OperationTypeSafeValue<DirectTypeSafeStringValue> operationTypeSafeValue0 = new OperationTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, directTypeSafeValue0, operationTypeSafeValue_OperationTypeSafeValueBracketsPolicy0);
      DistinctTypeSafeValue<DirectTypeSafeStringValue> distinctTypeSafeValue0 = new DistinctTypeSafeValue<DirectTypeSafeStringValue>((TypeSafeQuery) null, operationTypeSafeValue0);
      // Undeclared exception!
      try { 
        distinctTypeSafeValue0.validateContainedInScope((TypeSafeQueryScopeValidator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.DistinctTypeSafeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NullTypeSafeValue<Object> nullTypeSafeValue0 = new NullTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      DistinctTypeSafeValue<Object> distinctTypeSafeValue0 = new DistinctTypeSafeValue<Object>((TypeSafeQuery) null, nullTypeSafeValue0);
      CopyContext copyContext0 = new CopyContext();
      DistinctTypeSafeValue<Object> distinctTypeSafeValue1 = new DistinctTypeSafeValue<Object>(copyContext0, distinctTypeSafeValue0);
      assertTrue(distinctTypeSafeValue1.isDistinct());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      CaseTypeSafeValue<Byte> caseTypeSafeValue0 = new CaseTypeSafeValue<Byte>((TypeSafeQuery) null, class0);
      DistinctTypeSafeValue<Byte> distinctTypeSafeValue0 = new DistinctTypeSafeValue<Byte>((TypeSafeQuery) null, caseTypeSafeValue0);
      boolean boolean0 = distinctTypeSafeValue0.isDistinct();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NullTypeSafeValue<Object> nullTypeSafeValue0 = new NullTypeSafeValue<Object>((TypeSafeQuery) null, class0);
      DistinctTypeSafeValue<Object> distinctTypeSafeValue0 = new DistinctTypeSafeValue<Object>((TypeSafeQuery) null, nullTypeSafeValue0);
      HqlQueryValue hqlQueryValue0 = distinctTypeSafeValue0.toHqlQueryValue((HqlQueryBuilderParams) null);
      assertEquals("distinct NULLIF(1,1)", hqlQueryValue0.getHql());
  }
}
