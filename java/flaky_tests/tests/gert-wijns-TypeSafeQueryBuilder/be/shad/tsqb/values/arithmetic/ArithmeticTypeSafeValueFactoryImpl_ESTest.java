/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 23:20:38 GMT 2022
 */

package be.shad.tsqb.values.arithmetic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import be.shad.tsqb.query.TypeSafeQuery;
import be.shad.tsqb.query.TypeSafeQueryInternal;
import be.shad.tsqb.values.DirectTypeSafeValue;
import be.shad.tsqb.values.NullTypeSafeValue;
import be.shad.tsqb.values.TypeSafeValue;
import be.shad.tsqb.values.arithmetic.ArithmeticTypeSafeValue;
import be.shad.tsqb.values.arithmetic.ArithmeticTypeSafeValueFactoryImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArithmeticTypeSafeValueFactoryImpl_ESTest extends ArithmeticTypeSafeValueFactoryImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArithmeticTypeSafeValueFactoryImpl arithmeticTypeSafeValueFactoryImpl0 = new ArithmeticTypeSafeValueFactoryImpl((TypeSafeQueryInternal) null);
      Class<Integer> class0 = Integer.class;
      NullTypeSafeValue<Integer> nullTypeSafeValue0 = new NullTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      ArithmeticTypeSafeValue arithmeticTypeSafeValue0 = arithmeticTypeSafeValueFactoryImpl0.value((TypeSafeValue<? extends Number>) nullTypeSafeValue0);
      ArithmeticTypeSafeValue arithmeticTypeSafeValue1 = arithmeticTypeSafeValueFactoryImpl0.value((TypeSafeValue<? extends Number>) arithmeticTypeSafeValue0);
      ArithmeticTypeSafeValue[] arithmeticTypeSafeValueArray0 = new ArithmeticTypeSafeValue[1];
      ArithmeticTypeSafeValue arithmeticTypeSafeValue2 = arithmeticTypeSafeValueFactoryImpl0.multiply(arithmeticTypeSafeValue1, arithmeticTypeSafeValue0, arithmeticTypeSafeValueArray0);
      assertNotSame(arithmeticTypeSafeValue1, arithmeticTypeSafeValue2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArithmeticTypeSafeValueFactoryImpl arithmeticTypeSafeValueFactoryImpl0 = new ArithmeticTypeSafeValueFactoryImpl((TypeSafeQueryInternal) null);
      Class<Integer> class0 = Integer.class;
      NullTypeSafeValue<Integer> nullTypeSafeValue0 = new NullTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      ArithmeticTypeSafeValue[] arithmeticTypeSafeValueArray0 = new ArithmeticTypeSafeValue[3];
      ArithmeticTypeSafeValue arithmeticTypeSafeValue0 = arithmeticTypeSafeValueFactoryImpl0.subtract(nullTypeSafeValue0, arithmeticTypeSafeValueArray0[1], arithmeticTypeSafeValueArray0);
      assertNotNull(arithmeticTypeSafeValue0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArithmeticTypeSafeValueFactoryImpl arithmeticTypeSafeValueFactoryImpl0 = new ArithmeticTypeSafeValueFactoryImpl((TypeSafeQueryInternal) null);
      // Undeclared exception!
      try { 
        arithmeticTypeSafeValueFactoryImpl0.value((TypeSafeValue<? extends Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.arithmetic.ArithmeticTypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArithmeticTypeSafeValueFactoryImpl arithmeticTypeSafeValueFactoryImpl0 = new ArithmeticTypeSafeValueFactoryImpl((TypeSafeQueryInternal) null);
      ArithmeticTypeSafeValue[] arithmeticTypeSafeValueArray0 = new ArithmeticTypeSafeValue[0];
      // Undeclared exception!
      try { 
        arithmeticTypeSafeValueFactoryImpl0.subtract((TypeSafeValue<? extends Number>) null, (TypeSafeValue<? extends Number>) null, arithmeticTypeSafeValueArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.arithmetic.ArithmeticTypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArithmeticTypeSafeValueFactoryImpl arithmeticTypeSafeValueFactoryImpl0 = new ArithmeticTypeSafeValueFactoryImpl((TypeSafeQueryInternal) null);
      // Undeclared exception!
      try { 
        arithmeticTypeSafeValueFactoryImpl0.multiply((TypeSafeValue<? extends Number>) null, (TypeSafeValue<? extends Number>) null, (ArithmeticTypeSafeValue[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.arithmetic.ArithmeticTypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArithmeticTypeSafeValueFactoryImpl arithmeticTypeSafeValueFactoryImpl0 = new ArithmeticTypeSafeValueFactoryImpl((TypeSafeQueryInternal) null);
      // Undeclared exception!
      try { 
        arithmeticTypeSafeValueFactoryImpl0.divide((TypeSafeValue<? extends Number>) null, (TypeSafeValue<? extends Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.arithmetic.ArithmeticTypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArithmeticTypeSafeValueFactoryImpl arithmeticTypeSafeValueFactoryImpl0 = new ArithmeticTypeSafeValueFactoryImpl((TypeSafeQueryInternal) null);
      // Undeclared exception!
      try { 
        arithmeticTypeSafeValueFactoryImpl0.add((TypeSafeValue<? extends Number>) null, (TypeSafeValue<? extends Number>) null, (ArithmeticTypeSafeValue[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.arithmetic.ArithmeticTypeSafeValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArithmeticTypeSafeValueFactoryImpl arithmeticTypeSafeValueFactoryImpl0 = new ArithmeticTypeSafeValueFactoryImpl((TypeSafeQueryInternal) null);
      Class<Integer> class0 = Integer.TYPE;
      NullTypeSafeValue<Integer> nullTypeSafeValue0 = new NullTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      ArithmeticTypeSafeValue[] arithmeticTypeSafeValueArray0 = new ArithmeticTypeSafeValue[0];
      ArithmeticTypeSafeValue arithmeticTypeSafeValue0 = arithmeticTypeSafeValueFactoryImpl0.subtract(nullTypeSafeValue0, nullTypeSafeValue0, arithmeticTypeSafeValueArray0);
      assertNotNull(arithmeticTypeSafeValue0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      NullTypeSafeValue<Integer> nullTypeSafeValue0 = new NullTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      ArithmeticTypeSafeValueFactoryImpl arithmeticTypeSafeValueFactoryImpl0 = new ArithmeticTypeSafeValueFactoryImpl((TypeSafeQueryInternal) null);
      ArithmeticTypeSafeValue arithmeticTypeSafeValue0 = arithmeticTypeSafeValueFactoryImpl0.subtract(nullTypeSafeValue0, nullTypeSafeValue0, (ArithmeticTypeSafeValue[]) null);
      assertNotNull(arithmeticTypeSafeValue0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArithmeticTypeSafeValueFactoryImpl arithmeticTypeSafeValueFactoryImpl0 = new ArithmeticTypeSafeValueFactoryImpl((TypeSafeQueryInternal) null);
      // Undeclared exception!
      try { 
        arithmeticTypeSafeValueFactoryImpl0.value((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.values.arithmetic.ArithmeticTypeSafeValueFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArithmeticTypeSafeValueFactoryImpl arithmeticTypeSafeValueFactoryImpl0 = new ArithmeticTypeSafeValueFactoryImpl((TypeSafeQueryInternal) null);
      Class<Integer> class0 = Integer.class;
      NullTypeSafeValue<Integer> nullTypeSafeValue0 = new NullTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      ArithmeticTypeSafeValue arithmeticTypeSafeValue0 = arithmeticTypeSafeValueFactoryImpl0.value((TypeSafeValue<? extends Number>) nullTypeSafeValue0);
      ArithmeticTypeSafeValue[] arithmeticTypeSafeValueArray0 = new ArithmeticTypeSafeValue[3];
      Integer integer0 = new Integer(1);
      DirectTypeSafeValue<Integer> directTypeSafeValue0 = new DirectTypeSafeValue<Integer>((TypeSafeQuery) null, integer0);
      ArithmeticTypeSafeValue arithmeticTypeSafeValue1 = arithmeticTypeSafeValueFactoryImpl0.add(arithmeticTypeSafeValue0, directTypeSafeValue0, arithmeticTypeSafeValueArray0);
      assertNotSame(arithmeticTypeSafeValue1, arithmeticTypeSafeValue0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArithmeticTypeSafeValueFactoryImpl arithmeticTypeSafeValueFactoryImpl0 = new ArithmeticTypeSafeValueFactoryImpl((TypeSafeQueryInternal) null);
      Class<Integer> class0 = Integer.class;
      NullTypeSafeValue<Integer> nullTypeSafeValue0 = new NullTypeSafeValue<Integer>((TypeSafeQuery) null, class0);
      ArithmeticTypeSafeValue arithmeticTypeSafeValue0 = arithmeticTypeSafeValueFactoryImpl0.value((TypeSafeValue<? extends Number>) nullTypeSafeValue0);
      ArithmeticTypeSafeValue arithmeticTypeSafeValue1 = arithmeticTypeSafeValueFactoryImpl0.divide(arithmeticTypeSafeValue0, nullTypeSafeValue0);
      assertNotSame(arithmeticTypeSafeValue0, arithmeticTypeSafeValue1);
  }
}
