/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 22:48:34 GMT 2022
 */

package be.shad.tsqb.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import be.shad.tsqb.helper.ConcreteDtoClassResolverImpl;
import be.shad.tsqb.helper.SelectionBuilderSpec;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConcreteDtoClassResolverImpl_ESTest extends ConcreteDtoClassResolverImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConcreteDtoClassResolverImpl concreteDtoClassResolverImpl0 = new ConcreteDtoClassResolverImpl();
      Class<Annotation> class0 = Annotation.class;
      Supplier<Annotation> supplier0 = concreteDtoClassResolverImpl0.newInstanceSupplier(class0);
      assertNotNull(supplier0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConcreteDtoClassResolverImpl concreteDtoClassResolverImpl0 = new ConcreteDtoClassResolverImpl();
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = concreteDtoClassResolverImpl0.isBuilderClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConcreteDtoClassResolverImpl concreteDtoClassResolverImpl0 = new ConcreteDtoClassResolverImpl();
      // Undeclared exception!
      try { 
        concreteDtoClassResolverImpl0.newBuilderSupplier((Class<Annotation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.helper.ConcreteDtoClassResolverImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcreteDtoClassResolverImpl concreteDtoClassResolverImpl0 = new ConcreteDtoClassResolverImpl();
      // Undeclared exception!
      try { 
        concreteDtoClassResolverImpl0.isBuilderClass((Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.helper.ConcreteDtoClassResolverImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcreteDtoClassResolverImpl concreteDtoClassResolverImpl0 = new ConcreteDtoClassResolverImpl();
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        concreteDtoClassResolverImpl0.getResultClass(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // buildMethodName: build is not found on java.lang.annotation.Annotation
         //
         verifyException("be.shad.tsqb.helper.ConcreteDtoClassResolverImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConcreteDtoClassResolverImpl concreteDtoClassResolverImpl0 = new ConcreteDtoClassResolverImpl();
      // Undeclared exception!
      try { 
        concreteDtoClassResolverImpl0.getConcreteClass((Class<Annotation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.helper.ConcreteDtoClassResolverImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConcreteDtoClassResolverImpl concreteDtoClassResolverImpl0 = new ConcreteDtoClassResolverImpl();
      // Undeclared exception!
      try { 
        concreteDtoClassResolverImpl0.getBuilderMethod((Class<Annotation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.helper.ConcreteDtoClassResolverImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConcreteDtoClassResolverImpl concreteDtoClassResolverImpl0 = new ConcreteDtoClassResolverImpl();
      Class<Object> class0 = Object.class;
      try { 
        concreteDtoClassResolverImpl0.getBuilderMethod(class0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConcreteDtoClassResolverImpl concreteDtoClassResolverImpl0 = new ConcreteDtoClassResolverImpl();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        concreteDtoClassResolverImpl0.getBuildFunction(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // buildMethodName: build is not found on java.lang.Object
         //
         verifyException("be.shad.tsqb.helper.ConcreteDtoClassResolverImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConcreteDtoClassResolverImpl concreteDtoClassResolverImpl0 = new ConcreteDtoClassResolverImpl();
      // Undeclared exception!
      try { 
        concreteDtoClassResolverImpl0.createBuilderSpec((Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.helper.ConcreteDtoClassResolverImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcreteDtoClassResolverImpl concreteDtoClassResolverImpl0 = new ConcreteDtoClassResolverImpl();
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        concreteDtoClassResolverImpl0.createBuilderSpec(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Don't know implementation to use for interface: interface java.lang.annotation.Annotation
         //
         verifyException("be.shad.tsqb.helper.ConcreteDtoClassResolverImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConcreteDtoClassResolverImpl concreteDtoClassResolverImpl0 = new ConcreteDtoClassResolverImpl();
      Class<Object> class0 = Object.class;
      Class<Object> class1 = concreteDtoClassResolverImpl0.getConcreteClass(class0);
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConcreteDtoClassResolverImpl concreteDtoClassResolverImpl0 = new ConcreteDtoClassResolverImpl();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        concreteDtoClassResolverImpl0.newBuilderSupplier(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Clan't create builder supplier for class java.lang.Object
         //
         verifyException("be.shad.tsqb.helper.ConcreteDtoClassResolverImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConcreteDtoClassResolverImpl concreteDtoClassResolverImpl0 = new ConcreteDtoClassResolverImpl();
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        concreteDtoClassResolverImpl0.getConcreteClass(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Don't know implementation to use for interface: interface java.lang.annotation.Annotation
         //
         verifyException("be.shad.tsqb.helper.ConcreteDtoClassResolverImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConcreteDtoClassResolverImpl concreteDtoClassResolverImpl0 = new ConcreteDtoClassResolverImpl();
      // Undeclared exception!
      try { 
        concreteDtoClassResolverImpl0.getResultClass((Class<Annotation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.helper.ConcreteDtoClassResolverImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConcreteDtoClassResolverImpl concreteDtoClassResolverImpl0 = new ConcreteDtoClassResolverImpl();
      Class<Object> class0 = Object.class;
      SelectionBuilderSpec<Object, Annotation> selectionBuilderSpec0 = concreteDtoClassResolverImpl0.createBuilderSpec(class0);
      assertFalse(selectionBuilderSpec0.isBuilder());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConcreteDtoClassResolverImpl concreteDtoClassResolverImpl0 = new ConcreteDtoClassResolverImpl();
      Supplier<Object> supplier0 = concreteDtoClassResolverImpl0.newInstanceSupplier((Method) null);
      assertNotNull(supplier0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConcreteDtoClassResolverImpl concreteDtoClassResolverImpl0 = new ConcreteDtoClassResolverImpl();
      // Undeclared exception!
      try { 
        concreteDtoClassResolverImpl0.getBuildFunction((Class<Annotation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.helper.ConcreteDtoClassResolverImpl", e);
      }
  }
}
