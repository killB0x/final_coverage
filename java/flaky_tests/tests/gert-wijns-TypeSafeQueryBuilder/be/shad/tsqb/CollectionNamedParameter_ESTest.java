/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 23:27:25 GMT 2022
 */

package be.shad.tsqb;

import org.junit.Test;
import static org.junit.Assert.*;
import be.shad.tsqb.CollectionNamedParameter;
import java.util.Collection;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectionNamedParameter_ESTest extends CollectionNamedParameter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1084));
      CollectionNamedParameter collectionNamedParameter0 = new CollectionNamedParameter("", linkedList0, integer0);
      Collection<?> collection0 = collectionNamedParameter0.getValue();
      assertFalse(collection0.contains(""));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(0);
      CollectionNamedParameter collectionNamedParameter0 = new CollectionNamedParameter("", (Collection<?>) null, integer0);
      Integer integer1 = collectionNamedParameter0.getBatchSize();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(3339);
      CollectionNamedParameter collectionNamedParameter0 = new CollectionNamedParameter("", linkedList0, integer0);
      Integer integer1 = collectionNamedParameter0.getBatchSize();
      assertEquals(3339, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1084));
      CollectionNamedParameter collectionNamedParameter0 = new CollectionNamedParameter("", linkedList0, integer0);
      Integer integer1 = collectionNamedParameter0.getBatchSize();
      assertEquals((-1084), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1032));
      CollectionNamedParameter collectionNamedParameter0 = new CollectionNamedParameter("Rw.^r(I", linkedList0, integer0);
      boolean boolean0 = collectionNamedParameter0.hasBatchSize();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CollectionNamedParameter collectionNamedParameter0 = new CollectionNamedParameter("GZLl<1pBxWC9bim\"0L@", (Collection<?>) null, (Integer) null);
      boolean boolean0 = collectionNamedParameter0.hasBatchSize();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CollectionNamedParameter collectionNamedParameter0 = new CollectionNamedParameter("[:%s, %s]", (Collection<?>) null, (Integer) null);
      Collection<?> collection0 = collectionNamedParameter0.getValue();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CollectionNamedParameter collectionNamedParameter0 = new CollectionNamedParameter("GZLl<1pBxWC9bim\"0L@", (Collection<?>) null, (Integer) null);
      Integer integer0 = collectionNamedParameter0.getBatchSize();
      assertNull(integer0);
  }
}
