/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 23:10:52 GMT 2022
 */

package be.shad.tsqb.selection.parallel;

import org.junit.Test;
import static org.junit.Assert.*;
import be.shad.tsqb.selection.parallel.SelectPair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SelectPair_ESTest extends SelectPair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SelectPair<Integer, Integer> selectPair0 = new SelectPair<Integer, Integer>();
      SelectPair<SelectPair<Integer, Integer>, Integer> selectPair1 = new SelectPair<SelectPair<Integer, Integer>, Integer>(selectPair0, (Integer) null);
      Integer integer0 = selectPair1.getSecond();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SelectPair<SelectPair<Integer, Integer>, SelectPair<Integer, Integer>> selectPair0 = new SelectPair<SelectPair<Integer, Integer>, SelectPair<Integer, Integer>>();
      Object object0 = selectPair0.getFirst();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SelectPair<Integer, Integer> selectPair0 = new SelectPair<Integer, Integer>();
      boolean boolean0 = selectPair0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SelectPair<Integer, Integer> selectPair0 = new SelectPair<Integer, Integer>();
      SelectPair<SelectPair<Integer, Integer>, SelectPair<Integer, Integer>> selectPair1 = new SelectPair<SelectPair<Integer, Integer>, SelectPair<Integer, Integer>>(selectPair0, selectPair0);
      SelectPair<Integer, Integer> selectPair2 = selectPair1.getSecond();
      assertSame(selectPair0, selectPair2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SelectPair<Integer, Integer> selectPair0 = new SelectPair<Integer, Integer>();
      SelectPair<SelectPair<Integer, Integer>, SelectPair<Integer, Integer>> selectPair1 = new SelectPair<SelectPair<Integer, Integer>, SelectPair<Integer, Integer>>();
      boolean boolean0 = selectPair1.equals(selectPair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SelectPair<Integer, Integer> selectPair0 = new SelectPair<Integer, Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = selectPair0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SelectPair<Integer, Integer> selectPair0 = new SelectPair<Integer, Integer>();
      SelectPair<SelectPair<Integer, Integer>, SelectPair<Integer, Integer>> selectPair1 = new SelectPair<SelectPair<Integer, Integer>, SelectPair<Integer, Integer>>(selectPair0, selectPair0);
      boolean boolean0 = selectPair1.equals(selectPair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SelectPair<Integer, Integer> selectPair0 = new SelectPair<Integer, Integer>();
      Integer integer0 = new Integer(0);
      SelectPair<SelectPair<Integer, Integer>, Integer> selectPair1 = new SelectPair<SelectPair<Integer, Integer>, Integer>(selectPair0, integer0);
      Object object0 = selectPair1.getFirst();
      boolean boolean0 = selectPair0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SelectPair<Integer, Integer> selectPair0 = new SelectPair<Integer, Integer>();
      SelectPair<SelectPair<Integer, Integer>, SelectPair<Integer, Integer>> selectPair1 = new SelectPair<SelectPair<Integer, Integer>, SelectPair<Integer, Integer>>(selectPair0, selectPair0);
      Integer integer0 = new Integer(0);
      SelectPair<SelectPair<Integer, Integer>, Integer> selectPair2 = new SelectPair<SelectPair<Integer, Integer>, Integer>(selectPair0, integer0);
      boolean boolean0 = selectPair2.equals(selectPair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SelectPair<Integer, Integer> selectPair0 = new SelectPair<Integer, Integer>();
      Integer integer0 = new Integer(0);
      selectPair0.setFirst(integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SelectPair<Integer, Integer> selectPair0 = new SelectPair<Integer, Integer>();
      selectPair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SelectPair<Integer, Integer> selectPair0 = new SelectPair<Integer, Integer>();
      SelectPair<SelectPair<Integer, Integer>, SelectPair<Integer, Integer>> selectPair1 = new SelectPair<SelectPair<Integer, Integer>, SelectPair<Integer, Integer>>(selectPair0, selectPair0);
      String string0 = selectPair1.toString();
      assertEquals("SelectPair(first=SelectPair(first=null, second=null), second=SelectPair(first=null, second=null))", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SelectPair<Integer, Integer> selectPair0 = new SelectPair<Integer, Integer>();
      SelectPair<Integer, SelectPair<Integer, Integer>> selectPair1 = new SelectPair<Integer, SelectPair<Integer, Integer>>();
      selectPair1.setSecond(selectPair0);
  }
}
