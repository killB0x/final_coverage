/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 22:59:50 GMT 2022
 */

package be.shad.tsqb.selection.parallel;

import org.junit.Test;
import static org.junit.Assert.*;
import be.shad.tsqb.selection.parallel.SelectTriplet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SelectTriplet_ESTest extends SelectTriplet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SelectTriplet<Integer, Integer, Integer> selectTriplet0 = new SelectTriplet<Integer, Integer, Integer>();
      SelectTriplet<Integer, SelectTriplet<Integer, Integer, Integer>, SelectTriplet<Integer, Integer, Integer>> selectTriplet1 = new SelectTriplet<Integer, SelectTriplet<Integer, Integer, Integer>, SelectTriplet<Integer, Integer, Integer>>();
      selectTriplet1.setThird(selectTriplet0);
      SelectTriplet<Integer, Integer, Integer> selectTriplet2 = selectTriplet1.getThird();
      assertSame(selectTriplet2, selectTriplet0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SelectTriplet<Integer, Integer, Integer> selectTriplet0 = new SelectTriplet<Integer, Integer, Integer>();
      SelectTriplet<Integer, SelectTriplet<Integer, Integer, Integer>, SelectTriplet<Integer, Integer, Integer>> selectTriplet1 = new SelectTriplet<Integer, SelectTriplet<Integer, Integer, Integer>, SelectTriplet<Integer, Integer, Integer>>();
      selectTriplet1.setSecond(selectTriplet0);
      SelectTriplet<Integer, Integer, Integer> selectTriplet2 = selectTriplet1.getSecond();
      assertSame(selectTriplet2, selectTriplet0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SelectTriplet<Integer, Integer, Integer> selectTriplet0 = new SelectTriplet<Integer, Integer, Integer>();
      SelectTriplet<SelectTriplet<Integer, Integer, Integer>, Integer, SelectTriplet<Integer, Integer, Integer>> selectTriplet1 = new SelectTriplet<SelectTriplet<Integer, Integer, Integer>, Integer, SelectTriplet<Integer, Integer, Integer>>();
      selectTriplet1.setFirst(selectTriplet0);
      SelectTriplet<Integer, Integer, Integer> selectTriplet2 = selectTriplet1.getFirst();
      assertSame(selectTriplet2, selectTriplet0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SelectTriplet<Integer, SelectTriplet<Integer, Integer, Integer>, SelectTriplet<Integer, Integer, Integer>> selectTriplet0 = new SelectTriplet<Integer, SelectTriplet<Integer, Integer, Integer>, SelectTriplet<Integer, Integer, Integer>>();
      SelectTriplet<Integer, Integer, Integer> selectTriplet1 = new SelectTriplet<Integer, Integer, Integer>();
      selectTriplet0.setThird(selectTriplet1);
      SelectTriplet<Integer, Integer, SelectTriplet<Integer, Integer, Integer>> selectTriplet2 = new SelectTriplet<Integer, Integer, SelectTriplet<Integer, Integer, Integer>>();
      boolean boolean0 = selectTriplet2.equals(selectTriplet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SelectTriplet<Integer, Integer, Integer> selectTriplet0 = new SelectTriplet<Integer, Integer, Integer>();
      SelectTriplet<Integer, SelectTriplet<Integer, Integer, Integer>, SelectTriplet<Integer, Integer, Integer>> selectTriplet1 = new SelectTriplet<Integer, SelectTriplet<Integer, Integer, Integer>, SelectTriplet<Integer, Integer, Integer>>();
      selectTriplet1.setSecond(selectTriplet0);
      boolean boolean0 = selectTriplet1.equals(selectTriplet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SelectTriplet<Integer, Integer, Integer> selectTriplet0 = new SelectTriplet<Integer, Integer, Integer>();
      Integer integer0 = new Integer(282);
      SelectTriplet<Integer, SelectTriplet<Integer, Integer, Integer>, SelectTriplet<Integer, Integer, Integer>> selectTriplet1 = new SelectTriplet<Integer, SelectTriplet<Integer, Integer, Integer>, SelectTriplet<Integer, Integer, Integer>>();
      selectTriplet1.setFirst(integer0);
      boolean boolean0 = selectTriplet1.equals(selectTriplet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SelectTriplet<SelectTriplet<Integer, Integer, Integer>, Integer, Integer> selectTriplet0 = new SelectTriplet<SelectTriplet<Integer, Integer, Integer>, Integer, Integer>();
      SelectTriplet<Integer, Integer, Integer> selectTriplet1 = new SelectTriplet<Integer, Integer, Integer>();
      boolean boolean0 = selectTriplet0.equals(selectTriplet1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SelectTriplet<SelectTriplet<Integer, Integer, Integer>, SelectTriplet<Integer, Integer, Integer>, Integer> selectTriplet0 = new SelectTriplet<SelectTriplet<Integer, Integer, Integer>, SelectTriplet<Integer, Integer, Integer>, Integer>();
      Integer integer0 = new Integer((-1));
      boolean boolean0 = selectTriplet0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SelectTriplet<Integer, Integer, Integer> selectTriplet0 = new SelectTriplet<Integer, Integer, Integer>();
      boolean boolean0 = selectTriplet0.equals(selectTriplet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SelectTriplet<SelectTriplet<Integer, Integer, Integer>, SelectTriplet<Integer, Integer, Integer>, Integer> selectTriplet0 = new SelectTriplet<SelectTriplet<Integer, Integer, Integer>, SelectTriplet<Integer, Integer, Integer>, Integer>();
      boolean boolean0 = selectTriplet0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SelectTriplet<Integer, SelectTriplet<Integer, Integer, Integer>, Integer> selectTriplet0 = new SelectTriplet<Integer, SelectTriplet<Integer, Integer, Integer>, Integer>();
      selectTriplet0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SelectTriplet<SelectTriplet<Integer, Integer, Integer>, Integer, Integer> selectTriplet0 = new SelectTriplet<SelectTriplet<Integer, Integer, Integer>, Integer, Integer>();
      SelectTriplet<Integer, Integer, Integer> selectTriplet1 = selectTriplet0.getFirst();
      assertNull(selectTriplet1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SelectTriplet<Integer, SelectTriplet<Integer, Integer, Integer>, SelectTriplet<Integer, Integer, Integer>> selectTriplet0 = new SelectTriplet<Integer, SelectTriplet<Integer, Integer, Integer>, SelectTriplet<Integer, Integer, Integer>>();
      SelectTriplet<Integer, Integer, Integer> selectTriplet1 = selectTriplet0.getSecond();
      assertNull(selectTriplet1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SelectTriplet<SelectTriplet<Integer, Integer, Integer>, SelectTriplet<Integer, Integer, Integer>, Integer> selectTriplet0 = new SelectTriplet<SelectTriplet<Integer, Integer, Integer>, SelectTriplet<Integer, Integer, Integer>, Integer>();
      Integer integer0 = selectTriplet0.getThird();
      assertNull(integer0);
  }
}
