/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 22:34:05 GMT 2022
 */

package be.shad.tsqb.selection.group;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import be.shad.tsqb.selection.SelectionTreeData;
import be.shad.tsqb.selection.SelectionTreeResult;
import be.shad.tsqb.selection.group.SelectionTreeFieldSetter;
import be.shad.tsqb.selection.group.SubSelectionTreeField;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.Collection;
import java.util.HashMap;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubSelectionTreeField_ESTest extends SubSelectionTreeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SubSelectionTreeField<Object> subSelectionTreeField0 = new SubSelectionTreeField<Object>(0, (Supplier<Collection<Object>>) null, (Field) null, false);
      SelectionTreeData selectionTreeData0 = new SelectionTreeData();
      SelectionTreeData[] selectionTreeDataArray0 = new SelectionTreeData[8];
      SelectionTreeResult selectionTreeResult0 = new SelectionTreeResult(selectionTreeData0);
      selectionTreeData0.setResult(selectionTreeResult0);
      selectionTreeDataArray0[0] = selectionTreeData0;
      SelectionTreeData selectionTreeData1 = new SelectionTreeData();
      // Undeclared exception!
      try { 
        subSelectionTreeField0.setField(selectionTreeData1, selectionTreeDataArray0, selectionTreeDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.selection.SelectionTreeData", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Supplier<Collection<Integer>> supplier0 = (Supplier<Collection<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SubSelectionTreeField<Integer> subSelectionTreeField0 = new SubSelectionTreeField<Integer>(0, supplier0, (Field) null, false);
      SelectionTreeData selectionTreeData0 = new SelectionTreeData();
      SelectionTreeData[] selectionTreeDataArray0 = new SelectionTreeData[1];
      SelectionTreeData selectionTreeData1 = new SelectionTreeData();
      selectionTreeDataArray0[0] = selectionTreeData1;
      // Undeclared exception!
      try { 
        subSelectionTreeField0.setField(selectionTreeData0, selectionTreeDataArray0, selectionTreeDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.selection.SelectionTreeData", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SubSelectionTreeField<Object> subSelectionTreeField0 = new SubSelectionTreeField<Object>(4, (Supplier<Collection<Object>>) null, (Field) null, false);
      assertEquals(4, subSelectionTreeField0.getSubSelectionIndex());
      
      SelectionTreeData selectionTreeData0 = new SelectionTreeData();
      SelectionTreeData[] selectionTreeDataArray0 = new SelectionTreeData[8];
      subSelectionTreeField0.setField(selectionTreeData0, selectionTreeDataArray0, selectionTreeDataArray0);
      assertFalse(subSelectionTreeField0.isIdentityField());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubSelectionTreeField<Object> subSelectionTreeField0 = new SubSelectionTreeField<Object>(59, (Supplier<Collection<Object>>) null, (Field) null, true);
      SubSelectionTreeField<Object> subSelectionTreeField1 = new SubSelectionTreeField<Object>(1, (Supplier<Collection<Object>>) null, (Field) null, true);
      boolean boolean0 = subSelectionTreeField1.equals(subSelectionTreeField0);
      assertFalse(boolean0);
      assertEquals(1, subSelectionTreeField1.getSubSelectionIndex());
      assertFalse(subSelectionTreeField0.equals((Object)subSelectionTreeField1));
      assertTrue(subSelectionTreeField1.isIdentityField());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Supplier<Collection<SubSelectionTreeField<Integer>>> supplier0 = (Supplier<Collection<SubSelectionTreeField<Integer>>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SubSelectionTreeField<SubSelectionTreeField<Integer>> subSelectionTreeField0 = new SubSelectionTreeField<SubSelectionTreeField<Integer>>(464, supplier0, (Field) null, true);
      boolean boolean0 = subSelectionTreeField0.isIdentityField();
      assertTrue(boolean0);
      assertEquals(464, subSelectionTreeField0.getSubSelectionIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Supplier<Collection<SubSelectionTreeField<Integer>>> supplier0 = (Supplier<Collection<SubSelectionTreeField<Integer>>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SubSelectionTreeField<SubSelectionTreeField<Integer>> subSelectionTreeField0 = new SubSelectionTreeField<SubSelectionTreeField<Integer>>(1614, supplier0, (Field) null, false);
      int int0 = subSelectionTreeField0.getSubSelectionIndex();
      assertEquals(1614, int0);
      assertEquals(SelectionTreeFieldSetter.SelectionTreeFieldSetterType.COLLECTION, subSelectionTreeField0.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Supplier<Collection<Integer>> supplier0 = (Supplier<Collection<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SubSelectionTreeField<Integer> subSelectionTreeField0 = new SubSelectionTreeField<Integer>((-1533), supplier0, (Field) null, true);
      int int0 = subSelectionTreeField0.getSubSelectionIndex();
      assertEquals((-1533), int0);
      assertEquals(SelectionTreeFieldSetter.SelectionTreeFieldSetterType.IDENTITY, subSelectionTreeField0.getType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SubSelectionTreeField<Object> subSelectionTreeField0 = new SubSelectionTreeField<Object>(3788, (Supplier<Collection<Object>>) null, (Field) null, false);
      subSelectionTreeField0.getCollectionSupplier();
      assertEquals(3788, subSelectionTreeField0.getSubSelectionIndex());
      assertEquals(SelectionTreeFieldSetter.SelectionTreeFieldSetterType.SINGLE, subSelectionTreeField0.getType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubSelectionTreeField<Object> subSelectionTreeField0 = new SubSelectionTreeField<Object>(15, (Supplier<Collection<Object>>) null, (Field) null, false);
      SelectionTreeData[] selectionTreeDataArray0 = new SelectionTreeData[9];
      // Undeclared exception!
      try { 
        subSelectionTreeField0.setField(selectionTreeDataArray0[0], selectionTreeDataArray0, selectionTreeDataArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 15 out of bounds for length 9
         //
         verifyException("be.shad.tsqb.selection.group.SubSelectionTreeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Supplier<Collection<Object>> supplier0 = (Supplier<Collection<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SubSelectionTreeField<Object> subSelectionTreeField0 = new SubSelectionTreeField<Object>(2, supplier0, (Field) null, true);
      subSelectionTreeField0.getField();
      assertEquals(SelectionTreeFieldSetter.SelectionTreeFieldSetterType.IDENTITY, subSelectionTreeField0.getType());
      assertEquals(2, subSelectionTreeField0.getSubSelectionIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Supplier<Collection<HashMap<Object, Object>>> supplier0 = (Supplier<Collection<HashMap<Object, Object>>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SubSelectionTreeField<HashMap<Object, Object>> subSelectionTreeField0 = new SubSelectionTreeField<HashMap<Object, Object>>(0, supplier0, (Field) null, false);
      int int0 = subSelectionTreeField0.getSubSelectionIndex();
      assertEquals(0, int0);
      assertFalse(subSelectionTreeField0.isIdentityField());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubSelectionTreeField<Integer> subSelectionTreeField0 = new SubSelectionTreeField<Integer>(0, (Supplier<Collection<Integer>>) null, (Field) null, false);
      boolean boolean0 = subSelectionTreeField0.isIdentityField();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Supplier<Collection<HashMap<Object, Integer>>> supplier0 = (Supplier<Collection<HashMap<Object, Integer>>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SubSelectionTreeField<HashMap<Object, Integer>> subSelectionTreeField0 = new SubSelectionTreeField<HashMap<Object, Integer>>(1, supplier0, (Field) null, false);
      boolean boolean0 = subSelectionTreeField0.isCollectionFieldSetter();
      assertEquals(SelectionTreeFieldSetter.SelectionTreeFieldSetterType.COLLECTION, subSelectionTreeField0.getType());
      assertEquals(1, subSelectionTreeField0.getSubSelectionIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SubSelectionTreeField<Object> subSelectionTreeField0 = new SubSelectionTreeField<Object>((-4001), (Supplier<Collection<Object>>) null, (Field) null, true);
      boolean boolean0 = subSelectionTreeField0.isCollectionFieldSetter();
      assertEquals(SelectionTreeFieldSetter.SelectionTreeFieldSetterType.IDENTITY, subSelectionTreeField0.getType());
      assertEquals((-4001), subSelectionTreeField0.getSubSelectionIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SubSelectionTreeField<Object> subSelectionTreeField0 = new SubSelectionTreeField<Object>(0, (Supplier<Collection<Object>>) null, (Field) null, false);
      assertEquals(0, subSelectionTreeField0.getSubSelectionIndex());
      
      SelectionTreeData selectionTreeData0 = new SelectionTreeData();
      SelectionTreeResult selectionTreeResult0 = new SelectionTreeResult((Object) null);
      selectionTreeData0.setResult(selectionTreeResult0);
      SelectionTreeData[] selectionTreeDataArray0 = new SelectionTreeData[1];
      selectionTreeDataArray0[0] = selectionTreeData0;
      subSelectionTreeField0.setField(selectionTreeData0, selectionTreeDataArray0, selectionTreeDataArray0);
      assertEquals(SelectionTreeFieldSetter.SelectionTreeFieldSetterType.SINGLE, subSelectionTreeField0.getType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SubSelectionTreeField<Object> subSelectionTreeField0 = new SubSelectionTreeField<Object>(0, (Supplier<Collection<Object>>) null, (Field) null, false);
      Supplier<Collection<Annotation>> supplier0 = (Supplier<Collection<Annotation>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).toString();
      SubSelectionTreeField<Annotation> subSelectionTreeField1 = new SubSelectionTreeField<Annotation>(0, supplier0, (Field) null, false);
      boolean boolean0 = subSelectionTreeField1.equals(subSelectionTreeField0);
      assertFalse(boolean0);
      assertEquals(0, subSelectionTreeField1.getSubSelectionIndex());
      assertFalse(subSelectionTreeField1.isIdentityField());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubSelectionTreeField<Object> subSelectionTreeField0 = new SubSelectionTreeField<Object>(3788, (Supplier<Collection<Object>>) null, (Field) null, false);
      SubSelectionTreeField<Object> subSelectionTreeField1 = new SubSelectionTreeField<Object>(3788, (Supplier<Collection<Object>>) null, (Field) null, false);
      boolean boolean0 = subSelectionTreeField1.equals(subSelectionTreeField0);
      assertTrue(boolean0);
      assertEquals(3788, subSelectionTreeField1.getSubSelectionIndex());
      assertFalse(subSelectionTreeField1.isIdentityField());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SubSelectionTreeField<Object> subSelectionTreeField0 = new SubSelectionTreeField<Object>(3788, (Supplier<Collection<Object>>) null, (Field) null, false);
      Supplier<Collection<Annotation>> supplier0 = (Supplier<Collection<Annotation>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).toString();
      SubSelectionTreeField<Annotation> subSelectionTreeField1 = new SubSelectionTreeField<Annotation>(3788, supplier0, (Field) null, false);
      boolean boolean0 = subSelectionTreeField0.equals(subSelectionTreeField1);
      assertEquals(SelectionTreeFieldSetter.SelectionTreeFieldSetterType.COLLECTION, subSelectionTreeField1.getType());
      assertEquals(3788, subSelectionTreeField1.getSubSelectionIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SubSelectionTreeField<Object> subSelectionTreeField0 = new SubSelectionTreeField<Object>(3769, (Supplier<Collection<Object>>) null, (Field) null, false);
      SubSelectionTreeField<Object> subSelectionTreeField1 = new SubSelectionTreeField<Object>(3769, (Supplier<Collection<Object>>) null, (Field) null, true);
      boolean boolean0 = subSelectionTreeField1.equals(subSelectionTreeField0);
      assertFalse(boolean0);
      assertEquals(3769, subSelectionTreeField1.getSubSelectionIndex());
      assertEquals(SelectionTreeFieldSetter.SelectionTreeFieldSetterType.IDENTITY, subSelectionTreeField1.getType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SubSelectionTreeField<Object> subSelectionTreeField0 = new SubSelectionTreeField<Object>(1641, (Supplier<Collection<Object>>) null, (Field) null, false);
      SubSelectionTreeField<Object> subSelectionTreeField1 = new SubSelectionTreeField<Object>((-2840), (Supplier<Collection<Object>>) null, (Field) null, false);
      boolean boolean0 = subSelectionTreeField0.equals(subSelectionTreeField1);
      assertEquals((-2840), subSelectionTreeField1.getSubSelectionIndex());
      assertEquals(SelectionTreeFieldSetter.SelectionTreeFieldSetterType.SINGLE, subSelectionTreeField1.getType());
      assertFalse(boolean0);
      assertFalse(subSelectionTreeField1.equals((Object)subSelectionTreeField0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SubSelectionTreeField<Object> subSelectionTreeField0 = new SubSelectionTreeField<Object>(4178, (Supplier<Collection<Object>>) null, (Field) null, true);
      boolean boolean0 = subSelectionTreeField0.equals((Object) null);
      assertEquals(4178, subSelectionTreeField0.getSubSelectionIndex());
      assertEquals(SelectionTreeFieldSetter.SelectionTreeFieldSetterType.IDENTITY, subSelectionTreeField0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SubSelectionTreeField<Object> subSelectionTreeField0 = new SubSelectionTreeField<Object>(3769, (Supplier<Collection<Object>>) null, (Field) null, false);
      boolean boolean0 = subSelectionTreeField0.equals(subSelectionTreeField0);
      assertEquals(3769, subSelectionTreeField0.getSubSelectionIndex());
      assertEquals(SelectionTreeFieldSetter.SelectionTreeFieldSetterType.SINGLE, subSelectionTreeField0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SubSelectionTreeField<Integer> subSelectionTreeField0 = new SubSelectionTreeField<Integer>(1, (Supplier<Collection<Integer>>) null, (Field) null, true);
      subSelectionTreeField0.hashCode();
      assertEquals(1, subSelectionTreeField0.getSubSelectionIndex());
      assertEquals(SelectionTreeFieldSetter.SelectionTreeFieldSetterType.IDENTITY, subSelectionTreeField0.getType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Supplier<Collection<Object>> supplier0 = (Supplier<Collection<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).toString();
      SubSelectionTreeField<Object> subSelectionTreeField0 = new SubSelectionTreeField<Object>(1904, supplier0, (Field) null, false);
      subSelectionTreeField0.hashCode();
      assertEquals(1904, subSelectionTreeField0.getSubSelectionIndex());
      assertEquals(SelectionTreeFieldSetter.SelectionTreeFieldSetterType.COLLECTION, subSelectionTreeField0.getType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SubSelectionTreeField<Object> subSelectionTreeField0 = new SubSelectionTreeField<Object>(3788, (Supplier<Collection<Object>>) null, (Field) null, false);
      String string0 = subSelectionTreeField0.toString();
      assertEquals("SubSelectionTreeField(subSelectionIndex=3788, collectionSupplier=null, field=null, identityField=false)", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Supplier<Collection<Object>> supplier0 = (Supplier<Collection<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(supplier0).toString();
      SubSelectionTreeField<Object> subSelectionTreeField0 = new SubSelectionTreeField<Object>(1904, supplier0, (Field) null, false);
      Supplier<Collection<Object>> supplier1 = subSelectionTreeField0.getCollectionSupplier();
      SubSelectionTreeField<Object> subSelectionTreeField1 = new SubSelectionTreeField<Object>(1904, supplier1, (Field) null, false);
      boolean boolean0 = subSelectionTreeField0.equals(subSelectionTreeField1);
      assertTrue(boolean0);
      assertEquals(SelectionTreeFieldSetter.SelectionTreeFieldSetterType.COLLECTION, subSelectionTreeField1.getType());
      assertEquals(1904, subSelectionTreeField1.getSubSelectionIndex());
  }
}
