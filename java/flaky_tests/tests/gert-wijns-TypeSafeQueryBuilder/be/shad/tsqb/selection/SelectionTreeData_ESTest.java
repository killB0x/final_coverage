/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 23:19:11 GMT 2022
 */

package be.shad.tsqb.selection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import be.shad.tsqb.helper.BuildFn;
import be.shad.tsqb.selection.SelectionTreeData;
import be.shad.tsqb.selection.SelectionTreeResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SelectionTreeData_ESTest extends SelectionTreeData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SelectionTreeData selectionTreeData0 = new SelectionTreeData();
      selectionTreeData0.setDuplicate(true);
      boolean boolean0 = selectionTreeData0.isDuplicate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SelectionTreeData selectionTreeData0 = new SelectionTreeData();
      Object object0 = new Object();
      SelectionTreeResult selectionTreeResult0 = new SelectionTreeResult(object0);
      selectionTreeData0.setResult(selectionTreeResult0);
      SelectionTreeResult selectionTreeResult1 = selectionTreeData0.getResult();
      assertSame(selectionTreeResult1, selectionTreeResult0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SelectionTreeData selectionTreeData0 = new SelectionTreeData();
      SelectionTreeResult selectionTreeResult0 = new SelectionTreeResult((Object) null);
      selectionTreeData0.setResult(selectionTreeResult0);
      Object object0 = selectionTreeData0.getCurrentValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SelectionTreeData selectionTreeData0 = new SelectionTreeData();
      Object object0 = new Object();
      SelectionTreeResult selectionTreeResult0 = new SelectionTreeResult(object0);
      selectionTreeData0.setResult(selectionTreeResult0);
      Object object1 = selectionTreeData0.getCurrentValue();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SelectionTreeData selectionTreeData0 = new SelectionTreeData();
      // Undeclared exception!
      try { 
        selectionTreeData0.getBuiltValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.selection.SelectionTreeData", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SelectionTreeData selectionTreeData0 = new SelectionTreeData();
      BuildFn<Object, Object> buildFn0 = (BuildFn<Object, Object>) mock(BuildFn.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      SelectionTreeResult selectionTreeResult0 = new SelectionTreeResult(object0);
      selectionTreeData0.setResult(selectionTreeResult0);
      selectionTreeData0.setGroupResultTf(buildFn0);
      selectionTreeResult0.setBuiltValue(object0);
      Object object1 = selectionTreeData0.getBuiltValue();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SelectionTreeData selectionTreeData0 = new SelectionTreeData();
      BuildFn<Object, Object> buildFn0 = (BuildFn<Object, Object>) mock(BuildFn.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(buildFn0).build(any());
      Object object0 = new Object();
      SelectionTreeResult selectionTreeResult0 = new SelectionTreeResult(object0);
      selectionTreeData0.setResult(selectionTreeResult0);
      selectionTreeData0.setGroupResultTf(buildFn0);
      Object object1 = selectionTreeData0.getBuiltValue();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SelectionTreeData selectionTreeData0 = new SelectionTreeData();
      SelectionTreeResult selectionTreeResult0 = new SelectionTreeResult((Object) null);
      selectionTreeData0.setResult(selectionTreeResult0);
      Object object0 = selectionTreeData0.getBuiltValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SelectionTreeData selectionTreeData0 = new SelectionTreeData();
      boolean boolean0 = selectionTreeData0.isDuplicate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SelectionTreeData selectionTreeData0 = new SelectionTreeData();
      SelectionTreeResult selectionTreeResult0 = selectionTreeData0.getResult();
      assertNull(selectionTreeResult0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SelectionTreeData selectionTreeData0 = new SelectionTreeData();
      // Undeclared exception!
      try { 
        selectionTreeData0.getCurrentValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.selection.SelectionTreeData", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SelectionTreeData selectionTreeData0 = new SelectionTreeData();
      Object object0 = new Object();
      SelectionTreeResult selectionTreeResult0 = new SelectionTreeResult(object0);
      selectionTreeData0.setResult(selectionTreeResult0);
      Object object1 = selectionTreeData0.getBuiltValue();
      assertSame(object1, object0);
  }
}
