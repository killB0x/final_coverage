/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 23:18:54 GMT 2022
 */

package be.shad.tsqb.selection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import be.shad.tsqb.selection.SelectionTree;
import be.shad.tsqb.selection.SelectionTreeData;
import java.lang.reflect.Field;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SelectionTree_ESTest extends SelectionTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object object0 = new Object();
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(supplier0).get();
      SelectionTree selectionTree0 = new SelectionTree(class0, false, supplier0, (-1734));
      selectionTree0.newResultValue();
      assertFalse(selectionTree0.isMap());
      assertEquals((-1734), selectionTree0.getResultIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SelectionTree selectionTree0 = new SelectionTree(class0, false, supplier0, 0);
      boolean boolean0 = selectionTree0.isMap();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SelectionTree selectionTree0 = new SelectionTree(class0, false, supplier0, 0);
      assertEquals(0, selectionTree0.getResultIndex());
      
      SelectionTreeData[] selectionTreeDataArray0 = new SelectionTreeData[6];
      SelectionTreeData selectionTreeData0 = new SelectionTreeData();
      selectionTreeDataArray0[0] = selectionTreeData0;
      Object object0 = new Object();
      SelectionTreeData selectionTreeData1 = selectionTree0.initialize(selectionTreeDataArray0, object0);
      assertFalse(selectionTree0.isMap());
      assertFalse(selectionTreeData1.isDuplicate());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SelectionTree selectionTree0 = new SelectionTree(class0, false, supplier0, 0);
      selectionTree0.getResultType();
      assertFalse(selectionTree0.isMap());
      assertEquals(0, selectionTree0.getResultIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SelectionTree selectionTree0 = new SelectionTree(class0, false, supplier0, 0);
      int int0 = selectionTree0.getResultIndex();
      assertEquals(0, int0);
      assertFalse(selectionTree0.isMap());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SelectionTree selectionTree0 = new SelectionTree(class0, false, supplier0, 1);
      int int0 = selectionTree0.getResultIndex();
      assertFalse(selectionTree0.isMap());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SelectionTree selectionTree0 = new SelectionTree(class0, false, (Supplier<?>) null, (-818));
      // Undeclared exception!
      try { 
        selectionTree0.newResultValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.selection.SelectionTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SelectionTree selectionTree0 = new SelectionTree(class0, false, (Supplier<?>) null, 59);
      // Undeclared exception!
      try { 
        selectionTree0.initialize((SelectionTreeData[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("be.shad.tsqb.selection.SelectionTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SelectionTree selectionTree0 = new SelectionTree(class0, true, supplier0, (-363));
      int int0 = selectionTree0.getResultIndex();
      assertEquals((-363), int0);
      assertTrue(selectionTree0.isMap());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Field field0 = SelectionTree.getField(class0, "DigitOnes");
      assertEquals("DigitOnes", field0.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        SelectionTree.getField((Class<?>) null, "[>x=0Rjc2LbS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Clazz may not be null
         //
         verifyException("be.shad.tsqb.selection.SelectionTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        SelectionTree.getField(class0, "zBn I_3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Couldn't find field [zBn I_3] on class [java.lang.Integer]
         //
         verifyException("be.shad.tsqb.selection.SelectionTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SelectionTree selectionTree0 = new SelectionTree(class0, false, (Supplier<?>) null, 1);
      SelectionTreeData[] selectionTreeDataArray0 = new SelectionTreeData[0];
      // Undeclared exception!
      try { 
        selectionTree0.initialize(selectionTreeDataArray0, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("be.shad.tsqb.selection.SelectionTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      SelectionTree selectionTree0 = new SelectionTree(class0, false, supplier0, 0);
      selectionTree0.newResultValue();
      assertFalse(selectionTree0.isMap());
      assertEquals(0, selectionTree0.getResultIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SelectionTree selectionTree0 = new SelectionTree((Class<?>) null, true, supplier0, 3719);
      selectionTree0.getResultType();
      assertEquals(3719, selectionTree0.getResultIndex());
      assertTrue(selectionTree0.isMap());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SelectionTree selectionTree0 = new SelectionTree(class0, true, supplier0, (-97));
      boolean boolean0 = selectionTree0.isMap();
      assertTrue(boolean0);
      assertEquals((-97), selectionTree0.getResultIndex());
  }
}
