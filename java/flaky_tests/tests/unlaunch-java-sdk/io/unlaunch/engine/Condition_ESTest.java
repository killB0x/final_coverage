/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 08:41:38 GMT 2022
 */

package io.unlaunch.engine;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.unlaunch.UnlaunchAttribute;
import io.unlaunch.engine.AttributeType;
import io.unlaunch.engine.Condition;
import io.unlaunch.engine.Operator;
import io.unlaunch.engine.UnlaunchUser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Condition_ESTest extends Condition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Operator operator0 = Operator.DOES_NOT_HAVE_ANY_OF;
      AttributeType attributeType0 = AttributeType.SET;
      Condition condition0 = new Condition("GTE", operator0, attributeType0, "pV\"o#w0");
      UnlaunchAttribute[] unlaunchAttributeArray0 = new UnlaunchAttribute[7];
      UnlaunchAttribute unlaunchAttribute0 = UnlaunchAttribute.newDateTime("[i~B", 0L);
      unlaunchAttributeArray0[0] = unlaunchAttribute0;
      unlaunchAttributeArray0[1] = unlaunchAttributeArray0[0];
      UnlaunchAttribute unlaunchAttribute1 = UnlaunchAttribute.newDate("GTE", 0L);
      unlaunchAttributeArray0[2] = unlaunchAttribute1;
      unlaunchAttributeArray0[3] = unlaunchAttributeArray0[1];
      unlaunchAttributeArray0[4] = unlaunchAttributeArray0[0];
      unlaunchAttributeArray0[5] = unlaunchAttributeArray0[4];
      unlaunchAttributeArray0[6] = unlaunchAttributeArray0[1];
      UnlaunchUser unlaunchUser0 = UnlaunchUser.createWithAttributes("Zj M~2fmwmr", unlaunchAttributeArray0);
      boolean boolean0 = condition0.match(unlaunchUser0);
      assertEquals("pV\"o#w0", condition0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Operator operator0 = Operator.STARTS_WITH;
      AttributeType attributeType0 = AttributeType.DATE;
      Condition condition0 = new Condition("4R5w-FL4b:_5d", operator0, attributeType0, "");
      assertEquals("", condition0.getValue());
      
      condition0.setValue((String) null);
      condition0.getValue();
      assertEquals("4R5w-FL4b:_5d", condition0.getAttribute());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Operator operator0 = Operator.ENDS_WITH;
      AttributeType attributeType0 = AttributeType.DATE;
      Condition condition0 = new Condition("", operator0, attributeType0, "");
      String string0 = condition0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Operator operator0 = Operator.DOES_NOT_HAVE_ANY_OF;
      AttributeType attributeType0 = AttributeType.SET;
      Condition condition0 = new Condition("GTE", operator0, attributeType0, "pV\"o#w0");
      condition0.getType();
      assertEquals("pV\"o#w0", condition0.getValue());
      assertEquals("GTE", condition0.getAttribute());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Operator operator0 = Operator.STARTS_WITH;
      AttributeType attributeType0 = AttributeType.DATE;
      Condition condition0 = new Condition("4R5w-FL4b:_5d", operator0, attributeType0, "");
      condition0.getOperator();
      assertEquals("4R5w-FL4b:_5d", condition0.getAttribute());
      assertEquals("", condition0.getValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Operator operator0 = Operator.NOT_ENDS_WITH;
      AttributeType attributeType0 = AttributeType.SET;
      Condition condition0 = new Condition((String) null, operator0, attributeType0, "io.unlaunch.engine.Condition");
      String string0 = condition0.getAttribute();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Operator operator0 = Operator.LESS_THAN;
      AttributeType attributeType0 = AttributeType.DATE_TIME;
      Condition condition0 = new Condition("", operator0, attributeType0, "");
      String string0 = condition0.getAttribute();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Operator operator0 = Operator.NOT_EQUALS;
      AttributeType attributeType0 = AttributeType.SET;
      Condition condition0 = new Condition("\ra#U`4[R57l}", operator0, attributeType0, "\ra#U`4[R57l}");
      condition0.setAttribute("set");
      UnlaunchUser unlaunchUser0 = UnlaunchUser.createAnonymous();
      unlaunchUser0.putAttribute("set", "set");
      // Undeclared exception!
      try { 
        condition0.match(unlaunchUser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can not convert set to Set. Please make sure your set is valid!
         //
         verifyException("io.unlaunch.engine.Operator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AttributeType attributeType0 = AttributeType.NUMBER;
      Operator operator0 = Operator.IS_PART_OF;
      Condition condition0 = new Condition("|JNH*Gu>R6tIFf?zfG-", operator0, attributeType0, "|JNH*Gu>R6tIFf?zfG-");
      // Undeclared exception!
      try { 
        condition0.match((UnlaunchUser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.unlaunch.engine.Condition", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Operator operator0 = Operator.GREATER_THAN;
      AttributeType attributeType0 = AttributeType.DATE;
      Condition condition0 = new Condition("i: h)", operator0, attributeType0, "i: h)");
      UnlaunchAttribute[] unlaunchAttributeArray0 = new UnlaunchAttribute[3];
      UnlaunchAttribute unlaunchAttribute0 = UnlaunchAttribute.newDateTime("i: h)", (-180L));
      unlaunchAttributeArray0[0] = unlaunchAttribute0;
      unlaunchAttributeArray0[1] = unlaunchAttribute0;
      unlaunchAttributeArray0[2] = unlaunchAttribute0;
      UnlaunchUser unlaunchUser0 = UnlaunchUser.createWithAttributes("i: h)", unlaunchAttributeArray0);
      // Undeclared exception!
      try { 
        condition0.match(unlaunchUser0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"i: h)\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Operator operator0 = Operator.EQUALS;
      Condition condition0 = new Condition("[>*pdO\"sNF)cBZ", operator0, (AttributeType) null, "E8[L");
      UnlaunchUser unlaunchUser0 = UnlaunchUser.createAnonymous();
      boolean boolean0 = condition0.match(unlaunchUser0);
      assertFalse(boolean0);
      assertEquals("[>*pdO\"sNF)cBZ", condition0.getAttribute());
      assertEquals("E8[L", condition0.getValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Operator operator0 = Operator.EQUALS;
      Condition condition0 = new Condition("[>*pdO\"sNF)cBZ", operator0, (AttributeType) null, "E8[L");
      condition0.getType();
      assertEquals("E8[L", condition0.getValue());
      assertEquals("[>*pdO\"sNF)cBZ", condition0.getAttribute());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Operator operator0 = Operator.STARTS_WITH;
      AttributeType attributeType0 = AttributeType.DATE;
      Condition condition0 = new Condition("4R5w-FL4b:_5d", operator0, attributeType0, "");
      condition0.setOperator(operator0);
      assertEquals("4R5w-FL4b:_5d", condition0.getAttribute());
      assertEquals("", condition0.getValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Operator operator0 = Operator.ENDS_WITH;
      AttributeType attributeType0 = AttributeType.STRING;
      Condition condition0 = new Condition("t;n&kebp^V]@<J", operator0, attributeType0, "t;n&kebp^V]@<J");
      String string0 = condition0.getAttribute();
      assertEquals("t;n&kebp^V]@<J", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AttributeType attributeType0 = AttributeType.DATE_TIME;
      Condition condition0 = new Condition((String) null, (Operator) null, attributeType0, (String) null);
      condition0.getOperator();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Operator operator0 = Operator.STARTS_WITH;
      AttributeType attributeType0 = AttributeType.BOOLEAN;
      Condition condition0 = new Condition("26|>", operator0, attributeType0, "KElp]oZd&UR&");
      condition0.setType(attributeType0);
      assertEquals("KElp]oZd&UR&", condition0.getValue());
      assertEquals("26|>", condition0.getAttribute());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Operator operator0 = Operator.DOES_NOT_HAVE_ANY_OF;
      AttributeType attributeType0 = AttributeType.SET;
      Condition condition0 = new Condition("GTE", operator0, attributeType0, "pV\"o#w0");
      String string0 = condition0.getValue();
      assertEquals("pV\"o#w0", string0);
      assertEquals("GTE", condition0.getAttribute());
  }
}
