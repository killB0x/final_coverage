/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 04:43:36 GMT 2022
 */

package org.riversun.promise;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.riversun.promise.Func;
import org.riversun.promise.Promise;
import org.riversun.promise.Status;
import org.riversun.promise.SyncPromise;
import org.riversun.promise.Thennable;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SyncPromise_ESTest extends SyncPromise_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        SyncPromise.sleep((-360L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SyncPromise syncPromise0 = SyncPromise.resolve();
      Thennable[] thennableArray0 = new Thennable[4];
      thennableArray0[0] = (Thennable) syncPromise0;
      SyncPromise syncPromise1 = syncPromise0.then(thennableArray0);
      assertNotNull(syncPromise1);
      assertEquals(Status.FULFILLED, syncPromise1.getStatus());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SyncPromise syncPromise0 = SyncPromise.resolve();
      Thennable[] thennableArray0 = new Thennable[4];
      SyncPromise syncPromise1 = syncPromise0.then(thennableArray0);
      assertEquals(Status.FULFILLED, syncPromise1.getStatus());
      assertNotNull(syncPromise1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      SyncPromise syncPromise0 = SyncPromise.resolve(object0);
      Object object1 = syncPromise0.getValue();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SyncPromise syncPromise0 = new SyncPromise();
      Object object0 = syncPromise0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Func[] funcArray0 = new Func[0];
      SyncPromise syncPromise0 = SyncPromise.all(funcArray0);
      assertEquals(Status.FULFILLED, syncPromise0.getStatus());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SyncPromise syncPromise0 = SyncPromise.reject();
      Promise promise0 = new Promise((ExecutorService) null);
      // Undeclared exception!
      try { 
        syncPromise0.always((Thennable) promise0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.riversun.promise.Promise cannot be cast to class org.riversun.promise.SyncPromise (org.riversun.promise.Promise and org.riversun.promise.SyncPromise are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @600649ff)
         //
         verifyException("org.riversun.promise.SyncPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SyncPromise syncPromise0 = new SyncPromise();
      Thennable[] thennableArray0 = new Thennable[1];
      SyncPromise syncPromise1 = syncPromise0.then(thennableArray0);
      assertNull(syncPromise1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SyncPromise syncPromise0 = new SyncPromise();
      Func[] funcArray0 = new Func[4];
      SyncPromise syncPromise1 = syncPromise0.then(funcArray0);
      assertNull(syncPromise1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SyncPromise syncPromise0 = SyncPromise.reject();
      Func[] funcArray0 = new Func[0];
      // Undeclared exception!
      try { 
        syncPromise0.then(funcArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Please set  at least one Promise.
         //
         verifyException("org.riversun.promise.SyncPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SyncPromise syncPromise0 = new SyncPromise();
      // Undeclared exception!
      try { 
        syncPromise0.then((Func[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Please set  at least one Promise.
         //
         verifyException("org.riversun.promise.SyncPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SyncPromise syncPromise0 = new SyncPromise();
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      SyncPromise syncPromise1 = syncPromise0.always(func0);
      assertNull(syncPromise1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SyncPromise syncPromise0 = SyncPromise.resolve();
      SyncPromise syncPromise1 = syncPromise0.always((Thennable) syncPromise0);
      assertEquals(Status.FULFILLED, syncPromise1.getStatus());
      assertNotNull(syncPromise1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SyncPromise syncPromise0 = SyncPromise.reject();
      SyncPromise syncPromise1 = syncPromise0.start();
      assertSame(syncPromise0, syncPromise1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      SyncPromise syncPromise0 = new SyncPromise(func0);
      Thennable[] thennableArray0 = new Thennable[8];
      SyncPromise syncPromise1 = syncPromise0.then(thennableArray0);
      assertNull(syncPromise1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SyncPromise.sleep(0L);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SyncPromise syncPromise0 = SyncPromise.reject();
      Status status0 = syncPromise0.getStatus();
      assertEquals(Status.REJECTED, status0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Thennable[] thennableArray0 = new Thennable[1];
      SyncPromise syncPromise0 = SyncPromise.all(thennableArray0);
      assertEquals(Status.FULFILLED, syncPromise0.getStatus());
  }
}
