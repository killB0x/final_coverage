/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 04:41:30 GMT 2022
 */

package org.riversun.promise;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.Future;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.riversun.promise.Func;
import org.riversun.promise.Log;
import org.riversun.promise.Promise;
import org.riversun.promise.Status;
import org.riversun.promise.SyncPromise;
import org.riversun.promise.Thennable;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Promise_ESTest extends Promise_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn("").when(func0).toString();
      Promise promise0 = new Promise("", func0, forkJoinPool0);
      Func func1 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(func1).toString();
      Promise promise1 = new Promise("", func1, forkJoinPool0);
      promise1.always((Thennable) promise0);
      Promise.all((ExecutorService) forkJoinPool0, (Func[]) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Func[] funcArray0 = new Func[7];
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "", "!VmY^6K60#;").when(func0).toString();
      funcArray0[0] = func0;
      funcArray0[1] = func0;
      funcArray0[2] = func0;
      funcArray0[3] = func0;
      funcArray0[4] = func0;
      funcArray0[5] = func0;
      funcArray0[6] = func0;
      Promise promise0 = Promise.all(funcArray0);
      assertNotNull(promise0);
      assertEquals(7, funcArray0.length);
      assertEquals(Status.PENDING, promise0.getStatus());
      
      Promise.sleep(0L);
      Promise promise1 = Promise.reject();
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.REJECTED, promise1.getStatus());
      
      Log.setLogEnabled(false);
      Thennable[] thennableArray0 = new Thennable[2];
      thennableArray0[0] = (Thennable) promise1;
      thennableArray0[1] = (Thennable) promise0;
      Promise promise2 = promise1.then(thennableArray0);
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise2);
      assertEquals(2, thennableArray0.length);
      assertNotSame(promise2, promise0);
      assertNotSame(promise2, promise1);
      assertNotSame(promise1, promise0);
      assertNotSame(promise1, promise2);
      assertEquals(Status.PENDING, promise2.getStatus());
      assertEquals(Status.REJECTED, promise1.getStatus());
      
      Thennable[] thennableArray1 = new Thennable[9];
      assertFalse(thennableArray1.equals((Object)thennableArray0));
      
      thennableArray1[0] = (Thennable) promise0;
      SyncPromise syncPromise0 = new SyncPromise();
      assertNotNull(syncPromise0);
      assertEquals(Status.PENDING, syncPromise0.getStatus());
      
      thennableArray1[1] = (Thennable) syncPromise0;
      thennableArray1[2] = (Thennable) promise0;
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertEquals(18, thread0.countStackFrames());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      
      MockException mockException0 = new MockException("");
      assertNotNull(mockException0);
      
      Promise promise3 = Promise.reject((Object) thennableArray0[1]);
      assertFalse(promise3.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise0));
      assertFalse(promise3.equals((Object)promise1));
      assertFalse(thennableArray0.equals((Object)thennableArray1));
      assertNotNull(promise3);
      assertEquals(2, thennableArray0.length);
      assertNotSame(promise3, promise2);
      assertNotSame(promise3, promise0);
      assertNotSame(promise3, promise1);
      assertNotSame(thennableArray0, thennableArray1);
      assertEquals(Status.REJECTED, promise3.getStatus());
      
      MockThread mockThread0 = new MockThread(thread0);
      assertNotNull(mockThread0);
      
      StackTraceElement[] stackTraceElementArray0 = mockThread0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
      assertEquals(18, thread0.countStackFrames());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "", 0L);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread2 = new MockThread(threadGroup1, mockThread0, "-)DLr];w3G(f$tf/&");
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNotNull(mockThread2);
      
      promise0.runOnThread(thread0);
      assertFalse(promise0.equals((Object)promise3));
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise0.equals((Object)promise2));
      assertEquals(7, funcArray0.length);
      assertNotSame(promise0, promise3);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise2);
      assertEquals(18, thread0.countStackFrames());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(Status.PENDING, promise0.getStatus());
      
      Promise promise4 = promise0.always(thennableArray1[0]);
      assertFalse(promise4.equals((Object)promise1));
      assertFalse(promise4.equals((Object)promise0));
      assertFalse(promise4.equals((Object)promise3));
      assertFalse(promise4.equals((Object)promise2));
      assertFalse(thennableArray1.equals((Object)thennableArray0));
      assertFalse(promise0.equals((Object)promise3));
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise0.equals((Object)promise2));
      assertNotNull(promise4);
      assertEquals(7, funcArray0.length);
      assertEquals(9, thennableArray1.length);
      assertNotSame(promise4, promise1);
      assertNotSame(promise4, promise0);
      assertNotSame(promise4, promise3);
      assertNotSame(promise4, promise2);
      assertNotSame(thennableArray1, thennableArray0);
      assertNotSame(promise0, promise3);
      assertNotSame(promise0, promise4);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise2);
      assertEquals(Status.PENDING, promise4.getStatus());
      assertEquals(Status.PENDING, promise0.getStatus());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Promise promise0 = Promise.reject();
      assertNotNull(promise0);
      assertEquals(Status.REJECTED, promise0.getStatus());
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5);
      assertNotNull(forkJoinPool0);
      
      long long0 = forkJoinPool0.getQueuedTaskCount();
      assertEquals(0L, long0);
      
      Thennable[] thennableArray0 = null;
      Promise promise1 = Promise.all((ExecutorService) forkJoinPool0, (Thennable[]) null);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.FULFILLED, promise1.getStatus());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      // Undeclared exception!
      try { 
        promise1.runOnThread(mockThread0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.riversun.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn(" crrResult=", " crrResult=", (String) null).when(func0).toString();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      assertNotNull(priorityBlockingQueue0);
      
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(0, 1352, 0, timeUnit0, priorityBlockingQueue0);
      assertNotNull(threadPoolExecutor0);
      
      LinkedHashSet<Callable<Exception>> linkedHashSet0 = new LinkedHashSet<Callable<Exception>>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      List<Future<Exception>> list0 = threadPoolExecutor0.invokeAll((Collection<? extends Callable<Exception>>) linkedHashSet0, (long) 0, timeUnit0);
      assertNotNull(list0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Promise promise0 = new Promise(func0, threadPoolExecutor0);
      assertNotNull(promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      
      Promise.sleep(1352);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Func[] funcArray0 = new Func[1];
      funcArray0[0] = func0;
      Promise promise1 = promise0.then(funcArray0);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertEquals(1, funcArray0.length);
      assertNotSame(promise0, promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(3830);
      assertNotNull(forkJoinPool0);
      
      Promise promise2 = new Promise("org.riversun.promise.Promise$2", func0, threadPoolExecutor0);
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertNotNull(promise2);
      assertEquals(Status.PENDING, promise2.getStatus());
      
      Thennable[] thennableArray0 = new Thennable[1];
      thennableArray0[0] = (Thennable) promise1;
      Promise promise3 = promise2.then(thennableArray0);
      assertFalse(promise3.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise0));
      assertFalse(promise3.equals((Object)promise1));
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertNotNull(promise3);
      assertEquals(1, thennableArray0.length);
      assertNotSame(promise3, promise2);
      assertNotSame(promise3, promise0);
      assertNotSame(promise3, promise1);
      assertNotSame(promise2, promise0);
      assertNotSame(promise2, promise1);
      assertNotSame(promise2, promise3);
      assertEquals(Status.PENDING, promise3.getStatus());
      assertEquals(Status.PENDING, promise2.getStatus());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      assertNotNull(threadPoolExecutor_DiscardOldestPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1950, threadPoolExecutor_DiscardOldestPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Func[] funcArray0 = new Func[7];
      funcArray0[1] = funcArray0[0];
      funcArray0[2] = funcArray0[1];
      funcArray0[3] = funcArray0[2];
      funcArray0[6] = funcArray0[5];
      // Undeclared exception!
      try { 
        Promise.all((ExecutorService) scheduledThreadPoolExecutor0, funcArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.riversun.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Promise promise0 = Promise.resolve((Object) null);
      assertNotNull(promise0);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      
      Func[] funcArray0 = new Func[6];
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      // Undeclared exception!
      try { 
        Promise.all((ExecutorService) null, funcArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.riversun.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Func[] funcArray0 = new Func[0];
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      List<Runnable> list0 = forkJoinPool0.shutdownNow();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      assertNotNull(mockThread0);
      
      forkJoinPool0.execute((Runnable) mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      Promise promise0 = Promise.all((ExecutorService) forkJoinPool0, funcArray0);
      assertNotNull(promise0);
      assertEquals(0, funcArray0.length);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      
      Promise promise1 = Promise.resolve();
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.FULFILLED, promise1.getStatus());
      
      Thennable[] thennableArray0 = new Thennable[9];
      thennableArray0[0] = (Thennable) promise1;
      thennableArray0[1] = (Thennable) promise1;
      thennableArray0[2] = (Thennable) promise0;
      thennableArray0[3] = (Thennable) promise1;
      thennableArray0[4] = (Thennable) promise1;
      SyncPromise syncPromise0 = SyncPromise.all(funcArray0);
      assertNotNull(syncPromise0);
      assertEquals(0, funcArray0.length);
      assertEquals(Status.FULFILLED, syncPromise0.getStatus());
      
      thennableArray0[5] = (Thennable) syncPromise0;
      SyncPromise syncPromise1 = new SyncPromise();
      assertFalse(syncPromise1.equals((Object)syncPromise0));
      assertNotNull(syncPromise1);
      assertEquals(Status.PENDING, syncPromise1.getStatus());
      
      thennableArray0[6] = (Thennable) syncPromise1;
      Promise promise2 = Promise.resolve((Object) null);
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertNotNull(promise2);
      assertNotSame(promise2, promise0);
      assertNotSame(promise2, promise1);
      assertEquals(Status.FULFILLED, promise2.getStatus());
      
      thennableArray0[7] = (Thennable) promise2;
      thennableArray0[8] = (Thennable) promise1;
      // Undeclared exception!
      try { 
        Promise.all(thennableArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.riversun.promise.SyncPromise cannot be cast to class org.riversun.promise.Promise (org.riversun.promise.SyncPromise and org.riversun.promise.Promise are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @1c69ee51)
         //
         verifyException("org.riversun.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn("", "(W1#Ov)k\"YJUlI", "", "", "").when(func0).toString();
      Promise promise0 = new Promise(func0);
      assertNotNull(promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      
      Thennable[] thennableArray0 = new Thennable[9];
      thennableArray0[0] = (Thennable) promise0;
      thennableArray0[1] = (Thennable) promise0;
      thennableArray0[2] = (Thennable) promise0;
      thennableArray0[3] = (Thennable) promise0;
      Func[] funcArray0 = new Func[6];
      funcArray0[0] = func0;
      funcArray0[1] = func0;
      funcArray0[2] = func0;
      funcArray0[3] = func0;
      funcArray0[4] = func0;
      funcArray0[5] = func0;
      Promise promise1 = promise0.then(funcArray0);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertEquals(6, funcArray0.length);
      assertNotSame(promise0, promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      
      thennableArray0[4] = (Thennable) promise1;
      thennableArray0[5] = (Thennable) promise0;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(3830);
      assertNotNull(forkJoinPool0);
      
      Promise promise2 = new Promise((String) null, func0, forkJoinPool0);
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertNotNull(promise2);
      assertEquals(Status.PENDING, promise2.getStatus());
      
      thennableArray0[6] = (Thennable) promise1;
      thennableArray0[7] = (Thennable) promise0;
      // Undeclared exception!
      try { 
        Promise.all(thennableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.riversun.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Promise promise0 = new Promise();
      assertNotNull(promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      
      Promise promise1 = Promise.all((Func[]) null);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.FULFILLED, promise1.getStatus());
      
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(func0).toString();
      Promise promise2 = promise0.always(func0);
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertNotNull(promise2);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise2);
      assertNotSame(promise2, promise0);
      assertNotSame(promise2, promise1);
      assertEquals(Status.PENDING, promise0.getStatus());
      assertEquals(Status.PENDING, promise2.getStatus());
      
      Promise promise3 = promise0.always((Thennable) promise2);
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise0.equals((Object)promise2));
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise0));
      assertNotNull(promise3);
      assertNotSame(promise0, promise3);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise2);
      assertNotSame(promise2, promise3);
      assertNotSame(promise2, promise0);
      assertNotSame(promise2, promise1);
      assertNotSame(promise3, promise1);
      assertNotSame(promise3, promise2);
      assertNotSame(promise3, promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      assertEquals(Status.PENDING, promise2.getStatus());
      assertEquals(Status.PENDING, promise3.getStatus());
      
      Promise promise4 = Promise.reject((Object) promise0);
      assertFalse(promise0.equals((Object)promise3));
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise0.equals((Object)promise2));
      assertFalse(promise4.equals((Object)promise3));
      assertFalse(promise4.equals((Object)promise0));
      assertFalse(promise4.equals((Object)promise1));
      assertFalse(promise4.equals((Object)promise2));
      assertNotNull(promise4);
      assertNotSame(promise0, promise3);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise4);
      assertNotSame(promise0, promise2);
      assertNotSame(promise4, promise3);
      assertNotSame(promise4, promise0);
      assertNotSame(promise4, promise1);
      assertNotSame(promise4, promise2);
      assertEquals(Status.PENDING, promise0.getStatus());
      assertEquals(Status.REJECTED, promise4.getStatus());
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      Delayed delayed0 = delayQueue0.peek();
      assertNull(delayed0);
      
      Promise promise5 = Promise.reject((Object) null);
      assertFalse(promise5.equals((Object)promise3));
      assertFalse(promise5.equals((Object)promise1));
      assertFalse(promise5.equals((Object)promise2));
      assertFalse(promise5.equals((Object)promise0));
      assertFalse(promise5.equals((Object)promise4));
      assertNotNull(promise5);
      assertNotSame(promise5, promise3);
      assertNotSame(promise5, promise1);
      assertNotSame(promise5, promise2);
      assertNotSame(promise5, promise0);
      assertNotSame(promise5, promise4);
      assertEquals(Status.REJECTED, promise5.getStatus());
      
      Promise promise6 = Promise.all((Func[]) null);
      assertFalse(promise6.equals((Object)promise3));
      assertFalse(promise6.equals((Object)promise0));
      assertFalse(promise6.equals((Object)promise1));
      assertFalse(promise6.equals((Object)promise4));
      assertFalse(promise6.equals((Object)promise2));
      assertFalse(promise6.equals((Object)promise5));
      assertNotNull(promise6);
      assertNotSame(promise6, promise3);
      assertNotSame(promise6, promise0);
      assertNotSame(promise6, promise1);
      assertNotSame(promise6, promise4);
      assertNotSame(promise6, promise2);
      assertNotSame(promise6, promise5);
      assertEquals(Status.FULFILLED, promise6.getStatus());
      
      Object object0 = promise1.getValue();
      assertFalse(promise1.equals((Object)promise5));
      assertFalse(promise1.equals((Object)promise3));
      assertFalse(promise1.equals((Object)promise0));
      assertFalse(promise1.equals((Object)promise4));
      assertFalse(promise1.equals((Object)promise2));
      assertFalse(promise1.equals((Object)promise6));
      assertNull(object0);
      assertNotSame(promise1, promise5);
      assertNotSame(promise1, promise3);
      assertNotSame(promise1, promise0);
      assertNotSame(promise1, promise4);
      assertNotSame(promise1, promise2);
      assertNotSame(promise1, promise6);
      assertEquals(Status.FULFILLED, promise1.getStatus());
      
      Func func1 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(func1).toString();
      Promise promise7 = promise4.always(func1);
      assertFalse(promise0.equals((Object)promise6));
      assertFalse(promise0.equals((Object)promise3));
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise0.equals((Object)promise4));
      assertFalse(promise0.equals((Object)promise5));
      assertFalse(promise0.equals((Object)promise2));
      assertFalse(promise4.equals((Object)promise3));
      assertFalse(promise4.equals((Object)promise0));
      assertFalse(promise4.equals((Object)promise5));
      assertFalse(promise4.equals((Object)promise1));
      assertFalse(promise4.equals((Object)promise2));
      assertFalse(promise4.equals((Object)promise6));
      assertFalse(promise7.equals((Object)promise3));
      assertFalse(promise7.equals((Object)promise5));
      assertFalse(promise7.equals((Object)promise0));
      assertFalse(promise7.equals((Object)promise4));
      assertFalse(promise7.equals((Object)promise1));
      assertFalse(promise7.equals((Object)promise2));
      assertFalse(promise7.equals((Object)promise6));
      assertNotNull(promise7);
      assertNotSame(promise0, promise6);
      assertNotSame(promise0, promise3);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise4);
      assertNotSame(promise0, promise5);
      assertNotSame(promise0, promise7);
      assertNotSame(promise0, promise2);
      assertNotSame(promise4, promise3);
      assertNotSame(promise4, promise0);
      assertNotSame(promise4, promise5);
      assertNotSame(promise4, promise1);
      assertNotSame(promise4, promise7);
      assertNotSame(promise4, promise2);
      assertNotSame(promise4, promise6);
      assertNotSame(promise7, promise3);
      assertNotSame(promise7, promise5);
      assertNotSame(promise7, promise0);
      assertNotSame(promise7, promise4);
      assertNotSame(promise7, promise1);
      assertNotSame(promise7, promise2);
      assertNotSame(promise7, promise6);
      assertEquals(Status.PENDING, promise0.getStatus());
      assertEquals(Status.REJECTED, promise4.getStatus());
      assertEquals(Status.PENDING, promise7.getStatus());
      
      Object object1 = promise5.getValue();
      assertFalse(promise5.equals((Object)promise6));
      assertFalse(promise5.equals((Object)promise3));
      assertFalse(promise5.equals((Object)promise7));
      assertFalse(promise5.equals((Object)promise1));
      assertFalse(promise5.equals((Object)promise2));
      assertFalse(promise5.equals((Object)promise0));
      assertFalse(promise5.equals((Object)promise4));
      assertNull(object1);
      assertNotSame(promise5, promise6);
      assertNotSame(promise5, promise3);
      assertNotSame(promise5, promise7);
      assertNotSame(promise5, promise1);
      assertNotSame(promise5, promise2);
      assertNotSame(promise5, promise0);
      assertNotSame(promise5, promise4);
      assertEquals(Status.REJECTED, promise5.getStatus());
      
      Thennable[] thennableArray0 = new Thennable[4];
      thennableArray0[0] = (Thennable) promise2;
      thennableArray0[1] = (Thennable) promise3;
      thennableArray0[2] = (Thennable) promise4;
      thennableArray0[3] = (Thennable) promise4;
      Promise promise8 = Promise.all((ExecutorService) null, thennableArray0);
      assertFalse(promise8.equals((Object)promise1));
      assertFalse(promise8.equals((Object)promise7));
      assertFalse(promise8.equals((Object)promise4));
      assertFalse(promise8.equals((Object)promise2));
      assertFalse(promise8.equals((Object)promise6));
      assertFalse(promise8.equals((Object)promise3));
      assertFalse(promise8.equals((Object)promise0));
      assertFalse(promise8.equals((Object)promise5));
      assertNotNull(promise8);
      assertEquals(4, thennableArray0.length);
      assertNotSame(promise8, promise1);
      assertNotSame(promise8, promise7);
      assertNotSame(promise8, promise4);
      assertNotSame(promise8, promise2);
      assertNotSame(promise8, promise6);
      assertNotSame(promise8, promise3);
      assertNotSame(promise8, promise0);
      assertNotSame(promise8, promise5);
      assertEquals(Status.PENDING, promise8.getStatus());
      
      Promise.sleep(0L);
      Promise promise9 = promise3.always(thennableArray0[3]);
      assertFalse(promise0.equals((Object)promise6));
      assertFalse(promise0.equals((Object)promise3));
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise0.equals((Object)promise4));
      assertFalse(promise0.equals((Object)promise8));
      assertFalse(promise0.equals((Object)promise5));
      assertFalse(promise0.equals((Object)promise7));
      assertFalse(promise0.equals((Object)promise2));
      assertFalse(promise2.equals((Object)promise5));
      assertFalse(promise2.equals((Object)promise6));
      assertFalse(promise2.equals((Object)promise3));
      assertFalse(promise2.equals((Object)promise4));
      assertFalse(promise2.equals((Object)promise8));
      assertFalse(promise2.equals((Object)promise7));
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise4));
      assertFalse(promise3.equals((Object)promise8));
      assertFalse(promise3.equals((Object)promise7));
      assertFalse(promise3.equals((Object)promise6));
      assertFalse(promise3.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise0));
      assertFalse(promise3.equals((Object)promise5));
      assertFalse(promise9.equals((Object)promise2));
      assertFalse(promise9.equals((Object)promise5));
      assertFalse(promise9.equals((Object)promise7));
      assertFalse(promise9.equals((Object)promise4));
      assertFalse(promise9.equals((Object)promise8));
      assertFalse(promise9.equals((Object)promise1));
      assertFalse(promise9.equals((Object)promise0));
      assertFalse(promise9.equals((Object)promise6));
      assertFalse(promise9.equals((Object)promise3));
      assertNotNull(promise9);
      assertEquals(4, thennableArray0.length);
      assertNotSame(promise0, promise6);
      assertNotSame(promise0, promise3);
      assertNotSame(promise0, promise9);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise4);
      assertNotSame(promise0, promise8);
      assertNotSame(promise0, promise5);
      assertNotSame(promise0, promise7);
      assertNotSame(promise0, promise2);
      assertNotSame(promise2, promise5);
      assertNotSame(promise2, promise6);
      assertNotSame(promise2, promise3);
      assertNotSame(promise2, promise4);
      assertNotSame(promise2, promise8);
      assertNotSame(promise2, promise7);
      assertNotSame(promise2, promise9);
      assertNotSame(promise2, promise0);
      assertNotSame(promise2, promise1);
      assertNotSame(promise3, promise1);
      assertNotSame(promise3, promise4);
      assertNotSame(promise3, promise8);
      assertNotSame(promise3, promise7);
      assertNotSame(promise3, promise6);
      assertNotSame(promise3, promise2);
      assertNotSame(promise3, promise9);
      assertNotSame(promise3, promise0);
      assertNotSame(promise3, promise5);
      assertNotSame(promise9, promise2);
      assertNotSame(promise9, promise5);
      assertNotSame(promise9, promise7);
      assertNotSame(promise9, promise4);
      assertNotSame(promise9, promise8);
      assertNotSame(promise9, promise1);
      assertNotSame(promise9, promise0);
      assertNotSame(promise9, promise6);
      assertNotSame(promise9, promise3);
      assertEquals(Status.PENDING, promise0.getStatus());
      assertEquals(Status.PENDING, promise2.getStatus());
      assertEquals(Status.PENDING, promise3.getStatus());
      assertEquals(Status.PENDING, promise9.getStatus());
      
      Promise promise10 = Promise.all(thennableArray0);
      assertFalse(promise10.equals((Object)promise2));
      assertFalse(promise10.equals((Object)promise7));
      assertFalse(promise10.equals((Object)promise4));
      assertFalse(promise10.equals((Object)promise8));
      assertFalse(promise10.equals((Object)promise1));
      assertFalse(promise10.equals((Object)promise9));
      assertFalse(promise10.equals((Object)promise0));
      assertFalse(promise10.equals((Object)promise6));
      assertFalse(promise10.equals((Object)promise5));
      assertFalse(promise10.equals((Object)promise3));
      assertNotNull(promise10);
      assertEquals(4, thennableArray0.length);
      assertNotSame(promise10, promise2);
      assertNotSame(promise10, promise7);
      assertNotSame(promise10, promise4);
      assertNotSame(promise10, promise8);
      assertNotSame(promise10, promise1);
      assertNotSame(promise10, promise9);
      assertNotSame(promise10, promise0);
      assertNotSame(promise10, promise6);
      assertNotSame(promise10, promise5);
      assertNotSame(promise10, promise3);
      assertEquals(Status.PENDING, promise10.getStatus());
      
      MockThrowable mockThrowable0 = new MockThrowable("84v8WyaWtG5");
      assertNotNull(mockThrowable0);
      
      MockThrowable mockThrowable1 = new MockThrowable("", mockThrowable0);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable1);
      
      MockException mockException0 = new MockException(" pF6/Z</", mockThrowable1);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(mockException0);
      
      Promise promise11 = Promise.resolve((Object) mockException0);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(promise11.equals((Object)promise2));
      assertFalse(promise11.equals((Object)promise7));
      assertFalse(promise11.equals((Object)promise1));
      assertFalse(promise11.equals((Object)promise3));
      assertFalse(promise11.equals((Object)promise10));
      assertFalse(promise11.equals((Object)promise5));
      assertFalse(promise11.equals((Object)promise0));
      assertFalse(promise11.equals((Object)promise6));
      assertFalse(promise11.equals((Object)promise4));
      assertFalse(promise11.equals((Object)promise8));
      assertFalse(promise11.equals((Object)promise9));
      assertNotNull(promise11);
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertNotSame(promise11, promise2);
      assertNotSame(promise11, promise7);
      assertNotSame(promise11, promise1);
      assertNotSame(promise11, promise3);
      assertNotSame(promise11, promise10);
      assertNotSame(promise11, promise5);
      assertNotSame(promise11, promise0);
      assertNotSame(promise11, promise6);
      assertNotSame(promise11, promise4);
      assertNotSame(promise11, promise8);
      assertNotSame(promise11, promise9);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 84v8WyaWtG5", mockThrowable0.toString());
      assertEquals("84v8WyaWtG5", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable1.toString());
      assertEquals("", mockThrowable1.getMessage());
      assertEquals(Status.FULFILLED, promise11.getStatus());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Promise.sleep((-1622L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      boolean boolean0 = forkJoinPool0.hasQueuedSubmissions();
      assertFalse(boolean0);
      
      Promise promise0 = new Promise("'dxN(@1|Bg?Zb(jL", forkJoinPool0);
      assertNotNull(promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Promise promise1 = Promise.reject(object0);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.REJECTED, promise1.getStatus());
      
      Promise promise2 = Promise.resolve((Object) promise1, (ExecutorService) forkJoinPool0);
      assertFalse(promise1.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertNotNull(promise2);
      assertNotSame(promise1, promise0);
      assertNotSame(promise1, promise2);
      assertNotSame(promise2, promise0);
      assertNotSame(promise2, promise1);
      assertEquals(Status.REJECTED, promise1.getStatus());
      assertEquals(Status.FULFILLED, promise2.getStatus());
      
      Func[] funcArray0 = new Func[8];
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      funcArray0[0] = func0;
      funcArray0[1] = func0;
      funcArray0[2] = func0;
      boolean boolean1 = forkJoinPool0.isTerminating();
      assertFalse(boolean1);
      
      Log.setLogEnabled(false);
      funcArray0[3] = func0;
      funcArray0[4] = func0;
      Promise promise3 = Promise.resolve((Object) forkJoinPool0, (ExecutorService) forkJoinPool0);
      assertFalse(promise3.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise0));
      assertNotNull(promise3);
      assertNotSame(promise3, promise1);
      assertNotSame(promise3, promise2);
      assertNotSame(promise3, promise0);
      assertEquals(Status.FULFILLED, promise3.getStatus());
      
      Thennable[] thennableArray0 = new Thennable[3];
      Log.setLogEnabled(false);
      SyncPromise syncPromise0 = SyncPromise.reject();
      assertNotNull(syncPromise0);
      assertEquals(Status.REJECTED, syncPromise0.getStatus());
      
      thennableArray0[0] = (Thennable) syncPromise0;
      thennableArray0[1] = (Thennable) promise1;
      thennableArray0[2] = (Thennable) promise0;
      // Undeclared exception!
      try { 
        promise3.then(thennableArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.riversun.promise.SyncPromise cannot be cast to class org.riversun.promise.Promise (org.riversun.promise.SyncPromise and org.riversun.promise.Promise are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @1c69ee51)
         //
         verifyException("org.riversun.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(18, thread0.countStackFrames());
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) thread0, 1L, timeUnit0);
      assertNotNull(scheduledFuture0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(18, thread0.countStackFrames());
      
      Promise promise0 = Promise.reject((Object) scheduledFuture0);
      assertNotNull(promise0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(18, thread0.countStackFrames());
      assertEquals(Status.REJECTED, promise0.getStatus());
      
      Object object0 = promise0.getValue();
      assertNotNull(object0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(18, thread0.countStackFrames());
      assertEquals(Status.REJECTED, promise0.getStatus());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      Thennable[] thennableArray0 = new Thennable[0];
      Promise promise0 = Promise.all((ExecutorService) forkJoinPool0, thennableArray0);
      assertNotNull(promise0);
      assertEquals(0, thennableArray0.length);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "C]Y");
      assertNotNull(mockThread0);
      
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ForkJoinTask<Delayed> forkJoinTask0 = forkJoinPool0.submit(callable0);
      assertNotNull(forkJoinTask0);
      
      ForkJoinTask<ForkJoinTask<Delayed>> forkJoinTask1 = ForkJoinTask.adapt((Runnable) mockThread0, forkJoinTask0);
      assertNotNull(forkJoinTask1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ForkJoinTask<ForkJoinTask<Delayed>> forkJoinTask2 = forkJoinPool0.submit(forkJoinTask1);
      assertNotNull(forkJoinTask2);
      assertSame(forkJoinTask1, forkJoinTask2);
      assertSame(forkJoinTask2, forkJoinTask1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ExecutorService executorService0 = promise0.createExecutor();
      assertNotNull(executorService0);
      assertEquals(0, thennableArray0.length);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      
      // Undeclared exception!
      try { 
        promise0.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.riversun.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Func[] funcArray0 = new Func[7];
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(func0).toString();
      funcArray0[0] = func0;
      funcArray0[1] = func0;
      funcArray0[2] = func0;
      funcArray0[3] = func0;
      funcArray0[4] = func0;
      funcArray0[5] = func0;
      funcArray0[6] = func0;
      Promise promise0 = Promise.all(funcArray0);
      assertNotNull(promise0);
      assertEquals(7, funcArray0.length);
      assertEquals(Status.PENDING, promise0.getStatus());
      
      promise0.mName = "/5#T8%";
      assertEquals(Status.PENDING, promise0.getStatus());
      
      Status status0 = promise0.getStatus();
      assertEquals(7, funcArray0.length);
      assertEquals(Status.PENDING, status0);
      assertEquals(Status.PENDING, promise0.getStatus());
      
      Status status1 = promise0.getStatus();
      assertEquals(7, funcArray0.length);
      assertEquals(Status.PENDING, status1);
      assertSame(status1, status0);
      assertEquals(Status.PENDING, promise0.getStatus());
      
      Promise promise1 = promise0.always((Thennable) null);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertEquals(7, funcArray0.length);
      assertNotSame(promise0, promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      
      Promise promise2 = Promise.reject((Object) "/5#T8%");
      assertFalse(promise2.equals((Object)promise1));
      assertFalse(promise2.equals((Object)promise0));
      assertNotNull(promise2);
      assertNotSame(promise2, promise1);
      assertNotSame(promise2, promise0);
      assertEquals(Status.REJECTED, promise2.getStatus());
      
      Promise promise3 = promise0.always((Thennable) null);
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise0.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise0));
      assertNotNull(promise3);
      assertEquals(7, funcArray0.length);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise2);
      assertNotSame(promise0, promise3);
      assertNotSame(promise3, promise1);
      assertNotSame(promise3, promise2);
      assertNotSame(promise3, promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      assertEquals(Status.PENDING, promise3.getStatus());
      
      ExecutorService executorService0 = promise0.createExecutor();
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise0.equals((Object)promise2));
      assertFalse(promise0.equals((Object)promise3));
      assertNotNull(executorService0);
      assertEquals(7, funcArray0.length);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise2);
      assertNotSame(promise0, promise3);
      assertEquals(Status.PENDING, promise0.getStatus());
      
      SyncPromise syncPromise0 = new SyncPromise();
      assertNotNull(syncPromise0);
      assertEquals(Status.PENDING, syncPromise0.getStatus());
      
      // Undeclared exception!
      try { 
        promise0.always((Thennable) syncPromise0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.riversun.promise.SyncPromise cannot be cast to class org.riversun.promise.Promise (org.riversun.promise.SyncPromise and org.riversun.promise.Promise are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @1c69ee51)
         //
         verifyException("org.riversun.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Thennable[] thennableArray0 = new Thennable[0];
      Promise promise0 = Promise.all(thennableArray0);
      assertNotNull(promise0);
      assertEquals(0, thennableArray0.length);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      
      Func[] funcArray0 = new Func[8];
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(func0).toString();
      funcArray0[0] = func0;
      funcArray0[1] = func0;
      funcArray0[2] = func0;
      funcArray0[3] = func0;
      funcArray0[4] = func0;
      funcArray0[5] = func0;
      funcArray0[6] = func0;
      funcArray0[7] = func0;
      Promise promise1 = Promise.all(funcArray0);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertEquals(8, funcArray0.length);
      assertNotSame(promise1, promise0);
      assertEquals(Status.PENDING, promise1.getStatus());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Promise promise0 = new Promise((Func) null);
      assertNotNull(promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      
      Object object0 = promise0.getValue();
      assertNull(object0);
      assertEquals(Status.PENDING, promise0.getStatus());
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isDaemon());
      assertEquals(18, thread0.countStackFrames());
      assertFalse(thread0.isInterrupted());
      
      MockThread mockThread0 = new MockThread(thread0);
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "org.riversun.promise.Promise@0000000001", (-1169L));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      // Undeclared exception!
      try { 
        promise0.runOnThread(mockThread1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.riversun.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null, (Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(531, threadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Thennable[] thennableArray0 = new Thennable[2];
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(func0).toString();
      Promise promise0 = new Promise(func0);
      assertNotNull(promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      
      thennableArray0[0] = (Thennable) promise0;
      Func[] funcArray0 = new Func[2];
      funcArray0[0] = func0;
      Promise promise1 = promise0.then(funcArray0);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertEquals(2, funcArray0.length);
      assertNotSame(promise0, promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      
      funcArray0[1] = func0;
      Promise promise2 = promise0.then(funcArray0);
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertNotNull(promise2);
      assertEquals(2, funcArray0.length);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise2);
      assertNotSame(promise2, promise0);
      assertNotSame(promise2, promise1);
      assertEquals(Status.PENDING, promise0.getStatus());
      assertEquals(Status.PENDING, promise2.getStatus());
      
      thennableArray0[1] = (Thennable) promise2;
      Promise promise3 = Promise.all((ExecutorService) scheduledThreadPoolExecutor0, thennableArray0);
      assertFalse(promise3.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise0));
      assertNotNull(promise3);
      assertEquals(2, thennableArray0.length);
      assertNotSame(promise3, promise2);
      assertNotSame(promise3, promise1);
      assertNotSame(promise3, promise0);
      assertEquals(Status.PENDING, promise3.getStatus());
      
      Promise promise4 = Promise.resolve();
      assertFalse(promise4.equals((Object)promise3));
      assertFalse(promise4.equals((Object)promise2));
      assertFalse(promise4.equals((Object)promise1));
      assertFalse(promise4.equals((Object)promise0));
      assertNotNull(promise4);
      assertNotSame(promise4, promise3);
      assertNotSame(promise4, promise2);
      assertNotSame(promise4, promise1);
      assertNotSame(promise4, promise0);
      assertEquals(Status.FULFILLED, promise4.getStatus());
      
      Promise promise5 = promise3.start();
      assertFalse(promise3.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise4));
      assertFalse(promise3.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise0));
      assertFalse(promise5.equals((Object)promise1));
      assertFalse(promise5.equals((Object)promise0));
      assertFalse(promise5.equals((Object)promise2));
      assertFalse(promise5.equals((Object)promise4));
      assertNotNull(promise5);
      assertEquals(2, thennableArray0.length);
      assertNotSame(promise3, promise2);
      assertNotSame(promise3, promise4);
      assertNotSame(promise3, promise1);
      assertNotSame(promise3, promise0);
      assertSame(promise3, promise5);
      assertNotSame(promise5, promise1);
      assertNotSame(promise5, promise0);
      assertSame(promise5, promise3);
      assertNotSame(promise5, promise2);
      assertNotSame(promise5, promise4);
      assertEquals(Status.PENDING, promise3.getStatus());
      assertEquals(Status.PENDING, promise5.getStatus());
      
      Promise promise6 = promise5.always(thennableArray0[1]);
      assertFalse(promise3.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise4));
      assertFalse(promise3.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise0));
      assertFalse(promise5.equals((Object)promise1));
      assertFalse(promise5.equals((Object)promise0));
      assertFalse(promise5.equals((Object)promise2));
      assertFalse(promise5.equals((Object)promise4));
      assertFalse(promise6.equals((Object)promise0));
      assertFalse(promise6.equals((Object)promise4));
      assertFalse(promise6.equals((Object)promise3));
      assertFalse(promise6.equals((Object)promise1));
      assertFalse(promise6.equals((Object)promise5));
      assertFalse(promise6.equals((Object)promise2));
      assertNotNull(promise6);
      assertEquals(2, thennableArray0.length);
      assertNotSame(promise3, promise2);
      assertNotSame(promise3, promise4);
      assertNotSame(promise3, promise1);
      assertNotSame(promise3, promise6);
      assertNotSame(promise3, promise0);
      assertSame(promise3, promise5);
      assertNotSame(promise5, promise1);
      assertNotSame(promise5, promise0);
      assertNotSame(promise5, promise6);
      assertSame(promise5, promise3);
      assertNotSame(promise5, promise2);
      assertNotSame(promise5, promise4);
      assertNotSame(promise6, promise0);
      assertNotSame(promise6, promise4);
      assertNotSame(promise6, promise3);
      assertNotSame(promise6, promise1);
      assertNotSame(promise6, promise5);
      assertNotSame(promise6, promise2);
      assertEquals(Status.PENDING, promise3.getStatus());
      assertEquals(Status.PENDING, promise5.getStatus());
      assertEquals(Status.PENDING, promise6.getStatus());
      
      Promise promise7 = promise3.start();
      assertFalse(promise7.equals((Object)promise0));
      assertFalse(promise7.equals((Object)promise2));
      assertFalse(promise7.equals((Object)promise4));
      assertFalse(promise7.equals((Object)promise1));
      assertFalse(promise7.equals((Object)promise6));
      assertFalse(promise3.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise4));
      assertFalse(promise3.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise6));
      assertFalse(promise3.equals((Object)promise0));
      assertNotNull(promise7);
      assertEquals(2, thennableArray0.length);
      assertSame(promise7, promise3);
      assertNotSame(promise7, promise0);
      assertNotSame(promise7, promise2);
      assertSame(promise7, promise5);
      assertNotSame(promise7, promise4);
      assertNotSame(promise7, promise1);
      assertNotSame(promise7, promise6);
      assertNotSame(promise3, promise2);
      assertSame(promise3, promise7);
      assertNotSame(promise3, promise4);
      assertNotSame(promise3, promise1);
      assertNotSame(promise3, promise6);
      assertNotSame(promise3, promise0);
      assertSame(promise3, promise5);
      assertEquals(Status.PENDING, promise7.getStatus());
      assertEquals(Status.PENDING, promise3.getStatus());
      
      Promise promise8 = Promise.resolve((Object) func0);
      assertFalse(promise8.equals((Object)promise3));
      assertFalse(promise8.equals((Object)promise5));
      assertFalse(promise8.equals((Object)promise6));
      assertFalse(promise8.equals((Object)promise2));
      assertFalse(promise8.equals((Object)promise1));
      assertFalse(promise8.equals((Object)promise0));
      assertFalse(promise8.equals((Object)promise7));
      assertFalse(promise8.equals((Object)promise4));
      assertNotNull(promise8);
      assertNotSame(promise8, promise3);
      assertNotSame(promise8, promise5);
      assertNotSame(promise8, promise6);
      assertNotSame(promise8, promise2);
      assertNotSame(promise8, promise1);
      assertNotSame(promise8, promise0);
      assertNotSame(promise8, promise7);
      assertNotSame(promise8, promise4);
      assertEquals(Status.FULFILLED, promise8.getStatus());
      
      // Undeclared exception!
      try { 
        promise4.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.riversun.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Func[] funcArray0 = new Func[7];
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(func0).toString();
      funcArray0[0] = func0;
      funcArray0[1] = func0;
      funcArray0[2] = func0;
      funcArray0[3] = func0;
      funcArray0[4] = func0;
      funcArray0[5] = func0;
      funcArray0[6] = func0;
      Promise promise0 = Promise.all(funcArray0);
      assertNotNull(promise0);
      assertEquals(7, funcArray0.length);
      assertEquals(Status.PENDING, promise0.getStatus());
      
      Promise.sleep(0L);
      Promise promise1 = Promise.reject();
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.REJECTED, promise1.getStatus());
      
      Log.setLogEnabled(false);
      Thennable[] thennableArray0 = new Thennable[2];
      thennableArray0[0] = (Thennable) promise1;
      thennableArray0[1] = (Thennable) promise0;
      Promise promise2 = promise1.then(thennableArray0);
      assertFalse(promise2.equals((Object)promise1));
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise2);
      assertEquals(2, thennableArray0.length);
      assertNotSame(promise2, promise1);
      assertNotSame(promise2, promise0);
      assertNotSame(promise1, promise2);
      assertNotSame(promise1, promise0);
      assertEquals(Status.PENDING, promise2.getStatus());
      assertEquals(Status.REJECTED, promise1.getStatus());
      
      Thennable[] thennableArray1 = new Thennable[9];
      assertFalse(thennableArray1.equals((Object)thennableArray0));
      
      thennableArray1[0] = (Thennable) promise0;
      SyncPromise syncPromise0 = new SyncPromise();
      assertNotNull(syncPromise0);
      assertEquals(Status.PENDING, syncPromise0.getStatus());
      
      thennableArray1[1] = (Thennable) syncPromise0;
      thennableArray1[2] = (Thennable) promise0;
      SyncPromise syncPromise1 = syncPromise0.then(thennableArray1);
      assertFalse(thennableArray1.equals((Object)thennableArray0));
      assertNull(syncPromise1);
      assertEquals(9, thennableArray1.length);
      assertNotSame(thennableArray1, thennableArray0);
      assertEquals(Status.PENDING, syncPromise0.getStatus());
      
      thennableArray1[3] = (Thennable) promise0;
      thennableArray1[4] = (Thennable) promise0;
      thennableArray1[5] = (Thennable) promise0;
      thennableArray1[6] = (Thennable) promise0;
      thennableArray1[7] = (Thennable) promise0;
      thennableArray1[8] = (Thennable) promise0;
      // Undeclared exception!
      try { 
        Promise.all(thennableArray1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.riversun.promise.SyncPromise cannot be cast to class org.riversun.promise.Promise (org.riversun.promise.SyncPromise and org.riversun.promise.Promise are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @1c69ee51)
         //
         verifyException("org.riversun.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("gqDY`");
      assertNotNull(mockThrowable0);
      
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable1);
      
      MockException mockException0 = new MockException(mockThrowable1);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(mockException0);
      
      Promise promise0 = Promise.reject((Object) mockException0);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(promise0);
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable0.toString());
      assertEquals("gqDY`", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable1.toString());
      assertEquals(Status.REJECTED, promise0.getStatus());
      
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(func0).toString();
      Promise promise1 = promise0.always(func0);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertNotSame(promise0, promise1);
      assertNotSame(promise1, promise0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable0.toString());
      assertEquals("gqDY`", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable1.toString());
      assertEquals(Status.REJECTED, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      
      Promise promise2 = promise0.always((Func) null);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise2.equals((Object)promise1));
      assertFalse(promise2.equals((Object)promise0));
      assertNotNull(promise2);
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertNotSame(promise0, promise2);
      assertNotSame(promise0, promise1);
      assertNotSame(promise2, promise1);
      assertNotSame(promise2, promise0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable0.toString());
      assertEquals("gqDY`", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable1.toString());
      assertEquals(Status.REJECTED, promise0.getStatus());
      assertEquals(Status.PENDING, promise2.getStatus());
      
      Promise promise3 = promise1.then((Thennable[]) null);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(promise0.equals((Object)promise2));
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise1.equals((Object)promise2));
      assertFalse(promise1.equals((Object)promise0));
      assertFalse(promise3.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise0));
      assertFalse(promise3.equals((Object)promise2));
      assertNotNull(promise3);
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertNotSame(promise0, promise2);
      assertNotSame(promise0, promise3);
      assertNotSame(promise0, promise1);
      assertNotSame(promise1, promise2);
      assertNotSame(promise1, promise0);
      assertNotSame(promise1, promise3);
      assertNotSame(promise3, promise1);
      assertNotSame(promise3, promise0);
      assertNotSame(promise3, promise2);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable0.toString());
      assertEquals("gqDY`", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable1.toString());
      assertEquals(Status.REJECTED, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      assertEquals(Status.PENDING, promise3.getStatus());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Promise promise4 = Promise.reject(object0);
      assertFalse(promise4.equals((Object)promise2));
      assertFalse(promise4.equals((Object)promise0));
      assertFalse(promise4.equals((Object)promise1));
      assertFalse(promise4.equals((Object)promise3));
      assertNotNull(promise4);
      assertNotSame(promise4, promise2);
      assertNotSame(promise4, promise0);
      assertNotSame(promise4, promise1);
      assertNotSame(promise4, promise3);
      assertEquals(Status.REJECTED, promise4.getStatus());
      
      Promise promise5 = Promise.resolve((Object) null);
      assertFalse(promise5.equals((Object)promise4));
      assertFalse(promise5.equals((Object)promise1));
      assertFalse(promise5.equals((Object)promise3));
      assertFalse(promise5.equals((Object)promise0));
      assertFalse(promise5.equals((Object)promise2));
      assertNotNull(promise5);
      assertNotSame(promise5, promise4);
      assertNotSame(promise5, promise1);
      assertNotSame(promise5, promise3);
      assertNotSame(promise5, promise0);
      assertNotSame(promise5, promise2);
      assertEquals(Status.FULFILLED, promise5.getStatus());
      
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      assertNotNull(threadPoolExecutor_DiscardOldestPolicy0);
      
      promise4.mName = "";
      assertEquals(Status.REJECTED, promise4.getStatus());
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2593, threadPoolExecutor_DiscardOldestPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Promise promise6 = promise5.always((Thennable) promise4);
      assertFalse(promise4.equals((Object)promise2));
      assertFalse(promise4.equals((Object)promise0));
      assertFalse(promise4.equals((Object)promise5));
      assertFalse(promise4.equals((Object)promise1));
      assertFalse(promise4.equals((Object)promise3));
      assertFalse(promise5.equals((Object)promise4));
      assertFalse(promise5.equals((Object)promise1));
      assertFalse(promise5.equals((Object)promise3));
      assertFalse(promise5.equals((Object)promise0));
      assertFalse(promise5.equals((Object)promise2));
      assertFalse(promise6.equals((Object)promise0));
      assertFalse(promise6.equals((Object)promise2));
      assertFalse(promise6.equals((Object)promise5));
      assertFalse(promise6.equals((Object)promise4));
      assertFalse(promise6.equals((Object)promise1));
      assertFalse(promise6.equals((Object)promise3));
      assertNotNull(promise6);
      assertNotSame(promise4, promise6);
      assertNotSame(promise4, promise2);
      assertNotSame(promise4, promise0);
      assertNotSame(promise4, promise5);
      assertNotSame(promise4, promise1);
      assertNotSame(promise4, promise3);
      assertNotSame(promise5, promise4);
      assertNotSame(promise5, promise1);
      assertNotSame(promise5, promise3);
      assertNotSame(promise5, promise0);
      assertNotSame(promise5, promise6);
      assertNotSame(promise5, promise2);
      assertNotSame(promise6, promise0);
      assertNotSame(promise6, promise2);
      assertNotSame(promise6, promise5);
      assertNotSame(promise6, promise4);
      assertNotSame(promise6, promise1);
      assertNotSame(promise6, promise3);
      assertEquals(Status.REJECTED, promise4.getStatus());
      assertEquals(Status.FULFILLED, promise5.getStatus());
      assertEquals(Status.PENDING, promise6.getStatus());
      
      Promise promise7 = Promise.resolve((Object) null, (ExecutorService) scheduledThreadPoolExecutor0);
      assertFalse(promise7.equals((Object)promise0));
      assertFalse(promise7.equals((Object)promise2));
      assertFalse(promise7.equals((Object)promise6));
      assertFalse(promise7.equals((Object)promise5));
      assertFalse(promise7.equals((Object)promise3));
      assertFalse(promise7.equals((Object)promise4));
      assertFalse(promise7.equals((Object)promise1));
      assertNotNull(promise7);
      assertNotSame(promise7, promise0);
      assertNotSame(promise7, promise2);
      assertNotSame(promise7, promise6);
      assertNotSame(promise7, promise5);
      assertNotSame(promise7, promise3);
      assertNotSame(promise7, promise4);
      assertNotSame(promise7, promise1);
      assertEquals(Status.FULFILLED, promise7.getStatus());
      
      Promise promise8 = Promise.reject();
      assertFalse(promise8.equals((Object)promise3));
      assertFalse(promise8.equals((Object)promise6));
      assertFalse(promise8.equals((Object)promise7));
      assertFalse(promise8.equals((Object)promise2));
      assertFalse(promise8.equals((Object)promise0));
      assertFalse(promise8.equals((Object)promise4));
      assertFalse(promise8.equals((Object)promise1));
      assertFalse(promise8.equals((Object)promise5));
      assertNotNull(promise8);
      assertNotSame(promise8, promise3);
      assertNotSame(promise8, promise6);
      assertNotSame(promise8, promise7);
      assertNotSame(promise8, promise2);
      assertNotSame(promise8, promise0);
      assertNotSame(promise8, promise4);
      assertNotSame(promise8, promise1);
      assertNotSame(promise8, promise5);
      assertEquals(Status.REJECTED, promise8.getStatus());
      
      Status status0 = promise5.getStatus();
      assertFalse(promise5.equals((Object)promise4));
      assertFalse(promise5.equals((Object)promise1));
      assertFalse(promise5.equals((Object)promise7));
      assertFalse(promise5.equals((Object)promise3));
      assertFalse(promise5.equals((Object)promise8));
      assertFalse(promise5.equals((Object)promise0));
      assertFalse(promise5.equals((Object)promise6));
      assertFalse(promise5.equals((Object)promise2));
      assertEquals(Status.FULFILLED, status0);
      assertNotSame(promise5, promise4);
      assertNotSame(promise5, promise1);
      assertNotSame(promise5, promise7);
      assertNotSame(promise5, promise3);
      assertNotSame(promise5, promise8);
      assertNotSame(promise5, promise0);
      assertNotSame(promise5, promise6);
      assertNotSame(promise5, promise2);
      assertEquals(Status.FULFILLED, promise5.getStatus());
      
      ExecutorService executorService0 = promise2.createExecutor();
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(promise0.equals((Object)promise8));
      assertFalse(promise0.equals((Object)promise6));
      assertFalse(promise0.equals((Object)promise2));
      assertFalse(promise0.equals((Object)promise3));
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise0.equals((Object)promise5));
      assertFalse(promise0.equals((Object)promise7));
      assertFalse(promise0.equals((Object)promise4));
      assertFalse(promise2.equals((Object)promise5));
      assertFalse(promise2.equals((Object)promise1));
      assertFalse(promise2.equals((Object)promise4));
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise8));
      assertFalse(promise2.equals((Object)promise3));
      assertFalse(promise2.equals((Object)promise7));
      assertFalse(promise2.equals((Object)promise6));
      assertNotNull(executorService0);
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertNotSame(promise0, promise8);
      assertNotSame(promise0, promise6);
      assertNotSame(promise0, promise2);
      assertNotSame(promise0, promise3);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise5);
      assertNotSame(promise0, promise7);
      assertNotSame(promise0, promise4);
      assertNotSame(promise2, promise5);
      assertNotSame(promise2, promise1);
      assertNotSame(promise2, promise4);
      assertNotSame(promise2, promise0);
      assertNotSame(promise2, promise8);
      assertNotSame(promise2, promise3);
      assertNotSame(promise2, promise7);
      assertNotSame(promise2, promise6);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable0.toString());
      assertEquals("gqDY`", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable1.toString());
      assertEquals(Status.REJECTED, promise0.getStatus());
      assertEquals(Status.PENDING, promise2.getStatus());
      
      Promise promise9 = promise2.always((Func) null);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(promise9.equals((Object)promise1));
      assertFalse(promise9.equals((Object)promise6));
      assertFalse(promise9.equals((Object)promise8));
      assertFalse(promise9.equals((Object)promise3));
      assertFalse(promise9.equals((Object)promise7));
      assertFalse(promise9.equals((Object)promise2));
      assertFalse(promise9.equals((Object)promise4));
      assertFalse(promise9.equals((Object)promise0));
      assertFalse(promise9.equals((Object)promise5));
      assertFalse(promise0.equals((Object)promise8));
      assertFalse(promise0.equals((Object)promise6));
      assertFalse(promise0.equals((Object)promise2));
      assertFalse(promise0.equals((Object)promise3));
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise0.equals((Object)promise5));
      assertFalse(promise0.equals((Object)promise7));
      assertFalse(promise0.equals((Object)promise4));
      assertFalse(promise2.equals((Object)promise5));
      assertFalse(promise2.equals((Object)promise1));
      assertFalse(promise2.equals((Object)promise4));
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise8));
      assertFalse(promise2.equals((Object)promise3));
      assertFalse(promise2.equals((Object)promise7));
      assertFalse(promise2.equals((Object)promise6));
      assertNotNull(promise9);
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertNotSame(promise9, promise1);
      assertNotSame(promise9, promise6);
      assertNotSame(promise9, promise8);
      assertNotSame(promise9, promise3);
      assertNotSame(promise9, promise7);
      assertNotSame(promise9, promise2);
      assertNotSame(promise9, promise4);
      assertNotSame(promise9, promise0);
      assertNotSame(promise9, promise5);
      assertNotSame(promise0, promise8);
      assertNotSame(promise0, promise6);
      assertNotSame(promise0, promise2);
      assertNotSame(promise0, promise3);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise5);
      assertNotSame(promise0, promise7);
      assertNotSame(promise0, promise4);
      assertNotSame(promise0, promise9);
      assertNotSame(promise2, promise5);
      assertNotSame(promise2, promise1);
      assertNotSame(promise2, promise9);
      assertNotSame(promise2, promise4);
      assertNotSame(promise2, promise0);
      assertNotSame(promise2, promise8);
      assertNotSame(promise2, promise3);
      assertNotSame(promise2, promise7);
      assertNotSame(promise2, promise6);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable0.toString());
      assertEquals("gqDY`", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable1.toString());
      assertEquals(Status.PENDING, promise9.getStatus());
      assertEquals(Status.REJECTED, promise0.getStatus());
      assertEquals(Status.PENDING, promise2.getStatus());
      
      ExecutorService executorService1 = promise1.createExecutor();
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(promise0.equals((Object)promise8));
      assertFalse(promise0.equals((Object)promise6));
      assertFalse(promise0.equals((Object)promise2));
      assertFalse(promise0.equals((Object)promise3));
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise0.equals((Object)promise5));
      assertFalse(promise0.equals((Object)promise7));
      assertFalse(promise0.equals((Object)promise4));
      assertFalse(promise0.equals((Object)promise9));
      assertFalse(executorService1.equals((Object)executorService0));
      assertFalse(promise1.equals((Object)promise2));
      assertFalse(promise1.equals((Object)promise7));
      assertFalse(promise1.equals((Object)promise6));
      assertFalse(promise1.equals((Object)promise0));
      assertFalse(promise1.equals((Object)promise4));
      assertFalse(promise1.equals((Object)promise5));
      assertFalse(promise1.equals((Object)promise8));
      assertFalse(promise1.equals((Object)promise3));
      assertFalse(promise1.equals((Object)promise9));
      assertNotNull(executorService1);
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertNotSame(promise0, promise8);
      assertNotSame(promise0, promise6);
      assertNotSame(promise0, promise2);
      assertNotSame(promise0, promise3);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise5);
      assertNotSame(promise0, promise7);
      assertNotSame(promise0, promise4);
      assertNotSame(promise0, promise9);
      assertNotSame(executorService1, executorService0);
      assertNotSame(promise1, promise2);
      assertNotSame(promise1, promise7);
      assertNotSame(promise1, promise6);
      assertNotSame(promise1, promise0);
      assertNotSame(promise1, promise4);
      assertNotSame(promise1, promise5);
      assertNotSame(promise1, promise8);
      assertNotSame(promise1, promise3);
      assertNotSame(promise1, promise9);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable0.toString());
      assertEquals("gqDY`", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: gqDY`", mockThrowable1.toString());
      assertEquals(Status.REJECTED, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      
      Thennable[] thennableArray0 = new Thennable[1];
      thennableArray0[0] = (Thennable) promise8;
      Promise promise10 = Promise.all(thennableArray0);
      assertFalse(promise10.equals((Object)promise5));
      assertFalse(promise10.equals((Object)promise4));
      assertFalse(promise10.equals((Object)promise3));
      assertFalse(promise10.equals((Object)promise1));
      assertFalse(promise10.equals((Object)promise8));
      assertFalse(promise10.equals((Object)promise9));
      assertFalse(promise10.equals((Object)promise2));
      assertFalse(promise10.equals((Object)promise6));
      assertFalse(promise10.equals((Object)promise7));
      assertFalse(promise10.equals((Object)promise0));
      assertNotNull(promise10);
      assertEquals(1, thennableArray0.length);
      assertNotSame(promise10, promise5);
      assertNotSame(promise10, promise4);
      assertNotSame(promise10, promise3);
      assertNotSame(promise10, promise1);
      assertNotSame(promise10, promise8);
      assertNotSame(promise10, promise9);
      assertNotSame(promise10, promise2);
      assertNotSame(promise10, promise6);
      assertNotSame(promise10, promise7);
      assertNotSame(promise10, promise0);
      assertEquals(Status.PENDING, promise10.getStatus());
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Promise promise11 = Promise.reject(object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(promise11.equals((Object)promise5));
      assertFalse(promise11.equals((Object)promise3));
      assertFalse(promise11.equals((Object)promise4));
      assertFalse(promise11.equals((Object)promise1));
      assertFalse(promise11.equals((Object)promise9));
      assertFalse(promise11.equals((Object)promise0));
      assertFalse(promise11.equals((Object)promise2));
      assertFalse(promise11.equals((Object)promise6));
      assertFalse(promise11.equals((Object)promise10));
      assertFalse(promise11.equals((Object)promise8));
      assertFalse(promise11.equals((Object)promise7));
      assertNotNull(promise11);
      assertNotSame(object1, object0);
      assertNotSame(promise11, promise5);
      assertNotSame(promise11, promise3);
      assertNotSame(promise11, promise4);
      assertNotSame(promise11, promise1);
      assertNotSame(promise11, promise9);
      assertNotSame(promise11, promise0);
      assertNotSame(promise11, promise2);
      assertNotSame(promise11, promise6);
      assertNotSame(promise11, promise10);
      assertNotSame(promise11, promise8);
      assertNotSame(promise11, promise7);
      assertEquals(Status.REJECTED, promise11.getStatus());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Promise promise0 = Promise.reject();
      assertNotNull(promise0);
      assertEquals(Status.REJECTED, promise0.getStatus());
      
      Promise promise1 = Promise.resolve((Object) promise0);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertNotSame(promise0, promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.REJECTED, promise0.getStatus());
      assertEquals(Status.FULFILLED, promise1.getStatus());
      
      Status status0 = promise1.getStatus();
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise1.equals((Object)promise0));
      assertEquals(Status.FULFILLED, status0);
      assertNotSame(promise0, promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.REJECTED, promise0.getStatus());
      assertEquals(Status.FULFILLED, promise1.getStatus());
      
      int int0 = 0;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(0, 0, 0, timeUnit0, (BlockingQueue<Runnable>) null, threadFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Promise promise0 = Promise.resolve();
      assertNotNull(promise0);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      
      Status status0 = promise0.getStatus();
      assertEquals(Status.FULFILLED, status0);
      assertEquals(Status.FULFILLED, promise0.getStatus());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Promise promise0 = Promise.resolve((Object) null);
      assertNotNull(promise0);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      
      Func[] funcArray0 = new Func[6];
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(func0).toString();
      funcArray0[0] = func0;
      funcArray0[1] = func0;
      funcArray0[2] = func0;
      funcArray0[3] = func0;
      funcArray0[4] = func0;
      funcArray0[5] = func0;
      Promise promise1 = Promise.all(funcArray0);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertEquals(6, funcArray0.length);
      assertNotSame(promise1, promise0);
      assertEquals(Status.PENDING, promise1.getStatus());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Promise promise0 = Promise.resolve(object0);
      assertNotNull(promise0);
      assertEquals(Status.FULFILLED, promise0.getStatus());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Promise promise0 = Promise.all((Func[]) null);
      assertNotNull(promise0);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      
      Promise promise1 = new Promise("Promise.Resolve.Created", (ExecutorService) null);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertEquals(Status.PENDING, promise1.getStatus());
      
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(func0).toString();
      Promise promise2 = promise1.always(func0);
      assertFalse(promise1.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertNotNull(promise2);
      assertNotSame(promise1, promise0);
      assertNotSame(promise1, promise2);
      assertNotSame(promise2, promise0);
      assertNotSame(promise2, promise1);
      assertEquals(Status.PENDING, promise1.getStatus());
      assertEquals(Status.PENDING, promise2.getStatus());
      
      Promise promise3 = promise0.always((Thennable) promise2);
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise0.equals((Object)promise2));
      assertFalse(promise1.equals((Object)promise0));
      assertFalse(promise1.equals((Object)promise2));
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise0));
      assertNotNull(promise3);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise3);
      assertNotSame(promise0, promise2);
      assertNotSame(promise1, promise0);
      assertNotSame(promise1, promise2);
      assertNotSame(promise1, promise3);
      assertNotSame(promise2, promise3);
      assertNotSame(promise2, promise0);
      assertNotSame(promise2, promise1);
      assertNotSame(promise3, promise2);
      assertNotSame(promise3, promise1);
      assertNotSame(promise3, promise0);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      assertEquals(Status.PENDING, promise2.getStatus());
      assertEquals(Status.PENDING, promise3.getStatus());
      
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1950, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      MockThread mockThread0 = new MockThread("Promise.Resolve.Created");
      assertNotNull(mockThread0);
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleWithFixedDelay(mockThread0, 732L, 732L, timeUnit0);
      assertNotNull(scheduledFuture0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      Promise promise4 = Promise.reject((Object) scheduledFuture0);
      assertFalse(promise4.equals((Object)promise3));
      assertFalse(promise4.equals((Object)promise0));
      assertFalse(promise4.equals((Object)promise2));
      assertFalse(promise4.equals((Object)promise1));
      assertNotNull(promise4);
      assertNotSame(promise4, promise3);
      assertNotSame(promise4, promise0);
      assertNotSame(promise4, promise2);
      assertNotSame(promise4, promise1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(Status.REJECTED, promise4.getStatus());
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      Delayed delayed0 = delayQueue0.peek();
      assertNull(delayed0);
      
      Promise promise5 = Promise.reject((Object) mockThread0);
      assertFalse(promise5.equals((Object)promise2));
      assertFalse(promise5.equals((Object)promise1));
      assertFalse(promise5.equals((Object)promise3));
      assertFalse(promise5.equals((Object)promise0));
      assertFalse(promise5.equals((Object)promise4));
      assertNotNull(promise5);
      assertNotSame(promise5, promise2);
      assertNotSame(promise5, promise1);
      assertNotSame(promise5, promise3);
      assertNotSame(promise5, promise0);
      assertNotSame(promise5, promise4);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(Status.REJECTED, promise5.getStatus());
      
      Promise promise6 = Promise.all((Func[]) null);
      assertFalse(promise6.equals((Object)promise4));
      assertFalse(promise6.equals((Object)promise0));
      assertFalse(promise6.equals((Object)promise5));
      assertFalse(promise6.equals((Object)promise2));
      assertFalse(promise6.equals((Object)promise3));
      assertFalse(promise6.equals((Object)promise1));
      assertNotNull(promise6);
      assertNotSame(promise6, promise4);
      assertNotSame(promise6, promise0);
      assertNotSame(promise6, promise5);
      assertNotSame(promise6, promise2);
      assertNotSame(promise6, promise3);
      assertNotSame(promise6, promise1);
      assertEquals(Status.FULFILLED, promise6.getStatus());
      
      Object object0 = promise6.getValue();
      assertFalse(promise6.equals((Object)promise4));
      assertFalse(promise6.equals((Object)promise0));
      assertFalse(promise6.equals((Object)promise5));
      assertFalse(promise6.equals((Object)promise2));
      assertFalse(promise6.equals((Object)promise3));
      assertFalse(promise6.equals((Object)promise1));
      assertNull(object0);
      assertNotSame(promise6, promise4);
      assertNotSame(promise6, promise0);
      assertNotSame(promise6, promise5);
      assertNotSame(promise6, promise2);
      assertNotSame(promise6, promise3);
      assertNotSame(promise6, promise1);
      assertEquals(Status.FULFILLED, promise6.getStatus());
      
      Func func1 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(func1).toString();
      Promise promise7 = promise0.always(func1);
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise0.equals((Object)promise3));
      assertFalse(promise0.equals((Object)promise4));
      assertFalse(promise0.equals((Object)promise6));
      assertFalse(promise0.equals((Object)promise5));
      assertFalse(promise0.equals((Object)promise2));
      assertFalse(promise7.equals((Object)promise0));
      assertFalse(promise7.equals((Object)promise1));
      assertFalse(promise7.equals((Object)promise6));
      assertFalse(promise7.equals((Object)promise2));
      assertFalse(promise7.equals((Object)promise5));
      assertFalse(promise7.equals((Object)promise4));
      assertFalse(promise7.equals((Object)promise3));
      assertNotNull(promise7);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise7);
      assertNotSame(promise0, promise3);
      assertNotSame(promise0, promise4);
      assertNotSame(promise0, promise6);
      assertNotSame(promise0, promise5);
      assertNotSame(promise0, promise2);
      assertNotSame(promise7, promise0);
      assertNotSame(promise7, promise1);
      assertNotSame(promise7, promise6);
      assertNotSame(promise7, promise2);
      assertNotSame(promise7, promise5);
      assertNotSame(promise7, promise4);
      assertNotSame(promise7, promise3);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      assertEquals(Status.PENDING, promise7.getStatus());
      
      Object object1 = promise4.getValue();
      assertFalse(promise4.equals((Object)promise5));
      assertFalse(promise4.equals((Object)promise3));
      assertFalse(promise4.equals((Object)promise0));
      assertFalse(promise4.equals((Object)promise7));
      assertFalse(promise4.equals((Object)promise2));
      assertFalse(promise4.equals((Object)promise6));
      assertFalse(promise4.equals((Object)promise1));
      assertNotNull(object1);
      assertNotSame(promise4, promise5);
      assertNotSame(promise4, promise3);
      assertNotSame(promise4, promise0);
      assertNotSame(promise4, promise7);
      assertNotSame(promise4, promise2);
      assertNotSame(promise4, promise6);
      assertNotSame(promise4, promise1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(Status.REJECTED, promise4.getStatus());
      
      Promise promise8 = Promise.all((ExecutorService) null, (Thennable[]) null);
      assertFalse(promise8.equals((Object)promise5));
      assertFalse(promise8.equals((Object)promise2));
      assertFalse(promise8.equals((Object)promise3));
      assertFalse(promise8.equals((Object)promise6));
      assertFalse(promise8.equals((Object)promise1));
      assertFalse(promise8.equals((Object)promise7));
      assertFalse(promise8.equals((Object)promise4));
      assertFalse(promise8.equals((Object)promise0));
      assertNotNull(promise8);
      assertNotSame(promise8, promise5);
      assertNotSame(promise8, promise2);
      assertNotSame(promise8, promise3);
      assertNotSame(promise8, promise6);
      assertNotSame(promise8, promise1);
      assertNotSame(promise8, promise7);
      assertNotSame(promise8, promise4);
      assertNotSame(promise8, promise0);
      assertEquals(Status.FULFILLED, promise8.getStatus());
      
      Promise.sleep(1950);
      Promise promise9 = promise8.always((Thennable) promise5);
      assertFalse(promise8.equals((Object)promise5));
      assertFalse(promise8.equals((Object)promise2));
      assertFalse(promise8.equals((Object)promise3));
      assertFalse(promise8.equals((Object)promise6));
      assertFalse(promise8.equals((Object)promise1));
      assertFalse(promise8.equals((Object)promise7));
      assertFalse(promise8.equals((Object)promise4));
      assertFalse(promise8.equals((Object)promise0));
      assertFalse(promise9.equals((Object)promise2));
      assertFalse(promise9.equals((Object)promise5));
      assertFalse(promise9.equals((Object)promise6));
      assertFalse(promise9.equals((Object)promise1));
      assertFalse(promise9.equals((Object)promise7));
      assertFalse(promise9.equals((Object)promise0));
      assertFalse(promise9.equals((Object)promise4));
      assertFalse(promise9.equals((Object)promise3));
      assertFalse(promise9.equals((Object)promise8));
      assertFalse(promise5.equals((Object)promise6));
      assertFalse(promise5.equals((Object)promise7));
      assertFalse(promise5.equals((Object)promise2));
      assertFalse(promise5.equals((Object)promise1));
      assertFalse(promise5.equals((Object)promise3));
      assertFalse(promise5.equals((Object)promise0));
      assertFalse(promise5.equals((Object)promise8));
      assertFalse(promise5.equals((Object)promise4));
      assertNotNull(promise9);
      assertNotSame(promise8, promise5);
      assertNotSame(promise8, promise2);
      assertNotSame(promise8, promise3);
      assertNotSame(promise8, promise6);
      assertNotSame(promise8, promise1);
      assertNotSame(promise8, promise7);
      assertNotSame(promise8, promise9);
      assertNotSame(promise8, promise4);
      assertNotSame(promise8, promise0);
      assertNotSame(promise9, promise2);
      assertNotSame(promise9, promise5);
      assertNotSame(promise9, promise6);
      assertNotSame(promise9, promise1);
      assertNotSame(promise9, promise7);
      assertNotSame(promise9, promise0);
      assertNotSame(promise9, promise4);
      assertNotSame(promise9, promise3);
      assertNotSame(promise9, promise8);
      assertNotSame(promise5, promise6);
      assertNotSame(promise5, promise7);
      assertNotSame(promise5, promise2);
      assertNotSame(promise5, promise1);
      assertNotSame(promise5, promise3);
      assertNotSame(promise5, promise0);
      assertNotSame(promise5, promise8);
      assertNotSame(promise5, promise4);
      assertNotSame(promise5, promise9);
      assertEquals(Status.FULFILLED, promise8.getStatus());
      assertEquals(Status.PENDING, promise9.getStatus());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(Status.REJECTED, promise5.getStatus());
      
      Promise promise10 = Promise.all((Thennable[]) null);
      assertFalse(promise10.equals((Object)promise8));
      assertFalse(promise10.equals((Object)promise1));
      assertFalse(promise10.equals((Object)promise9));
      assertFalse(promise10.equals((Object)promise3));
      assertFalse(promise10.equals((Object)promise7));
      assertFalse(promise10.equals((Object)promise5));
      assertFalse(promise10.equals((Object)promise6));
      assertFalse(promise10.equals((Object)promise2));
      assertFalse(promise10.equals((Object)promise0));
      assertFalse(promise10.equals((Object)promise4));
      assertNotNull(promise10);
      assertNotSame(promise10, promise8);
      assertNotSame(promise10, promise1);
      assertNotSame(promise10, promise9);
      assertNotSame(promise10, promise3);
      assertNotSame(promise10, promise7);
      assertNotSame(promise10, promise5);
      assertNotSame(promise10, promise6);
      assertNotSame(promise10, promise2);
      assertNotSame(promise10, promise0);
      assertNotSame(promise10, promise4);
      assertEquals(Status.FULFILLED, promise10.getStatus());
      
      MockThrowable mockThrowable0 = new MockThrowable("NextPromise-of-Promise.Resolve.Created)");
      assertNotNull(mockThrowable0);
      
      MockThrowable mockThrowable1 = new MockThrowable("", mockThrowable0);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable1);
      
      MockException mockException0 = new MockException("", mockThrowable0);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertNotNull(mockException0);
      
      Object object2 = promise10.getValue();
      assertFalse(promise10.equals((Object)promise8));
      assertFalse(promise10.equals((Object)promise1));
      assertFalse(promise10.equals((Object)promise9));
      assertFalse(promise10.equals((Object)promise3));
      assertFalse(promise10.equals((Object)promise7));
      assertFalse(promise10.equals((Object)promise5));
      assertFalse(promise10.equals((Object)promise6));
      assertFalse(promise10.equals((Object)promise2));
      assertFalse(promise10.equals((Object)promise0));
      assertFalse(promise10.equals((Object)promise4));
      assertNull(object2);
      assertNotSame(promise10, promise8);
      assertNotSame(promise10, promise1);
      assertNotSame(promise10, promise9);
      assertNotSame(promise10, promise3);
      assertNotSame(promise10, promise7);
      assertNotSame(promise10, promise5);
      assertNotSame(promise10, promise6);
      assertNotSame(promise10, promise2);
      assertNotSame(promise10, promise0);
      assertNotSame(promise10, promise4);
      assertEquals(Status.FULFILLED, promise10.getStatus());
      
      Promise promise11 = Promise.resolve((Object) null);
      assertFalse(promise11.equals((Object)promise3));
      assertFalse(promise11.equals((Object)promise10));
      assertFalse(promise11.equals((Object)promise1));
      assertFalse(promise11.equals((Object)promise9));
      assertFalse(promise11.equals((Object)promise8));
      assertFalse(promise11.equals((Object)promise2));
      assertFalse(promise11.equals((Object)promise7));
      assertFalse(promise11.equals((Object)promise6));
      assertFalse(promise11.equals((Object)promise5));
      assertFalse(promise11.equals((Object)promise0));
      assertFalse(promise11.equals((Object)promise4));
      assertNotNull(promise11);
      assertNotSame(promise11, promise3);
      assertNotSame(promise11, promise10);
      assertNotSame(promise11, promise1);
      assertNotSame(promise11, promise9);
      assertNotSame(promise11, promise8);
      assertNotSame(promise11, promise2);
      assertNotSame(promise11, promise7);
      assertNotSame(promise11, promise6);
      assertNotSame(promise11, promise5);
      assertNotSame(promise11, promise0);
      assertNotSame(promise11, promise4);
      assertEquals(Status.FULFILLED, promise11.getStatus());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(func0).toString();
      Promise promise0 = new Promise("", func0);
      assertNotNull(promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      Promise promise1 = Promise.reject();
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.REJECTED, promise1.getStatus());
      
      long long0 = forkJoinPool0.getStealCount();
      assertEquals(322L, long0);
      
      Func[] funcArray0 = new Func[5];
      funcArray0[0] = func0;
      funcArray0[1] = func0;
      funcArray0[2] = func0;
      funcArray0[3] = func0;
      funcArray0[4] = func0;
      Promise promise2 = Promise.all((ExecutorService) forkJoinPool0, funcArray0);
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertNotNull(promise2);
      assertEquals(5, funcArray0.length);
      assertNotSame(promise2, promise0);
      assertNotSame(promise2, promise1);
      assertEquals(Status.PENDING, promise2.getStatus());
      
      Promise promise3 = promise0.always((Thennable) promise2);
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise0.equals((Object)promise2));
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise0));
      assertNotNull(promise3);
      assertEquals(5, funcArray0.length);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise3);
      assertNotSame(promise0, promise2);
      assertNotSame(promise2, promise0);
      assertNotSame(promise2, promise3);
      assertNotSame(promise2, promise1);
      assertNotSame(promise3, promise1);
      assertNotSame(promise3, promise2);
      assertNotSame(promise3, promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      assertEquals(Status.PENDING, promise2.getStatus());
      assertEquals(Status.PENDING, promise3.getStatus());
      
      Thennable[] thennableArray0 = new Thennable[7];
      thennableArray0[0] = (Thennable) promise2;
      thennableArray0[1] = (Thennable) promise0;
      thennableArray0[2] = (Thennable) promise3;
      Thennable[] thennableArray1 = new Thennable[4];
      assertFalse(thennableArray1.equals((Object)thennableArray0));
      
      thennableArray1[0] = (Thennable) promise2;
      thennableArray1[1] = (Thennable) promise1;
      thennableArray1[2] = (Thennable) promise1;
      thennableArray1[3] = (Thennable) promise1;
      Promise promise4 = promise3.then(thennableArray1);
      assertFalse(thennableArray1.equals((Object)thennableArray0));
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise0.equals((Object)promise3));
      assertFalse(promise0.equals((Object)promise2));
      assertFalse(promise4.equals((Object)promise1));
      assertFalse(promise4.equals((Object)promise3));
      assertFalse(promise4.equals((Object)promise2));
      assertFalse(promise4.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise3));
      assertFalse(promise2.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise0));
      assertNotNull(promise4);
      assertEquals(4, thennableArray1.length);
      assertEquals(5, funcArray0.length);
      assertNotSame(thennableArray1, thennableArray0);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise4);
      assertNotSame(promise0, promise3);
      assertNotSame(promise0, promise2);
      assertNotSame(promise4, promise1);
      assertNotSame(promise4, promise3);
      assertNotSame(promise4, promise2);
      assertNotSame(promise4, promise0);
      assertNotSame(promise2, promise0);
      assertNotSame(promise2, promise3);
      assertNotSame(promise2, promise1);
      assertNotSame(promise2, promise4);
      assertNotSame(promise3, promise1);
      assertNotSame(promise3, promise4);
      assertNotSame(promise3, promise2);
      assertNotSame(promise3, promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      assertEquals(Status.PENDING, promise4.getStatus());
      assertEquals(Status.PENDING, promise2.getStatus());
      assertEquals(Status.PENDING, promise3.getStatus());
      
      thennableArray0[3] = (Thennable) promise3;
      thennableArray0[4] = (Thennable) promise3;
      thennableArray0[5] = (Thennable) promise2;
      thennableArray0[6] = (Thennable) promise2;
      Promise promise5 = Promise.all(thennableArray0);
      assertFalse(promise5.equals((Object)promise2));
      assertFalse(promise5.equals((Object)promise1));
      assertFalse(promise5.equals((Object)promise4));
      assertFalse(promise5.equals((Object)promise0));
      assertFalse(promise5.equals((Object)promise3));
      assertFalse(thennableArray0.equals((Object)thennableArray1));
      assertNotNull(promise5);
      assertEquals(7, thennableArray0.length);
      assertNotSame(promise5, promise2);
      assertNotSame(promise5, promise1);
      assertNotSame(promise5, promise4);
      assertNotSame(promise5, promise0);
      assertNotSame(promise5, promise3);
      assertNotSame(thennableArray0, thennableArray1);
      assertEquals(Status.PENDING, promise5.getStatus());
      
      Promise promise6 = Promise.all((ExecutorService) forkJoinPool0, thennableArray0);
      assertFalse(promise6.equals((Object)promise3));
      assertFalse(promise6.equals((Object)promise2));
      assertFalse(promise6.equals((Object)promise0));
      assertFalse(promise6.equals((Object)promise4));
      assertFalse(promise6.equals((Object)promise1));
      assertFalse(promise6.equals((Object)promise5));
      assertFalse(thennableArray0.equals((Object)thennableArray1));
      assertNotNull(promise6);
      assertEquals(7, thennableArray0.length);
      assertNotSame(promise6, promise3);
      assertNotSame(promise6, promise2);
      assertNotSame(promise6, promise0);
      assertNotSame(promise6, promise4);
      assertNotSame(promise6, promise1);
      assertNotSame(promise6, promise5);
      assertNotSame(thennableArray0, thennableArray1);
      assertEquals(Status.PENDING, promise6.getStatus());
      
      Promise promise7 = Promise.reject();
      assertFalse(promise7.equals((Object)promise2));
      assertFalse(promise7.equals((Object)promise0));
      assertFalse(promise7.equals((Object)promise3));
      assertFalse(promise7.equals((Object)promise6));
      assertFalse(promise7.equals((Object)promise1));
      assertFalse(promise7.equals((Object)promise4));
      assertFalse(promise7.equals((Object)promise5));
      assertNotNull(promise7);
      assertNotSame(promise7, promise2);
      assertNotSame(promise7, promise0);
      assertNotSame(promise7, promise3);
      assertNotSame(promise7, promise6);
      assertNotSame(promise7, promise1);
      assertNotSame(promise7, promise4);
      assertNotSame(promise7, promise5);
      assertEquals(Status.REJECTED, promise7.getStatus());
      
      Promise promise8 = promise1.always(func0);
      assertFalse(promise1.equals((Object)promise0));
      assertFalse(promise1.equals((Object)promise4));
      assertFalse(promise1.equals((Object)promise3));
      assertFalse(promise1.equals((Object)promise2));
      assertFalse(promise1.equals((Object)promise7));
      assertFalse(promise1.equals((Object)promise5));
      assertFalse(promise1.equals((Object)promise6));
      assertFalse(promise8.equals((Object)promise0));
      assertFalse(promise8.equals((Object)promise4));
      assertFalse(promise8.equals((Object)promise3));
      assertFalse(promise8.equals((Object)promise7));
      assertFalse(promise8.equals((Object)promise5));
      assertFalse(promise8.equals((Object)promise2));
      assertFalse(promise8.equals((Object)promise1));
      assertFalse(promise8.equals((Object)promise6));
      assertNotNull(promise8);
      assertNotSame(promise1, promise0);
      assertNotSame(promise1, promise4);
      assertNotSame(promise1, promise3);
      assertNotSame(promise1, promise2);
      assertNotSame(promise1, promise7);
      assertNotSame(promise1, promise8);
      assertNotSame(promise1, promise5);
      assertNotSame(promise1, promise6);
      assertNotSame(promise8, promise0);
      assertNotSame(promise8, promise4);
      assertNotSame(promise8, promise3);
      assertNotSame(promise8, promise7);
      assertNotSame(promise8, promise5);
      assertNotSame(promise8, promise2);
      assertNotSame(promise8, promise1);
      assertNotSame(promise8, promise6);
      assertEquals(Status.REJECTED, promise1.getStatus());
      assertEquals(Status.PENDING, promise8.getStatus());
      
      Promise promise9 = Promise.all(funcArray0);
      assertFalse(promise9.equals((Object)promise0));
      assertFalse(promise9.equals((Object)promise4));
      assertFalse(promise9.equals((Object)promise2));
      assertFalse(promise9.equals((Object)promise1));
      assertFalse(promise9.equals((Object)promise3));
      assertFalse(promise9.equals((Object)promise6));
      assertFalse(promise9.equals((Object)promise5));
      assertFalse(promise9.equals((Object)promise7));
      assertFalse(promise9.equals((Object)promise8));
      assertNotNull(promise9);
      assertEquals(5, funcArray0.length);
      assertNotSame(promise9, promise0);
      assertNotSame(promise9, promise4);
      assertNotSame(promise9, promise2);
      assertNotSame(promise9, promise1);
      assertNotSame(promise9, promise3);
      assertNotSame(promise9, promise6);
      assertNotSame(promise9, promise5);
      assertNotSame(promise9, promise7);
      assertNotSame(promise9, promise8);
      assertEquals(Status.PENDING, promise9.getStatus());
      
      Promise promise10 = promise8.start();
      assertFalse(promise10.equals((Object)promise1));
      assertFalse(promise10.equals((Object)promise9));
      assertFalse(promise10.equals((Object)promise2));
      assertFalse(promise10.equals((Object)promise0));
      assertFalse(promise10.equals((Object)promise3));
      assertFalse(promise10.equals((Object)promise7));
      assertFalse(promise10.equals((Object)promise5));
      assertFalse(promise10.equals((Object)promise4));
      assertFalse(promise10.equals((Object)promise6));
      assertFalse(promise1.equals((Object)promise0));
      assertFalse(promise1.equals((Object)promise4));
      assertFalse(promise1.equals((Object)promise3));
      assertFalse(promise1.equals((Object)promise9));
      assertFalse(promise1.equals((Object)promise2));
      assertFalse(promise1.equals((Object)promise7));
      assertFalse(promise1.equals((Object)promise8));
      assertFalse(promise1.equals((Object)promise5));
      assertFalse(promise1.equals((Object)promise6));
      assertFalse(promise8.equals((Object)promise0));
      assertFalse(promise8.equals((Object)promise4));
      assertFalse(promise8.equals((Object)promise9));
      assertFalse(promise8.equals((Object)promise3));
      assertFalse(promise8.equals((Object)promise7));
      assertFalse(promise8.equals((Object)promise5));
      assertFalse(promise8.equals((Object)promise2));
      assertFalse(promise8.equals((Object)promise1));
      assertFalse(promise8.equals((Object)promise6));
      assertNotNull(promise10);
      assertNotSame(promise10, promise1);
      assertNotSame(promise10, promise9);
      assertNotSame(promise10, promise2);
      assertSame(promise10, promise8);
      assertNotSame(promise10, promise0);
      assertNotSame(promise10, promise3);
      assertNotSame(promise10, promise7);
      assertNotSame(promise10, promise5);
      assertNotSame(promise10, promise4);
      assertNotSame(promise10, promise6);
      assertNotSame(promise1, promise0);
      assertNotSame(promise1, promise4);
      assertNotSame(promise1, promise3);
      assertNotSame(promise1, promise9);
      assertNotSame(promise1, promise2);
      assertNotSame(promise1, promise7);
      assertNotSame(promise1, promise8);
      assertNotSame(promise1, promise5);
      assertNotSame(promise1, promise6);
      assertNotSame(promise1, promise10);
      assertNotSame(promise8, promise0);
      assertNotSame(promise8, promise4);
      assertNotSame(promise8, promise9);
      assertNotSame(promise8, promise3);
      assertSame(promise8, promise10);
      assertNotSame(promise8, promise7);
      assertNotSame(promise8, promise5);
      assertNotSame(promise8, promise2);
      assertNotSame(promise8, promise1);
      assertNotSame(promise8, promise6);
      assertEquals(Status.PENDING, promise10.getStatus());
      assertEquals(Status.REJECTED, promise1.getStatus());
      assertEquals(Status.PENDING, promise8.getStatus());
      
      Promise promise11 = Promise.all(thennableArray1);
      assertFalse(promise11.equals((Object)promise10));
      assertFalse(promise11.equals((Object)promise2));
      assertFalse(promise11.equals((Object)promise9));
      assertFalse(promise11.equals((Object)promise0));
      assertFalse(promise11.equals((Object)promise3));
      assertFalse(promise11.equals((Object)promise7));
      assertFalse(promise11.equals((Object)promise8));
      assertFalse(promise11.equals((Object)promise6));
      assertFalse(promise11.equals((Object)promise1));
      assertFalse(promise11.equals((Object)promise5));
      assertFalse(promise11.equals((Object)promise4));
      assertFalse(thennableArray1.equals((Object)thennableArray0));
      assertNotNull(promise11);
      assertEquals(4, thennableArray1.length);
      assertNotSame(promise11, promise10);
      assertNotSame(promise11, promise2);
      assertNotSame(promise11, promise9);
      assertNotSame(promise11, promise0);
      assertNotSame(promise11, promise3);
      assertNotSame(promise11, promise7);
      assertNotSame(promise11, promise8);
      assertNotSame(promise11, promise6);
      assertNotSame(promise11, promise1);
      assertNotSame(promise11, promise5);
      assertNotSame(promise11, promise4);
      assertNotSame(thennableArray1, thennableArray0);
      assertEquals(Status.PENDING, promise11.getStatus());
      
      Promise promise12 = Promise.reject();
      assertFalse(promise12.equals((Object)promise0));
      assertFalse(promise12.equals((Object)promise4));
      assertFalse(promise12.equals((Object)promise3));
      assertFalse(promise12.equals((Object)promise2));
      assertFalse(promise12.equals((Object)promise11));
      assertFalse(promise12.equals((Object)promise9));
      assertFalse(promise12.equals((Object)promise1));
      assertFalse(promise12.equals((Object)promise5));
      assertFalse(promise12.equals((Object)promise10));
      assertFalse(promise12.equals((Object)promise6));
      assertFalse(promise12.equals((Object)promise8));
      assertFalse(promise12.equals((Object)promise7));
      assertNotNull(promise12);
      assertNotSame(promise12, promise0);
      assertNotSame(promise12, promise4);
      assertNotSame(promise12, promise3);
      assertNotSame(promise12, promise2);
      assertNotSame(promise12, promise11);
      assertNotSame(promise12, promise9);
      assertNotSame(promise12, promise1);
      assertNotSame(promise12, promise5);
      assertNotSame(promise12, promise10);
      assertNotSame(promise12, promise6);
      assertNotSame(promise12, promise8);
      assertNotSame(promise12, promise7);
      assertEquals(Status.REJECTED, promise12.getStatus());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Promise promise0 = Promise.resolve((Object) null);
      assertNotNull(promise0);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      
      Promise promise1 = Promise.reject();
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.REJECTED, promise1.getStatus());
      
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>();
      assertNotNull(synchronousQueue0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      Thennable[] thennableArray0 = new Thennable[0];
      Promise promise0 = Promise.all((ExecutorService) forkJoinPool0, thennableArray0);
      assertNotNull(promise0);
      assertEquals(0, thennableArray0.length);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "C]Y");
      assertNotNull(mockThread0);
      
      Func[] funcArray0 = new Func[4];
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(func0).toString();
      funcArray0[0] = func0;
      funcArray0[1] = func0;
      funcArray0[2] = func0;
      funcArray0[3] = func0;
      Promise promise1 = promise0.then(funcArray0);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertEquals(0, thennableArray0.length);
      assertEquals(4, funcArray0.length);
      assertNotSame(promise0, promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      
      ForkJoinPool forkJoinPool1 = new ForkJoinPool(2);
      assertFalse(forkJoinPool1.equals((Object)forkJoinPool0));
      assertNotNull(forkJoinPool1);
      
      Promise promise2 = new Promise("", func0, forkJoinPool0);
      assertFalse(forkJoinPool0.equals((Object)forkJoinPool1));
      assertFalse(promise2.equals((Object)promise1));
      assertFalse(promise2.equals((Object)promise0));
      assertNotNull(promise2);
      assertEquals(Status.PENDING, promise2.getStatus());
      
      Promise promise3 = promise0.then(thennableArray0);
      assertFalse(forkJoinPool0.equals((Object)forkJoinPool1));
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise0.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise0));
      assertFalse(promise3.equals((Object)promise1));
      assertNotNull(promise3);
      assertEquals(0, thennableArray0.length);
      assertNotSame(forkJoinPool0, forkJoinPool1);
      assertNotSame(promise0, promise3);
      assertNotSame(promise0, promise2);
      assertNotSame(promise0, promise1);
      assertNotSame(promise3, promise2);
      assertNotSame(promise3, promise0);
      assertNotSame(promise3, promise1);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      assertEquals(Status.PENDING, promise3.getStatus());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Promise.sleep(0L);
      Thennable[] thennableArray0 = new Thennable[0];
      Promise promise0 = Promise.all(thennableArray0);
      assertNotNull(promise0);
      assertEquals(0, thennableArray0.length);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      
      Promise promise1 = promise0.then((Func[]) null);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertEquals(0, thennableArray0.length);
      assertNotSame(promise0, promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2663);
      assertNotNull(forkJoinPool0);
      
      Promise promise2 = new Promise("%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL %5$s %6$s%n", (Func) null, forkJoinPool0);
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertNotNull(promise2);
      assertEquals(Status.PENDING, promise2.getStatus());
      
      Promise promise3 = promise1.then(thennableArray0);
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise0.equals((Object)promise2));
      assertFalse(promise1.equals((Object)promise2));
      assertFalse(promise1.equals((Object)promise0));
      assertFalse(promise3.equals((Object)promise0));
      assertFalse(promise3.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise2));
      assertNotNull(promise3);
      assertEquals(0, thennableArray0.length);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise3);
      assertNotSame(promise0, promise2);
      assertNotSame(promise1, promise2);
      assertNotSame(promise1, promise3);
      assertNotSame(promise1, promise0);
      assertNotSame(promise3, promise0);
      assertNotSame(promise3, promise1);
      assertNotSame(promise3, promise2);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      assertEquals(Status.PENDING, promise3.getStatus());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Promise promise0 = Promise.reject();
      assertNotNull(promise0);
      assertEquals(Status.REJECTED, promise0.getStatus());
      
      Func[] funcArray0 = new Func[6];
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      Promise.sleep(0L);
      Promise promise1 = promise0.then(funcArray0);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertEquals(6, funcArray0.length);
      assertNotSame(promise0, promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.REJECTED, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      
      // Undeclared exception!
      try { 
        Promise.all(funcArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.riversun.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Promise.sleep(0L);
      Thennable[] thennableArray0 = new Thennable[0];
      Promise promise0 = Promise.all(thennableArray0);
      assertNotNull(promise0);
      assertEquals(0, thennableArray0.length);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      
      Promise promise1 = promise0.then((Func[]) null);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertEquals(0, thennableArray0.length);
      assertNotSame(promise0, promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2663);
      assertNotNull(forkJoinPool0);
      
      Promise promise2 = promise1.then(thennableArray0);
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise1.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertNotNull(promise2);
      assertEquals(0, thennableArray0.length);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise2);
      assertNotSame(promise1, promise2);
      assertNotSame(promise1, promise0);
      assertNotSame(promise2, promise0);
      assertNotSame(promise2, promise1);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      assertEquals(Status.PENDING, promise2.getStatus());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Func[] funcArray0 = new Func[0];
      Promise.sleep(780L);
      Thennable[] thennableArray0 = new Thennable[0];
      Promise promise0 = Promise.reject();
      assertNotNull(promise0);
      assertEquals(Status.REJECTED, promise0.getStatus());
      
      Func func0 = null;
      Promise promise1 = promise0.then(funcArray0);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertEquals(0, funcArray0.length);
      assertNotSame(promise0, promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.REJECTED, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool((-338));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(func0).toString();
      Promise promise0 = new Promise(func0);
      assertNotNull(promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      
      Thennable[] thennableArray0 = new Thennable[9];
      thennableArray0[0] = (Thennable) promise0;
      thennableArray0[1] = (Thennable) promise0;
      thennableArray0[2] = (Thennable) promise0;
      thennableArray0[3] = (Thennable) promise0;
      Func[] funcArray0 = new Func[6];
      funcArray0[0] = func0;
      funcArray0[1] = func0;
      funcArray0[2] = func0;
      funcArray0[3] = func0;
      funcArray0[4] = func0;
      funcArray0[5] = func0;
      Promise promise1 = promise0.then(funcArray0);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertEquals(6, funcArray0.length);
      assertNotSame(promise0, promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      
      thennableArray0[4] = (Thennable) promise1;
      thennableArray0[5] = (Thennable) promise0;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(3830);
      assertNotNull(forkJoinPool0);
      
      Promise promise2 = new Promise((String) null, func0, forkJoinPool0);
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertNotNull(promise2);
      assertEquals(Status.PENDING, promise2.getStatus());
      
      thennableArray0[6] = (Thennable) promise2;
      thennableArray0[7] = (Thennable) promise0;
      thennableArray0[8] = (Thennable) promise0;
      Promise promise3 = promise0.then(thennableArray0);
      assertFalse(promise0.equals((Object)promise2));
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise0));
      assertNotNull(promise3);
      assertEquals(9, thennableArray0.length);
      assertNotSame(promise0, promise3);
      assertNotSame(promise0, promise2);
      assertNotSame(promise0, promise1);
      assertNotSame(promise3, promise2);
      assertNotSame(promise3, promise1);
      assertNotSame(promise3, promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      assertEquals(Status.PENDING, promise3.getStatus());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn(" crrResult=", " crrResult=").when(func0).toString();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      assertNotNull(priorityBlockingQueue0);
      
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(0, 1352, 0, timeUnit0, priorityBlockingQueue0);
      assertNotNull(threadPoolExecutor0);
      
      LinkedHashSet<Callable<Exception>> linkedHashSet0 = new LinkedHashSet<Callable<Exception>>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      List<Future<Exception>> list0 = threadPoolExecutor0.invokeAll((Collection<? extends Callable<Exception>>) linkedHashSet0, (long) 0, timeUnit0);
      assertNotNull(list0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Promise promise0 = new Promise(func0, threadPoolExecutor0);
      assertNotNull(promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      
      Promise.sleep(1352);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Func[] funcArray0 = new Func[1];
      funcArray0[0] = func0;
      Promise promise1 = new Promise("org.riversun.promise.Promise@0000000001", (Func) null, threadPoolExecutor0);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertEquals(Status.PENDING, promise1.getStatus());
      
      Promise promise2 = new Promise(func0, threadPoolExecutor0);
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertNotNull(promise2);
      assertEquals(Status.PENDING, promise2.getStatus());
      
      Promise promise3 = promise2.always((Thennable) promise1);
      assertFalse(promise1.equals((Object)promise0));
      assertFalse(promise1.equals((Object)promise2));
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise0));
      assertNotNull(promise3);
      assertNotSame(promise1, promise0);
      assertNotSame(promise1, promise3);
      assertNotSame(promise1, promise2);
      assertNotSame(promise2, promise0);
      assertNotSame(promise2, promise3);
      assertNotSame(promise2, promise1);
      assertNotSame(promise3, promise1);
      assertNotSame(promise3, promise2);
      assertNotSame(promise3, promise0);
      assertEquals(Status.PENDING, promise1.getStatus());
      assertEquals(Status.PENDING, promise2.getStatus());
      assertEquals(Status.PENDING, promise3.getStatus());
      
      // Undeclared exception!
      try { 
        promise2.start();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.util.concurrent.FutureTask cannot be cast to class java.lang.Comparable (java.util.concurrent.FutureTask and java.lang.Comparable are in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.concurrent.PriorityBlockingQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Promise promise0 = Promise.reject();
      assertNotNull(promise0);
      assertEquals(Status.REJECTED, promise0.getStatus());
      
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(func0).toString();
      Promise promise1 = promise0.always(func0);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertNotSame(promise0, promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.REJECTED, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      
      Func[] funcArray0 = new Func[1];
      funcArray0[0] = func0;
      Promise promise2 = Promise.all(funcArray0);
      assertFalse(promise2.equals((Object)promise1));
      assertFalse(promise2.equals((Object)promise0));
      assertNotNull(promise2);
      assertEquals(1, funcArray0.length);
      assertNotSame(promise2, promise1);
      assertNotSame(promise2, promise0);
      assertEquals(Status.PENDING, promise2.getStatus());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Promise.sleep(0L);
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn("!", "!", "!").when(func0).toString();
      Promise promise0 = new Promise(func0, (ExecutorService) null);
      assertNotNull(promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      
      Func func1 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn("!", "", "@TC'").when(func1).toString();
      Promise promise1 = promise0.always(func1);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertNotSame(promise0, promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable1);
      
      MockException mockException0 = new MockException(mockThrowable1);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(mockException0);
      
      MockException mockException1 = new MockException("", mockException0);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(mockException1.equals((Object)mockException0));
      assertNotNull(mockException1);
      
      Promise promise2 = Promise.resolve((Object) mockException1, (ExecutorService) null);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(mockException0.equals((Object)mockException1));
      assertFalse(mockException1.equals((Object)mockException0));
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertNotNull(promise2);
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertNotSame(mockException0, mockException1);
      assertNotSame(mockException1, mockException0);
      assertNotSame(promise2, promise0);
      assertNotSame(promise2, promise1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable1.toString());
      assertEquals(Status.FULFILLED, promise2.getStatus());
      
      Func[] funcArray0 = new Func[7];
      Func func2 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn("g0j", "g0j").when(func2).toString();
      funcArray0[0] = func2;
      funcArray0[1] = func2;
      funcArray0[2] = func1;
      funcArray0[3] = func0;
      funcArray0[4] = func1;
      funcArray0[5] = func0;
      // Undeclared exception!
      try { 
        Promise.all(funcArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.riversun.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Promise.sleep(0L);
      Thennable[] thennableArray0 = new Thennable[0];
      Promise promise0 = Promise.all(thennableArray0);
      assertNotNull(promise0);
      assertEquals(0, thennableArray0.length);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      
      Promise promise1 = promise0.then((Func[]) null);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertEquals(0, thennableArray0.length);
      assertNotSame(promise0, promise1);
      assertNotSame(promise1, promise0);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2663);
      assertNotNull(forkJoinPool0);
      
      Promise promise2 = new Promise((String) null, (Func) null, forkJoinPool0);
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertNotNull(promise2);
      assertEquals(Status.PENDING, promise2.getStatus());
      
      Promise promise3 = promise0.then(thennableArray0);
      assertFalse(promise0.equals((Object)promise2));
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise1));
      assertFalse(promise3.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise0));
      assertNotNull(promise3);
      assertEquals(0, thennableArray0.length);
      assertNotSame(promise0, promise2);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise3);
      assertNotSame(promise3, promise1);
      assertNotSame(promise3, promise2);
      assertNotSame(promise3, promise0);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      assertEquals(Status.PENDING, promise3.getStatus());
      
      Promise promise4 = Promise.all((ExecutorService) forkJoinPool0, thennableArray0);
      assertFalse(promise4.equals((Object)promise0));
      assertFalse(promise4.equals((Object)promise1));
      assertFalse(promise4.equals((Object)promise3));
      assertFalse(promise4.equals((Object)promise2));
      assertNotNull(promise4);
      assertEquals(0, thennableArray0.length);
      assertNotSame(promise4, promise0);
      assertNotSame(promise4, promise1);
      assertNotSame(promise4, promise3);
      assertNotSame(promise4, promise2);
      assertEquals(Status.FULFILLED, promise4.getStatus());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(func0).toString();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      Promise promise0 = new Promise(func0, forkJoinPool0);
      assertNotNull(promise0);
      assertEquals(Status.PENDING, promise0.getStatus());
      
      Func func1 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(func1).toString();
      Promise promise1 = new Promise(func1);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertEquals(Status.PENDING, promise1.getStatus());
      
      Promise promise2 = promise0.always((Thennable) promise1);
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise1.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertNotNull(promise2);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise2);
      assertNotSame(promise1, promise0);
      assertNotSame(promise1, promise2);
      assertNotSame(promise2, promise0);
      assertNotSame(promise2, promise1);
      assertEquals(Status.PENDING, promise0.getStatus());
      assertEquals(Status.PENDING, promise1.getStatus());
      assertEquals(Status.PENDING, promise2.getStatus());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Promise.sleep(0L);
      Thennable[] thennableArray0 = new Thennable[0];
      Promise promise0 = Promise.all(thennableArray0);
      assertNotNull(promise0);
      assertEquals(0, thennableArray0.length);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      
      Object object0 = promise0.getValue();
      assertNull(object0);
      assertEquals(0, thennableArray0.length);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      
      Promise promise1 = Promise.all(thennableArray0);
      assertFalse(promise1.equals((Object)promise0));
      assertNotNull(promise1);
      assertEquals(0, thennableArray0.length);
      assertNotSame(promise1, promise0);
      assertEquals(Status.FULFILLED, promise1.getStatus());
      
      Promise promise2 = promise0.always((Thennable) promise1);
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise1.equals((Object)promise0));
      assertFalse(promise2.equals((Object)promise1));
      assertFalse(promise2.equals((Object)promise0));
      assertNotNull(promise2);
      assertEquals(0, thennableArray0.length);
      assertNotSame(promise0, promise2);
      assertNotSame(promise0, promise1);
      assertNotSame(promise1, promise0);
      assertNotSame(promise1, promise2);
      assertNotSame(promise2, promise1);
      assertNotSame(promise2, promise0);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      assertEquals(Status.FULFILLED, promise1.getStatus());
      assertEquals(Status.PENDING, promise2.getStatus());
      
      Promise promise3 = promise1.start();
      assertFalse(promise1.equals((Object)promise0));
      assertFalse(promise1.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise2));
      assertFalse(promise3.equals((Object)promise0));
      assertNotNull(promise3);
      assertEquals(0, thennableArray0.length);
      assertNotSame(promise1, promise0);
      assertSame(promise1, promise3);
      assertNotSame(promise1, promise2);
      assertNotSame(promise3, promise2);
      assertSame(promise3, promise1);
      assertNotSame(promise3, promise0);
      assertEquals(Status.FULFILLED, promise1.getStatus());
      assertEquals(Status.FULFILLED, promise3.getStatus());
      
      ExecutorService executorService0 = promise0.createExecutor();
      assertFalse(promise0.equals((Object)promise2));
      assertFalse(promise0.equals((Object)promise1));
      assertFalse(promise0.equals((Object)promise3));
      assertNotNull(executorService0);
      assertEquals(0, thennableArray0.length);
      assertNotSame(promise0, promise2);
      assertNotSame(promise0, promise1);
      assertNotSame(promise0, promise3);
      assertEquals(Status.FULFILLED, promise0.getStatus());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(func0).toString();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(0, 1352, 0, timeUnit0, priorityBlockingQueue0);
      LinkedHashSet<Callable<Exception>> linkedHashSet0 = new LinkedHashSet<Callable<Exception>>();
      threadPoolExecutor0.invokeAll((Collection<? extends Callable<Exception>>) linkedHashSet0, (long) 0, timeUnit0);
      Promise promise0 = new Promise(func0, threadPoolExecutor0);
      Promise.sleep(1352);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Func[] funcArray0 = new Func[1];
      funcArray0[0] = func0;
      Promise promise1 = Promise.all((ExecutorService) threadPoolExecutor0, funcArray0);
      // Undeclared exception!
      try { 
        promise1.start();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.util.concurrent.FutureTask cannot be cast to class java.lang.Comparable (java.util.concurrent.FutureTask and java.lang.Comparable are in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.concurrent.PriorityBlockingQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Func[] funcArray0 = new Func[0];
      Promise promise0 = Promise.all(funcArray0);
      assertEquals(Status.FULFILLED, promise0.getStatus());
      
      Log.setLogEnabled(false);
      // Undeclared exception!
      try { 
        promise0.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.riversun.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Thennable[] thennableArray0 = new Thennable[0];
      Promise promise0 = Promise.all((ExecutorService) forkJoinPool0, thennableArray0);
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(func0).toString();
      Promise promise1 = new Promise("", func0, forkJoinPool0);
      promise0.always((Thennable) promise1);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "C]Y");
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Delayed) null).when(callable0).call();
      ForkJoinTask<Delayed> forkJoinTask0 = forkJoinPool0.submit(callable0);
      ForkJoinTask<ForkJoinTask<Delayed>> forkJoinTask1 = ForkJoinTask.adapt((Runnable) mockThread0, forkJoinTask0);
      forkJoinPool0.submit(forkJoinTask1);
      promise0.createExecutor();
      Func[] funcArray0 = new Func[3];
      Func func1 = mock(Func.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(func1).toString();
      funcArray0[0] = func1;
      funcArray0[1] = func1;
      funcArray0[2] = func1;
      Promise promise2 = Promise.all(funcArray0);
      assertEquals(Status.PENDING, promise2.getStatus());
      
      promise0.then(thennableArray0);
      assertEquals(Status.FULFILLED, promise0.getStatus());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Thennable[] thennableArray0 = new Thennable[1];
      Promise promise0 = new Promise();
      Func func0 = mock(Func.class, new ViolatedAssumptionAnswer());
      SyncPromise syncPromise0 = new SyncPromise(func0);
      Func[] funcArray0 = new Func[8];
      funcArray0[0] = func0;
      funcArray0[1] = func0;
      funcArray0[2] = func0;
      funcArray0[3] = func0;
      funcArray0[4] = func0;
      funcArray0[5] = func0;
      funcArray0[6] = func0;
      funcArray0[7] = func0;
      syncPromise0.then(funcArray0);
      Promise promise1 = promise0.always((Thennable) null);
      promise1.createExecutor();
      thennableArray0[0] = (Thennable) promise0;
      Promise.all(thennableArray0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      MockException mockException0 = new MockException(mockThrowable0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread mockThread0 = new MockThread("");
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool((-462), forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Promise.resolve((Object) null);
      Func[] funcArray0 = new Func[6];
      // Undeclared exception!
      try { 
        Promise.all(funcArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.riversun.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Promise promise0 = Promise.resolve();
      Thennable[] thennableArray0 = new Thennable[1];
      thennableArray0[0] = (Thennable) promise0;
      Promise promise1 = Promise.all(thennableArray0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Promise.resolve((Object) promise1, (ExecutorService) forkJoinPool0);
      // Undeclared exception!
      try { 
        promise0.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.riversun.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Promise promise0 = Promise.resolve();
      Promise promise1 = promise0.then((Thennable[]) null);
      assertNotNull(promise1);
      
      Status status0 = promise1.getStatus();
      assertEquals(Status.PENDING, status0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Promise.sleep(0L);
      Thennable[] thennableArray0 = new Thennable[0];
      Promise promise0 = Promise.all(thennableArray0);
      promise0.getValue();
      Promise promise1 = promise0.always((Func) null);
      Promise promise2 = Promise.all((Func[]) null);
      assertFalse(promise2.equals((Object)promise1));
  }
}
