/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 20:27:11 GMT 2022
 */

package com.britesnow.snow.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.britesnow.snow.util.FileUtil;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.NoSuchFileException;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileUtil_ESTest extends FileUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = FileUtil.changeFileName("!-:##,[~+-eRy$", "", "");
      assertEquals("!-:##,[~+-eRy$", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("OF6X]837lO");
      FileUtil.saveStringToFile("OsU{m+8bC.Ze=c", mockFile0);
      File file0 = MockFile.createTempFile("OF6X]837lO", "OF6X]837lO");
      // Undeclared exception!
      try { 
        FileUtil.cloneZipAndOverwriteStringContent(mockFile0, file0, (Map<String, String>) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.ZipOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("OF6X]837lO");
      File file0 = MockFile.createTempFile("OF6X]837lO", "OF6X]837lO");
      try { 
        FileUtil.cloneZipAndOverwriteStringContent(mockFile0, file0, (Map<String, String>) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = MockFile.createTempFile(".fileutvl$2bv8[b", ".fileutvl$2bv8[b");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = FileUtil.getFileContentAsString(file0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = FileUtil.splitIdFolder2("", 'E');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile("zvioqOr", "zvioqOr");
      String string0 = FileUtil.getFileContentAsString(file0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = FileUtil.encodeFileName("H({8iDgR3G/=$");
      assertEquals("H({8iDgR3G/%3D%24", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = FileUtil.encodeFileName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.splitIdFolder2("]$[K!'r", 'g');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        FileUtil.saveStringToFile("", mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.britesnow.snow.util.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",lum:3WqsWD8;7");
      try { 
        FileUtil.getZipContentAsString(mockFile0, ",lum:3WqsWD8;7");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      try { 
        FileUtil.getZipContentAsString((File) null, "|b~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".f\"l;4 qutil$100\u0082h0\u0082fc\u0082-a\u0082oa\u0082?i\u0082np\u008268\u0082lf\u00823u\u0082wx\u0082#0\u0082r\u0082xr\u0082xz\u0082&_\u0082[y", ".f\"l;4 qutil$10[0h0fc-aoa?inp68lf3uwx#0rxrxz&_[]y");
      try { 
        FileUtil.getZipContentAsString(mockFile0, ".f\"l;4 qutil$100\u0082h0\u0082fc\u0082-a\u0082oa\u0082?i\u0082np\u008268\u0082lf\u00823u\u0082wx\u0082#0\u0082r\u0082xr\u0082xz\u0082&_\u0082[y");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.nio.file.InvalidPathException: Malformed input or input contains unmappable characters: /home/user/.f\"l;4 qutil$100\u0082h0\u0082fc\u0082-a\u0082oa\u0082?i\u0082np\u008268\u0082lf\u00823u\u0082wx\u0082#0\u0082r\u0082xr\u0082xz\u0082&_\u0082[y/.f\"l;4 qutil$10[0h0fc-aoa?inp68lf3uwx#0rxrxz&_[]y
         //
         verifyException("java.util.zip.ZipFile$Source", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      try { 
        FileUtil.getZipContentAsString(mockFile0, "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // / (Is a directory)
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.getFilePathAndName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.britesnow.snow.util.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.getFileNameAndExtension((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.britesnow.snow.util.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        FileUtil.getFileContentAsString(mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.britesnow.snow.util.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        FileUtil.cloneZipAndOverwriteStringContent((File) null, (File) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.britesnow.snow.util.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      File file0 = MockFile.createTempFile("Q,9?Rf]i", "Q,9?Rf]i");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      try { 
        FileUtil.cloneZipAndOverwriteStringContent(file0, file0, hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.changeFileName((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.britesnow.snow.util.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = FileUtil.splitIdFolder2("GTR[lehN*Pgp_']Hi", '9');
      assertEquals("GTRle9hN9*P9gp9_'Hi", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = FileUtil.getFileNameAndExtension("com.britesnow.snow.util.FileUtil");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = FileUtil.getFileNameAndExtension("dL:V\";9PgAxvb %E");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = FileUtil.getExtraMimeType("TR0l-eh-N*-gp-_'Hi");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = FileUtil.getExtraMimeType((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = FileUtil.splitIdFolder2("TR[lehNHgp_']Hi", 'H');
      assertEquals("TR0lHehHNHHgpH_'_dirHi", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = FileUtil.splitIdFolder2("rxRXz&_[]y", 'C');
      assertEquals("rxRXz&_0y", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = FileUtil.splitIdFolder2("TR[ue**Pgp_']", 'j');
      assertEquals("TR0uje*j*Pjgpj_'", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = FileUtil.splitIdFolder2("Y[u)-pFDfr~ ?@}U", '-');
      assertEquals("Y[u)-pFDfr~ ?@}U", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = FileUtil.splitIdFolder2((String) null, 'Z');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = FileUtil.getFilePathAndName("|/?l1Uf.W?0jNgl&1");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = FileUtil.changeFileName("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = FileUtil.changeFileName("", (String) null, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",lum:3WqsWD8;7", ",lum:3WqsWD8;7");
      try { 
        FileUtil.cloneZipAndOverwriteStringContent(mockFile0, mockFile0, (Map<String, String>) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFile mockFile0 = new MockFile("] because ");
      String string0 = FileUtil.getFileContentAsString(mockFile0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = FileUtil.getFileContentAsString((File) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("] because ");
      FileUtil.saveStringToFile("] because ", mockFile0);
      String string0 = FileUtil.getFileContentAsString(mockFile0);
      assertNotNull(string0);
      assertEquals("] because \n", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.britesnow.snow.util.FileUtvl$2");
      MockFile.createTempFile("com.britesnow.snow.util.FileUtvl$2", "com.britesnow.snow.util.FileUtvl$2", (File) mockFile0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.britesnow.snow.util.FileUtvl$2";
      stringArray0[1] = "com.britesnow.snow.util.FileUtvl$2";
      stringArray0[2] = "com.britesnow.snow.util.FileUtvl$2";
      stringArray0[3] = "com.britesnow.snow.util.FileUtvl$2";
      File[] fileArray0 = FileUtil.getFiles(mockFile0, stringArray0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      String[] stringArray0 = FileUtil.getFilePathAndName("");
      File[] fileArray0 = FileUtil.getFiles(mockFile0, stringArray0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".fileutvl2bv8[b");
      MockFile.createTempFile(".fileutvl2bv8[b", ".fileutvl2bv8[b", (File) mockFile0);
      MockFile.createTempFile(".fileutvl2bv8[b", ".fileutvl2bv8[b", (File) mockFile0);
      String[] stringArray0 = FileUtil.getFilePathAndName(".fileutvl2bv8[b");
      assertEquals(2, stringArray0.length);
      
      File[] fileArray0 = FileUtil.getFiles(mockFile0, stringArray0);
      assertEquals(2, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.encodeFileName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.britesnow.snow.util.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dL:V\";9PgAxvb %E");
      String[] stringArray0 = FileUtil.getFilePathAndName("");
      // Undeclared exception!
      try { 
        FileUtil.getFiles(mockFile0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }
}
