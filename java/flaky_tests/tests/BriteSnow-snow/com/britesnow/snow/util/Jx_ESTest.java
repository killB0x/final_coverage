/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 20:22:17 GMT 2022
 */

package com.britesnow.snow.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.britesnow.snow.util.Jx;
import java.io.File;
import java.util.List;
import javax.imageio.metadata.IIOMetadataNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Jx_ESTest extends Jx_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setAttributeNS("J\"FPph<_d,z", "xmlns:Zz4GlR", "ivy@");
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = jx0.initNsc("J\"FPph<_d,z");
      assertEquals(1, jx1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setAttributeNS("2\"_&(KQ]*rRL0`?{", "{http://xml.apache.org/xslt}indent-amount", "{http://xml.apache.org/xslt}indent-amount");
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = Jx.x((File) null);
      Jx jx2 = jx1.merge(jx0);
      assertNotSame(jx0, jx2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = Jx.x((Node) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        jx0.replaceChild(jx1, jx0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.britesnow.snow.util.Jx", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.removeChild(iIOMetadataNode0);
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = jx0.merge(jx0);
      assertSame(jx1, jx0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("HGgYd(_`h)");
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      iIOMetadataNode0.removeChild(iIOMetadataNode0);
      List<Jx> list0 = jx0.children();
      assertFalse(list0.contains(jx0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = jx0.find(".");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode1.insertBefore(iIOMetadataNode0, iIOMetadataNode0);
      Jx jx2 = jx1.remove();
      assertEquals(1, jx2.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Jx jx0 = Jx.x((Node) null);
      assertEquals(0, jx0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      String string0 = jx0.pretty();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      String string0 = jx0.nodeName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Jx jx0 = Jx.x((File) null);
      Node node0 = jx0.n();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = MockFile.createTempFile("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n\n", "", (File) null);
      Jx jx0 = Jx.x(file0);
      Exception exception0 = jx0.lastException();
      assertNotNull(exception0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Jx jx0 = Jx.x("2");
      Jx jx1 = jx0.initNsc("2");
      assertSame(jx1, jx0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setAttributeNS(">gBz`b#\u0005!DgYX`", ">gBz`b#\u0005!DgYX`", "{http://xml.apache.org/xslt}indent-amount");
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      String string0 = jx0.attr(">gBz`b#\u0005!DgYX`");
      assertEquals("{http://xml.apache.org/xslt}indent-amount", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        jx0.merge((Jx) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.britesnow.snow.util.Jx", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        jx0.isValueEmpty();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("com.britesnow.snow.util.ObjectUtil");
      Node node0 = iIOMetadataNode1.insertBefore(iIOMetadataNode0, iIOMetadataNode0);
      Jx jx0 = Jx.x(node0);
      // Undeclared exception!
      try { 
        jx0.has("com.britesnow.snow.util.ObjectUtil");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Jx jx0 = Jx.x((String) null);
      // Undeclared exception!
      try { 
        jx0.has((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode1.insertBefore(iIOMetadataNode0, iIOMetadataNode0);
      Jx jx0 = Jx.x(node0);
      // Undeclared exception!
      try { 
        jx0.find("PVI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Jx jx0 = Jx.x("sH$h#x$2,");
      // Undeclared exception!
      try { 
        jx0.find((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        jx0.clone();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("xmlns");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.insertBefore(iIOMetadataNode1, iIOMetadataNode1);
      Jx jx0 = Jx.x(node0);
      // Undeclared exception!
      try { 
        jx0.child("xmlns");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setAttributeNS("xmlnv", "xmlnv", "xmlnv");
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jx0.attrAs((String) null, class0, (Object) jx0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setAttributeNS("xmlnv`IV", "xmlnv`IV", "xmlnv`IV");
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jx0.attrAs((String) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        jx0.attr((String) null, (Object) iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setAttributeNS("xmlnvV", "xmlnvV", "xmlnvV");
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        jx0.attr((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        jx0.add(jx0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("(Lq/S\"q_CkTOv+m");
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      jx0.initNsc("C8)U");
      Jx jx1 = jx0.find("C8)U");
      assertNotSame(jx0, jx1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = jx0.clone();
      assertNotSame(jx1, jx0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setAttributeNS("xmlns`0aRV", "xmlns`0aRV", "xmlns`0aRV");
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      String[] stringArray0 = jx0.attrNames();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Jx jx0 = Jx.x("Gm}(F\" dIz");
      String[] stringArray0 = jx0.attrNames();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = jx0.attr("yyyy_", (Object) iIOMetadataNode0);
      assertEquals(1, jx1.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Jx.createDocument();
      Jx jx0 = Jx.x((Node) document0);
      String string0 = jx0.attr("!dT!6\"-c0]");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Jx jx0 = Jx.x("");
      String string0 = jx0.attr("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      String string0 = jx0.attr(">gBz`b#\u0005!DgYX`");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      List<Jx> list0 = jx0.list();
      assertTrue(list0.contains(jx0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Jx jx0 = Jx.x("PE2");
      List<Jx> list0 = jx0.list();
      assertFalse(list0.contains(jx0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = jx0.find(".");
      List<Jx> list0 = jx1.list();
      assertFalse(list0.contains(jx1));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Jx jx0 = Jx.x((File) null);
      String string0 = jx0.value();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Element element0 = jx0.e();
      assertSame(iIOMetadataNode0, element0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Jx jx0 = Jx.x("");
      Element element0 = jx0.e();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.insertBefore(iIOMetadataNode0, iIOMetadataNode0);
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      List<Jx> list0 = jx0.allChildren();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      List<Jx> list0 = jx0.allChildren();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Jx jx0 = Jx.x("xmYns*Z");
      List<Jx> list0 = jx0.allChildren();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Node node0 = jx0.n();
      assertSame(iIOMetadataNode0, node0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setAttributeNS("xmlns`0aRV", "xmlns`0aRV", "xmlns`0aRV");
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = jx0.initNsc("xmlns`0aRV");
      assertEquals(1, jx1.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setAttributeNS("2\"_&(KQ]*rRL0`?{", "{http://xml.apache.org/xslt}indent-amount", "{http://xml.apache.org/xslt}indent-amount");
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = jx0.initNsc("{http://xml.apache.org/xslt}indent-amount");
      assertSame(jx0, jx1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = jx0.initNsc((String) null);
      assertEquals(1, jx1.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      boolean boolean0 = jx0.has(".");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = jx0.initNsc("jpKh%sl _W,`D#[4l!!");
      boolean boolean0 = jx1.has("com.britesnow.snow.util.ObjectUtil");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("7`xH3b");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode0.appendChild(iIOMetadataNode1);
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      MockFile mockFile0 = new MockFile("7`xH3b");
      Jx jx1 = Jx.x((File) mockFile0);
      Jx jx2 = jx1.merge(jx0);
      assertNotSame(jx0, jx2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Jx jx0 = Jx.x("2\"_&(KQ]*rRL0`?{");
      Jx jx1 = jx0.clone();
      assertNotSame(jx1, jx0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = jx0.find(".");
      Jx jx2 = jx1.clone();
      assertNotSame(jx2, jx1);
      assertEquals(1, jx2.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Jx.createDocument();
      Jx jx0 = Jx.x((Node) document0);
      Jx jx1 = jx0.add(jx0);
      assertSame(jx0, jx1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Jx.createDocument();
      Jx jx0 = Jx.x((Node) document0);
      String[] stringArray0 = jx0.attrNames();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        jx0.attr((String) null, (Object) null);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // No such attribute!
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Jx jx0 = Jx.x("s0&h");
      Jx jx1 = jx0.attr("s0&h", (Object) "s0&h");
      assertSame(jx1, jx0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Jx.createDocument();
      Jx jx0 = Jx.x((Node) document0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        jx0.attrAs(">gBz`", class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/beanutils/PropertyUtilsBean
         //
         verifyException("com.britesnow.snow.util.Jx", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Jx jx0 = Jx.x("5k&<F}z;t=07w.N8`");
      Jx jx1 = jx0.add(jx0);
      assertEquals(0, jx1.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = jx0.find(".");
      // Undeclared exception!
      try { 
        jx0.add(jx1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.britesnow.snow.util.Jx", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Jx jx0 = Jx.x((File) null);
      int int0 = jx0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = jx0.find(".");
      int int0 = jx1.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("7`xH3b");
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      int int0 = jx0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Jx.createDocument();
      Jx jx0 = Jx.x((Node) document0);
      String string0 = jx0.nodeName();
      assertEquals("#document", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Jx jx0 = Jx.x("(pHd(Dk'Q)[hI@~");
      String string0 = jx0.nodeName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        jx0.value("yyyy-MM-dd");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Jx.createDocument();
      Jx jx0 = Jx.x((Node) document0);
      Jx jx1 = jx0.value("xmlns{http://xml.apache.org/xslt}indent-amount");
      assertSame(jx0, jx1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Jx jx0 = Jx.x("true");
      Jx jx1 = jx0.value("true");
      assertSame(jx1, jx0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        jx0.value();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Jx jx0 = Jx.x((File) null);
      boolean boolean0 = jx0.isValueEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Jx.createDocument();
      Jx jx0 = Jx.x((Node) document0);
      Document document1 = jx0.doc();
      assertNull(document1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Jx jx0 = Jx.x("xmlns2\"_&(KQ]*rRL0`?{");
      Document document0 = jx0.doc();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = Jx.x((String) null);
      Jx jx2 = jx0.replaceChild(jx0, jx1);
      assertEquals(1, jx2.size());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = Jx.x("yyyy-MM-dd");
      Jx jx2 = jx0.replaceChild(jx1, jx1);
      assertSame(jx0, jx2);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Jx jx0 = Jx.x("xmlns_E0_&.xAua9?1m,|9");
      Jx jx1 = jx0.replaceChild(jx0, jx0);
      assertSame(jx0, jx1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        jx0.child("true");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.britesnow.snow.util.Jx", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = jx0.child(".");
      assertEquals(1, jx1.size());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Jx jx0 = Jx.x("6");
      Jx jx1 = jx0.child("6");
      assertNotSame(jx1, jx0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = jx0.addChild((String) null);
      assertNotSame(jx0, jx1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        jx0.addChild(".");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.britesnow.snow.util.Jx", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Jx jx0 = Jx.x((String) null);
      Jx jx1 = jx0.addChild((String) null);
      assertSame(jx0, jx1);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        jx0.merge(jx0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = Jx.createDocument();
      Jx jx0 = Jx.x((Node) document0);
      List<Jx> list0 = jx0.allChildren();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      List<Jx> list0 = jx0.children();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.insertBefore(iIOMetadataNode0, iIOMetadataNode0);
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      List<Jx> list0 = jx0.children();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MockFile mockFile0 = new MockFile("FD%`6=I*$D", "tyg_u%u'o");
      Jx jx0 = Jx.x((File) mockFile0);
      List<Jx> list0 = jx0.children();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      Jx jx1 = jx0.remove();
      assertSame(jx0, jx1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Jx jx0 = Jx.x((File) null);
      Jx jx1 = jx0.remove();
      assertSame(jx1, jx0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = jx0.remove();
      assertEquals(1, jx1.size());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Jx jx0 = Jx.x((Node) iIOMetadataNode0);
      Jx jx1 = jx0.find(".");
      jx1.remove();
      assertEquals(1, jx1.size());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Jx jx0 = Jx.x((String) null);
      Exception exception0 = jx0.lastException();
      assertNull(exception0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = Jx.createDocument();
      Jx jx0 = Jx.x((Node) document0);
      List<Jx> list0 = jx0.children();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Jx jx0 = Jx.x("lnR`");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jx0.attrAs("lnR`", class0, (Object) class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/beanutils/PropertyUtilsBean
         //
         verifyException("com.britesnow.snow.util.Jx", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      MockFile mockFile0 = new MockFile("FD%`6=I*$D", "tyg_u%u'o");
      Jx jx0 = Jx.x((File) mockFile0);
      String string0 = jx0.pretty();
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n\n", string0);
  }
}
