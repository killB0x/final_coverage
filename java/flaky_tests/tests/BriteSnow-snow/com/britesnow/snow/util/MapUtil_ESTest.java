/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 20:33:35 GMT 2022
 */

package com.britesnow.snow.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.britesnow.snow.util.MapUtil;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapUtil_ESTest extends MapUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<?, ?> map0 = MapUtil.mapIt(objectArray0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("-", "-");
      Class<String> class0 = String.class;
      String string0 = MapUtil.getDeepValue((Map) hashMap0, "-", class0);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      String string0 = MapUtil.getDeepValue((Map) hashMap0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<String, Object> map0 = MapUtil.deepMapIt(objectArray0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) hashMap0;
      hashMap0.put(objectArray0[0], "Uxj9#,(r'k+LKNE'o");
      // Undeclared exception!
      try { 
        MapUtil.setIt(objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) hashMap0;
      hashMap0.put(objectArray0[0], "(Wc7H|*hijUzeRL1");
      // Undeclared exception!
      try { 
        MapUtil.mapIt(objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.mapIt((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.britesnow.snow.util.MapUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Map<?, ?> map0 = MapUtil.mapIt(objectArray0);
      // Undeclared exception!
      try { 
        MapUtil.hasKeyStartsWith(map0, "]{~PVl>]j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Map<?, ?> map0 = MapUtil.mapIt(objectArray0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        MapUtil.getDeepValue((Map) map0, ".", class0, (Object) class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("com.britesnow.snow.util.MapUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("L7", "L7");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        MapUtil.getDeepValue((Map) hashMap0, "L7", class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/beanutils/PropertyUtilsBean
         //
         verifyException("com.britesnow.snow.util.MapUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        MapUtil.getDeepValue((Map) hashMap0, ".", class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("com.britesnow.snow.util.MapUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      // Undeclared exception!
      try { 
        MapUtil.getDeepValue((Map) hashMap0, ".");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("com.britesnow.snow.util.MapUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        MapUtil.deepMapIt(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("klV=]`n\r+$^qPm=r`", "klV=]`n\r+$^qPm=r`");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        MapUtil.getDeepValue((Map) hashMap0, "klV=]`n\r+$^qPm=r`", class0, (Object) class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/beanutils/PropertyUtilsBean
         //
         verifyException("com.britesnow.snow.util.MapUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) hashMap0;
      objectArray0[2] = (Object) hashMap0;
      objectArray0[4] = (Object) "com.britesnow.snow.util.MapUtil";
      objectArray0[5] = (Object) "com.britesnow.snow.util.MapUtil";
      objectArray0[6] = (Object) "com.britesnow.snow.util.MapUtil";
      Class<String> class0 = String.class;
      Map<String, Object> map0 = MapUtil.deepMapIt(objectArray0);
      MapUtil.getDeepValue((Map) map0, "com.britesnow.snow.util.MapUtil", class0, "java.util.Hjava.lang.String@0000000003");
      assertEquals(3, map0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) hashMap0;
      objectArray0[2] = (Object) hashMap0;
      objectArray0[4] = (Object) "com.britesnow.snow.util.MapUtil";
      objectArray0[6] = (Object) "com.britesnow.snow.util.MapUtil";
      Class<String> class0 = String.class;
      Map<String, Object> map0 = MapUtil.deepMapIt(objectArray0);
      String string0 = MapUtil.getDeepValue((Map) map0, "com.britesnow.snow.util.MapUtil", class0, "java.util.Hjava.lang.String@0000000003");
      assertNotNull(string0);
      assertEquals(3, map0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class class1 = (Class)MapUtil.getDeepValue((Map) null, "^`Tvc", class0, (Object) class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<String> class0 = String.class;
      String string0 = MapUtil.getDeepValue((Map) hashMap0, (String) null, class0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Set set0 = MapUtil.setIt(objectArray0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Set set0 = MapUtil.setIt((Object[]) null);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("YAFIIZS%}Y/d", ",2W");
      boolean boolean0 = MapUtil.hasKeyStartsWith(hashMap0, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      boolean boolean0 = MapUtil.hasKeyStartsWith(hashMap0, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) hashMap0;
      objectArray0[2] = (Object) hashMap0;
      objectArray0[4] = (Object) "com.britesnow.snow.util.MapUtil";
      objectArray0[6] = (Object) "com.britesnow.snow.util.MapUtil";
      Map<String, Object> map0 = MapUtil.deepMapIt(objectArray0);
      boolean boolean0 = MapUtil.hasKeyStartsWith(map0, "|z,#~2K!#Op~5g),'bS");
      assertFalse(boolean0);
      assertEquals(3, map0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = MapUtil.hasKeyStartsWith((Map) null, "KU;8a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Map<?, ?> map0 = MapUtil.mapIt(objectArray0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "L#SLbTG;R5ieJA9NV";
      Map<String, Object> map0 = MapUtil.deepMapIt(objectArray0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) hashMap0;
      objectArray0[2] = (Object) "java.lang.String@0000000002";
      objectArray0[4] = (Object) "java.lang.String@0000000002";
      objectArray0[5] = (Object) class0;
      Map<String, Object> map0 = MapUtil.deepMapIt(objectArray0);
      // Undeclared exception!
      try { 
        MapUtil.getDeepValue(map0, "java.lang.String@0000000002");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/beanutils/PropertyUtilsBean
         //
         verifyException("com.britesnow.snow.util.MapUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) hashMap0;
      objectArray0[2] = (Object) hashMap0;
      objectArray0[4] = (Object) "com.britesnow.snow.util.MapUtil";
      objectArray0[5] = (Object) "com.britesnow.snow.util.MapUtil";
      objectArray0[6] = (Object) "com.britesnow.snow.util.MapUtil";
      Map<String, Object> map0 = MapUtil.deepMapIt(objectArray0);
      String string0 = MapUtil.getDeepValue(map0, "com.britesnow.snow.util.MapUtil");
      assertEquals(3, map0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      Class<String> class0 = String.class;
      String string0 = MapUtil.getDeepValue((Map) hashMap0, ".z[_YJsZ<z", class0, ".z[_YJsZ<z");
      assertEquals(".z[_YJsZ<z", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = MapUtil.getDeepValue((Map) hashMap0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = MapUtil.getDeepValue((Map) null, "fT'Q>HI/tEm`>T", class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MapUtil mapUtil0 = new MapUtil();
  }
}
