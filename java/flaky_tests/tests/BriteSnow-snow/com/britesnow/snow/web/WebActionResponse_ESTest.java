/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 20:54:02 GMT 2022
 */

package com.britesnow.snow.web;

import org.junit.Test;
import static org.junit.Assert.*;
import com.britesnow.snow.web.WebActionResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WebActionResponse_ESTest extends WebActionResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      WebActionResponse webActionResponse0 = new WebActionResponse((Object) null);
      webActionResponse0.getErrorType();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      WebActionResponse webActionResponse0 = new WebActionResponse((Throwable) mockThrowable0);
      String string0 = webActionResponse0.getErrorMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      WebActionResponse webActionResponse0 = new WebActionResponse((Throwable) null);
      Throwable throwable0 = webActionResponse0.getError();
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("]8(hyGDy6Cs{@](");
      MockThrowable mockThrowable1 = new MockThrowable("]8(hyGDy6Cs{@](", mockThrowable0);
      WebActionResponse webActionResponse0 = new WebActionResponse((Throwable) mockThrowable1);
      String string0 = webActionResponse0.getErrorMessage();
      assertEquals("]8(hyGDy6Cs{@](", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      WebActionResponse.ErrorType webActionResponse_ErrorType0 = WebActionResponse.ErrorType.action_not_found;
      WebActionResponse webActionResponse0 = new WebActionResponse(webActionResponse_ErrorType0);
      String string0 = webActionResponse0.getErrorMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object object0 = new Object();
      WebActionResponse webActionResponse0 = new WebActionResponse(object0);
      Object object1 = webActionResponse0.getResult();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("]8(hyGDy6Cs{@](");
      WebActionResponse webActionResponse0 = new WebActionResponse((Throwable) mockThrowable0);
      WebActionResponse.ErrorType webActionResponse_ErrorType0 = webActionResponse0.getErrorType();
      assertEquals(WebActionResponse.ErrorType.exception, webActionResponse_ErrorType0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("]8(hyGDy6Cs{@](");
      WebActionResponse webActionResponse0 = new WebActionResponse((Throwable) mockThrowable0);
      WebActionResponse.Status webActionResponse_Status0 = webActionResponse0.getStatus();
      assertEquals(WebActionResponse.Status.error, webActionResponse_Status0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("]8(hyGDy6Cs{@](");
      WebActionResponse webActionResponse0 = new WebActionResponse((Throwable) mockThrowable0);
      Throwable throwable0 = webActionResponse0.getError();
      assertEquals("]8(hyGDy6Cs{@](", throwable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      WebActionResponse.ErrorType webActionResponse_ErrorType0 = WebActionResponse.ErrorType.insufficient_privilege;
      WebActionResponse webActionResponse0 = new WebActionResponse(webActionResponse_ErrorType0);
      Object object0 = webActionResponse0.getResult();
      assertNull(object0);
  }
}
