/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 20:35:41 GMT 2022
 */

package com.britesnow.snow.web.auth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.britesnow.snow.web.auth.AuthToken;
import com.britesnow.snow.web.auth.DeprecatedAuthToken;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DeprecatedAuthToken_ESTest extends DeprecatedAuthToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DeprecatedAuthToken<Object> deprecatedAuthToken0 = new DeprecatedAuthToken<Object>((DeprecatedAuthToken.Type) null);
      deprecatedAuthToken0.getType();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeprecatedAuthToken<Integer> deprecatedAuthToken0 = new DeprecatedAuthToken<Integer>((DeprecatedAuthToken.Type) null);
      // Undeclared exception!
      try { 
        deprecatedAuthToken0.getHasUserRights();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.britesnow.snow.web.auth.DeprecatedAuthToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeprecatedAuthToken<String> deprecatedAuthToken0 = new DeprecatedAuthToken<String>((DeprecatedAuthToken.Type) null);
      // Undeclared exception!
      try { 
        deprecatedAuthToken0.getHasAdminRights();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.britesnow.snow.web.auth.DeprecatedAuthToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeprecatedAuthToken.Type deprecatedAuthToken_Type0 = DeprecatedAuthToken.Type.visitor;
      DeprecatedAuthToken<Integer> deprecatedAuthToken0 = new DeprecatedAuthToken<Integer>(deprecatedAuthToken_Type0);
      AuthToken<Integer> authToken0 = deprecatedAuthToken0.setType(deprecatedAuthToken_Type0);
      assertNotNull(authToken0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeprecatedAuthToken.Type deprecatedAuthToken_Type0 = DeprecatedAuthToken.Type.visitor;
      DeprecatedAuthToken<Integer> deprecatedAuthToken0 = new DeprecatedAuthToken<Integer>(deprecatedAuthToken_Type0);
      AuthToken<Integer> authToken0 = deprecatedAuthToken0.setType((DeprecatedAuthToken.Type) null);
      assertNotNull(authToken0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeprecatedAuthToken.Type deprecatedAuthToken_Type0 = DeprecatedAuthToken.Type.user;
      DeprecatedAuthToken<Object> deprecatedAuthToken0 = new DeprecatedAuthToken<Object>(deprecatedAuthToken_Type0);
      boolean boolean0 = deprecatedAuthToken0.getHasUserRights();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DeprecatedAuthToken.Type deprecatedAuthToken_Type0 = DeprecatedAuthToken.Type.visitor;
      DeprecatedAuthToken<Object> deprecatedAuthToken0 = new DeprecatedAuthToken<Object>(deprecatedAuthToken_Type0);
      DeprecatedAuthToken.Type deprecatedAuthToken_Type1 = DeprecatedAuthToken.Type.admin;
      deprecatedAuthToken0.setType(deprecatedAuthToken_Type1);
      boolean boolean0 = deprecatedAuthToken0.getHasUserRights();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeprecatedAuthToken.Type deprecatedAuthToken_Type0 = DeprecatedAuthToken.Type.visitor;
      DeprecatedAuthToken<Integer> deprecatedAuthToken0 = new DeprecatedAuthToken<Integer>(deprecatedAuthToken_Type0);
      boolean boolean0 = deprecatedAuthToken0.getHasUserRights();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeprecatedAuthToken.Type deprecatedAuthToken_Type0 = DeprecatedAuthToken.Type.root;
      DeprecatedAuthToken<Integer> deprecatedAuthToken0 = new DeprecatedAuthToken<Integer>(deprecatedAuthToken_Type0);
      boolean boolean0 = deprecatedAuthToken0.getHasUserRights();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeprecatedAuthToken.Type deprecatedAuthToken_Type0 = DeprecatedAuthToken.Type.admin;
      DeprecatedAuthToken<Object> deprecatedAuthToken0 = new DeprecatedAuthToken<Object>(deprecatedAuthToken_Type0);
      boolean boolean0 = deprecatedAuthToken0.getHasAdminRights();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeprecatedAuthToken.Type deprecatedAuthToken_Type0 = DeprecatedAuthToken.Type.visitor;
      DeprecatedAuthToken<String> deprecatedAuthToken0 = new DeprecatedAuthToken<String>(deprecatedAuthToken_Type0);
      boolean boolean0 = deprecatedAuthToken0.getHasAdminRights();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeprecatedAuthToken.Type deprecatedAuthToken_Type0 = DeprecatedAuthToken.Type.visitor;
      DeprecatedAuthToken<Integer> deprecatedAuthToken0 = new DeprecatedAuthToken<Integer>(deprecatedAuthToken_Type0);
      DeprecatedAuthToken.Type deprecatedAuthToken_Type1 = DeprecatedAuthToken.Type.root;
      deprecatedAuthToken0.setType(deprecatedAuthToken_Type1);
      boolean boolean0 = deprecatedAuthToken0.getHasAdminRights();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeprecatedAuthToken.Type deprecatedAuthToken_Type0 = DeprecatedAuthToken.Type.root;
      DeprecatedAuthToken<Object> deprecatedAuthToken0 = new DeprecatedAuthToken<Object>(deprecatedAuthToken_Type0);
      boolean boolean0 = deprecatedAuthToken0.getHasRootRights();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DeprecatedAuthToken.Type deprecatedAuthToken_Type0 = DeprecatedAuthToken.Type.admin;
      DeprecatedAuthToken<Object> deprecatedAuthToken0 = new DeprecatedAuthToken<Object>(deprecatedAuthToken_Type0);
      boolean boolean0 = deprecatedAuthToken0.getHasRootRights();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DeprecatedAuthToken.Type deprecatedAuthToken_Type0 = DeprecatedAuthToken.Type.root;
      DeprecatedAuthToken<Object> deprecatedAuthToken0 = new DeprecatedAuthToken<Object>(deprecatedAuthToken_Type0);
      boolean boolean0 = deprecatedAuthToken0.belongTo("admin");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DeprecatedAuthToken.Type deprecatedAuthToken_Type0 = DeprecatedAuthToken.Type.user;
      DeprecatedAuthToken<Object> deprecatedAuthToken0 = new DeprecatedAuthToken<Object>(deprecatedAuthToken_Type0);
      boolean boolean0 = deprecatedAuthToken0.belongTo("-87GE'oP");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DeprecatedAuthToken.Type deprecatedAuthToken_Type0 = DeprecatedAuthToken.Type.admin;
      DeprecatedAuthToken<Object> deprecatedAuthToken0 = new DeprecatedAuthToken<Object>(deprecatedAuthToken_Type0);
      DeprecatedAuthToken.Type deprecatedAuthToken_Type1 = deprecatedAuthToken0.getType();
      assertSame(deprecatedAuthToken_Type1, deprecatedAuthToken_Type0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DeprecatedAuthToken.Type deprecatedAuthToken_Type0 = DeprecatedAuthToken.Type.visitor;
      DeprecatedAuthToken<Object> deprecatedAuthToken0 = new DeprecatedAuthToken<Object>(deprecatedAuthToken_Type0);
      boolean boolean0 = deprecatedAuthToken0.getHasVisitorRights();
      assertTrue(boolean0);
  }
}
