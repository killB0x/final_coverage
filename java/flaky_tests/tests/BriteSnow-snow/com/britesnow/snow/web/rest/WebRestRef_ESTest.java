/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 21:08:33 GMT 2022
 */

package com.britesnow.snow.web.rest;

import org.junit.Test;
import static org.junit.Assert.*;
import com.britesnow.snow.web.handler.ParamDef;
import com.britesnow.snow.web.rest.WebRestRef;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WebRestRef_ESTest extends WebRestRef_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Pattern pattern0 = Pattern.compile("");
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      WebRestRef webRestRef0 = new WebRestRef(class0, (Method) null, (ParamDef[]) null, "", pattern0, hashMap0);
      Map<Integer, String> map0 = webRestRef0.getPathVarByIdx();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Pattern pattern0 = Pattern.compile("");
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      WebRestRef webRestRef0 = new WebRestRef(class0, (Method) null, (ParamDef[]) null, "", pattern0, hashMap0);
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, "");
      Map<Integer, String> map0 = webRestRef0.getPathVarByIdx();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ParamDef[] paramDefArray0 = new ParamDef[0];
      WebRestRef webRestRef0 = new WebRestRef(class0, (Method) null, paramDefArray0);
      Pattern pattern0 = webRestRef0.getPathPattern();
      assertNull(pattern0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Pattern pattern0 = Pattern.compile("@w}^AA8vM\"k%#RG0MG=", 1);
      WebRestRef webRestRef0 = new WebRestRef(class0, (Method) null, (ParamDef[]) null, "@w}^AA8vM\"k%#RG0MG=", pattern0, (Map<Integer, String>) null);
      Pattern pattern1 = webRestRef0.getPathPattern();
      assertSame(pattern0, pattern1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<String> class0 = String.class;
      WebRestRef webRestRef0 = new WebRestRef(class0, (Method) null, (ParamDef[]) null);
      String string0 = webRestRef0.getPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ParamDef[] paramDefArray0 = new ParamDef[0];
      Pattern pattern0 = Pattern.compile("p&/l]x57~jC4JbWA!|w");
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      WebRestRef webRestRef0 = new WebRestRef(class0, (Method) null, paramDefArray0, "p&/l]x57~jC4JbWA!|w", pattern0, hashMap0);
      String string0 = webRestRef0.getPath();
      assertEquals("p&/l]x57~jC4JbWA!|w", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Pattern pattern0 = Pattern.compile("");
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      WebRestRef webRestRef0 = new WebRestRef(class0, (Method) null, (ParamDef[]) null, "", pattern0, hashMap0);
      String string0 = webRestRef0.getPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ParamDef[] paramDefArray0 = new ParamDef[0];
      WebRestRef webRestRef0 = new WebRestRef(class0, (Method) null, paramDefArray0);
      Map<Integer, String> map0 = webRestRef0.getPathVarByIdx();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Pattern pattern0 = Pattern.compile("");
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      WebRestRef webRestRef0 = new WebRestRef(class0, (Method) null, (ParamDef[]) null, "", pattern0, hashMap0);
      Pattern pattern1 = webRestRef0.getPathPattern();
      assertSame(pattern0, pattern1);
  }
}
