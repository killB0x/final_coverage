/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 03:06:43 GMT 2022
 */

package com.ajjpj.amapper.javabean;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ajjpj.amapper.javabean.SingleParamBeanType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SingleParamBeanType_ESTest extends SingleParamBeanType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SingleParamBeanType<Object, Object> singleParamBeanType0 = new SingleParamBeanType<Object, Object>(class0, class0);
      SingleParamBeanType<Object, Object> singleParamBeanType1 = new SingleParamBeanType<Object, Object>(singleParamBeanType0.paramCls, (Class<Object>) null);
      singleParamBeanType1.hashCode();
      assertFalse(singleParamBeanType0.equals((Object)singleParamBeanType1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SingleParamBeanType<Object, Object> singleParamBeanType0 = new SingleParamBeanType<Object, Object>(class0, (Class<Object>) null);
      // Undeclared exception!
      try { 
        singleParamBeanType0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ajjpj.amapper.javabean.SingleParamBeanType", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SingleParamBeanType<Object, Object> singleParamBeanType0 = new SingleParamBeanType<Object, Object>(class0, class0);
      SingleParamBeanType<Object, Object> singleParamBeanType1 = new SingleParamBeanType<Object, Object>(singleParamBeanType0.paramCls, (Class<Object>) null);
      // Undeclared exception!
      try { 
        singleParamBeanType1.getParamType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ajjpj.amapper.javabean.JavaBeanTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SingleParamBeanType<Object, Object> singleParamBeanType0 = new SingleParamBeanType<Object, Object>(class0, (Class<Object>) null);
      // Undeclared exception!
      try { 
        singleParamBeanType0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ajjpj.amapper.javabean.SingleParamBeanType", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SingleParamBeanType<Object, Object> singleParamBeanType0 = new SingleParamBeanType<Object, Object>(class0, (Class<Object>) null);
      SingleParamBeanType<Object, Object> singleParamBeanType1 = new SingleParamBeanType<Object, Object>(singleParamBeanType0.cls, singleParamBeanType0.cls);
      boolean boolean0 = singleParamBeanType1.equals(singleParamBeanType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SingleParamBeanType<Object, Object> singleParamBeanType0 = new SingleParamBeanType<Object, Object>(class0, class0);
      SingleParamBeanType<Object, Object> singleParamBeanType1 = new SingleParamBeanType<Object, Object>(singleParamBeanType0.paramCls, singleParamBeanType0.cls);
      boolean boolean0 = singleParamBeanType0.equals(singleParamBeanType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SingleParamBeanType<Object, Object> singleParamBeanType0 = new SingleParamBeanType<Object, Object>((Class<Object>) null, class0);
      SingleParamBeanType<Object, Object> singleParamBeanType1 = new SingleParamBeanType<Object, Object>(class0, (Class<Object>) null);
      boolean boolean0 = singleParamBeanType1.equals(singleParamBeanType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SingleParamBeanType<Object, Object> singleParamBeanType0 = new SingleParamBeanType<Object, Object>((Class<Object>) null, class0);
      SingleParamBeanType<Object, Object> singleParamBeanType1 = new SingleParamBeanType<Object, Object>(class0, (Class<Object>) null);
      SingleParamBeanType<Object, Object> singleParamBeanType2 = new SingleParamBeanType<Object, Object>(singleParamBeanType0.paramCls, (Class<Object>) null);
      // Undeclared exception!
      try { 
        singleParamBeanType2.equals(singleParamBeanType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ajjpj.amapper.javabean.SingleParamBeanType", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SingleParamBeanType<Object, Object> singleParamBeanType0 = new SingleParamBeanType<Object, Object>(class0, class0);
      boolean boolean0 = singleParamBeanType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SingleParamBeanType<Object, Object> singleParamBeanType0 = new SingleParamBeanType<Object, Object>(class0, class0);
      boolean boolean0 = singleParamBeanType0.equals(singleParamBeanType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SingleParamBeanType<Object, Object> singleParamBeanType0 = new SingleParamBeanType<Object, Object>(class0, class0);
      singleParamBeanType0.hashCode();
  }
}
