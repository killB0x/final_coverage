/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 02:56:52 GMT 2022
 */

package com.ajjpj.amapper.core.tpe;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ajjpj.amapper.core.tpe.AQualifiedType;
import com.ajjpj.amapper.core.tpe.AQualifier;
import com.ajjpj.amapper.core.tpe.AType;
import com.ajjpj.amapper.javabean.JavaBeanType;
import com.ajjpj.amapper.javabean.SingleParamBeanType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AQualifiedType_ESTest extends AQualifiedType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SingleParamBeanType<Object, Object> singleParamBeanType0 = new SingleParamBeanType<Object, Object>(class0, (Class<Object>) null);
      AQualifiedType aQualifiedType0 = new AQualifiedType(singleParamBeanType0, (AQualifier) null);
      // Undeclared exception!
      try { 
        aQualifiedType0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ajjpj.amapper.javabean.SingleParamBeanType", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SingleParamBeanType<Object, Object> singleParamBeanType0 = new SingleParamBeanType<Object, Object>((Class<Object>) null, class0);
      AQualifiedType aQualifiedType0 = new AQualifiedType(singleParamBeanType0, (AQualifier) null);
      SingleParamBeanType<Object, Object> singleParamBeanType1 = new SingleParamBeanType<Object, Object>((Class<Object>) null, (Class<Object>) null);
      AQualifiedType aQualifiedType1 = new AQualifiedType(singleParamBeanType1, (AQualifier) null);
      // Undeclared exception!
      try { 
        aQualifiedType0.equals(aQualifiedType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ajjpj.amapper.javabean.JavaBeanType", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<AQualifiedType> class0 = AQualifiedType.class;
      JavaBeanType<AQualifiedType> javaBeanType0 = new JavaBeanType<AQualifiedType>(class0);
      AQualifiedType aQualifiedType0 = new AQualifiedType(javaBeanType0, (AQualifier) null);
      aQualifiedType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AQualifiedType aQualifiedType0 = new AQualifiedType((AType) null, (AQualifier) null);
      aQualifiedType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AQualifiedType aQualifiedType0 = new AQualifiedType((AType) null, (AQualifier) null);
      Class<Object> class0 = Object.class;
      SingleParamBeanType<Object, Object> singleParamBeanType0 = new SingleParamBeanType<Object, Object>(class0, class0);
      AQualifiedType aQualifiedType1 = new AQualifiedType(singleParamBeanType0, (AQualifier) null);
      boolean boolean0 = aQualifiedType0.equals(aQualifiedType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<AQualifiedType> class0 = AQualifiedType.class;
      JavaBeanType<AQualifiedType> javaBeanType0 = new JavaBeanType<AQualifiedType>(class0);
      AQualifiedType aQualifiedType0 = new AQualifiedType(javaBeanType0, (AQualifier) null);
      AQualifiedType aQualifiedType1 = new AQualifiedType(javaBeanType0, (AQualifier) null);
      boolean boolean0 = aQualifiedType0.equals(aQualifiedType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AQualifiedType aQualifiedType0 = new AQualifiedType((AType) null, (AQualifier) null);
      Class<Object> class0 = Object.class;
      SingleParamBeanType<Object, Object> singleParamBeanType0 = new SingleParamBeanType<Object, Object>(class0, class0);
      AQualifiedType aQualifiedType1 = new AQualifiedType(singleParamBeanType0, (AQualifier) null);
      boolean boolean0 = aQualifiedType1.equals(aQualifiedType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AQualifiedType aQualifiedType0 = new AQualifiedType((AType) null, (AQualifier) null);
      AQualifiedType aQualifiedType1 = new AQualifiedType((AType) null, (AQualifier) null);
      boolean boolean0 = aQualifiedType1.equals(aQualifiedType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AQualifiedType aQualifiedType0 = new AQualifiedType((AType) null, (AQualifier) null);
      boolean boolean0 = aQualifiedType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AQualifiedType aQualifiedType0 = new AQualifiedType((AType) null, (AQualifier) null);
      boolean boolean0 = aQualifiedType0.equals(aQualifiedType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AQualifiedType aQualifiedType0 = new AQualifiedType((AType) null, (AQualifier) null);
      boolean boolean0 = aQualifiedType0.equals("AQualifiedType{tpe=null, qualifier=null}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AQualifiedType aQualifiedType0 = new AQualifiedType((AType) null, (AQualifier) null);
      String string0 = aQualifiedType0.toString();
      assertEquals("AQualifiedType{tpe=null, qualifier=null}", string0);
  }
}
