/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 03:15:59 GMT 2022
 */

package com.ajjpj.amapper.core.compile;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ajjpj.amapper.core.compile.AInjectedField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AInjectedField_ESTest extends AInjectedField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AInjectedField aInjectedField0 = new AInjectedField((String) null, "shtHJ", (Object) null);
      Object object0 = aInjectedField0.getFieldValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      AInjectedField aInjectedField0 = new AInjectedField("ew<xW", (String) null, object0);
      String string0 = aInjectedField0.getFieldType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      AInjectedField aInjectedField0 = new AInjectedField("", "", object0);
      String string0 = aInjectedField0.getFieldType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AInjectedField aInjectedField0 = new AInjectedField((String) null, "shtHJ", (Object) null);
      String string0 = aInjectedField0.getFieldName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object object0 = new Object();
      AInjectedField aInjectedField0 = new AInjectedField("ew<xW", (String) null, object0);
      String string0 = aInjectedField0.getFieldName();
      assertEquals("ew<xW", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AInjectedField aInjectedField0 = new AInjectedField("com.ajjpj.amapper.core.compile.AInjectedField", "com.ajjpj.amapper.core.compile.AInjectedField", "com.ajjpj.amapper.core.compile.AInjectedField");
      String string0 = aInjectedField0.getFieldType();
      assertEquals("com.ajjpj.amapper.core.compile.AInjectedField", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AInjectedField aInjectedField0 = new AInjectedField("", "", "");
      String string0 = aInjectedField0.getFieldName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AInjectedField aInjectedField0 = new AInjectedField("com.ajjpj.amapper.core.compile.AInjectedField", "com.ajjpj.amapper.core.compile.AInjectedField", "com.ajjpj.amapper.core.compile.AInjectedField");
      Object object0 = aInjectedField0.getFieldValue();
      assertEquals("com.ajjpj.amapper.core.compile.AInjectedField", object0);
  }
}
