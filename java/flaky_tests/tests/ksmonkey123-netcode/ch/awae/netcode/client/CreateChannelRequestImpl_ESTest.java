/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 02:05:20 GMT 2022
 */

package ch.awae.netcode.client;

import org.junit.Test;
import static org.junit.Assert.*;
import ch.awae.netcode.client.ChannelFeatures;
import ch.awae.netcode.client.CreateChannelRequestImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreateChannelRequestImpl_ESTest extends CreateChannelRequestImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ChannelFeatures channelFeatures0 = new ChannelFeatures();
      CreateChannelRequestImpl createChannelRequestImpl0 = new CreateChannelRequestImpl((String) null, channelFeatures0);
      String string0 = createChannelRequestImpl0.getUserId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ChannelFeatures channelFeatures0 = new ChannelFeatures();
      CreateChannelRequestImpl createChannelRequestImpl0 = new CreateChannelRequestImpl("", channelFeatures0);
      String string0 = createChannelRequestImpl0.getUserId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CreateChannelRequestImpl createChannelRequestImpl0 = new CreateChannelRequestImpl("client limit must be at least 2 (or -1 to disable limit)", (ChannelFeatures) null);
      ChannelFeatures channelFeatures0 = createChannelRequestImpl0.getFeatures();
      assertNull(channelFeatures0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ChannelFeatures channelFeatures0 = new ChannelFeatures();
      CreateChannelRequestImpl createChannelRequestImpl0 = new CreateChannelRequestImpl("gJ_[W3=YdFv*Ww", channelFeatures0);
      channelFeatures0.setClientLimit(4151);
      ChannelFeatures channelFeatures1 = createChannelRequestImpl0.getFeatures();
      assertSame(channelFeatures0, channelFeatures1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CreateChannelRequestImpl createChannelRequestImpl0 = new CreateChannelRequestImpl("client limit must be at least 2 (or -1 to disable limit)", (ChannelFeatures) null);
      String string0 = createChannelRequestImpl0.getUserId();
      assertEquals("client limit must be at least 2 (or -1 to disable limit)", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ChannelFeatures channelFeatures0 = new ChannelFeatures();
      CreateChannelRequestImpl createChannelRequestImpl0 = new CreateChannelRequestImpl("", channelFeatures0);
      ChannelFeatures channelFeatures1 = createChannelRequestImpl0.getFeatures();
      assertNull(channelFeatures1.getPassword());
  }
}
