/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 01:56:24 GMT 2022
 */

package ch.awae.netcode.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.awae.netcode.client.ChannelFeatures;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChannelFeatures_ESTest extends ChannelFeatures_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChannelFeatures channelFeatures0 = new ChannelFeatures();
      channelFeatures0.setClientLimit(2553);
      assertEquals(2553, channelFeatures0.getClientLimit());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ChannelFeatures channelFeatures0 = new ChannelFeatures();
      // Undeclared exception!
      try { 
        channelFeatures0.setClientLimit((-955));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // client limit must be at least 2 (or -1 to disable limit)
         //
         verifyException("ch.awae.netcode.client.ChannelFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ChannelFeatures channelFeatures0 = new ChannelFeatures();
      channelFeatures0.setPassword("UG&lKu");
      channelFeatures0.getPassword();
      assertEquals((-1), channelFeatures0.getClientLimit());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChannelFeatures channelFeatures0 = new ChannelFeatures();
      channelFeatures0.setClientLimit(2);
      int int0 = channelFeatures0.getClientLimit();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ChannelFeatures channelFeatures0 = new ChannelFeatures();
      channelFeatures0.setPassword("$Kd>L~BH1*");
      String string0 = channelFeatures0.toString();
      assertEquals("ChannelFeatures{clientLimit=-1, password=*******}", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ChannelFeatures channelFeatures0 = new ChannelFeatures();
      String string0 = channelFeatures0.toString();
      assertEquals("ChannelFeatures{clientLimit=-1, password=null}", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ChannelFeatures channelFeatures0 = new ChannelFeatures();
      channelFeatures0.setClientLimit(2);
      channelFeatures0.copy();
      assertEquals(2, channelFeatures0.getClientLimit());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ChannelFeatures channelFeatures0 = new ChannelFeatures();
      channelFeatures0.setClientLimit((-1));
      assertEquals((-1), channelFeatures0.getClientLimit());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ChannelFeatures channelFeatures0 = new ChannelFeatures();
      channelFeatures0.getPassword();
      assertEquals((-1), channelFeatures0.getClientLimit());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ChannelFeatures channelFeatures0 = new ChannelFeatures();
      int int0 = channelFeatures0.getClientLimit();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ChannelFeatures channelFeatures0 = new ChannelFeatures();
      channelFeatures0.setPassword("");
      channelFeatures0.getPassword();
      assertEquals((-1), channelFeatures0.getClientLimit());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ChannelFeatures channelFeatures0 = new ChannelFeatures();
      ChannelFeatures channelFeatures1 = channelFeatures0.copy();
      assertNotSame(channelFeatures1, channelFeatures0);
      assertEquals((-1), channelFeatures1.getClientLimit());
  }
}
