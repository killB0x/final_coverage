/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 03:37:01 GMT 2022
 */

package com.graphaware.reco.generic.result;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphaware.reco.generic.result.PartialScore;
import com.graphaware.reco.generic.result.Recommendation;
import com.graphaware.reco.generic.result.Score;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Recommendation_ESTest extends Recommendation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Recommendation<Object> recommendation0 = new Recommendation<Object>(object0);
      recommendation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Recommendation<Object> recommendation0 = new Recommendation<Object>(object0);
      Recommendation<Recommendation<Object>> recommendation1 = new Recommendation<Recommendation<Object>>(recommendation0);
      recommendation1.add("00000000-0100-4000-8200-000003000000", 0.0F);
      assertEquals("04000000-0500-4000-8600-000007000000", recommendation1.getUuid());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Recommendation<Object> recommendation0 = new Recommendation<Object>(object0);
      int int0 = recommendation0.compareTo(recommendation0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Recommendation<Object> recommendation0 = new Recommendation<Object>(object0);
      Recommendation<Recommendation<Object>> recommendation1 = new Recommendation<Recommendation<Object>>(recommendation0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      recommendation1.add("|{Y`EEv4BF", 1.0F, (Map<String, Object>) hashMap0);
      Recommendation<Recommendation<Object>> recommendation2 = new Recommendation<Recommendation<Object>>(recommendation0);
      int int0 = recommendation1.compareTo(recommendation2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Recommendation<Object> recommendation0 = new Recommendation<Object>(object0);
      Recommendation<Recommendation<Object>> recommendation1 = new Recommendation<Recommendation<Object>>(recommendation0);
      Recommendation<Recommendation<Object>> recommendation2 = new Recommendation<Recommendation<Object>>(recommendation0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PartialScore partialScore0 = new PartialScore(1195.3F, hashMap0);
      recommendation2.add("com.graphaware.reco.generic.result.Recommendation", partialScore0);
      int int0 = recommendation1.compareTo(recommendation2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Recommendation<String> recommendation0 = new Recommendation<String>("v=6*43wpQkP");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Recommendation<Object> recommendation1 = new Recommendation<Object>(hashMap0);
      Object object0 = recommendation1.getItem();
      hashMap0.put("v=6*43wpQkP", object0);
      // Undeclared exception!
      try { 
        recommendation0.add("v=6*43wpQkP", (-507.0F), (Map<String, Object>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Recommendation<String> recommendation0 = new Recommendation<String>("");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        recommendation0.add("", 0.0F, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have length; it must not be null or empty
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      Recommendation<Object> recommendation0 = new Recommendation<Object>(object0);
      // Undeclared exception!
      try { 
        recommendation0.add((Score) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Recommendation<Recommendation<Object>> recommendation0 = null;
      try {
        recommendation0 = new Recommendation<Recommendation<Object>>((Recommendation<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      Recommendation<Object> recommendation0 = new Recommendation<Object>(object0);
      Recommendation<Object> recommendation1 = new Recommendation<Object>(object0);
      boolean boolean0 = recommendation0.equals(recommendation1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Recommendation<Object> recommendation0 = new Recommendation<Object>(object0);
      Recommendation<Object> recommendation1 = new Recommendation<Object>(recommendation0);
      Object object1 = recommendation1.getItem();
      Recommendation<Recommendation<Object>> recommendation2 = new Recommendation<Recommendation<Object>>(recommendation0);
      boolean boolean0 = recommendation2.equals(object1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Recommendation<Object> recommendation0 = new Recommendation<Object>("");
      boolean boolean0 = recommendation0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      Recommendation<Object> recommendation0 = new Recommendation<Object>(object0);
      boolean boolean0 = recommendation0.equals(recommendation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      Recommendation<Object> recommendation0 = new Recommendation<Object>(object0);
      Object object1 = recommendation0.getItem();
      Recommendation<Recommendation<Object>> recommendation1 = new Recommendation<Recommendation<Object>>(recommendation0);
      boolean boolean0 = recommendation1.equals(object1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      Recommendation<Object> recommendation0 = new Recommendation<Object>(object0);
      Score score0 = recommendation0.getScore();
      recommendation0.add(score0);
      assertEquals("00000000-0100-4000-8200-000003000000", recommendation0.getUuid());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Recommendation<String> recommendation0 = new Recommendation<String>("");
      // Undeclared exception!
      try { 
        recommendation0.add("", 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have length; it must not be null or empty
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Recommendation<String> recommendation0 = new Recommendation<String>("");
      // Undeclared exception!
      try { 
        recommendation0.compareTo((Recommendation<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphaware.reco.generic.result.Recommendation", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Recommendation<Object> recommendation0 = new Recommendation<Object>(", ");
      // Undeclared exception!
      try { 
        recommendation0.add(", ", (PartialScore) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      Recommendation<Object> recommendation0 = new Recommendation<Object>(object0);
      String string0 = recommendation0.getUuid();
      assertEquals("00000000-0100-4000-8200-000003000000", string0);
  }
}
