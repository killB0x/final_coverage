/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 03:33:18 GMT 2022
 */

package com.graphaware.reco.generic.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphaware.reco.generic.config.KeyValueConfig;
import com.graphaware.reco.generic.web.KeyValueConfigParser;
import java.util.Map;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KeyValueConfigParser_ESTest extends KeyValueConfigParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KeyValueConfigParser keyValueConfigParser0 = new KeyValueConfigParser("B,g8.T");
      KeyValueConfig keyValueConfig0 = keyValueConfigParser0.produceConfig(583, (long) 1, "B,g8.T");
      assertEquals(583, keyValueConfig0.limit());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        KeyValueConfigParser.produceConfigMap("Z_H!dpso;PI(-jGK.%O", "Z_H!dpso;PI(-jGK.%O");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 19
         // Z_H!dpso;PI(-jGK.%O
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        KeyValueConfigParser.produceConfigMap("com.graphaware.reco.generic.web.KeyValueConfigParser", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        KeyValueConfigParser.produceConfigMap("^0iw?H", "^0iw?H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Config must contain an even number of tokens separated by ^0iw?H
         //
         verifyException("com.graphaware.reco.generic.web.KeyValueConfigParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KeyValueConfigParser keyValueConfigParser0 = new KeyValueConfigParser("5#(I>D");
      // Undeclared exception!
      try { 
        keyValueConfigParser0.produceConfig(276, "5#(I>D");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 6
         // 5#(I>D
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KeyValueConfigParser keyValueConfigParser0 = new KeyValueConfigParser("!,=[d)8^");
      // Undeclared exception!
      try { 
        keyValueConfigParser0.produceConfig(6, (long) 6, "!,=[d)8^");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 7
         // !,=[d)8^
         //        ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KeyValueConfigParser keyValueConfigParser0 = null;
      try {
        keyValueConfigParser0 = new KeyValueConfigParser("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have length; it must not be null or empty
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Map<String, Object> map0 = KeyValueConfigParser.produceConfigMap("GT=RZ+", "GT=RZ+");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KeyValueConfigParser keyValueConfigParser0 = new KeyValueConfigParser("WyAR^");
      // Undeclared exception!
      try { 
        keyValueConfigParser0.produceConfig((-141), "WyAR^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Config must contain an even number of tokens separated by WyAR^
         //
         verifyException("com.graphaware.reco.generic.web.KeyValueConfigParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Map<String, Object> map0 = KeyValueConfigParser.produceConfigMap((String) null, (String) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KeyValueConfigParser keyValueConfigParser0 = new KeyValueConfigParser("d");
      // Undeclared exception!
      try { 
        keyValueConfigParser0.produceConfig(0, (long) 0, "d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this expression must be true
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KeyValueConfigParser keyValueConfigParser0 = new KeyValueConfigParser("aL>SfT|G@ga\u0006");
      KeyValueConfig keyValueConfig0 = keyValueConfigParser0.produceConfig(1908, "");
      assertEquals(1908, keyValueConfig0.limit());
  }
}
