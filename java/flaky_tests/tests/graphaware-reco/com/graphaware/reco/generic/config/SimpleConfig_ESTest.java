/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 03:21:53 GMT 2022
 */

package com.graphaware.reco.generic.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphaware.reco.generic.config.Config;
import com.graphaware.reco.generic.config.MapBasedConfig;
import com.graphaware.reco.generic.config.SimpleConfig;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleConfig_ESTest extends SimpleConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleConfig simpleConfig0 = new SimpleConfig(775, 775);
      SimpleConfig simpleConfig1 = new SimpleConfig(775);
      boolean boolean0 = simpleConfig0.equals(simpleConfig1);
      assertFalse(boolean0);
      assertEquals(9223372036854775807L, simpleConfig1.maxTime());
      assertFalse(simpleConfig1.equals((Object)simpleConfig0));
      assertEquals(775, simpleConfig1.limit());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleConfig simpleConfig0 = (SimpleConfig)Config.UNLIMITED;
      SimpleConfig simpleConfig1 = new SimpleConfig(953);
      boolean boolean0 = simpleConfig0.equals(simpleConfig1);
      assertEquals(953, simpleConfig1.limit());
      assertFalse(boolean0);
      assertFalse(simpleConfig1.equals((Object)simpleConfig0));
      assertEquals(9223372036854775807L, simpleConfig1.maxTime());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleConfig simpleConfig0 = null;
      try {
        simpleConfig0 = new SimpleConfig(1, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this expression must be true
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleConfig simpleConfig0 = null;
      try {
        simpleConfig0 = new SimpleConfig((-2510));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this expression must be true
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(846, 846, hashMap0);
      hashMap0.put("", mapBasedConfig0);
      // Undeclared exception!
      try { 
        mapBasedConfig0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleConfig simpleConfig0 = (SimpleConfig)Config.UNLIMITED;
      SimpleConfig simpleConfig1 = new SimpleConfig(Integer.MAX_VALUE);
      boolean boolean0 = simpleConfig0.equals(simpleConfig1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleConfig simpleConfig0 = (SimpleConfig)Config.UNLIMITED;
      SimpleConfig simpleConfig1 = new SimpleConfig(775, 775);
      boolean boolean0 = simpleConfig1.equals(simpleConfig0);
      assertEquals(775L, simpleConfig1.maxTime());
      assertFalse(boolean0);
      assertEquals(775, simpleConfig1.limit());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleConfig simpleConfig0 = new SimpleConfig(413);
      SimpleConfig simpleConfig1 = new SimpleConfig(413, 1L);
      boolean boolean0 = simpleConfig0.equals(simpleConfig1);
      assertEquals(1L, simpleConfig1.maxTime());
      assertFalse(boolean0);
      assertEquals(413, simpleConfig1.limit());
      assertFalse(simpleConfig1.equals((Object)simpleConfig0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleConfig simpleConfig0 = (SimpleConfig)Config.UNLIMITED;
      boolean boolean0 = simpleConfig0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleConfig simpleConfig0 = (SimpleConfig)Config.UNLIMITED;
      boolean boolean0 = simpleConfig0.equals(simpleConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleConfig simpleConfig0 = null;
      try {
        simpleConfig0 = new SimpleConfig(2532, (-193L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this expression must be true
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleConfig simpleConfig0 = null;
      try {
        simpleConfig0 = new SimpleConfig(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this expression must be true
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleConfig simpleConfig0 = new SimpleConfig(413);
      Object object0 = new Object();
      boolean boolean0 = simpleConfig0.equals(object0);
      assertFalse(boolean0);
      assertEquals(9223372036854775807L, simpleConfig0.maxTime());
      assertEquals(413, simpleConfig0.limit());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(805, 805, hashMap0);
      long long0 = mapBasedConfig0.maxTime();
      assertEquals(805L, long0);
      assertEquals(805, mapBasedConfig0.limit());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(805, 805, hashMap0);
      int int0 = mapBasedConfig0.limit();
      assertEquals(805, int0);
      assertEquals(805L, mapBasedConfig0.maxTime());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleConfig simpleConfig0 = (SimpleConfig)Config.UNLIMITED;
      simpleConfig0.hashCode();
  }
}
