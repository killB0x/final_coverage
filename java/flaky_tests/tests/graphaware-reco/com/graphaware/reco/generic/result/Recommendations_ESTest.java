/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 03:35:43 GMT 2022
 */

package com.graphaware.reco.generic.result;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphaware.reco.generic.result.PartialScore;
import com.graphaware.reco.generic.result.Recommendation;
import com.graphaware.reco.generic.result.Recommendations;
import com.graphaware.reco.generic.result.Score;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Recommendations_ESTest extends Recommendations_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Recommendations<Object> recommendations0 = new Recommendations<Object>();
      Object object0 = new Object();
      recommendations0.getOrCreate(object0);
      boolean boolean0 = recommendations0.hasEnoughResults(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Recommendations<Recommendation<Object>> recommendations0 = new Recommendations<Recommendation<Object>>();
      Recommendations<Object> recommendations1 = new Recommendations<Object>();
      Recommendation<Object> recommendation0 = recommendations1.getOrCreate(recommendations0);
      recommendations0.remove(recommendation0);
      assertEquals("00000000-0100-4000-8200-000003000000", recommendation0.getUuid());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Recommendations<Object> recommendations0 = new Recommendations<Object>();
      Object object0 = new Object();
      Recommendation<Object> recommendation0 = recommendations0.getOrCreate(object0);
      recommendations0.add((Object) recommendation0, "/wiuaQ{1:[g=cW{9.Q", (float) 31);
      assertEquals("00000000-0100-4000-8200-000003000000", recommendation0.getUuid());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Recommendations<Recommendation<Object>> recommendations0 = new Recommendations<Recommendation<Object>>();
      Recommendations<Object> recommendations1 = new Recommendations<Object>();
      Recommendation<Object> recommendation0 = recommendations1.getOrCreate(recommendations0);
      Score score0 = recommendation0.getScore();
      recommendations0.add(recommendation0, score0);
      assertEquals("00000000-0100-4000-8200-000003000000", recommendation0.getUuid());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Recommendations<Object> recommendations0 = new Recommendations<Object>();
      Object object0 = new Object();
      recommendations0.getOrCreate(object0);
      int int0 = recommendations0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Recommendations<Recommendation<Object>> recommendations0 = new Recommendations<Recommendation<Object>>();
      Recommendations<Object> recommendations1 = new Recommendations<Object>();
      recommendations1.getOrCreate(recommendations0);
      Set<Recommendation<Object>> set0 = recommendations1.get();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Recommendations<Recommendation<String>> recommendations0 = new Recommendations<Recommendation<String>>();
      // Undeclared exception!
      try { 
        recommendations0.merge((Recommendations<Recommendation<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphaware.reco.generic.result.Recommendations", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Recommendations<Object> recommendations0 = new Recommendations<Object>();
      // Undeclared exception!
      try { 
        recommendations0.getOrCreate((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Recommendations<Object> recommendations0 = new Recommendations<Object>();
      List<Recommendation<Object>> list0 = recommendations0.get(0);
      Recommendation<Object> recommendation0 = recommendations0.getOrCreate(list0);
      PartialScore partialScore0 = new PartialScore();
      // Undeclared exception!
      try { 
        recommendations0.add((Object) recommendation0, (String) null, partialScore0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Recommendations<String> recommendations0 = new Recommendations<String>();
      // Undeclared exception!
      try { 
        recommendations0.add("", "", (-722.9994F), (Map<String, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have length; it must not be null or empty
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Recommendations<Object> recommendations0 = new Recommendations<Object>();
      Object object0 = new Object();
      recommendations0.getOrCreate(object0);
      Recommendation<Object> recommendation0 = recommendations0.getOrCreate(object0);
      assertEquals("00000000-0100-4000-8200-000003000000", recommendation0.getUuid());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Recommendations<Recommendation<Object>> recommendations0 = new Recommendations<Recommendation<Object>>();
      Recommendations<Object> recommendations1 = new Recommendations<Object>();
      Recommendation<Object> recommendation0 = recommendations1.getOrCreate(recommendations0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      recommendations0.add(recommendation0, "tg", 174.0F, (Map<String, Object>) hashMap0);
      assertEquals("00000000-0100-4000-8200-000003000000", recommendation0.getUuid());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Recommendations<Object> recommendations0 = new Recommendations<Object>();
      boolean boolean0 = recommendations0.hasEnoughResults((-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Recommendations<Object> recommendations0 = new Recommendations<Object>();
      boolean boolean0 = recommendations0.hasEnoughResults(1417);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Recommendations<Object> recommendations0 = new Recommendations<Object>();
      Object object0 = new Object();
      recommendations0.getOrCreate(object0);
      Recommendations<Object> recommendations1 = recommendations0.merge(recommendations0);
      assertSame(recommendations0, recommendations1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Recommendations<Object> recommendations0 = new Recommendations<Object>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        recommendations0.get(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Item java.lang.Object@4973a501 is not amongst the recommendations
         //
         verifyException("com.graphaware.reco.generic.result.Recommendations", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Recommendations<String> recommendations0 = new Recommendations<String>();
      recommendations0.getOrCreate("");
      Recommendation<String> recommendation0 = recommendations0.get("");
      assertEquals("00000000-0100-4000-8200-000003000000", recommendation0.getUuid());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Recommendations<Object> recommendations0 = new Recommendations<Object>();
      Score score0 = new Score();
      // Undeclared exception!
      try { 
        recommendations0.add((Object) null, score0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Recommendations<Object> recommendations0 = new Recommendations<Object>();
      // Undeclared exception!
      try { 
        recommendations0.get((-2351));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-2351)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Recommendations<String> recommendations0 = new Recommendations<String>();
      PartialScore partialScore0 = new PartialScore();
      recommendations0.add("3,SF$V;", "3,SF$V;", partialScore0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Recommendations<String> recommendations0 = new Recommendations<String>();
      int int0 = recommendations0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Recommendations<Object> recommendations0 = new Recommendations<Object>();
      // Undeclared exception!
      try { 
        recommendations0.add((Object) null, (String) null, 1182.1093F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Recommendations<Object> recommendations0 = new Recommendations<Object>();
      // Undeclared exception!
      try { 
        recommendations0.remove((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Recommendations<Object> recommendations0 = new Recommendations<Object>();
      Set<Recommendation<Object>> set0 = recommendations0.get();
      assertEquals(0, set0.size());
  }
}
