/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 03:39:05 GMT 2022
 */

package com.graphaware.reco.generic.context;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphaware.reco.generic.config.Config;
import com.graphaware.reco.generic.config.MapBasedConfig;
import com.graphaware.reco.generic.config.SimpleConfig;
import com.graphaware.reco.generic.context.SimpleContext;
import com.graphaware.reco.generic.stats.Statistics;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleContext_ESTest extends SimpleContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1, hashMap0);
      SimpleContext<MapBasedConfig, String> simpleContext0 = new SimpleContext<MapBasedConfig, String>("", mapBasedConfig0);
      Statistics statistics0 = simpleContext0.createStatistics("");
      assertNotNull(statistics0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1723, hashMap0);
      SimpleContext<MapBasedConfig, MapBasedConfig> simpleContext0 = new SimpleContext<MapBasedConfig, MapBasedConfig>(mapBasedConfig0, mapBasedConfig0);
      boolean boolean0 = simpleContext0.allow(mapBasedConfig0, "JugiC:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleContext<Object, Object> simpleContext0 = null;
      try {
        simpleContext0 = new SimpleContext<Object, Object>((Object) null, (Config) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      SimpleConfig simpleConfig0 = (SimpleConfig)Config.UNLIMITED;
      SimpleContext<MapBasedConfig, Object> simpleContext0 = new SimpleContext<MapBasedConfig, Object>(object0, simpleConfig0);
      boolean boolean0 = simpleContext0.timeLeft();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      SimpleConfig simpleConfig0 = (SimpleConfig)Config.UNLIMITED;
      SimpleContext<MapBasedConfig, Object> simpleContext0 = new SimpleContext<MapBasedConfig, Object>(object0, simpleConfig0);
      Class<MapBasedConfig> class0 = MapBasedConfig.class;
      // Undeclared exception!
      try { 
        simpleContext0.config(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class com.graphaware.reco.generic.config.SimpleConfig is not assignable from class com.graphaware.reco.generic.config.MapBasedConfig
         //
         verifyException("com.graphaware.reco.generic.context.SimpleContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(Integer.MAX_VALUE, Integer.MAX_VALUE, hashMap0);
      SimpleContext<MapBasedConfig, MapBasedConfig> simpleContext0 = new SimpleContext<MapBasedConfig, MapBasedConfig>(mapBasedConfig0, mapBasedConfig0);
      Class<MapBasedConfig> class0 = MapBasedConfig.class;
      MapBasedConfig mapBasedConfig1 = simpleContext0.config(class0);
      assertSame(mapBasedConfig1, mapBasedConfig0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(Integer.MAX_VALUE, Integer.MAX_VALUE, hashMap0);
      SimpleContext<MapBasedConfig, MapBasedConfig> simpleContext0 = new SimpleContext<MapBasedConfig, MapBasedConfig>(mapBasedConfig0, mapBasedConfig0);
      Config config0 = simpleContext0.config();
      assertSame(mapBasedConfig0, config0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      SimpleConfig simpleConfig0 = (SimpleConfig)Config.UNLIMITED;
      SimpleContext<Object, Object> simpleContext0 = new SimpleContext<Object, Object>(hashMap0, simpleConfig0);
      HashMap hashMap1 = (HashMap)simpleContext0.input();
      assertTrue(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1796, hashMap0);
      SimpleContext<MapBasedConfig, MapBasedConfig> simpleContext0 = new SimpleContext<MapBasedConfig, MapBasedConfig>(mapBasedConfig0, mapBasedConfig0);
      // Undeclared exception!
      try { 
        simpleContext0.disallow(mapBasedConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SimpleContext does not support blacklisting items. Please use FilteringContext
         //
         verifyException("com.graphaware.reco.generic.context.SimpleContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(31, hashMap0);
      SimpleContext<MapBasedConfig, Object> simpleContext0 = new SimpleContext<MapBasedConfig, Object>(mapBasedConfig0, mapBasedConfig0);
      Statistics statistics0 = simpleContext0.statistics();
      assertNotNull(statistics0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(31, hashMap0);
      SimpleContext<MapBasedConfig, MapBasedConfig> simpleContext0 = new SimpleContext<MapBasedConfig, MapBasedConfig>(mapBasedConfig0, mapBasedConfig0);
      // Undeclared exception!
      try { 
        simpleContext0.allow((MapBasedConfig) null, "6^Vf+M@:nkbpf6N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }
}
