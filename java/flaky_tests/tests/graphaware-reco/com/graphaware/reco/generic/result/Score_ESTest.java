/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 03:25:39 GMT 2022
 */

package com.graphaware.reco.generic.result;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphaware.reco.generic.result.PartialScore;
import com.graphaware.reco.generic.result.Score;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Score_ESTest extends Score_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Score score0 = new Score();
      PartialScore partialScore0 = new PartialScore();
      HashMap<String, Score> hashMap0 = new HashMap<String, Score>(0);
      hashMap0.clear();
      partialScore0.setNewValue((-1.0F), hashMap0);
      HashMap<String, Score> hashMap1 = new HashMap<String, Score>();
      hashMap1.put("gXcMA q*rjb", score0);
      partialScore0.setNewValue((-593.975F), hashMap1);
      score0.add("gXcMA q*rjb", partialScore0);
      String string0 = "com.graphaware.reco.generic.result.Reason";
      float float0 = 1.0F;
      PartialScore partialScore1 = new PartialScore(1.0F);
      score0.toString();
      partialScore1.getValue();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      float float1 = 0.0F;
      String string1 = "";
      Object object0 = new Object();
      hashMap2.put(string1, object0);
      partialScore1.add(float1, (Map<String, ?>) hashMap2);
      partialScore1.add(float0, (Map<String, ?>) hashMap2);
      partialScore1.add(float0);
      score0.add(string0, partialScore1);
      String string2 = ", ";
      score0.get(string2);
      String string3 = "{).OxgI|c(c`aylI3eS";
      String string4 = ";CQ@b]2,";
      float float2 = 0.0F;
      score0.add(string4, float2, (Map<String, Object>) hashMap2);
      score0.add(string3, float0);
      score0.getScoreParts();
      String string5 = score0.toString();
      score0.toString();
      score0.toString();
      score0.get(string5);
      score0.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Score score0 = new Score();
      float float0 = score0.getTotalScore();
      assertEquals(0.0F, float0, 0.01F);
      
      Score score1 = new Score();
      score0.compareTo(score0);
      score0.compareTo(score1);
      score0.get("`DV8~C/]6sk.");
      score1.add("<5ois!{", (-1.0F));
      score1.get("<5ois!{");
      score1.toString();
      score1.add("8/K", 320.3038F);
      score1.getScoreParts();
      score1.add("8/K", (float) 0);
      // Undeclared exception!
      try { 
        score1.compareTo((Score) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphaware.reco.generic.result.Score", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Score score0 = new Score();
      // Undeclared exception!
      try { 
        score0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Score score0 = new Score();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      score0.add("om", 0.0F, (Map<String, Object>) hashMap0);
      Score score1 = new Score();
      PartialScore partialScore0 = new PartialScore(0.0F);
      partialScore0.setNewValue((-1.0F), hashMap0);
      partialScore0.setNewValue(0.0F, hashMap0);
      score0.add("om", partialScore0);
      score1.getScoreParts();
      score0.add(score1);
      score1.compareTo(score0);
      score1.getTotalScore();
      PartialScore partialScore1 = new PartialScore(0.0F, hashMap0);
      // Undeclared exception!
      try { 
        score0.add((String) null, partialScore1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Score score0 = new Score();
      // Undeclared exception!
      try { 
        score0.add((Score) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Score score0 = new Score();
      score0.add(":", (-2015.043F));
      float float0 = score0.get(":");
      assertEquals((-2015.043F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Score score0 = new Score();
      score0.add("x(^gx7Hn<G", 691.0F);
      score0.add(", ", 923.0385F);
      score0.get(", ");
      Score score1 = new Score();
      score0.getTotalScore();
      score1.getScoreParts();
      score1.getScoreParts();
      score1.getScoreParts();
      score0.add(score1);
      score1.getScoreParts();
      score1.getScoreParts();
      score0.getScoreParts();
      score0.add("x(^gx7Hn<G", 1614.0386F);
      PartialScore partialScore0 = new PartialScore();
      // Undeclared exception!
      try { 
        score0.add("", partialScore0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have length; it must not be null or empty
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Score score0 = new Score();
      // Undeclared exception!
      try { 
        score0.compareTo((Score) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphaware.reco.generic.result.Score", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Score score0 = new Score();
      // Undeclared exception!
      try { 
        score0.add((String) null, (-2027.094F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Score score0 = new Score();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        score0.add("", (-1.0F), (Map<String, Object>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have length; it must not be null or empty
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Score score0 = new Score();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PartialScore partialScore0 = new PartialScore(0.0F, hashMap0);
      score0.add(",e}n=Sh", partialScore0);
      Score score1 = new Score();
      score1.getScoreParts();
      score0.add(score1);
      String string0 = "5qzJ";
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap1.put(",e}n=Sh", object0);
      score0.add(",e}n=Sh", (-197.3F));
      hashMap1.put(",e}n=Sh", ",e}n=Sh");
      score0.add("5qzJ", (-197.3F), (Map<String, Object>) hashMap1);
      score0.getTotalScore();
      score0.getTotalScore();
      // Undeclared exception!
      try { 
        score0.add("", (-394.6F), (Map<String, Object>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have length; it must not be null or empty
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Score score0 = new Score();
      Score score1 = new Score();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      score1.add("F7_KvhyCk5I", 1.0F, (Map<String, Object>) hashMap0);
      int int0 = score0.compareTo(score1);
      assertEquals((-1), int0);
      
      String string0 = score1.toString();
      assertEquals("{total:1.0, F7_KvhyCk5I:{value:1.0, {value:1.0}}}", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Score score0 = new Score();
      String string0 = score0.toString();
      assertEquals("{total:0.0}", string0);
      
      score0.getScoreParts();
      score0.getTotalScore();
      score0.getTotalScore();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put("{total:0.0}", object0);
      Score score1 = new Score();
      score0.compareTo(score1);
      Object object1 = new Object();
      hashMap0.put("6^(IqZni?J", object1);
      score0.add("6^(IqZni?J", 1.0F, (Map<String, Object>) hashMap0);
      score0.toString();
      score0.getTotalScore();
      score0.toString();
      Map<String, PartialScore> map0 = score0.getScoreParts();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Score score0 = new Score();
      PartialScore partialScore0 = new PartialScore();
      score0.add("}{{>+o&Lz)DsC/", partialScore0);
      score0.add("}{{>+o&Lz)DsC/", partialScore0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Score score0 = new Score();
      score0.add("W9BZy]qosGW{a-", (-2194.0F));
      String string0 = score0.toString();
      assertEquals("{total:-2194.0, W9BZy]qosGW{a-:-2194.0}", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Score score0 = new Score();
      score0.getScoreParts();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      score0.add("PuQ", 1.0F, (Map<String, Object>) hashMap0);
      Score score1 = new Score();
      score0.add("5bO%w", 1.0F);
      score0.compareTo(score1);
      score1.add("5bO%w", (float) 1, (Map<String, Object>) hashMap0);
      score1.add("}5KEBv4C>KR", 955.8243F);
      score0.getScoreParts();
      Score score2 = new Score();
      score0.compareTo(score2);
      score0.add(score2);
      score1.add(score0);
      score1.add("PuQ", 0.0F);
      assertFalse(score1.equals((Object)score2));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Score score0 = new Score();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      score0.add("6w3~BKkdvM0(72XxV", 730.06F, (Map<String, Object>) hashMap0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Score score0 = new Score();
      PartialScore partialScore0 = new PartialScore();
      score0.add(":", partialScore0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Score score0 = new Score();
      float float0 = score0.get("");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Score score0 = new Score();
      Score score1 = new Score();
      score0.compareTo(score1);
      score0.get("P/p~>L+SMjUH");
      score0.getTotalScore();
      score0.toString();
      score0.add("d5", 0.0F);
      score1.get("com.graphaware.reco.generic.result.Reason");
      Score score2 = new Score();
      score1.add(score2);
      score1.add("value", 1.0F);
      score0.add(score1);
      assertFalse(score0.equals((Object)score2));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Score score0 = new Score();
      score0.add(score0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Score score0 = new Score();
      Score score1 = new Score();
      PartialScore partialScore0 = new PartialScore();
      score1.add("com.graphaware.reco.generic.util.Assert", partialScore0);
      score0.add(score1);
      float float0 = score0.get("=sW!'");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Score score0 = new Score();
      PartialScore partialScore0 = new PartialScore();
      // Undeclared exception!
      try { 
        score0.add("", partialScore0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have length; it must not be null or empty
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Score score0 = new Score();
      Score score1 = new Score();
      score0.compareTo(score1);
      PartialScore partialScore0 = new PartialScore();
      // Undeclared exception!
      try { 
        score0.add("", partialScore0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have length; it must not be null or empty
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Score score0 = new Score();
      Score score1 = new Score();
      score0.compareTo(score1);
      Map<String, PartialScore> map0 = score0.getScoreParts();
      assertEquals(0, map0.size());
  }
}
