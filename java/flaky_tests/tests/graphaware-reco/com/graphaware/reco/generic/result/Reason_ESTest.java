/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 03:23:40 GMT 2022
 */

package com.graphaware.reco.generic.result;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphaware.reco.generic.result.Reason;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Reason_ESTest extends Reason_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("|e2e", "");
      Reason reason0 = new Reason(1.0F, hashMap0);
      reason0.hashCode();
      assertEquals(1.0F, reason0.getValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Reason reason0 = new Reason((-4049.0525F), hashMap0);
      reason0.hashCode();
      assertEquals((-4049.0525F), reason0.getValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Reason> hashMap1 = new HashMap<String, Reason>();
      Reason reason0 = new Reason(0.0F, hashMap0);
      Reason reason1 = new Reason(1.0F, hashMap1);
      boolean boolean0 = reason1.equals(reason0);
      assertEquals(1.0F, reason1.getValue(), 0.01F);
      assertFalse(boolean0);
      assertFalse(reason0.equals((Object)reason1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Reason reason0 = new Reason(0.0F, hashMap0);
      float float0 = reason0.getValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Reason> hashMap0 = new HashMap<String, Reason>();
      Reason reason0 = new Reason(1.0F, hashMap0);
      float float0 = reason0.getValue();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Reason reason0 = null;
      try {
        reason0 = new Reason((-1.0F), (Map<String, ?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Reason> hashMap0 = new HashMap<String, Reason>();
      Reason reason0 = new Reason(0.0F, hashMap0);
      reason0.hashCode();
      assertEquals(0.0F, reason0.getValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Reason> hashMap0 = new HashMap<String, Reason>();
      Reason reason0 = new Reason(1.0F, hashMap0);
      hashMap0.put("c[fLx:LqI&WQ6(j", reason0);
      Reason reason1 = new Reason(1.0F, hashMap0);
      boolean boolean0 = reason0.equals(reason1);
      assertEquals(1.0F, reason1.getValue(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Reason> hashMap1 = new HashMap<String, Reason>();
      Reason reason0 = new Reason(0.0F, hashMap0);
      hashMap1.put("", reason0);
      Reason reason1 = hashMap1.put("", reason0);
      Reason reason2 = new Reason(1.0F, hashMap1);
      boolean boolean0 = reason1.equals(reason2);
      assertEquals(1.0F, reason2.getValue(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Reason reason0 = new Reason((-1964.88F), hashMap0);
      Reason reason1 = new Reason((-1964.88F), hashMap0);
      boolean boolean0 = reason0.equals(reason1);
      assertTrue(boolean0);
      assertEquals((-1964.88F), reason1.getValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Reason reason0 = new Reason((-1964.88F), hashMap0);
      Object object0 = new Object();
      boolean boolean0 = reason0.equals(object0);
      assertEquals((-1964.88F), reason0.getValue(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Reason> hashMap0 = new HashMap<String, Reason>();
      Reason reason0 = new Reason((-24.428314F), hashMap0);
      boolean boolean0 = reason0.equals(reason0);
      assertEquals((-24.428314F), reason0.getValue(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Reason reason0 = new Reason((-1964.88F), hashMap0);
      Object object0 = hashMap0.put(", ", reason0);
      boolean boolean0 = reason0.equals(object0);
      assertFalse(boolean0);
      assertEquals((-1964.88F), reason0.getValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      Reason reason0 = new Reason((-1202.681F), hashMap0);
      String string0 = reason0.toString();
      assertEquals("{value:-1202.681, :}", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Reason reason0 = new Reason((-1964.88F), hashMap0);
      float float0 = reason0.getValue();
      assertEquals((-1964.88F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Reason reason0 = new Reason(0.8098738F, hashMap0);
      reason0.getDetails();
      assertEquals(0.8098738F, reason0.getValue(), 0.01F);
  }
}
