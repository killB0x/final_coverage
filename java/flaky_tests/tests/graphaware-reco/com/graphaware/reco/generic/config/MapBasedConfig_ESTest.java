/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 03:19:59 GMT 2022
 */

package com.graphaware.reco.generic.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphaware.reco.generic.config.MapBasedConfig;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapBasedConfig_ESTest extends MapBasedConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put((String) null, (Object) null);
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1, hashMap0);
      mapBasedConfig0.get((String) null);
      Class<String> class0 = String.class;
      mapBasedConfig0.get("zf9\"{v", "Config does not contain key ", class0);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        mapBasedConfig0.get("[Assertion failed] - this expression must be true", class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Config does not contain key [Assertion failed] - this expression must be true
         //
         verifyException("com.graphaware.reco.generic.config.MapBasedConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put((String) null, (Object) null);
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(500, hashMap0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        mapBasedConfig0.get((String) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphaware.reco.generic.config.MapBasedConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = "com.graphaware.reco.generic.util.Assert";
      hashMap0.put("com.graphaware.reco.generic.util.Assert", "com.graphaware.reco.generic.util.Assert");
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1, 626L, hashMap0);
      Class<String> class0 = String.class;
      hashMap0.put("com.graphaware.reco.generic.util.Assert", class0);
      // Undeclared exception!
      try { 
        mapBasedConfig0.get("com.graphaware.reco.generic.util.Assert", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.Class is not assignable from class java.lang.String
         //
         verifyException("com.graphaware.reco.generic.config.MapBasedConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1070, hashMap0);
      hashMap0.put("23N`", mapBasedConfig0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        mapBasedConfig0.get("23N`", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class com.graphaware.reco.generic.config.MapBasedConfig is not assignable from class java.lang.String
         //
         verifyException("com.graphaware.reco.generic.config.MapBasedConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1068, hashMap0);
      assertEquals(1068, mapBasedConfig0.limit());
      
      Object object0 = new Object();
      hashMap0.remove(object0);
      hashMap0.put(")s1", ")s1");
      mapBasedConfig0.hashCode();
      MapBasedConfig mapBasedConfig1 = new MapBasedConfig(1068, 1L, hashMap0);
      Class<Object> class0 = Object.class;
      mapBasedConfig1.get(")s1", class0);
      mapBasedConfig1.hashCode();
      boolean boolean0 = mapBasedConfig0.equals(mapBasedConfig1);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      Object object2 = new Object();
      Class<Object> class1 = Object.class;
      mapBasedConfig1.get(")s1", object2, class1);
      Class<String> class2 = String.class;
      mapBasedConfig0.get("[Assertion failed] - this argument is required; it must not be null", "z&CdKxA;fn9;", class2);
      Class<Object> class3 = Object.class;
      // Undeclared exception!
      try { 
        mapBasedConfig1.get("7&A-,[M!zU|9", class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Config does not contain key 7&A-,[M!zU|9
         //
         verifyException("com.graphaware.reco.generic.config.MapBasedConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put("2*", object0);
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(Integer.MAX_VALUE, hashMap0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        mapBasedConfig0.get("2*", "2*", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.Object is not assignable from class java.lang.String
         //
         verifyException("com.graphaware.reco.generic.config.MapBasedConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 1068;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1068, hashMap0);
      Object object0 = new Object();
      hashMap0.remove(object0);
      String string0 = ")s1";
      Function<String, String> function0 = Function.identity();
      Function<String, String> function1 = function0.compose((Function<? super String, ? extends String>) function0);
      Function<String, String> function2 = function0.andThen((Function<? super String, ? extends String>) function1);
      hashMap0.computeIfAbsent(")s1", function2);
      Class<MapBasedConfig> class0 = MapBasedConfig.class;
      // Undeclared exception!
      try { 
        mapBasedConfig0.get(")s1", (MapBasedConfig) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.String is not assignable from class com.graphaware.reco.generic.config.MapBasedConfig
         //
         verifyException("com.graphaware.reco.generic.config.MapBasedConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 1068;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1068, hashMap0);
      Object object0 = new Object();
      hashMap0.put("", mapBasedConfig0);
      hashMap0.remove(object0);
      String string0 = ")s1";
      hashMap0.put(")s1", ")s1");
      mapBasedConfig0.hashCode();
      long long0 = 1L;
      MapBasedConfig mapBasedConfig1 = new MapBasedConfig(int0, long0, hashMap0);
      Class<Object> class0 = Object.class;
      mapBasedConfig1.get(string0, class0);
      mapBasedConfig1.hashCode();
      mapBasedConfig0.equals(mapBasedConfig1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("com.graphaware.reco.generic.util.Assert", "com.graphaware.reco.generic.util.Assert");
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1, 1, hashMap0);
      Class<Object> class0 = Object.class;
      Object object0 = mapBasedConfig0.get("com.graphaware.reco.generic.util.Assert", class0);
      assertEquals("com.graphaware.reco.generic.util.Assert", object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("com.graphaware.reco.generic.util.Assert", "com.graphaware.reco.generic.util.Assert");
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1, 1, hashMap0);
      Object object0 = mapBasedConfig0.get("com.graphaware.reco.generic.util.Assert", (Object) mapBasedConfig0);
      assertEquals("com.graphaware.reco.generic.util.Assert", object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("com.graphaware.reco.generic.util.Assert", "com.graphaware.reco.generic.util.Assert");
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1, 1, hashMap0);
      Object object0 = mapBasedConfig0.get("com.graphaware.reco.generic.util.Assert");
      assertEquals("com.graphaware.reco.generic.util.Assert", object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1068, hashMap0);
      hashMap0.put(")s1", ")s1");
      mapBasedConfig0.hashCode();
      MapBasedConfig mapBasedConfig1 = new MapBasedConfig(1068, 1L, hashMap0);
      mapBasedConfig1.hashCode();
      boolean boolean0 = mapBasedConfig0.equals(mapBasedConfig1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1068, hashMap0);
      hashMap0.put(")s1", ")s1");
      mapBasedConfig0.hashCode();
      MapBasedConfig mapBasedConfig1 = new MapBasedConfig(1068, 1068, hashMap0);
      mapBasedConfig1.hashCode();
      boolean boolean0 = mapBasedConfig0.equals(mapBasedConfig1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(403, hashMap0);
      boolean boolean0 = mapBasedConfig0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1068, hashMap0);
      MapBasedConfig mapBasedConfig1 = new MapBasedConfig(1068, hashMap0);
      mapBasedConfig0.hashCode();
      MapBasedConfig mapBasedConfig2 = new MapBasedConfig(1068, 1L, hashMap0);
      mapBasedConfig2.hashCode();
      boolean boolean0 = mapBasedConfig1.equals(mapBasedConfig0);
      assertTrue(boolean0);
      assertFalse(mapBasedConfig1.equals((Object)mapBasedConfig2));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1068, hashMap0);
      MapBasedConfig mapBasedConfig1 = new MapBasedConfig(1068, hashMap0);
      mapBasedConfig0.hashCode();
      MapBasedConfig mapBasedConfig2 = new MapBasedConfig(1068, 1068, hashMap0);
      boolean boolean0 = mapBasedConfig1.equals(mapBasedConfig0);
      assertTrue(boolean0);
      assertFalse(mapBasedConfig1.equals((Object)mapBasedConfig2));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1068, hashMap0);
      boolean boolean0 = mapBasedConfig0.equals(mapBasedConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1068, hashMap0);
      Class<MapBasedConfig> class0 = MapBasedConfig.class;
      MapBasedConfig mapBasedConfig1 = mapBasedConfig0.get("T<U,;`I<9$", mapBasedConfig0, class0);
      mapBasedConfig1.hashCode();
      boolean boolean0 = mapBasedConfig1.equals(mapBasedConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1, hashMap0);
      mapBasedConfig0.hashCode();
      Object object0 = new Object();
      hashMap0.put("q$ip/-q'IH?1? _d*<", object0);
      mapBasedConfig0.hashCode();
      Object object1 = mapBasedConfig0.get((String) null, (Object) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(905, hashMap0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        mapBasedConfig0.get((String) null, (Object) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphaware.reco.generic.config.MapBasedConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1, hashMap0);
      mapBasedConfig0.hashCode();
      mapBasedConfig0.hashCode();
      mapBasedConfig0.get("m6s}y?%0+F{<_Brm!Q", (Object) null);
      Object object0 = mapBasedConfig0.get("com.graphaware.reco.generic.util.Assert", (Object) "m6s}y?%0+F{<_Brm!Q");
      assertEquals("m6s}y?%0+F{<_Brm!Q", object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1009, hashMap0);
      boolean boolean0 = mapBasedConfig0.contains("x$LJ7xm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MapBasedConfig mapBasedConfig0 = null;
      try {
        mapBasedConfig0 = new MapBasedConfig(31, (Map<String, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1, hashMap0);
      mapBasedConfig0.hashCode();
      boolean boolean0 = mapBasedConfig0.equals(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(403, hashMap0);
      mapBasedConfig0.hashCode();
      boolean boolean0 = mapBasedConfig0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1068;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1068, hashMap0);
      String string0 = "T<U,;`I<9$";
      mapBasedConfig0.equals("T<U,;`I<9$");
      String string1 = "";
      MapBasedConfig mapBasedConfig1 = new MapBasedConfig(131, hashMap0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        mapBasedConfig1.get("", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Config does not contain key 
         //
         verifyException("com.graphaware.reco.generic.config.MapBasedConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(354, hashMap0);
      Class<String> class0 = String.class;
      String string0 = mapBasedConfig0.get("com.graphaware.reco.generic.config.Config", "com.graphaware.reco.generic.config.Config", class0);
      assertEquals("com.graphaware.reco.generic.config.Config", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 31;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.remove((Object) "iK-T");
      hashMap0.put("iK-T", "iK-T");
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(31, 31, hashMap0);
      String string0 = "m6s}y?%0+F{<_Brm!Q";
      // Undeclared exception!
      try { 
        mapBasedConfig0.get("m6s}y?%0+F{<_Brm!Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Config does not contain key m6s}y?%0+F{<_Brm!Q
         //
         verifyException("com.graphaware.reco.generic.config.MapBasedConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 31;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(31, hashMap0);
      String string0 = "";
      // Undeclared exception!
      try { 
        mapBasedConfig0.get("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Config does not contain key 
         //
         verifyException("com.graphaware.reco.generic.config.MapBasedConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(31, 31, hashMap0);
      assertEquals(31L, mapBasedConfig0.maxTime());
      
      mapBasedConfig0.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(32, hashMap0);
      Class<Object> class0 = Object.class;
      Object object0 = mapBasedConfig0.get("com.graphaware.reco.generic.config.SimpleConfig", (Object) "(.jyc{#\u0007O{?;sL%w`", class0);
      hashMap0.put("(.jyc{#\u0007O{?;sL%w`", "(.jyc{#\u0007O{?;sL%w`");
      mapBasedConfig0.get("(.jyc{#\u0007O{?;sL%w`", (Object) "CK:.>P");
      mapBasedConfig0.get("[Assertion failed] - this expression must be true", (Object) "s");
      Class<Object> class1 = Object.class;
      mapBasedConfig0.get("", (Object) hashMap0, class1);
      mapBasedConfig0.get("(.jyc{#\u0007O{?;sL%w`");
      mapBasedConfig0.contains("(.jyc{#\u0007O{?;sL%w`");
      mapBasedConfig0.get("1ZA%GPj!tTee* u;#", (Object) "[Assertion failed] - this expression must be true");
      Object object1 = mapBasedConfig0.get("com.graphaware.reco.generic.util.Assert", (Object) "[Assertion failed] - this expression must be true");
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1081, hashMap0);
      Object object0 = new Object();
      Object object1 = mapBasedConfig0.get("com.graphaware.reco.generic.config.MapBasedConfig", object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1, hashMap0);
      String string0 = ")s1";
      mapBasedConfig0.get(")s1", (Object) ")s1");
      hashMap0.remove((Object) mapBasedConfig0);
      Class<MapBasedConfig> class0 = MapBasedConfig.class;
      // Undeclared exception!
      try { 
        mapBasedConfig0.get("vc]Sv\"S&[EN#oWTQ$A", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Config does not contain key vc]Sv\"S&[EN#oWTQ$A
         //
         verifyException("com.graphaware.reco.generic.config.MapBasedConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(31, 31, hashMap0);
      MapBasedConfig mapBasedConfig1 = null;
      try {
        mapBasedConfig1 = new MapBasedConfig((-2), (-2), hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this expression must be true
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MapBasedConfig mapBasedConfig0 = null;
      try {
        mapBasedConfig0 = new MapBasedConfig(1009, 1009, (Map<String, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1, hashMap0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        mapBasedConfig0.get("~", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Config does not contain key ~
         //
         verifyException("com.graphaware.reco.generic.config.MapBasedConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1068, hashMap0);
      String string0 = "T<U,;`I<9$";
      Class<MapBasedConfig> class0 = MapBasedConfig.class;
      // Undeclared exception!
      try { 
        mapBasedConfig0.get("T<U,;`I<9$", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Config does not contain key T<U,;`I<9$
         //
         verifyException("com.graphaware.reco.generic.config.MapBasedConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedConfig mapBasedConfig0 = new MapBasedConfig(1, hashMap0);
      // Undeclared exception!
      try { 
        mapBasedConfig0.get("<&{U\" AJ:?e zn.@aI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Config does not contain key <&{U\" AJ:?e zn.@aI
         //
         verifyException("com.graphaware.reco.generic.config.MapBasedConfig", e);
      }
  }
}
