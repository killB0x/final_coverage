/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 03:42:34 GMT 2022
 */

package com.graphaware.reco.generic.util;

import org.junit.Test;
import static org.junit.Assert.*;
import com.graphaware.reco.generic.util.AtomicFloat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AtomicFloat_ESTest extends AtomicFloat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat((-1137.6599F));
      atomicFloat0.set(1.0F);
      long long0 = atomicFloat0.longValue();
      assertEquals(1.0, atomicFloat0.doubleValue(), 0.01);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat(0.0F);
      atomicFloat0.set((-2032.6233F));
      long long0 = atomicFloat0.longValue();
      assertEquals((-2032L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat(0.0F);
      atomicFloat0.intValue();
      assertEquals(0.0, atomicFloat0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat(0.0F);
      atomicFloat0.set((-2032.6233F));
      int int0 = atomicFloat0.intValue();
      assertEquals((-2032), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat(0.0F);
      atomicFloat0.set(1.0F);
      float float0 = atomicFloat0.getAndSet(0.0F);
      assertEquals("0.0", atomicFloat0.toString());
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat((-1137.6599F));
      atomicFloat0.set(1.0F);
      float float0 = atomicFloat0.get();
      assertEquals((short)1, atomicFloat0.shortValue());
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat(0.0F);
      atomicFloat0.getAndSet((-1580.0F));
      float float0 = atomicFloat0.get();
      assertEquals((byte) (-44), atomicFloat0.byteValue());
      assertEquals((-1580.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat(0.0F);
      float float0 = atomicFloat0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat(0.0F);
      atomicFloat0.getAndSet((-1580.0F));
      float float0 = atomicFloat0.floatValue();
      assertEquals((-1580L), atomicFloat0.longValue());
      assertEquals((-1580.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat((-975.42633F));
      atomicFloat0.getAndSet(1.0F);
      double double0 = atomicFloat0.doubleValue();
      assertEquals((byte)1, atomicFloat0.byteValue());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat(0.0F);
      atomicFloat0.set((-2032.6233F));
      double double0 = atomicFloat0.doubleValue();
      assertEquals((-2032.6233F), atomicFloat0.get(), 0.01F);
      assertEquals((-2032.623291015625), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat(0.0F);
      atomicFloat0.compareAndSet(1470.471F, (-3821.26F));
      assertEquals(0.0, atomicFloat0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat(0.0F);
      atomicFloat0.set(1.0F);
      float float0 = atomicFloat0.addAndGet(0.0F);
      assertEquals((byte)1, atomicFloat0.byteValue());
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat(0.0F);
      float float0 = atomicFloat0.addAndGet((-2532.0F));
      assertEquals((-2532L), atomicFloat0.longValue());
      assertEquals((-2532.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat(0.0F);
      float float0 = atomicFloat0.get();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat(0.0F);
      float float0 = atomicFloat0.addAndGet(0.0F);
      assertEquals("0.0", atomicFloat0.toString());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat(0.0F);
      double double0 = atomicFloat0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat(0.0F);
      boolean boolean0 = atomicFloat0.compareAndSet(0.0F, 1580.1205F);
      assertEquals(1580.1205F, atomicFloat0.floatValue(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat(0.0F);
      atomicFloat0.longValue();
      assertEquals("0.0", atomicFloat0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat(365.16974F);
      int int0 = atomicFloat0.intValue();
      assertEquals(365.16974F, atomicFloat0.floatValue(), 0.01F);
      assertEquals(365, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat(365.16974F);
      String string0 = atomicFloat0.toString();
      assertEquals("365.16974", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AtomicFloat atomicFloat0 = new AtomicFloat(365.16974F);
      float float0 = atomicFloat0.floatValue();
      assertEquals(365.16974F, float0, 0.01F);
  }
}
