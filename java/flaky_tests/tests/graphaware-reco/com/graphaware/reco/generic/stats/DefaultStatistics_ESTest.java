/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 03:32:01 GMT 2022
 */

package com.graphaware.reco.generic.stats;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphaware.reco.generic.stats.DefaultStatistics;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultStatistics_ESTest extends DefaultStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger((-333));
      DefaultStatistics<AtomicInteger> defaultStatistics0 = new DefaultStatistics<AtomicInteger>(atomicInteger0);
      defaultStatistics0.stopTiming("ZAuZ?qLgqr");
      defaultStatistics0.stopTiming("ZAuZ?qLgqr");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger((-1876));
      DefaultStatistics<AtomicInteger> defaultStatistics0 = new DefaultStatistics<AtomicInteger>(atomicInteger0);
      long long0 = defaultStatistics0.getTime("total time");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultStatistics<AtomicInteger> defaultStatistics0 = new DefaultStatistics<AtomicInteger>((AtomicInteger) null);
      AtomicInteger atomicInteger0 = new AtomicInteger(39);
      defaultStatistics0.addStatistic("blacklisted items", "blacklisted items", atomicInteger0);
      Map<String, ? extends Map<String, Object>> map0 = defaultStatistics0.get();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultStatistics<AtomicInteger> defaultStatistics0 = new DefaultStatistics<AtomicInteger>((AtomicInteger) null);
      // Undeclared exception!
      try { 
        defaultStatistics0.startTiming("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have length; it must not be null or empty
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultStatistics<HashMap<AtomicInteger, AtomicInteger>> defaultStatistics0 = new DefaultStatistics<HashMap<AtomicInteger, AtomicInteger>>((HashMap<AtomicInteger, AtomicInteger>) null);
      // Undeclared exception!
      try { 
        defaultStatistics0.incrementStatistic((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultStatistics<AtomicInteger> defaultStatistics0 = new DefaultStatistics<AtomicInteger>((AtomicInteger) null);
      // Undeclared exception!
      try { 
        defaultStatistics0.getTime("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have length; it must not be null or empty
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultStatistics<AtomicInteger> defaultStatistics0 = new DefaultStatistics<AtomicInteger>((AtomicInteger) null);
      AtomicInteger atomicInteger0 = new AtomicInteger(39);
      DefaultStatistics<DefaultStatistics<AtomicInteger>> defaultStatistics1 = new DefaultStatistics<DefaultStatistics<AtomicInteger>>(defaultStatistics0);
      // Undeclared exception!
      try { 
        defaultStatistics1.addStatistic(": ", (String) null, atomicInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger((-333));
      DefaultStatistics<AtomicInteger> defaultStatistics0 = new DefaultStatistics<AtomicInteger>(atomicInteger0);
      defaultStatistics0.startTiming("ZAuZ?qLgqr");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger((-333));
      DefaultStatistics<AtomicInteger> defaultStatistics0 = new DefaultStatistics<AtomicInteger>(atomicInteger0);
      defaultStatistics0.stopTiming("ZAuZ?qLgqr");
      String string0 = defaultStatistics0.toString();
      assertEquals("=== Statistics for -333 ===\n=== ZAuZ?qLgqr ===\nelapsed time: -1\n", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultStatistics<AtomicInteger> defaultStatistics0 = new DefaultStatistics<AtomicInteger>((AtomicInteger) null);
      DefaultStatistics<DefaultStatistics<AtomicInteger>> defaultStatistics1 = new DefaultStatistics<DefaultStatistics<AtomicInteger>>(defaultStatistics0);
      defaultStatistics1.incrementStatistic("blacklisted items", "_Vn\"<f@3s?");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger((-333));
      DefaultStatistics<AtomicInteger> defaultStatistics0 = new DefaultStatistics<AtomicInteger>(atomicInteger0);
      defaultStatistics0.addStatistic("8q@ gBs", "elapsed time", atomicInteger0);
      defaultStatistics0.incrementStatistic("8q@ gBs", "elapsed time");
      assertEquals((-332.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals((-332L), atomicInteger0.longValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<AtomicInteger, AtomicInteger> hashMap0 = new HashMap<AtomicInteger, AtomicInteger>();
      DefaultStatistics<HashMap<AtomicInteger, AtomicInteger>> defaultStatistics0 = new DefaultStatistics<HashMap<AtomicInteger, AtomicInteger>>(hashMap0);
      defaultStatistics0.addStatistic("", "", hashMap0);
      AtomicInteger atomicInteger0 = new AtomicInteger(2992);
      defaultStatistics0.addStatistic("", "", atomicInteger0);
      assertEquals(2992L, atomicInteger0.longValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger((-383));
      DefaultStatistics<AtomicInteger> defaultStatistics0 = new DefaultStatistics<AtomicInteger>(atomicInteger0);
      defaultStatistics0.stopTiming("8q@ gBs");
      // Undeclared exception!
      try { 
        defaultStatistics0.incrementStatistic("8q@ gBs", "elapsed time");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Long cannot be cast to class java.util.concurrent.atomic.AtomicInteger (java.lang.Long and java.util.concurrent.atomic.AtomicInteger are in module java.base of loader 'bootstrap')
         //
         verifyException("com.graphaware.reco.generic.stats.DefaultStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultStatistics<AtomicInteger> defaultStatistics0 = new DefaultStatistics<AtomicInteger>((AtomicInteger) null);
      long long0 = defaultStatistics0.getTime(": ");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<AtomicInteger, AtomicInteger> hashMap0 = new HashMap<AtomicInteger, AtomicInteger>();
      DefaultStatistics<HashMap<AtomicInteger, AtomicInteger>> defaultStatistics0 = new DefaultStatistics<HashMap<AtomicInteger, AtomicInteger>>(hashMap0);
      Map<String, ? extends Map<String, Object>> map0 = defaultStatistics0.get();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<AtomicInteger, AtomicInteger> hashMap0 = new HashMap<AtomicInteger, AtomicInteger>();
      DefaultStatistics<HashMap<AtomicInteger, AtomicInteger>> defaultStatistics0 = new DefaultStatistics<HashMap<AtomicInteger, AtomicInteger>>(hashMap0);
      // Undeclared exception!
      try { 
        defaultStatistics0.stopTiming("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have length; it must not be null or empty
         //
         verifyException("com.graphaware.reco.generic.util.Assert", e);
      }
  }
}
