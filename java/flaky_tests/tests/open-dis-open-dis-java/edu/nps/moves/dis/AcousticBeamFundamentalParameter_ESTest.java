/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:41:15 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.AcousticBeamFundamentalParameter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AcousticBeamFundamentalParameter_ESTest extends AcousticBeamFundamentalParameter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      assertEquals(20, acousticBeamFundamentalParameter0.getMarshalledSize());
      
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      // Undeclared exception!
      try { 
        acousticBeamFundamentalParameter0.marshal(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.beamCenterDE = (-1017.77F);
      acousticBeamFundamentalParameter0.getMarshalledSize();
      acousticBeamFundamentalParameter0.getBeamCenterDE();
      acousticBeamFundamentalParameter0.getBeamCenterDE();
      acousticBeamFundamentalParameter0.getMarshalledSize();
      acousticBeamFundamentalParameter0.getBeamCenterDE();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-34);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        acousticBeamFundamentalParameter0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setDeBeamwidth(0.0F);
      acousticBeamFundamentalParameter0.getActiveEmissionParameterIndex();
      acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
      acousticBeamFundamentalParameter0.setDeBeamwidth(1.0F);
      acousticBeamFundamentalParameter0.azimuthalBeamwidth = 0.0F;
      acousticBeamFundamentalParameter0.setBeamCenterAzimuth((-3377.3123F));
      acousticBeamFundamentalParameter0.setBeamCenterAzimuth(0.0F);
      acousticBeamFundamentalParameter0.scanPattern = 2381;
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter1.beamCenterDE = 0.0F;
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth(3014.1743F);
      acousticBeamFundamentalParameter0.setScanPattern(0);
      acousticBeamFundamentalParameter0.equalsImpl(acousticBeamFundamentalParameter1);
      acousticBeamFundamentalParameter0.setBeamCenterDE((-1969.495F));
      acousticBeamFundamentalParameter1.getMarshalledSize();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3003);
      acousticBeamFundamentalParameter0.setBeamCenterDE(1.0F);
      acousticBeamFundamentalParameter0.marshal(byteBuffer0);
      acousticBeamFundamentalParameter0.equalsImpl(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2520);
      Object object0 = new Object();
      acousticBeamFundamentalParameter0.equals(acousticBeamFundamentalParameter0);
      acousticBeamFundamentalParameter0.setActiveEmissionParameterIndex(1);
      ByteBuffer byteBuffer1 = ByteBuffer.allocateDirect(1553);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter2 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter2.marshal(byteBuffer1);
      acousticBeamFundamentalParameter0.setDeBeamwidth((-1.0F));
      acousticBeamFundamentalParameter2.getMarshalledSize();
      acousticBeamFundamentalParameter2.getAzimuthalBeamwidth();
      ByteBuffer.allocateDirect(2520);
      acousticBeamFundamentalParameter0.marshal(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setActiveEmissionParameterIndex(1);
      assertEquals(1, acousticBeamFundamentalParameter0.getActiveEmissionParameterIndex());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2874);
      byteBuffer0.putFloat(2, 1393.9915F);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.marshal(byteBuffer0);
      acousticBeamFundamentalParameter0.setDeBeamwidth(1);
      int int0 = acousticBeamFundamentalParameter1.activeEmissionParameterIndex;
      acousticBeamFundamentalParameter1.getAzimuthalBeamwidth();
      acousticBeamFundamentalParameter1.getBeamCenterAzimuth();
      acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      Object object0 = new Object();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter2 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter2.setScanPattern(2146771422);
      acousticBeamFundamentalParameter0.setActiveEmissionParameterIndex((-1));
      acousticBeamFundamentalParameter1.setAzimuthalBeamwidth((-1.0F));
      acousticBeamFundamentalParameter1.getMarshalledSize();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter3 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter3.setActiveEmissionParameterIndex(1);
      acousticBeamFundamentalParameter3.getBeamCenterDE();
      acousticBeamFundamentalParameter3.getMarshalledSize();
      acousticBeamFundamentalParameter0.setScanPattern(20);
      acousticBeamFundamentalParameter3.setBeamCenterDE(1382.6F);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter4 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter2.equals(acousticBeamFundamentalParameter0);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter5 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter5.setDeBeamwidth(20);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      Object object0 = new Object();
      acousticBeamFundamentalParameter1.equalsImpl(acousticBeamFundamentalParameter1);
      acousticBeamFundamentalParameter1.setActiveEmissionParameterIndex(1);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1553);
      acousticBeamFundamentalParameter0.azimuthalBeamwidth = (-900.2107F);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter2 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter2.marshal(byteBuffer0);
      acousticBeamFundamentalParameter1.setDeBeamwidth(1);
      acousticBeamFundamentalParameter2.getMarshalledSize();
      acousticBeamFundamentalParameter2.getAzimuthalBeamwidth();
      acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
      acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
      acousticBeamFundamentalParameter1.getDeBeamwidth();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      float float0 = acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
      assertEquals(0.0F, float0, 0.01F);
      
      acousticBeamFundamentalParameter0.setActiveEmissionParameterIndex(0);
      acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
      acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
      Object object0 = new Object();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter1.equalsImpl(object0);
      acousticBeamFundamentalParameter0.getBeamCenterDE();
      acousticBeamFundamentalParameter1.getMarshalledSize();
      acousticBeamFundamentalParameter0.setActiveEmissionParameterIndex(20);
      acousticBeamFundamentalParameter1.getActiveEmissionParameterIndex();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter2 = new AcousticBeamFundamentalParameter();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter3 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter3.setActiveEmissionParameterIndex((-48));
      acousticBeamFundamentalParameter2.setActiveEmissionParameterIndex((-48));
      Object object1 = new Object();
      acousticBeamFundamentalParameter3.equalsImpl(object1);
      acousticBeamFundamentalParameter2.getBeamCenterDE();
      Object object2 = new Object();
      Object object3 = new Object();
      acousticBeamFundamentalParameter1.equals(object3);
      acousticBeamFundamentalParameter0.setBeamCenterDE(0.0F);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter4 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter4.setActiveEmissionParameterIndex((-48));
      acousticBeamFundamentalParameter0.setDeBeamwidth(0.0F);
      acousticBeamFundamentalParameter3.setActiveEmissionParameterIndex((-1336));
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        acousticBeamFundamentalParameter0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.scanPattern = 1431;
      acousticBeamFundamentalParameter0.setActiveEmissionParameterIndex((-4045));
      acousticBeamFundamentalParameter0.activeEmissionParameterIndex = (-1);
      acousticBeamFundamentalParameter0.getBeamCenterDE();
      acousticBeamFundamentalParameter0.setBeamCenterAzimuth(1431);
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth((-1.0F));
      acousticBeamFundamentalParameter0.getBeamCenterDE();
      acousticBeamFundamentalParameter0.getActiveEmissionParameterIndex();
      acousticBeamFundamentalParameter0.getDeBeamwidth();
      acousticBeamFundamentalParameter0.getMarshalledSize();
      acousticBeamFundamentalParameter0.getBeamCenterDE();
      acousticBeamFundamentalParameter0.getActiveEmissionParameterIndex();
      int int0 = 2146675408;
      // Undeclared exception!
      ByteBuffer.allocateDirect(2146675408);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-42);
      acousticBeamFundamentalParameter0.beamCenterAzimuth = (-337.5F);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((byte)25);
      acousticBeamFundamentalParameter0.marshal(byteBuffer0);
      acousticBeamFundamentalParameter0.setDeBeamwidth((-213));
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter1.getMarshalledSize();
      acousticBeamFundamentalParameter0.getAzimuthalBeamwidth();
      acousticBeamFundamentalParameter1.getBeamCenterAzimuth();
      acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
      // Undeclared exception!
      try { 
        acousticBeamFundamentalParameter0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      ByteBuffer.allocateDirect(0);
      acousticBeamFundamentalParameter0.setBeamCenterAzimuth(3014.1743F);
      acousticBeamFundamentalParameter0.setBeamCenterAzimuth(3014.1743F);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setScanPattern(0);
      acousticBeamFundamentalParameter0.setDeBeamwidth((-3377.3123F));
      acousticBeamFundamentalParameter1.setDeBeamwidth(0.0F);
      acousticBeamFundamentalParameter1.equalsImpl(acousticBeamFundamentalParameter0);
      acousticBeamFundamentalParameter1.setBeamCenterDE(1.0F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setScanPattern(0);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter1.setBeamCenterDE(2779.5F);
      acousticBeamFundamentalParameter0.setDeBeamwidth(0);
      acousticBeamFundamentalParameter1.setBeamCenterAzimuth(0.0F);
      acousticBeamFundamentalParameter0.setDeBeamwidth(2779.5F);
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth(1.0F);
      acousticBeamFundamentalParameter1.equals(acousticBeamFundamentalParameter0);
      acousticBeamFundamentalParameter1.equals((Object) null);
      acousticBeamFundamentalParameter1.getActiveEmissionParameterIndex();
      acousticBeamFundamentalParameter0.getAzimuthalBeamwidth();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth(0.0F);
      acousticBeamFundamentalParameter0.setDeBeamwidth(0.0F);
      acousticBeamFundamentalParameter0.getActiveEmissionParameterIndex();
      acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
      acousticBeamFundamentalParameter0.azimuthalBeamwidth = 0.0F;
      acousticBeamFundamentalParameter0.setActiveEmissionParameterIndex(0);
      acousticBeamFundamentalParameter0.setBeamCenterAzimuth((-104.23577F));
      acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
      acousticBeamFundamentalParameter0.getAzimuthalBeamwidth();
      acousticBeamFundamentalParameter0.setScanPattern(945);
      acousticBeamFundamentalParameter0.setDeBeamwidth(2779.5F);
      Object object0 = new Object();
      acousticBeamFundamentalParameter0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.deBeamwidth = 1866.0F;
      acousticBeamFundamentalParameter0.setBeamCenterDE(0.0F);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter1.setBeamCenterDE(1866.0F);
      acousticBeamFundamentalParameter1.beamCenterDE = 1866.0F;
      acousticBeamFundamentalParameter1.setDeBeamwidth(0.0F);
      acousticBeamFundamentalParameter1.setScanPattern((-1));
      acousticBeamFundamentalParameter1.setBeamCenterAzimuth(0.0F);
      acousticBeamFundamentalParameter1.setDeBeamwidth((-1.0F));
      acousticBeamFundamentalParameter1.beamCenterAzimuth = 1866.0F;
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth(2655.99F);
      acousticBeamFundamentalParameter0.activeEmissionParameterIndex = 0;
      acousticBeamFundamentalParameter0.equals(acousticBeamFundamentalParameter1);
      acousticBeamFundamentalParameter0.equals((Object) null);
      acousticBeamFundamentalParameter0.getActiveEmissionParameterIndex();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.azimuthalBeamwidth = (-2675.609F);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(26);
      ByteBuffer byteBuffer1 = byteBuffer0.slice();
      acousticBeamFundamentalParameter0.unmarshal(byteBuffer1);
      acousticBeamFundamentalParameter0.getScanPattern();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2520);
      byteBuffer0.mark();
      acousticBeamFundamentalParameter0.marshal(byteBuffer0);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth((-1.0F));
      acousticBeamFundamentalParameter1.setActiveEmissionParameterIndex(2146604977);
      acousticBeamFundamentalParameter0.setBeamCenterAzimuth(2120.1445F);
      acousticBeamFundamentalParameter1.getBeamCenterAzimuth();
      acousticBeamFundamentalParameter0.getAzimuthalBeamwidth();
      acousticBeamFundamentalParameter0.setScanPattern(332);
      acousticBeamFundamentalParameter1.setDeBeamwidth((-121.539F));
      Object object0 = new Object();
      acousticBeamFundamentalParameter1.equalsImpl(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.beamCenterAzimuth = 3820.876F;
      acousticBeamFundamentalParameter0.setScanPattern(1);
      acousticBeamFundamentalParameter0.setBeamCenterDE(3149.3542F);
      acousticBeamFundamentalParameter0.activeEmissionParameterIndex = (-1);
      Object object0 = new Object();
      acousticBeamFundamentalParameter0.equals(object0);
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth(1);
      acousticBeamFundamentalParameter0.getScanPattern();
      acousticBeamFundamentalParameter0.setBeamCenterDE(317.0F);
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth((-885.3419F));
      acousticBeamFundamentalParameter0.setBeamCenterDE((-1010.77167F));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.scanPattern = 281;
      acousticBeamFundamentalParameter0.deBeamwidth = (-612.4F);
      acousticBeamFundamentalParameter0.setScanPattern(2);
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth((-1194));
      acousticBeamFundamentalParameter0.scanPattern = (-1194);
      acousticBeamFundamentalParameter0.getDeBeamwidth();
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth(2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter1.equals((Object) null);
      acousticBeamFundamentalParameter0.getMarshalledSize();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter2 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter2.getBeamCenterAzimuth();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(20);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter3 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter3.marshal(byteBuffer0);
      Object object0 = new Object();
      acousticBeamFundamentalParameter3.equalsImpl(object0);
      Object object1 = new Object();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.deBeamwidth = 1866.0F;
      acousticBeamFundamentalParameter0.setBeamCenterDE(0.0F);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter1.setBeamCenterDE(1866.0F);
      acousticBeamFundamentalParameter1.beamCenterDE = 1866.0F;
      acousticBeamFundamentalParameter1.setDeBeamwidth(0.0F);
      acousticBeamFundamentalParameter1.setBeamCenterAzimuth(0.0F);
      acousticBeamFundamentalParameter1.setDeBeamwidth((-1.0F));
      acousticBeamFundamentalParameter1.beamCenterAzimuth = 1866.0F;
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth(2655.99F);
      acousticBeamFundamentalParameter0.activeEmissionParameterIndex = 0;
      acousticBeamFundamentalParameter0.equals(acousticBeamFundamentalParameter1);
      acousticBeamFundamentalParameter0.equals((Object) null);
      acousticBeamFundamentalParameter0.getActiveEmissionParameterIndex();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth(0.0F);
      acousticBeamFundamentalParameter0.setDeBeamwidth(0.0F);
      acousticBeamFundamentalParameter0.getActiveEmissionParameterIndex();
      acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
      acousticBeamFundamentalParameter0.azimuthalBeamwidth = 0.0F;
      acousticBeamFundamentalParameter0.setBeamCenterAzimuth((-3377.3123F));
      acousticBeamFundamentalParameter0.setBeamCenterAzimuth(0.0F);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter1.beamCenterDE = 0.0F;
      acousticBeamFundamentalParameter0.setScanPattern(0);
      acousticBeamFundamentalParameter1.setDeBeamwidth(0.0F);
      acousticBeamFundamentalParameter1.setDeBeamwidth(0.0F);
      acousticBeamFundamentalParameter0.equalsImpl(acousticBeamFundamentalParameter1);
      acousticBeamFundamentalParameter0.setBeamCenterDE((-1969.495F));
      assertEquals((-1969.495F), acousticBeamFundamentalParameter0.getBeamCenterDE(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.beamCenterDE = 3014.1743F;
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter1.setAzimuthalBeamwidth((-1456.2655F));
      acousticBeamFundamentalParameter1.setBeamCenterAzimuth(3014.1743F);
      acousticBeamFundamentalParameter0.equalsImpl(acousticBeamFundamentalParameter1);
      assertEquals(3014.1743F, acousticBeamFundamentalParameter1.getBeamCenterAzimuth(), 0.01F);
      
      float float0 = acousticBeamFundamentalParameter0.getDeBeamwidth();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.activeEmissionParameterIndex = (-890);
      acousticBeamFundamentalParameter0.setBeamCenterDE((-821.2F));
      acousticBeamFundamentalParameter0.beamCenterDE = 3014.1743F;
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter1.setBeamCenterAzimuth(3014.1743F);
      acousticBeamFundamentalParameter0.equalsImpl(acousticBeamFundamentalParameter1);
      assertEquals(3014.1743F, acousticBeamFundamentalParameter1.getBeamCenterAzimuth(), 0.01F);
      
      float float0 = acousticBeamFundamentalParameter0.getDeBeamwidth();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.azimuthalBeamwidth = 0.0F;
      acousticBeamFundamentalParameter0.beamCenterDE = 2779.5F;
      acousticBeamFundamentalParameter0.beamCenterDE = 2779.5F;
      acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
      acousticBeamFundamentalParameter0.setActiveEmissionParameterIndex(0);
      acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
      acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
      Object object0 = new Object();
      acousticBeamFundamentalParameter0.equalsImpl(object0);
      acousticBeamFundamentalParameter0.azimuthalBeamwidth = 0.0F;
      acousticBeamFundamentalParameter0.getBeamCenterDE();
      acousticBeamFundamentalParameter0.getMarshalledSize();
      acousticBeamFundamentalParameter0.activeEmissionParameterIndex = 0;
      acousticBeamFundamentalParameter0.setActiveEmissionParameterIndex(20);
      acousticBeamFundamentalParameter0.getActiveEmissionParameterIndex();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter1.setActiveEmissionParameterIndex(20);
      acousticBeamFundamentalParameter0.setActiveEmissionParameterIndex(0);
      acousticBeamFundamentalParameter0.equalsImpl(acousticBeamFundamentalParameter1);
      acousticBeamFundamentalParameter0.getBeamCenterDE();
      acousticBeamFundamentalParameter1.scanPattern = 4236;
      Object object1 = new Object();
      acousticBeamFundamentalParameter1.equals(object1);
      acousticBeamFundamentalParameter1.setBeamCenterDE(1.0F);
      acousticBeamFundamentalParameter1.setActiveEmissionParameterIndex(20);
      acousticBeamFundamentalParameter1.setDeBeamwidth(20);
      acousticBeamFundamentalParameter1.setActiveEmissionParameterIndex(427);
      assertEquals(1.0F, acousticBeamFundamentalParameter1.getBeamCenterDE(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.equals(acousticBeamFundamentalParameter1);
      acousticBeamFundamentalParameter1.setActiveEmissionParameterIndex(810);
      // Undeclared exception!
      try { 
        ByteBuffer.allocateDirect((-213));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-213 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.activeEmissionParameterIndex = (-4065);
      acousticBeamFundamentalParameter0.setDeBeamwidth((-4065));
      acousticBeamFundamentalParameter0.scanPattern = (-4065);
      acousticBeamFundamentalParameter0.setScanPattern((-4065));
      acousticBeamFundamentalParameter0.getMarshalledSize();
      acousticBeamFundamentalParameter0.setActiveEmissionParameterIndex(20);
      Object object0 = new Object();
      boolean boolean0 = acousticBeamFundamentalParameter0.equalsImpl(object0);
      assertEquals(20, acousticBeamFundamentalParameter0.getActiveEmissionParameterIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      Object object0 = new Object();
      boolean boolean0 = acousticBeamFundamentalParameter0.equals(object0);
      assertFalse(boolean0);
      
      int int0 = acousticBeamFundamentalParameter0.getMarshalledSize();
      assertTrue(acousticBeamFundamentalParameter0.equals((Object)acousticBeamFundamentalParameter1));
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.beamCenterAzimuth = 3820.876F;
      acousticBeamFundamentalParameter0.setScanPattern(1);
      acousticBeamFundamentalParameter0.setBeamCenterDE(3149.3542F);
      acousticBeamFundamentalParameter0.activeEmissionParameterIndex = (-1);
      Object object0 = new Object();
      acousticBeamFundamentalParameter0.equals(object0);
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth(1);
      acousticBeamFundamentalParameter0.setScanPattern(1);
      acousticBeamFundamentalParameter0.beamCenterAzimuth = (-1.0F);
      acousticBeamFundamentalParameter0.scanPattern = (-1);
      acousticBeamFundamentalParameter0.beamCenterDE = (float) (-1);
      acousticBeamFundamentalParameter0.setBeamCenterAzimuth(290.5391F);
      acousticBeamFundamentalParameter0.setActiveEmissionParameterIndex((-1));
      acousticBeamFundamentalParameter0.equalsImpl(object0);
      acousticBeamFundamentalParameter0.getScanPattern();
      acousticBeamFundamentalParameter0.setDeBeamwidth(226.1F);
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth(3820.876F);
      assertEquals((-1), acousticBeamFundamentalParameter0.getActiveEmissionParameterIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        acousticBeamFundamentalParameter0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      // Undeclared exception!
      try { 
        acousticBeamFundamentalParameter0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.AcousticBeamFundamentalParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-107);
      byteArray0[8] = (byte)34;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      byteBuffer0.get(byteArray0);
      byteBuffer0.putInt(0, (int) (byte)0);
      // Undeclared exception!
      try { 
        acousticBeamFundamentalParameter0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      int int0 = 0;
      acousticBeamFundamentalParameter0.setScanPattern(0);
      acousticBeamFundamentalParameter0.setScanPattern(0);
      acousticBeamFundamentalParameter0.setScanPattern(0);
      acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ByteBuffer.wrap((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setScanPattern(491);
      acousticBeamFundamentalParameter0.azimuthalBeamwidth = 1.0F;
      acousticBeamFundamentalParameter0.azimuthalBeamwidth = 0.0F;
      acousticBeamFundamentalParameter0.setActiveEmissionParameterIndex(1);
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth(0.0F);
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth((-1.0F));
      acousticBeamFundamentalParameter0.getActiveEmissionParameterIndex();
      acousticBeamFundamentalParameter0.getAzimuthalBeamwidth();
      int int0 = 170;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      // Undeclared exception!
      try { 
        byteBuffer0.getFloat(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setScanPattern(0);
      acousticBeamFundamentalParameter0.setScanPattern(1699);
      acousticBeamFundamentalParameter0.beamCenterAzimuth = 0.0F;
      acousticBeamFundamentalParameter0.setBeamCenterAzimuth(0);
      int int0 = acousticBeamFundamentalParameter0.getActiveEmissionParameterIndex();
      assertEquals(1699, acousticBeamFundamentalParameter0.getScanPattern());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setBeamCenterDE(789.3326F);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-36);
      byteArray0[0] = (byte) (-36);
      byte byte1 = (byte)57;
      byteArray0[1] = (byte)57;
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, (int) (byte) (-36), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      Object object0 = new Object();
      boolean boolean0 = acousticBeamFundamentalParameter0.equalsImpl(object0);
      assertFalse(boolean0);
      
      acousticBeamFundamentalParameter0.setDeBeamwidth(0.0F);
      assertEquals(0.0F, acousticBeamFundamentalParameter0.getDeBeamwidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setBeamCenterDE(358.9F);
      acousticBeamFundamentalParameter0.getBeamCenterDE();
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth(358.9F);
      acousticBeamFundamentalParameter0.getDeBeamwidth();
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth(2443.0134F);
      acousticBeamFundamentalParameter0.setBeamCenterAzimuth(2443.0134F);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter1.setActiveEmissionParameterIndex(0);
      acousticBeamFundamentalParameter0.equals(acousticBeamFundamentalParameter1);
      acousticBeamFundamentalParameter1.getScanPattern();
      acousticBeamFundamentalParameter0.setActiveEmissionParameterIndex(1);
      acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
      // Undeclared exception!
      try { 
        acousticBeamFundamentalParameter1.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.AcousticBeamFundamentalParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setDeBeamwidth(1.0F);
      acousticBeamFundamentalParameter0.equalsImpl(acousticBeamFundamentalParameter1);
      float float0 = acousticBeamFundamentalParameter0.getBeamCenterDE();
      assertEquals(1.0F, acousticBeamFundamentalParameter0.getDeBeamwidth(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.beamCenterDE = 3014.1743F;
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter1.setBeamCenterAzimuth(3014.1743F);
      acousticBeamFundamentalParameter0.equalsImpl(acousticBeamFundamentalParameter1);
      assertEquals(3014.1743F, acousticBeamFundamentalParameter1.getBeamCenterAzimuth(), 0.01F);
      
      float float0 = acousticBeamFundamentalParameter0.getDeBeamwidth();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setScanPattern(2146711310);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.equalsImpl(acousticBeamFundamentalParameter1);
      // Undeclared exception!
      try { 
        ByteBuffer.allocateDirect((-510));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-510 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      Object object0 = new Object();
      boolean boolean0 = acousticBeamFundamentalParameter0.equals(acousticBeamFundamentalParameter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.equals(acousticBeamFundamentalParameter1);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      int int0 = acousticBeamFundamentalParameter0.getMarshalledSize();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      boolean boolean0 = acousticBeamFundamentalParameter0.equalsImpl(acousticBeamFundamentalParameter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setDeBeamwidth(0.0F);
      acousticBeamFundamentalParameter0.setScanPattern(0);
      acousticBeamFundamentalParameter0.deBeamwidth = (float) (-1011);
      acousticBeamFundamentalParameter0.beamCenterDE = 593.3896F;
      acousticBeamFundamentalParameter0.setActiveEmissionParameterIndex((-1011));
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth(0.0F);
      acousticBeamFundamentalParameter0.getMarshalledSize();
      acousticBeamFundamentalParameter0.setActiveEmissionParameterIndex(0);
      acousticBeamFundamentalParameter0.getBeamCenterDE();
      acousticBeamFundamentalParameter0.getMarshalledSize();
      acousticBeamFundamentalParameter0.setScanPattern((-1011));
      acousticBeamFundamentalParameter0.setBeamCenterDE((-1011));
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.equals(acousticBeamFundamentalParameter1);
      assertEquals((-1011.0F), acousticBeamFundamentalParameter0.getBeamCenterDE(), 0.01F);
      
      acousticBeamFundamentalParameter1.setDeBeamwidth(0.0F);
      assertEquals(20, acousticBeamFundamentalParameter1.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth((-375.6685F));
      int int0 = acousticBeamFundamentalParameter0.activeEmissionParameterIndex;
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setAzimuthalBeamwidth((-6035));
      acousticBeamFundamentalParameter0.setActiveEmissionParameterIndex((-6035));
      acousticBeamFundamentalParameter0.setDeBeamwidth((-365.0F));
      assertEquals((-365.0F), acousticBeamFundamentalParameter0.getDeBeamwidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      float float0 = acousticBeamFundamentalParameter0.getDeBeamwidth();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      int int0 = acousticBeamFundamentalParameter0.getActiveEmissionParameterIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setBeamCenterDE((-1.0F));
      assertEquals((-1.0F), acousticBeamFundamentalParameter0.getBeamCenterDE(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      int int0 = acousticBeamFundamentalParameter0.getScanPattern();
      assertEquals(0, int0);
      
      acousticBeamFundamentalParameter0.activeEmissionParameterIndex = 0;
      acousticBeamFundamentalParameter0.beamCenterAzimuth = 0.0F;
      acousticBeamFundamentalParameter0.beamCenterAzimuth = (-3811.63F);
      acousticBeamFundamentalParameter0.getAzimuthalBeamwidth();
      acousticBeamFundamentalParameter0.getAzimuthalBeamwidth();
      float float0 = acousticBeamFundamentalParameter0.getDeBeamwidth();
      assertEquals(0.0F, float0, 0.01F);
      
      acousticBeamFundamentalParameter0.getBeamCenterDE();
      float float1 = acousticBeamFundamentalParameter0.getAzimuthalBeamwidth();
      assertEquals(0.0F, float1, 0.01F);
      
      acousticBeamFundamentalParameter0.getBeamCenterDE();
      acousticBeamFundamentalParameter0.setBeamCenterDE(0.0F);
      acousticBeamFundamentalParameter0.getActiveEmissionParameterIndex();
      int int1 = acousticBeamFundamentalParameter0.getActiveEmissionParameterIndex();
      assertTrue(int1 == int0);
      assertEquals(0.0F, acousticBeamFundamentalParameter0.getBeamCenterDE(), 0.01F);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      float float0 = acousticBeamFundamentalParameter0.getBeamCenterDE();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setDeBeamwidth(628.75586F);
      int int0 = acousticBeamFundamentalParameter0.getMarshalledSize();
      assertEquals(628.75586F, acousticBeamFundamentalParameter0.getDeBeamwidth(), 0.01F);
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setBeamCenterAzimuth(0.0F);
      int int0 = 1840;
      acousticBeamFundamentalParameter0.setScanPattern(1840);
      acousticBeamFundamentalParameter0.setDeBeamwidth(1840);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        byteBuffer0.getFloat();
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setBeamCenterAzimuth((-3377.3123F));
      assertEquals((-3377.3123F), acousticBeamFundamentalParameter0.getBeamCenterAzimuth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.activeEmissionParameterIndex = 2520;
      float float0 = (-1.0F);
      acousticBeamFundamentalParameter0.setBeamCenterAzimuth((-1.0F));
      acousticBeamFundamentalParameter0.setScanPattern((-1963));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)119;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        acousticBeamFundamentalParameter0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      // Undeclared exception!
      try { 
        acousticBeamFundamentalParameter0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.AcousticBeamFundamentalParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setScanPattern(2837);
      int int0 = acousticBeamFundamentalParameter0.getMarshalledSize();
      assertEquals(2837, acousticBeamFundamentalParameter0.getScanPattern());
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        acousticBeamFundamentalParameter0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      int int0 = (-2392);
      acousticBeamFundamentalParameter0.setScanPattern((-2392));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        acousticBeamFundamentalParameter0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.AcousticBeamFundamentalParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.getAzimuthalBeamwidth();
      // Undeclared exception!
      try { 
        ByteBuffer.allocate((-3795));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-3795 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      float float0 = acousticBeamFundamentalParameter0.getAzimuthalBeamwidth();
      assertEquals(0.0F, float0, 0.01F);
      
      acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
      float float1 = acousticBeamFundamentalParameter0.getBeamCenterAzimuth();
      assertEquals(0.0F, float1, 0.01F);
  }
}
