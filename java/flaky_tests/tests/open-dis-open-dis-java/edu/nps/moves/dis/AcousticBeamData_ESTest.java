/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 13:42:30 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.AcousticBeamData;
import edu.nps.moves.dis.AcousticBeamFundamentalParameter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AcousticBeamData_ESTest extends AcousticBeamData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      AcousticBeamData acousticBeamData1 = new AcousticBeamData();
      assertTrue(acousticBeamData1.equals((Object)acousticBeamData0));
      
      acousticBeamData1.pad2 = 65535;
      boolean boolean0 = acousticBeamData1.equals(acousticBeamData0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      AcousticBeamData acousticBeamData1 = new AcousticBeamData();
      assertTrue(acousticBeamData1.equals((Object)acousticBeamData0));
      
      acousticBeamData1.beamIDNumber = (short)246;
      boolean boolean0 = acousticBeamData0.equalsImpl(acousticBeamData1);
      assertFalse(acousticBeamData1.equals((Object)acousticBeamData0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      acousticBeamData0.setBeamDataLength((-1012));
      AcousticBeamData acousticBeamData1 = new AcousticBeamData();
      boolean boolean0 = acousticBeamData0.equals(acousticBeamData1);
      assertEquals((-1012), acousticBeamData0.getBeamDataLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      acousticBeamData0.setBeamDataLength(65535);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(65535);
      acousticBeamData0.marshal(byteBuffer0);
      assertEquals(65535, acousticBeamData0.getBeamDataLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      acousticBeamData0.setBeamDataLength(255);
      int int0 = acousticBeamData0.getMarshalledSize();
      assertEquals(255, acousticBeamData0.getBeamDataLength());
      assertEquals(25, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(475);
      acousticBeamData0.unmarshal(byteBuffer0);
      assertEquals(0, acousticBeamData0.getPad2());
      assertEquals((short)0, acousticBeamData0.getBeamIDNumber());
      assertEquals(0, acousticBeamData0.getBeamDataLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      acousticBeamData0.setPad2(2);
      int int0 = acousticBeamData0.getPad2();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      acousticBeamData0.setPad2((short) (-2511));
      int int0 = acousticBeamData0.getPad2();
      assertEquals((-2511), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      acousticBeamData0.setFundamentalDataParameters((AcousticBeamFundamentalParameter) null);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = acousticBeamData0.getFundamentalDataParameters();
      assertNull(acousticBeamFundamentalParameter0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = acousticBeamData0.getFundamentalDataParameters();
      acousticBeamFundamentalParameter0.scanPattern = 1;
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = acousticBeamData0.getFundamentalDataParameters();
      assertEquals(0.0F, acousticBeamFundamentalParameter1.getDeBeamwidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.scanPattern = (-3053);
      acousticBeamData0.setFundamentalDataParameters(acousticBeamFundamentalParameter0);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = acousticBeamData0.getFundamentalDataParameters();
      assertEquals((-3053), acousticBeamFundamentalParameter1.getScanPattern());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamData0.fundamentalDataParameters = acousticBeamFundamentalParameter0;
      acousticBeamFundamentalParameter0.deBeamwidth = (-1597.8591F);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = acousticBeamData0.getFundamentalDataParameters();
      assertSame(acousticBeamFundamentalParameter1, acousticBeamFundamentalParameter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamFundamentalParameter0.setBeamCenterDE(1.0F);
      acousticBeamData0.setFundamentalDataParameters(acousticBeamFundamentalParameter0);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = acousticBeamData0.getFundamentalDataParameters();
      assertEquals(1.0F, acousticBeamFundamentalParameter1.getBeamCenterDE(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = acousticBeamData0.getFundamentalDataParameters();
      acousticBeamFundamentalParameter0.beamCenterDE = 0.0F;
      acousticBeamFundamentalParameter0.beamCenterDE = 0.0F;
      acousticBeamFundamentalParameter0.beamCenterDE = (-1595.1F);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = acousticBeamData0.getFundamentalDataParameters();
      assertEquals(0, acousticBeamFundamentalParameter1.getActiveEmissionParameterIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      acousticBeamData0.fundamentalDataParameters.setBeamCenterAzimuth(3432.253F);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = acousticBeamData0.getFundamentalDataParameters();
      assertEquals(0.0F, acousticBeamFundamentalParameter0.getDeBeamwidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = acousticBeamData0.getFundamentalDataParameters();
      acousticBeamFundamentalParameter0.setBeamCenterAzimuth((-4354.0F));
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = acousticBeamData0.getFundamentalDataParameters();
      assertEquals(0, acousticBeamFundamentalParameter1.getScanPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = acousticBeamData0.getFundamentalDataParameters();
      acousticBeamFundamentalParameter0.azimuthalBeamwidth = (float) 1;
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = acousticBeamData0.getFundamentalDataParameters();
      assertEquals(0.0F, acousticBeamFundamentalParameter1.getBeamCenterDE(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamData0.fundamentalDataParameters = acousticBeamFundamentalParameter0;
      acousticBeamFundamentalParameter0.azimuthalBeamwidth = (float) (-360);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = acousticBeamData0.getFundamentalDataParameters();
      assertEquals(20, acousticBeamFundamentalParameter1.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = acousticBeamData0.getFundamentalDataParameters();
      acousticBeamFundamentalParameter0.setActiveEmissionParameterIndex(833);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = acousticBeamData0.getFundamentalDataParameters();
      assertEquals(0.0F, acousticBeamFundamentalParameter1.getAzimuthalBeamwidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = new AcousticBeamFundamentalParameter();
      acousticBeamData0.fundamentalDataParameters = acousticBeamFundamentalParameter0;
      acousticBeamFundamentalParameter0.activeEmissionParameterIndex = (-390);
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter1 = acousticBeamData0.getFundamentalDataParameters();
      assertSame(acousticBeamFundamentalParameter1, acousticBeamFundamentalParameter0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      acousticBeamData0.setBeamIDNumber((short)2);
      short short0 = acousticBeamData0.getBeamIDNumber();
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      acousticBeamData0.beamIDNumber = (short) (-582);
      short short0 = acousticBeamData0.getBeamIDNumber();
      assertEquals((short) (-582), short0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      acousticBeamData0.beamDataLength = 1827;
      int int0 = acousticBeamData0.getBeamDataLength();
      assertEquals(1827, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      acousticBeamData0.setBeamDataLength((-3367));
      int int0 = acousticBeamData0.getBeamDataLength();
      assertEquals((-3367), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      boolean boolean0 = acousticBeamData0.equalsImpl(acousticBeamData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        acousticBeamData0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(4);
      // Undeclared exception!
      try { 
        acousticBeamData0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      // Undeclared exception!
      try { 
        acousticBeamData0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.AcousticBeamData", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      acousticBeamData0.fundamentalDataParameters = null;
      // Undeclared exception!
      try { 
        acousticBeamData0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.AcousticBeamData", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      acousticBeamData0.setFundamentalDataParameters((AcousticBeamFundamentalParameter) null);
      AcousticBeamData acousticBeamData1 = new AcousticBeamData();
      // Undeclared exception!
      try { 
        acousticBeamData0.equals(acousticBeamData1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.AcousticBeamData", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      AcousticBeamData acousticBeamData1 = new AcousticBeamData();
      AcousticBeamFundamentalParameter acousticBeamFundamentalParameter0 = acousticBeamData1.getFundamentalDataParameters();
      assertTrue(acousticBeamData1.equals((Object)acousticBeamData0));
      
      acousticBeamFundamentalParameter0.scanPattern = 1;
      boolean boolean0 = acousticBeamData1.equalsImpl(acousticBeamData0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      AcousticBeamData acousticBeamData1 = new AcousticBeamData();
      acousticBeamData1.setBeamIDNumber((short)255);
      boolean boolean0 = acousticBeamData1.equalsImpl(acousticBeamData0);
      assertEquals((short)255, acousticBeamData1.getBeamIDNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      AcousticBeamData acousticBeamData1 = new AcousticBeamData();
      acousticBeamData0.setBeamDataLength((-390));
      boolean boolean0 = acousticBeamData1.equalsImpl(acousticBeamData0);
      assertEquals((-390), acousticBeamData0.getBeamDataLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      AcousticBeamData acousticBeamData1 = new AcousticBeamData();
      assertTrue(acousticBeamData1.equals((Object)acousticBeamData0));
      
      acousticBeamData1.pad2 = 65535;
      boolean boolean0 = acousticBeamData0.equalsImpl(acousticBeamData1);
      assertFalse(acousticBeamData1.equals((Object)acousticBeamData0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      boolean boolean0 = acousticBeamData0.equalsImpl((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      Object object0 = new Object();
      boolean boolean0 = acousticBeamData0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      boolean boolean0 = acousticBeamData0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      boolean boolean0 = acousticBeamData0.equals(acousticBeamData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      acousticBeamData0.setPad2((-360));
      int int0 = acousticBeamData0.getMarshalledSize();
      assertEquals((-360), acousticBeamData0.getPad2());
      assertEquals(25, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      // Undeclared exception!
      try { 
        acousticBeamData0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.AcousticBeamData", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      int int0 = acousticBeamData0.getBeamDataLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      int int0 = acousticBeamData0.getPad2();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AcousticBeamData acousticBeamData0 = new AcousticBeamData();
      short short0 = acousticBeamData0.getBeamIDNumber();
      assertEquals((short)0, short0);
  }
}
