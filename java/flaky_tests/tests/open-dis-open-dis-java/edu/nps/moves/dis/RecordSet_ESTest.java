/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:52:22 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.RecordSet;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RecordSet_ESTest extends RecordSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      RecordSet recordSet1 = new RecordSet();
      assertTrue(recordSet1.equals((Object)recordSet0));
      
      recordSet1.recordCount = (-1639);
      boolean boolean0 = recordSet0.equals(recordSet1);
      assertFalse(recordSet1.equals((Object)recordSet0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(914);
      recordSet0.recordLength = 914;
      recordSet0.marshal(byteBuffer0);
      assertEquals(0, recordSet0.getRecordValues());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(841);
      recordSet0.setRecordCount((-1));
      recordSet0.marshal(byteBuffer0);
      assertEquals((-1), recordSet0.getRecordCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.setRecordSetSerialNumber((-1L));
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(914);
      recordSet0.marshal(byteBuffer0);
      assertEquals((-1L), recordSet0.getRecordSetSerialNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.recordCount = 459;
      int int0 = recordSet0.getMarshalledSize();
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.recordLength = 745;
      int int0 = recordSet0.getMarshalledSize();
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.setRecordValues(2);
      int int0 = recordSet0.getMarshalledSize();
      assertEquals(2, recordSet0.getRecordValues());
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(65535);
      recordSet0.unmarshal(byteBuffer0);
      assertEquals((short)0, recordSet0.getPad4());
      assertEquals(0, recordSet0.getRecordValues());
      assertEquals(0, recordSet0.getRecordLength());
      assertEquals(0, recordSet0.getRecordCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        recordSet0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.recordValues = 2756;
      int int0 = recordSet0.getRecordValues();
      assertEquals(2756, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.setRecordValues((-2578));
      int int0 = recordSet0.getRecordValues();
      assertEquals((-2578), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.setRecordSetSerialNumber((-1825L));
      long long0 = recordSet0.getRecordSetSerialNumber();
      assertEquals((-1825L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.setRecordLength(331);
      int int0 = recordSet0.getRecordLength();
      assertEquals(331, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.setRecordLength((-1));
      int int0 = recordSet0.getRecordLength();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.recordID = (long) 459;
      long long0 = recordSet0.getRecordID();
      assertEquals(459L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.recordID = (long) (-774);
      long long0 = recordSet0.getRecordID();
      assertEquals((-774L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.setRecordCount((-2578));
      int int0 = recordSet0.getRecordCount();
      assertEquals((-2578), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.setPad4((short)4);
      short short0 = recordSet0.getPad4();
      assertEquals((short)4, short0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.pad4 = (short) (-266);
      short short0 = recordSet0.getPad4();
      assertEquals((short) (-266), short0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      // Undeclared exception!
      try { 
        recordSet0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.setPad4((short)1418);
      RecordSet recordSet1 = new RecordSet();
      boolean boolean0 = recordSet1.equalsImpl(recordSet0);
      assertEquals((short)1418, recordSet0.getPad4());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.setRecordValues(2);
      RecordSet recordSet1 = new RecordSet();
      boolean boolean0 = recordSet1.equalsImpl(recordSet0);
      assertEquals(2, recordSet0.getRecordValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      RecordSet recordSet1 = new RecordSet();
      recordSet1.setRecordCount((-2578));
      boolean boolean0 = recordSet1.equalsImpl(recordSet0);
      assertEquals((-2578), recordSet1.getRecordCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      RecordSet recordSet1 = new RecordSet();
      recordSet0.setRecordLength(15);
      boolean boolean0 = recordSet0.equalsImpl(recordSet1);
      assertEquals(15, recordSet0.getRecordLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      RecordSet recordSet1 = new RecordSet();
      recordSet0.setRecordSetSerialNumber(1728L);
      boolean boolean0 = recordSet1.equalsImpl(recordSet0);
      assertEquals(1728L, recordSet0.getRecordSetSerialNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      RecordSet recordSet1 = new RecordSet();
      assertTrue(recordSet1.equals((Object)recordSet0));
      
      recordSet1.recordID = 1L;
      boolean boolean0 = recordSet0.equalsImpl(recordSet1);
      assertFalse(recordSet1.equals((Object)recordSet0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      boolean boolean0 = recordSet0.equalsImpl(recordSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      RecordSet recordSet1 = new RecordSet();
      assertTrue(recordSet1.equals((Object)recordSet0));
      
      recordSet1.pad4 = (short) (-351);
      boolean boolean0 = recordSet0.equals(recordSet1);
      assertFalse(recordSet1.equals((Object)recordSet0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      RecordSet recordSet1 = new RecordSet();
      recordSet1.setRecordValues(1614);
      boolean boolean0 = recordSet1.equals(recordSet0);
      assertEquals(1614, recordSet1.getRecordValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      RecordSet recordSet1 = new RecordSet();
      assertTrue(recordSet1.equals((Object)recordSet0));
      
      recordSet1.recordLength = 745;
      boolean boolean0 = recordSet0.equals(recordSet1);
      assertFalse(recordSet1.equals((Object)recordSet0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.setRecordSetSerialNumber(24L);
      RecordSet recordSet1 = new RecordSet();
      boolean boolean0 = recordSet0.equals(recordSet1);
      assertEquals(24L, recordSet0.getRecordSetSerialNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      boolean boolean0 = recordSet0.equalsImpl((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      Object object0 = new Object();
      boolean boolean0 = recordSet0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      boolean boolean0 = recordSet0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      boolean boolean0 = recordSet0.equals(recordSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.setRecordSetSerialNumber(1728L);
      long long0 = recordSet0.getRecordSetSerialNumber();
      assertEquals(1728L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      int int0 = recordSet0.getRecordValues();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.setRecordCount(15);
      int int0 = recordSet0.getRecordCount();
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      long long0 = recordSet0.getRecordSetSerialNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      // Undeclared exception!
      try { 
        recordSet0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.RecordSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      // Undeclared exception!
      try { 
        recordSet0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.RecordSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      int int0 = recordSet0.getRecordCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      int int0 = recordSet0.getRecordLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      recordSet0.setRecordID(24L);
      RecordSet recordSet1 = new RecordSet();
      boolean boolean0 = recordSet0.equals(recordSet1);
      assertEquals(24L, recordSet0.getRecordID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      long long0 = recordSet0.getRecordID();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RecordSet recordSet0 = new RecordSet();
      short short0 = recordSet0.getPad4();
      assertEquals((short)0, short0);
  }
}
