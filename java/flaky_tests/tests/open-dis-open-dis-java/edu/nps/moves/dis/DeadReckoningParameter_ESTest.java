/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:07:38 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.DeadReckoningParameter;
import edu.nps.moves.dis.Vector3Float;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DeadReckoningParameter_ESTest extends DeadReckoningParameter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      deadReckoningParameter0.setOtherParameters(byteArray0);
      DeadReckoningParameter deadReckoningParameter1 = new DeadReckoningParameter();
      // Undeclared exception!
      try { 
        deadReckoningParameter1.equalsImpl(deadReckoningParameter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("edu.nps.moves.dis.DeadReckoningParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      deadReckoningParameter0.setDeadReckoningAlgorithm((short)15);
      DeadReckoningParameter deadReckoningParameter1 = new DeadReckoningParameter();
      boolean boolean0 = deadReckoningParameter0.equalsImpl(deadReckoningParameter1);
      assertEquals((short)15, deadReckoningParameter0.getDeadReckoningAlgorithm());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      DeadReckoningParameter deadReckoningParameter1 = new DeadReckoningParameter();
      Vector3Float vector3Float0 = deadReckoningParameter1.getEntityLinearAcceleration();
      deadReckoningParameter0.setEntityAngularVelocity(vector3Float0);
      assertEquals(40, deadReckoningParameter0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      deadReckoningParameter0.setOtherParameters((byte[]) null);
      byte[] byteArray0 = deadReckoningParameter0.getOtherParameters();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      byte[] byteArray0 = new byte[0];
      deadReckoningParameter0.setOtherParameters(byteArray0);
      byte[] byteArray1 = deadReckoningParameter0.getOtherParameters();
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      deadReckoningParameter0.setEntityLinearAcceleration((Vector3Float) null);
      Vector3Float vector3Float0 = deadReckoningParameter0.getEntityLinearAcceleration();
      assertNull(vector3Float0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      Vector3Float vector3Float0 = deadReckoningParameter0.getEntityLinearAcceleration();
      vector3Float0.setZ(202.7422F);
      Vector3Float vector3Float1 = deadReckoningParameter0.getEntityLinearAcceleration();
      assertEquals(202.7422F, vector3Float1.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      Vector3Float vector3Float0 = deadReckoningParameter0.entityLinearAcceleration;
      vector3Float0.setZ((-1416.8F));
      Vector3Float vector3Float1 = deadReckoningParameter0.getEntityLinearAcceleration();
      assertEquals((-1416.8F), vector3Float1.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      Vector3Float vector3Float0 = deadReckoningParameter0.entityLinearAcceleration;
      vector3Float0.setY(693);
      Vector3Float vector3Float1 = deadReckoningParameter0.getEntityLinearAcceleration();
      assertEquals(693.0F, vector3Float1.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      Vector3Float vector3Float0 = deadReckoningParameter0.entityLinearAcceleration;
      vector3Float0.setY((-753.6F));
      Vector3Float vector3Float1 = deadReckoningParameter0.getEntityLinearAcceleration();
      assertEquals((-753.6F), vector3Float1.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      Vector3Float vector3Float0 = deadReckoningParameter0.getEntityLinearAcceleration();
      vector3Float0.setX(463.737F);
      Vector3Float vector3Float1 = deadReckoningParameter0.getEntityLinearAcceleration();
      assertEquals(0.0F, vector3Float1.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      Vector3Float vector3Float0 = deadReckoningParameter0.getEntityAngularVelocity();
      vector3Float0.setX((short) (-3268));
      deadReckoningParameter0.setEntityLinearAcceleration(vector3Float0);
      Vector3Float vector3Float1 = deadReckoningParameter0.getEntityLinearAcceleration();
      assertEquals((-3268.0F), vector3Float1.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      deadReckoningParameter0.entityAngularVelocity = null;
      Vector3Float vector3Float0 = deadReckoningParameter0.getEntityAngularVelocity();
      assertNull(vector3Float0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      Vector3Float vector3Float0 = deadReckoningParameter0.getEntityAngularVelocity();
      vector3Float0.setZ(3868);
      Vector3Float vector3Float1 = deadReckoningParameter0.getEntityAngularVelocity();
      assertEquals(0.0F, vector3Float1.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      Vector3Float vector3Float0 = deadReckoningParameter0.entityAngularVelocity;
      vector3Float0.z = (float) (short) (-1223);
      Vector3Float vector3Float1 = deadReckoningParameter0.getEntityAngularVelocity();
      assertEquals((-1223.0F), vector3Float1.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      Vector3Float vector3Float0 = deadReckoningParameter0.getEntityAngularVelocity();
      vector3Float0.setY(40);
      Vector3Float vector3Float1 = deadReckoningParameter0.getEntityAngularVelocity();
      assertEquals(0.0F, vector3Float1.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      Vector3Float vector3Float0 = deadReckoningParameter0.getEntityLinearAcceleration();
      vector3Float0.y = (float) (byte) (-80);
      deadReckoningParameter0.setEntityAngularVelocity(vector3Float0);
      Vector3Float vector3Float1 = deadReckoningParameter0.getEntityAngularVelocity();
      assertEquals((-80.0F), vector3Float1.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      Vector3Float vector3Float0 = deadReckoningParameter0.getEntityAngularVelocity();
      vector3Float0.setX(2222.5F);
      Vector3Float vector3Float1 = deadReckoningParameter0.getEntityAngularVelocity();
      assertSame(vector3Float1, vector3Float0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      Vector3Float vector3Float0 = deadReckoningParameter0.getEntityAngularVelocity();
      vector3Float0.x = (-1416.8F);
      Vector3Float vector3Float1 = deadReckoningParameter0.getEntityAngularVelocity();
      assertEquals(12, vector3Float1.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      deadReckoningParameter0.setDeadReckoningAlgorithm((byte)50);
      short short0 = deadReckoningParameter0.getDeadReckoningAlgorithm();
      assertEquals((short)50, short0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      deadReckoningParameter0.deadReckoningAlgorithm = (short) (-729);
      short short0 = deadReckoningParameter0.getDeadReckoningAlgorithm();
      assertEquals((short) (-729), short0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      boolean boolean0 = deadReckoningParameter0.equalsImpl(deadReckoningParameter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      byte[] byteArray0 = new byte[6];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        deadReckoningParameter0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      // Undeclared exception!
      try { 
        deadReckoningParameter0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.DeadReckoningParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(40);
      deadReckoningParameter0.marshal(byteBuffer0);
      // Undeclared exception!
      try { 
        deadReckoningParameter0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      // Undeclared exception!
      try { 
        deadReckoningParameter0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.DeadReckoningParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      deadReckoningParameter0.entityLinearAcceleration = null;
      // Undeclared exception!
      try { 
        deadReckoningParameter0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.DeadReckoningParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      deadReckoningParameter0.setEntityLinearAcceleration((Vector3Float) null);
      // Undeclared exception!
      try { 
        deadReckoningParameter0.equalsImpl(deadReckoningParameter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.DeadReckoningParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      DeadReckoningParameter deadReckoningParameter1 = new DeadReckoningParameter();
      deadReckoningParameter1.setOtherParameters((byte[]) null);
      // Undeclared exception!
      try { 
        deadReckoningParameter0.equals(deadReckoningParameter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.DeadReckoningParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      Vector3Float vector3Float0 = deadReckoningParameter0.getEntityAngularVelocity();
      vector3Float0.setX((short) (-3268));
      deadReckoningParameter0.setEntityLinearAcceleration(vector3Float0);
      DeadReckoningParameter deadReckoningParameter1 = new DeadReckoningParameter();
      boolean boolean0 = deadReckoningParameter0.equalsImpl(deadReckoningParameter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      Vector3Float vector3Float0 = deadReckoningParameter0.getEntityAngularVelocity();
      deadReckoningParameter0.entityLinearAcceleration = vector3Float0;
      vector3Float0.z = 6068.06F;
      DeadReckoningParameter deadReckoningParameter1 = new DeadReckoningParameter();
      boolean boolean0 = deadReckoningParameter0.equals(deadReckoningParameter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      deadReckoningParameter0.otherParameters = byteArray0;
      DeadReckoningParameter deadReckoningParameter1 = new DeadReckoningParameter();
      // Undeclared exception!
      try { 
        deadReckoningParameter0.equalsImpl(deadReckoningParameter1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("edu.nps.moves.dis.DeadReckoningParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      DeadReckoningParameter deadReckoningParameter1 = new DeadReckoningParameter();
      assertTrue(deadReckoningParameter1.equals((Object)deadReckoningParameter0));
      
      deadReckoningParameter1.deadReckoningAlgorithm = (short)1689;
      boolean boolean0 = deadReckoningParameter0.equalsImpl(deadReckoningParameter1);
      assertFalse(deadReckoningParameter1.equals((Object)deadReckoningParameter0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      Object object0 = new Object();
      boolean boolean0 = deadReckoningParameter0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      DeadReckoningParameter deadReckoningParameter1 = new DeadReckoningParameter();
      boolean boolean0 = deadReckoningParameter0.equals(deadReckoningParameter1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      boolean boolean0 = deadReckoningParameter0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      boolean boolean0 = deadReckoningParameter0.equals(deadReckoningParameter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      Vector3Float vector3Float0 = deadReckoningParameter0.getEntityAngularVelocity();
      boolean boolean0 = deadReckoningParameter0.equals(vector3Float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3868);
      deadReckoningParameter0.unmarshal(byteBuffer0);
      assertEquals(40, byteBuffer0.position());
      assertEquals((short)0, deadReckoningParameter0.getDeadReckoningAlgorithm());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      byte[] byteArray0 = deadReckoningParameter0.getOtherParameters();
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      byte[] byteArray0 = new byte[0];
      deadReckoningParameter0.setOtherParameters(byteArray0);
      DeadReckoningParameter deadReckoningParameter1 = new DeadReckoningParameter();
      // Undeclared exception!
      try { 
        deadReckoningParameter0.equals(deadReckoningParameter1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("edu.nps.moves.dis.DeadReckoningParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      int int0 = deadReckoningParameter0.getMarshalledSize();
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DeadReckoningParameter deadReckoningParameter0 = new DeadReckoningParameter();
      short short0 = deadReckoningParameter0.getDeadReckoningAlgorithm();
      assertEquals((short)0, short0);
  }
}
