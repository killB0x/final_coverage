/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:21:32 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.EntityID;
import edu.nps.moves.dis.TrackJamTarget;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TrackJamTarget_ESTest extends TrackJamTarget_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      trackJamTarget0.setBeamID((short) (-297));
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2392);
      trackJamTarget0.marshal(byteBuffer0);
      assertEquals((short) (-297), trackJamTarget0.getBeamID());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      trackJamTarget0.setTrackJam((EntityID) null);
      EntityID entityID0 = trackJamTarget0.getTrackJam();
      assertNull(entityID0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      trackJamTarget0.unmarshal(byteBuffer0);
      trackJamTarget0.getTrackJam();
      assertEquals((short)0, trackJamTarget0.getBeamID());
      assertEquals((short)0, trackJamTarget0.getEmitterID());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      EntityID entityID0 = new EntityID();
      trackJamTarget0.trackJam = entityID0;
      entityID0.site = (-2366);
      EntityID entityID1 = trackJamTarget0.getTrackJam();
      assertEquals(0, entityID1.getEntity());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte) (-71);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      trackJamTarget0.unmarshal(byteBuffer0);
      trackJamTarget0.getTrackJam();
      assertEquals((short)0, trackJamTarget0.getBeamID());
      assertEquals((short)0, trackJamTarget0.getEmitterID());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      EntityID entityID0 = trackJamTarget0.getTrackJam();
      entityID0.setEntity((-1));
      EntityID entityID1 = trackJamTarget0.getTrackJam();
      assertEquals(0, entityID1.getSite());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-19);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      trackJamTarget0.unmarshal(byteBuffer0);
      trackJamTarget0.getTrackJam();
      assertEquals((short)0, trackJamTarget0.getBeamID());
      assertEquals((short)0, trackJamTarget0.getEmitterID());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      trackJamTarget0.emitterID = (short)1337;
      short short0 = trackJamTarget0.getEmitterID();
      assertEquals((short)1337, short0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      trackJamTarget0.setEmitterID((short) (-2039));
      short short0 = trackJamTarget0.getEmitterID();
      assertEquals((short) (-2039), short0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      trackJamTarget0.setBeamID((short)398);
      short short0 = trackJamTarget0.getBeamID();
      assertEquals((short)398, short0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      trackJamTarget0.setBeamID((short) (-2061));
      short short0 = trackJamTarget0.getBeamID();
      assertEquals((short) (-2061), short0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        trackJamTarget0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3710);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        trackJamTarget0.marshal(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      // Undeclared exception!
      try { 
        trackJamTarget0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      // Undeclared exception!
      try { 
        trackJamTarget0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.EntityID", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      trackJamTarget0.trackJam = null;
      // Undeclared exception!
      try { 
        trackJamTarget0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.TrackJamTarget", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      trackJamTarget0.trackJam = null;
      // Undeclared exception!
      try { 
        trackJamTarget0.equalsImpl(trackJamTarget0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.TrackJamTarget", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      trackJamTarget0.setBeamID((short) (-2039));
      TrackJamTarget trackJamTarget1 = new TrackJamTarget();
      boolean boolean0 = trackJamTarget0.equalsImpl(trackJamTarget1);
      assertEquals((short) (-2039), trackJamTarget0.getBeamID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      trackJamTarget0.setEmitterID((short) (-2039));
      TrackJamTarget trackJamTarget1 = new TrackJamTarget();
      boolean boolean0 = trackJamTarget0.equalsImpl(trackJamTarget1);
      assertEquals((short) (-2039), trackJamTarget0.getEmitterID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      boolean boolean0 = trackJamTarget0.equalsImpl(trackJamTarget0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      trackJamTarget0.setBeamID((short)4973);
      TrackJamTarget trackJamTarget1 = new TrackJamTarget();
      boolean boolean0 = trackJamTarget0.equals(trackJamTarget1);
      assertEquals((short)4973, trackJamTarget0.getBeamID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      TrackJamTarget trackJamTarget1 = new TrackJamTarget();
      assertTrue(trackJamTarget1.equals((Object)trackJamTarget0));
      
      trackJamTarget1.emitterID = (short) (-1576);
      boolean boolean0 = trackJamTarget0.equals(trackJamTarget1);
      assertFalse(trackJamTarget1.equals((Object)trackJamTarget0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      TrackJamTarget trackJamTarget1 = new TrackJamTarget();
      assertTrue(trackJamTarget1.equals((Object)trackJamTarget0));
      
      EntityID entityID0 = new EntityID();
      entityID0.setSite((-2039));
      trackJamTarget1.setTrackJam(entityID0);
      boolean boolean0 = trackJamTarget0.equalsImpl(trackJamTarget1);
      assertFalse(trackJamTarget1.equals((Object)trackJamTarget0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      boolean boolean0 = trackJamTarget0.equalsImpl((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      Object object0 = new Object();
      boolean boolean0 = trackJamTarget0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      boolean boolean0 = trackJamTarget0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      boolean boolean0 = trackJamTarget0.equals(trackJamTarget0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      int int0 = trackJamTarget0.getMarshalledSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      short short0 = trackJamTarget0.getEmitterID();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      EntityID entityID0 = trackJamTarget0.getTrackJam();
      entityID0.setApplication((-3));
      EntityID entityID1 = trackJamTarget0.getTrackJam();
      assertEquals(6, entityID1.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      // Undeclared exception!
      try { 
        trackJamTarget0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.EntityID", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      short short0 = trackJamTarget0.getBeamID();
      assertEquals((short)0, short0);
  }
}
