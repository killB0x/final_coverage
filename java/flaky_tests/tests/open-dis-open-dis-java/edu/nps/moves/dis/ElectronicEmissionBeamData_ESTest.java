/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 10:51:53 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.ElectronicEmissionBeamData;
import edu.nps.moves.dis.FundamentalParameterData;
import edu.nps.moves.dis.TrackJamTarget;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ElectronicEmissionBeamData_ESTest extends ElectronicEmissionBeamData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      LinkedList<TrackJamTarget> linkedList0 = new LinkedList<TrackJamTarget>();
      electronicEmissionBeamData0.setTrackJamTargets(linkedList0);
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      linkedList0.add(trackJamTarget0);
      linkedList0.add(trackJamTarget0);
      boolean boolean0 = electronicEmissionBeamData0.equalsImpl(electronicEmissionBeamData0);
      assertEquals((short)2, electronicEmissionBeamData0.getNumberOfTrackJamTargets());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      ElectronicEmissionBeamData electronicEmissionBeamData1 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData1.setJammingModeSequence((-1379L));
      boolean boolean0 = electronicEmissionBeamData1.equals(electronicEmissionBeamData0);
      assertEquals((-1379L), electronicEmissionBeamData1.getJammingModeSequence());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      ElectronicEmissionBeamData electronicEmissionBeamData1 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setPad4((short) (-1195));
      boolean boolean0 = electronicEmissionBeamData0.equalsImpl(electronicEmissionBeamData1);
      assertEquals((short) (-1195), electronicEmissionBeamData0.getPad4());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setHighDensityTrackJam((short) (-1195));
      ElectronicEmissionBeamData electronicEmissionBeamData1 = new ElectronicEmissionBeamData();
      boolean boolean0 = electronicEmissionBeamData0.equalsImpl(electronicEmissionBeamData1);
      assertEquals((short) (-1195), electronicEmissionBeamData0.getHighDensityTrackJam());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      ElectronicEmissionBeamData electronicEmissionBeamData1 = new ElectronicEmissionBeamData();
      assertTrue(electronicEmissionBeamData1.equals((Object)electronicEmissionBeamData0));
      
      electronicEmissionBeamData0.setNumberOfTrackJamTargets((short)1);
      boolean boolean0 = electronicEmissionBeamData0.equalsImpl(electronicEmissionBeamData1);
      assertFalse(electronicEmissionBeamData1.equals((Object)electronicEmissionBeamData0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setBeamFunction((short) (-497));
      ElectronicEmissionBeamData electronicEmissionBeamData1 = new ElectronicEmissionBeamData();
      boolean boolean0 = electronicEmissionBeamData0.equals(electronicEmissionBeamData1);
      assertEquals((short) (-497), electronicEmissionBeamData0.getBeamFunction());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setBeamFunction((short)1495);
      boolean boolean0 = electronicEmissionBeamData0.equalsImpl(electronicEmissionBeamData0);
      assertEquals((short)1495, electronicEmissionBeamData0.getBeamFunction());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      ElectronicEmissionBeamData electronicEmissionBeamData1 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setBeamParameterIndex(1940);
      boolean boolean0 = electronicEmissionBeamData1.equalsImpl(electronicEmissionBeamData0);
      assertEquals(1940, electronicEmissionBeamData0.getBeamParameterIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setBeamIDNumber((short)3127);
      ElectronicEmissionBeamData electronicEmissionBeamData1 = new ElectronicEmissionBeamData();
      boolean boolean0 = electronicEmissionBeamData0.equalsImpl(electronicEmissionBeamData1);
      assertEquals((short)3127, electronicEmissionBeamData0.getBeamIDNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setBeamIDNumber((short) (-1996));
      boolean boolean0 = electronicEmissionBeamData0.equalsImpl(electronicEmissionBeamData0);
      assertEquals((short) (-1996), electronicEmissionBeamData0.getBeamIDNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      LinkedList<TrackJamTarget> linkedList0 = new LinkedList<TrackJamTarget>();
      electronicEmissionBeamData0.setTrackJamTargets(linkedList0);
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      linkedList0.add(trackJamTarget0);
      linkedList0.add(trackJamTarget0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2556);
      electronicEmissionBeamData0.marshal(byteBuffer0);
      assertEquals(2488, byteBuffer0.remaining());
      assertEquals((short)2, electronicEmissionBeamData0.getNumberOfTrackJamTargets());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setPad4((short)5006);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(52);
      electronicEmissionBeamData0.marshal(byteBuffer0);
      assertEquals((short)5006, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(52);
      electronicEmissionBeamData0.beamFunction = (short)151;
      electronicEmissionBeamData0.marshal(byteBuffer0);
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setNumberOfTrackJamTargets((short) (-107));
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(65535);
      electronicEmissionBeamData0.marshal(byteBuffer0);
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setBeamIDNumber((short) (-1996));
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2556);
      electronicEmissionBeamData0.marshal(byteBuffer0);
      assertEquals((short) (-1996), electronicEmissionBeamData0.getBeamIDNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setBeamDataLength((short) (-1));
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(52);
      electronicEmissionBeamData0.marshal(byteBuffer0);
      assertEquals((short) (-1), electronicEmissionBeamData0.getBeamDataLength());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      LinkedList<TrackJamTarget> linkedList0 = new LinkedList<TrackJamTarget>();
      electronicEmissionBeamData0.setTrackJamTargets(linkedList0);
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      linkedList0.add(trackJamTarget0);
      linkedList0.add(trackJamTarget0);
      int int0 = electronicEmissionBeamData0.getMarshalledSize();
      assertEquals((short)2, electronicEmissionBeamData0.getNumberOfTrackJamTargets());
      assertEquals(68, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setBeamParameterIndex((-497));
      int int0 = electronicEmissionBeamData0.getMarshalledSize();
      assertEquals((-497), electronicEmissionBeamData0.getBeamParameterIndex());
      assertEquals(52, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setTrackJamTargets((List<TrackJamTarget>) null);
      List<TrackJamTarget> list0 = electronicEmissionBeamData0.getTrackJamTargets();
      assertNull(list0);
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      LinkedList<TrackJamTarget> linkedList0 = new LinkedList<TrackJamTarget>();
      electronicEmissionBeamData0.setTrackJamTargets(linkedList0);
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      linkedList0.add(trackJamTarget0);
      electronicEmissionBeamData0.getTrackJamTargets();
      assertEquals((short)1, electronicEmissionBeamData0.getNumberOfTrackJamTargets());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setPad4((short)1691);
      short short0 = electronicEmissionBeamData0.getPad4();
      assertEquals((short)1691, short0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setPad4((short) (-1195));
      short short0 = electronicEmissionBeamData0.getPad4();
      assertEquals((short) (-1195), short0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      LinkedList<TrackJamTarget> linkedList0 = new LinkedList<TrackJamTarget>();
      electronicEmissionBeamData0.setTrackJamTargets(linkedList0);
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      linkedList0.add(trackJamTarget0);
      short short0 = electronicEmissionBeamData0.getNumberOfTrackJamTargets();
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.jammingModeSequence = (long) (short)255;
      long long0 = electronicEmissionBeamData0.getJammingModeSequence();
      assertEquals(255L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.jammingModeSequence = (-1L);
      long long0 = electronicEmissionBeamData0.getJammingModeSequence();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setHighDensityTrackJam((short)432);
      short short0 = electronicEmissionBeamData0.getHighDensityTrackJam();
      assertEquals((short)432, short0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setHighDensityTrackJam((short) (-4067));
      short short0 = electronicEmissionBeamData0.getHighDensityTrackJam();
      assertEquals((short) (-4067), short0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.fundamentalParameterData = null;
      electronicEmissionBeamData0.getFundamentalParameterData();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      FundamentalParameterData fundamentalParameterData0 = electronicEmissionBeamData0.fundamentalParameterData;
      fundamentalParameterData0.pulseWidth = 1.0F;
      electronicEmissionBeamData0.getFundamentalParameterData();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      FundamentalParameterData fundamentalParameterData0 = electronicEmissionBeamData0.getFundamentalParameterData();
      fundamentalParameterData0.pulseRepetitionFrequency = (-387.0F);
      electronicEmissionBeamData0.getFundamentalParameterData();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      electronicEmissionBeamData0.fundamentalParameterData = fundamentalParameterData0;
      fundamentalParameterData0.setFrequencyRange((-7747.958F));
      electronicEmissionBeamData0.getFundamentalParameterData();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      electronicEmissionBeamData0.fundamentalParameterData = fundamentalParameterData0;
      fundamentalParameterData0.setFrequency(4661.0F);
      electronicEmissionBeamData0.getFundamentalParameterData();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      FundamentalParameterData fundamentalParameterData0 = electronicEmissionBeamData0.fundamentalParameterData;
      fundamentalParameterData0.setFrequency((short) (-2376));
      electronicEmissionBeamData0.getFundamentalParameterData();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      FundamentalParameterData fundamentalParameterData0 = electronicEmissionBeamData0.getFundamentalParameterData();
      fundamentalParameterData0.effectiveRadiatedPower = (float) 52;
      electronicEmissionBeamData0.getFundamentalParameterData();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      FundamentalParameterData fundamentalParameterData0 = electronicEmissionBeamData0.fundamentalParameterData;
      fundamentalParameterData0.setEffectiveRadiatedPower((short) (-3653));
      electronicEmissionBeamData0.getFundamentalParameterData();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      FundamentalParameterData fundamentalParameterData0 = electronicEmissionBeamData0.fundamentalParameterData;
      fundamentalParameterData0.setBeamSweepSync(1.0F);
      electronicEmissionBeamData0.getFundamentalParameterData();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      FundamentalParameterData fundamentalParameterData0 = electronicEmissionBeamData0.getFundamentalParameterData();
      fundamentalParameterData0.setBeamSweepSync((-1722.5F));
      electronicEmissionBeamData0.getFundamentalParameterData();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      FundamentalParameterData fundamentalParameterData0 = electronicEmissionBeamData0.fundamentalParameterData;
      fundamentalParameterData0.setBeamElevationSweep(691.0F);
      electronicEmissionBeamData0.getFundamentalParameterData();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      FundamentalParameterData fundamentalParameterData0 = electronicEmissionBeamData0.getFundamentalParameterData();
      fundamentalParameterData0.setBeamElevationSweep((-4060.86F));
      electronicEmissionBeamData0.getFundamentalParameterData();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      FundamentalParameterData fundamentalParameterData0 = electronicEmissionBeamData0.getFundamentalParameterData();
      fundamentalParameterData0.beamElevationCenter = 4125.1F;
      electronicEmissionBeamData0.getFundamentalParameterData();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      electronicEmissionBeamData0.fundamentalParameterData = fundamentalParameterData0;
      fundamentalParameterData0.beamAzimuthSweep = (float) 3376;
      electronicEmissionBeamData0.getFundamentalParameterData();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      electronicEmissionBeamData0.fundamentalParameterData = fundamentalParameterData0;
      fundamentalParameterData0.setBeamAzimuthSweep((-513.009F));
      electronicEmissionBeamData0.getFundamentalParameterData();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      FundamentalParameterData fundamentalParameterData0 = electronicEmissionBeamData0.getFundamentalParameterData();
      fundamentalParameterData0.beamAzimuthCenter = 1.0F;
      electronicEmissionBeamData0.getFundamentalParameterData();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.beamParameterIndex = 52;
      int int0 = electronicEmissionBeamData0.getBeamParameterIndex();
      assertEquals(52, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.beamParameterIndex = (int) (short) (-4389);
      int int0 = electronicEmissionBeamData0.getBeamParameterIndex();
      assertEquals((-4389), int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setBeamIDNumber((short)4065);
      short short0 = electronicEmissionBeamData0.getBeamIDNumber();
      assertEquals((short)4065, short0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.beamIDNumber = (short) (-929);
      short short0 = electronicEmissionBeamData0.getBeamIDNumber();
      assertEquals((short) (-929), short0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.beamFunction = (short)1691;
      short short0 = electronicEmissionBeamData0.getBeamFunction();
      assertEquals((short)1691, short0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.beamFunction = (short) (-1737);
      short short0 = electronicEmissionBeamData0.getBeamFunction();
      assertEquals((short) (-1737), short0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setBeamDataLength((short)2);
      short short0 = electronicEmissionBeamData0.getBeamDataLength();
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.beamDataLength = (short) (-2001);
      short short0 = electronicEmissionBeamData0.getBeamDataLength();
      assertEquals((short) (-2001), short0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      // Undeclared exception!
      try { 
        electronicEmissionBeamData0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      // Undeclared exception!
      try { 
        electronicEmissionBeamData0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.ElectronicEmissionBeamData", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(4);
      // Undeclared exception!
      try { 
        electronicEmissionBeamData0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      // Undeclared exception!
      try { 
        electronicEmissionBeamData0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.ElectronicEmissionBeamData", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setTrackJamTargets((List<TrackJamTarget>) null);
      // Undeclared exception!
      try { 
        electronicEmissionBeamData0.getNumberOfTrackJamTargets();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.ElectronicEmissionBeamData", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.trackJamTargets = null;
      // Undeclared exception!
      try { 
        electronicEmissionBeamData0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.ElectronicEmissionBeamData", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.trackJamTargets = null;
      // Undeclared exception!
      try { 
        electronicEmissionBeamData0.equalsImpl(electronicEmissionBeamData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.ElectronicEmissionBeamData", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      LinkedList<TrackJamTarget> linkedList0 = new LinkedList<TrackJamTarget>();
      electronicEmissionBeamData0.setTrackJamTargets(linkedList0);
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      linkedList0.add(trackJamTarget0);
      ElectronicEmissionBeamData electronicEmissionBeamData1 = new ElectronicEmissionBeamData();
      // Undeclared exception!
      try { 
        electronicEmissionBeamData0.equalsImpl(electronicEmissionBeamData1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      LinkedList<TrackJamTarget> linkedList0 = new LinkedList<TrackJamTarget>();
      electronicEmissionBeamData0.setTrackJamTargets(linkedList0);
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      linkedList0.add(trackJamTarget0);
      ElectronicEmissionBeamData electronicEmissionBeamData1 = new ElectronicEmissionBeamData();
      // Undeclared exception!
      try { 
        electronicEmissionBeamData0.equals(electronicEmissionBeamData1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setBeamParameterIndex(840);
      ElectronicEmissionBeamData electronicEmissionBeamData1 = new ElectronicEmissionBeamData();
      boolean boolean0 = electronicEmissionBeamData0.equalsImpl(electronicEmissionBeamData1);
      assertEquals(840, electronicEmissionBeamData0.getBeamParameterIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setBeamIDNumber((short) (-1728));
      ElectronicEmissionBeamData electronicEmissionBeamData1 = new ElectronicEmissionBeamData();
      boolean boolean0 = electronicEmissionBeamData0.equalsImpl(electronicEmissionBeamData1);
      assertEquals((short) (-1728), electronicEmissionBeamData0.getBeamIDNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.beamDataLength = (short) (-2001);
      ElectronicEmissionBeamData electronicEmissionBeamData1 = new ElectronicEmissionBeamData();
      boolean boolean0 = electronicEmissionBeamData0.equalsImpl(electronicEmissionBeamData1);
      assertEquals((short)0, electronicEmissionBeamData1.getPad4());
      assertFalse(boolean0);
      assertFalse(electronicEmissionBeamData1.equals((Object)electronicEmissionBeamData0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      ElectronicEmissionBeamData electronicEmissionBeamData1 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData1.setJammingModeSequence((-1379L));
      boolean boolean0 = electronicEmissionBeamData0.equalsImpl(electronicEmissionBeamData1);
      assertEquals((-1379L), electronicEmissionBeamData1.getJammingModeSequence());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      ElectronicEmissionBeamData electronicEmissionBeamData1 = new ElectronicEmissionBeamData();
      assertTrue(electronicEmissionBeamData1.equals((Object)electronicEmissionBeamData0));
      
      electronicEmissionBeamData1.setNumberOfTrackJamTargets((short)14);
      boolean boolean0 = electronicEmissionBeamData0.equalsImpl(electronicEmissionBeamData1);
      assertFalse(electronicEmissionBeamData1.equals((Object)electronicEmissionBeamData0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setBeamAzimuthCenter((-4526.3525F));
      electronicEmissionBeamData0.setFundamentalParameterData(fundamentalParameterData0);
      ElectronicEmissionBeamData electronicEmissionBeamData1 = new ElectronicEmissionBeamData();
      boolean boolean0 = electronicEmissionBeamData0.equalsImpl(electronicEmissionBeamData1);
      assertEquals((short)0, electronicEmissionBeamData1.getPad4());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      ElectronicEmissionBeamData electronicEmissionBeamData1 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setBeamDataLength((short) (-1));
      boolean boolean0 = electronicEmissionBeamData1.equals(electronicEmissionBeamData0);
      assertEquals((short) (-1), electronicEmissionBeamData0.getBeamDataLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      boolean boolean0 = electronicEmissionBeamData0.equalsImpl((Object) null);
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      boolean boolean0 = electronicEmissionBeamData0.equals(trackJamTarget0);
      assertFalse(boolean0);
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      boolean boolean0 = electronicEmissionBeamData0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      boolean boolean0 = electronicEmissionBeamData0.equals(electronicEmissionBeamData0);
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2556);
      electronicEmissionBeamData0.unmarshal(byteBuffer0);
      assertEquals((short)0, electronicEmissionBeamData0.getHighDensityTrackJam());
      assertEquals((short)0, electronicEmissionBeamData0.getBeamFunction());
      assertEquals(0, electronicEmissionBeamData0.getBeamParameterIndex());
      assertEquals((short)0, electronicEmissionBeamData0.getBeamIDNumber());
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
      assertEquals((short)0, electronicEmissionBeamData0.getBeamDataLength());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      LinkedList<TrackJamTarget> linkedList0 = new LinkedList<TrackJamTarget>();
      electronicEmissionBeamData0.setTrackJamTargets(linkedList0);
      TrackJamTarget trackJamTarget0 = new TrackJamTarget();
      linkedList0.add(trackJamTarget0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2556);
      electronicEmissionBeamData0.marshal(byteBuffer0);
      byteBuffer0.flip();
      electronicEmissionBeamData0.unmarshal(byteBuffer0);
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals((short)2, electronicEmissionBeamData0.getNumberOfTrackJamTargets());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      int int0 = electronicEmissionBeamData0.getBeamParameterIndex();
      assertEquals(0, int0);
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.getTrackJamTargets();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.getJammingModeSequence();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setPad4((short)14);
      ElectronicEmissionBeamData electronicEmissionBeamData1 = new ElectronicEmissionBeamData();
      boolean boolean0 = electronicEmissionBeamData0.equalsImpl(electronicEmissionBeamData1);
      assertEquals((short)14, electronicEmissionBeamData0.getPad4());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.getBeamIDNumber();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.getNumberOfTrackJamTargets();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setHighDensityTrackJam((short)14);
      ElectronicEmissionBeamData electronicEmissionBeamData1 = new ElectronicEmissionBeamData();
      boolean boolean0 = electronicEmissionBeamData0.equalsImpl(electronicEmissionBeamData1);
      assertEquals((short)14, electronicEmissionBeamData0.getHighDensityTrackJam());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.getBeamFunction();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.getBeamDataLength();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      short short0 = electronicEmissionBeamData0.getPad4();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.setBeamFunction((short) (-751));
      ElectronicEmissionBeamData electronicEmissionBeamData1 = new ElectronicEmissionBeamData();
      boolean boolean0 = electronicEmissionBeamData1.equalsImpl(electronicEmissionBeamData0);
      assertEquals((short) (-751), electronicEmissionBeamData0.getBeamFunction());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ElectronicEmissionBeamData electronicEmissionBeamData0 = new ElectronicEmissionBeamData();
      electronicEmissionBeamData0.getHighDensityTrackJam();
      assertEquals((short)0, electronicEmissionBeamData0.getPad4());
  }
}
