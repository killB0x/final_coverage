/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:12:18 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.EntityID;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EntityID_ESTest extends EntityID_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.entity = 1368;
      entityID0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setSite((-414));
      entityID0.hashCode();
      assertEquals((-414), entityID0.getSite());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setApplication((-2427));
      entityID0.hashCode();
      assertEquals((-2427), entityID0.getApplication());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setSite((-414));
      EntityID entityID1 = new EntityID();
      boolean boolean0 = entityID1.equalsImpl(entityID0);
      assertEquals((-414), entityID0.getSite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setApplication((-2427));
      boolean boolean0 = entityID0.equalsImpl(entityID0);
      assertEquals((-2427), entityID0.getApplication());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(65535);
      entityID0.setEntity(65535);
      entityID0.marshal(byteBuffer0);
      assertEquals(65535, entityID0.getEntity());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(65535);
      entityID0.setSite(2265);
      entityID0.marshal(byteBuffer0);
      assertEquals(2265, entityID0.getSite());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setSite((-414));
      // Undeclared exception!
      try { 
        entityID0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.EntityID", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.entity = 1368;
      int int0 = entityID0.getMarshalledSize();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setApplication((-2427));
      int int0 = entityID0.getMarshalledSize();
      assertEquals((-2427), entityID0.getApplication());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setSite((-414));
      int int0 = entityID0.getMarshalledSize();
      assertEquals((-414), entityID0.getSite());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2529);
      entityID0.unmarshal(byteBuffer0);
      assertEquals(0, entityID0.getSite());
      assertEquals(0, entityID0.getEntity());
      assertEquals(0, entityID0.getApplication());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.site = 1;
      int int0 = entityID0.getSite();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.site = (-1116);
      int int0 = entityID0.getSite();
      assertEquals((-1116), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setEntity(1);
      int int0 = entityID0.getEntity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.entity = (-3321);
      int int0 = entityID0.getEntity();
      assertEquals((-3321), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setApplication(3109);
      int int0 = entityID0.getApplication();
      assertEquals(3109, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setApplication((-2427));
      int int0 = entityID0.getApplication();
      assertEquals((-2427), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(6);
      entityID0.marshal(byteBuffer0);
      // Undeclared exception!
      try { 
        entityID0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((byte)94);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        entityID0.marshal(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        entityID0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      EntityID entityID1 = new EntityID();
      entityID1.setEntity((-1791));
      boolean boolean0 = entityID0.equalsImpl(entityID1);
      assertEquals((-1791), entityID1.getEntity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setApplication((-2427));
      EntityID entityID1 = new EntityID();
      boolean boolean0 = entityID1.equalsImpl(entityID0);
      assertEquals((-2427), entityID0.getApplication());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      EntityID entityID1 = new EntityID();
      assertTrue(entityID1.equals((Object)entityID0));
      
      entityID1.application = 2925;
      boolean boolean0 = entityID0.equals(entityID1);
      assertFalse(entityID1.equals((Object)entityID0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setSite((-414));
      EntityID entityID1 = new EntityID();
      boolean boolean0 = entityID0.equalsImpl(entityID1);
      assertEquals((-414), entityID0.getSite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      Object object0 = new Object();
      boolean boolean0 = entityID0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      Object object0 = new Object();
      boolean boolean0 = entityID0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      boolean boolean0 = entityID0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      boolean boolean0 = entityID0.equals(entityID0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      int int0 = entityID0.getApplication();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      // Undeclared exception!
      try { 
        entityID0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.EntityID", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      int int0 = entityID0.getEntity();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setEntity((-1268));
      EntityID entityID1 = new EntityID();
      boolean boolean0 = entityID0.equals(entityID1);
      assertEquals((-1268), entityID0.getEntity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      int int0 = entityID0.getSite();
      assertEquals(0, int0);
  }
}
