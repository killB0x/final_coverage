/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 13:38:29 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.ModulationType;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ModulationType_ESTest extends ModulationType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setSystem((-1));
      ModulationType modulationType1 = new ModulationType();
      boolean boolean0 = modulationType0.equals(modulationType1);
      assertEquals((-1), modulationType0.getSystem());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.major = (-1);
      ModulationType modulationType1 = new ModulationType();
      boolean boolean0 = modulationType0.equals(modulationType1);
      assertFalse(boolean0);
      assertFalse(modulationType1.equals((Object)modulationType0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setSpreadSpectrum(593);
      ModulationType modulationType1 = new ModulationType();
      boolean boolean0 = modulationType0.equals(modulationType1);
      assertEquals(593, modulationType0.getSpreadSpectrum());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.major = 522;
      ModulationType modulationType1 = new ModulationType();
      boolean boolean0 = modulationType0.equals(modulationType1);
      assertFalse(modulationType1.equals((Object)modulationType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setDetail((-2452));
      boolean boolean0 = modulationType0.equalsImpl(modulationType0);
      assertEquals((-2452), modulationType0.getDetail());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      byte[] byteArray0 = new byte[9];
      modulationType0.setMajor((-434));
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      modulationType0.marshal(byteBuffer0);
      assertEquals((-434), modulationType0.getMajor());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      byte[] byteArray0 = new byte[9];
      modulationType0.setDetail(1);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      modulationType0.marshal(byteBuffer0);
      assertEquals(1, modulationType0.getDetail());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.system = 3032;
      byte[] byteArray0 = new byte[9];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      modulationType0.marshal(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)11, (byte) (-40), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setSpreadSpectrum(593);
      int int0 = modulationType0.getMarshalledSize();
      assertEquals(593, modulationType0.getSpreadSpectrum());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setMajor(1496);
      int int0 = modulationType0.getMarshalledSize();
      assertEquals(1496, modulationType0.getMajor());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.detail = 2161;
      int int0 = modulationType0.getMarshalledSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.system = 3032;
      int int0 = modulationType0.getMarshalledSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2080);
      modulationType0.unmarshal(byteBuffer0);
      assertEquals(0, modulationType0.getDetail());
      assertEquals(0, modulationType0.getSystem());
      assertEquals(0, modulationType0.getMajor());
      assertEquals(0, modulationType0.getSpreadSpectrum());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      byte[] byteArray0 = new byte[3];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        modulationType0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.system = 0;
      modulationType0.system = 2;
      int int0 = modulationType0.getSystem();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setSystem((-1));
      int int0 = modulationType0.getSystem();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setSpreadSpectrum(593);
      int int0 = modulationType0.getSpreadSpectrum();
      assertEquals(593, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setSpreadSpectrum((-288));
      int int0 = modulationType0.getSpreadSpectrum();
      assertEquals((-288), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setMajor((-1));
      int int0 = modulationType0.getMajor();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.detail = 268;
      int int0 = modulationType0.getDetail();
      assertEquals(268, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setDetail((-1));
      int int0 = modulationType0.getDetail();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(8);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        modulationType0.marshal(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      // Undeclared exception!
      try { 
        modulationType0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      // Undeclared exception!
      try { 
        modulationType0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.ModulationType", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      ModulationType modulationType1 = new ModulationType();
      modulationType0.setSystem((-2452));
      boolean boolean0 = modulationType1.equalsImpl(modulationType0);
      assertEquals((-2452), modulationType0.getSystem());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      ModulationType modulationType1 = new ModulationType();
      assertTrue(modulationType1.equals((Object)modulationType0));
      
      modulationType1.detail = (-1641);
      boolean boolean0 = modulationType0.equalsImpl(modulationType1);
      assertFalse(modulationType1.equals((Object)modulationType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.major = (-1);
      ModulationType modulationType1 = new ModulationType();
      boolean boolean0 = modulationType1.equalsImpl(modulationType0);
      assertFalse(modulationType0.equals((Object)modulationType1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setSpreadSpectrum((-1641));
      ModulationType modulationType1 = new ModulationType();
      boolean boolean0 = modulationType0.equalsImpl(modulationType1);
      assertEquals((-1641), modulationType0.getSpreadSpectrum());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      Object object0 = new Object();
      boolean boolean0 = modulationType0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      Object object0 = new Object();
      boolean boolean0 = modulationType0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      boolean boolean0 = modulationType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      boolean boolean0 = modulationType0.equals(modulationType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      int int0 = modulationType0.getSystem();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      // Undeclared exception!
      try { 
        modulationType0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.ModulationType", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setDetail((-1641));
      ModulationType modulationType1 = new ModulationType();
      boolean boolean0 = modulationType0.equalsImpl(modulationType1);
      assertEquals((-1641), modulationType0.getDetail());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      int int0 = modulationType0.getSpreadSpectrum();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setMajor(1496);
      int int0 = modulationType0.getMajor();
      assertEquals(1496, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      int int0 = modulationType0.getDetail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      int int0 = modulationType0.getMajor();
      assertEquals(0, int0);
  }
}
