/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:13:30 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.AggregateType;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AggregateType_ESTest extends AggregateType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setExtra((short) (-1));
      AggregateType aggregateType1 = new AggregateType();
      boolean boolean0 = aggregateType1.equals(aggregateType0);
      assertEquals((short) (-1), aggregateType0.getExtra());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setSpecificInfo((short)2265);
      AggregateType aggregateType1 = new AggregateType();
      boolean boolean0 = aggregateType0.equalsImpl(aggregateType1);
      assertEquals((short)2265, aggregateType0.getSpecificInfo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.category = (short) (-122);
      AggregateType aggregateType1 = new AggregateType();
      boolean boolean0 = aggregateType0.equalsImpl(aggregateType1);
      assertFalse(boolean0);
      assertFalse(aggregateType1.equals((Object)aggregateType0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      AggregateType aggregateType1 = new AggregateType();
      aggregateType0.setDomain((short) (-668));
      boolean boolean0 = aggregateType0.equalsImpl(aggregateType1);
      assertEquals((short) (-668), aggregateType0.getDomain());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setExtra((short)2287);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(255);
      aggregateType0.marshal(byteBuffer0);
      assertEquals((short)2287, aggregateType0.getExtra());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setDomain((short) (-1));
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(8);
      aggregateType0.marshal(byteBuffer0);
      assertEquals((short) (-1), aggregateType0.getDomain());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(550);
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.aggregateKind = (short)1179;
      aggregateType0.marshal(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.subcategory = (short) (-122);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(550);
      aggregateType0.marshal(byteBuffer0);
      assertEquals("java.nio.DirectByteBuffer[pos=8 lim=550 cap=550]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setCategory((short) (-7));
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(8);
      aggregateType0.marshal(byteBuffer0);
      assertEquals((short) (-7), aggregateType0.getCategory());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setCountry(2);
      int int0 = aggregateType0.getMarshalledSize();
      assertEquals(2, aggregateType0.getCountry());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3490);
      aggregateType0.unmarshal(byteBuffer0);
      assertEquals((short)0, aggregateType0.getCategory());
      assertEquals((short)0, aggregateType0.getSubcategory());
      assertEquals((short)0, aggregateType0.getDomain());
      assertEquals(0, aggregateType0.getCountry());
      assertEquals((short)0, aggregateType0.getAggregateKind());
      assertEquals((short)0, aggregateType0.getSpecificInfo());
      assertEquals((short)0, aggregateType0.getExtra());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        aggregateType0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setSubcategory((short)1);
      short short0 = aggregateType0.getSubcategory();
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setSpecificInfo((short) (-3338));
      short short0 = aggregateType0.getSpecificInfo();
      assertEquals((short) (-3338), short0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setExtra((short)2287);
      short short0 = aggregateType0.getExtra();
      assertEquals((short)2287, short0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.extra = (short) (-345);
      short short0 = aggregateType0.getExtra();
      assertEquals((short) (-345), short0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setDomain((short)417);
      short short0 = aggregateType0.getDomain();
      assertEquals((short)417, short0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setDomain((short) (-1468));
      short short0 = aggregateType0.getDomain();
      assertEquals((short) (-1468), short0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setCountry((short)1);
      int int0 = aggregateType0.getCountry();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setCountry((-803));
      int int0 = aggregateType0.getCountry();
      assertEquals((-803), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setCategory((short)1);
      short short0 = aggregateType0.getCategory();
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setCategory((short) (-7));
      short short0 = aggregateType0.getCategory();
      assertEquals((short) (-7), short0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.aggregateKind = (short)2;
      short short0 = aggregateType0.getAggregateKind();
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setAggregateKind((short) (-796));
      short short0 = aggregateType0.getAggregateKind();
      assertEquals((short) (-796), short0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      boolean boolean0 = aggregateType0.equalsImpl(aggregateType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2798);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        aggregateType0.marshal(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      // Undeclared exception!
      try { 
        aggregateType0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      // Undeclared exception!
      try { 
        aggregateType0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.AggregateType", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      AggregateType aggregateType1 = new AggregateType();
      assertTrue(aggregateType1.equals((Object)aggregateType0));
      
      aggregateType1.category = (short) (-1);
      boolean boolean0 = aggregateType0.equalsImpl(aggregateType1);
      assertFalse(aggregateType1.equals((Object)aggregateType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.country = (int) (short)2265;
      AggregateType aggregateType1 = new AggregateType();
      boolean boolean0 = aggregateType0.equalsImpl(aggregateType1);
      assertFalse(boolean0);
      assertFalse(aggregateType1.equals((Object)aggregateType0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      AggregateType aggregateType1 = new AggregateType();
      aggregateType1.setAggregateKind((short) (-965));
      boolean boolean0 = aggregateType1.equalsImpl(aggregateType0);
      assertEquals((short) (-965), aggregateType1.getAggregateKind());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setExtra((short)17);
      AggregateType aggregateType1 = new AggregateType();
      boolean boolean0 = aggregateType1.equals(aggregateType0);
      assertEquals((short)17, aggregateType0.getExtra());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      AggregateType aggregateType1 = new AggregateType();
      aggregateType0.setSpecificInfo((short) (-1));
      boolean boolean0 = aggregateType0.equalsImpl(aggregateType1);
      assertEquals((short) (-1), aggregateType0.getSpecificInfo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      AggregateType aggregateType1 = new AggregateType();
      assertTrue(aggregateType1.equals((Object)aggregateType0));
      
      aggregateType1.subcategory = (short) (-122);
      boolean boolean0 = aggregateType0.equals(aggregateType1);
      assertFalse(aggregateType1.equals((Object)aggregateType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setCountry((short)1);
      AggregateType aggregateType1 = new AggregateType();
      boolean boolean0 = aggregateType1.equals(aggregateType0);
      assertEquals(1, aggregateType0.getCountry());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      AggregateType aggregateType1 = new AggregateType();
      aggregateType0.setDomain((short) (-1286));
      boolean boolean0 = aggregateType1.equalsImpl(aggregateType0);
      assertEquals((short) (-1286), aggregateType0.getDomain());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      AggregateType aggregateType1 = new AggregateType();
      aggregateType1.setAggregateKind((short) (-965));
      boolean boolean0 = aggregateType0.equals(aggregateType1);
      assertEquals((short) (-965), aggregateType1.getAggregateKind());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      Object object0 = new Object();
      boolean boolean0 = aggregateType0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      Object object0 = new Object();
      boolean boolean0 = aggregateType0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      boolean boolean0 = aggregateType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      boolean boolean0 = aggregateType0.equals(aggregateType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      int int0 = aggregateType0.getCountry();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      short short0 = aggregateType0.getSpecificInfo();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setExtra((short) (-668));
      AggregateType aggregateType1 = new AggregateType();
      boolean boolean0 = aggregateType0.equalsImpl(aggregateType1);
      assertEquals((short) (-668), aggregateType0.getExtra());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      short short0 = aggregateType0.getAggregateKind();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      short short0 = aggregateType0.getCategory();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      int int0 = aggregateType0.getMarshalledSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      short short0 = aggregateType0.getDomain();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      short short0 = aggregateType0.getExtra();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      // Undeclared exception!
      try { 
        aggregateType0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.AggregateType", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setSpecificInfo((short)581);
      short short0 = aggregateType0.getSpecificInfo();
      assertEquals((short)581, short0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      short short0 = aggregateType0.getSubcategory();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AggregateType aggregateType0 = new AggregateType();
      aggregateType0.setSubcategory((short) (-1));
      short short0 = aggregateType0.getSubcategory();
      assertEquals((short) (-1), short0);
  }
}
