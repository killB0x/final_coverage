/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:38:12 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.RadioEntityType;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RadioEntityType_ESTest extends RadioEntityType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.setNomenclature(2109);
      RadioEntityType radioEntityType1 = new RadioEntityType();
      boolean boolean0 = radioEntityType0.equalsImpl(radioEntityType1);
      assertEquals(2109, radioEntityType0.getNomenclature());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.setNomenclatureVersion((short)964);
      RadioEntityType radioEntityType1 = new RadioEntityType();
      boolean boolean0 = radioEntityType0.equalsImpl(radioEntityType1);
      assertEquals((short)964, radioEntityType0.getNomenclatureVersion());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      RadioEntityType radioEntityType1 = new RadioEntityType();
      assertTrue(radioEntityType1.equals((Object)radioEntityType0));
      
      radioEntityType0.category = (short) (-2739);
      boolean boolean0 = radioEntityType0.equalsImpl(radioEntityType1);
      assertFalse(radioEntityType1.equals((Object)radioEntityType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.entityKind = (short)255;
      RadioEntityType radioEntityType1 = new RadioEntityType();
      boolean boolean0 = radioEntityType0.equalsImpl(radioEntityType1);
      assertFalse(boolean0);
      assertFalse(radioEntityType1.equals((Object)radioEntityType0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.nomenclatureVersion = (short) (-2739);
      boolean boolean0 = radioEntityType0.equalsImpl(radioEntityType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      byte[] byteArray0 = new byte[7];
      radioEntityType0.nomenclature = (int) (byte) (-1);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        radioEntityType0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.setDomain((short)2476);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((short)2476);
      radioEntityType0.marshal(byteBuffer0);
      assertEquals((short)2476, radioEntityType0.getDomain());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      byte[] byteArray0 = new byte[5];
      radioEntityType0.entityKind = (short) (-1575);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        radioEntityType0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.nomenclatureVersion = (short)4100;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(8);
      radioEntityType0.marshal(byteBuffer0);
      assertEquals(0, byteBuffer0.arrayOffset());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.setNomenclature(2109);
      int int0 = radioEntityType0.getMarshalledSize();
      assertEquals(2109, radioEntityType0.getNomenclature());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.country = (-3812);
      int int0 = radioEntityType0.getMarshalledSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.setNomenclatureVersion((short)595);
      short short0 = radioEntityType0.getNomenclatureVersion();
      assertEquals((short)595, short0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.nomenclatureVersion = (short) (-1);
      short short0 = radioEntityType0.getNomenclatureVersion();
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.setNomenclature(2109);
      int int0 = radioEntityType0.getNomenclature();
      assertEquals(2109, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.nomenclature = (int) (short) (-2739);
      int int0 = radioEntityType0.getNomenclature();
      assertEquals((-2739), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.setEntityKind((short)1006);
      short short0 = radioEntityType0.getEntityKind();
      assertEquals((short)1006, short0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.entityKind = (short) (-1536);
      short short0 = radioEntityType0.getEntityKind();
      assertEquals((short) (-1536), short0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.setDomain((short)2476);
      short short0 = radioEntityType0.getDomain();
      assertEquals((short)2476, short0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.domain = (short) (-2739);
      short short0 = radioEntityType0.getDomain();
      assertEquals((short) (-2739), short0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.country = (int) (short)1;
      int int0 = radioEntityType0.getCountry();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.setCountry((short) (-1));
      int int0 = radioEntityType0.getCountry();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.setCategory((short)3401);
      short short0 = radioEntityType0.getCategory();
      assertEquals((short)3401, short0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.category = (short)1;
      radioEntityType0.category = (short) (-2739);
      short short0 = radioEntityType0.getCategory();
      assertEquals((short) (-2739), short0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      // Undeclared exception!
      try { 
        radioEntityType0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      // Undeclared exception!
      try { 
        radioEntityType0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.RadioEntityType", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((short)778);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        radioEntityType0.marshal(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      // Undeclared exception!
      try { 
        radioEntityType0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.RadioEntityType", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      RadioEntityType radioEntityType1 = new RadioEntityType();
      assertTrue(radioEntityType1.equals((Object)radioEntityType0));
      
      radioEntityType1.country = (-3640);
      boolean boolean0 = radioEntityType0.equalsImpl(radioEntityType1);
      assertFalse(radioEntityType1.equals((Object)radioEntityType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      RadioEntityType radioEntityType1 = new RadioEntityType();
      radioEntityType1.setDomain((short)1);
      boolean boolean0 = radioEntityType0.equalsImpl(radioEntityType1);
      assertEquals((short)1, radioEntityType1.getDomain());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      RadioEntityType radioEntityType1 = new RadioEntityType();
      assertTrue(radioEntityType1.equals((Object)radioEntityType0));
      
      radioEntityType1.nomenclature = (int) (short)2476;
      boolean boolean0 = radioEntityType0.equalsImpl(radioEntityType1);
      assertFalse(radioEntityType1.equals((Object)radioEntityType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      RadioEntityType radioEntityType1 = new RadioEntityType();
      assertTrue(radioEntityType1.equals((Object)radioEntityType0));
      
      radioEntityType1.nomenclatureVersion = (short)1;
      boolean boolean0 = radioEntityType0.equalsImpl(radioEntityType1);
      assertFalse(radioEntityType1.equals((Object)radioEntityType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      RadioEntityType radioEntityType1 = new RadioEntityType();
      radioEntityType0.setCategory((short)595);
      boolean boolean0 = radioEntityType0.equalsImpl(radioEntityType1);
      assertEquals((short)595, radioEntityType0.getCategory());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      RadioEntityType radioEntityType1 = new RadioEntityType();
      assertTrue(radioEntityType1.equals((Object)radioEntityType0));
      
      radioEntityType1.country = (-2136);
      boolean boolean0 = radioEntityType1.equals(radioEntityType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.setDomain((short)2476);
      RadioEntityType radioEntityType1 = new RadioEntityType();
      boolean boolean0 = radioEntityType0.equals(radioEntityType1);
      assertEquals((short)2476, radioEntityType0.getDomain());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      radioEntityType0.setEntityKind((short) (-2331));
      RadioEntityType radioEntityType1 = new RadioEntityType();
      boolean boolean0 = radioEntityType0.equalsImpl(radioEntityType1);
      assertEquals((short) (-2331), radioEntityType0.getEntityKind());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      boolean boolean0 = radioEntityType0.equalsImpl((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      Object object0 = new Object();
      boolean boolean0 = radioEntityType0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      RadioEntityType radioEntityType1 = new RadioEntityType();
      boolean boolean0 = radioEntityType0.equals(radioEntityType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      boolean boolean0 = radioEntityType0.equals(radioEntityType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      boolean boolean0 = radioEntityType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      int int0 = radioEntityType0.getNomenclature();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      int int0 = radioEntityType0.getCountry();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((short)778);
      radioEntityType0.unmarshal(byteBuffer0);
      assertEquals(0, radioEntityType0.getNomenclature());
      assertEquals((short)0, radioEntityType0.getDomain());
      assertEquals((short)0, radioEntityType0.getNomenclatureVersion());
      assertEquals((short)0, radioEntityType0.getCategory());
      assertEquals((short)0, radioEntityType0.getEntityKind());
      assertEquals(0, radioEntityType0.getCountry());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      short short0 = radioEntityType0.getNomenclatureVersion();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      short short0 = radioEntityType0.getCategory();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      short short0 = radioEntityType0.getDomain();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RadioEntityType radioEntityType0 = new RadioEntityType();
      short short0 = radioEntityType0.getEntityKind();
      assertEquals((short)0, short0);
  }
}
