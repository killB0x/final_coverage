/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:35:37 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.VectoringNozzleSystemData;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class VectoringNozzleSystemData_ESTest extends VectoringNozzleSystemData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      vectoringNozzleSystemData0.setVerticalDeflectionAngle(8);
      byte[] byteArray0 = new byte[8];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      vectoringNozzleSystemData0.marshal(byteBuffer0);
      assertEquals(8.0F, vectoringNozzleSystemData0.getVerticalDeflectionAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1064);
      vectoringNozzleSystemData0.unmarshal(byteBuffer0);
      assertEquals(8, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      vectoringNozzleSystemData0.setVerticalDeflectionAngle(1.0F);
      float float0 = vectoringNozzleSystemData0.getVerticalDeflectionAngle();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      vectoringNozzleSystemData0.setVerticalDeflectionAngle((-1.0F));
      float float0 = vectoringNozzleSystemData0.getVerticalDeflectionAngle();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      vectoringNozzleSystemData0.horizontalDeflectionAngle = (float) 8;
      float float0 = vectoringNozzleSystemData0.getHorizontalDeflectionAngle();
      assertEquals(8.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      vectoringNozzleSystemData0.horizontalDeflectionAngle = (-1.0F);
      float float0 = vectoringNozzleSystemData0.getHorizontalDeflectionAngle();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        vectoringNozzleSystemData0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        vectoringNozzleSystemData0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      VectoringNozzleSystemData vectoringNozzleSystemData1 = new VectoringNozzleSystemData();
      assertTrue(vectoringNozzleSystemData1.equals((Object)vectoringNozzleSystemData0));
      
      vectoringNozzleSystemData1.verticalDeflectionAngle = 1.0F;
      boolean boolean0 = vectoringNozzleSystemData0.equalsImpl(vectoringNozzleSystemData1);
      assertFalse(vectoringNozzleSystemData1.equals((Object)vectoringNozzleSystemData0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      VectoringNozzleSystemData vectoringNozzleSystemData1 = new VectoringNozzleSystemData();
      vectoringNozzleSystemData0.setHorizontalDeflectionAngle(663.54F);
      boolean boolean0 = vectoringNozzleSystemData1.equalsImpl(vectoringNozzleSystemData0);
      assertEquals(663.54F, vectoringNozzleSystemData0.getHorizontalDeflectionAngle(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      boolean boolean0 = vectoringNozzleSystemData0.equalsImpl(vectoringNozzleSystemData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      Object object0 = new Object();
      boolean boolean0 = vectoringNozzleSystemData0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      byte[] byteArray0 = new byte[6];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      boolean boolean0 = vectoringNozzleSystemData0.equals(byteBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      boolean boolean0 = vectoringNozzleSystemData0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      boolean boolean0 = vectoringNozzleSystemData0.equals(vectoringNozzleSystemData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      VectoringNozzleSystemData vectoringNozzleSystemData1 = new VectoringNozzleSystemData();
      boolean boolean0 = vectoringNozzleSystemData0.equals(vectoringNozzleSystemData1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      // Undeclared exception!
      try { 
        vectoringNozzleSystemData0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.VectoringNozzleSystemData", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      float float0 = vectoringNozzleSystemData0.getVerticalDeflectionAngle();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      vectoringNozzleSystemData0.setVerticalDeflectionAngle(8);
      VectoringNozzleSystemData vectoringNozzleSystemData1 = new VectoringNozzleSystemData();
      boolean boolean0 = vectoringNozzleSystemData0.equals(vectoringNozzleSystemData1);
      assertEquals(8.0F, vectoringNozzleSystemData0.getVerticalDeflectionAngle(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      // Undeclared exception!
      try { 
        vectoringNozzleSystemData0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.VectoringNozzleSystemData", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      int int0 = vectoringNozzleSystemData0.getMarshalledSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      float float0 = vectoringNozzleSystemData0.getHorizontalDeflectionAngle();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VectoringNozzleSystemData vectoringNozzleSystemData0 = new VectoringNozzleSystemData();
      vectoringNozzleSystemData0.setHorizontalDeflectionAngle(2018.76F);
      VectoringNozzleSystemData vectoringNozzleSystemData1 = new VectoringNozzleSystemData();
      boolean boolean0 = vectoringNozzleSystemData0.equals(vectoringNozzleSystemData1);
      assertEquals(2018.76F, vectoringNozzleSystemData0.getHorizontalDeflectionAngle(), 0.01F);
      assertFalse(boolean0);
  }
}
