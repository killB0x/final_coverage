/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 11:19:38 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.FundamentalParameterData;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FundamentalParameterData_ESTest extends FundamentalParameterData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      assertTrue(fundamentalParameterData1.equals((Object)fundamentalParameterData0));
      
      fundamentalParameterData1.beamSweepSync = (-690.94F);
      boolean boolean0 = fundamentalParameterData1.equals(fundamentalParameterData0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      fundamentalParameterData1.setBeamElevationSweep(294.1F);
      boolean boolean0 = fundamentalParameterData0.equalsImpl(fundamentalParameterData1);
      assertEquals(294.1F, fundamentalParameterData1.getBeamElevationSweep(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setBeamElevationCenter(1.0F);
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      boolean boolean0 = fundamentalParameterData0.equalsImpl(fundamentalParameterData1);
      assertEquals(1.0F, fundamentalParameterData0.getBeamElevationCenter(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.beamElevationCenter = 2901.568F;
      boolean boolean0 = fundamentalParameterData0.equalsImpl(fundamentalParameterData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      fundamentalParameterData0.setBeamAzimuthSweep(435.854F);
      boolean boolean0 = fundamentalParameterData0.equalsImpl(fundamentalParameterData1);
      assertEquals(435.854F, fundamentalParameterData0.getBeamAzimuthSweep(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setBeamAzimuthSweep((-1578.9414F));
      boolean boolean0 = fundamentalParameterData0.equalsImpl(fundamentalParameterData0);
      assertEquals((-1578.9414F), fundamentalParameterData0.getBeamAzimuthSweep(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      assertTrue(fundamentalParameterData1.equals((Object)fundamentalParameterData0));
      
      fundamentalParameterData1.pulseWidth = (float) 40;
      boolean boolean0 = fundamentalParameterData1.equalsImpl(fundamentalParameterData0);
      assertFalse(fundamentalParameterData1.equals((Object)fundamentalParameterData0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      fundamentalParameterData1.setPulseRepetitionFrequency((-2494.4F));
      boolean boolean0 = fundamentalParameterData1.equalsImpl(fundamentalParameterData0);
      assertEquals((-2494.4F), fundamentalParameterData1.getPulseRepetitionFrequency(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.effectiveRadiatedPower = (-2549.9312F);
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      boolean boolean0 = fundamentalParameterData1.equalsImpl(fundamentalParameterData0);
      assertFalse(boolean0);
      assertFalse(fundamentalParameterData0.equals((Object)fundamentalParameterData1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.effectiveRadiatedPower = (-2549.9312F);
      boolean boolean0 = fundamentalParameterData0.equalsImpl(fundamentalParameterData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.frequencyRange = (-2323.98F);
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      boolean boolean0 = fundamentalParameterData1.equalsImpl(fundamentalParameterData0);
      assertFalse(boolean0);
      assertFalse(fundamentalParameterData0.equals((Object)fundamentalParameterData1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setFrequency(1.0F);
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      boolean boolean0 = fundamentalParameterData0.equalsImpl(fundamentalParameterData1);
      assertEquals(1.0F, fundamentalParameterData0.getFrequency(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      assertTrue(fundamentalParameterData1.equals((Object)fundamentalParameterData0));
      
      fundamentalParameterData1.frequency = 1.0F;
      boolean boolean0 = fundamentalParameterData0.equalsImpl(fundamentalParameterData1);
      assertFalse(fundamentalParameterData1.equals((Object)fundamentalParameterData0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setBeamElevationSweep(292.0F);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2530);
      fundamentalParameterData0.marshal(byteBuffer0);
      assertEquals(292.0F, fundamentalParameterData0.getBeamElevationSweep(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setBeamAzimuthSweep((-1.0F));
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2530);
      fundamentalParameterData0.marshal(byteBuffer0);
      assertEquals((-1.0F), fundamentalParameterData0.getBeamAzimuthSweep(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setPulseWidth((-1.0F));
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2132);
      fundamentalParameterData0.marshal(byteBuffer0);
      assertEquals((-1.0F), fundamentalParameterData0.getPulseWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setFrequencyRange((-3088.684F));
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2132);
      fundamentalParameterData0.marshal(byteBuffer0);
      assertEquals((-3088.684F), fundamentalParameterData0.getFrequencyRange(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setEffectiveRadiatedPower(5.750676F);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2507);
      fundamentalParameterData0.marshal(byteBuffer0);
      assertEquals(5.750676F, fundamentalParameterData0.getEffectiveRadiatedPower(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setBeamElevationCenter((-1.0F));
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2132);
      fundamentalParameterData0.marshal(byteBuffer0);
      assertEquals((-1.0F), fundamentalParameterData0.getBeamElevationCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.pulseRepetitionFrequency = (-1.0F);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2132);
      fundamentalParameterData0.marshal(byteBuffer0);
      assertEquals(0.0F, fundamentalParameterData0.getBeamSweepSync(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2530);
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.beamSweepSync = (-690.94F);
      fundamentalParameterData0.marshal(byteBuffer0);
      assertEquals(40, fundamentalParameterData0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setFrequency((-1.0F));
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2530);
      fundamentalParameterData0.marshal(byteBuffer0);
      assertEquals((-1.0F), fundamentalParameterData0.getFrequency(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(40);
      fundamentalParameterData0.unmarshal(byteBuffer0);
      assertEquals(0.0F, fundamentalParameterData0.getBeamSweepSync(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      byte[] byteArray0 = new byte[8];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        fundamentalParameterData0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setPulseWidth(1.0F);
      float float0 = fundamentalParameterData0.getPulseWidth();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.pulseWidth = (-1895.0F);
      float float0 = fundamentalParameterData0.getPulseWidth();
      assertEquals((-1895.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setPulseRepetitionFrequency(29.6F);
      float float0 = fundamentalParameterData0.getPulseRepetitionFrequency();
      assertEquals(29.6F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setPulseRepetitionFrequency((-1.0F));
      float float0 = fundamentalParameterData0.getPulseRepetitionFrequency();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.frequencyRange = 1060.6F;
      float float0 = fundamentalParameterData0.getFrequencyRange();
      assertEquals(1060.6F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.frequencyRange = (-959.26F);
      float float0 = fundamentalParameterData0.getFrequencyRange();
      assertEquals((-959.26F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setFrequency(819.2354F);
      float float0 = fundamentalParameterData0.getFrequency();
      assertEquals(819.2354F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setFrequency((-1.0F));
      float float0 = fundamentalParameterData0.getFrequency();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setEffectiveRadiatedPower(991.2755F);
      float float0 = fundamentalParameterData0.getEffectiveRadiatedPower();
      assertEquals(991.2755F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setEffectiveRadiatedPower((-1357.2F));
      float float0 = fundamentalParameterData0.getEffectiveRadiatedPower();
      assertEquals((-1357.2F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setBeamSweepSync(199.32974F);
      float float0 = fundamentalParameterData0.getBeamSweepSync();
      assertEquals(199.32974F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setBeamSweepSync((-813.91595F));
      float float0 = fundamentalParameterData0.getBeamSweepSync();
      assertEquals((-813.91595F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setBeamElevationSweep(1466.349F);
      float float0 = fundamentalParameterData0.getBeamElevationSweep();
      assertEquals(1466.349F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setBeamElevationSweep((-1640.891F));
      float float0 = fundamentalParameterData0.getBeamElevationSweep();
      assertEquals((-1640.891F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setBeamElevationCenter(2546.5789F);
      float float0 = fundamentalParameterData0.getBeamElevationCenter();
      assertEquals(2546.5789F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setBeamElevationCenter((-145.47836F));
      float float0 = fundamentalParameterData0.getBeamElevationCenter();
      assertEquals((-145.47836F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.beamAzimuthSweep = 2521.734F;
      float float0 = fundamentalParameterData0.getBeamAzimuthSweep();
      assertEquals(2521.734F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.beamAzimuthSweep = (-980.6327F);
      float float0 = fundamentalParameterData0.getBeamAzimuthSweep();
      assertEquals((-980.6327F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setBeamAzimuthCenter(2797.5F);
      float float0 = fundamentalParameterData0.getBeamAzimuthCenter();
      assertEquals(2797.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setBeamAzimuthCenter((-690.94F));
      float float0 = fundamentalParameterData0.getBeamAzimuthCenter();
      assertEquals((-690.94F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      // Undeclared exception!
      try { 
        fundamentalParameterData0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.FundamentalParameterData", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        fundamentalParameterData0.marshal(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      byte[] byteArray0 = new byte[3];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        fundamentalParameterData0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      // Undeclared exception!
      try { 
        fundamentalParameterData0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.FundamentalParameterData", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.beamSweepSync = (-926.7487F);
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      boolean boolean0 = fundamentalParameterData1.equalsImpl(fundamentalParameterData0);
      assertFalse(boolean0);
      assertFalse(fundamentalParameterData0.equals((Object)fundamentalParameterData1));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setBeamElevationSweep(130.304F);
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      boolean boolean0 = fundamentalParameterData0.equalsImpl(fundamentalParameterData1);
      assertEquals(130.304F, fundamentalParameterData0.getBeamElevationSweep(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.beamAzimuthCenter = (-2549.9312F);
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      boolean boolean0 = fundamentalParameterData0.equalsImpl(fundamentalParameterData1);
      assertFalse(boolean0);
      assertFalse(fundamentalParameterData1.equals((Object)fundamentalParameterData0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      assertTrue(fundamentalParameterData1.equals((Object)fundamentalParameterData0));
      
      fundamentalParameterData1.pulseWidth = (float) 40;
      boolean boolean0 = fundamentalParameterData0.equalsImpl(fundamentalParameterData1);
      assertFalse(fundamentalParameterData1.equals((Object)fundamentalParameterData0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.frequencyRange = (-980.6327F);
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      boolean boolean0 = fundamentalParameterData0.equalsImpl(fundamentalParameterData1);
      assertFalse(boolean0);
      assertFalse(fundamentalParameterData1.equals((Object)fundamentalParameterData0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      fundamentalParameterData1.setBeamElevationCenter(1644.8F);
      boolean boolean0 = fundamentalParameterData0.equalsImpl(fundamentalParameterData1);
      assertEquals(1644.8F, fundamentalParameterData1.getBeamElevationCenter(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setBeamAzimuthSweep((-1.0F));
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      boolean boolean0 = fundamentalParameterData0.equalsImpl(fundamentalParameterData1);
      assertEquals((-1.0F), fundamentalParameterData0.getBeamAzimuthSweep(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      fundamentalParameterData1.setPulseRepetitionFrequency((-2494.4F));
      boolean boolean0 = fundamentalParameterData0.equalsImpl(fundamentalParameterData1);
      assertEquals((-2494.4F), fundamentalParameterData1.getPulseRepetitionFrequency(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      fundamentalParameterData0.setEffectiveRadiatedPower((-1.0F));
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      boolean boolean0 = fundamentalParameterData0.equalsImpl(fundamentalParameterData1);
      assertEquals((-1.0F), fundamentalParameterData0.getEffectiveRadiatedPower(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      Object object0 = new Object();
      boolean boolean0 = fundamentalParameterData0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      FundamentalParameterData fundamentalParameterData1 = new FundamentalParameterData();
      boolean boolean0 = fundamentalParameterData0.equals(fundamentalParameterData1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      boolean boolean0 = fundamentalParameterData0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      boolean boolean0 = fundamentalParameterData0.equals(fundamentalParameterData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2530);
      boolean boolean0 = fundamentalParameterData0.equals(byteBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      float float0 = fundamentalParameterData0.getBeamAzimuthCenter();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      float float0 = fundamentalParameterData0.getBeamAzimuthSweep();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      int int0 = fundamentalParameterData0.getMarshalledSize();
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      float float0 = fundamentalParameterData0.getBeamElevationCenter();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      float float0 = fundamentalParameterData0.getEffectiveRadiatedPower();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      float float0 = fundamentalParameterData0.getPulseRepetitionFrequency();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      float float0 = fundamentalParameterData0.getFrequency();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      float float0 = fundamentalParameterData0.getPulseWidth();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      float float0 = fundamentalParameterData0.getFrequencyRange();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      float float0 = fundamentalParameterData0.getBeamElevationSweep();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FundamentalParameterData fundamentalParameterData0 = new FundamentalParameterData();
      float float0 = fundamentalParameterData0.getBeamSweepSync();
      assertEquals(0.0F, float0, 0.01F);
  }
}
