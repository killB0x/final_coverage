/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:00:59 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.AngularVelocityVector;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AngularVelocityVector_ESTest extends AngularVelocityVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      angularVelocityVector0.setY((-49.3219F));
      AngularVelocityVector angularVelocityVector1 = new AngularVelocityVector();
      boolean boolean0 = angularVelocityVector1.equalsImpl(angularVelocityVector0);
      assertEquals((-49.3219F), angularVelocityVector0.getY(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      byte[] byteArray0 = new byte[9];
      angularVelocityVector0.setX(1.0F);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        angularVelocityVector0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      angularVelocityVector0.setY((-0.12727357F));
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1696);
      angularVelocityVector0.marshal(byteBuffer0);
      assertEquals((-0.12727357F), angularVelocityVector0.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1873);
      angularVelocityVector0.unmarshal(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      angularVelocityVector0.z = (-61.65F);
      float float0 = angularVelocityVector0.getZ();
      assertEquals((-61.65F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      angularVelocityVector0.y = 373.8577F;
      float float0 = angularVelocityVector0.getY();
      assertEquals(373.8577F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      assertEquals(0.0F, angularVelocityVector0.getY(), 0.01F);
      
      angularVelocityVector0.setY((-1.0F));
      float float0 = angularVelocityVector0.getY();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      angularVelocityVector0.setX(99.2733F);
      float float0 = angularVelocityVector0.getX();
      assertEquals(99.2733F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      assertEquals(0.0F, angularVelocityVector0.getX(), 0.01F);
      
      angularVelocityVector0.x = (-1.0F);
      float float0 = angularVelocityVector0.getX();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      boolean boolean0 = angularVelocityVector0.equalsImpl(angularVelocityVector0);
      assertEquals(0.0F, angularVelocityVector0.getY(), 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, angularVelocityVector0.getX(), 0.01F);
      assertEquals(0.0F, angularVelocityVector0.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        angularVelocityVector0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      assertEquals(0.0F, angularVelocityVector0.getZ(), 0.01F);
      
      angularVelocityVector0.z = (float) (byte) (-75);
      AngularVelocityVector angularVelocityVector1 = new AngularVelocityVector();
      boolean boolean0 = angularVelocityVector1.equalsImpl(angularVelocityVector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      angularVelocityVector0.setX((byte) (-96));
      AngularVelocityVector angularVelocityVector1 = new AngularVelocityVector();
      boolean boolean0 = angularVelocityVector1.equalsImpl(angularVelocityVector0);
      assertEquals((-96.0F), angularVelocityVector0.getX(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      angularVelocityVector0.setZ((-1016.082F));
      AngularVelocityVector angularVelocityVector1 = new AngularVelocityVector();
      boolean boolean0 = angularVelocityVector0.equals(angularVelocityVector1);
      assertEquals((-1016.082F), angularVelocityVector0.getZ(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      Object object0 = new Object();
      boolean boolean0 = angularVelocityVector0.equalsImpl(object0);
      assertFalse(boolean0);
      assertEquals(0.0F, angularVelocityVector0.getX(), 0.01F);
      assertEquals(0.0F, angularVelocityVector0.getZ(), 0.01F);
      assertEquals(0.0F, angularVelocityVector0.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      Object object0 = new Object();
      boolean boolean0 = angularVelocityVector0.equals(object0);
      assertEquals(0.0F, angularVelocityVector0.getY(), 0.01F);
      assertEquals(0.0F, angularVelocityVector0.getX(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, angularVelocityVector0.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      boolean boolean0 = angularVelocityVector0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0F, angularVelocityVector0.getZ(), 0.01F);
      assertEquals(0.0F, angularVelocityVector0.getY(), 0.01F);
      assertEquals(0.0F, angularVelocityVector0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      boolean boolean0 = angularVelocityVector0.equals(angularVelocityVector0);
      assertTrue(boolean0);
      assertEquals(0.0F, angularVelocityVector0.getZ(), 0.01F);
      assertEquals(0.0F, angularVelocityVector0.getX(), 0.01F);
      assertEquals(0.0F, angularVelocityVector0.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      // Undeclared exception!
      try { 
        angularVelocityVector0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.AngularVelocityVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      angularVelocityVector0.setZ(237.303F);
      float float0 = angularVelocityVector0.getZ();
      assertEquals(237.303F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      int int0 = angularVelocityVector0.getMarshalledSize();
      assertEquals(0.0F, angularVelocityVector0.getZ(), 0.01F);
      assertEquals(0.0F, angularVelocityVector0.getY(), 0.01F);
      assertEquals(0.0F, angularVelocityVector0.getX(), 0.01F);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      // Undeclared exception!
      try { 
        angularVelocityVector0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.AngularVelocityVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      angularVelocityVector0.setY((-1.0F));
      AngularVelocityVector angularVelocityVector1 = new AngularVelocityVector();
      boolean boolean0 = angularVelocityVector0.equalsImpl(angularVelocityVector1);
      assertFalse(boolean0);
      assertEquals((-1.0F), angularVelocityVector0.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      float float0 = angularVelocityVector0.getX();
      assertEquals(0.0F, angularVelocityVector0.getY(), 0.01F);
      assertEquals(0.0F, angularVelocityVector0.getZ(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      float float0 = angularVelocityVector0.getZ();
      assertEquals(0.0F, angularVelocityVector0.getY(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, angularVelocityVector0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      float float0 = angularVelocityVector0.getY();
      assertEquals(0.0F, angularVelocityVector0.getX(), 0.01F);
      assertEquals(0.0F, angularVelocityVector0.getZ(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AngularVelocityVector angularVelocityVector0 = new AngularVelocityVector();
      angularVelocityVector0.setX((-1.0F));
      AngularVelocityVector angularVelocityVector1 = new AngularVelocityVector();
      boolean boolean0 = angularVelocityVector0.equals(angularVelocityVector1);
      assertEquals((-1.0F), angularVelocityVector0.getX(), 0.01F);
      assertFalse(boolean0);
  }
}
