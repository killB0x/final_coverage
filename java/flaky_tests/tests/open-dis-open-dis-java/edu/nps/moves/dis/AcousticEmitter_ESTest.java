/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:19:17 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.AcousticEmitter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AcousticEmitter_ESTest extends AcousticEmitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((short)2062);
      acousticEmitter0.acousticIdNumber = (short) (byte) (-6);
      acousticEmitter0.marshal(byteBuffer0);
      assertEquals(4, acousticEmitter0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      acousticEmitter0.acousticName = (-570);
      int int0 = acousticEmitter0.getMarshalledSize();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1047);
      acousticEmitter0.unmarshal(byteBuffer0);
      assertEquals((short)0, acousticEmitter0.getFunction());
      assertEquals((short)0, acousticEmitter0.getAcousticIdNumber());
      assertEquals(0, acousticEmitter0.getAcousticName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      acousticEmitter0.function = (short) (-608);
      short short0 = acousticEmitter0.getFunction();
      assertEquals((short) (-608), short0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      acousticEmitter0.setAcousticName(3413);
      int int0 = acousticEmitter0.getAcousticName();
      assertEquals(3413, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      acousticEmitter0.setAcousticName((-1));
      int int0 = acousticEmitter0.getAcousticName();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      acousticEmitter0.acousticIdNumber = (short)1540;
      short short0 = acousticEmitter0.getAcousticIdNumber();
      assertEquals((short)1540, short0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      acousticEmitter0.acousticIdNumber = (short) (-959);
      short short0 = acousticEmitter0.getAcousticIdNumber();
      assertEquals((short) (-959), short0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      // Undeclared exception!
      try { 
        acousticEmitter0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.AcousticEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      // Undeclared exception!
      try { 
        acousticEmitter0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      // Undeclared exception!
      try { 
        acousticEmitter0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.AcousticEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      AcousticEmitter acousticEmitter1 = new AcousticEmitter();
      acousticEmitter0.setAcousticIdNumber((short)764);
      boolean boolean0 = acousticEmitter1.equalsImpl(acousticEmitter0);
      assertEquals((short)764, acousticEmitter0.getAcousticIdNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      AcousticEmitter acousticEmitter1 = new AcousticEmitter();
      assertTrue(acousticEmitter1.equals((Object)acousticEmitter0));
      
      acousticEmitter1.function = (short)1;
      boolean boolean0 = acousticEmitter1.equalsImpl(acousticEmitter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      AcousticEmitter acousticEmitter1 = new AcousticEmitter();
      assertTrue(acousticEmitter1.equals((Object)acousticEmitter0));
      
      acousticEmitter1.acousticName = (-570);
      boolean boolean0 = acousticEmitter1.equalsImpl(acousticEmitter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      boolean boolean0 = acousticEmitter0.equalsImpl(acousticEmitter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      AcousticEmitter acousticEmitter1 = new AcousticEmitter();
      acousticEmitter0.setAcousticIdNumber((short)764);
      boolean boolean0 = acousticEmitter0.equals(acousticEmitter1);
      assertEquals((short)764, acousticEmitter0.getAcousticIdNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      AcousticEmitter acousticEmitter1 = new AcousticEmitter();
      assertTrue(acousticEmitter1.equals((Object)acousticEmitter0));
      
      acousticEmitter1.function = (short)1;
      boolean boolean0 = acousticEmitter0.equals(acousticEmitter1);
      assertFalse(acousticEmitter1.equals((Object)acousticEmitter0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      AcousticEmitter acousticEmitter1 = new AcousticEmitter();
      assertTrue(acousticEmitter1.equals((Object)acousticEmitter0));
      
      acousticEmitter1.acousticName = (-570);
      boolean boolean0 = acousticEmitter0.equals(acousticEmitter1);
      assertFalse(acousticEmitter1.equals((Object)acousticEmitter0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1047);
      boolean boolean0 = acousticEmitter0.equalsImpl(byteBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1047);
      boolean boolean0 = acousticEmitter0.equals(byteBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      boolean boolean0 = acousticEmitter0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      boolean boolean0 = acousticEmitter0.equals(acousticEmitter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      short short0 = acousticEmitter0.getAcousticIdNumber();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      int int0 = acousticEmitter0.getAcousticName();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2);
      // Undeclared exception!
      try { 
        acousticEmitter0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      short short0 = acousticEmitter0.getFunction();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AcousticEmitter acousticEmitter0 = new AcousticEmitter();
      acousticEmitter0.setFunction((short)1015);
      short short0 = acousticEmitter0.getFunction();
      assertEquals((short)1015, short0);
  }
}
