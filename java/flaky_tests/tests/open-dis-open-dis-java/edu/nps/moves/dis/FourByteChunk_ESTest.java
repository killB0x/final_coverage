/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 13:27:19 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.FourByteChunk;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FourByteChunk_ESTest extends FourByteChunk_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      FourByteChunk fourByteChunk1 = new FourByteChunk();
      assertTrue(fourByteChunk1.equals((Object)fourByteChunk0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      fourByteChunk1.otherParameters = byteArray0;
      boolean boolean0 = fourByteChunk0.equalsImpl(fourByteChunk1);
      assertFalse(fourByteChunk1.equals((Object)fourByteChunk0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      fourByteChunk0.setOtherParameters((byte[]) null);
      byte[] byteArray0 = fourByteChunk0.getOtherParameters();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        fourByteChunk0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      // Undeclared exception!
      try { 
        fourByteChunk0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.FourByteChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2269);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        fourByteChunk0.marshal(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        fourByteChunk0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      // Undeclared exception!
      try { 
        fourByteChunk0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.FourByteChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      fourByteChunk0.otherParameters = null;
      // Undeclared exception!
      try { 
        fourByteChunk0.equalsImpl(fourByteChunk0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.FourByteChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      FourByteChunk fourByteChunk1 = new FourByteChunk();
      fourByteChunk1.setOtherParameters((byte[]) null);
      // Undeclared exception!
      try { 
        fourByteChunk0.equals(fourByteChunk1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.FourByteChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      FourByteChunk fourByteChunk1 = new FourByteChunk();
      byte[] byteArray0 = new byte[0];
      fourByteChunk0.setOtherParameters(byteArray0);
      // Undeclared exception!
      try { 
        fourByteChunk1.equals(fourByteChunk0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("edu.nps.moves.dis.FourByteChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      boolean boolean0 = fourByteChunk0.equalsImpl(fourByteChunk0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      fourByteChunk0.setOtherParameters(byteArray0);
      FourByteChunk fourByteChunk1 = new FourByteChunk();
      // Undeclared exception!
      try { 
        fourByteChunk0.equalsImpl(fourByteChunk1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("edu.nps.moves.dis.FourByteChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      Object object0 = new Object();
      boolean boolean0 = fourByteChunk0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      Object object0 = new Object();
      boolean boolean0 = fourByteChunk0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      boolean boolean0 = fourByteChunk0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      boolean boolean0 = fourByteChunk0.equals(fourByteChunk0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((byte)35);
      fourByteChunk0.unmarshal(byteBuffer0);
      assertEquals(4, byteBuffer0.position());
      assertEquals(31, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((byte)35);
      fourByteChunk0.marshal(byteBuffer0);
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=35 cap=35]", byteBuffer0.toString());
      assertEquals(31, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      byte[] byteArray0 = new byte[0];
      fourByteChunk0.setOtherParameters(byteArray0);
      byte[] byteArray1 = fourByteChunk0.getOtherParameters();
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      int int0 = fourByteChunk0.getMarshalledSize();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FourByteChunk fourByteChunk0 = new FourByteChunk();
      byte[] byteArray0 = fourByteChunk0.getOtherParameters();
      assertEquals(4, byteArray0.length);
  }
}
