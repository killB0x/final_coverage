/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:07:50 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.AcousticEmitterSystem;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AcousticEmitterSystem_ESTest extends AcousticEmitterSystem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      acousticEmitterSystem0.acousticID = (short)793;
      AcousticEmitterSystem acousticEmitterSystem1 = new AcousticEmitterSystem();
      boolean boolean0 = acousticEmitterSystem1.equalsImpl(acousticEmitterSystem0);
      assertFalse(boolean0);
      assertFalse(acousticEmitterSystem0.equals((Object)acousticEmitterSystem1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      acousticEmitterSystem0.acousticFunction = (short)0;
      acousticEmitterSystem0.acousticFunction = (short)2029;
      AcousticEmitterSystem acousticEmitterSystem1 = new AcousticEmitterSystem();
      boolean boolean0 = acousticEmitterSystem0.equals(acousticEmitterSystem1);
      assertFalse(acousticEmitterSystem1.equals((Object)acousticEmitterSystem0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      acousticEmitterSystem0.setAcousticID((short)943);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((short)943);
      acousticEmitterSystem0.marshal(byteBuffer0);
      assertEquals((short)943, acousticEmitterSystem0.getAcousticID());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      acousticEmitterSystem0.setAcousticName((-1));
      int int0 = acousticEmitterSystem0.getMarshalledSize();
      assertEquals((-1), acousticEmitterSystem0.getAcousticName());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      acousticEmitterSystem0.setAcousticName((short)1);
      int int0 = acousticEmitterSystem0.getAcousticName();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      acousticEmitterSystem0.acousticName = (int) (short) (-1962);
      int int0 = acousticEmitterSystem0.getAcousticName();
      assertEquals((-1962), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)64;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      acousticEmitterSystem0.unmarshal(byteBuffer0);
      short short0 = acousticEmitterSystem0.getAcousticID();
      assertEquals((short)64, short0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      acousticEmitterSystem0.setAcousticID((short) (-1962));
      short short0 = acousticEmitterSystem0.getAcousticID();
      assertEquals((short) (-1962), short0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      acousticEmitterSystem0.setAcousticFunction((short)1);
      short short0 = acousticEmitterSystem0.getAcousticFunction();
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      acousticEmitterSystem0.setAcousticFunction((short) (-1));
      short short0 = acousticEmitterSystem0.getAcousticFunction();
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      boolean boolean0 = acousticEmitterSystem0.equalsImpl(acousticEmitterSystem0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      // Undeclared exception!
      try { 
        acousticEmitterSystem0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      // Undeclared exception!
      try { 
        acousticEmitterSystem0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.AcousticEmitterSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3455);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        acousticEmitterSystem0.marshal(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        acousticEmitterSystem0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      // Undeclared exception!
      try { 
        acousticEmitterSystem0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.AcousticEmitterSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      AcousticEmitterSystem acousticEmitterSystem1 = new AcousticEmitterSystem();
      acousticEmitterSystem1.setAcousticFunction((short) (-4453));
      boolean boolean0 = acousticEmitterSystem1.equalsImpl(acousticEmitterSystem0);
      assertEquals((short) (-4453), acousticEmitterSystem1.getAcousticFunction());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      AcousticEmitterSystem acousticEmitterSystem1 = new AcousticEmitterSystem();
      acousticEmitterSystem0.setAcousticName(1);
      boolean boolean0 = acousticEmitterSystem1.equalsImpl(acousticEmitterSystem0);
      assertEquals(1, acousticEmitterSystem0.getAcousticName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      AcousticEmitterSystem acousticEmitterSystem1 = new AcousticEmitterSystem();
      acousticEmitterSystem1.setAcousticID((short)1231);
      boolean boolean0 = acousticEmitterSystem1.equalsImpl(acousticEmitterSystem0);
      assertEquals((short)1231, acousticEmitterSystem1.getAcousticID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      acousticEmitterSystem0.acousticName = 1;
      AcousticEmitterSystem acousticEmitterSystem1 = new AcousticEmitterSystem();
      boolean boolean0 = acousticEmitterSystem0.equals(acousticEmitterSystem1);
      assertFalse(boolean0);
      assertFalse(acousticEmitterSystem1.equals((Object)acousticEmitterSystem0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      Object object0 = new Object();
      boolean boolean0 = acousticEmitterSystem0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      AcousticEmitterSystem acousticEmitterSystem1 = new AcousticEmitterSystem();
      boolean boolean0 = acousticEmitterSystem0.equals(acousticEmitterSystem1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      boolean boolean0 = acousticEmitterSystem0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      boolean boolean0 = acousticEmitterSystem0.equals(acousticEmitterSystem0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      Object object0 = new Object();
      boolean boolean0 = acousticEmitterSystem0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      short short0 = acousticEmitterSystem0.getAcousticFunction();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      short short0 = acousticEmitterSystem0.getAcousticID();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AcousticEmitterSystem acousticEmitterSystem0 = new AcousticEmitterSystem();
      int int0 = acousticEmitterSystem0.getAcousticName();
      assertEquals(0, int0);
  }
}
