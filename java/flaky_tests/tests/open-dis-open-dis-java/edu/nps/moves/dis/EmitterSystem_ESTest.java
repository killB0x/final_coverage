/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:06:44 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.EmitterSystem;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EmitterSystem_ESTest extends EmitterSystem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.emitterIdNumber = (short)1056;
      EmitterSystem emitterSystem1 = new EmitterSystem();
      boolean boolean0 = emitterSystem0.equalsImpl(emitterSystem1);
      assertFalse(emitterSystem1.equals((Object)emitterSystem0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      EmitterSystem emitterSystem1 = new EmitterSystem();
      emitterSystem1.setFunction((short)1056);
      boolean boolean0 = emitterSystem0.equalsImpl(emitterSystem1);
      assertEquals((short)1056, emitterSystem1.getFunction());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterName((-112));
      EmitterSystem emitterSystem1 = new EmitterSystem();
      boolean boolean0 = emitterSystem0.equalsImpl(emitterSystem1);
      assertEquals((-112), emitterSystem0.getEmitterName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterIdNumber((short) (-1));
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1309);
      emitterSystem0.marshal(byteBuffer0);
      assertEquals((short) (-1), emitterSystem0.getEmitterIdNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterName((short)84);
      int int0 = emitterSystem0.getMarshalledSize();
      assertEquals(84, emitterSystem0.getEmitterName());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(65535);
      emitterSystem0.unmarshal(byteBuffer0);
      assertEquals((short)0, emitterSystem0.getEmitterIdNumber());
      assertEquals(0, emitterSystem0.getEmitterName());
      assertEquals((short)0, emitterSystem0.getFunction());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setFunction((short)761);
      short short0 = emitterSystem0.getFunction();
      assertEquals((short)761, short0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.function = (short) (-1589);
      short short0 = emitterSystem0.getFunction();
      assertEquals((short) (-1589), short0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterName((short)84);
      int int0 = emitterSystem0.getEmitterName();
      assertEquals(84, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterName((-2718));
      int int0 = emitterSystem0.getEmitterName();
      assertEquals((-2718), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.emitterIdNumber = (short)1056;
      short short0 = emitterSystem0.getEmitterIdNumber();
      assertEquals((short)1056, short0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterIdNumber((short) (-896));
      short short0 = emitterSystem0.getEmitterIdNumber();
      assertEquals((short) (-896), short0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      boolean boolean0 = emitterSystem0.equalsImpl(emitterSystem0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      // Undeclared exception!
      try { 
        emitterSystem0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.EmitterSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(255);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        emitterSystem0.marshal(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      // Undeclared exception!
      try { 
        emitterSystem0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.EmitterSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      Object object0 = new Object();
      boolean boolean0 = emitterSystem0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      EmitterSystem emitterSystem1 = new EmitterSystem();
      boolean boolean0 = emitterSystem0.equals(emitterSystem1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      boolean boolean0 = emitterSystem0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      boolean boolean0 = emitterSystem0.equals(emitterSystem0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      Object object0 = new Object();
      boolean boolean0 = emitterSystem0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((short)0);
      // Undeclared exception!
      try { 
        emitterSystem0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      short short0 = emitterSystem0.getEmitterIdNumber();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterIdNumber((short) (-2619));
      EmitterSystem emitterSystem1 = new EmitterSystem();
      boolean boolean0 = emitterSystem0.equalsImpl(emitterSystem1);
      assertEquals((short) (-2619), emitterSystem0.getEmitterIdNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterName((short)84);
      EmitterSystem emitterSystem1 = new EmitterSystem();
      boolean boolean0 = emitterSystem0.equalsImpl(emitterSystem1);
      assertEquals(84, emitterSystem0.getEmitterName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      short short0 = emitterSystem0.getFunction();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setFunction((short)84);
      EmitterSystem emitterSystem1 = new EmitterSystem();
      boolean boolean0 = emitterSystem0.equalsImpl(emitterSystem1);
      assertEquals((short)84, emitterSystem0.getFunction());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      int int0 = emitterSystem0.getEmitterName();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        emitterSystem0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
}
