/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 15:10:46 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.ApaData;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ApaData_ESTest extends ApaData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      apaData0.parameterIndex = (-1);
      int int0 = apaData0.getMarshalledSize();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(4014);
      apaData0.unmarshal(byteBuffer0);
      assertEquals(0, apaData0.getParameterIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      byte[] byteArray0 = new byte[7];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      apaData0.marshal(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      apaData0.parameterValue = (short)2769;
      short short0 = apaData0.getParameterValue();
      assertEquals((short)2769, short0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      apaData0.setParameterValue((short) (-2928));
      short short0 = apaData0.getParameterValue();
      assertEquals((short) (-2928), short0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      apaData0.parameterIndex = 3833;
      int int0 = apaData0.getParameterIndex();
      assertEquals(3833, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      apaData0.parameterIndex = (-1);
      int int0 = apaData0.getParameterIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      // Undeclared exception!
      try { 
        apaData0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        apaData0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      apaData0.setParameterValue((short) (-2928));
      ApaData apaData1 = new ApaData();
      boolean boolean0 = apaData0.equalsImpl(apaData1);
      assertEquals((short) (-2928), apaData0.getParameterValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      apaData0.parameterIndex = (-1);
      ApaData apaData1 = new ApaData();
      boolean boolean0 = apaData0.equalsImpl(apaData1);
      assertFalse(boolean0);
      assertFalse(apaData1.equals((Object)apaData0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      boolean boolean0 = apaData0.equalsImpl(apaData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      apaData0.parameterValue = (short)2769;
      ApaData apaData1 = new ApaData();
      boolean boolean0 = apaData0.equals(apaData1);
      assertFalse(boolean0);
      assertFalse(apaData1.equals((Object)apaData0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      apaData0.parameterIndex = 3833;
      ApaData apaData1 = new ApaData();
      boolean boolean0 = apaData0.equals(apaData1);
      assertFalse(apaData1.equals((Object)apaData0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      Object object0 = new Object();
      boolean boolean0 = apaData0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      ApaData apaData1 = new ApaData();
      boolean boolean0 = apaData0.equals(apaData1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      boolean boolean0 = apaData0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      boolean boolean0 = apaData0.equals(apaData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      Object object0 = new Object();
      boolean boolean0 = apaData0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      // Undeclared exception!
      try { 
        apaData0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.ApaData", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      int int0 = apaData0.getParameterIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      short short0 = apaData0.getParameterValue();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      apaData0.setParameterIndex((short) (-2928));
      assertEquals((-2928), apaData0.getParameterIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ApaData apaData0 = new ApaData();
      // Undeclared exception!
      try { 
        apaData0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.ApaData", e);
      }
  }
}
