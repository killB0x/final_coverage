/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:38:56 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.EntityType;
import edu.nps.moves.dis.SupplyQuantity;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SupplyQuantity_ESTest extends SupplyQuantity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(255);
      supplyQuantity0.unmarshal(byteBuffer0);
      assertEquals((short)0, supplyQuantity0.getQuantity());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((short)1868);
      supplyQuantity0.marshal(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      supplyQuantity0.setSupplyType((EntityType) null);
      EntityType entityType0 = supplyQuantity0.getSupplyType();
      assertNull(entityType0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      EntityType entityType0 = supplyQuantity0.getSupplyType();
      entityType0.setSubcategory((short)1926);
      EntityType entityType1 = supplyQuantity0.getSupplyType();
      assertSame(entityType1, entityType0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      EntityType entityType0 = supplyQuantity0.getSupplyType();
      entityType0.setSubcategory((short) (-1560));
      EntityType entityType1 = supplyQuantity0.getSupplyType();
      assertSame(entityType1, entityType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      EntityType entityType0 = supplyQuantity0.getSupplyType();
      entityType0.setSpec((short) (-2455));
      EntityType entityType1 = supplyQuantity0.getSupplyType();
      assertSame(entityType1, entityType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      supplyQuantity0.supplyType.setExtra((short)731);
      EntityType entityType0 = supplyQuantity0.getSupplyType();
      assertEquals((short)0, entityType0.getDomain());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      EntityType entityType0 = supplyQuantity0.getSupplyType();
      entityType0.setExtra((short) (-752));
      EntityType entityType1 = supplyQuantity0.getSupplyType();
      assertEquals((short) (-752), entityType1.getExtra());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      EntityType entityType0 = new EntityType();
      supplyQuantity0.setSupplyType(entityType0);
      entityType0.entityKind = (short)1472;
      EntityType entityType1 = supplyQuantity0.getSupplyType();
      assertEquals((short)1472, entityType1.getEntityKind());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      EntityType entityType0 = supplyQuantity0.getSupplyType();
      entityType0.setEntityKind((short) (-1560));
      EntityType entityType1 = supplyQuantity0.getSupplyType();
      assertSame(entityType1, entityType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      supplyQuantity0.supplyType.setDomain((short)731);
      EntityType entityType0 = supplyQuantity0.getSupplyType();
      assertEquals(0, entityType0.getCountry());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      EntityType entityType0 = supplyQuantity0.getSupplyType();
      entityType0.setDomain((short) (-1261));
      EntityType entityType1 = supplyQuantity0.getSupplyType();
      assertSame(entityType1, entityType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      supplyQuantity0.supplyType.setCountry((short)731);
      EntityType entityType0 = supplyQuantity0.getSupplyType();
      assertEquals(731, entityType0.getCountry());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      EntityType entityType0 = supplyQuantity0.getSupplyType();
      entityType0.country = (int) (short) (-521);
      EntityType entityType1 = supplyQuantity0.getSupplyType();
      assertEquals((-521), entityType1.getCountry());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      EntityType entityType0 = supplyQuantity0.getSupplyType();
      entityType0.category = (short)731;
      EntityType entityType1 = supplyQuantity0.getSupplyType();
      assertEquals((short)0, entityType1.getEntityKind());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      EntityType entityType0 = supplyQuantity0.getSupplyType();
      entityType0.category = (short)1831;
      entityType0.category = (short) (-3489);
      EntityType entityType1 = supplyQuantity0.getSupplyType();
      assertEquals(0, entityType1.getCountry());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      supplyQuantity0.setQuantity((short)1512);
      short short0 = supplyQuantity0.getQuantity();
      assertEquals((short)1512, short0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      supplyQuantity0.setQuantity((short) (-4583));
      short short0 = supplyQuantity0.getQuantity();
      assertEquals((short) (-4583), short0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      // Undeclared exception!
      try { 
        supplyQuantity0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(801);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        supplyQuantity0.marshal(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      // Undeclared exception!
      try { 
        supplyQuantity0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      supplyQuantity0.supplyType = null;
      // Undeclared exception!
      try { 
        supplyQuantity0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.SupplyQuantity", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      SupplyQuantity supplyQuantity1 = new SupplyQuantity();
      supplyQuantity1.supplyType = null;
      // Undeclared exception!
      try { 
        supplyQuantity1.equalsImpl(supplyQuantity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.SupplyQuantity", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      supplyQuantity0.supplyType = null;
      SupplyQuantity supplyQuantity1 = new SupplyQuantity();
      // Undeclared exception!
      try { 
        supplyQuantity0.equals(supplyQuantity1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.SupplyQuantity", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      SupplyQuantity supplyQuantity1 = new SupplyQuantity();
      supplyQuantity1.setQuantity((short)1);
      boolean boolean0 = supplyQuantity0.equalsImpl(supplyQuantity1);
      assertEquals((short)1, supplyQuantity1.getQuantity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      SupplyQuantity supplyQuantity1 = new SupplyQuantity();
      assertTrue(supplyQuantity1.equals((Object)supplyQuantity0));
      
      EntityType entityType0 = new EntityType();
      entityType0.setExtra((short)1868);
      supplyQuantity1.setSupplyType(entityType0);
      boolean boolean0 = supplyQuantity0.equalsImpl(supplyQuantity1);
      assertFalse(supplyQuantity1.equals((Object)supplyQuantity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      boolean boolean0 = supplyQuantity0.equalsImpl(supplyQuantity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      SupplyQuantity supplyQuantity1 = new SupplyQuantity();
      assertTrue(supplyQuantity1.equals((Object)supplyQuantity0));
      
      supplyQuantity1.quantity = (short) (-916);
      boolean boolean0 = supplyQuantity0.equals(supplyQuantity1);
      assertFalse(supplyQuantity1.equals((Object)supplyQuantity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      EntityType entityType0 = supplyQuantity0.getSupplyType();
      boolean boolean0 = supplyQuantity0.equalsImpl(entityType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      SupplyQuantity supplyQuantity1 = new SupplyQuantity();
      boolean boolean0 = supplyQuantity0.equals(supplyQuantity1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      boolean boolean0 = supplyQuantity0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      boolean boolean0 = supplyQuantity0.equals(supplyQuantity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      EntityType entityType0 = new EntityType();
      boolean boolean0 = supplyQuantity0.equals(entityType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      // Undeclared exception!
      try { 
        supplyQuantity0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.EntityType", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      int int0 = supplyQuantity0.getMarshalledSize();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      // Undeclared exception!
      try { 
        supplyQuantity0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.EntityType", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      short short0 = supplyQuantity0.getQuantity();
      assertEquals((short)0, short0);
  }
}
