/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 15:32:35 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.SphericalHarmonicAntennaPattern;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SphericalHarmonicAntennaPattern_ESTest extends SphericalHarmonicAntennaPattern_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern1 = new SphericalHarmonicAntennaPattern();
      assertTrue(sphericalHarmonicAntennaPattern1.equals((Object)sphericalHarmonicAntennaPattern0));
      
      sphericalHarmonicAntennaPattern1.harmonicOrder = (byte) (-7);
      boolean boolean0 = sphericalHarmonicAntennaPattern0.equalsImpl(sphericalHarmonicAntennaPattern1);
      assertFalse(sphericalHarmonicAntennaPattern1.equals((Object)sphericalHarmonicAntennaPattern0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      byte[] byteArray0 = new byte[3];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0, 0, 1);
      sphericalHarmonicAntennaPattern0.marshal(byteBuffer0);
      assertEquals(1, byteBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      sphericalHarmonicAntennaPattern0.setHarmonicOrder((byte)113);
      byte byte0 = sphericalHarmonicAntennaPattern0.getHarmonicOrder();
      assertEquals((byte)113, byte0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        sphericalHarmonicAntennaPattern0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      // Undeclared exception!
      try { 
        sphericalHarmonicAntennaPattern0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.SphericalHarmonicAntennaPattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(97);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        sphericalHarmonicAntennaPattern0.marshal(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        sphericalHarmonicAntennaPattern0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern1 = new SphericalHarmonicAntennaPattern();
      assertTrue(sphericalHarmonicAntennaPattern1.equals((Object)sphericalHarmonicAntennaPattern0));
      
      sphericalHarmonicAntennaPattern1.harmonicOrder = (byte) (-5);
      boolean boolean0 = sphericalHarmonicAntennaPattern1.equalsImpl(sphericalHarmonicAntennaPattern0);
      assertFalse(sphericalHarmonicAntennaPattern1.equals((Object)sphericalHarmonicAntennaPattern0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      boolean boolean0 = sphericalHarmonicAntennaPattern0.equalsImpl(sphericalHarmonicAntennaPattern0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      sphericalHarmonicAntennaPattern0.harmonicOrder = (byte) (-5);
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern1 = new SphericalHarmonicAntennaPattern();
      boolean boolean0 = sphericalHarmonicAntennaPattern0.equals(sphericalHarmonicAntennaPattern1);
      assertFalse(sphericalHarmonicAntennaPattern1.equals((Object)sphericalHarmonicAntennaPattern0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      Object object0 = new Object();
      boolean boolean0 = sphericalHarmonicAntennaPattern0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      Object object0 = new Object();
      boolean boolean0 = sphericalHarmonicAntennaPattern0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern1 = new SphericalHarmonicAntennaPattern();
      boolean boolean0 = sphericalHarmonicAntennaPattern0.equals(sphericalHarmonicAntennaPattern1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      boolean boolean0 = sphericalHarmonicAntennaPattern0.equals(sphericalHarmonicAntennaPattern0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      boolean boolean0 = sphericalHarmonicAntennaPattern0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      byte[] byteArray0 = new byte[3];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0, 0, 1);
      sphericalHarmonicAntennaPattern0.unmarshal(byteBuffer0);
      assertEquals(1, sphericalHarmonicAntennaPattern0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      int int0 = sphericalHarmonicAntennaPattern0.getMarshalledSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      // Undeclared exception!
      try { 
        sphericalHarmonicAntennaPattern0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.SphericalHarmonicAntennaPattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      sphericalHarmonicAntennaPattern0.setHarmonicOrder((byte) (-1));
      byte byte0 = sphericalHarmonicAntennaPattern0.getHarmonicOrder();
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SphericalHarmonicAntennaPattern sphericalHarmonicAntennaPattern0 = new SphericalHarmonicAntennaPattern();
      byte byte0 = sphericalHarmonicAntennaPattern0.getHarmonicOrder();
      assertEquals((byte)0, byte0);
  }
}
