/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 13:36:02 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.SystemID;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SystemID_ESTest extends SystemID_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      systemID0.setSystemName(1627);
      SystemID systemID1 = new SystemID();
      boolean boolean0 = systemID0.equals(systemID1);
      assertEquals(1627, systemID0.getSystemName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      systemID0.setSystemType(1627);
      SystemID systemID1 = new SystemID();
      boolean boolean0 = systemID0.equals(systemID1);
      assertEquals(1627, systemID0.getSystemType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      systemID0.changeOptions = (short)0;
      systemID0.changeOptions = (short)1393;
      byte[] byteArray0 = new byte[6];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      systemID0.marshal(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)113}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      systemID0.systemName = (int) (short)0;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1687);
      systemID0.systemName = 1687;
      systemID0.marshal(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      systemID0.setSystemType(2);
      int int0 = systemID0.getMarshalledSize();
      assertEquals(2, systemID0.getSystemType());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      systemID0.setSystemName(1407);
      int int0 = systemID0.getMarshalledSize();
      assertEquals(1407, systemID0.getSystemName());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1687);
      systemID0.unmarshal(byteBuffer0);
      assertEquals(0, systemID0.getSystemName());
      assertEquals((short)0, systemID0.getSystemMode());
      assertEquals((short)0, systemID0.getChangeOptions());
      assertEquals(0, systemID0.getSystemType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      systemID0.setSystemType(6);
      int int0 = systemID0.getSystemType();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      systemID0.systemType = (int) (short)1835;
      systemID0.systemType = (-441);
      int int0 = systemID0.getSystemType();
      assertEquals((-441), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      systemID0.systemName = 1;
      int int0 = systemID0.getSystemName();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      systemID0.setSystemName((-1816));
      int int0 = systemID0.getSystemName();
      assertEquals((-1816), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      systemID0.setSystemMode((short)1344);
      short short0 = systemID0.getSystemMode();
      assertEquals((short)1344, short0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      systemID0.systemMode = (short) (-701);
      short short0 = systemID0.getSystemMode();
      assertEquals((short) (-701), short0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      systemID0.setChangeOptions((short)1469);
      short short0 = systemID0.getChangeOptions();
      assertEquals((short)1469, short0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      systemID0.changeOptions = (short) (-1403);
      short short0 = systemID0.getChangeOptions();
      assertEquals((short) (-1403), short0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      // Undeclared exception!
      try { 
        systemID0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.SystemID", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        systemID0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      SystemID systemID1 = new SystemID();
      assertTrue(systemID1.equals((Object)systemID0));
      
      systemID1.changeOptions = (short)418;
      boolean boolean0 = systemID0.equalsImpl(systemID1);
      assertFalse(systemID1.equals((Object)systemID0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      SystemID systemID1 = new SystemID();
      systemID1.setSystemMode((short)1393);
      boolean boolean0 = systemID1.equalsImpl(systemID0);
      assertEquals((short)1393, systemID1.getSystemMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      systemID0.setSystemName(1407);
      SystemID systemID1 = new SystemID();
      boolean boolean0 = systemID1.equalsImpl(systemID0);
      assertEquals(1407, systemID0.getSystemName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      boolean boolean0 = systemID0.equalsImpl(systemID0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      SystemID systemID1 = new SystemID();
      systemID0.setSystemMode((short) (-945));
      boolean boolean0 = systemID0.equals(systemID1);
      assertEquals((short) (-945), systemID0.getSystemMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      SystemID systemID1 = new SystemID();
      assertTrue(systemID1.equals((Object)systemID0));
      
      systemID1.systemType = (-1979);
      boolean boolean0 = systemID1.equals(systemID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      Object object0 = new Object();
      boolean boolean0 = systemID0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      Object object0 = new Object();
      boolean boolean0 = systemID0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      boolean boolean0 = systemID0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      boolean boolean0 = systemID0.equals(systemID0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      systemID0.setChangeOptions((short)418);
      SystemID systemID1 = new SystemID();
      boolean boolean0 = systemID0.equals(systemID1);
      assertEquals((short)418, systemID0.getChangeOptions());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      systemID0.setSystemType(2);
      SystemID systemID1 = new SystemID();
      boolean boolean0 = systemID1.equalsImpl(systemID0);
      assertEquals(2, systemID0.getSystemType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      int int0 = systemID0.getSystemType();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        systemID0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      short short0 = systemID0.getChangeOptions();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      short short0 = systemID0.getSystemMode();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      int int0 = systemID0.getSystemName();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SystemID systemID0 = new SystemID();
      // Undeclared exception!
      try { 
        systemID0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.SystemID", e);
      }
  }
}
