/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:13:24 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.AggregateID;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AggregateID_ESTest extends AggregateID_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      AggregateID aggregateID1 = new AggregateID();
      aggregateID0.setApplication(6);
      boolean boolean0 = aggregateID0.equals(aggregateID1);
      assertEquals(6, aggregateID0.getApplication());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      AggregateID aggregateID1 = new AggregateID();
      aggregateID1.setSite(2);
      boolean boolean0 = aggregateID0.equalsImpl(aggregateID1);
      assertEquals(2, aggregateID1.getSite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      aggregateID0.setSite(2);
      boolean boolean0 = aggregateID0.equalsImpl(aggregateID0);
      assertEquals(2, aggregateID0.getSite());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      aggregateID0.site = (-1);
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        aggregateID0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      aggregateID0.application = 0;
      byte[] byteArray0 = new byte[7];
      aggregateID0.application = 65535;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      aggregateID0.marshal(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte) (-1), (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      aggregateID0.application = 0;
      aggregateID0.application = 65535;
      int int0 = aggregateID0.getMarshalledSize();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      aggregateID0.site = (-1282);
      int int0 = aggregateID0.getMarshalledSize();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      aggregateID0.site = 65535;
      int int0 = aggregateID0.getSite();
      assertEquals(65535, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      aggregateID0.site = (-1);
      int int0 = aggregateID0.getSite();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      aggregateID0.application = 0;
      aggregateID0.application = 65535;
      int int0 = aggregateID0.getApplication();
      assertEquals(65535, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      aggregateID0.application = (-1);
      int int0 = aggregateID0.getApplication();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte) (-48);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      aggregateID0.unmarshal(byteBuffer0);
      int int0 = aggregateID0.getAggregateID();
      assertEquals(208, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      aggregateID0.setAggregateID((-926));
      int int0 = aggregateID0.getAggregateID();
      assertEquals((-926), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        aggregateID0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      // Undeclared exception!
      try { 
        aggregateID0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.AggregateID", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      AggregateID aggregateID1 = new AggregateID();
      assertTrue(aggregateID1.equals((Object)aggregateID0));
      
      aggregateID1.aggregateID = (-1);
      boolean boolean0 = aggregateID0.equalsImpl(aggregateID1);
      assertFalse(aggregateID1.equals((Object)aggregateID0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      AggregateID aggregateID1 = new AggregateID();
      aggregateID1.setApplication((-353));
      boolean boolean0 = aggregateID1.equalsImpl(aggregateID0);
      assertEquals((-353), aggregateID1.getApplication());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      AggregateID aggregateID1 = new AggregateID();
      assertTrue(aggregateID1.equals((Object)aggregateID0));
      
      aggregateID1.aggregateID = 3499;
      boolean boolean0 = aggregateID0.equals(aggregateID1);
      assertFalse(aggregateID1.equals((Object)aggregateID0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      AggregateID aggregateID1 = new AggregateID();
      aggregateID1.setApplication(6);
      boolean boolean0 = aggregateID0.equals(aggregateID1);
      assertEquals(6, aggregateID1.getApplication());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      boolean boolean0 = aggregateID0.equalsImpl((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      Object object0 = new Object();
      boolean boolean0 = aggregateID0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      boolean boolean0 = aggregateID0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      boolean boolean0 = aggregateID0.equals(aggregateID0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      int int0 = aggregateID0.getApplication();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      aggregateID0.setAggregateID(1);
      int int0 = aggregateID0.getMarshalledSize();
      assertEquals(1, aggregateID0.getAggregateID());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      int int0 = aggregateID0.getAggregateID();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      aggregateID0.setSite(65535);
      AggregateID aggregateID1 = new AggregateID();
      boolean boolean0 = aggregateID0.equalsImpl(aggregateID1);
      assertEquals(65535, aggregateID0.getSite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      // Undeclared exception!
      try { 
        aggregateID0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.AggregateID", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AggregateID aggregateID0 = new AggregateID();
      int int0 = aggregateID0.getSite();
      assertEquals(0, int0);
  }
}
