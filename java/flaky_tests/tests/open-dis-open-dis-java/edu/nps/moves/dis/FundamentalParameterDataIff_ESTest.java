/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:04:42 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.FundamentalParameterDataIff;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FundamentalParameterDataIff_ESTest extends FundamentalParameterDataIff_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setPad3((short) (-541));
      FundamentalParameterDataIff fundamentalParameterDataIff1 = new FundamentalParameterDataIff();
      boolean boolean0 = fundamentalParameterDataIff0.equalsImpl(fundamentalParameterDataIff1);
      assertEquals((short) (-541), fundamentalParameterDataIff0.getPad3());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setPad2((short) (-541));
      FundamentalParameterDataIff fundamentalParameterDataIff1 = new FundamentalParameterDataIff();
      boolean boolean0 = fundamentalParameterDataIff0.equalsImpl(fundamentalParameterDataIff1);
      assertEquals((-541), fundamentalParameterDataIff0.getPad2());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.pad3 = (short)516;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((short)516);
      fundamentalParameterDataIff0.marshal(byteBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(429);
      fundamentalParameterDataIff0.pgrf = 559.48F;
      fundamentalParameterDataIff0.marshal(byteBuffer0);
      assertEquals(24, fundamentalParameterDataIff0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setFrequency(429);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(429);
      fundamentalParameterDataIff0.marshal(byteBuffer0);
      assertEquals(429.0F, fundamentalParameterDataIff0.getFrequency(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.erp = (-1.0F);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(284);
      fundamentalParameterDataIff0.marshal(byteBuffer0);
      assertEquals((-1.0F), fundamentalParameterDataIff0.getErp(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setPad2((-2143521500));
      int int0 = fundamentalParameterDataIff0.getMarshalledSize();
      assertEquals((-2143521500), fundamentalParameterDataIff0.getPad2());
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(727);
      fundamentalParameterDataIff0.unmarshal(byteBuffer0);
      assertEquals((short)0, fundamentalParameterDataIff0.getPad3());
      assertEquals(0, fundamentalParameterDataIff0.getPad2());
      assertEquals((short)0, fundamentalParameterDataIff0.getApplicableModes());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      byte[] byteArray0 = new byte[9];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        fundamentalParameterDataIff0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.pulseWidth = 2418.0F;
      float float0 = fundamentalParameterDataIff0.getPulseWidth();
      assertEquals(2418.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setPulseWidth((short) (-136));
      float float0 = fundamentalParameterDataIff0.getPulseWidth();
      assertEquals((-136.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.pgrf = 1.0F;
      float float0 = fundamentalParameterDataIff0.getPgrf();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setPgrf((-1348.0F));
      float float0 = fundamentalParameterDataIff0.getPgrf();
      assertEquals((-1348.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setPad3((short)1);
      short short0 = fundamentalParameterDataIff0.getPad3();
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setPad3((short) (-1372));
      short short0 = fundamentalParameterDataIff0.getPad3();
      assertEquals((short) (-1372), short0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setPad2(531);
      int int0 = fundamentalParameterDataIff0.getPad2();
      assertEquals(531, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.pad2 = (int) (short) (-1372);
      int int0 = fundamentalParameterDataIff0.getPad2();
      assertEquals((-1372), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.frequency = (float) 0;
      fundamentalParameterDataIff0.frequency = 0.0F;
      fundamentalParameterDataIff0.frequency = 1611.0F;
      float float0 = fundamentalParameterDataIff0.getFrequency();
      assertEquals(1611.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setFrequency((-73));
      float float0 = fundamentalParameterDataIff0.getFrequency();
      assertEquals((-73.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setErp(1.0F);
      float float0 = fundamentalParameterDataIff0.getErp();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setErp((-1103.5447F));
      float float0 = fundamentalParameterDataIff0.getErp();
      assertEquals((-1103.5447F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setBurstLength((short)1);
      long long0 = fundamentalParameterDataIff0.getBurstLength();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.burstLength = (-1L);
      long long0 = fundamentalParameterDataIff0.getBurstLength();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.applicableModes = (short)1954;
      short short0 = fundamentalParameterDataIff0.getApplicableModes();
      assertEquals((short)1954, short0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(284);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        fundamentalParameterDataIff0.marshal(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(4);
      // Undeclared exception!
      try { 
        fundamentalParameterDataIff0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      // Undeclared exception!
      try { 
        fundamentalParameterDataIff0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.FundamentalParameterDataIff", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setPad3((short)1);
      FundamentalParameterDataIff fundamentalParameterDataIff1 = new FundamentalParameterDataIff();
      boolean boolean0 = fundamentalParameterDataIff0.equalsImpl(fundamentalParameterDataIff1);
      assertEquals((short)1, fundamentalParameterDataIff0.getPad3());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setPad2((-1260));
      FundamentalParameterDataIff fundamentalParameterDataIff1 = new FundamentalParameterDataIff();
      boolean boolean0 = fundamentalParameterDataIff1.equalsImpl(fundamentalParameterDataIff0);
      assertEquals((-1260), fundamentalParameterDataIff0.getPad2());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      FundamentalParameterDataIff fundamentalParameterDataIff1 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff1.setApplicableModes((short) (-1));
      boolean boolean0 = fundamentalParameterDataIff1.equalsImpl(fundamentalParameterDataIff0);
      assertEquals((short) (-1), fundamentalParameterDataIff1.getApplicableModes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      FundamentalParameterDataIff fundamentalParameterDataIff1 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff1.setBurstLength(24);
      boolean boolean0 = fundamentalParameterDataIff0.equalsImpl(fundamentalParameterDataIff1);
      assertEquals(24L, fundamentalParameterDataIff1.getBurstLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setPulseWidth((-1297.1F));
      FundamentalParameterDataIff fundamentalParameterDataIff1 = new FundamentalParameterDataIff();
      boolean boolean0 = fundamentalParameterDataIff0.equalsImpl(fundamentalParameterDataIff1);
      assertEquals((-1297.1F), fundamentalParameterDataIff0.getPulseWidth(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      FundamentalParameterDataIff fundamentalParameterDataIff1 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff1.setPgrf((-1.0F));
      boolean boolean0 = fundamentalParameterDataIff1.equalsImpl(fundamentalParameterDataIff0);
      assertEquals((-1.0F), fundamentalParameterDataIff1.getPgrf(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      FundamentalParameterDataIff fundamentalParameterDataIff1 = new FundamentalParameterDataIff();
      assertTrue(fundamentalParameterDataIff1.equals((Object)fundamentalParameterDataIff0));
      
      fundamentalParameterDataIff0.frequency = (-1297.1F);
      boolean boolean0 = fundamentalParameterDataIff0.equalsImpl(fundamentalParameterDataIff1);
      assertFalse(fundamentalParameterDataIff1.equals((Object)fundamentalParameterDataIff0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      FundamentalParameterDataIff fundamentalParameterDataIff1 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setErp((-1675.7897F));
      boolean boolean0 = fundamentalParameterDataIff1.equalsImpl(fundamentalParameterDataIff0);
      assertEquals((-1675.7897F), fundamentalParameterDataIff0.getErp(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      boolean boolean0 = fundamentalParameterDataIff0.equalsImpl(fundamentalParameterDataIff0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setPad3((short)32166);
      FundamentalParameterDataIff fundamentalParameterDataIff1 = new FundamentalParameterDataIff();
      boolean boolean0 = fundamentalParameterDataIff0.equals(fundamentalParameterDataIff1);
      assertEquals((short)32166, fundamentalParameterDataIff0.getPad3());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setApplicableModes((short)32166);
      FundamentalParameterDataIff fundamentalParameterDataIff1 = new FundamentalParameterDataIff();
      boolean boolean0 = fundamentalParameterDataIff0.equals(fundamentalParameterDataIff1);
      assertEquals((short)32166, fundamentalParameterDataIff0.getApplicableModes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      FundamentalParameterDataIff fundamentalParameterDataIff1 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff1.setBurstLength(2087L);
      boolean boolean0 = fundamentalParameterDataIff1.equals(fundamentalParameterDataIff0);
      assertEquals(2087L, fundamentalParameterDataIff1.getBurstLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setPulseWidth((short)32166);
      FundamentalParameterDataIff fundamentalParameterDataIff1 = new FundamentalParameterDataIff();
      boolean boolean0 = fundamentalParameterDataIff0.equals(fundamentalParameterDataIff1);
      assertEquals(32166.0F, fundamentalParameterDataIff0.getPulseWidth(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setPgrf((short) (-1372));
      FundamentalParameterDataIff fundamentalParameterDataIff1 = new FundamentalParameterDataIff();
      boolean boolean0 = fundamentalParameterDataIff1.equals(fundamentalParameterDataIff0);
      assertEquals((-1372.0F), fundamentalParameterDataIff0.getPgrf(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setFrequency((short)32166);
      FundamentalParameterDataIff fundamentalParameterDataIff1 = new FundamentalParameterDataIff();
      boolean boolean0 = fundamentalParameterDataIff0.equals(fundamentalParameterDataIff1);
      assertEquals(32166.0F, fundamentalParameterDataIff0.getFrequency(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.erp = (-1.0F);
      FundamentalParameterDataIff fundamentalParameterDataIff1 = new FundamentalParameterDataIff();
      boolean boolean0 = fundamentalParameterDataIff0.equals(fundamentalParameterDataIff1);
      assertFalse(fundamentalParameterDataIff1.equals((Object)fundamentalParameterDataIff0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      boolean boolean0 = fundamentalParameterDataIff0.equalsImpl((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      FundamentalParameterDataIff fundamentalParameterDataIff1 = new FundamentalParameterDataIff();
      boolean boolean0 = fundamentalParameterDataIff0.equals(fundamentalParameterDataIff1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      boolean boolean0 = fundamentalParameterDataIff0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      boolean boolean0 = fundamentalParameterDataIff0.equals(fundamentalParameterDataIff0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      Object object0 = new Object();
      boolean boolean0 = fundamentalParameterDataIff0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      int int0 = fundamentalParameterDataIff0.getPad2();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      float float0 = fundamentalParameterDataIff0.getPulseWidth();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      float float0 = fundamentalParameterDataIff0.getFrequency();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      // Undeclared exception!
      try { 
        fundamentalParameterDataIff0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.FundamentalParameterDataIff", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      fundamentalParameterDataIff0.setApplicableModes((short) (-26800));
      short short0 = fundamentalParameterDataIff0.getApplicableModes();
      assertEquals((short) (-26800), short0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      short short0 = fundamentalParameterDataIff0.getApplicableModes();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      long long0 = fundamentalParameterDataIff0.getBurstLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      float float0 = fundamentalParameterDataIff0.getPgrf();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      short short0 = fundamentalParameterDataIff0.getPad3();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FundamentalParameterDataIff fundamentalParameterDataIff0 = new FundamentalParameterDataIff();
      float float0 = fundamentalParameterDataIff0.getErp();
      assertEquals(0.0F, float0, 0.01F);
  }
}
