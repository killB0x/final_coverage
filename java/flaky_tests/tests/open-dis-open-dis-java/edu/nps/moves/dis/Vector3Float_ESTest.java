/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:22:40 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.Vector3Float;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector3Float_ESTest extends Vector3Float_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      Vector3Float vector3Float1 = new Vector3Float();
      vector3Float1.setX(2469.4897F);
      boolean boolean0 = vector3Float0.equals(vector3Float1);
      assertEquals(2469.4897F, vector3Float1.getX(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      vector3Float0.setZ((-3560.0F));
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(12);
      vector3Float0.marshal(byteBuffer0);
      assertEquals((-3560.0F), vector3Float0.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(12);
      vector3Float0.y = (float) 12;
      vector3Float0.marshal(byteBuffer0);
      assertEquals(12, byteBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2933);
      vector3Float0.unmarshal(byteBuffer0);
      assertEquals(0.0F, vector3Float0.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      vector3Float0.z = 2284.78F;
      float float0 = vector3Float0.getZ();
      assertEquals(2284.78F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      vector3Float0.setZ((-3478.0F));
      float float0 = vector3Float0.getZ();
      assertEquals((-3478.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      vector3Float0.y = (float) 12;
      float float0 = vector3Float0.getY();
      assertEquals(12.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      vector3Float0.setX(1528.1F);
      float float0 = vector3Float0.getX();
      assertEquals(1528.1F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      vector3Float0.setX((-1264.79F));
      float float0 = vector3Float0.getX();
      assertEquals((-1264.79F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      // Undeclared exception!
      try { 
        vector3Float0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.Vector3Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      // Undeclared exception!
      try { 
        vector3Float0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.Vector3Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      vector3Float0.setZ(1654.0F);
      Vector3Float vector3Float1 = new Vector3Float();
      boolean boolean0 = vector3Float1.equalsImpl(vector3Float0);
      assertEquals(1654.0F, vector3Float0.getZ(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      Vector3Float vector3Float1 = new Vector3Float();
      vector3Float1.setY(1.0F);
      boolean boolean0 = vector3Float1.equalsImpl(vector3Float0);
      assertEquals(1.0F, vector3Float1.getY(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      Vector3Float vector3Float1 = new Vector3Float();
      vector3Float0.setX(1.0F);
      boolean boolean0 = vector3Float0.equalsImpl(vector3Float1);
      assertEquals(1.0F, vector3Float0.getX(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      boolean boolean0 = vector3Float0.equalsImpl(vector3Float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      vector3Float0.setZ(1.0F);
      Vector3Float vector3Float1 = new Vector3Float();
      boolean boolean0 = vector3Float0.equals(vector3Float1);
      assertEquals(1.0F, vector3Float0.getZ(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      Vector3Float vector3Float1 = new Vector3Float();
      vector3Float1.setY(1.0F);
      boolean boolean0 = vector3Float0.equals(vector3Float1);
      assertEquals(1.0F, vector3Float1.getY(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      Object object0 = new Object();
      boolean boolean0 = vector3Float0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      Object object0 = new Object();
      boolean boolean0 = vector3Float0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      Vector3Float vector3Float1 = new Vector3Float();
      boolean boolean0 = vector3Float0.equals(vector3Float1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      boolean boolean0 = vector3Float0.equals(vector3Float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      boolean boolean0 = vector3Float0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      int int0 = vector3Float0.getMarshalledSize();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(4);
      // Undeclared exception!
      try { 
        vector3Float0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      vector3Float0.setY((-1.0F));
      float float0 = vector3Float0.getY();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      float float0 = vector3Float0.getX();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      float float0 = vector3Float0.getZ();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      float float0 = vector3Float0.getY();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3Float vector3Float0 = new Vector3Float();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        vector3Float0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
}
