/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:16:32 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.Marking;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Marking_ESTest extends Marking_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Marking marking0 = new Marking();
      Marking marking1 = new Marking();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)2;
      marking1.characters = byteArray0;
      // Undeclared exception!
      try { 
        marking1.equalsImpl(marking0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("edu.nps.moves.dis.Marking", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Marking marking0 = new Marking();
      marking0.characterSet = (short)1439;
      Marking marking1 = new Marking();
      boolean boolean0 = marking0.equalsImpl(marking1);
      assertFalse(boolean0);
      assertFalse(marking1.equals((Object)marking0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Marking marking0 = new Marking();
      marking0.setCharactersString("@ L2qon=|~F}=T0u");
      assertEquals((short)0, marking0.getCharacterSet());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Marking marking0 = new Marking();
      byte[] byteArray0 = new byte[0];
      marking0.characters = byteArray0;
      String string0 = marking0.getCharactersString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Marking marking0 = new Marking();
      marking0.characters = null;
      byte[] byteArray0 = marking0.getCharacters();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Marking marking0 = new Marking();
      byte[] byteArray0 = new byte[0];
      marking0.characters = byteArray0;
      byte[] byteArray1 = marking0.getCharacters();
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Marking marking0 = new Marking();
      marking0.characterSet = (short)1439;
      short short0 = marking0.getCharacterSet();
      assertEquals((short)1439, short0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Marking marking0 = new Marking();
      marking0.setCharacterSet((short) (-1454));
      short short0 = marking0.getCharacterSet();
      assertEquals((short) (-1454), short0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Marking marking0 = new Marking();
      boolean boolean0 = marking0.equalsImpl(marking0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Marking marking0 = new Marking();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(11);
      // Undeclared exception!
      try { 
        marking0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Marking marking0 = new Marking();
      // Undeclared exception!
      try { 
        marking0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.Marking", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Marking marking0 = new Marking();
      // Undeclared exception!
      try { 
        marking0.setCharactersString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.Marking", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Marking marking0 = new Marking();
      // Undeclared exception!
      try { 
        marking0.setCharacters((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.Marking", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Marking marking0 = new Marking();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1550);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        marking0.marshal(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Marking marking0 = new Marking();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(6);
      // Undeclared exception!
      try { 
        marking0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Marking marking0 = new Marking();
      // Undeclared exception!
      try { 
        marking0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.Marking", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Marking marking0 = new Marking();
      marking0.characters = null;
      // Undeclared exception!
      try { 
        marking0.getCharactersString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Marking marking0 = new Marking();
      marking0.characters = null;
      // Undeclared exception!
      try { 
        marking0.equalsImpl(marking0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.Marking", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Marking marking0 = new Marking();
      marking0.characters = null;
      Marking marking1 = new Marking();
      // Undeclared exception!
      try { 
        marking0.equals(marking1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.Marking", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Marking marking0 = new Marking();
      Marking marking1 = new Marking();
      byte[] byteArray0 = new byte[1];
      marking1.characters = byteArray0;
      // Undeclared exception!
      try { 
        marking0.equals(marking1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("edu.nps.moves.dis.Marking", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Marking marking0 = new Marking();
      marking0.setCharacterSet((short)2185);
      Marking marking1 = new Marking();
      boolean boolean0 = marking1.equalsImpl(marking0);
      assertEquals((short)2185, marking0.getCharacterSet());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Marking marking0 = new Marking();
      byte[] byteArray0 = new byte[2];
      marking0.setCharacters(byteArray0);
      assertEquals((short)0, marking0.getCharacterSet());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Marking marking0 = new Marking();
      Marking marking1 = new Marking();
      assertTrue(marking1.equals((Object)marking0));
      
      marking1.setCharactersString("yH^)>0lFB:");
      boolean boolean0 = marking0.equalsImpl(marking1);
      assertFalse(marking1.equals((Object)marking0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Marking marking0 = new Marking();
      Marking marking1 = new Marking();
      marking1.setCharacterSet((short)60);
      boolean boolean0 = marking0.equals(marking1);
      assertEquals((short)60, marking1.getCharacterSet());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Marking marking0 = new Marking();
      Object object0 = new Object();
      boolean boolean0 = marking0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Marking marking0 = new Marking();
      Object object0 = new Object();
      boolean boolean0 = marking0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Marking marking0 = new Marking();
      boolean boolean0 = marking0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Marking marking0 = new Marking();
      boolean boolean0 = marking0.equals(marking0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Marking marking0 = new Marking();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(255);
      marking0.unmarshal(byteBuffer0);
      assertEquals(12, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=12 lim=255 cap=255]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Marking marking0 = new Marking();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(255);
      marking0.marshal(byteBuffer0);
      assertEquals(12, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=12 lim=255 cap=255]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Marking marking0 = new Marking();
      byte[] byteArray0 = marking0.getCharacters();
      marking0.setCharacters(byteArray0);
      assertEquals(11, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Marking marking0 = new Marking();
      int int0 = marking0.getMarshalledSize();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Marking marking0 = new Marking();
      String string0 = marking0.getCharactersString();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Marking marking0 = new Marking();
      short short0 = marking0.getCharacterSet();
      assertEquals((short)0, short0);
  }
}
