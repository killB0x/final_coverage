/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:22:16 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.EntityType;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EntityType_ESTest extends EntityType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.setExtra((short) (-1005));
      EntityType entityType1 = new EntityType();
      boolean boolean0 = entityType0.equals(entityType1);
      assertEquals((short) (-1005), entityType0.getExtra());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.setSpec((short)2733);
      EntityType entityType1 = new EntityType();
      boolean boolean0 = entityType1.equalsImpl(entityType0);
      assertEquals((short)2733, entityType0.getSpec());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.subcategory = (short)2783;
      EntityType entityType1 = new EntityType();
      boolean boolean0 = entityType0.equalsImpl(entityType1);
      assertFalse(entityType1.equals((Object)entityType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.category = (short) (-1147);
      EntityType entityType1 = new EntityType();
      boolean boolean0 = entityType1.equalsImpl(entityType0);
      assertFalse(boolean0);
      assertFalse(entityType0.equals((Object)entityType1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      EntityType entityType1 = new EntityType();
      entityType0.setCountry(65535);
      boolean boolean0 = entityType1.equalsImpl(entityType0);
      assertEquals(65535, entityType0.getCountry());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.setDomain((short) (-3220));
      EntityType entityType1 = new EntityType();
      boolean boolean0 = entityType0.equalsImpl(entityType1);
      assertEquals((short) (-3220), entityType0.getDomain());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.entityKind = (short)1894;
      EntityType entityType1 = new EntityType();
      boolean boolean0 = entityType1.equalsImpl(entityType0);
      assertFalse(entityType0.equals((Object)entityType1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.subcategory = (short)2783;
      boolean boolean0 = entityType0.equalsImpl(entityType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.setDomain((short)369);
      byte[] byteArray0 = new byte[8];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      entityType0.marshal(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)113, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((short)369, entityType0.getDomain());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.setSpec((short)2733);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((short)1894);
      entityType0.marshal(byteBuffer0);
      assertEquals((short)2733, entityType0.getSpec());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.subcategory = (short)2783;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((short)1894);
      entityType0.marshal(byteBuffer0);
      assertEquals(1894, byteBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.entityKind = (short)1894;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((short)1894);
      entityType0.marshal(byteBuffer0);
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=1894 cap=1894]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.setEntityKind((short) (-2504));
      // Undeclared exception!
      try { 
        entityType0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.EntityType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.category = (short) (-1);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((short)1894);
      entityType0.marshal(byteBuffer0);
      assertEquals(8, entityType0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(553);
      entityType0.unmarshal(byteBuffer0);
      assertEquals((short)0, entityType0.getSpec());
      assertEquals(0, entityType0.getCountry());
      assertEquals((short)0, entityType0.getSubcategory());
      assertEquals((short)0, entityType0.getCategory());
      assertEquals((short)0, entityType0.getEntityKind());
      assertEquals((short)0, entityType0.getExtra());
      assertEquals((short)0, entityType0.getDomain());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.subcategory = (short)2783;
      short short0 = entityType0.getSubcategory();
      assertEquals((short)2783, short0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.setSubcategory((short) (-1));
      short short0 = entityType0.getSubcategory();
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.setSpec((short)2733);
      short short0 = entityType0.getSpec();
      assertEquals((short)2733, short0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.spec = (short) (-1);
      short short0 = entityType0.getSpec();
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.setExtra((short)1564);
      short short0 = entityType0.getExtra();
      assertEquals((short)1564, short0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.extra = (short) (-4697);
      short short0 = entityType0.getExtra();
      assertEquals((short) (-4697), short0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.setEntityKind((short)3922);
      short short0 = entityType0.getEntityKind();
      assertEquals((short)3922, short0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.entityKind = (short) (-1047);
      short short0 = entityType0.getEntityKind();
      assertEquals((short) (-1047), short0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.setDomain((short)2123);
      short short0 = entityType0.getDomain();
      assertEquals((short)2123, short0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.domain = (short) (-763);
      short short0 = entityType0.getDomain();
      assertEquals((short) (-763), short0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.setCountry(1);
      int int0 = entityType0.getCountry();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.country = (-4084);
      int int0 = entityType0.getCountry();
      assertEquals((-4084), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.category = (short) (-1929);
      entityType0.category = (short)343;
      short short0 = entityType0.getCategory();
      assertEquals((short)343, short0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.setCategory((short) (-660));
      short short0 = entityType0.getCategory();
      assertEquals((short) (-660), short0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        entityType0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        entityType0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.setSpec((short)2733);
      EntityType entityType1 = new EntityType();
      boolean boolean0 = entityType0.equalsImpl(entityType1);
      assertEquals((short)2733, entityType0.getSpec());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.subcategory = (short)2783;
      EntityType entityType1 = new EntityType();
      boolean boolean0 = entityType1.equalsImpl(entityType0);
      assertFalse(boolean0);
      assertFalse(entityType0.equals((Object)entityType1));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.category = (short) (-1);
      EntityType entityType1 = new EntityType();
      boolean boolean0 = entityType0.equalsImpl(entityType1);
      assertFalse(boolean0);
      assertFalse(entityType1.equals((Object)entityType0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      EntityType entityType1 = new EntityType();
      entityType1.setCountry(65535);
      boolean boolean0 = entityType1.equalsImpl(entityType0);
      assertEquals(65535, entityType1.getCountry());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.setDomain((short)116);
      EntityType entityType1 = new EntityType();
      boolean boolean0 = entityType0.equalsImpl(entityType1);
      assertEquals((short)116, entityType0.getDomain());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.entityKind = (short)1894;
      EntityType entityType1 = new EntityType();
      boolean boolean0 = entityType0.equalsImpl(entityType1);
      assertFalse(boolean0);
      assertFalse(entityType1.equals((Object)entityType0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      Object object0 = new Object();
      boolean boolean0 = entityType0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      Object object0 = new Object();
      boolean boolean0 = entityType0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      boolean boolean0 = entityType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      boolean boolean0 = entityType0.equals(entityType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      entityType0.setCountry(65535);
      int int0 = entityType0.getMarshalledSize();
      assertEquals(65535, entityType0.getCountry());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      short short0 = entityType0.getSpec();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      short short0 = entityType0.getCategory();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      short short0 = entityType0.getExtra();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      short short0 = entityType0.getEntityKind();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      int int0 = entityType0.getCountry();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      short short0 = entityType0.getSubcategory();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      short short0 = entityType0.getDomain();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EntityType entityType0 = new EntityType();
      // Undeclared exception!
      try { 
        entityType0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.EntityType", e);
      }
  }
}
