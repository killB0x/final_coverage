/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:37:51 GMT 2022
 */

package edu.nps.moves.dis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis.Relationship;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Relationship_ESTest extends Relationship_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      relationship0.setPosition((-339));
      Relationship relationship1 = new Relationship();
      boolean boolean0 = relationship1.equalsImpl(relationship0);
      assertEquals((-339), relationship0.getPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      Relationship relationship1 = new Relationship();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-89);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      relationship0.unmarshal(byteBuffer0);
      boolean boolean0 = relationship1.equalsImpl(relationship0);
      assertEquals(167, relationship0.getNature());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      Relationship relationship1 = new Relationship();
      relationship1.setPosition((-3592));
      boolean boolean0 = relationship1.equals(relationship0);
      assertEquals((-3592), relationship1.getPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      relationship0.setNature(2805);
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      relationship0.marshal(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-11), (byte)0, (byte)0}, byteArray0);
      assertEquals(2805, relationship0.getNature());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      relationship0.position = 3780;
      int int0 = relationship0.getMarshalledSize();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      relationship0.nature = (-1);
      int int0 = relationship0.getMarshalledSize();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      relationship0.position = 1;
      int int0 = relationship0.getPosition();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      relationship0.setPosition((-193));
      int int0 = relationship0.getPosition();
      assertEquals((-193), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      relationship0.setNature(2805);
      int int0 = relationship0.getNature();
      assertEquals(2805, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      relationship0.setNature((-1));
      int int0 = relationship0.getNature();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      boolean boolean0 = relationship0.equalsImpl(relationship0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        relationship0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      // Undeclared exception!
      try { 
        relationship0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.Relationship", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        relationship0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      relationship0.setNature(1);
      Relationship relationship1 = new Relationship();
      boolean boolean0 = relationship0.equalsImpl(relationship1);
      assertEquals(1, relationship0.getNature());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      Object object0 = new Object();
      boolean boolean0 = relationship0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      Object object0 = new Object();
      boolean boolean0 = relationship0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      boolean boolean0 = relationship0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      boolean boolean0 = relationship0.equals(relationship0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      int int0 = relationship0.getNature();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      int int0 = relationship0.getPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Relationship relationship0 = new Relationship();
      // Undeclared exception!
      try { 
        relationship0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis.Relationship", e);
      }
  }
}
