/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 15:47:00 GMT 2022
 */

package edu.nps.moves.disutil;

import org.junit.Test;
import static org.junit.Assert.*;
import edu.nps.moves.disutil.EulerConversions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EulerConversions_ESTest extends EulerConversions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = EulerConversions.getPhiFromTaitBryanAngles((-221.64748), 0.0, 0.0, (-3395.7), (-2414.877));
      assertEquals((-1.3068501841527242), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = EulerConversions.getPhiFromTaitBryanAngles((-1.0), 36.28329606542348, 118.38245498106642, 1.0, 0.0);
      assertEquals((-0.5165740321690502), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = EulerConversions.getPitchFromEuler(43.868426175955, (-1.0), (-2668.328311652), (-1306.0));
      assertEquals((-31.484626347070005), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = EulerConversions.getOrientationFromEuler(1.0, 3227.20770588, 1049.741856, 1.0);
      assertEquals(98.2712454630659, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = EulerConversions.getThetaFromTaitBryanAngles(0.5762223726804606, 4803.01511, 0.0, 4803.01511);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = EulerConversions.getThetaFromTaitBryanAngles(1.0, 1.0, (-122.70422048691768), 1.0);
      assertEquals(0.28087495846454064, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = EulerConversions.getRollFromEuler((-2778.089684294), 0.0, 0.0, 0.01745329252, 0.0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = EulerConversions.getRollFromEuler((-1984.55681), (-1984.55681), (-1984.55681), 1.0, 1.0);
      assertEquals((-122.70422048691768), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = EulerConversions.getPsiFromTaitBryanAngles(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = EulerConversions.getPsiFromTaitBryanAngles(2602.60124, 389.845, 1.0, (-2668.328311652));
      assertEquals(0.2669979316148797, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = EulerConversions.getPitchFromEuler((-1050.44751828882), (-0.7595079108736196), (-1500.87), 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = EulerConversions.getPhiFromTaitBryanAngles(0.0, (-1.0), 0.0, 0.0, 651.845);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = EulerConversions.getPhiFromTaitBryanAngles(0.0, 57.2957795131, 1.0, 1326.20929107, 1.0);
      assertEquals((-3.1050656239472576), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = EulerConversions.getOrientationFromEuler(639.9170316, 0.0, 0.0, 1326.20929107);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = EulerConversions.getOrientationFromEuler(0.0, 1.0, 0.0, (-1898.3631528867706));
      assertEquals((-36.959653716216046), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EulerConversions eulerConversions0 = new EulerConversions();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = EulerConversions.getRollFromEuler(1.0, 0.01745329252, 1.0, 1.0, 0.0);
      assertEquals(147.55094427021675, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = EulerConversions.getPitchFromEuler(0.0, 0.0, (-1500.87), 0.0);
      assertEquals(43.51659779985669, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = EulerConversions.getPsiFromTaitBryanAngles(0.0, (-1500.87), (-1500.87), 0.0);
      assertEquals((-0.7595079108736196), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = EulerConversions.getThetaFromTaitBryanAngles(0.0, (-21.96780392263984), (-21.96780392263984), 0.0);
      assertEquals((-1.1873858189110602), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = EulerConversions.getPhiFromTaitBryanAngles(0.0, 1.0, 1.0, (-813.598322555), 202.27467272345);
      assertEquals(0.40625414031414114, double0, 0.01);
  }
}
