/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 15:41:39 GMT 2022
 */

package edu.nps.moves.disutil;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.disutil.BasicHaveQuickMpRecord;
import java.nio.BufferUnderflowException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BasicHaveQuickMpRecord_ESTest extends BasicHaveQuickMpRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      basicHaveQuickMpRecord0.setNetIdNetNumber((-59));
      List<Short> list0 = basicHaveQuickMpRecord0.marshal();
      basicHaveQuickMpRecord0.unmarshal(list0);
      assertEquals(3, basicHaveQuickMpRecord0.getNetIdFrequencyTable());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      basicHaveQuickMpRecord0.netIdMode = (-540);
      List<Short> list0 = basicHaveQuickMpRecord0.marshal();
      basicHaveQuickMpRecord0.unmarshal(list0);
      assertEquals(2, basicHaveQuickMpRecord0.getNetIdMode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      basicHaveQuickMpRecord0.netIdNetNumber = (-1);
      basicHaveQuickMpRecord0.setNetIdMode(962);
      basicHaveQuickMpRecord0.marshal();
      assertEquals(962, basicHaveQuickMpRecord0.getNetIdMode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      basicHaveQuickMpRecord0.setNetIdMode(962);
      basicHaveQuickMpRecord0.setNetIdFrequencyTable((-1));
      basicHaveQuickMpRecord0.marshal();
      assertEquals(962, basicHaveQuickMpRecord0.getNetIdMode());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      basicHaveQuickMpRecord0.setTimeOfDay((-3470));
      basicHaveQuickMpRecord0.marshal();
      assertEquals((-3470), basicHaveQuickMpRecord0.getTimeOfDay());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      basicHaveQuickMpRecord0.mwodIndex = (short) (-1616);
      List<Short> list0 = basicHaveQuickMpRecord0.marshal();
      assertTrue(list0.contains((short) (-1616)));
      assertEquals(8, list0.size());
      assertEquals(16, basicHaveQuickMpRecord0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      basicHaveQuickMpRecord0.timeOfDay = 3266;
      int int0 = basicHaveQuickMpRecord0.getTimeOfDay();
      assertEquals(3266, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      basicHaveQuickMpRecord0.setTimeOfDay((-1569));
      int int0 = basicHaveQuickMpRecord0.getTimeOfDay();
      assertEquals((-1569), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      basicHaveQuickMpRecord0.setNetIdNetNumber(1923);
      int int0 = basicHaveQuickMpRecord0.getNetIdNetNumber();
      assertEquals(1923, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      basicHaveQuickMpRecord0.netIdNetNumber = (-1);
      int int0 = basicHaveQuickMpRecord0.getNetIdNetNumber();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      basicHaveQuickMpRecord0.setNetIdMode(962);
      int int0 = basicHaveQuickMpRecord0.getNetIdMode();
      assertEquals(962, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      basicHaveQuickMpRecord0.setNetIdMode((-98));
      int int0 = basicHaveQuickMpRecord0.getNetIdMode();
      assertEquals((-98), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      basicHaveQuickMpRecord0.setNetIdFrequencyTable(413);
      int int0 = basicHaveQuickMpRecord0.getNetIdFrequencyTable();
      assertEquals(413, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      basicHaveQuickMpRecord0.netIdFrequencyTable = (-1);
      int int0 = basicHaveQuickMpRecord0.getNetIdFrequencyTable();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      basicHaveQuickMpRecord0.setMwodIndex((short)3987);
      short short0 = basicHaveQuickMpRecord0.getMwodIndex();
      assertEquals((short)3987, short0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      basicHaveQuickMpRecord0.mwodIndex = (short) (-1616);
      short short0 = basicHaveQuickMpRecord0.getMwodIndex();
      assertEquals((short) (-1616), short0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      // Undeclared exception!
      try { 
        basicHaveQuickMpRecord0.unmarshal(linkedList0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      // Undeclared exception!
      try { 
        basicHaveQuickMpRecord0.unmarshal((List<Short>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.disutil.BasicHaveQuickMpRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      int int0 = basicHaveQuickMpRecord0.getMarshalledSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      int int0 = basicHaveQuickMpRecord0.getNetIdMode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      int int0 = basicHaveQuickMpRecord0.getNetIdFrequencyTable();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      int int0 = basicHaveQuickMpRecord0.getNetIdNetNumber();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      short short0 = basicHaveQuickMpRecord0.getMwodIndex();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BasicHaveQuickMpRecord basicHaveQuickMpRecord0 = new BasicHaveQuickMpRecord();
      int int0 = basicHaveQuickMpRecord0.getTimeOfDay();
      assertEquals(0, int0);
  }
}
