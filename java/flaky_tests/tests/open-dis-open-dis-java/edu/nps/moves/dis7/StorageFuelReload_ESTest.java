/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:01:42 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.StorageFuelReload;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StorageFuelReload_ESTest extends StorageFuelReload_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      StorageFuelReload storageFuelReload1 = new StorageFuelReload();
      assertEquals((short)0, storageFuelReload1.getPadding());
      
      storageFuelReload1.padding = (short)1112;
      boolean boolean0 = storageFuelReload1.equals(storageFuelReload0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      StorageFuelReload storageFuelReload1 = new StorageFuelReload();
      storageFuelReload1.setFuelLocation((short)1531);
      boolean boolean0 = storageFuelReload0.equals(storageFuelReload1);
      assertEquals((short)1531, storageFuelReload1.getFuelLocation());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.standardQuantityReloadTime = (short) (-343);
      StorageFuelReload storageFuelReload1 = new StorageFuelReload();
      boolean boolean0 = storageFuelReload0.equals(storageFuelReload1);
      assertFalse(boolean0);
      assertEquals((short)0, storageFuelReload1.getPadding());
      assertFalse(storageFuelReload1.equals((Object)storageFuelReload0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setMaximumQuantity(595L);
      StorageFuelReload storageFuelReload1 = new StorageFuelReload();
      boolean boolean0 = storageFuelReload0.equalsImpl(storageFuelReload1);
      assertEquals(595L, storageFuelReload0.getMaximumQuantity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      StorageFuelReload storageFuelReload1 = new StorageFuelReload();
      assertTrue(storageFuelReload1.equals((Object)storageFuelReload0));
      
      storageFuelReload1.standardQuantity = 478L;
      boolean boolean0 = storageFuelReload0.equals(storageFuelReload1);
      assertFalse(storageFuelReload1.equals((Object)storageFuelReload0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.fuelMeasurementUnits = (short)1908;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(512);
      storageFuelReload0.marshal(byteBuffer0);
      assertEquals((short)0, storageFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.fuelType = (short) (-18);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(512);
      storageFuelReload0.marshal(byteBuffer0);
      assertEquals((short)0, storageFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setFuelLocation((short)255);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((short)255);
      storageFuelReload0.marshal(byteBuffer0);
      assertEquals((short)255, storageFuelReload0.getFuelLocation());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.standardQuantityReloadTime = (short)852;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(131);
      storageFuelReload0.marshal(byteBuffer0);
      assertEquals((short)0, storageFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setPadding((short) (-1348));
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(512);
      storageFuelReload0.marshal(byteBuffer0);
      assertEquals((short) (-1348), storageFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(452);
      storageFuelReload0.maximumQuantity = 1L;
      storageFuelReload0.marshal(byteBuffer0);
      assertEquals((short)0, storageFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setFuelLocation((short)1531);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(302);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      storageFuelReload0.marshal(dataOutputStream0);
      assertEquals((short)1531, storageFuelReload0.getFuelLocation());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setFuelType((short)14);
      MockFile mockFile0 = new MockFile("I");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      storageFuelReload0.marshal(dataOutputStream0);
      assertEquals((short)14, storageFuelReload0.getFuelType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setFuelMeasurementUnits((short)32513);
      File file0 = MockFile.createTempFile("mx?C2}h!%m", "{\"1=G!W2<J");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      storageFuelReload0.marshal(dataOutputStream0);
      assertEquals((short)32513, storageFuelReload0.getFuelMeasurementUnits());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setMaximumQuantityReloadTime((short)4);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      storageFuelReload0.marshal(dataOutputStream0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals((short)4, storageFuelReload0.getMaximumQuantityReloadTime());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.standardQuantityReloadTime = (short)1;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      storageFuelReload0.marshal(dataOutputStream0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals((short)0, storageFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.standardQuantity = (long) 14;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(302);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      storageFuelReload0.marshal(dataOutputStream0);
      assertEquals("\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1376);
      storageFuelReload0.unmarshal(byteBuffer0);
      assertEquals((short)0, storageFuelReload0.getFuelLocation());
      assertEquals((short)0, storageFuelReload0.getFuelMeasurementUnits());
      assertEquals((short)0, storageFuelReload0.getPadding());
      assertEquals((short)0, storageFuelReload0.getMaximumQuantityReloadTime());
      assertEquals((short)0, storageFuelReload0.getStandardQuantityReloadTime());
      assertEquals((short)0, storageFuelReload0.getFuelType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      storageFuelReload0.unmarshal(dataInputStream0);
      assertEquals((short)0, storageFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setStandardQuantityReloadTime((short)4);
      short short0 = storageFuelReload0.getStandardQuantityReloadTime();
      assertEquals((short)4, short0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setStandardQuantity((short)1843);
      long long0 = storageFuelReload0.getStandardQuantity();
      assertEquals(1843L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.standardQuantity = (long) (short) (-1);
      long long0 = storageFuelReload0.getStandardQuantity();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setPadding((short) (-3099));
      short short0 = storageFuelReload0.getPadding();
      assertEquals((short) (-3099), short0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setMaximumQuantityReloadTime((short)1319);
      short short0 = storageFuelReload0.getMaximumQuantityReloadTime();
      assertEquals((short)1319, short0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setMaximumQuantityReloadTime((short) (-357));
      short short0 = storageFuelReload0.getMaximumQuantityReloadTime();
      assertEquals((short) (-357), short0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setMaximumQuantity((short)1319);
      long long0 = storageFuelReload0.getMaximumQuantity();
      assertEquals(1319L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setMaximumQuantity((-3112L));
      long long0 = storageFuelReload0.getMaximumQuantity();
      assertEquals((-3112L), long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.fuelType = (short)1843;
      short short0 = storageFuelReload0.getFuelType();
      assertEquals((short)1843, short0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setFuelType((short) (-830));
      short short0 = storageFuelReload0.getFuelType();
      assertEquals((short) (-830), short0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.fuelMeasurementUnits = (short) (-1424);
      short short0 = storageFuelReload0.getFuelMeasurementUnits();
      assertEquals((short) (-1424), short0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.fuelLocation = (short)1707;
      short short0 = storageFuelReload0.getFuelLocation();
      assertEquals((short)1707, short0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setFuelLocation((short) (-331));
      short short0 = storageFuelReload0.getFuelLocation();
      assertEquals((short) (-331), short0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      boolean boolean0 = storageFuelReload0.equalsImpl(storageFuelReload0);
      assertTrue(boolean0);
      assertEquals((short)0, storageFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      // Undeclared exception!
      try { 
        storageFuelReload0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.StorageFuelReload", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      // Undeclared exception!
      try { 
        storageFuelReload0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setPadding((short) (-343));
      StorageFuelReload storageFuelReload1 = new StorageFuelReload();
      boolean boolean0 = storageFuelReload0.equalsImpl(storageFuelReload1);
      assertEquals((short) (-343), storageFuelReload0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      StorageFuelReload storageFuelReload1 = new StorageFuelReload();
      storageFuelReload0.setFuelLocation((short)1);
      boolean boolean0 = storageFuelReload0.equalsImpl(storageFuelReload1);
      assertEquals((short)1, storageFuelReload0.getFuelLocation());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.fuelType = (short) (-3099);
      StorageFuelReload storageFuelReload1 = new StorageFuelReload();
      boolean boolean0 = storageFuelReload0.equalsImpl(storageFuelReload1);
      assertFalse(boolean0);
      assertFalse(storageFuelReload1.equals((Object)storageFuelReload0));
      assertEquals((short)0, storageFuelReload1.getPadding());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      StorageFuelReload storageFuelReload1 = new StorageFuelReload();
      storageFuelReload0.setFuelMeasurementUnits((short)4);
      boolean boolean0 = storageFuelReload1.equalsImpl(storageFuelReload0);
      assertEquals((short)4, storageFuelReload0.getFuelMeasurementUnits());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setMaximumQuantityReloadTime((short) (-343));
      StorageFuelReload storageFuelReload1 = new StorageFuelReload();
      boolean boolean0 = storageFuelReload0.equalsImpl(storageFuelReload1);
      assertEquals((short) (-343), storageFuelReload0.getMaximumQuantityReloadTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      StorageFuelReload storageFuelReload1 = new StorageFuelReload();
      assertTrue(storageFuelReload1.equals((Object)storageFuelReload0));
      
      storageFuelReload1.fuelType = (short)1;
      boolean boolean0 = storageFuelReload1.equals(storageFuelReload0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      StorageFuelReload storageFuelReload1 = new StorageFuelReload();
      storageFuelReload1.setFuelMeasurementUnits((short)255);
      boolean boolean0 = storageFuelReload1.equals(storageFuelReload0);
      assertEquals((short)255, storageFuelReload1.getFuelMeasurementUnits());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.maximumQuantityReloadTime = (short)1531;
      StorageFuelReload storageFuelReload1 = new StorageFuelReload();
      boolean boolean0 = storageFuelReload0.equals(storageFuelReload1);
      assertFalse(storageFuelReload1.equals((Object)storageFuelReload0));
      assertEquals((short)0, storageFuelReload1.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.standardQuantityReloadTime = (short)3579;
      StorageFuelReload storageFuelReload1 = new StorageFuelReload();
      boolean boolean0 = storageFuelReload0.equalsImpl(storageFuelReload1);
      assertEquals((short)0, storageFuelReload1.getPadding());
      assertFalse(storageFuelReload1.equals((Object)storageFuelReload0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setMaximumQuantity((short) (-343));
      StorageFuelReload storageFuelReload1 = new StorageFuelReload();
      boolean boolean0 = storageFuelReload0.equalsImpl(storageFuelReload1);
      assertEquals((-343L), storageFuelReload0.getMaximumQuantity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      Object object0 = new Object();
      boolean boolean0 = storageFuelReload0.equalsImpl(object0);
      assertEquals((short)0, storageFuelReload0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      Object object0 = new Object();
      boolean boolean0 = storageFuelReload0.equals(object0);
      assertEquals((short)0, storageFuelReload0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      boolean boolean0 = storageFuelReload0.equals((Object) null);
      assertEquals((short)0, storageFuelReload0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      boolean boolean0 = storageFuelReload0.equals(storageFuelReload0);
      assertEquals((short)0, storageFuelReload0.getPadding());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.getStandardQuantityReloadTime();
      assertEquals((short)0, storageFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.getMaximumQuantity();
      assertEquals((short)0, storageFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      int int0 = storageFuelReload0.getMarshalledSize();
      assertEquals(14, int0);
      assertEquals((short)0, storageFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setFuelMeasurementUnits((short)4);
      short short0 = storageFuelReload0.getFuelMeasurementUnits();
      assertEquals((short)4, short0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.getFuelLocation();
      assertEquals((short)0, storageFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setStandardQuantityReloadTime((byte) (-19));
      short short0 = storageFuelReload0.getStandardQuantityReloadTime();
      assertEquals((short) (-19), short0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.getStandardQuantity();
      assertEquals((short)0, storageFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.marshal((DataOutputStream) null);
      assertEquals((short)0, storageFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      assertEquals((short)0, storageFuelReload0.getPadding());
      
      storageFuelReload0.setPadding((short)1);
      short short0 = storageFuelReload0.getPadding();
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      short short0 = storageFuelReload0.getPadding();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      // Undeclared exception!
      try { 
        storageFuelReload0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.StorageFuelReload", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.getFuelMeasurementUnits();
      assertEquals((short)0, storageFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        storageFuelReload0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.getMaximumQuantityReloadTime();
      assertEquals((short)0, storageFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.setStandardQuantity((short)1843);
      StorageFuelReload storageFuelReload1 = new StorageFuelReload();
      boolean boolean0 = storageFuelReload0.equalsImpl(storageFuelReload1);
      assertEquals(1843L, storageFuelReload0.getStandardQuantity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StorageFuelReload storageFuelReload0 = new StorageFuelReload();
      storageFuelReload0.getFuelType();
      assertEquals((short)0, storageFuelReload0.getPadding());
  }
}
