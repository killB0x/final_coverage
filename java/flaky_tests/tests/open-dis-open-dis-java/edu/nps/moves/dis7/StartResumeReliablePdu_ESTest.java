/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 11:56:46 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.ClockTime;
import edu.nps.moves.dis7.EntityID;
import edu.nps.moves.dis7.StartResumeReliablePdu;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.InputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StartResumeReliablePdu_ESTest extends StartResumeReliablePdu_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      StartResumeReliablePdu startResumeReliablePdu1 = new StartResumeReliablePdu();
      startResumeReliablePdu1.setRequestID((-1891L));
      boolean boolean0 = startResumeReliablePdu1.equalsImpl(startResumeReliablePdu0);
      assertEquals((-1891L), startResumeReliablePdu1.getRequestID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.setTimestamp((-5028L));
      boolean boolean0 = startResumeReliablePdu0.equalsImpl(startResumeReliablePdu0);
      assertEquals((short)53, startResumeReliablePdu0.getPduType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      StartResumeReliablePdu startResumeReliablePdu1 = new StartResumeReliablePdu();
      startResumeReliablePdu0.setPad2((short) (-1));
      boolean boolean0 = startResumeReliablePdu1.equalsImpl(startResumeReliablePdu0);
      assertEquals((short) (-1), startResumeReliablePdu0.getPad2());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      StartResumeReliablePdu startResumeReliablePdu1 = new StartResumeReliablePdu();
      assertTrue(startResumeReliablePdu1.equals((Object)startResumeReliablePdu0));
      
      startResumeReliablePdu1.padding = (short)2139;
      boolean boolean0 = startResumeReliablePdu1.equalsImpl(startResumeReliablePdu0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      StartResumeReliablePdu startResumeReliablePdu1 = new StartResumeReliablePdu();
      startResumeReliablePdu1.setPad1(48);
      boolean boolean0 = startResumeReliablePdu0.equalsImpl(startResumeReliablePdu1);
      assertEquals(48, startResumeReliablePdu1.getPad1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.requiredReliabilityService = (short)399;
      boolean boolean0 = startResumeReliablePdu0.equalsImpl(startResumeReliablePdu0);
      assertEquals((short)53, startResumeReliablePdu0.getPduType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.setTimestamp(23);
      byte[] byteArray0 = startResumeReliablePdu0.marshal();
      assertEquals(48, byteArray0.length);
      assertEquals((short)53, startResumeReliablePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.setPad2((short)1886);
      startResumeReliablePdu0.marshal();
      assertEquals((short)1886, startResumeReliablePdu0.getPad2());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.setRequiredReliabilityService((short) (-1));
      startResumeReliablePdu0.marshal();
      assertEquals((short) (-1), startResumeReliablePdu0.getRequiredReliabilityService());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.setPad2((short)2825);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\"", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      startResumeReliablePdu0.marshal(dataOutputStream0);
      assertEquals((short)2825, startResumeReliablePdu0.getPad2());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.requiredReliabilityService = (short) (-3197);
      startResumeReliablePdu0.marshal((DataOutputStream) null);
      assertEquals((short)53, startResumeReliablePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      ClockTime clockTime0 = new ClockTime();
      startResumeReliablePdu0.setSimulationTime(clockTime0);
      assertEquals((short)53, startResumeReliablePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3415);
      startResumeReliablePdu0.marshal(byteBuffer0);
      assertEquals((short)53, startResumeReliablePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      assertEquals((short)53, startResumeReliablePdu0.getPduType());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1821);
      startResumeReliablePdu0.unmarshal(byteBuffer0);
      assertEquals((short)0, startResumeReliablePdu0.getPad2());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.setRequiredReliabilityService((short)48);
      short short0 = startResumeReliablePdu0.getRequiredReliabilityService();
      assertEquals((short)48, short0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.setRequiredReliabilityService((short) (-2059));
      short short0 = startResumeReliablePdu0.getRequiredReliabilityService();
      assertEquals((short) (-2059), short0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.setRequestID(337L);
      long long0 = startResumeReliablePdu0.getRequestID();
      assertEquals(337L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.setRequestID((-11L));
      long long0 = startResumeReliablePdu0.getRequestID();
      assertEquals((-11L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.setPad2((short)3508);
      short short0 = startResumeReliablePdu0.getPad2();
      assertEquals((short)3508, short0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.setPad2((short) (-608));
      short short0 = startResumeReliablePdu0.getPad2();
      assertEquals((short) (-608), short0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.setPad1(737);
      int int0 = startResumeReliablePdu0.getPad1();
      assertEquals(737, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.pad1 = (-1033);
      int int0 = startResumeReliablePdu0.getPad1();
      assertEquals((-1033), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      int int0 = startResumeReliablePdu0.getMarshalledSize();
      assertEquals((short)53, startResumeReliablePdu0.getPduType());
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      byte[] byteArray0 = new byte[7];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        startResumeReliablePdu0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      // Undeclared exception!
      try { 
        startResumeReliablePdu0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.setRealWorldTime((ClockTime) null);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1821);
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        startResumeReliablePdu0.marshal(byteBuffer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.StartResumeReliablePdu", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.setReceivingEntityID((EntityID) null);
      // Undeclared exception!
      try { 
        startResumeReliablePdu0.equalsImpl(startResumeReliablePdu0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.SimulationManagementWithReliabilityFamilyPdu", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.setExerciseID((short)1);
      StartResumeReliablePdu startResumeReliablePdu1 = new StartResumeReliablePdu();
      boolean boolean0 = startResumeReliablePdu0.equalsImpl(startResumeReliablePdu1);
      assertFalse(boolean0);
      assertEquals((short)53, startResumeReliablePdu1.getPduType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.requestID = 1920L;
      StartResumeReliablePdu startResumeReliablePdu1 = new StartResumeReliablePdu();
      boolean boolean0 = startResumeReliablePdu0.equalsImpl(startResumeReliablePdu1);
      assertEquals((short)53, startResumeReliablePdu1.getPduType());
      assertFalse(startResumeReliablePdu1.equals((Object)startResumeReliablePdu0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      StartResumeReliablePdu startResumeReliablePdu1 = new StartResumeReliablePdu();
      startResumeReliablePdu1.setPad2((short)1);
      boolean boolean0 = startResumeReliablePdu0.equalsImpl(startResumeReliablePdu1);
      assertEquals((short)1, startResumeReliablePdu1.getPad2());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      StartResumeReliablePdu startResumeReliablePdu1 = new StartResumeReliablePdu();
      startResumeReliablePdu0.setPad1(1352);
      boolean boolean0 = startResumeReliablePdu0.equalsImpl(startResumeReliablePdu1);
      assertEquals(1352, startResumeReliablePdu0.getPad1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      StartResumeReliablePdu startResumeReliablePdu1 = new StartResumeReliablePdu();
      assertTrue(startResumeReliablePdu1.equals((Object)startResumeReliablePdu0));
      
      startResumeReliablePdu0.requiredReliabilityService = (short)3109;
      boolean boolean0 = startResumeReliablePdu1.equalsImpl(startResumeReliablePdu0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      Object object0 = new Object();
      boolean boolean0 = startResumeReliablePdu0.equalsImpl(object0);
      assertFalse(boolean0);
      assertEquals((short)53, startResumeReliablePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      boolean boolean0 = startResumeReliablePdu0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals((short)53, startResumeReliablePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      boolean boolean0 = startResumeReliablePdu0.equals(startResumeReliablePdu0);
      assertEquals((short)53, startResumeReliablePdu0.getPduType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      StartResumeReliablePdu startResumeReliablePdu1 = new StartResumeReliablePdu();
      boolean boolean0 = startResumeReliablePdu0.equals(startResumeReliablePdu1);
      assertTrue(boolean0);
      assertEquals((short)53, startResumeReliablePdu1.getPduType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      ClockTime clockTime0 = startResumeReliablePdu0.getSimulationTime();
      boolean boolean0 = startResumeReliablePdu0.equals(clockTime0);
      assertFalse(boolean0);
      assertEquals((short)53, startResumeReliablePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      // Undeclared exception!
      try { 
        startResumeReliablePdu0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.PduSuperclass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.setRequestID((short)2825);
      File file0 = MockFile.createTempFile("J~zoz'sD-':", "J~zoz'sD-':");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      startResumeReliablePdu0.marshal(dataOutputStream0);
      assertEquals(2825L, startResumeReliablePdu0.getRequestID());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.getRealWorldTime();
      assertEquals((short)53, startResumeReliablePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.getRequestID();
      assertEquals((short)53, startResumeReliablePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      short short0 = startResumeReliablePdu0.getRequiredReliabilityService();
      assertEquals((short)0, short0);
      assertEquals((short)53, startResumeReliablePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      short short0 = startResumeReliablePdu0.getPad2();
      assertEquals((short)53, startResumeReliablePdu0.getPduType());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      startResumeReliablePdu0.setPad2((short) (-1));
      boolean boolean0 = startResumeReliablePdu0.equalsImpl(startResumeReliablePdu0);
      assertEquals((short) (-1), startResumeReliablePdu0.getPad2());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      int int0 = startResumeReliablePdu0.getPad1();
      assertEquals((short)53, startResumeReliablePdu0.getPduType());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StartResumeReliablePdu startResumeReliablePdu0 = new StartResumeReliablePdu();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      startResumeReliablePdu0.unmarshal(dataInputStream0);
      assertEquals((short)53, startResumeReliablePdu0.getPduType());
  }
}
