/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 13:08:47 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.AcknowledgeReliablePdu;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.SequenceInputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AcknowledgeReliablePdu_ESTest extends AcknowledgeReliablePdu_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      AcknowledgeReliablePdu acknowledgeReliablePdu1 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.setRequestID((short) (-1));
      boolean boolean0 = acknowledgeReliablePdu0.equalsImpl(acknowledgeReliablePdu1);
      assertEquals((-1L), acknowledgeReliablePdu0.getRequestID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      AcknowledgeReliablePdu acknowledgeReliablePdu1 = new AcknowledgeReliablePdu();
      assertTrue(acknowledgeReliablePdu1.equals((Object)acknowledgeReliablePdu0));
      
      acknowledgeReliablePdu1.responseFlag = 2127224368;
      boolean boolean0 = acknowledgeReliablePdu0.equalsImpl(acknowledgeReliablePdu1);
      assertFalse(acknowledgeReliablePdu1.equals((Object)acknowledgeReliablePdu0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      AcknowledgeReliablePdu acknowledgeReliablePdu1 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.setAcknowledgeFlag((-2921));
      boolean boolean0 = acknowledgeReliablePdu0.equalsImpl(acknowledgeReliablePdu1);
      assertEquals((-2921), acknowledgeReliablePdu0.getAcknowledgeFlag());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.timestamp = 1438L;
      byte[] byteArray0 = acknowledgeReliablePdu0.marshal();
      assertEquals((short)55, acknowledgeReliablePdu0.getPduType());
      assertEquals(32, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.setAcknowledgeFlag(65535);
      acknowledgeReliablePdu0.marshal();
      assertEquals(65535, acknowledgeReliablePdu0.getAcknowledgeFlag());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.setRequestID(1L);
      MockFile mockFile0 = new MockFile("", "\"dx4{!");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      acknowledgeReliablePdu0.marshal(dataOutputStream0);
      assertEquals(1L, acknowledgeReliablePdu0.getRequestID());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.setAcknowledgeFlag(65535);
      MockFile mockFile0 = new MockFile("", "\"dx4{!");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      acknowledgeReliablePdu0.marshal(dataOutputStream0);
      assertEquals(65535, acknowledgeReliablePdu0.getAcknowledgeFlag());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1311);
      acknowledgeReliablePdu0.marshal(byteBuffer0);
      assertEquals((short)55, acknowledgeReliablePdu0.getPduType());
      assertEquals(32, acknowledgeReliablePdu0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      assertEquals((short)55, acknowledgeReliablePdu0.getPduType());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((byte)124);
      acknowledgeReliablePdu0.unmarshal(byteBuffer0);
      assertEquals(0, acknowledgeReliablePdu0.getResponseFlag());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      byte[] byteArray0 = acknowledgeReliablePdu0.marshal();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      acknowledgeReliablePdu0.unmarshal(dataInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(32, acknowledgeReliablePdu0.getLength());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.setResponseFlag(55);
      int int0 = acknowledgeReliablePdu0.getResponseFlag();
      assertEquals(55, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.responseFlag = (-1744);
      int int0 = acknowledgeReliablePdu0.getResponseFlag();
      assertEquals((-1744), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.setRequestID(508);
      long long0 = acknowledgeReliablePdu0.getRequestID();
      assertEquals(508L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.setRequestID((-1L));
      long long0 = acknowledgeReliablePdu0.getRequestID();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.acknowledgeFlag = (-2702);
      int int0 = acknowledgeReliablePdu0.getAcknowledgeFlag();
      assertEquals((-2702), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        acknowledgeReliablePdu0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2);
      // Undeclared exception!
      try { 
        acknowledgeReliablePdu0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.originatingEntityID = null;
      // Undeclared exception!
      try { 
        acknowledgeReliablePdu0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.SimulationManagementWithReliabilityFamilyPdu", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      boolean boolean0 = acknowledgeReliablePdu0.equalsImpl(acknowledgeReliablePdu0);
      assertTrue(boolean0);
      assertEquals(32, acknowledgeReliablePdu0.getLength());
      assertEquals((short)55, acknowledgeReliablePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.timestamp = 1195L;
      AcknowledgeReliablePdu acknowledgeReliablePdu1 = new AcknowledgeReliablePdu();
      boolean boolean0 = acknowledgeReliablePdu0.equalsImpl(acknowledgeReliablePdu1);
      assertEquals((short)55, acknowledgeReliablePdu1.getPduType());
      assertFalse(boolean0);
      assertEquals(32, acknowledgeReliablePdu1.getLength());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      AcknowledgeReliablePdu acknowledgeReliablePdu1 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.setRequestID((byte)105);
      boolean boolean0 = acknowledgeReliablePdu0.equalsImpl(acknowledgeReliablePdu1);
      assertEquals(105L, acknowledgeReliablePdu0.getRequestID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      AcknowledgeReliablePdu acknowledgeReliablePdu1 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.setResponseFlag(1);
      boolean boolean0 = acknowledgeReliablePdu0.equalsImpl(acknowledgeReliablePdu1);
      assertEquals(1, acknowledgeReliablePdu0.getResponseFlag());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      AcknowledgeReliablePdu acknowledgeReliablePdu1 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.setAcknowledgeFlag(2147450872);
      boolean boolean0 = acknowledgeReliablePdu0.equalsImpl(acknowledgeReliablePdu1);
      assertEquals(2147450872, acknowledgeReliablePdu0.getAcknowledgeFlag());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      Object object0 = new Object();
      boolean boolean0 = acknowledgeReliablePdu0.equalsImpl(object0);
      assertFalse(boolean0);
      assertEquals((short)55, acknowledgeReliablePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      Object object0 = new Object();
      boolean boolean0 = acknowledgeReliablePdu0.equals(object0);
      assertFalse(boolean0);
      assertEquals((short)55, acknowledgeReliablePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      boolean boolean0 = acknowledgeReliablePdu0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals((short)55, acknowledgeReliablePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      boolean boolean0 = acknowledgeReliablePdu0.equals(acknowledgeReliablePdu0);
      assertTrue(boolean0);
      assertEquals((short)55, acknowledgeReliablePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      AcknowledgeReliablePdu acknowledgeReliablePdu1 = new AcknowledgeReliablePdu();
      boolean boolean0 = acknowledgeReliablePdu1.equals(acknowledgeReliablePdu0);
      assertEquals((short)55, acknowledgeReliablePdu1.getPduType());
      assertEquals(32, acknowledgeReliablePdu1.getMarshalledSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.getRequestID();
      assertEquals((short)55, acknowledgeReliablePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      int int0 = acknowledgeReliablePdu0.getResponseFlag();
      assertEquals((short)55, acknowledgeReliablePdu0.getPduType());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      int int0 = acknowledgeReliablePdu0.getMarshalledSize();
      assertEquals((short)55, acknowledgeReliablePdu0.getPduType());
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.setAcknowledgeFlag(644);
      int int0 = acknowledgeReliablePdu0.getAcknowledgeFlag();
      assertEquals(644, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.unmarshal((DataInputStream) null);
      assertEquals((short)55, acknowledgeReliablePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      int int0 = acknowledgeReliablePdu0.getAcknowledgeFlag();
      assertEquals(0, int0);
      assertEquals((short)55, acknowledgeReliablePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      // Undeclared exception!
      try { 
        acknowledgeReliablePdu0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.PduSuperclass", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      // Undeclared exception!
      try { 
        acknowledgeReliablePdu0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.PduSuperclass", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AcknowledgeReliablePdu acknowledgeReliablePdu0 = new AcknowledgeReliablePdu();
      acknowledgeReliablePdu0.marshal((DataOutputStream) null);
      assertEquals((short)55, acknowledgeReliablePdu0.getPduType());
  }
}
