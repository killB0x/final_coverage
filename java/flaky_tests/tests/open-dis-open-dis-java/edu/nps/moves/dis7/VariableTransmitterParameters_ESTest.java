/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:47:05 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.VariableTransmitterParameters;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class VariableTransmitterParameters_ESTest extends VariableTransmitterParameters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      assertEquals(4L, variableTransmitterParameters0.getRecordLength());
      
      // Undeclared exception!
      try { 
        variableTransmitterParameters0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.VariableTransmitterParameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      variableTransmitterParameters0.marshal(dataOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      variableTransmitterParameters0.unmarshal(dataInputStream0);
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = variableTransmitterParameters0.getRecordType();
      assertEquals(0L, long0);
      
      variableTransmitterParameters0.getMarshalledSize();
      int int0 = variableTransmitterParameters0.getMarshalledSize();
      assertEquals(8, int0);
      assertEquals(4L, variableTransmitterParameters0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      int int0 = variableTransmitterParameters0.getMarshalledSize();
      assertEquals(4L, variableTransmitterParameters0.getRecordLength());
      assertEquals(8, int0);
      
      VariableTransmitterParameters variableTransmitterParameters1 = new VariableTransmitterParameters();
      variableTransmitterParameters0.unmarshal((DataInputStream) null);
      variableTransmitterParameters0.getMarshalledSize();
      variableTransmitterParameters0.equals((Object) null);
      VariableTransmitterParameters variableTransmitterParameters2 = new VariableTransmitterParameters();
      variableTransmitterParameters2.recordType = (long) 8;
      variableTransmitterParameters2.getRecordType();
      variableTransmitterParameters2.unmarshal((DataInputStream) null);
      assertEquals(8L, variableTransmitterParameters2.getRecordType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      VariableTransmitterParameters variableTransmitterParameters1 = new VariableTransmitterParameters();
      variableTransmitterParameters0.setRecordType((-1L));
      variableTransmitterParameters0.equals(variableTransmitterParameters1);
      variableTransmitterParameters1.unmarshal((DataInputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      variableTransmitterParameters1.unmarshal(dataInputStream0);
      variableTransmitterParameters1.unmarshal((DataInputStream) null);
      variableTransmitterParameters1.getMarshalledSize();
      variableTransmitterParameters1.setRecordLength((-1115L));
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      variableTransmitterParameters0.unmarshal(dataInputStream0);
      assertEquals((-1L), variableTransmitterParameters0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-84);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      variableTransmitterParameters0.unmarshal(dataInputStream0);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = variableTransmitterParameters0.equalsImpl(object1);
      assertFalse(boolean0);
      assertEquals(4L, variableTransmitterParameters0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-43);
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      VariableTransmitterParameters variableTransmitterParameters1 = new VariableTransmitterParameters();
      assertTrue(variableTransmitterParameters1.equals((Object)variableTransmitterParameters0));
      
      variableTransmitterParameters1.recordType = (long) (byte)46;
      boolean boolean0 = variableTransmitterParameters1.equalsImpl(variableTransmitterParameters0);
      assertFalse(boolean0);
      
      boolean boolean1 = variableTransmitterParameters0.equalsImpl((Object) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      VariableTransmitterParameters variableTransmitterParameters1 = new VariableTransmitterParameters();
      variableTransmitterParameters0.setRecordLength(3642L);
      variableTransmitterParameters1.setRecordLength(5L);
      variableTransmitterParameters0.equalsImpl(variableTransmitterParameters1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3258);
      variableTransmitterParameters1.marshal(byteBuffer0);
      variableTransmitterParameters1.getMarshalledSize();
      variableTransmitterParameters0.getRecordType();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      variableTransmitterParameters1.unmarshal(dataInputStream0);
      variableTransmitterParameters0.getMarshalledSize();
      variableTransmitterParameters1.unmarshal(dataInputStream0);
      variableTransmitterParameters1.getMarshalledSize();
      boolean boolean0 = variableTransmitterParameters0.equalsImpl(pushbackInputStream0);
      assertEquals(3642L, variableTransmitterParameters0.getRecordLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      boolean boolean0 = variableTransmitterParameters0.equals(variableTransmitterParameters0);
      assertTrue(boolean0);
      
      int int0 = variableTransmitterParameters0.getMarshalledSize();
      assertEquals(4L, variableTransmitterParameters0.getRecordLength());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      VariableTransmitterParameters variableTransmitterParameters1 = new VariableTransmitterParameters();
      boolean boolean0 = variableTransmitterParameters0.equals(variableTransmitterParameters1);
      assertTrue(boolean0);
      assertEquals(4L, variableTransmitterParameters1.getRecordLength());
      
      DataInputStream dataInputStream0 = null;
      // Undeclared exception!
      try { 
        variableTransmitterParameters1.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.VariableTransmitterParameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      Object object0 = new Object();
      boolean boolean0 = variableTransmitterParameters0.equals((Object) null);
      assertFalse(boolean0);
      
      int int0 = variableTransmitterParameters0.getMarshalledSize();
      assertEquals(8, int0);
      assertEquals(4L, variableTransmitterParameters0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      VariableTransmitterParameters variableTransmitterParameters1 = new VariableTransmitterParameters();
      assertEquals(4L, variableTransmitterParameters1.getRecordLength());
      
      variableTransmitterParameters1.recordLength = (-358L);
      boolean boolean0 = variableTransmitterParameters1.equals(variableTransmitterParameters0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      VariableTransmitterParameters variableTransmitterParameters1 = new VariableTransmitterParameters();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      variableTransmitterParameters0.setRecordLength(0L);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "`#.Vtp`\"");
      variableTransmitterParameters1.unmarshal((DataInputStream) null);
      variableTransmitterParameters0.equalsImpl(variableTransmitterParameters1);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      variableTransmitterParameters0.setRecordLength((-1822L));
      variableTransmitterParameters0.getRecordLength();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte) (-56);
      try { 
        pipedOutputStream0.write(byteArray0, 0, 3519);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      // Undeclared exception!
      try { 
        variableTransmitterParameters0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      Object object0 = new Object();
      boolean boolean0 = variableTransmitterParameters0.equals(object0);
      assertEquals(4L, variableTransmitterParameters0.getRecordLength());
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      variableTransmitterParameters0.unmarshal(dataInputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 907);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      variableTransmitterParameters0.marshal(dataOutputStream0);
      variableTransmitterParameters0.getMarshalledSize();
      variableTransmitterParameters0.equalsImpl(object0);
      variableTransmitterParameters0.getRecordType();
      variableTransmitterParameters0.unmarshal(dataInputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0, (int) (byte)0, 0);
      // Undeclared exception!
      try { 
        variableTransmitterParameters0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      variableTransmitterParameters0.marshal((DataOutputStream) null);
      int int0 = variableTransmitterParameters0.getMarshalledSize();
      assertEquals(4L, variableTransmitterParameters0.getRecordLength());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      DataOutputStream dataOutputStream0 = null;
      variableTransmitterParameters0.marshal((DataOutputStream) null);
      variableTransmitterParameters0.setRecordType((-2294L));
      variableTransmitterParameters0.getRecordLength();
      variableTransmitterParameters0.getRecordType();
      Object object0 = new Object();
      variableTransmitterParameters0.equals(object0);
      // Undeclared exception!
      try { 
        ByteBuffer.allocateDirect((-41));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-41 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      boolean boolean0 = variableTransmitterParameters0.equalsImpl((Object) null);
      assertEquals(4L, variableTransmitterParameters0.getRecordLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      Object object0 = new Object();
      variableTransmitterParameters0.equalsImpl(object0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(".6Gp");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      variableTransmitterParameters0.setRecordType((-1661L));
      Charset charset0 = Charset.defaultCharset();
      String string0 = "EjeyFtz}2*>A`A";
      charset0.aliases();
      ByteBuffer byteBuffer0 = charset0.encode("EjeyFtz}2*>A`A");
      int int0 = 0;
      long long0 = (-1L);
      variableTransmitterParameters0.recordType = (-1L);
      variableTransmitterParameters0.marshal(byteBuffer0);
      // Undeclared exception!
      try { 
        variableTransmitterParameters0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(4);
      // Undeclared exception!
      try { 
        variableTransmitterParameters0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      variableTransmitterParameters0.unmarshal((DataInputStream) null);
      assertEquals(4L, variableTransmitterParameters0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      VariableTransmitterParameters variableTransmitterParameters1 = new VariableTransmitterParameters();
      variableTransmitterParameters1.unmarshal((DataInputStream) null);
      variableTransmitterParameters0.equalsImpl(variableTransmitterParameters1);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      long long0 = variableTransmitterParameters0.getRecordType();
      assertEquals(4L, variableTransmitterParameters0.getRecordLength());
      assertEquals(0L, long0);
      
      variableTransmitterParameters0.setRecordLength(2013L);
      String string0 = "";
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      assertEquals(4L, variableTransmitterParameters0.getRecordLength());
      
      variableTransmitterParameters0.setRecordLength(0L);
      long long0 = variableTransmitterParameters0.getRecordLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      VariableTransmitterParameters variableTransmitterParameters1 = new VariableTransmitterParameters();
      variableTransmitterParameters0.equals(variableTransmitterParameters1);
      variableTransmitterParameters1.setRecordType(1112L);
      boolean boolean0 = variableTransmitterParameters1.equals(variableTransmitterParameters0);
      assertEquals(1112L, variableTransmitterParameters1.getRecordType());
      assertFalse(boolean0);
      
      variableTransmitterParameters1.getMarshalledSize();
      assertEquals(1112L, variableTransmitterParameters1.getRecordType());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(8);
      variableTransmitterParameters1.unmarshal(byteBuffer0);
      assertEquals(8, variableTransmitterParameters1.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      variableTransmitterParameters0.setRecordType(1112L);
      assertEquals(1112L, variableTransmitterParameters0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      assertEquals(4L, variableTransmitterParameters0.getRecordLength());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(301);
      variableTransmitterParameters0.unmarshal(byteBuffer0);
      int int0 = variableTransmitterParameters0.getMarshalledSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      boolean boolean0 = variableTransmitterParameters0.equalsImpl(variableTransmitterParameters0);
      assertTrue(boolean0);
      assertEquals(4L, variableTransmitterParameters0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      VariableTransmitterParameters variableTransmitterParameters1 = new VariableTransmitterParameters();
      variableTransmitterParameters0.unmarshal((DataInputStream) null);
      assertTrue(variableTransmitterParameters0.equals((Object)variableTransmitterParameters1));
      
      Object object0 = new Object();
      boolean boolean0 = variableTransmitterParameters0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(4L, variableTransmitterParameters0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("j)=85#Psu34");
      variableTransmitterParameters0.marshal(byteBuffer0);
      boolean boolean0 = variableTransmitterParameters0.equals(variableTransmitterParameters0);
      assertTrue(boolean0);
      
      int int0 = variableTransmitterParameters0.getMarshalledSize();
      assertEquals(4L, variableTransmitterParameters0.getRecordLength());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VariableTransmitterParameters variableTransmitterParameters0 = new VariableTransmitterParameters();
      long long0 = 0L;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockPrintStream0, true, "M");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // M
         //
         verifyException("java.io.PrintStream", e);
      }
  }
}
