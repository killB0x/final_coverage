/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 15:12:59 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.EntityType;
import edu.nps.moves.dis7.GroupID;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GroupID_ESTest extends GroupID_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      groupID0.groupNumber = 1;
      int int0 = groupID0.getMarshalledSize();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(109);
      groupID0.unmarshal(byteBuffer0);
      assertEquals(0, groupID0.getGroupNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">D");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      groupID0.marshal(dataOutputStream0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(">D");
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      groupID0.unmarshal(dataInputStream0);
      assertEquals(0, groupID0.getGroupNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(65535);
      groupID0.marshal(byteBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      groupID0.setSimulationAddress((EntityType) null);
      EntityType entityType0 = groupID0.getSimulationAddress();
      assertNull(entityType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-42);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      groupID0.unmarshal(dataInputStream0);
      EntityType entityType0 = groupID0.getSimulationAddress();
      assertEquals((short)0, entityType0.getSpecific());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      EntityType entityType0 = groupID0.getSimulationAddress();
      entityType0.subcategory = (short) (-4650);
      EntityType entityType1 = groupID0.getSimulationAddress();
      assertEquals(0, entityType1.getCountry());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      EntityType entityType0 = new EntityType();
      entityType0.setSpecific((short)3857);
      groupID0.simulationAddress = entityType0;
      EntityType entityType1 = groupID0.getSimulationAddress();
      assertSame(entityType1, entityType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      EntityType entityType0 = new EntityType();
      entityType0.specific = (short) (-1);
      groupID0.setSimulationAddress(entityType0);
      EntityType entityType1 = groupID0.getSimulationAddress();
      assertEquals((short) (-1), entityType1.getSpecific());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      EntityType entityType0 = new EntityType();
      entityType0.extra = (short)3857;
      groupID0.simulationAddress = entityType0;
      EntityType entityType1 = groupID0.getSimulationAddress();
      assertEquals((short)3857, entityType1.getExtra());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-15);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      groupID0.unmarshal(dataInputStream0);
      EntityType entityType0 = groupID0.getSimulationAddress();
      assertEquals(8, entityType0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      EntityType entityType0 = groupID0.simulationAddress;
      entityType0.entityKind = (short) (-1);
      EntityType entityType1 = groupID0.getSimulationAddress();
      assertEquals(0, entityType1.getCountry());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-75);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      groupID0.unmarshal(dataInputStream0);
      EntityType entityType0 = groupID0.getSimulationAddress();
      assertEquals((short)0, entityType0.getSpecific());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      EntityType entityType0 = groupID0.simulationAddress;
      entityType0.domain = (short) (-4650);
      EntityType entityType1 = groupID0.getSimulationAddress();
      assertEquals((short) (-4650), entityType1.getDomain());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-42);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      groupID0.unmarshal(dataInputStream0);
      EntityType entityType0 = groupID0.getSimulationAddress();
      assertEquals(54784, entityType0.getCountry());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      EntityType entityType0 = groupID0.simulationAddress;
      entityType0.setCountry((-3464));
      EntityType entityType1 = groupID0.getSimulationAddress();
      assertEquals((short)0, entityType1.getCategory());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-107);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      groupID0.unmarshal(dataInputStream0);
      EntityType entityType0 = groupID0.getSimulationAddress();
      assertEquals((short)0, entityType0.getSpecific());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      groupID0.setGroupNumber(3111);
      int int0 = groupID0.getGroupNumber();
      assertEquals(3111, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      groupID0.setGroupNumber((-4650));
      int int0 = groupID0.getGroupNumber();
      assertEquals((-4650), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        groupID0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        groupID0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      groupID0.simulationAddress = null;
      // Undeclared exception!
      try { 
        groupID0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.GroupID", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      GroupID groupID1 = new GroupID();
      groupID1.setGroupNumber(1);
      boolean boolean0 = groupID0.equalsImpl(groupID1);
      assertEquals(1, groupID1.getGroupNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      boolean boolean0 = groupID0.equalsImpl(groupID0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      GroupID groupID1 = new GroupID();
      groupID0.setGroupNumber(1);
      boolean boolean0 = groupID0.equals(groupID1);
      assertEquals(1, groupID0.getGroupNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      EntityType entityType0 = new EntityType();
      entityType0.specific = (short) (-1);
      groupID0.setSimulationAddress(entityType0);
      GroupID groupID1 = new GroupID();
      boolean boolean0 = groupID0.equalsImpl(groupID1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("leTh)JI", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      boolean boolean0 = groupID0.equalsImpl(dataOutputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      Object object0 = new Object();
      boolean boolean0 = groupID0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      GroupID groupID1 = new GroupID();
      boolean boolean0 = groupID0.equals(groupID1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      boolean boolean0 = groupID0.equals(groupID0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      boolean boolean0 = groupID0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      EntityType entityType0 = groupID0.getSimulationAddress();
      entityType0.category = (short) (-283);
      EntityType entityType1 = groupID0.getSimulationAddress();
      assertEquals(8, entityType1.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      groupID0.marshal((DataOutputStream) null);
      assertEquals(10, groupID0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      // Undeclared exception!
      try { 
        groupID0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EntityType", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      // Undeclared exception!
      try { 
        groupID0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EntityType", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GroupID groupID0 = new GroupID();
      int int0 = groupID0.getGroupNumber();
      assertEquals(0, int0);
  }
}
