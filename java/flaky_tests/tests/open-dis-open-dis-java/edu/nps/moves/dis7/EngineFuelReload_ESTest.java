/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:20:52 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.EngineFuelReload;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EngineFuelReload_ESTest extends EngineFuelReload_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setFuelLocation((short)2758);
      EngineFuelReload engineFuelReload1 = new EngineFuelReload();
      boolean boolean0 = engineFuelReload1.equals(engineFuelReload0);
      assertEquals((short)2758, engineFuelReload0.getFuelLocation());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      EngineFuelReload engineFuelReload1 = new EngineFuelReload();
      assertTrue(engineFuelReload1.equals((Object)engineFuelReload0));
      
      engineFuelReload1.fuelMeasurmentUnits = (short)255;
      boolean boolean0 = engineFuelReload1.equalsImpl(engineFuelReload0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      assertEquals((short)0, engineFuelReload0.getPadding());
      
      engineFuelReload0.padding = (short)1822;
      EngineFuelReload engineFuelReload1 = new EngineFuelReload();
      boolean boolean0 = engineFuelReload0.equals(engineFuelReload1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      EngineFuelReload engineFuelReload1 = new EngineFuelReload();
      assertTrue(engineFuelReload1.equals((Object)engineFuelReload0));
      
      engineFuelReload1.maximumQuantityReloadTime = (-1170L);
      boolean boolean0 = engineFuelReload1.equalsImpl(engineFuelReload0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      EngineFuelReload engineFuelReload1 = new EngineFuelReload();
      engineFuelReload1.setStandardQuantityReloadTime((-2683L));
      boolean boolean0 = engineFuelReload0.equals(engineFuelReload1);
      assertEquals((-2683L), engineFuelReload1.getStandardQuantityReloadTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setStandardQuantity((-2285L));
      EngineFuelReload engineFuelReload1 = new EngineFuelReload();
      boolean boolean0 = engineFuelReload1.equalsImpl(engineFuelReload0);
      assertEquals((-2285L), engineFuelReload0.getStandardQuantity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setStandardQuantity(678L);
      boolean boolean0 = engineFuelReload0.equalsImpl(engineFuelReload0);
      assertEquals(678L, engineFuelReload0.getStandardQuantity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.fuelMeasurmentUnits = (short)22;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("edu.nps.moves.dis7.EngineFuelReload");
      engineFuelReload0.marshal(byteBuffer0);
      assertEquals((short)0, engineFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("edu.nps.moves.dis7.EngineFuelReload");
      engineFuelReload0.padding = (short) (-1162);
      engineFuelReload0.marshal(byteBuffer0);
      assertEquals(19, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setMaximumQuantityReloadTime(392L);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("edu.nps.moves.dis7.EngineFuelReload");
      engineFuelReload0.marshal(byteBuffer0);
      assertEquals(392L, engineFuelReload0.getMaximumQuantityReloadTime());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      byte[] byteArray0 = new byte[9];
      engineFuelReload0.setMaximumQuantity((-1578L));
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        engineFuelReload0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setStandardQuantity((-1295L));
      byte[] byteArray0 = new byte[8];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        engineFuelReload0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setFuelMeasurmentUnits((short)1);
      MockFile mockFile0 = new MockFile("U`9/.f");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      engineFuelReload0.marshal(dataOutputStream0);
      assertEquals((short)1, engineFuelReload0.getFuelMeasurmentUnits());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.padding = (short)4;
      MockFile mockFile0 = new MockFile("U`9/.f");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      engineFuelReload0.marshal(dataOutputStream0);
      assertEquals((short)0, engineFuelReload0.getFuelMeasurmentUnits());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setStandardQuantity((-1L));
      MockFile mockFile0 = new MockFile("U`9/.f");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      engineFuelReload0.marshal(dataOutputStream0);
      assertEquals((-1L), engineFuelReload0.getStandardQuantity());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.maximumQuantityReloadTime = (-795L);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1155);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      engineFuelReload0.marshal(dataOutputStream0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setStandardQuantityReloadTime(656L);
      File file0 = MockFile.createTempFile("edu.nps.moves.dis7.EngineFuelReload", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      engineFuelReload0.marshal(dataOutputStream0);
      assertEquals(656L, engineFuelReload0.getStandardQuantityReloadTime());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((byte)113);
      engineFuelReload0.unmarshal(byteBuffer0);
      assertEquals((short)0, engineFuelReload0.getFuelMeasurmentUnits());
      assertEquals((short)0, engineFuelReload0.getFuelLocation());
      assertEquals((short)0, engineFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      engineFuelReload0.unmarshal(dataInputStream0);
      assertEquals((short)0, engineFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setStandardQuantityReloadTime(656L);
      long long0 = engineFuelReload0.getStandardQuantityReloadTime();
      assertEquals(656L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.standardQuantityReloadTime = (-2683L);
      long long0 = engineFuelReload0.getStandardQuantityReloadTime();
      assertEquals((-2683L), long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setStandardQuantity(678L);
      long long0 = engineFuelReload0.getStandardQuantity();
      assertEquals(678L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setStandardQuantity((-1295L));
      long long0 = engineFuelReload0.getStandardQuantity();
      assertEquals((-1295L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.padding = (short)22;
      short short0 = engineFuelReload0.getPadding();
      assertEquals((short)22, short0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setPadding((short) (-624));
      short short0 = engineFuelReload0.getPadding();
      assertEquals((short) (-624), short0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.maximumQuantityReloadTime = 1990L;
      long long0 = engineFuelReload0.getMaximumQuantityReloadTime();
      assertEquals(1990L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setMaximumQuantityReloadTime((-1115L));
      long long0 = engineFuelReload0.getMaximumQuantityReloadTime();
      assertEquals((-1115L), long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.maximumQuantity = 3420L;
      long long0 = engineFuelReload0.getMaximumQuantity();
      assertEquals(3420L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setMaximumQuantity((-1L));
      long long0 = engineFuelReload0.getMaximumQuantity();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setFuelMeasurmentUnits((short)676);
      short short0 = engineFuelReload0.getFuelMeasurmentUnits();
      assertEquals((short)676, short0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setFuelMeasurmentUnits((short) (-1));
      short short0 = engineFuelReload0.getFuelMeasurmentUnits();
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.fuelLocation = (short) (-2221);
      short short0 = engineFuelReload0.getFuelLocation();
      assertEquals((short) (-2221), short0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      // Undeclared exception!
      try { 
        engineFuelReload0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EngineFuelReload", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      // Undeclared exception!
      try { 
        engineFuelReload0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EngineFuelReload", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      EngineFuelReload engineFuelReload1 = new EngineFuelReload();
      assertEquals((short)0, engineFuelReload1.getPadding());
      
      engineFuelReload1.padding = (short)580;
      boolean boolean0 = engineFuelReload0.equalsImpl(engineFuelReload1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      EngineFuelReload engineFuelReload1 = new EngineFuelReload();
      assertTrue(engineFuelReload1.equals((Object)engineFuelReload0));
      
      engineFuelReload0.fuelLocation = (short)707;
      boolean boolean0 = engineFuelReload0.equalsImpl(engineFuelReload1);
      assertFalse(engineFuelReload1.equals((Object)engineFuelReload0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.maximumQuantityReloadTime = 850L;
      EngineFuelReload engineFuelReload1 = new EngineFuelReload();
      boolean boolean0 = engineFuelReload0.equalsImpl(engineFuelReload1);
      assertEquals((short)0, engineFuelReload1.getPadding());
      assertFalse(engineFuelReload1.equals((Object)engineFuelReload0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      EngineFuelReload engineFuelReload1 = new EngineFuelReload();
      assertTrue(engineFuelReload1.equals((Object)engineFuelReload0));
      
      engineFuelReload0.standardQuantityReloadTime = 322L;
      boolean boolean0 = engineFuelReload1.equalsImpl(engineFuelReload0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      EngineFuelReload engineFuelReload1 = new EngineFuelReload();
      assertTrue(engineFuelReload1.equals((Object)engineFuelReload0));
      
      engineFuelReload0.maximumQuantity = (-2683L);
      boolean boolean0 = engineFuelReload0.equalsImpl(engineFuelReload1);
      assertFalse(engineFuelReload1.equals((Object)engineFuelReload0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setStandardQuantity((-1170L));
      EngineFuelReload engineFuelReload1 = new EngineFuelReload();
      boolean boolean0 = engineFuelReload0.equalsImpl(engineFuelReload1);
      assertEquals((-1170L), engineFuelReload0.getStandardQuantity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      boolean boolean0 = engineFuelReload0.equalsImpl(pipedInputStream0);
      assertEquals((short)0, engineFuelReload0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      boolean boolean0 = engineFuelReload0.equals(sequenceInputStream0);
      assertEquals((short)0, engineFuelReload0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      boolean boolean0 = engineFuelReload0.equals((Object) null);
      assertEquals((short)0, engineFuelReload0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      boolean boolean0 = engineFuelReload0.equals(engineFuelReload0);
      assertTrue(boolean0);
      assertEquals((short)0, engineFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setFuelLocation((short)1);
      short short0 = engineFuelReload0.getFuelLocation();
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.getFuelMeasurmentUnits();
      assertEquals((short)0, engineFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        engineFuelReload0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.getMaximumQuantity();
      assertEquals((short)0, engineFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.getFuelLocation();
      assertEquals((short)0, engineFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setFuelMeasurmentUnits((short) (-3498));
      EngineFuelReload engineFuelReload1 = new EngineFuelReload();
      boolean boolean0 = engineFuelReload0.equalsImpl(engineFuelReload1);
      assertEquals((short) (-3498), engineFuelReload0.getFuelMeasurmentUnits());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.marshal((DataOutputStream) null);
      assertEquals((short)0, engineFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      int int0 = engineFuelReload0.getMarshalledSize();
      assertEquals(19, int0);
      assertEquals((short)0, engineFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.getMaximumQuantityReloadTime();
      assertEquals((short)0, engineFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.getStandardQuantityReloadTime();
      assertEquals((short)0, engineFuelReload0.getPadding());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      short short0 = engineFuelReload0.getPadding();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.setMaximumQuantityReloadTime(850L);
      boolean boolean0 = engineFuelReload0.equalsImpl(engineFuelReload0);
      assertEquals(850L, engineFuelReload0.getMaximumQuantityReloadTime());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EngineFuelReload engineFuelReload0 = new EngineFuelReload();
      engineFuelReload0.getStandardQuantity();
      assertEquals((short)0, engineFuelReload0.getPadding());
  }
}
