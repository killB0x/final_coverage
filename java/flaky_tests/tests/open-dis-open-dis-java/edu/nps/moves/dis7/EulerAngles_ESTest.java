/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:23:53 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.EulerAngles;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EulerAngles_ESTest extends EulerAngles_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      eulerAngles0.phi = 828.1016F;
      EulerAngles eulerAngles1 = new EulerAngles();
      boolean boolean0 = eulerAngles0.equalsImpl(eulerAngles1);
      assertFalse(eulerAngles1.equals((Object)eulerAngles0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      EulerAngles eulerAngles1 = new EulerAngles();
      eulerAngles0.setTheta((-146.0F));
      boolean boolean0 = eulerAngles0.equalsImpl(eulerAngles1);
      assertEquals((-146.0F), eulerAngles0.getTheta(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      eulerAngles0.psi = (-17.232391F);
      EulerAngles eulerAngles1 = new EulerAngles();
      boolean boolean0 = eulerAngles1.equals(eulerAngles0);
      assertFalse(boolean0);
      assertFalse(eulerAngles0.equals((Object)eulerAngles1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      eulerAngles0.phi = 828.1016F;
      boolean boolean0 = eulerAngles0.equalsImpl(eulerAngles0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      byte[] byteArray0 = new byte[8];
      eulerAngles0.setPhi((byte) (-77));
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        eulerAngles0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      byte[] byteArray0 = new byte[8];
      eulerAngles0.setPsi((-247.47565F));
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        eulerAngles0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      MockPrintStream mockPrintStream0 = new MockPrintStream("edu.nps.moves.dis7.EulerAngles");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      eulerAngles0.psi = (-2058.0F);
      eulerAngles0.marshal(dataOutputStream0);
      assertEquals((-2058.0F), eulerAngles0.getPsi(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      eulerAngles0.setTheta(503.891F);
      MockPrintStream mockPrintStream0 = new MockPrintStream("edu.nps.moves.dis7.EulerAngles");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      eulerAngles0.marshal(dataOutputStream0);
      assertEquals(503.891F, eulerAngles0.getTheta(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      eulerAngles0.setPsi((-1.0F));
      eulerAngles0.marshal(dataOutputStream0);
      assertEquals((-1.0F), eulerAngles0.getPsi(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1593);
      eulerAngles0.unmarshal(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      eulerAngles0.unmarshal(dataInputStream0);
      assertEquals(0.0F, eulerAngles0.getPsi(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode(">5ow4U,6zSe\"9CQ");
      eulerAngles0.marshal(byteBuffer0);
      assertEquals(0.0F, eulerAngles0.getPhi(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      eulerAngles0.setTheta(1.0F);
      float float0 = eulerAngles0.getTheta();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      eulerAngles0.theta = (-1083.2F);
      float float0 = eulerAngles0.getTheta();
      assertEquals((-1083.2F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      eulerAngles0.psi = 1.0F;
      float float0 = eulerAngles0.getPsi();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      eulerAngles0.setPsi((-3179.41F));
      float float0 = eulerAngles0.getPsi();
      assertEquals((-3179.41F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      eulerAngles0.phi = 828.1016F;
      float float0 = eulerAngles0.getPhi();
      assertEquals(828.1016F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      eulerAngles0.setPhi((-117.8534F));
      float float0 = eulerAngles0.getPhi();
      assertEquals((-117.8534F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        eulerAngles0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      // Undeclared exception!
      try { 
        eulerAngles0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EulerAngles", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      EulerAngles eulerAngles1 = new EulerAngles();
      eulerAngles1.setPhi(3577.072F);
      boolean boolean0 = eulerAngles0.equalsImpl(eulerAngles1);
      assertEquals(3577.072F, eulerAngles1.getPhi(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      EulerAngles eulerAngles1 = new EulerAngles();
      eulerAngles0.setTheta((-146.0F));
      boolean boolean0 = eulerAngles1.equalsImpl(eulerAngles0);
      assertEquals((-146.0F), eulerAngles0.getTheta(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      EulerAngles eulerAngles1 = new EulerAngles();
      assertTrue(eulerAngles1.equals((Object)eulerAngles0));
      
      eulerAngles1.psi = 13.621614F;
      boolean boolean0 = eulerAngles0.equalsImpl(eulerAngles1);
      assertFalse(eulerAngles1.equals((Object)eulerAngles0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      Object object0 = new Object();
      boolean boolean0 = eulerAngles0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      Object object0 = new Object();
      boolean boolean0 = eulerAngles0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      boolean boolean0 = eulerAngles0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      boolean boolean0 = eulerAngles0.equals(eulerAngles0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      int int0 = eulerAngles0.getMarshalledSize();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      // Undeclared exception!
      try { 
        eulerAngles0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EulerAngles", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      float float0 = eulerAngles0.getTheta();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      float float0 = eulerAngles0.getPhi();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EulerAngles eulerAngles0 = new EulerAngles();
      float float0 = eulerAngles0.getPsi();
      assertEquals(0.0F, float0, 0.01F);
  }
}
