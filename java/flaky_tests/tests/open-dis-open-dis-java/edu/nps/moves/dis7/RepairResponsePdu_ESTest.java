/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:12:07 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.EntityID;
import edu.nps.moves.dis7.RepairResponsePdu;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.SequenceInputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RepairResponsePdu_ESTest extends RepairResponsePdu_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      repairResponsePdu0.setPadding2((byte)20);
      RepairResponsePdu repairResponsePdu1 = new RepairResponsePdu();
      boolean boolean0 = repairResponsePdu1.equals(repairResponsePdu0);
      assertEquals((byte)20, repairResponsePdu0.getPadding2());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      RepairResponsePdu repairResponsePdu1 = new RepairResponsePdu();
      repairResponsePdu1.setPadding1((short) (-2511));
      boolean boolean0 = repairResponsePdu0.equalsImpl(repairResponsePdu1);
      assertEquals((short) (-2511), repairResponsePdu1.getPadding1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      repairResponsePdu0.exerciseID = (short) (-1431);
      boolean boolean0 = repairResponsePdu0.equalsImpl(repairResponsePdu0);
      assertEquals((short)0, repairResponsePdu0.getPadding1());
      assertTrue(boolean0);
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals(28, repairResponsePdu0.getLength());
      assertEquals((short)10, repairResponsePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      repairResponsePdu0.pduStatus = (short)4;
      boolean boolean0 = repairResponsePdu0.equalsImpl(repairResponsePdu0);
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertTrue(boolean0);
      assertEquals(28, repairResponsePdu0.getMarshalledSize());
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals((short)0, repairResponsePdu0.getPadding1());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      repairResponsePdu0.setPadding((short)560);
      RepairResponsePdu repairResponsePdu1 = new RepairResponsePdu();
      boolean boolean0 = repairResponsePdu0.equals(repairResponsePdu1);
      assertFalse(boolean0);
      assertEquals((short)10, repairResponsePdu1.getPduType());
      assertEquals((byte)0, repairResponsePdu1.getPadding2());
      assertEquals((short)0, repairResponsePdu1.getPadding1());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      repairResponsePdu0.repairResult = (short) (-73);
      RepairResponsePdu repairResponsePdu1 = new RepairResponsePdu();
      boolean boolean0 = repairResponsePdu1.equalsImpl(repairResponsePdu0);
      assertFalse(boolean0);
      assertEquals((short)10, repairResponsePdu1.getPduType());
      assertFalse(repairResponsePdu0.equals((Object)repairResponsePdu1));
      assertEquals((short)0, repairResponsePdu1.getPadding1());
      assertEquals((byte)0, repairResponsePdu1.getPadding2());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      repairResponsePdu0.setRepairResult((short)2142);
      boolean boolean0 = repairResponsePdu0.equalsImpl(repairResponsePdu0);
      assertEquals((short)2142, repairResponsePdu0.getRepairResult());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(65);
      repairResponsePdu0.setPadding1((short)782);
      repairResponsePdu0.marshal(byteBuffer0);
      assertEquals((short)782, repairResponsePdu0.getPadding1());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(65);
      repairResponsePdu0.setRepairResult((short) (-512));
      repairResponsePdu0.marshal(byteBuffer0);
      assertEquals((short) (-512), repairResponsePdu0.getRepairResult());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      assertEquals((short)0, repairResponsePdu0.getPadding1());
      
      MockFile mockFile0 = new MockFile(":D");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      repairResponsePdu0.padding1 = (short)255;
      repairResponsePdu0.marshal(dataOutputStream0);
      assertEquals((short)10, repairResponsePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      repairResponsePdu0.setRepairResult((short)1923);
      repairResponsePdu0.marshal((DataOutputStream) null);
      assertEquals((short)1923, repairResponsePdu0.getRepairResult());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      assertEquals((short)10, repairResponsePdu0.getPduType());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2587);
      repairResponsePdu0.unmarshal(byteBuffer0);
      assertEquals((short)0, repairResponsePdu0.getRepairResult());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      byte[] byteArray0 = repairResponsePdu0.marshal();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      repairResponsePdu0.unmarshal(dataInputStream0);
      assertEquals(28, repairResponsePdu0.getLength());
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      repairResponsePdu0.repairingEntityID = null;
      EntityID entityID0 = repairResponsePdu0.getRepairingEntityID();
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals((short)0, repairResponsePdu0.getPadding1());
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertNull(entityID0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      EntityID entityID0 = repairResponsePdu0.getRepairingEntityID();
      entityID0.siteID = (int) (short)1;
      repairResponsePdu0.getRepairingEntityID();
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertEquals((short)0, repairResponsePdu0.getPadding1());
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      EntityID entityID0 = repairResponsePdu0.repairingEntityID;
      entityID0.siteID = (int) (short) (-1845);
      EntityID entityID1 = repairResponsePdu0.getRepairingEntityID();
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertEquals((short)0, repairResponsePdu0.getPadding1());
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals((-1845), entityID1.getSiteID());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      EntityID entityID0 = repairResponsePdu0.repairingEntityID;
      entityID0.entityID = 255;
      EntityID entityID1 = repairResponsePdu0.getRepairingEntityID();
      assertEquals(255, entityID1.getEntityID());
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertEquals((short)0, repairResponsePdu0.getPadding1());
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      EntityID entityID0 = repairResponsePdu0.getRepairingEntityID();
      entityID0.entityID = (-2812);
      repairResponsePdu0.getRepairingEntityID();
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals((short)0, repairResponsePdu0.getPadding1());
      assertEquals((short)10, repairResponsePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      EntityID entityID0 = repairResponsePdu0.getReceivingEntityID();
      repairResponsePdu0.repairingEntityID = entityID0;
      entityID0.applicationID = 3;
      repairResponsePdu0.getRepairingEntityID();
      assertEquals((short)0, repairResponsePdu0.getPadding1());
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      EntityID entityID0 = repairResponsePdu0.getRepairingEntityID();
      entityID0.applicationID = (-1029);
      repairResponsePdu0.getRepairingEntityID();
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals((short)0, repairResponsePdu0.getPadding1());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      repairResponsePdu0.setRepairResult((short)1923);
      short short0 = repairResponsePdu0.getRepairResult();
      assertEquals((short)1923, short0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      repairResponsePdu0.setRepairResult((short) (-1431));
      short short0 = repairResponsePdu0.getRepairResult();
      assertEquals((short) (-1431), short0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      repairResponsePdu0.setReceivingEntityID((EntityID) null);
      EntityID entityID0 = repairResponsePdu0.getReceivingEntityID();
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertNull(entityID0);
      assertEquals((short)0, repairResponsePdu0.getPadding1());
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      EntityID entityID0 = repairResponsePdu0.getRepairingEntityID();
      entityID0.siteID = (int) (short)1;
      repairResponsePdu0.setReceivingEntityID(entityID0);
      EntityID entityID1 = repairResponsePdu0.getReceivingEntityID();
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertEquals((short)0, repairResponsePdu0.getPadding1());
      assertEquals(1, entityID1.getSiteID());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      EntityID entityID0 = repairResponsePdu0.receivingEntityID;
      entityID0.setSiteID((-1596));
      EntityID entityID1 = repairResponsePdu0.getReceivingEntityID();
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertEquals((short)0, repairResponsePdu0.getPadding1());
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals((-1596), entityID1.getSiteID());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      EntityID entityID0 = repairResponsePdu0.getReceivingEntityID();
      entityID0.entityID = 685;
      repairResponsePdu0.getReceivingEntityID();
      assertEquals((short)0, repairResponsePdu0.getPadding1());
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals((short)10, repairResponsePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      EntityID entityID0 = repairResponsePdu0.getRepairingEntityID();
      entityID0.entityID = (-2812);
      repairResponsePdu0.setReceivingEntityID(entityID0);
      EntityID entityID1 = repairResponsePdu0.getReceivingEntityID();
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertEquals((-2812), entityID1.getEntityID());
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals((short)0, repairResponsePdu0.getPadding1());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      EntityID entityID0 = repairResponsePdu0.getRepairingEntityID();
      repairResponsePdu0.receivingEntityID = entityID0;
      entityID0.applicationID = (-1029);
      repairResponsePdu0.getReceivingEntityID();
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals((short)0, repairResponsePdu0.getPadding1());
      assertEquals((short)10, repairResponsePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      repairResponsePdu0.setPadding2((byte)2);
      byte byte0 = repairResponsePdu0.getPadding2();
      assertEquals((byte)2, byte0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      repairResponsePdu0.padding2 = (byte) (-115);
      byte byte0 = repairResponsePdu0.getPadding2();
      assertEquals((byte) (-115), byte0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      assertEquals((short)0, repairResponsePdu0.getPadding1());
      
      repairResponsePdu0.setPadding1((short)3);
      short short0 = repairResponsePdu0.getPadding1();
      assertEquals((short)3, short0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      repairResponsePdu0.padding1 = (short) (-3623);
      short short0 = repairResponsePdu0.getPadding1();
      assertEquals((short) (-3623), short0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        repairResponsePdu0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(13);
      // Undeclared exception!
      try { 
        repairResponsePdu0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      repairResponsePdu0.repairingEntityID = null;
      // Undeclared exception!
      try { 
        repairResponsePdu0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.RepairResponsePdu", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      repairResponsePdu0.setRepairingEntityID((EntityID) null);
      // Undeclared exception!
      try { 
        repairResponsePdu0.equalsImpl(repairResponsePdu0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.RepairResponsePdu", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      repairResponsePdu0.pduStatus = (short)2;
      RepairResponsePdu repairResponsePdu1 = new RepairResponsePdu();
      boolean boolean0 = repairResponsePdu1.equalsImpl(repairResponsePdu0);
      assertEquals((short)10, repairResponsePdu1.getPduType());
      assertFalse(boolean0);
      assertEquals((short)0, repairResponsePdu1.getPadding1());
      assertEquals((byte)0, repairResponsePdu1.getPadding2());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      
      RepairResponsePdu repairResponsePdu1 = new RepairResponsePdu();
      repairResponsePdu0.padding2 = (byte) (-115);
      boolean boolean0 = repairResponsePdu1.equalsImpl(repairResponsePdu0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      repairResponsePdu0.setPadding1((short)3);
      RepairResponsePdu repairResponsePdu1 = new RepairResponsePdu();
      boolean boolean0 = repairResponsePdu1.equalsImpl(repairResponsePdu0);
      assertEquals((short)3, repairResponsePdu0.getPadding1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      RepairResponsePdu repairResponsePdu1 = new RepairResponsePdu();
      assertTrue(repairResponsePdu1.equals((Object)repairResponsePdu0));
      
      repairResponsePdu1.repairResult = (short)3065;
      boolean boolean0 = repairResponsePdu0.equalsImpl(repairResponsePdu1);
      assertFalse(repairResponsePdu1.equals((Object)repairResponsePdu0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      EntityID entityID0 = repairResponsePdu0.getRepairingEntityID();
      entityID0.applicationID = (-1);
      repairResponsePdu0.setReceivingEntityID(entityID0);
      RepairResponsePdu repairResponsePdu1 = new RepairResponsePdu();
      boolean boolean0 = repairResponsePdu0.equalsImpl(repairResponsePdu1);
      assertFalse(boolean0);
      assertEquals((short)10, repairResponsePdu1.getPduType());
      assertEquals((short)0, repairResponsePdu1.getPadding1());
      assertEquals((byte)0, repairResponsePdu1.getPadding2());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = repairResponsePdu0.equalsImpl(byteArrayInputStream0);
      assertFalse(boolean0);
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals((short)0, repairResponsePdu0.getPadding1());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      RepairResponsePdu repairResponsePdu1 = new RepairResponsePdu();
      boolean boolean0 = repairResponsePdu0.equals(repairResponsePdu1);
      assertEquals((short)0, repairResponsePdu1.getPadding1());
      assertEquals(28, repairResponsePdu1.getMarshalledSize());
      assertEquals((byte)0, repairResponsePdu1.getPadding2());
      assertTrue(boolean0);
      assertEquals((short)10, repairResponsePdu1.getPduType());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      boolean boolean0 = repairResponsePdu0.equals((Object) null);
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertFalse(boolean0);
      assertEquals((short)0, repairResponsePdu0.getPadding1());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      boolean boolean0 = repairResponsePdu0.equals(repairResponsePdu0);
      assertTrue(boolean0);
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals((short)0, repairResponsePdu0.getPadding1());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      Object object0 = new Object();
      boolean boolean0 = repairResponsePdu0.equals(object0);
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals((short)0, repairResponsePdu0.getPadding1());
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      int int0 = repairResponsePdu0.getMarshalledSize();
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertEquals((short)0, repairResponsePdu0.getPadding1());
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      short short0 = repairResponsePdu0.getPadding1();
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      // Undeclared exception!
      try { 
        repairResponsePdu0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.PduSuperclass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      // Undeclared exception!
      try { 
        repairResponsePdu0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.PduSuperclass", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      repairResponsePdu0.unmarshal((DataInputStream) null);
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals((short)0, repairResponsePdu0.getPadding1());
      assertEquals((short)10, repairResponsePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      EntityID entityID0 = repairResponsePdu0.getReceivingEntityID();
      entityID0.applicationID = 3;
      repairResponsePdu0.getReceivingEntityID();
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals((short)0, repairResponsePdu0.getPadding1());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      short short0 = repairResponsePdu0.getRepairResult();
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertEquals((short)0, short0);
      assertEquals((byte)0, repairResponsePdu0.getPadding2());
      assertEquals((short)0, repairResponsePdu0.getPadding1());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RepairResponsePdu repairResponsePdu0 = new RepairResponsePdu();
      byte byte0 = repairResponsePdu0.getPadding2();
      assertEquals((short)10, repairResponsePdu0.getPduType());
      assertEquals((byte)0, byte0);
      assertEquals((short)0, repairResponsePdu0.getPadding1());
  }
}
