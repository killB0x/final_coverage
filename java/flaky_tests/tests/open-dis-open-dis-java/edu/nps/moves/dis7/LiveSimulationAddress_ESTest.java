/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:50:31 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.LiveSimulationAddress;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LiveSimulationAddress_ESTest extends LiveSimulationAddress_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      liveSimulationAddress0.setLiveApplicationNumber((short) (-1));
      LiveSimulationAddress liveSimulationAddress1 = new LiveSimulationAddress();
      boolean boolean0 = liveSimulationAddress1.equals(liveSimulationAddress0);
      assertEquals((short) (-1), liveSimulationAddress0.getLiveApplicationNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      LiveSimulationAddress liveSimulationAddress1 = new LiveSimulationAddress();
      assertTrue(liveSimulationAddress1.equals((Object)liveSimulationAddress0));
      
      liveSimulationAddress1.liveSiteNumber = (short) (-619);
      boolean boolean0 = liveSimulationAddress1.equalsImpl(liveSimulationAddress0);
      assertFalse(liveSimulationAddress1.equals((Object)liveSimulationAddress0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      liveSimulationAddress0.setLiveSiteNumber((short)2517);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((short)2517);
      liveSimulationAddress0.marshal(byteBuffer0);
      assertEquals((short)2517, liveSimulationAddress0.getLiveSiteNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      liveSimulationAddress0.liveSiteNumber = (short)1466;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      liveSimulationAddress0.marshal(dataOutputStream0);
      assertEquals("\uFFFD\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1203);
      liveSimulationAddress0.unmarshal(byteBuffer0);
      assertEquals((short)0, liveSimulationAddress0.getLiveApplicationNumber());
      assertEquals((short)0, liveSimulationAddress0.getLiveSiteNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      liveSimulationAddress0.unmarshal(dataInputStream0);
      assertEquals(2, liveSimulationAddress0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      liveSimulationAddress0.marshal((DataOutputStream) null);
      assertEquals(2, liveSimulationAddress0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      liveSimulationAddress0.liveSiteNumber = (short)1466;
      short short0 = liveSimulationAddress0.getLiveSiteNumber();
      assertEquals((short)1466, short0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      liveSimulationAddress0.setLiveApplicationNumber((short)2067);
      short short0 = liveSimulationAddress0.getLiveApplicationNumber();
      assertEquals((short)2067, short0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      liveSimulationAddress0.liveApplicationNumber = (short) (-287);
      short short0 = liveSimulationAddress0.getLiveApplicationNumber();
      assertEquals((short) (-287), short0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      boolean boolean0 = liveSimulationAddress0.equalsImpl(liveSimulationAddress0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      // Undeclared exception!
      try { 
        liveSimulationAddress0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        liveSimulationAddress0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      liveSimulationAddress0.setLiveApplicationNumber((short) (-1));
      LiveSimulationAddress liveSimulationAddress1 = new LiveSimulationAddress();
      boolean boolean0 = liveSimulationAddress0.equalsImpl(liveSimulationAddress1);
      assertEquals((short) (-1), liveSimulationAddress0.getLiveApplicationNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      LiveSimulationAddress liveSimulationAddress1 = new LiveSimulationAddress();
      liveSimulationAddress1.setLiveSiteNumber((short) (-619));
      boolean boolean0 = liveSimulationAddress0.equalsImpl(liveSimulationAddress1);
      assertEquals((short) (-619), liveSimulationAddress1.getLiveSiteNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      boolean boolean0 = liveSimulationAddress0.equalsImpl((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      Object object0 = new Object();
      boolean boolean0 = liveSimulationAddress0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      boolean boolean0 = liveSimulationAddress0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      boolean boolean0 = liveSimulationAddress0.equals(liveSimulationAddress0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      liveSimulationAddress0.setLiveSiteNumber((short) (-924));
      short short0 = liveSimulationAddress0.getLiveSiteNumber();
      assertEquals((short) (-924), short0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      int int0 = liveSimulationAddress0.getMarshalledSize();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      // Undeclared exception!
      try { 
        liveSimulationAddress0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.LiveSimulationAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      short short0 = liveSimulationAddress0.getLiveSiteNumber();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      // Undeclared exception!
      try { 
        liveSimulationAddress0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.LiveSimulationAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      liveSimulationAddress0.unmarshal((DataInputStream) null);
      assertEquals(2, liveSimulationAddress0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LiveSimulationAddress liveSimulationAddress0 = new LiveSimulationAddress();
      short short0 = liveSimulationAddress0.getLiveApplicationNumber();
      assertEquals((short)0, short0);
  }
}
