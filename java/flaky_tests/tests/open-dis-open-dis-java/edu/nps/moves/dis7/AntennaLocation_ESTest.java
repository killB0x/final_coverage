/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 15:22:11 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.AntennaLocation;
import edu.nps.moves.dis7.Vector3Double;
import edu.nps.moves.dis7.Vector3Float;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AntennaLocation_ESTest extends AntennaLocation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1758);
      antennaLocation0.unmarshal(byteBuffer0);
      assertEquals(0, byteBuffer0.arrayOffset());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      antennaLocation0.antennaLocation = null;
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte) (-15));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      antennaLocation0.unmarshal(dataInputStream0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      antennaLocation0.setAntennaLocation((Vector3Double) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      antennaLocation0.marshal(dataOutputStream0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      antennaLocation0.relativeAntennaLocation = null;
      Vector3Float vector3Float0 = antennaLocation0.getRelativeAntennaLocation();
      assertNull(vector3Float0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      Vector3Float vector3Float0 = antennaLocation0.relativeAntennaLocation;
      vector3Float0.z = 1.0F;
      Vector3Float vector3Float1 = antennaLocation0.getRelativeAntennaLocation();
      assertEquals(12, vector3Float1.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      Vector3Float vector3Float0 = new Vector3Float();
      vector3Float0.z = (-2222.2195F);
      antennaLocation0.setRelativeAntennaLocation(vector3Float0);
      Vector3Float vector3Float1 = antennaLocation0.getRelativeAntennaLocation();
      assertEquals((-2222.2195F), vector3Float1.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      Vector3Float vector3Float0 = antennaLocation0.relativeAntennaLocation;
      vector3Float0.setY(1.0F);
      Vector3Float vector3Float1 = antennaLocation0.getRelativeAntennaLocation();
      assertEquals(0.0F, vector3Float1.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      Vector3Float vector3Float0 = new Vector3Float();
      antennaLocation0.relativeAntennaLocation = vector3Float0;
      vector3Float0.setX((-1.0F));
      Vector3Float vector3Float1 = antennaLocation0.getRelativeAntennaLocation();
      assertEquals(0.0F, vector3Float1.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      Vector3Double vector3Double0 = antennaLocation0.getAntennaLocation();
      vector3Double0.z = (double) 1950;
      Vector3Double vector3Double1 = antennaLocation0.getAntennaLocation();
      assertEquals(0.0, vector3Double1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      Vector3Double vector3Double0 = antennaLocation0.getAntennaLocation();
      vector3Double0.z = (-1548.705);
      Vector3Double vector3Double1 = antennaLocation0.getAntennaLocation();
      assertSame(vector3Double1, vector3Double0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      antennaLocation0.unmarshal(dataInputStream0);
      Vector3Double vector3Double0 = antennaLocation0.getAntennaLocation();
      assertEquals(0.0, vector3Double0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      boolean boolean0 = antennaLocation0.equalsImpl(antennaLocation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      // Undeclared exception!
      try { 
        antennaLocation0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      // Undeclared exception!
      try { 
        antennaLocation0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      // Undeclared exception!
      try { 
        antennaLocation0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.Vector3Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      antennaLocation0.relativeAntennaLocation = null;
      // Undeclared exception!
      try { 
        antennaLocation0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.AntennaLocation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      AntennaLocation antennaLocation1 = new AntennaLocation();
      Vector3Float vector3Float0 = antennaLocation1.getRelativeAntennaLocation();
      assertTrue(antennaLocation1.equals((Object)antennaLocation0));
      
      vector3Float0.setZ(144.4255F);
      boolean boolean0 = antennaLocation0.equalsImpl(antennaLocation1);
      assertFalse(antennaLocation1.equals((Object)antennaLocation0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      AntennaLocation antennaLocation1 = new AntennaLocation();
      assertTrue(antennaLocation1.equals((Object)antennaLocation0));
      
      antennaLocation1.antennaLocation = null;
      boolean boolean0 = antennaLocation0.equalsImpl(antennaLocation1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      Object object0 = new Object();
      boolean boolean0 = antennaLocation0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      Vector3Float vector3Float0 = new Vector3Float();
      boolean boolean0 = antennaLocation0.equals(vector3Float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      boolean boolean0 = antennaLocation0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      boolean boolean0 = antennaLocation0.equals(antennaLocation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      AntennaLocation antennaLocation1 = new AntennaLocation();
      boolean boolean0 = antennaLocation0.equals(antennaLocation1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      Vector3Double vector3Double0 = antennaLocation0.getAntennaLocation();
      vector3Double0.setX(1950);
      Vector3Double vector3Double1 = antennaLocation0.getAntennaLocation();
      assertSame(vector3Double1, vector3Double0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      // Undeclared exception!
      try { 
        antennaLocation0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.Vector3Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      antennaLocation0.marshal((DataOutputStream) null);
      assertEquals(36, antennaLocation0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      antennaLocation0.setAntennaLocation((Vector3Double) null);
      Vector3Double vector3Double0 = antennaLocation0.getAntennaLocation();
      assertNull(vector3Double0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1725);
      antennaLocation0.marshal(byteBuffer0);
      assertEquals(36, antennaLocation0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AntennaLocation antennaLocation0 = new AntennaLocation();
      int int0 = antennaLocation0.getMarshalledSize();
      assertEquals(36, int0);
  }
}
