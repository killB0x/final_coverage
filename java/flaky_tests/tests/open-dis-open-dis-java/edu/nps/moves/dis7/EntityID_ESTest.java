/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:15:49 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.EntityID;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EntityID_ESTest extends EntityID_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.entityID = 548;
      entityID0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.applicationID = 2337;
      entityID0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setEntityID((-338));
      EntityID entityID1 = new EntityID();
      boolean boolean0 = entityID1.equalsImpl(entityID0);
      assertEquals((-338), entityID0.getEntityID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      EntityID entityID1 = new EntityID();
      assertTrue(entityID1.equals((Object)entityID0));
      
      entityID1.applicationID = (-338);
      boolean boolean0 = entityID1.equalsImpl(entityID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      EntityID entityID1 = new EntityID();
      entityID1.setSiteID((-338));
      boolean boolean0 = entityID1.equalsImpl(entityID0);
      assertEquals((-338), entityID1.getSiteID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setSiteID(1486);
      boolean boolean0 = entityID0.equalsImpl(entityID0);
      assertEquals(1486, entityID0.getSiteID());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.siteID = 42;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("uH0^8r:9X^");
      entityID0.marshal(byteBuffer0);
      assertEquals(0, entityID0.getEntityID());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setApplicationID(729);
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(585);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      entityID0.marshal(byteBuffer0);
      assertEquals(729, entityID0.getApplicationID());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      entityID0.setSiteID((-338));
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      entityID0.marshal(dataOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals((-338), entityID0.getSiteID());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      MockFile mockFile0 = new MockFile("\u0003-UI]{c~c", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      entityID0.setApplicationID(1);
      entityID0.marshal(dataOutputStream0);
      assertEquals(1, entityID0.getApplicationID());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.applicationID = (-338);
      int int0 = entityID0.getMarshalledSize();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setEntityID((-338));
      int int0 = entityID0.getMarshalledSize();
      assertEquals((-338), entityID0.getEntityID());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setSiteID((-338));
      int int0 = entityID0.getMarshalledSize();
      assertEquals((-338), entityID0.getSiteID());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      byte[] byteArray0 = new byte[9];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      entityID0.unmarshal(byteBuffer0);
      assertEquals(0, entityID0.getEntityID());
      assertEquals(0, entityID0.getSiteID());
      assertEquals(0, entityID0.getApplicationID());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      entityID0.unmarshal(dataInputStream0);
      assertEquals(0, entityID0.getSiteID());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      entityID0.marshal(dataOutputStream0);
      assertEquals(0, entityID0.getApplicationID());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setSiteID(1486);
      int int0 = entityID0.getSiteID();
      assertEquals(1486, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.siteID = (-1996);
      int int0 = entityID0.getSiteID();
      assertEquals((-1996), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.entityID = 1;
      int int0 = entityID0.getEntityID();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setEntityID((-235));
      int int0 = entityID0.getEntityID();
      assertEquals((-235), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setApplicationID(2954);
      int int0 = entityID0.getApplicationID();
      assertEquals(2954, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.applicationID = (-1);
      int int0 = entityID0.getApplicationID();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        entityID0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        entityID0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      // Undeclared exception!
      try { 
        entityID0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EntityID", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      EntityID entityID1 = new EntityID();
      assertTrue(entityID1.equals((Object)entityID0));
      
      entityID1.applicationID = (-338);
      boolean boolean0 = entityID0.equalsImpl(entityID1);
      assertFalse(entityID1.equals((Object)entityID0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      EntityID entityID1 = new EntityID();
      entityID1.setSiteID((-338));
      boolean boolean0 = entityID0.equalsImpl(entityID1);
      assertEquals((-338), entityID1.getSiteID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      boolean boolean0 = entityID0.equalsImpl((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      EntityID entityID1 = new EntityID();
      boolean boolean0 = entityID0.equals(entityID1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      boolean boolean0 = entityID0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      boolean boolean0 = entityID0.equals(entityID0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = entityID0.equals(pipedOutputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      int int0 = entityID0.getEntityID();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 610);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      entityID0.unmarshal(dataInputStream0);
      assertEquals(0, entityID0.getSiteID());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      int int0 = entityID0.getApplicationID();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      // Undeclared exception!
      try { 
        entityID0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EntityID", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      int int0 = entityID0.getSiteID();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      entityID0.setEntityID((-338));
      EntityID entityID1 = new EntityID();
      boolean boolean0 = entityID0.equalsImpl(entityID1);
      assertEquals((-338), entityID0.getEntityID());
      assertFalse(boolean0);
  }
}
