/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:30:50 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.TwoByteChunk;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TwoByteChunk_ESTest extends TwoByteChunk_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      TwoByteChunk twoByteChunk1 = new TwoByteChunk();
      assertTrue(twoByteChunk1.equals((Object)twoByteChunk0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      twoByteChunk1.setOtherParameters(byteArray0);
      boolean boolean0 = twoByteChunk0.equalsImpl(twoByteChunk1);
      assertFalse(twoByteChunk1.equals((Object)twoByteChunk0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      twoByteChunk0.unmarshal(dataInputStream0);
      assertEquals(2, twoByteChunk0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      twoByteChunk0.marshal(dataOutputStream0);
      assertEquals(2, twoByteChunk0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      twoByteChunk0.setOtherParameters((byte[]) null);
      byte[] byteArray0 = twoByteChunk0.getOtherParameters();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      byte[] byteArray0 = new byte[0];
      twoByteChunk0.setOtherParameters(byteArray0);
      byte[] byteArray1 = twoByteChunk0.getOtherParameters();
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      boolean boolean0 = twoByteChunk0.equalsImpl(twoByteChunk0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        twoByteChunk0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      // Undeclared exception!
      try { 
        twoByteChunk0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.TwoByteChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        twoByteChunk0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      // Undeclared exception!
      try { 
        twoByteChunk0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.TwoByteChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      twoByteChunk0.setOtherParameters((byte[]) null);
      // Undeclared exception!
      try { 
        twoByteChunk0.equalsImpl(twoByteChunk0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.TwoByteChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      byte[] byteArray0 = new byte[0];
      twoByteChunk0.setOtherParameters(byteArray0);
      // Undeclared exception!
      try { 
        twoByteChunk0.equalsImpl(twoByteChunk0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("edu.nps.moves.dis7.TwoByteChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      TwoByteChunk twoByteChunk1 = new TwoByteChunk();
      twoByteChunk1.otherParameters = null;
      // Undeclared exception!
      try { 
        twoByteChunk0.equals(twoByteChunk1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.TwoByteChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      byte[] byteArray0 = new byte[1];
      twoByteChunk0.setOtherParameters(byteArray0);
      TwoByteChunk twoByteChunk1 = new TwoByteChunk();
      // Undeclared exception!
      try { 
        twoByteChunk1.equals(twoByteChunk0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("edu.nps.moves.dis7.TwoByteChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      TwoByteChunk twoByteChunk1 = new TwoByteChunk();
      assertTrue(twoByteChunk1.equals((Object)twoByteChunk0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      twoByteChunk1.setOtherParameters(byteArray0);
      boolean boolean0 = twoByteChunk1.equalsImpl(twoByteChunk0);
      assertFalse(twoByteChunk1.equals((Object)twoByteChunk0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      Object object0 = new Object();
      boolean boolean0 = twoByteChunk0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      Object object0 = new Object();
      boolean boolean0 = twoByteChunk0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      boolean boolean0 = twoByteChunk0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      boolean boolean0 = twoByteChunk0.equals(twoByteChunk0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      byte[] byteArray0 = new byte[1];
      twoByteChunk0.otherParameters = byteArray0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      twoByteChunk0.unmarshal(byteBuffer0);
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=1 cap=1]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      byte[] byteArray0 = new byte[1];
      twoByteChunk0.otherParameters = byteArray0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      twoByteChunk0.marshal(byteBuffer0);
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      twoByteChunk0.unmarshal(dataInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      twoByteChunk0.marshal(dataOutputStream0);
      assertEquals(2, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      byte[] byteArray0 = twoByteChunk0.getOtherParameters();
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TwoByteChunk twoByteChunk0 = new TwoByteChunk();
      int int0 = twoByteChunk0.getMarshalledSize();
      assertEquals(2, int0);
  }
}
