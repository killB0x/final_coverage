/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 13:03:12 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.EntityType;
import edu.nps.moves.dis7.Expendable;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Expendable_ESTest extends Expendable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      assertEquals((short)0, expendable0.getPadding());
      
      expendable0.padding = (short)1;
      Expendable expendable1 = new Expendable();
      boolean boolean0 = expendable0.equalsImpl(expendable1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      expendable0.setExpendableStatus((short)2);
      Expendable expendable1 = new Expendable();
      boolean boolean0 = expendable0.equals(expendable1);
      assertEquals((short)2, expendable0.getExpendableStatus());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      expendable0.setQuantity(65535);
      Expendable expendable1 = new Expendable();
      boolean boolean0 = expendable1.equalsImpl(expendable0);
      assertEquals(65535, expendable0.getQuantity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      Expendable expendable1 = new Expendable();
      assertTrue(expendable1.equals((Object)expendable0));
      
      expendable0.station = 1L;
      boolean boolean0 = expendable1.equalsImpl(expendable0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate((short)2049);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      expendable0.setPadding((short) (-1090));
      expendable0.marshal(byteBuffer0);
      assertEquals((short) (-1090), expendable0.getPadding());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      expendable0.setExpendableStatus((short)604);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      expendable0.marshal(dataOutputStream0);
      assertEquals((short)604, expendable0.getExpendableStatus());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      expendable0.quantity = (-1898);
      int int0 = expendable0.getMarshalledSize();
      assertEquals((short)0, expendable0.getPadding());
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      expendable0.station = 1L;
      long long0 = expendable0.getStation();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      expendable0.setStation((-1074L));
      long long0 = expendable0.getStation();
      assertEquals((-1074L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      expendable0.setQuantity(1736);
      int int0 = expendable0.getQuantity();
      assertEquals(1736, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      expendable0.quantity = (-1898);
      int int0 = expendable0.getQuantity();
      assertEquals((-1898), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      expendable0.padding = (short)2;
      short short0 = expendable0.getPadding();
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      expendable0.setPadding((short) (-1));
      short short0 = expendable0.getPadding();
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      expendable0.setExpendableStatus((short)2049);
      short short0 = expendable0.getExpendableStatus();
      assertEquals((short)2049, short0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      expendable0.setExpendableStatus((short) (-2510));
      short short0 = expendable0.getExpendableStatus();
      assertEquals((short) (-2510), short0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      EntityType entityType0 = expendable0.expendable;
      entityType0.setSubcategory((short)4);
      expendable0.getExpendable();
      assertEquals((short)0, expendable0.getPadding());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      EntityType entityType0 = new EntityType();
      expendable0.expendable = entityType0;
      entityType0.specific = (short)1577;
      expendable0.getExpendable();
      assertEquals((short)0, expendable0.getPadding());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      EntityType entityType0 = new EntityType();
      expendable0.expendable = entityType0;
      entityType0.setExtra((short)4137);
      expendable0.getExpendable();
      assertEquals((short)0, expendable0.getPadding());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      EntityType entityType0 = expendable0.getExpendable();
      entityType0.extra = (short) (-533);
      expendable0.getExpendable();
      assertEquals((short)0, expendable0.getPadding());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      EntityType entityType0 = expendable0.getExpendable();
      entityType0.entityKind = (short)3422;
      expendable0.getExpendable();
      assertEquals((short)0, expendable0.getPadding());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      EntityType entityType0 = expendable0.getExpendable();
      entityType0.setDomain((short)2730);
      expendable0.getExpendable();
      assertEquals((short)0, expendable0.getPadding());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      EntityType entityType0 = expendable0.getExpendable();
      entityType0.setDomain((short) (-1));
      expendable0.getExpendable();
      assertEquals((short)0, expendable0.getPadding());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      EntityType entityType0 = new EntityType();
      expendable0.expendable = entityType0;
      entityType0.setCategory((short)1);
      expendable0.getExpendable();
      assertEquals((short)0, expendable0.getPadding());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      EntityType entityType0 = new EntityType();
      entityType0.category = (short) (-1427);
      expendable0.expendable = entityType0;
      expendable0.getExpendable();
      assertEquals((short)0, expendable0.getPadding());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      boolean boolean0 = expendable0.equalsImpl(expendable0);
      assertEquals((short)0, expendable0.getPadding());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0, (int) (byte)0, (int) (byte)0);
      // Undeclared exception!
      try { 
        expendable0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      // Undeclared exception!
      try { 
        expendable0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EntityType", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      // Undeclared exception!
      try { 
        expendable0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      expendable0.expendable = null;
      // Undeclared exception!
      try { 
        expendable0.equalsImpl(expendable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.Expendable", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      expendable0.expendableStatus = (short) (-20076);
      Expendable expendable1 = new Expendable();
      boolean boolean0 = expendable0.equalsImpl(expendable1);
      assertFalse(boolean0);
      assertEquals((short)0, expendable1.getPadding());
      assertFalse(expendable1.equals((Object)expendable0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      Expendable expendable1 = new Expendable();
      expendable0.setPadding((short) (-1090));
      boolean boolean0 = expendable0.equalsImpl(expendable1);
      assertEquals((short) (-1090), expendable0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      Expendable expendable1 = new Expendable();
      expendable1.setStation((-1L));
      boolean boolean0 = expendable0.equalsImpl(expendable1);
      assertEquals((-1L), expendable1.getStation());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      EntityType entityType0 = expendable0.expendable;
      entityType0.setSubcategory((short)4);
      Expendable expendable1 = new Expendable();
      boolean boolean0 = expendable0.equalsImpl(expendable1);
      assertEquals((short)0, expendable1.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      Object object0 = new Object();
      boolean boolean0 = expendable0.equalsImpl(object0);
      assertEquals((short)0, expendable0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      Object object0 = new Object();
      boolean boolean0 = expendable0.equals(object0);
      assertEquals((short)0, expendable0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      boolean boolean0 = expendable0.equals((Object) null);
      assertEquals((short)0, expendable0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      boolean boolean0 = expendable0.equals(expendable0);
      assertEquals((short)0, expendable0.getPadding());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      short short0 = expendable0.getPadding();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate((short)2049);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      expendable0.unmarshal(byteBuffer0);
      assertEquals((short)0, expendable0.getExpendableStatus());
      assertEquals((short)0, expendable0.getPadding());
      assertEquals(0, expendable0.getQuantity());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      expendable0.getExpendableStatus();
      assertEquals((short)0, expendable0.getPadding());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      expendable0.setQuantity(2283);
      Expendable expendable1 = new Expendable();
      boolean boolean0 = expendable0.equalsImpl(expendable1);
      assertEquals(2283, expendable0.getQuantity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      // Undeclared exception!
      try { 
        expendable0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EntityType", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      expendable0.unmarshal((DataInputStream) null);
      assertEquals((short)0, expendable0.getPadding());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      EntityType entityType0 = expendable0.getExpendable();
      entityType0.setCountry(2542);
      expendable0.getExpendable();
      assertEquals((short)0, expendable0.getPadding());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      expendable0.marshal((DataOutputStream) null);
      assertEquals((short)0, expendable0.getPadding());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      int int0 = expendable0.getQuantity();
      assertEquals(0, int0);
      assertEquals((short)0, expendable0.getPadding());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      EntityType entityType0 = new EntityType();
      expendable0.setExpendable(entityType0);
      assertEquals((short)0, expendable0.getPadding());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Expendable expendable0 = new Expendable();
      expendable0.getStation();
      assertEquals((short)0, expendable0.getPadding());
  }
}
