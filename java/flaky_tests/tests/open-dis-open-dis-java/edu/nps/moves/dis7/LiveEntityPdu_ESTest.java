/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 13:41:15 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.LiveEntityPdu;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LiveEntityPdu_ESTest extends LiveEntityPdu_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      assertEquals((short)0, liveEntityPdu0.getPadding());
      
      liveEntityPdu0.subprotocolNumber = 255;
      LiveEntityPdu liveEntityPdu1 = new LiveEntityPdu();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      liveEntityPdu0.equalsImpl(liveEntityPdu1);
      liveEntityPdu1.setPduType((short)1449);
      String string0 = "e1>I5$O[$y'P";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "e1>I5$O[$y'P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      LiveEntityPdu liveEntityPdu1 = new LiveEntityPdu();
      boolean boolean0 = liveEntityPdu0.equalsImpl(liveEntityPdu1);
      assertEquals((short)0, liveEntityPdu1.getPadding());
      assertTrue(boolean0);
      assertEquals(13, liveEntityPdu1.getMarshalledSize());
      
      liveEntityPdu0.setPadding((short)1449);
      LiveEntityPdu liveEntityPdu2 = new LiveEntityPdu();
      liveEntityPdu2.setSubprotocolNumber(1);
      LiveEntityPdu liveEntityPdu3 = new LiveEntityPdu();
      liveEntityPdu0.equals(liveEntityPdu2);
      String string0 = "";
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      Object object0 = new Object();
      boolean boolean0 = liveEntityPdu0.equalsImpl(object0);
      assertEquals((short)0, liveEntityPdu0.getPadding());
      assertFalse(boolean0);
      
      OutputStream outputStream0 = null;
      short short0 = (short) (-2705);
      liveEntityPdu0.exerciseID = (short) (-2705);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      liveEntityPdu0.marshal(dataOutputStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      // Undeclared exception!
      try { 
        dataOutputStream1.writeDouble((short) (-2705));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      int int0 = 918;
      liveEntityPdu0.subprotocolNumber = 918;
      liveEntityPdu0.setTimestamp(255);
      liveEntityPdu0.setPadding((short)1710);
      liveEntityPdu0.subprotocolNumber = 255;
      liveEntityPdu0.timestamp = (-1081L);
      liveEntityPdu0.getMarshalledSize();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(13);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      mockPrintStream0.append((CharSequence) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      liveEntityPdu0.equals((Object) null);
      liveEntityPdu0.setSubprotocolNumber((short)1710);
      liveEntityPdu0.getMarshalledSize();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        charset0.decode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      LiveEntityPdu liveEntityPdu1 = new LiveEntityPdu();
      liveEntityPdu0.equals((Object) null);
      liveEntityPdu1.setSubprotocolNumber(1);
      Object object0 = new Object();
      LiveEntityPdu liveEntityPdu2 = new LiveEntityPdu();
      LiveEntityPdu liveEntityPdu3 = new LiveEntityPdu();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      liveEntityPdu0.equals(liveEntityPdu0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
          short short0 = (short) (-1709);
          liveEntityPdu0.setProtocolFamily((short) (-1709));
          short short1 = (short) (-1);
          LiveEntityPdu liveEntityPdu1 = new LiveEntityPdu();
          liveEntityPdu1.equalsImpl(liveEntityPdu0);
          LiveEntityPdu liveEntityPdu2 = new LiveEntityPdu();
          liveEntityPdu2.equals(liveEntityPdu1);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkWrite(SecurityManager.java:727)
             // java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:273)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // jdk.internal.reflect.GeneratedConstructorAccessor47.newInstance(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:218)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:173)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      int int0 = liveEntityPdu0.getMarshalledSize();
      assertEquals((short)0, liveEntityPdu0.getPadding());
      assertEquals(13, int0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)0;
      dataOutputStream0.write(byteArray0);
      liveEntityPdu0.marshal(dataOutputStream0);
      liveEntityPdu0.equals(dataOutputStream0);
      liveEntityPdu0.getPadding();
      liveEntityPdu0.getMarshalledSize();
      liveEntityPdu0.equals(liveEntityPdu0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      liveEntityPdu0.equals(mockFileInputStream0);
      liveEntityPdu0.setSubprotocolNumber(13);
      Object object0 = new Object();
      liveEntityPdu0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      liveEntityPdu0.setTimestamp((-247L));
      liveEntityPdu0.exerciseID = (short) (-1230);
      liveEntityPdu0.setExerciseID((short)0);
      liveEntityPdu0.setPduType((short) (-1230));
      liveEntityPdu0.unmarshal((DataInputStream) null);
      liveEntityPdu0.setPadding((short)3154);
      liveEntityPdu0.setPadding((short)2);
      LiveEntityPdu liveEntityPdu1 = new LiveEntityPdu();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)101;
      dataOutputStream0.write(byteArray0);
      LiveEntityPdu liveEntityPdu2 = new LiveEntityPdu();
      liveEntityPdu2.marshal(dataOutputStream0);
      Object object0 = new Object();
      liveEntityPdu2.equals(object0);
      liveEntityPdu0.getPadding();
      LiveEntityPdu liveEntityPdu3 = new LiveEntityPdu();
      Object object1 = new Object();
      liveEntityPdu3.equals(object1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor0);
      liveEntityPdu2.equals(mockFileInputStream1);
      liveEntityPdu2.setSubprotocolNumber((short)3154);
      assertEquals(3154, liveEntityPdu2.getSubprotocolNumber());
      
      Object object2 = new Object();
      LiveEntityPdu liveEntityPdu4 = new LiveEntityPdu();
      liveEntityPdu3.equals(liveEntityPdu4);
      int int0 = liveEntityPdu3.getMarshalledSize();
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      LiveEntityPdu liveEntityPdu1 = new LiveEntityPdu();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      mockPrintStream0.println("");
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      liveEntityPdu1.marshal(dataOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      liveEntityPdu1.unmarshal(dataInputStream0);
      assertEquals(3328, liveEntityPdu1.getSubprotocolNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      liveEntityPdu0.subprotocolNumber = 0;
      liveEntityPdu0.setSubprotocolNumber((-3409));
      int int0 = liveEntityPdu0.getSubprotocolNumber();
      assertEquals((-3409), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      liveEntityPdu0.setProtocolFamily((short) (-950));
      liveEntityPdu0.setExerciseID((short)2580);
      liveEntityPdu0.setTimestamp(984L);
      liveEntityPdu0.subprotocolNumber = (int) (short)2580;
      liveEntityPdu0.setPadding((short) (-969));
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2580);
      byteBuffer0.putDouble(2919.09);
      liveEntityPdu0.marshal(byteBuffer0);
      liveEntityPdu0.getPadding();
      liveEntityPdu0.unmarshal(byteBuffer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      liveEntityPdu0.protocolVersion = (short) (-1);
      liveEntityPdu0.padding = (short) (-4693);
      liveEntityPdu0.timestamp = 1L;
      liveEntityPdu0.setProtocolVersion((short)0);
      liveEntityPdu0.getMarshalledSize();
      liveEntityPdu0.getPadding();
      String string0 = "2q%<<g(w)";
      // Undeclared exception!
      try { 
        Charset.forName("2q%<<g(w)");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 2q%<<g(w)
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      LiveEntityPdu liveEntityPdu1 = new LiveEntityPdu();
      liveEntityPdu1.exerciseID = (short)281;
      liveEntityPdu0.subprotocolNumber = 0;
      liveEntityPdu1.padding = (short)281;
      liveEntityPdu1.exerciseID = (short)281;
      liveEntityPdu1.protocolFamily = (short)2;
      liveEntityPdu1.exerciseID = (short) (-1);
      liveEntityPdu1.setProtocolVersion((short) (-1));
      liveEntityPdu0.equalsImpl(liveEntityPdu1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      byteArrayOutputStream0.reset();
      byteArrayOutputStream0.flush();
      // Undeclared exception!
      try { 
        filterOutputStream0.write((byte[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      LiveEntityPdu liveEntityPdu1 = new LiveEntityPdu();
      assertTrue(liveEntityPdu1.equals((Object)liveEntityPdu0));
      
      liveEntityPdu1.setExerciseID((short)1449);
      boolean boolean0 = liveEntityPdu0.equalsImpl(liveEntityPdu1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      Object object0 = new Object();
      liveEntityPdu0.equalsImpl(object0);
      liveEntityPdu0.getMarshalledSize();
      liveEntityPdu0.protocolVersion = (short)0;
      Object object1 = new Object();
      liveEntityPdu0.equalsImpl(object1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("9KNV!HZ+m7%\"`yzX+");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      mockPrintStream0.checkError();
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      liveEntityPdu0.marshal(dataOutputStream0);
      dataOutputStream0.writeFloat(0.0F);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)2;
      liveEntityPdu0.pduType = (short) (byte)1;
      objectOutputStream0.write(byteArray0, 0, 0);
      liveEntityPdu0.setSubprotocolNumber((-2078));
      liveEntityPdu0.marshal(dataOutputStream0);
      liveEntityPdu0.getPadding();
      liveEntityPdu0.setPadding((short)0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2481);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      liveEntityPdu0.unmarshal(dataInputStream0);
      assertEquals((-2078), liveEntityPdu0.getSubprotocolNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      liveEntityPdu0.setProtocolFamily((short) (-2235));
      Object object0 = new Object();
      liveEntityPdu0.protocolVersion = (short)2;
      liveEntityPdu0.equals(object0);
      Object object1 = new Object();
      liveEntityPdu0.equalsImpl(object1);
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[1] = '6';
      charArray0[2] = 'm';
      charArray0[3] = 's';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        liveEntityPdu0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      liveEntityPdu0.setProtocolFamily((short) (-1709));
      assertEquals((short)0, liveEntityPdu0.getPadding());
      
      liveEntityPdu0.padding = (short) (-1709);
      Object object0 = new Object();
      liveEntityPdu0.equalsImpl(object0);
      LiveEntityPdu liveEntityPdu1 = new LiveEntityPdu();
      Object object1 = new Object();
      liveEntityPdu0.equals(object1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      LiveEntityPdu liveEntityPdu2 = new LiveEntityPdu();
      LiveEntityPdu liveEntityPdu3 = new LiveEntityPdu();
      assertTrue(liveEntityPdu3.equals((Object)liveEntityPdu2));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      liveEntityPdu0.setPduType((short) (-1));
      liveEntityPdu0.setSubprotocolNumber((short) (-1));
      liveEntityPdu0.setPadding((short) (-1));
      liveEntityPdu0.setSubprotocolNumber(0);
      LiveEntityPdu liveEntityPdu1 = new LiveEntityPdu();
      liveEntityPdu0.equals(liveEntityPdu1);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        liveEntityPdu0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2);
      // Undeclared exception!
      try { 
        liveEntityPdu0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      liveEntityPdu0.setSubprotocolNumber(2425);
      liveEntityPdu0.getSubprotocolNumber();
      liveEntityPdu0.exerciseID = (short) (-1559);
      liveEntityPdu0.getMarshalledSize();
      liveEntityPdu0.getPadding();
      liveEntityPdu0.getPadding();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((short)0);
      // Undeclared exception!
      try { 
        liveEntityPdu0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      int int0 = liveEntityPdu0.getSubprotocolNumber();
      assertEquals(0, int0);
      assertEquals((short)0, liveEntityPdu0.getPadding());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      liveEntityPdu0.marshal((DataOutputStream) null);
      assertEquals((short)0, liveEntityPdu0.getPadding());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      liveEntityPdu0.subprotocolNumber = 918;
      liveEntityPdu0.setTimestamp(255);
      short short0 = (short)1710;
      liveEntityPdu0.setPadding((short)1710);
      liveEntityPdu0.subprotocolNumber = 255;
      liveEntityPdu0.timestamp = (-1081L);
      liveEntityPdu0.getMarshalledSize();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(13);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      mockPrintStream0.append((CharSequence) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) dataOutputStream0;
      objectArray0[1] = (Object) dataOutputStream0;
      mockPrintStream0.format("1>:h", objectArray0);
      dataOutputStream0.writeUTF("edu.nps.moves.dis7.LiveEntityPdu");
      liveEntityPdu0.setPduType((short)1710);
      liveEntityPdu0.marshal(dataOutputStream0);
      Object object0 = new Object();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      liveEntityPdu0.setPadding((short) (-1504));
      int int0 = liveEntityPdu0.getMarshalledSize();
      assertEquals((short) (-1504), liveEntityPdu0.getPadding());
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      liveEntityPdu0.unmarshal((DataInputStream) null);
      assertEquals((short)0, liveEntityPdu0.getPadding());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      liveEntityPdu0.setTimestamp((-247L));
      liveEntityPdu0.exerciseID = (short) (-1230);
      liveEntityPdu0.setExerciseID((short)0);
      liveEntityPdu0.setPduType((short) (-1230));
      liveEntityPdu0.unmarshal((DataInputStream) null);
      liveEntityPdu0.setPadding((short)3154);
      liveEntityPdu0.setPadding((short)2);
      LiveEntityPdu liveEntityPdu1 = new LiveEntityPdu();
      liveEntityPdu0.equals(liveEntityPdu1);
      LiveEntityPdu liveEntityPdu2 = new LiveEntityPdu();
      liveEntityPdu1.equalsImpl(liveEntityPdu2);
      Object object0 = new Object();
      liveEntityPdu0.equalsImpl(object0);
      liveEntityPdu2.setSubprotocolNumber((-3327));
      MockFile mockFile0 = new MockFile("");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      liveEntityPdu0.setPadding((short)169);
      LiveEntityPdu liveEntityPdu1 = new LiveEntityPdu();
      boolean boolean0 = liveEntityPdu0.equalsImpl(liveEntityPdu1);
      assertEquals((short)169, liveEntityPdu0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      liveEntityPdu0.setSubprotocolNumber(2572);
      LiveEntityPdu liveEntityPdu1 = new LiveEntityPdu();
      LiveEntityPdu liveEntityPdu2 = new LiveEntityPdu();
      liveEntityPdu2.equals(liveEntityPdu0);
      assertEquals(2572, liveEntityPdu0.getSubprotocolNumber());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+ik)}HG4qy}");
      LiveEntityPdu liveEntityPdu3 = new LiveEntityPdu();
      LiveEntityPdu liveEntityPdu4 = new LiveEntityPdu();
      assertFalse(liveEntityPdu4.equals((Object)liveEntityPdu0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      // Undeclared exception!
      try { 
        liveEntityPdu0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.PduSuperclass", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      Charset.defaultCharset();
      short short0 = liveEntityPdu0.getPadding();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      // Undeclared exception!
      try { 
        liveEntityPdu0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.PduSuperclass", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      liveEntityPdu0.setSubprotocolNumber((-3233));
      int int0 = liveEntityPdu0.getMarshalledSize();
      assertEquals((-3233), liveEntityPdu0.getSubprotocolNumber());
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      liveEntityPdu0.setExerciseID((short) (-507));
      liveEntityPdu0.getPadding();
      liveEntityPdu0.setSubprotocolNumber(255);
      LiveEntityPdu liveEntityPdu1 = new LiveEntityPdu();
      liveEntityPdu1.protocolVersion = (short) (-211);
      liveEntityPdu0.equals(liveEntityPdu1);
      liveEntityPdu0.setSubprotocolNumber((short) (-507));
      liveEntityPdu0.getMarshalledSize();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(13);
      liveEntityPdu0.marshal(byteBuffer0);
      assertEquals((-507), liveEntityPdu0.getSubprotocolNumber());
      
      ByteBuffer byteBuffer1 = ByteBuffer.allocate(339);
      liveEntityPdu1.unmarshal(byteBuffer1);
      assertFalse(liveEntityPdu1.equals((Object)liveEntityPdu0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      LiveEntityPdu liveEntityPdu1 = new LiveEntityPdu();
      boolean boolean0 = liveEntityPdu0.equals(liveEntityPdu1);
      assertEquals((short)0, liveEntityPdu1.getPadding());
      assertEquals(13, liveEntityPdu1.getLength());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LiveEntityPdu liveEntityPdu0 = new LiveEntityPdu();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)79;
      liveEntityPdu0.protocolVersion = (short) (-567);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)1;
      byte byte0 = (byte)0;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.close();
      dataInputStream0.readByte();
      // Undeclared exception!
      try { 
        byteArrayInputStream0.read(byteArray0, 65535, (int) (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }
}
