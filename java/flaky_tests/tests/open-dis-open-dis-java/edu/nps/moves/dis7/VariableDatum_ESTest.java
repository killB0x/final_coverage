/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 11:05:53 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.VariableDatum;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class VariableDatum_ESTest extends VariableDatum_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      VariableDatum variableDatum1 = new VariableDatum((long) (byte)0, (-577L));
      boolean boolean0 = variableDatum1.equalsImpl(variableDatum0);
      assertEquals((-577L), variableDatum1.getPayloadAsLong());
      assertEquals(16, variableDatum1.getMarshalledSize());
      assertEquals(64L, variableDatum1.getVariableDatumLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte) (-110);
      byteArray0[7] = (byte)49;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        variableDatum0.unmarshal(byteBuffer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -230686713
         //
         verifyException("edu.nps.moves.dis7.VariableDatum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte) (-121);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      variableDatum0.unmarshal(dataInputStream0);
      assertEquals(8, variableDatum0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      variableDatum0.unmarshal(dataInputStream0);
      assertEquals(8, variableDatum0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum(1L, (-1158L));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      variableDatum0.marshal(dataOutputStream0);
      assertEquals(16, pipedInputStream0.available());
      assertEquals((-1158L), variableDatum0.getPayloadAsLong());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = variableDatum0.setPayload(byteArray0, (long) (byte)1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      VariableDatum variableDatum0 = new VariableDatum(0L, byteArray0);
      int int0 = variableDatum0.getMarshalledSize();
      assertEquals(16L, variableDatum0.getVariableDatumLength());
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum(2872L, 1037.9951568);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1679);
      variableDatum0.marshal(byteBuffer0);
      assertEquals("java.nio.HeapByteBuffer[pos=16 lim=1679 cap=1679]", byteBuffer0.toString());
      assertEquals(1037.9951568, variableDatum0.getPayloadAsDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      variableDatum0.setPayload("2 p6|e");
      long long0 = variableDatum0.getVariableDatumLength();
      assertEquals(48L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum(0L, 0L);
      long long0 = variableDatum0.getVariableDatumID();
      assertEquals(0L, long0);
      assertEquals(64L, variableDatum0.getVariableDatumLength());
      assertEquals(16, variableDatum0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      VariableDatum variableDatum0 = new VariableDatum(64L, byteArray0);
      long long0 = variableDatum0.getVariableDatumID();
      assertEquals(64L, long0);
      assertEquals(64L, variableDatum0.getVariableDatumLength());
      assertEquals(16, variableDatum0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum(1357L, "MGPzW ");
      variableDatum0.getVariableData();
      assertEquals(1357L, variableDatum0.getVariableDatumID());
      assertEquals(48L, variableDatum0.getVariableDatumLength());
      assertEquals(16, variableDatum0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      String string0 = variableDatum0.getPayloadAsString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      variableDatum0.setPayload(0.0);
      long long0 = variableDatum0.getPayloadAsLong();
      assertEquals(16, variableDatum0.getMarshalledSize());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      variableDatum0.setPayload(2872L);
      long long0 = variableDatum0.getPayloadAsLong();
      assertEquals(16, variableDatum0.getMarshalledSize());
      assertEquals(2872L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum((-279L), (-279L));
      assertEquals(64L, variableDatum0.getVariableDatumLength());
      
      long long0 = variableDatum0.getPayloadAsLong();
      assertEquals((-279L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      variableDatum0.setPayload(2255L);
      double double0 = variableDatum0.getPayloadAsDouble();
      assertEquals(64L, variableDatum0.getVariableDatumLength());
      assertEquals(1.114E-320, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum(1L, 1L);
      boolean boolean0 = variableDatum0.setPayload((-154.06912944957));
      assertTrue(boolean0);
      
      double double0 = variableDatum0.getPayloadAsDouble();
      assertEquals((-4583747194712579329L), variableDatum0.getPayloadAsLong());
      assertEquals((-154.06912944957), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      // Undeclared exception!
      try { 
        variableDatum0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      // Undeclared exception!
      try { 
        variableDatum0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.VariableDatum", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte) (-110);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        variableDatum0.unmarshal(byteBuffer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -230686720
         //
         verifyException("edu.nps.moves.dis7.VariableDatum", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      // Undeclared exception!
      try { 
        variableDatum0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.VariableDatum", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = variableDatum0.setPayload(byteArray0, 8L);
      assertEquals(8L, variableDatum0.getVariableDatumLength());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum((-279L), (-279L));
      byte[] byteArray0 = variableDatum0.getPayload();
      boolean boolean0 = variableDatum0.setPayload(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte) (-23)}, byteArray0);
      assertEquals(16, variableDatum0.getMarshalledSize());
      assertEquals(64L, variableDatum0.getVariableDatumLength());
      assertEquals((-279L), variableDatum0.getVariableDatumID());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum(3575L, 956.66163109);
      variableDatum0.setPayload((byte[]) null);
      assertEquals(16, variableDatum0.getMarshalledSize());
      assertEquals(64L, variableDatum0.getVariableDatumLength());
      assertEquals(3575L, variableDatum0.getVariableDatumID());
      assertEquals(956.66163109, variableDatum0.getPayloadAsDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum(1357L, "MGPzW ");
      boolean boolean0 = variableDatum0.setPayload((String) null);
      assertEquals(48L, variableDatum0.getVariableDatumLength());
      assertEquals(16, variableDatum0.getMarshalledSize());
      assertEquals(1357L, variableDatum0.getVariableDatumID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum(1L, 1L);
      assertEquals(1L, variableDatum0.getPayloadAsLong());
      
      boolean boolean0 = variableDatum0.setPayload(0L);
      assertTrue(boolean0);
      
      double double0 = variableDatum0.getPayloadAsDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      // Undeclared exception!
      try { 
        variableDatum0.getPayloadAsLong();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("edu.nps.moves.dis7.VariableDatum", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      variableDatum0.setPayload("2 p6|e");
      VariableDatum variableDatum1 = new VariableDatum((-2119L), (long) (byte)0);
      variableDatum0.equalsImpl(variableDatum1);
      assertEquals(48L, variableDatum0.getVariableDatumLength());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      boolean boolean0 = variableDatum0.equalsImpl(variableDatum0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      Object object0 = new Object();
      boolean boolean0 = variableDatum0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      Object object0 = new Object();
      boolean boolean0 = variableDatum0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      boolean boolean0 = variableDatum0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      boolean boolean0 = variableDatum0.equals(variableDatum0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      VariableDatum variableDatum1 = new VariableDatum(17L, 17L);
      boolean boolean0 = variableDatum0.equals(variableDatum1);
      assertEquals(17L, variableDatum1.getVariableDatumID());
      assertEquals(64L, variableDatum1.getVariableDatumLength());
      assertFalse(boolean0);
      assertEquals(8.4E-323, variableDatum1.getPayloadAsDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      byte[] byteArray0 = new byte[8];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      variableDatum0.unmarshal(byteBuffer0);
      assertEquals(0L, variableDatum0.getVariableDatumID());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      boolean boolean0 = variableDatum0.setPayload("n'q>/Bjh<WL");
      assertEquals(88L, variableDatum0.getVariableDatumLength());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = variableDatum0.setPayload(byteArray0, 0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      VariableDatum variableDatum0 = new VariableDatum(1L, byteArray0);
      boolean boolean0 = variableDatum0.setPayload(byteArray0, 1L);
      assertEquals(1L, variableDatum0.getVariableDatumID());
      assertEquals(8, variableDatum0.getMarshalledSize());
      assertFalse(boolean0);
      assertEquals(0L, variableDatum0.getVariableDatumLength());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum(3089L, (-770L));
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = variableDatum0.setPayload(byteArray0, (-1542L));
      assertEquals((-770L), variableDatum0.getPayloadAsLong());
      assertEquals(3089L, variableDatum0.getVariableDatumID());
      assertFalse(boolean0);
      assertEquals(64L, variableDatum0.getVariableDatumLength());
      assertEquals(16, variableDatum0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      boolean boolean0 = variableDatum0.setPayload((byte[]) null, 2291L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      // Undeclared exception!
      try { 
        variableDatum0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      byte[] byteArray0 = variableDatum0.getVariableData();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      variableDatum0.marshal(dataOutputStream0);
      assertEquals(0L, variableDatum0.getVariableDatumLength());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      variableDatum0.setVariableDatumLength(1718L);
      assertEquals(1718L, variableDatum0.getVariableDatumLength());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      variableDatum0.setVariableDatumID((byte) (-72));
      assertEquals((-72L), variableDatum0.getVariableDatumID());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum((-279L), (-279L));
      long long0 = variableDatum0.getVariableDatumID();
      assertEquals((-279L), long0);
      assertEquals(64L, variableDatum0.getVariableDatumLength());
      assertEquals(16, variableDatum0.getMarshalledSize());
      assertEquals((-279L), variableDatum0.getPayloadAsLong());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum((long) (byte)127, (double) (byte)17);
      variableDatum0.setVariableData((byte[]) null);
      assertEquals(16, variableDatum0.getMarshalledSize());
      assertEquals(64L, variableDatum0.getVariableDatumLength());
      assertEquals(17.0, variableDatum0.getPayloadAsDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      byte[] byteArray0 = variableDatum0.getPayload();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum(58L, 58L);
      String string0 = variableDatum0.getPayloadAsString();
      assertEquals(58L, variableDatum0.getVariableDatumID());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000:", string0);
      assertEquals(64L, variableDatum0.getVariableDatumLength());
      assertEquals(16, variableDatum0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      // Undeclared exception!
      try { 
        variableDatum0.getPayloadAsDouble();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("edu.nps.moves.dis7.VariableDatum", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum();
      long long0 = variableDatum0.getVariableDatumLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VariableDatum variableDatum0 = new VariableDatum((-1535L), (-1535L));
      assertEquals(64L, variableDatum0.getVariableDatumLength());
      
      variableDatum0.variableDatumLength = (-1535L);
      variableDatum0.getVariableDatumLength();
      assertEquals(16, variableDatum0.getMarshalledSize());
  }
}
