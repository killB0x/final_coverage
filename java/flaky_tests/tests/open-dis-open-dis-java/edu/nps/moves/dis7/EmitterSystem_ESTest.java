/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:28:50 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.EmitterSystem;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EmitterSystem_ESTest extends EmitterSystem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterIDNumber((short)255);
      EmitterSystem emitterSystem1 = new EmitterSystem();
      boolean boolean0 = emitterSystem0.equals(emitterSystem1);
      assertEquals((short)255, emitterSystem0.getEmitterIDNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterFunction((short)750);
      boolean boolean0 = emitterSystem0.equalsImpl(emitterSystem0);
      assertEquals((short)750, emitterSystem0.getEmitterFunction());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterFunction((short) (-1754));
      EmitterSystem emitterSystem1 = new EmitterSystem();
      boolean boolean0 = emitterSystem1.equalsImpl(emitterSystem0);
      assertEquals((short) (-1754), emitterSystem0.getEmitterFunction());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterName((-511));
      EmitterSystem emitterSystem1 = new EmitterSystem();
      boolean boolean0 = emitterSystem1.equalsImpl(emitterSystem0);
      assertEquals((-511), emitterSystem0.getEmitterName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterFunction((short)750);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((short)750);
      emitterSystem0.marshal(byteBuffer0);
      assertEquals((short)750, emitterSystem0.getEmitterFunction());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterIDNumber((short) (-526));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      emitterSystem0.marshal(dataOutputStream0);
      assertEquals((short) (-526), emitterSystem0.getEmitterIDNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterName((short) (-524));
      int int0 = emitterSystem0.getMarshalledSize();
      assertEquals((-524), emitterSystem0.getEmitterName());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((short)750);
      emitterSystem0.unmarshal(byteBuffer0);
      assertEquals((short)0, emitterSystem0.getEmitterIDNumber());
      assertEquals(0, emitterSystem0.getEmitterName());
      assertEquals((short)0, emitterSystem0.getEmitterFunction());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      emitterSystem0.unmarshal(dataInputStream0);
      assertEquals((short)0, emitterSystem0.getEmitterFunction());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.marshal((DataOutputStream) null);
      assertEquals(0, emitterSystem0.getEmitterName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterName(1958);
      int int0 = emitterSystem0.getEmitterName();
      assertEquals(1958, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterName((-3545));
      int int0 = emitterSystem0.getEmitterName();
      assertEquals((-3545), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.emitterIDNumber = (short)1614;
      short short0 = emitterSystem0.getEmitterIDNumber();
      assertEquals((short)1614, short0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterFunction((short)1200);
      short short0 = emitterSystem0.getEmitterFunction();
      assertEquals((short)1200, short0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterFunction((short) (-1754));
      short short0 = emitterSystem0.getEmitterFunction();
      assertEquals((short) (-1754), short0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("<");
      // Undeclared exception!
      try { 
        emitterSystem0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      // Undeclared exception!
      try { 
        emitterSystem0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EmitterSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterIDNumber((short) (-524));
      EmitterSystem emitterSystem1 = new EmitterSystem();
      boolean boolean0 = emitterSystem0.equalsImpl(emitterSystem1);
      assertEquals((short) (-524), emitterSystem0.getEmitterIDNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      EmitterSystem emitterSystem1 = new EmitterSystem();
      emitterSystem1.setEmitterFunction((short)4267);
      boolean boolean0 = emitterSystem0.equalsImpl(emitterSystem1);
      assertEquals((short)4267, emitterSystem1.getEmitterFunction());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      Object object0 = new Object();
      boolean boolean0 = emitterSystem0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      EmitterSystem emitterSystem1 = new EmitterSystem();
      boolean boolean0 = emitterSystem0.equals(emitterSystem1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      boolean boolean0 = emitterSystem0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      boolean boolean0 = emitterSystem0.equals(emitterSystem0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      boolean boolean0 = emitterSystem0.equals(mockPrintStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      // Undeclared exception!
      try { 
        emitterSystem0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EmitterSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      short short0 = emitterSystem0.getEmitterIDNumber();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      int int0 = emitterSystem0.getEmitterName();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterName((short) (-524));
      EmitterSystem emitterSystem1 = new EmitterSystem();
      boolean boolean0 = emitterSystem0.equalsImpl(emitterSystem1);
      assertEquals((-524), emitterSystem0.getEmitterName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.unmarshal((DataInputStream) null);
      assertEquals((short)0, emitterSystem0.getEmitterIDNumber());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      emitterSystem0.setEmitterIDNumber((short) (-526));
      short short0 = emitterSystem0.getEmitterIDNumber();
      assertEquals((short) (-526), short0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      // Undeclared exception!
      try { 
        emitterSystem0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EmitterSystem emitterSystem0 = new EmitterSystem();
      short short0 = emitterSystem0.getEmitterFunction();
      assertEquals((short)0, short0);
  }
}
