/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 13:39:45 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.ModulationType;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.PipedOutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ModulationType_ESTest extends ModulationType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setRadioSystem(2);
      ModulationType modulationType1 = new ModulationType();
      boolean boolean0 = modulationType1.equalsImpl(modulationType0);
      assertEquals(2, modulationType0.getRadioSystem());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      ModulationType modulationType1 = new ModulationType();
      modulationType1.setMajorModulation(1);
      boolean boolean0 = modulationType0.equalsImpl(modulationType1);
      assertEquals(1, modulationType1.getMajorModulation());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.spreadSpectrum = 2;
      ModulationType modulationType1 = new ModulationType();
      boolean boolean0 = modulationType0.equalsImpl(modulationType1);
      assertFalse(modulationType1.equals((Object)modulationType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.majorModulation = 1;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3733);
      modulationType0.marshal(byteBuffer0);
      assertEquals(8, modulationType0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1129);
      modulationType0.detail = (-1);
      modulationType0.marshal(byteBuffer0);
      assertEquals(0, modulationType0.getSpreadSpectrum());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setSpreadSpectrum(558);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2119);
      modulationType0.marshal(byteBuffer0);
      assertEquals(558, modulationType0.getSpreadSpectrum());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setRadioSystem(2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("edu.nps.moves.dis7.ModulationType");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      modulationType0.marshal(dataOutputStream0);
      assertEquals(2, modulationType0.getRadioSystem());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.spreadSpectrum = 2;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("edu.nps.moves.dis7.ModulationType");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      modulationType0.marshal(dataOutputStream0);
      assertEquals(0, modulationType0.getRadioSystem());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.detail = (-1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      modulationType0.marshal(dataOutputStream0);
      assertEquals(0, modulationType0.getRadioSystem());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.spreadSpectrum = 2;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      modulationType0.marshal(dataOutputStream0);
      assertEquals(0, modulationType0.getRadioSystem());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setRadioSystem(2);
      int int0 = modulationType0.getMarshalledSize();
      assertEquals(2, modulationType0.getRadioSystem());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.spreadSpectrum = 2;
      int int0 = modulationType0.getMarshalledSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setDetail(2119);
      int int0 = modulationType0.getMarshalledSize();
      assertEquals(2119, modulationType0.getDetail());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.majorModulation = 1;
      int int0 = modulationType0.getMarshalledSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      byte[] byteArray0 = new byte[9];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      modulationType0.unmarshal(byteBuffer0);
      assertEquals(0, modulationType0.getMajorModulation());
      assertEquals(0, modulationType0.getRadioSystem());
      assertEquals(0, modulationType0.getSpreadSpectrum());
      assertEquals(0, modulationType0.getDetail());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        modulationType0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      byte[] byteArray0 = new byte[23];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      modulationType0.unmarshal(dataInputStream0);
      assertEquals(0, modulationType0.getSpreadSpectrum());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.spreadSpectrum = 786;
      int int0 = modulationType0.getSpreadSpectrum();
      assertEquals(786, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setSpreadSpectrum((-583));
      int int0 = modulationType0.getSpreadSpectrum();
      assertEquals((-583), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setRadioSystem(1);
      int int0 = modulationType0.getRadioSystem();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setRadioSystem((-740));
      int int0 = modulationType0.getRadioSystem();
      assertEquals((-740), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.majorModulation = 1;
      int int0 = modulationType0.getMajorModulation();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.majorModulation = (-2013);
      int int0 = modulationType0.getMajorModulation();
      assertEquals((-2013), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setDetail(2143);
      int int0 = modulationType0.getDetail();
      assertEquals(2143, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.detail = (-1);
      int int0 = modulationType0.getDetail();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      // Undeclared exception!
      try { 
        modulationType0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.ModulationType", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      // Undeclared exception!
      try { 
        modulationType0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setDetail(2992);
      ModulationType modulationType1 = new ModulationType();
      boolean boolean0 = modulationType0.equalsImpl(modulationType1);
      assertEquals(2992, modulationType0.getDetail());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setRadioSystem(2);
      ModulationType modulationType1 = new ModulationType();
      boolean boolean0 = modulationType0.equalsImpl(modulationType1);
      assertEquals(2, modulationType0.getRadioSystem());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      ModulationType modulationType1 = new ModulationType();
      modulationType1.setDetail(8);
      boolean boolean0 = modulationType0.equals(modulationType1);
      assertEquals(8, modulationType1.getDetail());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.majorModulation = 2143;
      ModulationType modulationType1 = new ModulationType();
      boolean boolean0 = modulationType0.equalsImpl(modulationType1);
      assertFalse(boolean0);
      assertFalse(modulationType1.equals((Object)modulationType0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.setSpreadSpectrum((-455));
      ModulationType modulationType1 = new ModulationType();
      boolean boolean0 = modulationType0.equalsImpl(modulationType1);
      assertEquals((-455), modulationType0.getSpreadSpectrum());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      Object object0 = new Object();
      boolean boolean0 = modulationType0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      Object object0 = new Object();
      boolean boolean0 = modulationType0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      boolean boolean0 = modulationType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      boolean boolean0 = modulationType0.equals(modulationType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      int int0 = modulationType0.getMajorModulation();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      int int0 = modulationType0.getRadioSystem();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      int int0 = modulationType0.getSpreadSpectrum();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      int int0 = modulationType0.getDetail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      // Undeclared exception!
      try { 
        modulationType0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.ModulationType", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ModulationType modulationType0 = new ModulationType();
      modulationType0.unmarshal((DataInputStream) null);
      assertEquals(0, modulationType0.getMajorModulation());
  }
}
