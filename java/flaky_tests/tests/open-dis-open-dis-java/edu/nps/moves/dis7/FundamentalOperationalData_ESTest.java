/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 11:28:00 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.FundamentalOperationalData;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FundamentalOperationalData_ESTest extends FundamentalOperationalData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter6((-2701));
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData1);
      assertEquals((-2701), fundamentalOperationalData0.getParameter6());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      fundamentalOperationalData1.setParameter5((short)1386);
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData1);
      assertEquals(1386, fundamentalOperationalData1.getParameter5());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter4((-1463));
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData1);
      assertEquals((-1463), fundamentalOperationalData0.getParameter4());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      fundamentalOperationalData1.setParameter3(1);
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData1);
      assertEquals(1, fundamentalOperationalData1.getParameter3());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.parameter2 = (-1394);
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData1);
      assertFalse(boolean0);
      assertFalse(fundamentalOperationalData1.equals((Object)fundamentalOperationalData0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter1((-344));
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData1);
      assertEquals((-344), fundamentalOperationalData0.getParameter1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter4((-1463));
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData0);
      assertEquals((-1463), fundamentalOperationalData0.getParameter4());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setInformationLayers((short) (-18));
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData1);
      assertEquals((short) (-18), fundamentalOperationalData0.getInformationLayers());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setDataField1((byte) (-70));
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData1);
      assertEquals((short) (-70), fundamentalOperationalData0.getDataField1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      assertTrue(fundamentalOperationalData1.equals((Object)fundamentalOperationalData0));
      
      fundamentalOperationalData0.systemStatus = (short) (-2701);
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData1);
      assertFalse(fundamentalOperationalData1.equals((Object)fundamentalOperationalData0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter4((byte) (-70));
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(690);
      fundamentalOperationalData0.marshal(byteBuffer0);
      assertEquals((-70), fundamentalOperationalData0.getParameter4());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.parameter6 = (-421);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(690);
      fundamentalOperationalData0.marshal(byteBuffer0);
      assertFalse(byteBuffer0.isDirect());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.parameter2 = 1;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("6tD/d94Ym@(kL|*");
      // Undeclared exception!
      try { 
        fundamentalOperationalData0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.parameter1 = 2086;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("6tD/d94Ym@(kL|*");
      // Undeclared exception!
      try { 
        fundamentalOperationalData0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.dataField2 = (short)1;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(690);
      fundamentalOperationalData0.marshal(byteBuffer0);
      assertEquals((short)1, fundamentalOperationalData0.getDataField2());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setInformationLayers((short) (-1463));
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(671);
      fundamentalOperationalData0.marshal(byteBuffer0);
      assertEquals((short) (-1463), fundamentalOperationalData0.getInformationLayers());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.systemStatus = (short) (-2701);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(564);
      fundamentalOperationalData0.marshal(byteBuffer0);
      assertEquals(16, fundamentalOperationalData0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      MockFile mockFile0 = new MockFile("cnp!");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      fundamentalOperationalData0.setParameter4((byte) (-70));
      fundamentalOperationalData0.marshal(dataOutputStream0);
      assertEquals((-70), fundamentalOperationalData0.getParameter4());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      MockPrintStream mockPrintStream0 = new MockPrintStream(">p");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      fundamentalOperationalData0.parameter3 = (-1);
      fundamentalOperationalData0.marshal(dataOutputStream0);
      assertEquals(16, fundamentalOperationalData0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter2((-155));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&$0jzMK&>JVeIPGN", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      fundamentalOperationalData0.marshal(dataOutputStream0);
      assertEquals((-155), fundamentalOperationalData0.getParameter2());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("t/:#G'fQ|SP");
      fundamentalOperationalData0.setParameter1((-2110));
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      fundamentalOperationalData0.marshal(dataOutputStream0);
      assertEquals((-2110), fundamentalOperationalData0.getParameter1());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      MockFile mockFile0 = new MockFile("cnp!");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      fundamentalOperationalData0.parameter6 = (-421);
      fundamentalOperationalData0.marshal(dataOutputStream0);
      assertEquals((short)0, fundamentalOperationalData0.getDataField1());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      MockPrintStream mockPrintStream0 = new MockPrintStream(">p");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      fundamentalOperationalData0.setDataField2((short)1);
      fundamentalOperationalData0.marshal(dataOutputStream0);
      assertEquals((short)1, fundamentalOperationalData0.getDataField2());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.dataField1 = (short) (byte) (-70);
      MockFile mockFile0 = new MockFile("cnp!");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      fundamentalOperationalData0.marshal(dataOutputStream0);
      assertEquals((short)0, fundamentalOperationalData0.getSystemStatus());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      MockPrintStream mockPrintStream0 = new MockPrintStream(">p");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      fundamentalOperationalData0.setSystemStatus((short)3397);
      fundamentalOperationalData0.marshal(dataOutputStream0);
      assertEquals((short)3397, fundamentalOperationalData0.getSystemStatus());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter1((short)1458);
      int int0 = fundamentalOperationalData0.getMarshalledSize();
      assertEquals(1458, fundamentalOperationalData0.getParameter1());
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.parameter2 = 2190;
      int int0 = fundamentalOperationalData0.getMarshalledSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter3(1);
      int int0 = fundamentalOperationalData0.getMarshalledSize();
      assertEquals(1, fundamentalOperationalData0.getParameter3());
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter4(1);
      int int0 = fundamentalOperationalData0.getMarshalledSize();
      assertEquals(1, fundamentalOperationalData0.getParameter4());
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter5((short)1386);
      int int0 = fundamentalOperationalData0.getMarshalledSize();
      assertEquals(1386, fundamentalOperationalData0.getParameter5());
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter6(2086);
      int int0 = fundamentalOperationalData0.getMarshalledSize();
      assertEquals(2086, fundamentalOperationalData0.getParameter6());
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(255);
      fundamentalOperationalData0.unmarshal(byteBuffer0);
      assertEquals(0, fundamentalOperationalData0.getParameter3());
      assertEquals((short)0, fundamentalOperationalData0.getSystemStatus());
      assertEquals(0, fundamentalOperationalData0.getParameter4());
      assertEquals((short)0, fundamentalOperationalData0.getDataField2());
      assertEquals((short)0, fundamentalOperationalData0.getInformationLayers());
      assertEquals((short)0, fundamentalOperationalData0.getDataField1());
      assertEquals(0, fundamentalOperationalData0.getParameter1());
      assertEquals(0, fundamentalOperationalData0.getParameter2());
      assertEquals(0, fundamentalOperationalData0.getParameter5());
      assertEquals(0, fundamentalOperationalData0.getParameter6());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      fundamentalOperationalData0.unmarshal(dataInputStream0);
      assertEquals(16, fundamentalOperationalData0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.marshal((DataOutputStream) null);
      assertEquals(0, fundamentalOperationalData0.getParameter1());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setSystemStatus((short)79);
      short short0 = fundamentalOperationalData0.getSystemStatus();
      assertEquals((short)79, short0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.systemStatus = (short) (-1542);
      short short0 = fundamentalOperationalData0.getSystemStatus();
      assertEquals((short) (-1542), short0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter6(255);
      int int0 = fundamentalOperationalData0.getParameter6();
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.parameter6 = (-646);
      int int0 = fundamentalOperationalData0.getParameter6();
      assertEquals((-646), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter5((-1394));
      int int0 = fundamentalOperationalData0.getParameter5();
      assertEquals((-1394), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.parameter4 = (int) (short)255;
      int int0 = fundamentalOperationalData0.getParameter4();
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter4((byte) (-70));
      int int0 = fundamentalOperationalData0.getParameter4();
      assertEquals((-70), int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.parameter3 = 1;
      int int0 = fundamentalOperationalData0.getParameter3();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter3((-4345));
      int int0 = fundamentalOperationalData0.getParameter3();
      assertEquals((-4345), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.parameter2 = 1;
      int int0 = fundamentalOperationalData0.getParameter2();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.parameter1 = 1457;
      int int0 = fundamentalOperationalData0.getParameter1();
      assertEquals(1457, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter1((-155));
      int int0 = fundamentalOperationalData0.getParameter1();
      assertEquals((-155), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setInformationLayers((short)2);
      short short0 = fundamentalOperationalData0.getInformationLayers();
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setInformationLayers((short) (-3581));
      short short0 = fundamentalOperationalData0.getInformationLayers();
      assertEquals((short) (-3581), short0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.dataField2 = (short)4677;
      short short0 = fundamentalOperationalData0.getDataField2();
      assertEquals((short)4677, short0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.dataField2 = (short) (-94);
      short short0 = fundamentalOperationalData0.getDataField2();
      assertEquals((short) (-94), short0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setDataField1((short)1);
      short short0 = fundamentalOperationalData0.getDataField1();
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setDataField1((short) (-2290));
      short short0 = fundamentalOperationalData0.getDataField1();
      assertEquals((short) (-2290), short0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((short)1);
      // Undeclared exception!
      try { 
        fundamentalOperationalData0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      // Undeclared exception!
      try { 
        fundamentalOperationalData0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.FundamentalOperationalData", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.parameter5 = 19;
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData1);
      assertFalse(fundamentalOperationalData1.equals((Object)fundamentalOperationalData0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      assertTrue(fundamentalOperationalData1.equals((Object)fundamentalOperationalData0));
      
      fundamentalOperationalData1.parameter4 = (-2841);
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData1);
      assertFalse(fundamentalOperationalData1.equals((Object)fundamentalOperationalData0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.parameter2 = 2190;
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData1);
      assertFalse(boolean0);
      assertFalse(fundamentalOperationalData1.equals((Object)fundamentalOperationalData0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.dataField2 = (short) (byte)76;
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData1);
      assertFalse(boolean0);
      assertFalse(fundamentalOperationalData1.equals((Object)fundamentalOperationalData0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.systemStatus = (short)1458;
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData1);
      assertFalse(boolean0);
      assertFalse(fundamentalOperationalData1.equals((Object)fundamentalOperationalData0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      Object object0 = new Object();
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      Object object0 = new Object();
      boolean boolean0 = fundamentalOperationalData0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      boolean boolean0 = fundamentalOperationalData0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      boolean boolean0 = fundamentalOperationalData0.equals(fundamentalOperationalData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      boolean boolean0 = fundamentalOperationalData0.equals(fundamentalOperationalData1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setInformationLayers((short)1386);
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData1);
      assertEquals((short)1386, fundamentalOperationalData0.getInformationLayers());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      short short0 = fundamentalOperationalData0.getDataField2();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter5((short)1386);
      int int0 = fundamentalOperationalData0.getParameter5();
      assertEquals(1386, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      int int0 = fundamentalOperationalData0.getParameter2();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      int int0 = fundamentalOperationalData0.getParameter4();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      int int0 = fundamentalOperationalData0.getParameter6();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter6(2086);
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData1);
      assertEquals(2086, fundamentalOperationalData0.getParameter6());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter1((short)1458);
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData1);
      assertEquals(1458, fundamentalOperationalData0.getParameter1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setDataField2((short) (-720));
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData1);
      assertEquals((short) (-720), fundamentalOperationalData0.getDataField2());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      short short0 = fundamentalOperationalData0.getInformationLayers();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setDataField1((byte) (-70));
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      boolean boolean0 = fundamentalOperationalData1.equalsImpl(fundamentalOperationalData0);
      assertEquals((short) (-70), fundamentalOperationalData0.getDataField1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      short short0 = fundamentalOperationalData0.getDataField1();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      int int0 = fundamentalOperationalData0.getParameter3();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      int int0 = fundamentalOperationalData0.getParameter1();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      short short0 = fundamentalOperationalData0.getSystemStatus();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      int int0 = fundamentalOperationalData0.getParameter5();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      // Undeclared exception!
      try { 
        fundamentalOperationalData0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.FundamentalOperationalData", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter3(2350);
      FundamentalOperationalData fundamentalOperationalData1 = new FundamentalOperationalData();
      boolean boolean0 = fundamentalOperationalData0.equalsImpl(fundamentalOperationalData1);
      assertEquals(2350, fundamentalOperationalData0.getParameter3());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FundamentalOperationalData fundamentalOperationalData0 = new FundamentalOperationalData();
      fundamentalOperationalData0.setParameter2((-1));
      int int0 = fundamentalOperationalData0.getParameter2();
      assertEquals((-1), int0);
  }
}
