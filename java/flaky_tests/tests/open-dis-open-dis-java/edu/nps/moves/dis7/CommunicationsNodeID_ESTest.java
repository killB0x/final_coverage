/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:52:45 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.CommunicationsNodeID;
import edu.nps.moves.dis7.EntityID;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.PipedInputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CommunicationsNodeID_ESTest extends CommunicationsNodeID_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      CommunicationsNodeID communicationsNodeID1 = new CommunicationsNodeID();
      assertTrue(communicationsNodeID1.equals((Object)communicationsNodeID0));
      
      communicationsNodeID1.elementID = 65535;
      boolean boolean0 = communicationsNodeID0.equals(communicationsNodeID1);
      assertFalse(communicationsNodeID1.equals((Object)communicationsNodeID0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      communicationsNodeID0.elementID = (-4510);
      int int0 = communicationsNodeID0.getMarshalledSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(802);
      communicationsNodeID0.unmarshal(byteBuffer0);
      assertEquals(0, communicationsNodeID0.getElementID());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(6);
      // Undeclared exception!
      try { 
        communicationsNodeID0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(8);
      communicationsNodeID0.marshal(byteBuffer0);
      assertEquals(8, communicationsNodeID0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      communicationsNodeID0.setEntityID((EntityID) null);
      EntityID entityID0 = communicationsNodeID0.getEntityID();
      assertNull(entityID0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      communicationsNodeID0.unmarshal(dataInputStream0);
      EntityID entityID0 = communicationsNodeID0.getEntityID();
      assertEquals(0, entityID0.getApplicationID());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      communicationsNodeID0.unmarshal(dataInputStream0);
      EntityID entityID0 = communicationsNodeID0.getEntityID();
      assertEquals(17664, entityID0.getEntityID());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      EntityID entityID0 = communicationsNodeID0.getEntityID();
      entityID0.setEntityID((-1));
      EntityID entityID1 = communicationsNodeID0.getEntityID();
      assertEquals(0, entityID1.getSiteID());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-101);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      communicationsNodeID0.unmarshal(dataInputStream0);
      EntityID entityID0 = communicationsNodeID0.getEntityID();
      assertEquals(39680, entityID0.getApplicationID());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      EntityID entityID0 = communicationsNodeID0.entityID;
      entityID0.setApplicationID((-256));
      EntityID entityID1 = communicationsNodeID0.getEntityID();
      assertEquals((-256), entityID1.getApplicationID());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      communicationsNodeID0.setElementID(4116);
      int int0 = communicationsNodeID0.getElementID();
      assertEquals(4116, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      communicationsNodeID0.elementID = (-4510);
      int int0 = communicationsNodeID0.getElementID();
      assertEquals((-4510), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      boolean boolean0 = communicationsNodeID0.equalsImpl(communicationsNodeID0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      // Undeclared exception!
      try { 
        communicationsNodeID0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EntityID", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      communicationsNodeID0.setEntityID((EntityID) null);
      // Undeclared exception!
      try { 
        communicationsNodeID0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.CommunicationsNodeID", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      CommunicationsNodeID communicationsNodeID1 = new CommunicationsNodeID();
      assertTrue(communicationsNodeID1.equals((Object)communicationsNodeID0));
      
      communicationsNodeID1.entityID.siteID = 65535;
      boolean boolean0 = communicationsNodeID0.equalsImpl(communicationsNodeID1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      CommunicationsNodeID communicationsNodeID1 = new CommunicationsNodeID();
      assertTrue(communicationsNodeID1.equals((Object)communicationsNodeID0));
      
      communicationsNodeID1.elementID = 65535;
      boolean boolean0 = communicationsNodeID1.equalsImpl(communicationsNodeID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      EntityID entityID0 = communicationsNodeID0.entityID;
      boolean boolean0 = communicationsNodeID0.equalsImpl(entityID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      CommunicationsNodeID communicationsNodeID1 = new CommunicationsNodeID();
      boolean boolean0 = communicationsNodeID0.equals(communicationsNodeID1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      boolean boolean0 = communicationsNodeID0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      boolean boolean0 = communicationsNodeID0.equals(communicationsNodeID0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      Object object0 = new Object();
      boolean boolean0 = communicationsNodeID0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      int int0 = communicationsNodeID0.getElementID();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2);
      // Undeclared exception!
      try { 
        communicationsNodeID0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      communicationsNodeID0.unmarshal(dataInputStream0);
      assertEquals(8, communicationsNodeID0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      communicationsNodeID0.marshal((DataOutputStream) null);
      assertEquals(0, communicationsNodeID0.getElementID());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CommunicationsNodeID communicationsNodeID0 = new CommunicationsNodeID();
      // Undeclared exception!
      try { 
        communicationsNodeID0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EntityID", e);
      }
  }
}
