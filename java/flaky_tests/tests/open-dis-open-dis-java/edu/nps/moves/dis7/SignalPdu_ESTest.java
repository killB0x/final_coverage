/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:00:04 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.SignalPdu;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SignalPdu_ESTest extends SignalPdu_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      SignalPdu signalPdu1 = new SignalPdu();
      signalPdu1.setSamples((short) (-463));
      boolean boolean0 = signalPdu0.equals(signalPdu1);
      assertEquals((short) (-463), signalPdu1.getSamples());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      SignalPdu signalPdu1 = new SignalPdu();
      assertTrue(signalPdu1.equals((Object)signalPdu0));
      
      signalPdu1.samples = (short)501;
      boolean boolean0 = signalPdu0.equals(signalPdu1);
      assertFalse(signalPdu1.equals((Object)signalPdu0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      SignalPdu signalPdu1 = new SignalPdu();
      assertTrue(signalPdu1.equals((Object)signalPdu0));
      
      signalPdu1.dataLength = (short)3167;
      boolean boolean0 = signalPdu0.equals(signalPdu1);
      assertFalse(signalPdu1.equals((Object)signalPdu0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.setPadding((short) (-1));
      boolean boolean0 = signalPdu0.equalsImpl(signalPdu0);
      assertEquals((short)26, signalPdu0.getPduType());
      assertTrue(boolean0);
      assertEquals(24, signalPdu0.getLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      SignalPdu signalPdu1 = new SignalPdu();
      assertTrue(signalPdu1.equals((Object)signalPdu0));
      
      signalPdu1.sampleRate = (-1L);
      boolean boolean0 = signalPdu0.equalsImpl(signalPdu1);
      assertFalse(signalPdu1.equals((Object)signalPdu0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      SignalPdu signalPdu1 = new SignalPdu();
      assertTrue(signalPdu1.equals((Object)signalPdu0));
      
      signalPdu1.tdlType = (-795);
      boolean boolean0 = signalPdu0.equalsImpl(signalPdu1);
      assertFalse(signalPdu1.equals((Object)signalPdu0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.setEncodingScheme(65535);
      SignalPdu signalPdu1 = new SignalPdu();
      boolean boolean0 = signalPdu1.equals(signalPdu0);
      assertEquals(65535, signalPdu0.getEncodingScheme());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.samples = (short)501;
      byte[] byteArray0 = signalPdu0.marshal();
      assertEquals((short)26, signalPdu0.getPduType());
      assertEquals(24, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3830);
      signalPdu0.setPadding((short)621);
      signalPdu0.marshal(byteBuffer0);
      assertEquals(24, byteBuffer0.position());
      assertEquals(24, signalPdu0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.timestamp = 3445L;
      byte[] byteArray0 = signalPdu0.marshal();
      assertEquals(24, byteArray0.length);
      assertEquals((short)26, signalPdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.tdlType = (int) (short)182;
      byte[] byteArray0 = signalPdu0.marshal();
      assertEquals((short)26, signalPdu0.getPduType());
      assertEquals(24, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      MockFile mockFile0 = new MockFile("*^ApX'}3lIfv8`J-FA", "edu.nps.moves.dis7.SignalPdu");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      signalPdu0.setSamples((short) (-3867));
      signalPdu0.marshal(dataOutputStream0);
      assertEquals(24L, mockFile0.length());
      assertEquals((short)26, signalPdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.setTimestamp(1061L);
      MockFile mockFile0 = new MockFile("M26");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      signalPdu0.marshal(dataOutputStream0);
      assertEquals((short)26, signalPdu0.getPduType());
      assertEquals(24, signalPdu0.getLength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      signalPdu0.setTdlType(1241);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      signalPdu0.marshal(dataOutputStream0);
      assertEquals(24, byteArrayOutputStream0.size());
      assertEquals(1241, signalPdu0.getTdlType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      assertEquals((short)0, signalPdu0.getDataLength());
      
      byte[] byteArray0 = new byte[1];
      signalPdu0.setData(byteArray0);
      signalPdu0.marshal();
      assertEquals((short)1, signalPdu0.getDataLength());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      byte[] byteArray0 = signalPdu0.marshal();
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      signalPdu0.unmarshal(byteBuffer0);
      assertEquals(24, byteBuffer0.position());
      assertEquals(24, signalPdu0.getLength());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.marshal((DataOutputStream) null);
      assertEquals((short)0, signalPdu0.getDataLength());
      assertEquals((short)26, signalPdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.tdlType = 65535;
      int int0 = signalPdu0.getTdlType();
      assertEquals(65535, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.tdlType = (-866);
      int int0 = signalPdu0.getTdlType();
      assertEquals((-866), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      assertEquals((short)0, signalPdu0.getSamples());
      
      signalPdu0.setSamples((short)26);
      short short0 = signalPdu0.getSamples();
      assertEquals((short)26, short0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.setSamples((short) (-2171));
      short short0 = signalPdu0.getSamples();
      assertEquals((short) (-2171), short0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.sampleRate = 422L;
      long long0 = signalPdu0.getSampleRate();
      assertEquals(422L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.sampleRate = (-1L);
      long long0 = signalPdu0.getSampleRate();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.setEncodingScheme(24);
      int int0 = signalPdu0.getEncodingScheme();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.encodingScheme = (-2972);
      int int0 = signalPdu0.getEncodingScheme();
      assertEquals((-2972), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      byte[] byteArray0 = signalPdu0.marshal();
      signalPdu0.setData(byteArray0);
      short short0 = signalPdu0.getDataLength();
      assertEquals((short)24, short0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      assertEquals(24, signalPdu0.getMarshalledSize());
      
      signalPdu0.setData((byte[]) null);
      byte[] byteArray0 = signalPdu0.getData();
      assertNull(byteArray0);
      assertEquals((short)26, signalPdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      byte[] byteArray0 = new byte[3];
      signalPdu0.setData(byteArray0);
      signalPdu0.getData();
      assertEquals(27, signalPdu0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      // Undeclared exception!
      try { 
        signalPdu0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.PduSuperclass", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(24);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        signalPdu0.marshal(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        signalPdu0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      // Undeclared exception!
      try { 
        signalPdu0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.PduSuperclass", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.setData((byte[]) null);
      // Undeclared exception!
      try { 
        signalPdu0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.SignalPdu", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.setData((byte[]) null);
      // Undeclared exception!
      try { 
        signalPdu0.getDataLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.SignalPdu", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      int int0 = signalPdu0.getMarshalledSize();
      assertEquals((short)26, signalPdu0.getPduType());
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.setExerciseID((short) (-2726));
      SignalPdu signalPdu1 = new SignalPdu();
      boolean boolean0 = signalPdu1.equalsImpl(signalPdu0);
      assertEquals((short)26, signalPdu1.getPduType());
      assertFalse(boolean0);
      assertEquals(24, signalPdu1.getLength());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      assertEquals(24, signalPdu0.getLength());
      
      byte[] byteArray0 = new byte[6];
      signalPdu0.data = byteArray0;
      SignalPdu signalPdu1 = new SignalPdu();
      boolean boolean0 = signalPdu1.equalsImpl(signalPdu0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.samples = (short) (-2176);
      SignalPdu signalPdu1 = new SignalPdu();
      boolean boolean0 = signalPdu0.equalsImpl(signalPdu1);
      assertFalse(signalPdu1.equals((Object)signalPdu0));
      assertEquals((short)26, signalPdu1.getPduType());
      assertFalse(boolean0);
      assertEquals(24, signalPdu1.getLength());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.setSampleRate((-1L));
      SignalPdu signalPdu1 = new SignalPdu();
      boolean boolean0 = signalPdu0.equalsImpl(signalPdu1);
      assertEquals((-1L), signalPdu0.getSampleRate());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.setTdlType((-4490));
      SignalPdu signalPdu1 = new SignalPdu();
      boolean boolean0 = signalPdu0.equalsImpl(signalPdu1);
      assertEquals((-4490), signalPdu0.getTdlType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      SignalPdu signalPdu1 = new SignalPdu();
      signalPdu1.setEncodingScheme(24);
      boolean boolean0 = signalPdu1.equalsImpl(signalPdu0);
      assertEquals(24, signalPdu1.getEncodingScheme());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      MockFile mockFile0 = new MockFile((File) null, ")E(-~3Qu^VdE+4");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      boolean boolean0 = signalPdu0.equalsImpl(dataOutputStream0);
      assertFalse(boolean0);
      assertEquals((short)26, signalPdu0.getPduType());
      assertEquals(24, signalPdu0.getLength());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      Object object0 = new Object();
      boolean boolean0 = signalPdu0.equals(object0);
      assertEquals((short)26, signalPdu0.getPduType());
      assertEquals(24, signalPdu0.getLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      boolean boolean0 = signalPdu0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals((short)26, signalPdu0.getPduType());
      assertEquals(24, signalPdu0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      boolean boolean0 = signalPdu0.equals(signalPdu0);
      assertEquals((short)26, signalPdu0.getPduType());
      assertTrue(boolean0);
      assertEquals(24, signalPdu0.getLength());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      int int0 = signalPdu0.getTdlType();
      assertEquals(0, int0);
      assertEquals((short)26, signalPdu0.getPduType());
      assertEquals((short)0, signalPdu0.getDataLength());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.unmarshal((DataInputStream) null);
      assertEquals((short)26, signalPdu0.getPduType());
      assertEquals((short)0, signalPdu0.getDataLength());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("edu.nps.moves.dis7.RadioCommunicationsFamilyPdu");
      // Undeclared exception!
      try { 
        signalPdu0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      short short0 = signalPdu0.getDataLength();
      assertEquals((short)26, signalPdu0.getPduType());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      byte[] byteArray0 = signalPdu0.getData();
      assertEquals(0, byteArray0.length);
      assertEquals((short)26, signalPdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.getSampleRate();
      assertEquals(24, signalPdu0.getMarshalledSize());
      assertEquals((short)26, signalPdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      int int0 = signalPdu0.getEncodingScheme();
      assertEquals(0, int0);
      assertEquals((short)26, signalPdu0.getPduType());
      assertEquals((short)0, signalPdu0.getDataLength());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      signalPdu0.setDataLength((short) (-1));
      SignalPdu signalPdu1 = new SignalPdu();
      boolean boolean0 = signalPdu0.equalsImpl(signalPdu1);
      assertEquals((short)26, signalPdu1.getPduType());
      assertFalse(signalPdu1.equals((Object)signalPdu0));
      assertFalse(boolean0);
      assertEquals(24, signalPdu1.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SignalPdu signalPdu0 = new SignalPdu();
      short short0 = signalPdu0.getSamples();
      assertEquals((short)0, short0);
      assertEquals((short)26, signalPdu0.getPduType());
      assertEquals((short)0, signalPdu0.getDataLength());
  }
}
