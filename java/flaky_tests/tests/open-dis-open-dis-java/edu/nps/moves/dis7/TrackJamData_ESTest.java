/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 13:56:34 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.EntityID;
import edu.nps.moves.dis7.TrackJamData;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.PipedInputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TrackJamData_ESTest extends TrackJamData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      trackJamData0.beamNumber = (short)210;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((short)210);
      trackJamData0.marshal(byteBuffer0);
      assertEquals((short)0, trackJamData0.getEmitterNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      MockPrintStream mockPrintStream0 = new MockPrintStream("q");
      trackJamData0.emitterNumber = (short)4568;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      trackJamData0.marshal(dataOutputStream0);
      assertEquals(8, trackJamData0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2932);
      trackJamData0.unmarshal(byteBuffer0);
      assertEquals((short)0, trackJamData0.getBeamNumber());
      assertEquals((short)0, trackJamData0.getEmitterNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",r)l&bh4k{ih[{jk4Y<");
      mockFileOutputStream0.close();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      trackJamData0.marshal(dataOutputStream0);
      assertEquals(8, trackJamData0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      trackJamData0.entityID = null;
      EntityID entityID0 = trackJamData0.getEntityID();
      assertNull(entityID0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      trackJamData0.unmarshal(dataInputStream0);
      EntityID entityID0 = trackJamData0.getEntityID();
      assertEquals(8448, entityID0.getSiteID());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      EntityID entityID0 = trackJamData0.getEntityID();
      entityID0.setSiteID((short) (-5));
      EntityID entityID1 = trackJamData0.getEntityID();
      assertEquals((-5), entityID1.getSiteID());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-42);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      trackJamData0.unmarshal(dataInputStream0);
      EntityID entityID0 = trackJamData0.getEntityID();
      assertEquals(0, entityID0.getSiteID());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-84);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      trackJamData0.unmarshal(dataInputStream0);
      EntityID entityID0 = trackJamData0.getEntityID();
      assertEquals(44032, entityID0.getApplicationID());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      trackJamData0.setEmitterNumber((short)544);
      short short0 = trackJamData0.getEmitterNumber();
      assertEquals((short)544, short0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      trackJamData0.emitterNumber = (short) (-5);
      short short0 = trackJamData0.getEmitterNumber();
      assertEquals((short) (-5), short0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      trackJamData0.setBeamNumber((short)61);
      short short0 = trackJamData0.getBeamNumber();
      assertEquals((short)61, short0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      // Undeclared exception!
      try { 
        trackJamData0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      // Undeclared exception!
      try { 
        trackJamData0.unmarshal((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.TrackJamData", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-23), (byte)88);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        trackJamData0.unmarshal(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -22 out of bounds for length 7
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      // Undeclared exception!
      try { 
        trackJamData0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EntityID", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      trackJamData0.entityID = null;
      // Undeclared exception!
      try { 
        trackJamData0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.TrackJamData", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      trackJamData0.setEntityID((EntityID) null);
      // Undeclared exception!
      try { 
        trackJamData0.equalsImpl(trackJamData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.TrackJamData", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      TrackJamData trackJamData1 = new TrackJamData();
      trackJamData1.setBeamNumber((short) (-5));
      boolean boolean0 = trackJamData1.equalsImpl(trackJamData0);
      assertEquals((short) (-5), trackJamData1.getBeamNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      trackJamData0.emitterNumber = (short) (-5);
      TrackJamData trackJamData1 = new TrackJamData();
      boolean boolean0 = trackJamData1.equalsImpl(trackJamData0);
      assertFalse(boolean0);
      assertFalse(trackJamData0.equals((Object)trackJamData1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      EntityID entityID0 = trackJamData0.getEntityID();
      entityID0.setSiteID((-1));
      TrackJamData trackJamData1 = new TrackJamData();
      boolean boolean0 = trackJamData1.equalsImpl(trackJamData0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      boolean boolean0 = trackJamData0.equalsImpl(trackJamData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      TrackJamData trackJamData1 = new TrackJamData();
      trackJamData1.setBeamNumber((short) (-5));
      boolean boolean0 = trackJamData0.equals(trackJamData1);
      assertEquals((short) (-5), trackJamData1.getBeamNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      trackJamData0.emitterNumber = (short) (-5);
      TrackJamData trackJamData1 = new TrackJamData();
      boolean boolean0 = trackJamData0.equals(trackJamData1);
      assertFalse(boolean0);
      assertFalse(trackJamData1.equals((Object)trackJamData0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      EntityID entityID0 = trackJamData0.getEntityID();
      boolean boolean0 = trackJamData0.equalsImpl(entityID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      boolean boolean0 = trackJamData0.equals(pipedInputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      boolean boolean0 = trackJamData0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      boolean boolean0 = trackJamData0.equals(trackJamData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        trackJamData0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      short short0 = trackJamData0.getBeamNumber();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      int int0 = trackJamData0.getMarshalledSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      // Undeclared exception!
      try { 
        trackJamData0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EntityID", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      short short0 = trackJamData0.getEmitterNumber();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      trackJamData0.setBeamNumber((short) (-5));
      short short0 = trackJamData0.getBeamNumber();
      assertEquals((short) (-5), short0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TrackJamData trackJamData0 = new TrackJamData();
      // Undeclared exception!
      try { 
        trackJamData0.marshal((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.TrackJamData", e);
      }
  }
}
