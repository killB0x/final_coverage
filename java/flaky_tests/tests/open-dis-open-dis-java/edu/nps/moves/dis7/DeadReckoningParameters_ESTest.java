/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 11:33:11 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.DeadReckoningParameters;
import edu.nps.moves.dis7.Vector3Float;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DeadReckoningParameters_ESTest extends DeadReckoningParameters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte) (-79);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      Vector3Float vector3Float0 = deadReckoningParameters0.getEntityAngularVelocity();
      vector3Float0.setZ((byte)6);
      deadReckoningParameters0.setEntityAngularVelocity(vector3Float0);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)21;
      shortArray0[1] = (short) (byte)21;
      FileSystemHandling.shouldAllThrowIOExceptions();
      shortArray0[2] = (short) (byte) (-62);
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-79);
      shortArray0[5] = (short) (byte) (-66);
      deadReckoningParameters0.parameters = shortArray0;
      Vector3Float vector3Float1 = deadReckoningParameters0.getEntityAngularVelocity();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      vector3Float1.z = (float) (short)21;
      deadReckoningParameters0.marshal(dataOutputStream0);
      deadReckoningParameters0.equals(vector3Float1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-113);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      Vector3Float vector3Float0 = deadReckoningParameters0.getEntityLinearAcceleration();
      short[] shortArray0 = new short[0];
      deadReckoningParameters0.parameters = shortArray0;
      deadReckoningParameters0.getDeadReckoningAlgorithm();
      vector3Float0.x = (float) (byte)7;
      deadReckoningParameters0.getEntityLinearAcceleration();
      deadReckoningParameters0.equals(vector3Float0);
      deadReckoningParameters0.getEntityLinearAcceleration();
      deadReckoningParameters0.equalsImpl(vector3Float0);
      deadReckoningParameters0.getEntityAngularVelocity();
      deadReckoningParameters0.getEntityAngularVelocity();
      deadReckoningParameters0.getDeadReckoningAlgorithm();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'^`0,7y");
      deadReckoningParameters0.getDeadReckoningAlgorithm();
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        deadReckoningParameters0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      assertEquals((short)0, deadReckoningParameters0.getDeadReckoningAlgorithm());
      
      deadReckoningParameters0.equals(deadReckoningParameters0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("$Olxw7Ap03LlE3");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3211;
      objectOutputStream0.flush();
      shortArray0[1] = (short)5207;
      shortArray0[2] = (short) (-57);
      shortArray0[3] = (short)14;
      deadReckoningParameters0.setParameters(shortArray0);
      mockFileOutputStream0.flush();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("$POlxFwi7Ap03LlE3");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "$Olxw7Ap03LlE3");
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      deadReckoningParameters0.marshal(dataOutputStream0);
      deadReckoningParameters0.marshal(dataOutputStream0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-3345);
      shortArray0[1] = (short)3309;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)7;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)125;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      deadReckoningParameters0.unmarshal(dataInputStream0);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short) (-843);
      deadReckoningParameters0.parameters = shortArray0;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)38;
      deadReckoningParameters0.parameters = shortArray0;
      deadReckoningParameters0.getDeadReckoningAlgorithm();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)3093;
      shortArray0[4] = (short) (-1466);
      shortArray0[5] = (short)1424;
      shortArray0[6] = (short)3309;
      shortArray0[7] = (short) (-642);
      shortArray0[8] = (short)462;
      deadReckoningParameters0.setParameters(shortArray0);
      deadReckoningParameters0.getEntityAngularVelocity();
      DeadReckoningParameters deadReckoningParameters1 = new DeadReckoningParameters();
      // Undeclared exception!
      try { 
        deadReckoningParameters0.equals(deadReckoningParameters1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("edu.nps.moves.dis7.DeadReckoningParameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      MockFile mockFile0 = new MockFile("edu.nps.moves.dis7.Vector3Float", "edu.nps.moves.dis7.Vector3Float");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "edu.nps.moves.dis7.Vector3Float";
      PrintStream printStream0 = mockPrintStream0.printf("edu.nps.moves.dis7.Vector3Float", objectArray0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(printStream0);
      objectOutputStream0.flush();
      short[] shortArray0 = new short[0];
      deadReckoningParameters0.setParameters(shortArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      mockFileOutputStream0.flush();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      deadReckoningParameters0.marshal(dataOutputStream0);
      deadReckoningParameters0.getParameters();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2312);
      deadReckoningParameters0.unmarshal(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      deadReckoningParameters0.deadReckoningAlgorithm = (short) (-42);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DeadReckoningParameters deadReckoningParameters1 = new DeadReckoningParameters();
      deadReckoningParameters1.equalsImpl(deadReckoningParameters0);
      short[] shortArray0 = deadReckoningParameters1.parameters;
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      deadReckoningParameters0.entityAngularVelocity = null;
      // Undeclared exception!
      try { 
        deadReckoningParameters0.equalsImpl(deadReckoningParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.DeadReckoningParameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      deadReckoningParameters0.deadReckoningAlgorithm = (short) (-34);
      deadReckoningParameters0.setDeadReckoningAlgorithm((short) (-1));
      Vector3Float vector3Float0 = deadReckoningParameters0.entityAngularVelocity;
      vector3Float0.setZ((-2023.1555F));
      vector3Float0.setZ((short) (-1));
      deadReckoningParameters0.setEntityLinearAcceleration(vector3Float0);
      deadReckoningParameters0.getMarshalledSize();
      deadReckoningParameters0.getEntityAngularVelocity();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode(" A3BQ6&_%,~v.[QO");
      charset0.aliases();
      byteBuffer0.asFloatBuffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        deadReckoningParameters0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      short[] shortArray0 = new short[0];
      deadReckoningParameters0.setParameters(shortArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DeadReckoningParameters deadReckoningParameters1 = new DeadReckoningParameters();
      // Undeclared exception!
      try { 
        deadReckoningParameters0.equalsImpl(deadReckoningParameters1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("edu.nps.moves.dis7.DeadReckoningParameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DeadReckoningParameters deadReckoningParameters1 = new DeadReckoningParameters();
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)8;
      deadReckoningParameters1.setParameters(shortArray0);
      Vector3Float vector3Float0 = deadReckoningParameters0.entityLinearAcceleration;
      deadReckoningParameters1.setEntityAngularVelocity(vector3Float0);
      // Undeclared exception!
      try { 
        deadReckoningParameters1.equalsImpl(deadReckoningParameters0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("edu.nps.moves.dis7.DeadReckoningParameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      DeadReckoningParameters deadReckoningParameters1 = new DeadReckoningParameters();
      deadReckoningParameters1.entityLinearAcceleration = null;
      deadReckoningParameters0.equals(deadReckoningParameters1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      short[] shortArray0 = deadReckoningParameters0.parameters;
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      short[] shortArray0 = new short[0];
      deadReckoningParameters0.setParameters(shortArray0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2312);
      deadReckoningParameters0.marshal(byteBuffer0);
      short[] shortArray1 = deadReckoningParameters0.parameters;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      deadReckoningParameters0.marshal(dataOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      deadReckoningParameters0.unmarshal(dataInputStream0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      deadReckoningParameters0.marshal(dataOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      deadReckoningParameters0.unmarshal(dataInputStream0);
      assertEquals((short)0, deadReckoningParameters0.getDeadReckoningAlgorithm());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("K0owjSj3b+O?q^In[J^h");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)2;
      mockFileOutputStream0.write(byteArray0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-105);
      byteArray1[1] = (byte)13;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)70;
      byteArray1[4] = (byte)6;
      byteArray1[5] = (byte) (-92);
      byteArray1[6] = (byte)12;
      byteArray1[7] = (byte) (-8);
      byteArray1[8] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (byte)6, 5);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      deadReckoningParameters0.unmarshal(dataInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      Object object0 = new Object();
      boolean boolean0 = deadReckoningParameters0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      deadReckoningParameters0.marshal((DataOutputStream) null);
      short short0 = deadReckoningParameters0.getDeadReckoningAlgorithm();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      Vector3Float vector3Float0 = deadReckoningParameters0.getEntityAngularVelocity();
      assertEquals(0.0F, vector3Float0.getZ(), 0.01F);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(255);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      deadReckoningParameters0.unmarshal(dataInputStream0);
      assertEquals(40, deadReckoningParameters0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      short[] shortArray0 = new short[0];
      deadReckoningParameters0.setParameters(shortArray0);
      DeadReckoningParameters deadReckoningParameters1 = new DeadReckoningParameters();
      // Undeclared exception!
      try { 
        deadReckoningParameters0.equals(deadReckoningParameters1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("edu.nps.moves.dis7.DeadReckoningParameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      deadReckoningParameters0.deadReckoningAlgorithm = (short)773;
      deadReckoningParameters0.setDeadReckoningAlgorithm((short) (-646));
      deadReckoningParameters0.setEntityAngularVelocity((Vector3Float) null);
      Object object0 = new Object();
      deadReckoningParameters0.equals(object0);
      Charset.defaultCharset();
      Charset.defaultCharset();
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-646);
      shortArray0[1] = (short) (-646);
      shortArray0[2] = (short)2489;
      shortArray0[3] = (short)604;
      deadReckoningParameters0.setParameters(shortArray0);
      deadReckoningParameters0.getEntityLinearAcceleration();
      deadReckoningParameters0.getEntityAngularVelocity();
      assertEquals((short) (-646), deadReckoningParameters0.getDeadReckoningAlgorithm());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(535);
      deadReckoningParameters0.unmarshal(byteBuffer0);
      assertEquals(40, byteBuffer0.position());
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2501);
      shortArray0[2] = (short)2489;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)604;
      deadReckoningParameters0.setParameters(shortArray0);
      Vector3Float vector3Float0 = deadReckoningParameters0.getEntityLinearAcceleration();
      Vector3Float vector3Float1 = deadReckoningParameters0.getEntityAngularVelocity();
      assertNotSame(vector3Float1, vector3Float0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      Vector3Float vector3Float0 = deadReckoningParameters0.entityAngularVelocity;
      deadReckoningParameters0.setEntityAngularVelocity(vector3Float0);
      deadReckoningParameters0.entityAngularVelocity = vector3Float0;
      vector3Float0.setX((-1.0F));
      vector3Float0.setZ(0.0F);
      MockFile mockFile0 = new MockFile("e2m)hU([Dv->~m", "0=@");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      vector3Float0.marshal(dataOutputStream0);
      DeadReckoningParameters deadReckoningParameters1 = new DeadReckoningParameters();
      deadReckoningParameters0.equalsImpl(deadReckoningParameters1);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2550;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2305);
      shortArray0[4] = (short)15;
      shortArray0[5] = (short)49;
      shortArray0[6] = (short)426;
      deadReckoningParameters1.setParameters(shortArray0);
      assertNotSame(deadReckoningParameters1, deadReckoningParameters0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      deadReckoningParameters0.setEntityAngularVelocity((Vector3Float) null);
      deadReckoningParameters0.deadReckoningAlgorithm = (short)456;
      DeadReckoningParameters deadReckoningParameters1 = new DeadReckoningParameters();
      deadReckoningParameters1.setDeadReckoningAlgorithm((short)456);
      deadReckoningParameters1.equalsImpl(deadReckoningParameters0);
      // Undeclared exception!
      try { 
        deadReckoningParameters0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.DeadReckoningParameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(11);
      // Undeclared exception!
      try { 
        deadReckoningParameters0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      Object object0 = new Object();
      boolean boolean0 = deadReckoningParameters0.equals(object0);
      assertFalse(boolean0);
      
      Vector3Float vector3Float0 = deadReckoningParameters0.getEntityLinearAcceleration();
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-192);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      vector3Float0.unmarshal(dataInputStream0);
      shortArray0[1] = (short)4281;
      shortArray0[2] = (short)2430;
      shortArray0[3] = (short)15;
      shortArray0[4] = (short)0;
      deadReckoningParameters0.parameters = shortArray0;
      deadReckoningParameters0.setEntityLinearAcceleration(vector3Float0);
      Object object1 = new Object();
      boolean boolean1 = deadReckoningParameters0.equalsImpl(object1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2312);
      deadReckoningParameters0.marshal(byteBuffer0);
      assertEquals("java.nio.HeapByteBuffer[pos=40 lim=2312 cap=2312]", byteBuffer0.toString());
      assertEquals(40, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1857);
      deadReckoningParameters0.marshal(byteBuffer0);
      assertEquals(1817, byteBuffer0.remaining());
      
      short[] shortArray0 = deadReckoningParameters0.getParameters();
      assertEquals(15, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      deadReckoningParameters0.deadReckoningAlgorithm = (short)255;
      // Undeclared exception!
      try { 
        deadReckoningParameters0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.DeadReckoningParameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      boolean boolean0 = deadReckoningParameters0.equalsImpl(deadReckoningParameters0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      short short0 = (short)0;
      deadReckoningParameters0.deadReckoningAlgorithm = (short)0;
      DeadReckoningParameters deadReckoningParameters1 = new DeadReckoningParameters();
      deadReckoningParameters0.equalsImpl(deadReckoningParameters1);
      ByteBuffer byteBuffer0 = null;
      // Undeclared exception!
      try { 
        deadReckoningParameters0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.DeadReckoningParameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2312);
      deadReckoningParameters0.unmarshal(byteBuffer0);
      assertEquals(2272, byteBuffer0.remaining());
      assertEquals("java.nio.DirectByteBuffer[pos=40 lim=2312 cap=2312]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      deadReckoningParameters0.deadReckoningAlgorithm = (short)773;
      deadReckoningParameters0.setDeadReckoningAlgorithm((short) (-646));
      deadReckoningParameters0.setEntityAngularVelocity((Vector3Float) null);
      Object object0 = new Object();
      deadReckoningParameters0.equals(object0);
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("[t{_L/PL$~%`k$5bQ?(");
      // Undeclared exception!
      try { 
        deadReckoningParameters0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      DeadReckoningParameters deadReckoningParameters1 = new DeadReckoningParameters();
      boolean boolean0 = deadReckoningParameters0.equals(deadReckoningParameters1);
      assertTrue(boolean0);
      
      File file0 = MockFile.createTempFile("~LXL2,UIa=tA,f;/=Wi", "~LXL2,UIa=tA,f;/=Wi");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(mockFileInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(535);
      deadReckoningParameters0.unmarshal(byteBuffer0);
      assertEquals("java.nio.DirectByteBuffer[pos=40 lim=535 cap=535]", byteBuffer0.toString());
      
      short[] shortArray0 = new short[9];
      deadReckoningParameters0.setParameters(shortArray0);
      deadReckoningParameters0.getEntityLinearAcceleration();
      deadReckoningParameters0.getMarshalledSize();
      boolean boolean0 = deadReckoningParameters0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      Vector3Float vector3Float0 = deadReckoningParameters0.getEntityLinearAcceleration();
      assertEquals(0.0F, vector3Float0.getZ(), 0.01F);
      
      deadReckoningParameters0.setParameters((short[]) null);
      boolean boolean0 = deadReckoningParameters0.equals(vector3Float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      Vector3Float vector3Float0 = deadReckoningParameters0.entityLinearAcceleration;
      vector3Float0.y = 1128.5107F;
      deadReckoningParameters0.setEntityAngularVelocity(vector3Float0);
      Vector3Float vector3Float1 = deadReckoningParameters0.getEntityAngularVelocity();
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)700;
      shortArray0[1] = (short)0;
      deadReckoningParameters0.setParameters(shortArray0);
      int int0 = deadReckoningParameters0.getMarshalledSize();
      assertEquals(40, int0);
      
      deadReckoningParameters0.getEntityLinearAcceleration();
      Vector3Float vector3Float2 = deadReckoningParameters0.getEntityLinearAcceleration();
      assertSame(vector3Float2, vector3Float1);
      
      deadReckoningParameters0.getDeadReckoningAlgorithm();
      boolean boolean0 = deadReckoningParameters0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      short[] shortArray0 = deadReckoningParameters0.getParameters();
      assertEquals(15, shortArray0.length);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1264);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-5);
      byte byte0 = (byte) (-1);
      // Undeclared exception!
      try { 
        dataOutputStream0.writeBytes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",!M]t;?");
      deadReckoningParameters0.setEntityLinearAcceleration((Vector3Float) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      short[] shortArray0 = deadReckoningParameters0.parameters;
      // Undeclared exception!
      try { 
        deadReckoningParameters0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.DeadReckoningParameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      Object object0 = new Object();
      boolean boolean0 = deadReckoningParameters0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      int int0 = deadReckoningParameters0.getMarshalledSize();
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      short short0 = deadReckoningParameters0.getDeadReckoningAlgorithm();
      assertEquals((short)0, short0);
      
      Object object0 = new Object();
      deadReckoningParameters0.equalsImpl(object0);
      short short1 = (short)1;
      deadReckoningParameters0.setDeadReckoningAlgorithm((short)1);
      deadReckoningParameters0.setEntityAngularVelocity((Vector3Float) null);
      // Undeclared exception!
      try { 
        deadReckoningParameters0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.DeadReckoningParameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      deadReckoningParameters0.setDeadReckoningAlgorithm((short)9);
      assertEquals((short)9, deadReckoningParameters0.getDeadReckoningAlgorithm());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      DeadReckoningParameters deadReckoningParameters1 = new DeadReckoningParameters();
      assertTrue(deadReckoningParameters1.equals((Object)deadReckoningParameters0));
      
      deadReckoningParameters0.deadReckoningAlgorithm = (short) (-1466);
      deadReckoningParameters0.equalsImpl(deadReckoningParameters1);
      assertFalse(deadReckoningParameters1.equals((Object)deadReckoningParameters0));
      
      deadReckoningParameters0.getEntityAngularVelocity();
      assertFalse(deadReckoningParameters0.equals((Object)deadReckoningParameters1));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("K0owjSj3b+O?qn[J^h");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      deadReckoningParameters0.marshal(dataOutputStream0);
      assertEquals((short)0, deadReckoningParameters0.getDeadReckoningAlgorithm());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",!M]t;?");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      deadReckoningParameters0.marshal(dataOutputStream0);
      assertEquals(40, deadReckoningParameters0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      DeadReckoningParameters deadReckoningParameters1 = new DeadReckoningParameters();
      // Undeclared exception!
      try { 
        deadReckoningParameters0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.DeadReckoningParameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(9);
      // Undeclared exception!
      try { 
        deadReckoningParameters0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      Charset charset0 = Charset.defaultCharset();
      String string0 = "";
      Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      Vector3Float vector3Float0 = deadReckoningParameters0.getEntityAngularVelocity();
      deadReckoningParameters0.setEntityAngularVelocity(vector3Float0);
      byteBuffer0.asDoubleBuffer();
      // Undeclared exception!
      try { 
        deadReckoningParameters0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      Vector3Float vector3Float0 = deadReckoningParameters0.getEntityLinearAcceleration();
      deadReckoningParameters0.getDeadReckoningAlgorithm();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        vector3Float0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      Vector3Float vector3Float0 = new Vector3Float();
      deadReckoningParameters0.setEntityAngularVelocity(vector3Float0);
      short[] shortArray0 = deadReckoningParameters0.getParameters();
      assertEquals(15, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      Vector3Float vector3Float0 = new Vector3Float();
      deadReckoningParameters0.setEntityLinearAcceleration(vector3Float0);
      short short0 = deadReckoningParameters0.deadReckoningAlgorithm;
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      deadReckoningParameters0.setEntityAngularVelocity((Vector3Float) null);
      deadReckoningParameters0.setEntityLinearAcceleration((Vector3Float) null);
      deadReckoningParameters0.deadReckoningAlgorithm = (short) (-738);
      deadReckoningParameters0.setEntityAngularVelocity((Vector3Float) null);
      deadReckoningParameters0.setEntityLinearAcceleration((Vector3Float) null);
      assertEquals((short) (-738), deadReckoningParameters0.getDeadReckoningAlgorithm());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DeadReckoningParameters deadReckoningParameters0 = new DeadReckoningParameters();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, 4, (-1788));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }
}
