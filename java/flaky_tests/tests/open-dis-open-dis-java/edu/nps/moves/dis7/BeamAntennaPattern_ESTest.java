/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 11:21:25 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.BeamAntennaPattern;
import edu.nps.moves.dis7.EulerAngles;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeamAntennaPattern_ESTest extends BeamAntennaPattern_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      beamAntennaPattern1.setPadding3(3023L);
      boolean boolean0 = beamAntennaPattern1.equals(beamAntennaPattern0);
      assertEquals(3023L, beamAntennaPattern1.getPadding3());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setPhase((-3029.5F));
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      boolean boolean0 = beamAntennaPattern0.equalsImpl(beamAntennaPattern1);
      assertEquals((-3029.5F), beamAntennaPattern0.getPhase(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setEx(2083.9136F);
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      boolean boolean0 = beamAntennaPattern1.equalsImpl(beamAntennaPattern0);
      assertEquals(2083.9136F, beamAntennaPattern0.getEx(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      beamAntennaPattern0.setEz(895);
      boolean boolean0 = beamAntennaPattern1.equalsImpl(beamAntennaPattern0);
      assertEquals(895.0F, beamAntennaPattern0.getEz(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setPadding2(1);
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      boolean boolean0 = beamAntennaPattern1.equalsImpl(beamAntennaPattern0);
      assertFalse(boolean0);
      assertEquals(1, beamAntennaPattern0.getPadding2());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
      
      beamAntennaPattern0.padding1 = (short)18565;
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      boolean boolean0 = beamAntennaPattern0.equals(beamAntennaPattern1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      beamAntennaPattern1.setReferenceSystem((short)14061);
      boolean boolean0 = beamAntennaPattern0.equals(beamAntennaPattern1);
      assertEquals((short)14061, beamAntennaPattern1.getReferenceSystem());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      beamAntennaPattern0.setElevationBeamwidth(688.88F);
      boolean boolean0 = beamAntennaPattern0.equalsImpl(beamAntennaPattern1);
      assertEquals(688.88F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setAzimuthBeamwidth(25.531F);
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      boolean boolean0 = beamAntennaPattern1.equalsImpl(beamAntennaPattern0);
      assertEquals(25.531F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("edu.nps.9oves.dis7.BeamAntennaPattern");
      beamAntennaPattern0.ez = (float) (short)25956;
      // Undeclared exception!
      try { 
        beamAntennaPattern0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
      
      beamAntennaPattern0.padding1 = (short) (-1480);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(65535);
      beamAntennaPattern0.marshal(byteBuffer0);
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1689);
      beamAntennaPattern0.azimuthBeamwidth = (float) 1689;
      beamAntennaPattern0.marshal(byteBuffer0);
      assertEquals(0, beamAntennaPattern0.getPadding2());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setElevationBeamwidth(1896.0F);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1695);
      beamAntennaPattern0.marshal(byteBuffer0);
      assertEquals(1896.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
      
      beamAntennaPattern0.ez = (float) (short)0;
      beamAntennaPattern0.ez = (-1.0F);
      MockPrintStream mockPrintStream0 = new MockPrintStream("u86td7B");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      beamAntennaPattern0.marshal(dataOutputStream0);
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setReferenceSystem((short)10024);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      beamAntennaPattern0.marshal(dataOutputStream0);
      assertEquals((short)10024, beamAntennaPattern0.getReferenceSystem());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
      
      beamAntennaPattern0.setElevationBeamwidth((-1.0F));
      MockPrintStream mockPrintStream0 = new MockPrintStream("u86td7B");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      beamAntennaPattern0.marshal(dataOutputStream0);
      assertEquals((-1.0F), beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setPhase(1689.5527F);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      beamAntennaPattern0.marshal(dataOutputStream0);
      assertEquals(1689.5527F, beamAntennaPattern0.getPhase(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setAzimuthBeamwidth(1.0F);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      beamAntennaPattern0.marshal(dataOutputStream0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000?\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(1.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setPadding2((-1461));
      int int0 = beamAntennaPattern0.getMarshalledSize();
      assertEquals((-1461), beamAntennaPattern0.getPadding2());
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      assertEquals(0.0F, beamAntennaPattern0.getPhase(), 0.01F);
      assertEquals(0L, beamAntennaPattern0.getPadding3());
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEx(), 0.01F);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1779);
      beamAntennaPattern0.unmarshal(byteBuffer0);
      assertEquals(0, beamAntennaPattern0.getPadding2());
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
      assertEquals((short)0, beamAntennaPattern0.getReferenceSystem());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      assertEquals((short)0, beamAntennaPattern0.getReferenceSystem());
      
      beamAntennaPattern0.setReferenceSystem((short)1);
      short short0 = beamAntennaPattern0.getReferenceSystem();
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setPhase(1709.8608F);
      float float0 = beamAntennaPattern0.getPhase();
      assertEquals(1709.8608F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      assertEquals(0.0F, beamAntennaPattern0.getPhase(), 0.01F);
      
      beamAntennaPattern0.setPhase((-1.0F));
      float float0 = beamAntennaPattern0.getPhase();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setPadding3(308L);
      long long0 = beamAntennaPattern0.getPadding3();
      assertEquals(308L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.padding3 = (-712L);
      long long0 = beamAntennaPattern0.getPadding3();
      assertEquals((-712L), long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setPadding2(255);
      int int0 = beamAntennaPattern0.getPadding2();
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.padding2 = (-1);
      int int0 = beamAntennaPattern0.getPadding2();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setPadding1((short)5472);
      short short0 = beamAntennaPattern0.getPadding1();
      assertEquals((short)5472, short0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setPadding1((short) (-12040));
      short short0 = beamAntennaPattern0.getPadding1();
      assertEquals((short) (-12040), short0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
      
      beamAntennaPattern0.ez = 1.0F;
      float float0 = beamAntennaPattern0.getEz();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.ez = (float) (short) (-342);
      float float0 = beamAntennaPattern0.getEz();
      assertEquals((-342.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setEx(2083.9136F);
      float float0 = beamAntennaPattern0.getEx();
      assertEquals(2083.9136F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.ex = (-830.7221F);
      float float0 = beamAntennaPattern0.getEx();
      assertEquals((-830.7221F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
      
      beamAntennaPattern0.setElevationBeamwidth((-1.0F));
      float float0 = beamAntennaPattern0.getElevationBeamwidth();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setBeamDirection((EulerAngles) null);
      EulerAngles eulerAngles0 = beamAntennaPattern0.getBeamDirection();
      assertEquals(0.0F, beamAntennaPattern0.getEx(), 0.01F);
      assertNull(eulerAngles0);
      assertEquals((short)0, beamAntennaPattern0.getReferenceSystem());
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      assertEquals(0L, beamAntennaPattern0.getPadding3());
      assertEquals(0, beamAntennaPattern0.getPadding2());
      assertEquals(0.0F, beamAntennaPattern0.getPhase(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setAzimuthBeamwidth(1160.9867F);
      float float0 = beamAntennaPattern0.getAzimuthBeamwidth();
      assertEquals(1160.9867F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setAzimuthBeamwidth((-710.34F));
      float float0 = beamAntennaPattern0.getAzimuthBeamwidth();
      assertEquals((-710.34F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      boolean boolean0 = beamAntennaPattern0.equalsImpl(beamAntennaPattern0);
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
      assertTrue(boolean0);
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEx(), 0.01F);
      assertEquals((short)0, beamAntennaPattern0.getReferenceSystem());
      assertEquals(0.0F, beamAntennaPattern0.getPhase(), 0.01F);
      assertEquals(0L, beamAntennaPattern0.getPadding3());
      assertEquals(0, beamAntennaPattern0.getPadding2());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("edu.nps.9oves.dis7.BeamAntennaPattern");
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      // Undeclared exception!
      try { 
        beamAntennaPattern0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      // Undeclared exception!
      try { 
        beamAntennaPattern0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EulerAngles", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      beamAntennaPattern1.setPhase(28.736F);
      boolean boolean0 = beamAntennaPattern1.equalsImpl(beamAntennaPattern0);
      assertEquals(28.736F, beamAntennaPattern1.getPhase(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      assertEquals(0.0F, beamAntennaPattern0.getEx(), 0.01F);
      
      beamAntennaPattern0.ex = 915.8682F;
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      boolean boolean0 = beamAntennaPattern0.equalsImpl(beamAntennaPattern1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setReferenceSystem((short)1);
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      boolean boolean0 = beamAntennaPattern0.equalsImpl(beamAntennaPattern1);
      assertEquals((short)1, beamAntennaPattern0.getReferenceSystem());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
      
      beamAntennaPattern0.elevationBeamwidth = (-403.0F);
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      boolean boolean0 = beamAntennaPattern0.equalsImpl(beamAntennaPattern1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      
      beamAntennaPattern0.azimuthBeamwidth = 2145.9F;
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      boolean boolean0 = beamAntennaPattern0.equalsImpl(beamAntennaPattern1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      EulerAngles eulerAngles0 = new EulerAngles();
      beamAntennaPattern0.beamDirection = eulerAngles0;
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      assertTrue(beamAntennaPattern1.equals((Object)beamAntennaPattern0));
      
      eulerAngles0.psi = 2145.9F;
      boolean boolean0 = beamAntennaPattern1.equalsImpl(beamAntennaPattern0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      Object object0 = new Object();
      boolean boolean0 = beamAntennaPattern0.equalsImpl(object0);
      assertEquals(0.0F, beamAntennaPattern0.getPhase(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEx(), 0.01F);
      assertEquals((short)0, beamAntennaPattern0.getReferenceSystem());
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
      assertFalse(boolean0);
      assertEquals(0, beamAntennaPattern0.getPadding2());
      assertEquals(0L, beamAntennaPattern0.getPadding3());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      boolean boolean0 = beamAntennaPattern0.equals(beamAntennaPattern1);
      assertEquals(0.0F, beamAntennaPattern1.getEx(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern1.getPhase(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern1.getElevationBeamwidth(), 0.01F);
      assertEquals(0, beamAntennaPattern1.getPadding2());
      assertEquals(0L, beamAntennaPattern1.getPadding3());
      assertTrue(boolean0);
      assertEquals((short)0, beamAntennaPattern1.getReferenceSystem());
      assertEquals(0.0F, beamAntennaPattern1.getAzimuthBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern1.getEz(), 0.01F);
      assertEquals((short)0, beamAntennaPattern1.getPadding1());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      boolean boolean0 = beamAntennaPattern0.equals((Object) null);
      assertEquals((short)0, beamAntennaPattern0.getReferenceSystem());
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
      assertEquals(0, beamAntennaPattern0.getPadding2());
      assertEquals(0L, beamAntennaPattern0.getPadding3());
      assertFalse(boolean0);
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getPhase(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEx(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      boolean boolean0 = beamAntennaPattern0.equals(beamAntennaPattern0);
      assertEquals(0, beamAntennaPattern0.getPadding2());
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
      assertEquals((short)0, beamAntennaPattern0.getReferenceSystem());
      assertEquals(0L, beamAntennaPattern0.getPadding3());
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEx(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getPhase(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      Object object0 = new Object();
      boolean boolean0 = beamAntennaPattern0.equals(object0);
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEx(), 0.01F);
      assertEquals((short)0, beamAntennaPattern0.getReferenceSystem());
      assertEquals(0.0F, beamAntennaPattern0.getPhase(), 0.01F);
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0L, beamAntennaPattern0.getPadding3());
      assertEquals(0, beamAntennaPattern0.getPadding2());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      int int0 = beamAntennaPattern0.getPadding2();
      assertEquals(0.0F, beamAntennaPattern0.getEx(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getPhase(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
      assertEquals(0, int0);
      assertEquals(0L, beamAntennaPattern0.getPadding3());
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
      assertEquals((short)0, beamAntennaPattern0.getReferenceSystem());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setPadding3((-542L));
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      boolean boolean0 = beamAntennaPattern0.equalsImpl(beamAntennaPattern1);
      assertEquals((-542L), beamAntennaPattern0.getPadding3());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.getBeamDirection();
      assertEquals(0.0F, beamAntennaPattern0.getPhase(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEx(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
      assertEquals(0L, beamAntennaPattern0.getPadding3());
      assertEquals(0, beamAntennaPattern0.getPadding2());
      assertEquals((short)0, beamAntennaPattern0.getReferenceSystem());
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      float float0 = beamAntennaPattern0.getPhase();
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
      assertEquals(0L, beamAntennaPattern0.getPadding3());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
      assertEquals(0, beamAntennaPattern0.getPadding2());
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEx(), 0.01F);
      assertEquals((short)0, beamAntennaPattern0.getReferenceSystem());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setPhase(28.736F);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(814);
      beamAntennaPattern0.marshal(byteBuffer0);
      assertEquals(28.736F, beamAntennaPattern0.getPhase(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      short short0 = beamAntennaPattern0.getPadding1();
      assertEquals((short)0, beamAntennaPattern0.getReferenceSystem());
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
      assertEquals(0L, beamAntennaPattern0.getPadding3());
      assertEquals(0, beamAntennaPattern0.getPadding2());
      assertEquals(0.0F, beamAntennaPattern0.getPhase(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEx(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setPadding2(18565);
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      boolean boolean0 = beamAntennaPattern0.equalsImpl(beamAntennaPattern1);
      assertEquals(18565, beamAntennaPattern0.getPadding2());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      long long0 = beamAntennaPattern0.getPadding3();
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEx(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getPhase(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
      assertEquals(0L, long0);
      assertEquals(0, beamAntennaPattern0.getPadding2());
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
      assertEquals((short)0, beamAntennaPattern0.getReferenceSystem());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setElevationBeamwidth(688.88F);
      float float0 = beamAntennaPattern0.getElevationBeamwidth();
      assertEquals(688.88F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setPadding1((short) (-17232));
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      boolean boolean0 = beamAntennaPattern0.equalsImpl(beamAntennaPattern1);
      assertEquals((short) (-17232), beamAntennaPattern0.getPadding1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      short short0 = beamAntennaPattern0.getReferenceSystem();
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getPhase(), 0.01F);
      assertEquals((short)0, short0);
      assertEquals(0, beamAntennaPattern0.getPadding2());
      assertEquals(0L, beamAntennaPattern0.getPadding3());
      assertEquals(0.0F, beamAntennaPattern0.getEx(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      float float0 = beamAntennaPattern0.getElevationBeamwidth();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getPhase(), 0.01F);
      assertEquals((short)0, beamAntennaPattern0.getReferenceSystem());
      assertEquals(0L, beamAntennaPattern0.getPadding3());
      assertEquals(0.0F, beamAntennaPattern0.getEx(), 0.01F);
      assertEquals(0, beamAntennaPattern0.getPadding2());
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      float float0 = beamAntennaPattern0.getAzimuthBeamwidth();
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
      assertEquals((short)0, beamAntennaPattern0.getReferenceSystem());
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
      assertEquals(0L, beamAntennaPattern0.getPadding3());
      assertEquals(0, beamAntennaPattern0.getPadding2());
      assertEquals(0.0F, beamAntennaPattern0.getEx(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getPhase(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.marshal((DataOutputStream) null);
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
      assertEquals(0, beamAntennaPattern0.getPadding2());
      assertEquals((short)0, beamAntennaPattern0.getReferenceSystem());
      assertEquals(0L, beamAntennaPattern0.getPadding3());
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEx(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getPhase(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.setEz(1837.4F);
      BeamAntennaPattern beamAntennaPattern1 = new BeamAntennaPattern();
      boolean boolean0 = beamAntennaPattern0.equalsImpl(beamAntennaPattern1);
      assertEquals(1837.4F, beamAntennaPattern0.getEz(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      float float0 = beamAntennaPattern0.getEz();
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      assertEquals((short)0, beamAntennaPattern0.getReferenceSystem());
      assertEquals(0.0F, beamAntennaPattern0.getEx(), 0.01F);
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
      assertEquals(0L, beamAntennaPattern0.getPadding3());
      assertEquals(0, beamAntennaPattern0.getPadding2());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getPhase(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      // Undeclared exception!
      try { 
        beamAntennaPattern0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EulerAngles", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      float float0 = beamAntennaPattern0.getEx();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0L, beamAntennaPattern0.getPadding3());
      assertEquals(0.0F, beamAntennaPattern0.getPhase(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      assertEquals((short)0, beamAntennaPattern0.getReferenceSystem());
      assertEquals(0, beamAntennaPattern0.getPadding2());
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BeamAntennaPattern beamAntennaPattern0 = new BeamAntennaPattern();
      beamAntennaPattern0.unmarshal((DataInputStream) null);
      assertEquals(0.0F, beamAntennaPattern0.getPhase(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getAzimuthBeamwidth(), 0.01F);
      assertEquals(0L, beamAntennaPattern0.getPadding3());
      assertEquals((short)0, beamAntennaPattern0.getPadding1());
      assertEquals(0.0F, beamAntennaPattern0.getElevationBeamwidth(), 0.01F);
      assertEquals(0, beamAntennaPattern0.getPadding2());
      assertEquals(0.0F, beamAntennaPattern0.getEz(), 0.01F);
      assertEquals(0.0F, beamAntennaPattern0.getEx(), 0.01F);
      assertEquals((short)0, beamAntennaPattern0.getReferenceSystem());
  }
}
