/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 15:16:19 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.FixedDatum;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FixedDatum_ESTest extends FixedDatum_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      fixedDatum0.setFixedDatumValue(459L);
      FixedDatum fixedDatum1 = new FixedDatum();
      boolean boolean0 = fixedDatum0.equals(fixedDatum1);
      assertEquals(459L, fixedDatum0.getFixedDatumValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      fixedDatum0.setFixedDatumID((-1197L));
      FixedDatum fixedDatum1 = new FixedDatum();
      boolean boolean0 = fixedDatum0.equalsImpl(fixedDatum1);
      assertEquals((-1197L), fixedDatum0.getFixedDatumID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      fixedDatum0.setFixedDatumID((-1197L));
      byte[] byteArray0 = new byte[8];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      fixedDatum0.marshal(byteBuffer0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-5), (byte)83, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1197L), fixedDatum0.getFixedDatumID());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      fixedDatum0.fixedDatumID = (-174L);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      fixedDatum0.marshal(dataOutputStream0);
      assertEquals("\uFFFD\uFFFD\uFFFDR\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      fixedDatum0.unmarshal(dataInputStream0);
      assertEquals(0L, fixedDatum0.getFixedDatumID());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      fixedDatum0.setFixedDatumValue(209L);
      long long0 = fixedDatum0.getFixedDatumValue();
      assertEquals(209L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      fixedDatum0.setFixedDatumValue((-243L));
      long long0 = fixedDatum0.getFixedDatumValue();
      assertEquals((-243L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      fixedDatum0.fixedDatumID = 2048L;
      long long0 = fixedDatum0.getFixedDatumID();
      assertEquals(2048L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      fixedDatum0.setFixedDatumID((-1197L));
      long long0 = fixedDatum0.getFixedDatumID();
      assertEquals((-1197L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      boolean boolean0 = fixedDatum0.equalsImpl(fixedDatum0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      // Undeclared exception!
      try { 
        fixedDatum0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      // Undeclared exception!
      try { 
        fixedDatum0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.FixedDatum", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(460);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        fixedDatum0.marshal(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        fixedDatum0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      // Undeclared exception!
      try { 
        fixedDatum0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.FixedDatum", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      FixedDatum fixedDatum1 = new FixedDatum();
      fixedDatum0.setFixedDatumValue((-825L));
      boolean boolean0 = fixedDatum0.equalsImpl(fixedDatum1);
      assertEquals((-825L), fixedDatum0.getFixedDatumValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      FixedDatum fixedDatum1 = new FixedDatum();
      assertTrue(fixedDatum1.equals((Object)fixedDatum0));
      
      fixedDatum1.fixedDatumID = (-825L);
      boolean boolean0 = fixedDatum0.equalsImpl(fixedDatum1);
      assertFalse(fixedDatum1.equals((Object)fixedDatum0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      Object object0 = new Object();
      boolean boolean0 = fixedDatum0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      FixedDatum fixedDatum1 = new FixedDatum();
      boolean boolean0 = fixedDatum0.equals(fixedDatum1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      boolean boolean0 = fixedDatum0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      boolean boolean0 = fixedDatum0.equals(fixedDatum0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      Object object0 = new Object();
      boolean boolean0 = fixedDatum0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(460);
      fixedDatum0.unmarshal(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      int int0 = fixedDatum0.getMarshalledSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      long long0 = fixedDatum0.getFixedDatumValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      fixedDatum0.unmarshal((DataInputStream) null);
      assertEquals(0L, fixedDatum0.getFixedDatumValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      fixedDatum0.marshal((DataOutputStream) null);
      assertEquals(0L, fixedDatum0.getFixedDatumID());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FixedDatum fixedDatum0 = new FixedDatum();
      long long0 = fixedDatum0.getFixedDatumID();
      assertEquals(0L, long0);
  }
}
