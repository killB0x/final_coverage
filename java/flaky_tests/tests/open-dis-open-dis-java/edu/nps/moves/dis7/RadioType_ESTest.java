/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:17:57 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.RadioType;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RadioType_ESTest extends RadioType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.extra = (short)2081;
      RadioType radioType1 = new RadioType();
      boolean boolean0 = radioType0.equalsImpl(radioType1);
      assertFalse(boolean0);
      assertFalse(radioType1.equals((Object)radioType0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setSpecific((short) (-14));
      RadioType radioType1 = new RadioType();
      boolean boolean0 = radioType0.equals(radioType1);
      assertEquals((short) (-14), radioType0.getSpecific());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setCountry(3169);
      RadioType radioType1 = new RadioType();
      boolean boolean0 = radioType0.equals(radioType1);
      assertEquals(3169, radioType0.getCountry());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setDomain((short) (-3984));
      RadioType radioType1 = new RadioType();
      boolean boolean0 = radioType0.equalsImpl(radioType1);
      assertEquals((short) (-3984), radioType0.getDomain());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setEntityKind((short)1837);
      RadioType radioType1 = new RadioType();
      boolean boolean0 = radioType0.equalsImpl(radioType1);
      assertEquals((short)1837, radioType0.getEntityKind());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setExtra((short) (-4528));
      boolean boolean0 = radioType0.equalsImpl(radioType0);
      assertEquals((short) (-4528), radioType0.getExtra());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.specific = (short)1;
      boolean boolean0 = radioType0.equalsImpl(radioType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.category = (short)1730;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((short)1730);
      radioType0.marshal(byteBuffer0);
      assertTrue(byteBuffer0.hasArray());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setSubcategory((short) (-1));
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((short)1219);
      radioType0.marshal(byteBuffer0);
      assertEquals((short) (-1), radioType0.getSubcategory());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setSpecific((short)2768);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((short)2768);
      radioType0.marshal(byteBuffer0);
      assertEquals((short)2768, radioType0.getSpecific());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setDomain((short)2768);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((short)2768);
      radioType0.marshal(byteBuffer0);
      assertEquals((short)2768, radioType0.getDomain());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.entityKind = (short)2768;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(78);
      radioType0.marshal(byteBuffer0);
      assertEquals((short)0, radioType0.getCategory());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      radioType0.entityKind = (short)2768;
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      radioType0.marshal(dataOutputStream0);
      assertEquals("\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.domain = (short)714;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6-6+A");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      radioType0.marshal(dataOutputStream0);
      assertEquals((short)0, radioType0.getCategory());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      radioType0.setSubcategory((short)1934);
      radioType0.marshal(dataOutputStream0);
      assertEquals((short)1934, radioType0.getSubcategory());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      radioType0.specific = (short) (-1032);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      radioType0.marshal(dataOutputStream0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      radioType0.category = (short) (-1717);
      radioType0.marshal(dataOutputStream0);
      assertEquals("\u0000\u0000\u0000\u0000K\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setCountry((-1));
      int int0 = radioType0.getMarshalledSize();
      assertEquals((-1), radioType0.getCountry());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      byte[] byteArray0 = new byte[9];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      radioType0.unmarshal(byteBuffer0);
      assertEquals(0, radioType0.getCountry());
      assertEquals((short)0, radioType0.getDomain());
      assertEquals((short)0, radioType0.getExtra());
      assertEquals((short)0, radioType0.getEntityKind());
      assertEquals((short)0, radioType0.getSpecific());
      assertEquals((short)0, radioType0.getCategory());
      assertEquals((short)0, radioType0.getSubcategory());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      radioType0.unmarshal(dataInputStream0);
      assertEquals((short)0, radioType0.getCategory());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      radioType0.unmarshal(dataInputStream0);
      assertEquals(0, radioType0.getCountry());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6-6+A");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      dataOutputStream0.close();
      radioType0.marshal(dataOutputStream0);
      assertEquals(0, radioType0.getCountry());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setSubcategory((short)3246);
      short short0 = radioType0.getSubcategory();
      assertEquals((short)3246, short0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setSubcategory((short) (-1));
      short short0 = radioType0.getSubcategory();
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.specific = (short)1;
      short short0 = radioType0.getSpecific();
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setSpecific((short) (-644));
      short short0 = radioType0.getSpecific();
      assertEquals((short) (-644), short0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.extra = (short) (-644);
      short short0 = radioType0.getExtra();
      assertEquals((short) (-644), short0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setEntityKind((short)1837);
      short short0 = radioType0.getEntityKind();
      assertEquals((short)1837, short0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setEntityKind((short) (-2248));
      short short0 = radioType0.getEntityKind();
      assertEquals((short) (-2248), short0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setDomain((short) (-339));
      short short0 = radioType0.getDomain();
      assertEquals((short) (-339), short0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.country = 255;
      int int0 = radioType0.getCountry();
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setCountry((-767));
      int int0 = radioType0.getCountry();
      assertEquals((-767), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.category = (short)714;
      short short0 = radioType0.getCategory();
      assertEquals((short)714, short0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.category = (short) (-743);
      short short0 = radioType0.getCategory();
      assertEquals((short) (-743), short0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      // Undeclared exception!
      try { 
        radioType0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      // Undeclared exception!
      try { 
        radioType0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setSubcategory((short)1543);
      RadioType radioType1 = new RadioType();
      boolean boolean0 = radioType0.equalsImpl(radioType1);
      assertEquals((short)1543, radioType0.getSubcategory());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      RadioType radioType1 = new RadioType();
      radioType1.setExtra((short)2);
      boolean boolean0 = radioType0.equalsImpl(radioType1);
      assertEquals((short)2, radioType1.getExtra());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      RadioType radioType1 = new RadioType();
      radioType1.setSpecific((short) (-1717));
      boolean boolean0 = radioType0.equalsImpl(radioType1);
      assertEquals((short) (-1717), radioType1.getSpecific());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      RadioType radioType1 = new RadioType();
      assertTrue(radioType1.equals((Object)radioType0));
      
      radioType1.subcategory = (short)255;
      boolean boolean0 = radioType0.equals(radioType1);
      assertFalse(radioType1.equals((Object)radioType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.category = (short) (-1717);
      RadioType radioType1 = new RadioType();
      boolean boolean0 = radioType0.equalsImpl(radioType1);
      assertFalse(boolean0);
      assertFalse(radioType1.equals((Object)radioType0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.domain = (short)714;
      RadioType radioType1 = new RadioType();
      boolean boolean0 = radioType0.equalsImpl(radioType1);
      assertFalse(radioType1.equals((Object)radioType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setEntityKind((short) (-2248));
      RadioType radioType1 = new RadioType();
      boolean boolean0 = radioType0.equalsImpl(radioType1);
      assertEquals((short) (-2248), radioType0.getEntityKind());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      boolean boolean0 = radioType0.equalsImpl(byteArrayOutputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      Object object0 = new Object();
      boolean boolean0 = radioType0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      boolean boolean0 = radioType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      boolean boolean0 = radioType0.equals(radioType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setExtra((short)3169);
      short short0 = radioType0.getExtra();
      assertEquals((short)3169, short0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setCategory((short)3538);
      assertEquals((short)3538, radioType0.getCategory());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      // Undeclared exception!
      try { 
        radioType0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.RadioType", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      short short0 = radioType0.getSubcategory();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      // Undeclared exception!
      try { 
        radioType0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.RadioType", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      short short0 = radioType0.getCategory();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      short short0 = radioType0.getDomain();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      short short0 = radioType0.getEntityKind();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      short short0 = radioType0.getSpecific();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setCountry((-1));
      RadioType radioType1 = new RadioType();
      boolean boolean0 = radioType0.equalsImpl(radioType1);
      assertEquals((-1), radioType0.getCountry());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      int int0 = radioType0.getCountry();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      radioType0.setDomain((short)2768);
      short short0 = radioType0.getDomain();
      assertEquals((short)2768, short0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RadioType radioType0 = new RadioType();
      short short0 = radioType0.getExtra();
      assertEquals((short)0, short0);
  }
}
