/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 15:06:18 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.MinefieldIdentifier;
import edu.nps.moves.dis7.SimulationAddress;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.PipedInputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MinefieldIdentifier_ESTest extends MinefieldIdentifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      MinefieldIdentifier minefieldIdentifier1 = new MinefieldIdentifier();
      minefieldIdentifier1.setMinefieldNumber(1);
      boolean boolean0 = minefieldIdentifier0.equalsImpl(minefieldIdentifier1);
      assertEquals(1, minefieldIdentifier1.getMinefieldNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      minefieldIdentifier0.setMinefieldNumber(1);
      int int0 = minefieldIdentifier0.getMarshalledSize();
      assertEquals(1, minefieldIdentifier0.getMinefieldNumber());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      minefieldIdentifier0.unmarshal(dataInputStream0);
      assertEquals(6, minefieldIdentifier0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(628);
      minefieldIdentifier0.marshal(byteBuffer0);
      assertEquals(6, minefieldIdentifier0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      minefieldIdentifier0.setSimulationAddress((SimulationAddress) null);
      SimulationAddress simulationAddress0 = minefieldIdentifier0.getSimulationAddress();
      assertNull(simulationAddress0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)1;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      minefieldIdentifier0.unmarshal(byteBuffer0);
      minefieldIdentifier0.getSimulationAddress();
      assertEquals(0, minefieldIdentifier0.getMinefieldNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      SimulationAddress simulationAddress0 = minefieldIdentifier0.simulationAddress;
      simulationAddress0.site = (-2436);
      SimulationAddress simulationAddress1 = minefieldIdentifier0.getSimulationAddress();
      assertEquals(4, simulationAddress1.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      minefieldIdentifier0.unmarshal(byteBuffer0);
      minefieldIdentifier0.getSimulationAddress();
      assertEquals(0, minefieldIdentifier0.getMinefieldNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      SimulationAddress simulationAddress0 = new SimulationAddress();
      simulationAddress0.application = (-1);
      minefieldIdentifier0.simulationAddress = simulationAddress0;
      SimulationAddress simulationAddress1 = minefieldIdentifier0.getSimulationAddress();
      assertEquals(0, simulationAddress1.getSite());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      minefieldIdentifier0.setMinefieldNumber(6);
      int int0 = minefieldIdentifier0.getMinefieldNumber();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      minefieldIdentifier0.setMinefieldNumber((-161));
      int int0 = minefieldIdentifier0.getMinefieldNumber();
      assertEquals((-161), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      boolean boolean0 = minefieldIdentifier0.equalsImpl(minefieldIdentifier0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        minefieldIdentifier0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      // Undeclared exception!
      try { 
        minefieldIdentifier0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      minefieldIdentifier0.setSimulationAddress((SimulationAddress) null);
      // Undeclared exception!
      try { 
        minefieldIdentifier0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.MinefieldIdentifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      minefieldIdentifier0.setSimulationAddress((SimulationAddress) null);
      // Undeclared exception!
      try { 
        minefieldIdentifier0.equalsImpl(minefieldIdentifier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.MinefieldIdentifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      minefieldIdentifier0.minefieldNumber = 1854;
      MinefieldIdentifier minefieldIdentifier1 = new MinefieldIdentifier();
      boolean boolean0 = minefieldIdentifier0.equalsImpl(minefieldIdentifier1);
      assertFalse(boolean0);
      assertFalse(minefieldIdentifier1.equals((Object)minefieldIdentifier0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      SimulationAddress simulationAddress0 = new SimulationAddress();
      simulationAddress0.setSite(1854);
      minefieldIdentifier0.setSimulationAddress(simulationAddress0);
      MinefieldIdentifier minefieldIdentifier1 = new MinefieldIdentifier();
      boolean boolean0 = minefieldIdentifier0.equalsImpl(minefieldIdentifier1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1854);
      boolean boolean0 = minefieldIdentifier0.equalsImpl(byteArrayOutputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      MinefieldIdentifier minefieldIdentifier1 = new MinefieldIdentifier();
      boolean boolean0 = minefieldIdentifier1.equals(minefieldIdentifier0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      boolean boolean0 = minefieldIdentifier0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      boolean boolean0 = minefieldIdentifier0.equals(minefieldIdentifier0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(628);
      boolean boolean0 = minefieldIdentifier0.equals(byteBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      // Undeclared exception!
      try { 
        minefieldIdentifier0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.SimulationAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      minefieldIdentifier0.marshal((DataOutputStream) null);
      assertEquals(6, minefieldIdentifier0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      // Undeclared exception!
      try { 
        minefieldIdentifier0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.SimulationAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte)66);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      minefieldIdentifier0.unmarshal(dataInputStream0);
      assertEquals(0, minefieldIdentifier0.getMinefieldNumber());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MinefieldIdentifier minefieldIdentifier0 = new MinefieldIdentifier();
      int int0 = minefieldIdentifier0.getMinefieldNumber();
      assertEquals(0, int0);
  }
}
