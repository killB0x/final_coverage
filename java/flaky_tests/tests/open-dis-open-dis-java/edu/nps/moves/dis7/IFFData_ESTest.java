/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:04:22 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.IFFData;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.PushbackInputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IFFData_ESTest extends IFFData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      iFFData0.setRecordLength((-1404));
      IFFData iFFData1 = new IFFData();
      boolean boolean0 = iFFData0.equals(iFFData1);
      assertFalse(boolean0);
      assertFalse(iFFData1.equals((Object)iFFData0));
      assertEquals(6, iFFData1.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      IFFData iFFData1 = new IFFData();
      iFFData0.setRecordType((-2429L));
      boolean boolean0 = iFFData0.equals(iFFData1);
      assertEquals((-2429L), iFFData0.getRecordType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      byte[] byteArray0 = new byte[13];
      byteArray0[4] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      iFFData0.unmarshal(dataInputStream0);
      int int0 = iFFData0.getMarshalledSize();
      assertEquals(13318, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1265);
      iFFData0.unmarshal(byteBuffer0);
      assertEquals(6, byteBuffer0.position());
      assertEquals(6, iFFData0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      iFFData0.unmarshal((DataInputStream) null);
      assertEquals(0, iFFData0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]pD`Y@asnzDRY75y}", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      iFFData0.marshal(dataOutputStream0);
      assertEquals(0, iFFData0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      iFFData0.setRecordType(3775L);
      long long0 = iFFData0.getRecordType();
      assertEquals(3775L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      iFFData0.setRecordType((-1L));
      long long0 = iFFData0.getRecordType();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      byte[] byteArray0 = new byte[8];
      iFFData0.setIffData(byteArray0);
      int int0 = iFFData0.getRecordLength();
      assertEquals(14, iFFData0.getMarshalledSize());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      iFFData0.setIffData((byte[]) null);
      byte[] byteArray0 = iFFData0.getIffData();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      byte[] byteArray0 = new byte[8];
      iFFData0.setIffData(byteArray0);
      iFFData0.getIffData();
      assertEquals(8, iFFData0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      boolean boolean0 = iFFData0.equalsImpl(iFFData0);
      assertTrue(boolean0);
      assertEquals(6, iFFData0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      // Undeclared exception!
      try { 
        iFFData0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.IFFData", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        iFFData0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      iFFData0.setIffData((byte[]) null);
      // Undeclared exception!
      try { 
        iFFData0.getRecordLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.IFFData", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      iFFData0.iffData = null;
      // Undeclared exception!
      try { 
        iFFData0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.IFFData", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      IFFData iFFData1 = new IFFData();
      byte[] byteArray0 = new byte[8];
      iFFData1.setIffData(byteArray0);
      boolean boolean0 = iFFData0.equalsImpl(iFFData1);
      assertEquals(8, iFFData1.getRecordLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      iFFData0.setRecordLength(65535);
      IFFData iFFData1 = new IFFData();
      boolean boolean0 = iFFData0.equalsImpl(iFFData1);
      assertFalse(iFFData1.equals((Object)iFFData0));
      assertFalse(boolean0);
      assertEquals(6, iFFData1.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      IFFData iFFData1 = new IFFData();
      iFFData1.setRecordType((-1L));
      boolean boolean0 = iFFData0.equalsImpl(iFFData1);
      assertEquals((-1L), iFFData1.getRecordType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      Object object0 = new Object();
      boolean boolean0 = iFFData0.equalsImpl(object0);
      assertFalse(boolean0);
      assertEquals(0, iFFData0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      IFFData iFFData1 = new IFFData();
      boolean boolean0 = iFFData0.equals(iFFData1);
      assertTrue(boolean0);
      assertEquals(0, iFFData1.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      boolean boolean0 = iFFData0.equals((Object) null);
      assertEquals(6, iFFData0.getMarshalledSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      boolean boolean0 = iFFData0.equals(iFFData0);
      assertEquals(0, iFFData0.getRecordLength());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      byte[] byteArray0 = new byte[13];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      boolean boolean0 = iFFData0.equals(pushbackInputStream0);
      assertFalse(boolean0);
      assertEquals(6, iFFData0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      int int0 = iFFData0.getRecordLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        iFFData0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1843);
      iFFData0.marshal(byteBuffer0);
      assertEquals("java.nio.DirectByteBuffer[pos=6 lim=1843 cap=1843]", byteBuffer0.toString());
      assertEquals(0, iFFData0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      byte[] byteArray0 = iFFData0.getIffData();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IFFData iFFData0 = new IFFData();
      iFFData0.getRecordType();
      assertEquals(6, iFFData0.getMarshalledSize());
  }
}
