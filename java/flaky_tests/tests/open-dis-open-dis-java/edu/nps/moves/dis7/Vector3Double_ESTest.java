/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:25:02 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.Vector3Double;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.PipedOutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector3Double_ESTest extends Vector3Double_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      vector3Double0.setZ(3143.8324134720665);
      Vector3Double vector3Double1 = new Vector3Double();
      boolean boolean0 = vector3Double0.equalsImpl(vector3Double1);
      assertEquals(3143.8324134720665, vector3Double0.getZ(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      vector3Double0.setY((-1.0));
      Vector3Double vector3Double1 = new Vector3Double();
      boolean boolean0 = vector3Double0.equalsImpl(vector3Double1);
      assertEquals((-1.0), vector3Double0.getY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      vector3Double0.setZ(3143.8324134720665);
      boolean boolean0 = vector3Double0.equalsImpl(vector3Double0);
      assertEquals(3143.8324134720665, vector3Double0.getZ(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      vector3Double0.setX(3143.8324134720665);
      Vector3Double vector3Double1 = new Vector3Double();
      boolean boolean0 = vector3Double1.equalsImpl(vector3Double0);
      assertEquals(3143.8324134720665, vector3Double0.getX(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      vector3Double0.setX(3143.8324134720665);
      boolean boolean0 = vector3Double0.equalsImpl(vector3Double0);
      assertEquals(3143.8324134720665, vector3Double0.getX(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      vector3Double0.setX(34.0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(24);
      vector3Double0.marshal(byteBuffer0);
      assertEquals(34.0, vector3Double0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      vector3Double0.setY(1.0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2127);
      vector3Double0.marshal(byteBuffer0);
      assertEquals(1.0, vector3Double0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      MockFile mockFile0 = new MockFile("mKT_:Lu5J?LI: 'D[:");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      vector3Double0.setZ(99.854);
      vector3Double0.marshal(dataOutputStream0);
      assertEquals(99.854, vector3Double0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      vector3Double0.x = (-1.0);
      MockFile mockFile0 = new MockFile("mKT_:Lu5J?LI: 'D[:");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      vector3Double0.marshal(dataOutputStream0);
      assertEquals((-1.0), vector3Double0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((byte)122);
      vector3Double0.unmarshal(byteBuffer0);
      assertEquals(24, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      MockFile mockFile0 = new MockFile("mKT_:Lu5J?LI: 'D[:");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      vector3Double0.marshal(dataOutputStream0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      vector3Double0.unmarshal(dataInputStream0);
      assertEquals(0.0, vector3Double0.getY(), 0.01);
      assertEquals(0.0, vector3Double0.getX(), 0.01);
      assertEquals(0.0, vector3Double0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      vector3Double0.marshal(dataOutputStream0);
      assertEquals(24, vector3Double0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      vector3Double0.setZ(334.022);
      double double0 = vector3Double0.getZ();
      assertEquals(334.022, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      vector3Double0.setZ((-2344.594272402414));
      double double0 = vector3Double0.getZ();
      assertEquals((-2344.594272402414), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      vector3Double0.setY(1187.438343112);
      double double0 = vector3Double0.getY();
      assertEquals(1187.438343112, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      vector3Double0.setY((-497.464369));
      double double0 = vector3Double0.getY();
      assertEquals((-497.464369), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      vector3Double0.x = 1095.8761824;
      double double0 = vector3Double0.getX();
      assertEquals(1095.8761824, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      vector3Double0.x = (-1.0);
      double double0 = vector3Double0.getX();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      byte[] byteArray0 = new byte[9];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        vector3Double0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        vector3Double0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      Vector3Double vector3Double1 = new Vector3Double();
      vector3Double0.setZ(3143.8324134720665);
      boolean boolean0 = vector3Double1.equalsImpl(vector3Double0);
      assertEquals(3143.8324134720665, vector3Double0.getZ(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      Vector3Double vector3Double1 = new Vector3Double();
      vector3Double0.setY(22L);
      boolean boolean0 = vector3Double0.equalsImpl(vector3Double1);
      assertEquals(22.0, vector3Double0.getY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      vector3Double0.x = 315.067;
      Vector3Double vector3Double1 = new Vector3Double();
      boolean boolean0 = vector3Double0.equalsImpl(vector3Double1);
      assertFalse(boolean0);
      assertFalse(vector3Double1.equals((Object)vector3Double0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      boolean boolean0 = vector3Double0.equalsImpl(dataOutputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      Vector3Double vector3Double1 = new Vector3Double();
      boolean boolean0 = vector3Double0.equals(vector3Double1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      boolean boolean0 = vector3Double0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      boolean boolean0 = vector3Double0.equals(vector3Double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      boolean boolean0 = vector3Double0.equals(dataInputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      double double0 = vector3Double0.getZ();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      double double0 = vector3Double0.getY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      // Undeclared exception!
      try { 
        vector3Double0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.Vector3Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      // Undeclared exception!
      try { 
        vector3Double0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.Vector3Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      vector3Double0.unmarshal((DataInputStream) null);
      assertEquals(24, vector3Double0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      double double0 = vector3Double0.getX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3Double vector3Double0 = new Vector3Double();
      int int0 = vector3Double0.getMarshalledSize();
      assertEquals(24, int0);
  }
}
