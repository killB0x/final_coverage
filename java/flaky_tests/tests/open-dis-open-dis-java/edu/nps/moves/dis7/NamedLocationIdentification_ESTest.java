/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 15:11:53 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.NamedLocationIdentification;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamedLocationIdentification_ESTest extends NamedLocationIdentification_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      NamedLocationIdentification namedLocationIdentification1 = new NamedLocationIdentification();
      namedLocationIdentification1.setStationNumber(1152);
      boolean boolean0 = namedLocationIdentification0.equalsImpl(namedLocationIdentification1);
      assertEquals(1152, namedLocationIdentification1.getStationNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      namedLocationIdentification0.setStationName((-4226));
      boolean boolean0 = namedLocationIdentification0.equalsImpl(namedLocationIdentification0);
      assertEquals((-4226), namedLocationIdentification0.getStationName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      NamedLocationIdentification namedLocationIdentification1 = new NamedLocationIdentification();
      assertTrue(namedLocationIdentification1.equals((Object)namedLocationIdentification0));
      
      namedLocationIdentification1.stationName = 221;
      boolean boolean0 = namedLocationIdentification0.equalsImpl(namedLocationIdentification1);
      assertFalse(namedLocationIdentification1.equals((Object)namedLocationIdentification0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("rRz\"5vXaldYMR*N,");
      namedLocationIdentification0.stationName = 1;
      namedLocationIdentification0.marshal(byteBuffer0);
      assertEquals(0, byteBuffer0.arrayOffset());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      namedLocationIdentification0.stationName = (-700);
      namedLocationIdentification0.marshal(dataOutputStream0);
      assertEquals("\uFFFDD\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      namedLocationIdentification0.unmarshal(dataInputStream0);
      int int0 = namedLocationIdentification0.getMarshalledSize();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-128);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      namedLocationIdentification0.unmarshal(dataInputStream0);
      int int0 = namedLocationIdentification0.getMarshalledSize();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(495);
      namedLocationIdentification0.unmarshal(byteBuffer0);
      assertEquals(0, namedLocationIdentification0.getStationNumber());
      assertEquals(0, namedLocationIdentification0.getStationName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      namedLocationIdentification0.marshal((DataOutputStream) null);
      assertEquals(0, namedLocationIdentification0.getStationNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      namedLocationIdentification0.stationNumber = 2438;
      int int0 = namedLocationIdentification0.getStationNumber();
      assertEquals(2438, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      namedLocationIdentification0.stationNumber = (-592);
      int int0 = namedLocationIdentification0.getStationNumber();
      assertEquals((-592), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      namedLocationIdentification0.setStationName((-1185));
      int int0 = namedLocationIdentification0.getStationName();
      assertEquals((-1185), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      // Undeclared exception!
      try { 
        namedLocationIdentification0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.NamedLocationIdentification", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        namedLocationIdentification0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      namedLocationIdentification0.stationNumber = 636;
      NamedLocationIdentification namedLocationIdentification1 = new NamedLocationIdentification();
      boolean boolean0 = namedLocationIdentification0.equalsImpl(namedLocationIdentification1);
      assertFalse(boolean0);
      assertFalse(namedLocationIdentification1.equals((Object)namedLocationIdentification0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      NamedLocationIdentification namedLocationIdentification1 = new NamedLocationIdentification();
      namedLocationIdentification0.setStationName((-3605));
      boolean boolean0 = namedLocationIdentification1.equalsImpl(namedLocationIdentification0);
      assertEquals((-3605), namedLocationIdentification0.getStationName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      Object object0 = new Object();
      boolean boolean0 = namedLocationIdentification0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      Object object0 = new Object();
      boolean boolean0 = namedLocationIdentification0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      boolean boolean0 = namedLocationIdentification0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      boolean boolean0 = namedLocationIdentification0.equals(namedLocationIdentification0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      NamedLocationIdentification namedLocationIdentification1 = new NamedLocationIdentification();
      boolean boolean0 = namedLocationIdentification0.equals(namedLocationIdentification1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      // Undeclared exception!
      try { 
        namedLocationIdentification0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.NamedLocationIdentification", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      namedLocationIdentification0.unmarshal(dataInputStream0);
      assertEquals(0, namedLocationIdentification0.getStationNumber());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      int int0 = namedLocationIdentification0.getStationNumber();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      namedLocationIdentification0.setStationName(1);
      int int0 = namedLocationIdentification0.getStationName();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2);
      // Undeclared exception!
      try { 
        namedLocationIdentification0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NamedLocationIdentification namedLocationIdentification0 = new NamedLocationIdentification();
      int int0 = namedLocationIdentification0.getStationName();
      assertEquals(0, int0);
  }
}
