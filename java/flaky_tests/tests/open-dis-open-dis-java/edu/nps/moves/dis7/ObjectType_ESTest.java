/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 13:43:53 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.ObjectType;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.PipedInputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectType_ESTest extends ObjectType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      ObjectType objectType1 = new ObjectType();
      assertTrue(objectType1.equals((Object)objectType0));
      
      objectType1.subcategory = (short) (-7);
      boolean boolean0 = objectType1.equalsImpl(objectType0);
      assertFalse(objectType1.equals((Object)objectType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      ObjectType objectType1 = new ObjectType();
      objectType1.setCategory((short)1);
      boolean boolean0 = objectType0.equalsImpl(objectType1);
      assertEquals((short)1, objectType1.getCategory());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      ObjectType objectType1 = new ObjectType();
      assertTrue(objectType1.equals((Object)objectType0));
      
      objectType1.objectKind = (short)255;
      boolean boolean0 = objectType0.equalsImpl(objectType1);
      assertFalse(objectType1.equals((Object)objectType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      ObjectType objectType1 = new ObjectType();
      assertTrue(objectType1.equals((Object)objectType0));
      
      objectType0.domain = (short)1;
      boolean boolean0 = objectType1.equalsImpl(objectType0);
      assertFalse(objectType1.equals((Object)objectType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      objectType0.domain = (short)2655;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2056);
      objectType0.marshal(byteBuffer0);
      assertEquals((short)0, objectType0.getObjectKind());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      objectType0.setSubcategory((short) (-768));
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(326);
      objectType0.marshal(byteBuffer0);
      assertEquals((short) (-768), objectType0.getSubcategory());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(642);
      objectType0.setCategory((short) (-1));
      objectType0.marshal(byteBuffer0);
      assertEquals((short) (-1), objectType0.getCategory());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      objectType0.unmarshal(dataInputStream0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((byte)0);
      // Undeclared exception!
      try { 
        objectType0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      objectType0.objectKind = (short)1;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("2qmZcO6p&#", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      objectType0.marshal(dataOutputStream0);
      assertEquals((short)0, objectType0.getSubcategory());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      objectType0.setCategory((short)245);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      objectType0.marshal(dataOutputStream0);
      assertEquals((short)245, objectType0.getCategory());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      objectType0.setDomain((short)4775);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      objectType0.marshal(dataOutputStream0);
      assertEquals("\uFFFD\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals((short)4775, objectType0.getDomain());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(642);
      objectType0.unmarshal(byteBuffer0);
      assertEquals((short)0, objectType0.getObjectKind());
      assertEquals((short)0, objectType0.getCategory());
      assertEquals((short)0, objectType0.getDomain());
      assertEquals((short)0, objectType0.getSubcategory());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      objectType0.unmarshal(dataInputStream0);
      assertEquals((short)0, objectType0.getCategory());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      objectType0.unmarshal(dataInputStream0);
      short short0 = objectType0.getSubcategory();
      assertEquals((short)255, short0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      objectType0.subcategory = (short) (-7);
      short short0 = objectType0.getSubcategory();
      assertEquals((short) (-7), short0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-77);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      objectType0.unmarshal(dataInputStream0);
      short short0 = objectType0.getObjectKind();
      assertEquals((short)179, short0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      objectType0.objectKind = (short) (-1);
      short short0 = objectType0.getObjectKind();
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      objectType0.unmarshal(dataInputStream0);
      short short0 = objectType0.getDomain();
      assertEquals((short)18, short0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      objectType0.setDomain((short) (-1486));
      short short0 = objectType0.getDomain();
      assertEquals((short) (-1486), short0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      objectType0.setCategory((short)2371);
      short short0 = objectType0.getCategory();
      assertEquals((short)2371, short0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      objectType0.setCategory((short) (-1));
      short short0 = objectType0.getCategory();
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      boolean boolean0 = objectType0.equalsImpl(objectType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        objectType0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      // Undeclared exception!
      try { 
        objectType0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.ObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      ObjectType objectType1 = new ObjectType();
      assertTrue(objectType1.equals((Object)objectType0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      objectType0.unmarshal(dataInputStream0);
      boolean boolean0 = objectType0.equalsImpl(objectType1);
      assertFalse(objectType1.equals((Object)objectType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      ObjectType objectType1 = new ObjectType();
      assertTrue(objectType1.equals((Object)objectType0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-27);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      objectType0.unmarshal(dataInputStream0);
      boolean boolean0 = objectType0.equalsImpl(objectType1);
      assertFalse(objectType1.equals((Object)objectType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      ObjectType objectType1 = new ObjectType();
      assertTrue(objectType1.equals((Object)objectType0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-77);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      objectType0.unmarshal(dataInputStream0);
      boolean boolean0 = objectType0.equalsImpl(objectType1);
      assertFalse(objectType1.equals((Object)objectType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      ObjectType objectType1 = new ObjectType();
      assertTrue(objectType1.equals((Object)objectType0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      objectType0.unmarshal(dataInputStream0);
      boolean boolean0 = objectType0.equalsImpl(objectType1);
      assertFalse(objectType1.equals((Object)objectType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      boolean boolean0 = objectType0.equalsImpl((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      Object object0 = new Object();
      boolean boolean0 = objectType0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      boolean boolean0 = objectType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      boolean boolean0 = objectType0.equals(objectType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      ObjectType objectType1 = new ObjectType();
      boolean boolean0 = objectType1.equals(objectType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      objectType0.marshal((DataOutputStream) null);
      assertEquals((short)0, objectType0.getSubcategory());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      int int0 = objectType0.getMarshalledSize();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      short short0 = objectType0.getCategory();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      short short0 = objectType0.getDomain();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      // Undeclared exception!
      try { 
        objectType0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.ObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      short short0 = objectType0.getObjectKind();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      objectType0.setObjectKind((short) (-1613));
      assertEquals((short) (-1613), objectType0.getObjectKind());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      short short0 = objectType0.getSubcategory();
      assertEquals((short)0, short0);
  }
}
