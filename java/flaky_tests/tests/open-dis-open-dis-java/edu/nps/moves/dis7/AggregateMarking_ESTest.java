/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:48:16 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.AggregateMarking;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.SequenceInputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AggregateMarking_ESTest extends AggregateMarking_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      aggregateMarking0.setCharacterSet((short) (-2865));
      byte[] byteArray0 = new byte[6];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      aggregateMarking0.marshal(byteBuffer0);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((short) (-2865), aggregateMarking0.getCharacterSet());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      aggregateMarking0.setCharacters((short)255);
      File file0 = MockFile.createTempFile("OZ0jC=KIS`>`", "TYb!.r}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      aggregateMarking0.marshal(dataOutputStream0);
      assertEquals((short)255, aggregateMarking0.getCharacters());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(255);
      aggregateMarking0.unmarshal(byteBuffer0);
      assertEquals((short)0, aggregateMarking0.getCharacterSet());
      assertEquals((short)0, aggregateMarking0.getCharacters());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      aggregateMarking0.unmarshal(dataInputStream0);
      assertEquals((short)0, aggregateMarking0.getCharacters());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      aggregateMarking0.characters = (short)2118;
      short short0 = aggregateMarking0.getCharacters();
      assertEquals((short)2118, short0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      aggregateMarking0.setCharacters((byte) (-17));
      short short0 = aggregateMarking0.getCharacters();
      assertEquals((short) (-17), short0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      aggregateMarking0.setCharacterSet((short)392);
      short short0 = aggregateMarking0.getCharacterSet();
      assertEquals((short)392, short0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        aggregateMarking0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((short)0);
      // Undeclared exception!
      try { 
        aggregateMarking0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      // Undeclared exception!
      try { 
        aggregateMarking0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.AggregateMarking", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      aggregateMarking0.characters = (short) (-545);
      AggregateMarking aggregateMarking1 = new AggregateMarking();
      boolean boolean0 = aggregateMarking0.equalsImpl(aggregateMarking1);
      assertFalse(aggregateMarking1.equals((Object)aggregateMarking0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      aggregateMarking0.characterSet = (short)2777;
      AggregateMarking aggregateMarking1 = new AggregateMarking();
      boolean boolean0 = aggregateMarking0.equalsImpl(aggregateMarking1);
      assertFalse(aggregateMarking1.equals((Object)aggregateMarking0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      boolean boolean0 = aggregateMarking0.equalsImpl(aggregateMarking0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      AggregateMarking aggregateMarking1 = new AggregateMarking();
      aggregateMarking1.setCharacters((short) (-1));
      boolean boolean0 = aggregateMarking0.equals(aggregateMarking1);
      assertEquals((short) (-1), aggregateMarking1.getCharacters());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      AggregateMarking aggregateMarking1 = new AggregateMarking();
      aggregateMarking1.setCharacterSet((short) (-1));
      boolean boolean0 = aggregateMarking1.equals(aggregateMarking0);
      assertEquals((short) (-1), aggregateMarking1.getCharacterSet());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      boolean boolean0 = aggregateMarking0.equalsImpl(mockFileInputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      AggregateMarking aggregateMarking1 = new AggregateMarking();
      boolean boolean0 = aggregateMarking0.equals(aggregateMarking1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      boolean boolean0 = aggregateMarking0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      boolean boolean0 = aggregateMarking0.equals(aggregateMarking0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      boolean boolean0 = aggregateMarking0.equals(dataInputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      aggregateMarking0.marshal((DataOutputStream) null);
      assertEquals((short)0, aggregateMarking0.getCharacterSet());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      aggregateMarking0.setCharacterSet((short) (-2865));
      short short0 = aggregateMarking0.getCharacterSet();
      assertEquals((short) (-2865), short0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      short short0 = aggregateMarking0.getCharacterSet();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      int int0 = aggregateMarking0.getMarshalledSize();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      // Undeclared exception!
      try { 
        aggregateMarking0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.AggregateMarking", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      short short0 = aggregateMarking0.getCharacters();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AggregateMarking aggregateMarking0 = new AggregateMarking();
      aggregateMarking0.unmarshal((DataInputStream) null);
      assertEquals((short)0, aggregateMarking0.getCharacterSet());
  }
}
