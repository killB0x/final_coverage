/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:32:15 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.EntityType;
import edu.nps.moves.dis7.ExpendableReload;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExpendableReload_ESTest extends ExpendableReload_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      ExpendableReload expendableReload1 = new ExpendableReload();
      expendableReload0.setMaximumQuantityReloadTime((-617L));
      boolean boolean0 = expendableReload0.equals(expendableReload1);
      assertEquals((-617L), expendableReload0.getMaximumQuantityReloadTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      ExpendableReload expendableReload1 = new ExpendableReload();
      expendableReload0.setStandardQuantityReloadTime(656L);
      boolean boolean0 = expendableReload0.equalsImpl(expendableReload1);
      assertEquals(656L, expendableReload0.getStandardQuantityReloadTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.maximumQuantity = 325;
      ExpendableReload expendableReload1 = new ExpendableReload();
      boolean boolean0 = expendableReload1.equals(expendableReload0);
      assertFalse(expendableReload0.equals((Object)expendableReload1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.setStandardQuantity(627);
      ExpendableReload expendableReload1 = new ExpendableReload();
      boolean boolean0 = expendableReload0.equals(expendableReload1);
      assertEquals(627, expendableReload0.getStandardQuantity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      ExpendableReload expendableReload1 = new ExpendableReload();
      expendableReload1.setStation(325);
      boolean boolean0 = expendableReload0.equalsImpl(expendableReload1);
      assertEquals(325L, expendableReload1.getStation());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.station = 471L;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3983);
      expendableReload0.marshal(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.maximumQuantity = 325;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("T8 ~q{ZPSS)lga`eI");
      // Undeclared exception!
      try { 
        expendableReload0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.setMaximumQuantityReloadTime(325);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("T8 ~q{ZPSS)lga`eI");
      // Undeclared exception!
      try { 
        expendableReload0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(325);
      expendableReload0.setStandardQuantityReloadTime(325);
      expendableReload0.marshal(byteBuffer0);
      assertEquals(325L, expendableReload0.getStandardQuantityReloadTime());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      MockPrintStream mockPrintStream0 = new MockPrintStream("edu.nps.moves.dis7.EntityType");
      expendableReload0.setStandardQuantityReloadTime((-1488L));
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      expendableReload0.marshal(dataOutputStream0);
      assertEquals((-1488L), expendableReload0.getStandardQuantityReloadTime());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.setMaximumQuantityReloadTime(325);
      MockFile mockFile0 = new MockFile("zeFM@9'T4mLhx/]VW%");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      expendableReload0.marshal(dataOutputStream0);
      assertEquals(325L, expendableReload0.getMaximumQuantityReloadTime());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.setStandardQuantityReloadTime(2875L);
      expendableReload0.marshal((DataOutputStream) null);
      assertEquals(2875L, expendableReload0.getStandardQuantityReloadTime());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.setMaximumQuantity(1497);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("edu.nps.moves.dis7.EntityType");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      expendableReload0.marshal(dataOutputStream0);
      assertEquals(1497, expendableReload0.getMaximumQuantity());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.standardQuantity = (-2308);
      int int0 = expendableReload0.getMarshalledSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.maximumQuantity = (-133);
      int int0 = expendableReload0.getMarshalledSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(943);
      expendableReload0.unmarshal(byteBuffer0);
      assertEquals(0, expendableReload0.getStandardQuantity());
      assertEquals(0, expendableReload0.getMaximumQuantity());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.setStation((-1L));
      long long0 = expendableReload0.getStation();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.setStandardQuantityReloadTime(325);
      long long0 = expendableReload0.getStandardQuantityReloadTime();
      assertEquals(325L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.setStandardQuantityReloadTime((-617L));
      long long0 = expendableReload0.getStandardQuantityReloadTime();
      assertEquals((-617L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.standardQuantity = (-2308);
      int int0 = expendableReload0.getStandardQuantity();
      assertEquals((-2308), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.maximumQuantityReloadTime = 1456L;
      long long0 = expendableReload0.getMaximumQuantityReloadTime();
      assertEquals(1456L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.maximumQuantityReloadTime = (-3257L);
      long long0 = expendableReload0.getMaximumQuantityReloadTime();
      assertEquals((-3257L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.maximumQuantity = 325;
      int int0 = expendableReload0.getMaximumQuantity();
      assertEquals(325, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.maximumQuantity = (-133);
      int int0 = expendableReload0.getMaximumQuantity();
      assertEquals((-133), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.expendable = null;
      EntityType entityType0 = expendableReload0.getExpendable();
      assertNull(entityType0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      EntityType entityType0 = expendableReload0.expendable;
      entityType0.specific = (short)2447;
      EntityType entityType1 = expendableReload0.getExpendable();
      assertEquals(0, entityType1.getCountry());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      EntityType entityType0 = expendableReload0.expendable;
      entityType0.setExtra((short)31762);
      EntityType entityType1 = expendableReload0.getExpendable();
      assertEquals((short)0, entityType1.getCategory());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      EntityType entityType0 = new EntityType();
      entityType0.setEntityKind((short)2);
      expendableReload0.setExpendable(entityType0);
      EntityType entityType1 = expendableReload0.getExpendable();
      assertEquals((short)2, entityType1.getEntityKind());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      EntityType entityType0 = new EntityType();
      entityType0.domain = (short)2;
      expendableReload0.setExpendable(entityType0);
      EntityType entityType1 = expendableReload0.getExpendable();
      assertEquals((short)2, entityType1.getDomain());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      EntityType entityType0 = expendableReload0.expendable;
      entityType0.setDomain((short) (-1934));
      EntityType entityType1 = expendableReload0.getExpendable();
      assertSame(entityType1, entityType0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      EntityType entityType0 = new EntityType();
      entityType0.country = (int) (short)31762;
      expendableReload0.setExpendable(entityType0);
      EntityType entityType1 = expendableReload0.getExpendable();
      assertEquals(31762, entityType1.getCountry());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      EntityType entityType0 = new EntityType();
      entityType0.category = (short)4;
      expendableReload0.setExpendable(entityType0);
      EntityType entityType1 = expendableReload0.getExpendable();
      assertEquals((short)4, entityType1.getCategory());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      boolean boolean0 = expendableReload0.equalsImpl(expendableReload0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      // Undeclared exception!
      try { 
        expendableReload0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EntityType", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      // Undeclared exception!
      try { 
        expendableReload0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EntityType", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.expendable = null;
      // Undeclared exception!
      try { 
        expendableReload0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.ExpendableReload", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.expendable = null;
      // Undeclared exception!
      try { 
        expendableReload0.equalsImpl(expendableReload0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.ExpendableReload", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      ExpendableReload expendableReload1 = new ExpendableReload();
      expendableReload1.setStation(325);
      boolean boolean0 = expendableReload1.equalsImpl(expendableReload0);
      assertEquals(325L, expendableReload1.getStation());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      ExpendableReload expendableReload1 = new ExpendableReload();
      expendableReload0.setMaximumQuantityReloadTime(325);
      boolean boolean0 = expendableReload0.equalsImpl(expendableReload1);
      assertEquals(325L, expendableReload0.getMaximumQuantityReloadTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.standardQuantityReloadTime = (-3459L);
      ExpendableReload expendableReload1 = new ExpendableReload();
      boolean boolean0 = expendableReload0.equalsImpl(expendableReload1);
      assertFalse(expendableReload1.equals((Object)expendableReload0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.maximumQuantity = 325;
      ExpendableReload expendableReload1 = new ExpendableReload();
      boolean boolean0 = expendableReload0.equalsImpl(expendableReload1);
      assertFalse(boolean0);
      assertFalse(expendableReload1.equals((Object)expendableReload0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      ExpendableReload expendableReload1 = new ExpendableReload();
      expendableReload1.setStandardQuantity(313);
      boolean boolean0 = expendableReload0.equalsImpl(expendableReload1);
      assertEquals(313, expendableReload1.getStandardQuantity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      ExpendableReload expendableReload1 = new ExpendableReload();
      assertTrue(expendableReload1.equals((Object)expendableReload0));
      
      expendableReload1.setExpendable((EntityType) null);
      boolean boolean0 = expendableReload0.equalsImpl(expendableReload1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      Object object0 = new Object();
      boolean boolean0 = expendableReload0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      ExpendableReload expendableReload1 = new ExpendableReload();
      boolean boolean0 = expendableReload0.equals(expendableReload1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      boolean boolean0 = expendableReload0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      boolean boolean0 = expendableReload0.equals(expendableReload0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      boolean boolean0 = expendableReload0.equals("^n*h `jI*tN9'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      long long0 = expendableReload0.getMaximumQuantityReloadTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      int int0 = expendableReload0.getStandardQuantity();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.setStandardQuantity(877);
      int int0 = expendableReload0.getStandardQuantity();
      assertEquals(877, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      int int0 = expendableReload0.getMaximumQuantity();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      long long0 = expendableReload0.getStandardQuantityReloadTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      EntityType entityType0 = expendableReload0.getExpendable();
      entityType0.setSubcategory((short)4404);
      EntityType entityType1 = expendableReload0.getExpendable();
      assertEquals((short)0, entityType1.getDomain());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      // Undeclared exception!
      try { 
        expendableReload0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      long long0 = expendableReload0.getStation();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.setStation(325);
      long long0 = expendableReload0.getStation();
      assertEquals(325L, long0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ExpendableReload expendableReload0 = new ExpendableReload();
      expendableReload0.unmarshal((DataInputStream) null);
      assertEquals(0L, expendableReload0.getStation());
  }
}
