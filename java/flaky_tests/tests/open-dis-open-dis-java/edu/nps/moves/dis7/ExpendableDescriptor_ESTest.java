/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 15:23:18 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.EntityType;
import edu.nps.moves.dis7.ExpendableDescriptor;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExpendableDescriptor_ESTest extends ExpendableDescriptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      expendableDescriptor0.setPadding(1945L);
      ExpendableDescriptor expendableDescriptor1 = new ExpendableDescriptor();
      boolean boolean0 = expendableDescriptor1.equals(expendableDescriptor0);
      assertEquals(1945L, expendableDescriptor0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 2021161080);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      expendableDescriptor0.unmarshal(dataInputStream0);
      assertEquals(16, expendableDescriptor0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1076);
      expendableDescriptor0.marshal(byteBuffer0);
      assertEquals(0L, expendableDescriptor0.getPadding());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      expendableDescriptor0.marshal((DataOutputStream) null);
      assertEquals(0L, expendableDescriptor0.getPadding());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      assertEquals(0L, expendableDescriptor0.getPadding());
      
      expendableDescriptor0.padding = 1L;
      long long0 = expendableDescriptor0.getPadding();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      expendableDescriptor0.padding = (-1006L);
      long long0 = expendableDescriptor0.getPadding();
      assertEquals((-1006L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      expendableDescriptor0.expendableType = null;
      expendableDescriptor0.getExpendableType();
      assertEquals(0L, expendableDescriptor0.getPadding());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      EntityType entityType0 = expendableDescriptor0.expendableType;
      entityType0.subcategory = (short) (-1);
      expendableDescriptor0.getExpendableType();
      assertEquals(0L, expendableDescriptor0.getPadding());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      EntityType entityType0 = expendableDescriptor0.getExpendableType();
      entityType0.specific = (short) (-1);
      expendableDescriptor0.getExpendableType();
      assertEquals(0L, expendableDescriptor0.getPadding());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      EntityType entityType0 = expendableDescriptor0.getExpendableType();
      entityType0.extra = (short) (-43);
      expendableDescriptor0.getExpendableType();
      assertEquals(0L, expendableDescriptor0.getPadding());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      EntityType entityType0 = expendableDescriptor0.getExpendableType();
      entityType0.setEntityKind((short) (-4664));
      expendableDescriptor0.getExpendableType();
      assertEquals(0L, expendableDescriptor0.getPadding());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      EntityType entityType0 = expendableDescriptor0.getExpendableType();
      entityType0.domain = (short) (-755);
      expendableDescriptor0.getExpendableType();
      assertEquals(0L, expendableDescriptor0.getPadding());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      EntityType entityType0 = new EntityType();
      entityType0.setCountry((-639));
      expendableDescriptor0.expendableType = entityType0;
      expendableDescriptor0.getExpendableType();
      assertEquals(0L, expendableDescriptor0.getPadding());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      EntityType entityType0 = new EntityType();
      entityType0.category = (short) (-1);
      expendableDescriptor0.setExpendableType(entityType0);
      EntityType entityType1 = expendableDescriptor0.getExpendableType();
      assertEquals((short) (-1), entityType1.getCategory());
      assertEquals(0L, expendableDescriptor0.getPadding());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      boolean boolean0 = expendableDescriptor0.equalsImpl(expendableDescriptor0);
      assertEquals(0L, expendableDescriptor0.getPadding());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        expendableDescriptor0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      // Undeclared exception!
      try { 
        expendableDescriptor0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EntityType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      // Undeclared exception!
      try { 
        expendableDescriptor0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EntityType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      expendableDescriptor0.setExpendableType((EntityType) null);
      // Undeclared exception!
      try { 
        expendableDescriptor0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.ExpendableDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      expendableDescriptor0.setPadding(16);
      ExpendableDescriptor expendableDescriptor1 = new ExpendableDescriptor();
      boolean boolean0 = expendableDescriptor0.equalsImpl(expendableDescriptor1);
      assertEquals(16L, expendableDescriptor0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      EntityType entityType0 = expendableDescriptor0.getExpendableType();
      ExpendableDescriptor expendableDescriptor1 = new ExpendableDescriptor();
      assertTrue(expendableDescriptor1.equals((Object)expendableDescriptor0));
      
      entityType0.setEntityKind((short)712);
      boolean boolean0 = expendableDescriptor0.equalsImpl(expendableDescriptor1);
      assertFalse(expendableDescriptor1.equals((Object)expendableDescriptor0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      EntityType entityType0 = expendableDescriptor0.getExpendableType();
      boolean boolean0 = expendableDescriptor0.equalsImpl(entityType0);
      assertEquals(0L, expendableDescriptor0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      Object object0 = new Object();
      boolean boolean0 = expendableDescriptor0.equals(object0);
      assertEquals(0L, expendableDescriptor0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      boolean boolean0 = expendableDescriptor0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0L, expendableDescriptor0.getPadding());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      boolean boolean0 = expendableDescriptor0.equals(expendableDescriptor0);
      assertTrue(boolean0);
      assertEquals(0L, expendableDescriptor0.getPadding());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      expendableDescriptor0.unmarshal((DataInputStream) null);
      assertEquals(0L, expendableDescriptor0.getPadding());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      int int0 = expendableDescriptor0.getMarshalledSize();
      assertEquals(16, int0);
      assertEquals(0L, expendableDescriptor0.getPadding());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("edu.nps.moves.dis7.ExpendableDescriptor");
      expendableDescriptor0.unmarshal(byteBuffer0);
      EntityType entityType0 = expendableDescriptor0.getExpendableType();
      assertEquals(29998, entityType0.getCountry());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        expendableDescriptor0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ExpendableDescriptor expendableDescriptor0 = new ExpendableDescriptor();
      long long0 = expendableDescriptor0.getPadding();
      assertEquals(0L, long0);
  }
}
