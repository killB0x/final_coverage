/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 10:36:11 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.DirectedEnergyPrecisionAimpoint;
import edu.nps.moves.dis7.EntityID;
import edu.nps.moves.dis7.Vector3Double;
import edu.nps.moves.dis7.Vector3Float;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.SequenceInputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirectedEnergyPrecisionAimpoint_ESTest extends DirectedEnergyPrecisionAimpoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint1 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint1.setBeamSpotType((short)106);
      boolean boolean0 = directedEnergyPrecisionAimpoint1.equalsImpl(directedEnergyPrecisionAimpoint0);
      assertEquals((short)106, directedEnergyPrecisionAimpoint1.getBeamSpotType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      
      directedEnergyPrecisionAimpoint0.targetComponentID = (short)18792;
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint1 = new DirectedEnergyPrecisionAimpoint();
      boolean boolean0 = directedEnergyPrecisionAimpoint0.equalsImpl(directedEnergyPrecisionAimpoint1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      
      directedEnergyPrecisionAimpoint0.recordLength = (-1);
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint1 = new DirectedEnergyPrecisionAimpoint();
      boolean boolean0 = directedEnergyPrecisionAimpoint0.equalsImpl(directedEnergyPrecisionAimpoint1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint1 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint1.setRecordType(571);
      boolean boolean0 = directedEnergyPrecisionAimpoint0.equalsImpl(directedEnergyPrecisionAimpoint1);
      assertEquals(571L, directedEnergyPrecisionAimpoint1.getRecordType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.beamSpotCrossSectionOrientationAngle = 1263.0068F;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(88);
      // Undeclared exception!
      try { 
        directedEnergyPrecisionAimpoint0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.setBeamSpotCrossSectionSemiMajorAxis((-1418.5576F));
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((short)2180);
      directedEnergyPrecisionAimpoint0.marshal(byteBuffer0);
      assertEquals((-1418.5576F), directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.setBeamSpotCrossSectionSemiMinorAxis(2756);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2756);
      directedEnergyPrecisionAimpoint0.marshal(byteBuffer0);
      assertEquals(2756.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.setTargetComponentID((short)1070);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2756);
      directedEnergyPrecisionAimpoint0.marshal(byteBuffer0);
      assertEquals((short)1070, directedEnergyPrecisionAimpoint0.getTargetComponentID());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.setBeamSpotCrossSectionOrientationAngle(963.25F);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      directedEnergyPrecisionAimpoint0.marshal(dataOutputStream0);
      assertEquals("\u0000\u0000\u000F\uFFFD\u0000X\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Dp\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(963.25F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("edu.nps.moves.dis7.Vector3Float");
      directedEnergyPrecisionAimpoint0.beamSpotCrossSectionSemiMajorAxis = (-1.07374182E9F);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      directedEnergyPrecisionAimpoint0.marshal(dataOutputStream0);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      
      directedEnergyPrecisionAimpoint0.beamSpotType = (short) (-1712);
      MockPrintStream mockPrintStream0 = new MockPrintStream("edu.nps.moves.dis7.Vector3FlLat");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      directedEnergyPrecisionAimpoint0.marshal(dataOutputStream0);
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      EntityID entityID0 = new EntityID();
      directedEnergyPrecisionAimpoint0.setTargetEntityID(entityID0);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      Vector3Float vector3Float0 = new Vector3Float();
      directedEnergyPrecisionAimpoint0.setTargetSpotEntityLocation(vector3Float0);
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      
      directedEnergyPrecisionAimpoint0.padding = (-1);
      int int0 = directedEnergyPrecisionAimpoint0.getMarshalledSize();
      assertEquals(96, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(96);
      directedEnergyPrecisionAimpoint0.unmarshal(byteBuffer0);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 88);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      directedEnergyPrecisionAimpoint0.unmarshal(dataInputStream0);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.marshal((DataOutputStream) null);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      Vector3Float vector3Float0 = directedEnergyPrecisionAimpoint0.getTargetSpotEntityLocation();
      vector3Float0.z = (float) (short)18980;
      directedEnergyPrecisionAimpoint0.setTargetSpotVelocity(vector3Float0);
      Vector3Float vector3Float1 = directedEnergyPrecisionAimpoint0.getTargetSpotVelocity();
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals(18980.0F, vector3Float1.getZ(), 0.01F);
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      Vector3Double vector3Double0 = new Vector3Double();
      vector3Double0.x = (-1.0);
      directedEnergyPrecisionAimpoint0.setTargetSpotLocation(vector3Double0);
      Vector3Double vector3Double1 = directedEnergyPrecisionAimpoint0.getTargetSpotLocation();
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals((-1.0), vector3Double1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      Vector3Float vector3Float0 = directedEnergyPrecisionAimpoint0.getTargetSpotEntityLocation();
      vector3Float0.z = (float) (short)18980;
      directedEnergyPrecisionAimpoint0.getTargetSpotEntityLocation();
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      Vector3Float vector3Float0 = directedEnergyPrecisionAimpoint0.getTargetSpotVelocity();
      vector3Float0.x = (-90.938F);
      directedEnergyPrecisionAimpoint0.setTargetSpotEntityLocation(vector3Float0);
      Vector3Float vector3Float1 = directedEnergyPrecisionAimpoint0.getTargetSpotEntityLocation();
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals((-90.938F), vector3Float1.getX(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      EntityID entityID0 = directedEnergyPrecisionAimpoint0.targetEntityID;
      entityID0.setSiteID(148);
      directedEnergyPrecisionAimpoint0.getTargetEntityID();
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      EntityID entityID0 = new EntityID();
      directedEnergyPrecisionAimpoint0.targetEntityID = entityID0;
      entityID0.siteID = (-1);
      directedEnergyPrecisionAimpoint0.getTargetEntityID();
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      EntityID entityID0 = directedEnergyPrecisionAimpoint0.targetEntityID;
      entityID0.setApplicationID((-2897));
      directedEnergyPrecisionAimpoint0.getTargetEntityID();
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.setTargetComponentID((short)106);
      short short0 = directedEnergyPrecisionAimpoint0.getTargetComponentID();
      assertEquals((short)106, short0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      
      directedEnergyPrecisionAimpoint0.setRecordType(0L);
      long long0 = directedEnergyPrecisionAimpoint0.getRecordType();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      
      directedEnergyPrecisionAimpoint0.setRecordLength((-1));
      int int0 = directedEnergyPrecisionAimpoint0.getRecordLength();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.setPeakIrradiance(3710.59F);
      float float0 = directedEnergyPrecisionAimpoint0.getPeakIrradiance();
      assertEquals(3710.59F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.padding2 = 6849L;
      long long0 = directedEnergyPrecisionAimpoint0.getPadding2();
      assertEquals(6849L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.padding2 = (-3276L);
      long long0 = directedEnergyPrecisionAimpoint0.getPadding2();
      assertEquals((-3276L), long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.padding = 4;
      int int0 = directedEnergyPrecisionAimpoint0.getPadding();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      
      directedEnergyPrecisionAimpoint0.setBeamSpotType((short)1);
      short short0 = directedEnergyPrecisionAimpoint0.getBeamSpotType();
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      
      directedEnergyPrecisionAimpoint0.beamSpotCrossSectionSemiMinorAxis = 1.0F;
      float float0 = directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.beamSpotCrossSectionSemiMinorAxis = (-1418.5576F);
      float float0 = directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis();
      assertEquals((-1418.5576F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.setBeamSpotCrossSectionSemiMajorAxis(830.1106F);
      float float0 = directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis();
      assertEquals(830.1106F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.setBeamSpotCrossSectionSemiMajorAxis((-4668.035F));
      float float0 = directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis();
      assertEquals((-4668.035F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.beamSpotCrossSectionOrientationAngle = 1540.2798F;
      float float0 = directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle();
      assertEquals(1540.2798F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.setBeamSpotCrossSectionOrientationAngle((-4668.035F));
      float float0 = directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle();
      assertEquals((-4668.035F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      boolean boolean0 = directedEnergyPrecisionAimpoint0.equalsImpl(directedEnergyPrecisionAimpoint0);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertTrue(boolean0);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2);
      // Undeclared exception!
      try { 
        directedEnergyPrecisionAimpoint0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      // Undeclared exception!
      try { 
        directedEnergyPrecisionAimpoint0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.DirectedEnergyPrecisionAimpoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.targetSpotEntityLocation = null;
      // Undeclared exception!
      try { 
        directedEnergyPrecisionAimpoint0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.DirectedEnergyPrecisionAimpoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      
      directedEnergyPrecisionAimpoint0.padding2 = 4000L;
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint1 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.equalsImpl(directedEnergyPrecisionAimpoint1);
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      
      directedEnergyPrecisionAimpoint0.peakIrradiance = 1.0F;
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint1 = new DirectedEnergyPrecisionAimpoint();
      boolean boolean0 = directedEnergyPrecisionAimpoint0.equalsImpl(directedEnergyPrecisionAimpoint1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint1 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint1.setBeamSpotCrossSectionOrientationAngle(3164.272F);
      boolean boolean0 = directedEnergyPrecisionAimpoint0.equalsImpl(directedEnergyPrecisionAimpoint1);
      assertEquals(3164.272F, directedEnergyPrecisionAimpoint1.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.setBeamSpotCrossSectionSemiMinorAxis(2703.0F);
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint1 = new DirectedEnergyPrecisionAimpoint();
      boolean boolean0 = directedEnergyPrecisionAimpoint1.equalsImpl(directedEnergyPrecisionAimpoint0);
      assertEquals(2703.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint1 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.beamSpotCrossSectionSemiMajorAxis = 1.0F;
      boolean boolean0 = directedEnergyPrecisionAimpoint1.equalsImpl(directedEnergyPrecisionAimpoint0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint1 = new DirectedEnergyPrecisionAimpoint();
      assertEquals((short)0, directedEnergyPrecisionAimpoint1.getBeamSpotType());
      
      directedEnergyPrecisionAimpoint1.beamSpotType = (short)2242;
      boolean boolean0 = directedEnergyPrecisionAimpoint0.equalsImpl(directedEnergyPrecisionAimpoint1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint1 = new DirectedEnergyPrecisionAimpoint();
      assertTrue(directedEnergyPrecisionAimpoint1.equals((Object)directedEnergyPrecisionAimpoint0));
      
      directedEnergyPrecisionAimpoint1.setTargetSpotAcceleration((Vector3Float) null);
      boolean boolean0 = directedEnergyPrecisionAimpoint0.equalsImpl(directedEnergyPrecisionAimpoint1);
      assertEquals(0L, directedEnergyPrecisionAimpoint1.getPadding2());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint1.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint1.getBeamSpotType());
      assertFalse(boolean0);
      assertEquals(88, directedEnergyPrecisionAimpoint1.getRecordLength());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint1.getPeakIrradiance(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint1.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals(4000L, directedEnergyPrecisionAimpoint1.getRecordType());
      assertEquals((short)0, directedEnergyPrecisionAimpoint1.getTargetComponentID());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint1.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals(0, directedEnergyPrecisionAimpoint1.getPadding());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      Vector3Float vector3Float0 = directedEnergyPrecisionAimpoint0.targetSpotVelocity;
      vector3Float0.setX(1014.64F);
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint1 = new DirectedEnergyPrecisionAimpoint();
      boolean boolean0 = directedEnergyPrecisionAimpoint1.equalsImpl(directedEnergyPrecisionAimpoint0);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint1.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint1.getBeamSpotType());
      assertFalse(boolean0);
      assertEquals((short)0, directedEnergyPrecisionAimpoint1.getTargetComponentID());
      assertEquals(0, directedEnergyPrecisionAimpoint1.getPadding());
      assertEquals(0L, directedEnergyPrecisionAimpoint1.getPadding2());
      assertFalse(directedEnergyPrecisionAimpoint0.equals((Object)directedEnergyPrecisionAimpoint1));
      assertEquals(0.0F, directedEnergyPrecisionAimpoint1.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals(88, directedEnergyPrecisionAimpoint1.getRecordLength());
      assertEquals(4000L, directedEnergyPrecisionAimpoint1.getRecordType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint1.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint1.getPeakIrradiance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint1 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.padding = 88;
      boolean boolean0 = directedEnergyPrecisionAimpoint1.equalsImpl(directedEnergyPrecisionAimpoint0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint1 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.recordType = 2157L;
      boolean boolean0 = directedEnergyPrecisionAimpoint0.equalsImpl(directedEnergyPrecisionAimpoint1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      EntityID entityID0 = directedEnergyPrecisionAimpoint0.targetEntityID;
      boolean boolean0 = directedEnergyPrecisionAimpoint0.equalsImpl(entityID0);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertFalse(boolean0);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EntityID entityID0 = new EntityID();
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      boolean boolean0 = directedEnergyPrecisionAimpoint0.equals(entityID0);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertFalse(boolean0);
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint1 = new DirectedEnergyPrecisionAimpoint();
      boolean boolean0 = directedEnergyPrecisionAimpoint0.equals(directedEnergyPrecisionAimpoint1);
      assertEquals(4000L, directedEnergyPrecisionAimpoint1.getRecordType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint1.getPeakIrradiance(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint1.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals(0L, directedEnergyPrecisionAimpoint1.getPadding2());
      assertTrue(boolean0);
      assertEquals((short)0, directedEnergyPrecisionAimpoint1.getBeamSpotType());
      assertEquals(88, directedEnergyPrecisionAimpoint1.getRecordLength());
      assertEquals((short)0, directedEnergyPrecisionAimpoint1.getTargetComponentID());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint1.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint1.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals(0, directedEnergyPrecisionAimpoint1.getPadding());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      boolean boolean0 = directedEnergyPrecisionAimpoint0.equals(directedEnergyPrecisionAimpoint0);
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertTrue(boolean0);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      boolean boolean0 = directedEnergyPrecisionAimpoint0.equals((Object) null);
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.getTargetSpotAcceleration();
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      int int0 = directedEnergyPrecisionAimpoint0.getPadding();
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals(0, int0);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.setPadding(206457380);
      assertEquals(206457380, directedEnergyPrecisionAimpoint0.getPadding());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      long long0 = directedEnergyPrecisionAimpoint0.getRecordType();
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals(4000L, long0);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      short short0 = directedEnergyPrecisionAimpoint0.getBeamSpotType();
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.setBeamSpotCrossSectionSemiMinorAxis((-4803.394F));
      MockPrintStream mockPrintStream0 = new MockPrintStream("gSu6q`");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      directedEnergyPrecisionAimpoint0.marshal(dataOutputStream0);
      assertEquals((-4803.394F), directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.getTargetSpotLocation();
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.setRecordLength(1189);
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint1 = new DirectedEnergyPrecisionAimpoint();
      boolean boolean0 = directedEnergyPrecisionAimpoint0.equalsImpl(directedEnergyPrecisionAimpoint1);
      assertEquals(1189, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      long long0 = directedEnergyPrecisionAimpoint0.getPadding2();
      assertEquals(0L, long0);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      short short0 = directedEnergyPrecisionAimpoint0.getTargetComponentID();
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals((short)0, short0);
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.setRecordType((-859L));
      long long0 = directedEnergyPrecisionAimpoint0.getRecordType();
      assertEquals((-859L), long0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      int int0 = directedEnergyPrecisionAimpoint0.getRecordLength();
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(88, int0);
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      // Undeclared exception!
      try { 
        directedEnergyPrecisionAimpoint0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.DirectedEnergyPrecisionAimpoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.setTargetComponentID((short) (-1));
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint1 = new DirectedEnergyPrecisionAimpoint();
      boolean boolean0 = directedEnergyPrecisionAimpoint0.equalsImpl(directedEnergyPrecisionAimpoint1);
      assertEquals((short) (-1), directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      float float0 = directedEnergyPrecisionAimpoint0.getPeakIrradiance();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      float float0 = directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      Vector3Float vector3Float0 = directedEnergyPrecisionAimpoint0.getTargetSpotEntityLocation();
      vector3Float0.setX((-4164.7896F));
      directedEnergyPrecisionAimpoint0.targetSpotAcceleration = vector3Float0;
      Vector3Float vector3Float1 = directedEnergyPrecisionAimpoint0.getTargetSpotAcceleration();
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals((-4164.7896F), vector3Float1.getX(), 0.01F);
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      float float0 = directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis(), 0.01F);
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      directedEnergyPrecisionAimpoint0.setTargetSpotVelocity((Vector3Float) null);
      // Undeclared exception!
      try { 
        directedEnergyPrecisionAimpoint0.equalsImpl(directedEnergyPrecisionAimpoint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.DirectedEnergyPrecisionAimpoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      
      directedEnergyPrecisionAimpoint0.setPadding2(1L);
      assertEquals(1L, directedEnergyPrecisionAimpoint0.getPadding2());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DirectedEnergyPrecisionAimpoint directedEnergyPrecisionAimpoint0 = new DirectedEnergyPrecisionAimpoint();
      float float0 = directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMajorAxis();
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getPeakIrradiance(), 0.01F);
      assertEquals(4000L, directedEnergyPrecisionAimpoint0.getRecordType());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionOrientationAngle(), 0.01F);
      assertEquals(0L, directedEnergyPrecisionAimpoint0.getPadding2());
      assertEquals(88, directedEnergyPrecisionAimpoint0.getRecordLength());
      assertEquals(0.0F, directedEnergyPrecisionAimpoint0.getBeamSpotCrossSectionSemiMinorAxis(), 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getBeamSpotType());
      assertEquals(0, directedEnergyPrecisionAimpoint0.getPadding());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, directedEnergyPrecisionAimpoint0.getTargetComponentID());
  }
}
