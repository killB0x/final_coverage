/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 14:10:06 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.DirectedEnergyTargetEnergyDeposition;
import edu.nps.moves.dis7.EntityID;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirectedEnergyTargetEnergyDeposition_ESTest extends DirectedEnergyTargetEnergyDeposition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      directedEnergyTargetEnergyDeposition0.setPeakIrradiance(2288.192F);
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition1 = new DirectedEnergyTargetEnergyDeposition();
      boolean boolean0 = directedEnergyTargetEnergyDeposition0.equalsImpl(directedEnergyTargetEnergyDeposition1);
      assertEquals(2288.192F, directedEnergyTargetEnergyDeposition0.getPeakIrradiance(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition1 = new DirectedEnergyTargetEnergyDeposition();
      directedEnergyTargetEnergyDeposition0.setPadding(3017);
      boolean boolean0 = directedEnergyTargetEnergyDeposition0.equalsImpl(directedEnergyTargetEnergyDeposition1);
      assertEquals(3017, directedEnergyTargetEnergyDeposition0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(12);
      directedEnergyTargetEnergyDeposition0.unmarshal(byteBuffer0);
      assertEquals(0, directedEnergyTargetEnergyDeposition0.getPadding());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      byte[] byteArray0 = new byte[25];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      directedEnergyTargetEnergyDeposition0.unmarshal(dataInputStream0);
      assertEquals(12, directedEnergyTargetEnergyDeposition0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3358);
      directedEnergyTargetEnergyDeposition0.marshal(byteBuffer0);
      assertEquals(0, directedEnergyTargetEnergyDeposition0.getPadding());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0]+R>COnxma,iwSGyT", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      directedEnergyTargetEnergyDeposition0.marshal(dataOutputStream0);
      assertEquals(0, directedEnergyTargetEnergyDeposition0.getPadding());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      directedEnergyTargetEnergyDeposition0.targetEntityID = null;
      directedEnergyTargetEnergyDeposition0.getTargetEntityID();
      assertEquals(0, directedEnergyTargetEnergyDeposition0.getPadding());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      directedEnergyTargetEnergyDeposition0.unmarshal(dataInputStream0);
      directedEnergyTargetEnergyDeposition0.getTargetEntityID();
      assertEquals(0, directedEnergyTargetEnergyDeposition0.getPadding());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      EntityID entityID0 = directedEnergyTargetEnergyDeposition0.targetEntityID;
      entityID0.siteID = (-2709);
      directedEnergyTargetEnergyDeposition0.getTargetEntityID();
      assertEquals(0, directedEnergyTargetEnergyDeposition0.getPadding());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      EntityID entityID0 = directedEnergyTargetEnergyDeposition0.getTargetEntityID();
      entityID0.entityID = 12;
      directedEnergyTargetEnergyDeposition0.getTargetEntityID();
      assertEquals(0, directedEnergyTargetEnergyDeposition0.getPadding());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      EntityID entityID0 = directedEnergyTargetEnergyDeposition0.targetEntityID;
      entityID0.setEntityID((-2709));
      directedEnergyTargetEnergyDeposition0.getTargetEntityID();
      assertEquals(0, directedEnergyTargetEnergyDeposition0.getPadding());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      EntityID entityID0 = directedEnergyTargetEnergyDeposition0.getTargetEntityID();
      entityID0.applicationID = 120;
      directedEnergyTargetEnergyDeposition0.getTargetEntityID();
      assertEquals(0, directedEnergyTargetEnergyDeposition0.getPadding());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      directedEnergyTargetEnergyDeposition0.setPeakIrradiance(2288.192F);
      float float0 = directedEnergyTargetEnergyDeposition0.getPeakIrradiance();
      assertEquals(2288.192F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      directedEnergyTargetEnergyDeposition0.peakIrradiance = (-173.207F);
      float float0 = directedEnergyTargetEnergyDeposition0.getPeakIrradiance();
      assertEquals((-173.207F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      directedEnergyTargetEnergyDeposition0.unmarshal(dataInputStream0);
      int int0 = directedEnergyTargetEnergyDeposition0.getPadding();
      assertEquals(65280, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      directedEnergyTargetEnergyDeposition0.padding = (-3400);
      int int0 = directedEnergyTargetEnergyDeposition0.getPadding();
      assertEquals((-3400), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      boolean boolean0 = directedEnergyTargetEnergyDeposition0.equalsImpl(directedEnergyTargetEnergyDeposition0);
      assertTrue(boolean0);
      assertEquals(0, directedEnergyTargetEnergyDeposition0.getPadding());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        directedEnergyTargetEnergyDeposition0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        directedEnergyTargetEnergyDeposition0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      directedEnergyTargetEnergyDeposition0.setPeakIrradiance(2288.192F);
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition1 = new DirectedEnergyTargetEnergyDeposition();
      boolean boolean0 = directedEnergyTargetEnergyDeposition1.equalsImpl(directedEnergyTargetEnergyDeposition0);
      assertEquals(2288.192F, directedEnergyTargetEnergyDeposition0.getPeakIrradiance(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition1 = new DirectedEnergyTargetEnergyDeposition();
      directedEnergyTargetEnergyDeposition0.setPadding(65535);
      boolean boolean0 = directedEnergyTargetEnergyDeposition1.equalsImpl(directedEnergyTargetEnergyDeposition0);
      assertEquals(65535, directedEnergyTargetEnergyDeposition0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition1 = new DirectedEnergyTargetEnergyDeposition();
      assertTrue(directedEnergyTargetEnergyDeposition1.equals((Object)directedEnergyTargetEnergyDeposition0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      directedEnergyTargetEnergyDeposition0.unmarshal(dataInputStream0);
      boolean boolean0 = directedEnergyTargetEnergyDeposition0.equalsImpl(directedEnergyTargetEnergyDeposition1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      Object object0 = new Object();
      boolean boolean0 = directedEnergyTargetEnergyDeposition0.equalsImpl(object0);
      assertEquals(0, directedEnergyTargetEnergyDeposition0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition1 = new DirectedEnergyTargetEnergyDeposition();
      boolean boolean0 = directedEnergyTargetEnergyDeposition1.equals(directedEnergyTargetEnergyDeposition0);
      assertTrue(boolean0);
      assertEquals(0, directedEnergyTargetEnergyDeposition1.getPadding());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      boolean boolean0 = directedEnergyTargetEnergyDeposition0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, directedEnergyTargetEnergyDeposition0.getPadding());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      boolean boolean0 = directedEnergyTargetEnergyDeposition0.equals(directedEnergyTargetEnergyDeposition0);
      assertTrue(boolean0);
      assertEquals(0, directedEnergyTargetEnergyDeposition0.getPadding());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      boolean boolean0 = directedEnergyTargetEnergyDeposition0.equals(mockFileInputStream0);
      assertEquals(0, directedEnergyTargetEnergyDeposition0.getPadding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      // Undeclared exception!
      try { 
        directedEnergyTargetEnergyDeposition0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EntityID", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      int int0 = directedEnergyTargetEnergyDeposition0.getPadding();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      float float0 = directedEnergyTargetEnergyDeposition0.getPeakIrradiance();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, directedEnergyTargetEnergyDeposition0.getPadding());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      directedEnergyTargetEnergyDeposition0.setPadding(120);
      int int0 = directedEnergyTargetEnergyDeposition0.getMarshalledSize();
      assertEquals(120, directedEnergyTargetEnergyDeposition0.getPadding());
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      EntityID entityID0 = directedEnergyTargetEnergyDeposition0.getTargetEntityID();
      entityID0.setApplicationID((-742));
      directedEnergyTargetEnergyDeposition0.getTargetEntityID();
      assertEquals(0, directedEnergyTargetEnergyDeposition0.getPadding());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      // Undeclared exception!
      try { 
        directedEnergyTargetEnergyDeposition0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EntityID", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      directedEnergyTargetEnergyDeposition0.marshal((DataOutputStream) null);
      assertEquals(0, directedEnergyTargetEnergyDeposition0.getPadding());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DirectedEnergyTargetEnergyDeposition directedEnergyTargetEnergyDeposition0 = new DirectedEnergyTargetEnergyDeposition();
      directedEnergyTargetEnergyDeposition0.setTargetEntityID((EntityID) null);
      // Undeclared exception!
      try { 
        directedEnergyTargetEnergyDeposition0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.DirectedEnergyTargetEnergyDeposition", e);
      }
  }
}
