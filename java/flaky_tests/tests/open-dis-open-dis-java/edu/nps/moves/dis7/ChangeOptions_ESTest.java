/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 15:38:01 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import edu.nps.moves.dis7.ChangeOptions;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChangeOptions_ESTest extends ChangeOptions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChangeOptions changeOptions0 = new ChangeOptions();
      boolean boolean0 = changeOptions0.equalsImpl(changeOptions0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ChangeOptions changeOptions0 = new ChangeOptions();
      Object object0 = new Object();
      boolean boolean0 = changeOptions0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ChangeOptions changeOptions0 = new ChangeOptions();
      ChangeOptions changeOptions1 = new ChangeOptions();
      boolean boolean0 = changeOptions1.equals(changeOptions0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChangeOptions changeOptions0 = new ChangeOptions();
      Object object0 = new Object();
      boolean boolean0 = changeOptions0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ChangeOptions changeOptions0 = new ChangeOptions();
      boolean boolean0 = changeOptions0.equals(changeOptions0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ChangeOptions changeOptions0 = new ChangeOptions();
      boolean boolean0 = changeOptions0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ChangeOptions changeOptions0 = new ChangeOptions();
      int int0 = changeOptions0.getMarshalledSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ChangeOptions changeOptions0 = new ChangeOptions();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      changeOptions0.marshal(dataOutputStream0);
      assertEquals(0, changeOptions0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ChangeOptions changeOptions0 = new ChangeOptions();
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0, (int) (byte)1, (int) (byte)1);
      changeOptions0.marshal(byteBuffer0);
      assertEquals(4, byteBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ChangeOptions changeOptions0 = new ChangeOptions();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      changeOptions0.unmarshal(dataInputStream0);
      assertEquals(0, changeOptions0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ChangeOptions changeOptions0 = new ChangeOptions();
      byte[] byteArray0 = new byte[9];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      changeOptions0.unmarshal(byteBuffer0);
      assertEquals(9, byteBuffer0.remaining());
  }
}
