/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:23:41 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.EventIdentifier;
import edu.nps.moves.dis7.LaunchedMunitionRecord;
import edu.nps.moves.dis7.Vector3Double;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LaunchedMunitionRecord_ESTest extends LaunchedMunitionRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      LaunchedMunitionRecord launchedMunitionRecord1 = new LaunchedMunitionRecord();
      launchedMunitionRecord0.setPadding3(8);
      boolean boolean0 = launchedMunitionRecord1.equals(launchedMunitionRecord0);
      assertEquals(8, launchedMunitionRecord0.getPadding3());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      launchedMunitionRecord0.setPadding2(8);
      LaunchedMunitionRecord launchedMunitionRecord1 = new LaunchedMunitionRecord();
      boolean boolean0 = launchedMunitionRecord0.equalsImpl(launchedMunitionRecord1);
      assertEquals(8, launchedMunitionRecord0.getPadding2());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      launchedMunitionRecord0.setPadding2(8);
      boolean boolean0 = launchedMunitionRecord0.equalsImpl(launchedMunitionRecord0);
      assertEquals(8, launchedMunitionRecord0.getPadding2());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      LaunchedMunitionRecord launchedMunitionRecord1 = new LaunchedMunitionRecord();
      assertTrue(launchedMunitionRecord1.equals((Object)launchedMunitionRecord0));
      
      launchedMunitionRecord1.padding = 437;
      boolean boolean0 = launchedMunitionRecord0.equalsImpl(launchedMunitionRecord1);
      assertFalse(launchedMunitionRecord1.equals((Object)launchedMunitionRecord0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      LaunchedMunitionRecord launchedMunitionRecord1 = new LaunchedMunitionRecord();
      assertTrue(launchedMunitionRecord1.equals((Object)launchedMunitionRecord0));
      
      launchedMunitionRecord1.padding = 437;
      boolean boolean0 = launchedMunitionRecord1.equalsImpl(launchedMunitionRecord0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      launchedMunitionRecord0.setPadding((-769));
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("edu.nps.moves.dis7.LaunchedMunitionRecord");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        launchedMunitionRecord0.marshal(byteBuffer1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("edu.nps.moves.dis7.LaunchedMunitionRecord");
      launchedMunitionRecord0.padding3 = (-2024);
      // Undeclared exception!
      try { 
        launchedMunitionRecord0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      MockPrintStream mockPrintStream0 = new MockPrintStream(":z");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      launchedMunitionRecord0.setPadding(1639);
      launchedMunitionRecord0.marshal(dataOutputStream0);
      assertEquals(1639, launchedMunitionRecord0.getPadding());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      launchedMunitionRecord0.setPadding3(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(":z");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      launchedMunitionRecord0.marshal(dataOutputStream0);
      assertEquals(1, launchedMunitionRecord0.getPadding3());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      launchedMunitionRecord0.setPadding2(8);
      int int0 = launchedMunitionRecord0.getMarshalledSize();
      assertEquals(8, launchedMunitionRecord0.getPadding2());
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      launchedMunitionRecord0.setPadding3((-1));
      int int0 = launchedMunitionRecord0.getMarshalledSize();
      assertEquals((-1), launchedMunitionRecord0.getPadding3());
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2189);
      launchedMunitionRecord0.unmarshal(byteBuffer0);
      assertEquals(0, launchedMunitionRecord0.getPadding3());
      assertEquals(0, launchedMunitionRecord0.getPadding2());
      assertEquals(0, launchedMunitionRecord0.getPadding());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1732);
      launchedMunitionRecord0.marshal(byteBuffer0);
      assertTrue(byteBuffer0.isDirect());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      Vector3Double vector3Double0 = new Vector3Double();
      vector3Double0.x = (-2796.28147);
      launchedMunitionRecord0.setTargetLocation(vector3Double0);
      Vector3Double vector3Double1 = launchedMunitionRecord0.getTargetLocation();
      assertEquals((-2796.28147), vector3Double1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte) (-122);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      launchedMunitionRecord0.unmarshal(dataInputStream0);
      EventIdentifier eventIdentifier0 = launchedMunitionRecord0.fireEventID;
      launchedMunitionRecord0.setTargetEntityID(eventIdentifier0);
      EventIdentifier eventIdentifier1 = launchedMunitionRecord0.getTargetEntityID();
      assertEquals(134, eventIdentifier1.getEventNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      launchedMunitionRecord0.padding3 = 65535;
      int int0 = launchedMunitionRecord0.getPadding3();
      assertEquals(65535, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      launchedMunitionRecord0.setPadding3((-524));
      int int0 = launchedMunitionRecord0.getPadding3();
      assertEquals((-524), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      launchedMunitionRecord0.setPadding2((-1));
      int int0 = launchedMunitionRecord0.getPadding2();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      launchedMunitionRecord0.unmarshal(dataInputStream0);
      int int0 = launchedMunitionRecord0.getPadding();
      assertEquals(512, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      launchedMunitionRecord0.setPadding((-3845));
      int int0 = launchedMunitionRecord0.getPadding();
      assertEquals((-3845), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      EventIdentifier eventIdentifier0 = launchedMunitionRecord0.firingEntityID;
      eventIdentifier0.setEventNumber(65535);
      EventIdentifier eventIdentifier1 = launchedMunitionRecord0.getFiringEntityID();
      assertEquals(65535, eventIdentifier1.getEventNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      launchedMunitionRecord0.setFireEventID((EventIdentifier) null);
      EventIdentifier eventIdentifier0 = launchedMunitionRecord0.getFireEventID();
      assertNull(eventIdentifier0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      EventIdentifier eventIdentifier0 = launchedMunitionRecord0.firingEntityID;
      eventIdentifier0.setEventNumber(65535);
      launchedMunitionRecord0.setFireEventID(eventIdentifier0);
      EventIdentifier eventIdentifier1 = launchedMunitionRecord0.getFireEventID();
      assertEquals(65535, eventIdentifier1.getEventNumber());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      // Undeclared exception!
      try { 
        launchedMunitionRecord0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.SimulationAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      Vector3Double vector3Double0 = launchedMunitionRecord0.targetLocation;
      vector3Double0.setY(1.0);
      LaunchedMunitionRecord launchedMunitionRecord1 = new LaunchedMunitionRecord();
      boolean boolean0 = launchedMunitionRecord0.equals(launchedMunitionRecord1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      LaunchedMunitionRecord launchedMunitionRecord1 = new LaunchedMunitionRecord();
      launchedMunitionRecord1.setPadding2(8);
      boolean boolean0 = launchedMunitionRecord0.equalsImpl(launchedMunitionRecord1);
      assertEquals(8, launchedMunitionRecord1.getPadding2());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      LaunchedMunitionRecord launchedMunitionRecord1 = new LaunchedMunitionRecord();
      assertTrue(launchedMunitionRecord1.equals((Object)launchedMunitionRecord0));
      
      launchedMunitionRecord1.setFiringEntityID((EventIdentifier) null);
      boolean boolean0 = launchedMunitionRecord0.equalsImpl(launchedMunitionRecord1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      boolean boolean0 = launchedMunitionRecord0.equalsImpl((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      LaunchedMunitionRecord launchedMunitionRecord1 = new LaunchedMunitionRecord();
      boolean boolean0 = launchedMunitionRecord1.equals(launchedMunitionRecord0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      boolean boolean0 = launchedMunitionRecord0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      boolean boolean0 = launchedMunitionRecord0.equals(launchedMunitionRecord0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      Object object0 = new Object();
      boolean boolean0 = launchedMunitionRecord0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      int int0 = launchedMunitionRecord0.getPadding3();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      int int0 = launchedMunitionRecord0.getPadding2();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      int int0 = launchedMunitionRecord0.getPadding();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      Vector3Double vector3Double0 = launchedMunitionRecord0.getTargetLocation();
      assertEquals(0.0, vector3Double0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      launchedMunitionRecord0.setTargetLocation((Vector3Double) null);
      // Undeclared exception!
      try { 
        launchedMunitionRecord0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.LaunchedMunitionRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      EventIdentifier eventIdentifier0 = launchedMunitionRecord0.getFiringEntityID();
      assertEquals(0, eventIdentifier0.getEventNumber());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      launchedMunitionRecord0.setPadding2(8);
      int int0 = launchedMunitionRecord0.getPadding2();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        launchedMunitionRecord0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      launchedMunitionRecord0.setFireEventID((EventIdentifier) null);
      // Undeclared exception!
      try { 
        launchedMunitionRecord0.equalsImpl(launchedMunitionRecord0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.LaunchedMunitionRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      // Undeclared exception!
      try { 
        launchedMunitionRecord0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.SimulationAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      launchedMunitionRecord0.setPadding((-6039));
      int int0 = launchedMunitionRecord0.getMarshalledSize();
      assertEquals((-6039), launchedMunitionRecord0.getPadding());
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      EventIdentifier eventIdentifier0 = launchedMunitionRecord0.getFireEventID();
      assertEquals(0, eventIdentifier0.getEventNumber());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      launchedMunitionRecord0.marshal(dataOutputStream0);
      assertEquals(0, launchedMunitionRecord0.getPadding3());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      EventIdentifier eventIdentifier0 = launchedMunitionRecord0.getTargetEntityID();
      eventIdentifier0.setEventNumber((-1038));
      EventIdentifier eventIdentifier1 = launchedMunitionRecord0.getTargetEntityID();
      assertSame(eventIdentifier1, eventIdentifier0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LaunchedMunitionRecord launchedMunitionRecord0 = new LaunchedMunitionRecord();
      EventIdentifier eventIdentifier0 = new EventIdentifier();
      launchedMunitionRecord0.setTargetEntityID(eventIdentifier0);
      assertEquals(0, eventIdentifier0.getEventNumber());
  }
}
