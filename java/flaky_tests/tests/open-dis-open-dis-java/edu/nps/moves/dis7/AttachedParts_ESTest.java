/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 13:11:21 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.AttachedParts;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.PushbackInputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AttachedParts_ESTest extends AttachedParts_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      AttachedParts attachedParts1 = new AttachedParts();
      assertTrue(attachedParts1.equals((Object)attachedParts0));
      
      attachedParts1.parameterValue = (-1L);
      boolean boolean0 = attachedParts1.equals(attachedParts0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      AttachedParts attachedParts1 = new AttachedParts();
      attachedParts1.setParameterType(31L);
      boolean boolean0 = attachedParts0.equals(attachedParts1);
      assertEquals(31L, attachedParts1.getParameterType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      AttachedParts attachedParts1 = new AttachedParts();
      assertEquals((short)0, attachedParts1.getDetachedIndicator());
      
      attachedParts1.detachedIndicator = (short)788;
      boolean boolean0 = attachedParts0.equalsImpl(attachedParts1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      assertEquals((short)1, attachedParts0.getRecordType());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      attachedParts0.unmarshal(dataInputStream0);
      AttachedParts attachedParts1 = new AttachedParts();
      boolean boolean0 = attachedParts0.equalsImpl(attachedParts1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      attachedParts0.setParameterValue(581L);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(418);
      attachedParts0.marshal(byteBuffer0);
      assertEquals(581L, attachedParts0.getParameterValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      attachedParts0.setParameterValue(4635L);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      attachedParts0.marshal(dataOutputStream0);
      assertEquals(4635L, attachedParts0.getParameterValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      assertEquals((short)1, attachedParts0.getRecordType());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(16);
      attachedParts0.unmarshal(byteBuffer0);
      assertEquals((short)0, attachedParts0.getDetachedIndicator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        attachedParts0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 4367);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      attachedParts0.unmarshal(dataInputStream0);
      assertEquals(16, attachedParts0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        attachedParts0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      attachedParts0.marshal((DataOutputStream) null);
      assertEquals((short)0, attachedParts0.getDetachedIndicator());
      assertEquals(0, attachedParts0.getPartAttachedTo());
      assertEquals((short)1, attachedParts0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      assertEquals((short)1, attachedParts0.getRecordType());
      
      attachedParts0.setRecordType((short)0);
      short short0 = attachedParts0.getRecordType();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      attachedParts0.partAttachedTo = 2;
      int int0 = attachedParts0.getPartAttachedTo();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      attachedParts0.partAttachedTo = (int) (short) (-1069);
      int int0 = attachedParts0.getPartAttachedTo();
      assertEquals((-1069), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      attachedParts0.setParameterValue(1L);
      long long0 = attachedParts0.getParameterValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      attachedParts0.setParameterValue((-1L));
      long long0 = attachedParts0.getParameterValue();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      attachedParts0.setParameterType(31L);
      long long0 = attachedParts0.getParameterType();
      assertEquals(31L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      attachedParts0.parameterType = (-1756L);
      long long0 = attachedParts0.getParameterType();
      assertEquals((-1756L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      attachedParts0.detachedIndicator = (short) (-873);
      short short0 = attachedParts0.getDetachedIndicator();
      assertEquals((short) (-873), short0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      boolean boolean0 = attachedParts0.equalsImpl(attachedParts0);
      assertEquals((short)1, attachedParts0.getRecordType());
      assertTrue(boolean0);
      assertEquals(0, attachedParts0.getPartAttachedTo());
      assertEquals((short)0, attachedParts0.getDetachedIndicator());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      assertEquals((short)1, attachedParts0.getRecordType());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      attachedParts0.unmarshal(dataInputStream0);
      AttachedParts attachedParts1 = new AttachedParts();
      boolean boolean0 = attachedParts0.equalsImpl(attachedParts1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      attachedParts0.setParameterValue(4635L);
      AttachedParts attachedParts1 = new AttachedParts();
      boolean boolean0 = attachedParts0.equalsImpl(attachedParts1);
      assertEquals(4635L, attachedParts0.getParameterValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      attachedParts0.setParameterType(1077L);
      AttachedParts attachedParts1 = new AttachedParts();
      boolean boolean0 = attachedParts0.equalsImpl(attachedParts1);
      assertEquals(1077L, attachedParts0.getParameterType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      AttachedParts attachedParts1 = new AttachedParts();
      attachedParts1.setPartAttachedTo(1011);
      boolean boolean0 = attachedParts0.equals(attachedParts1);
      assertEquals(1011, attachedParts1.getPartAttachedTo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      assertEquals((short)0, attachedParts0.getDetachedIndicator());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      attachedParts0.unmarshal(dataInputStream0);
      AttachedParts attachedParts1 = new AttachedParts();
      boolean boolean0 = attachedParts0.equalsImpl(attachedParts1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      Object object0 = new Object();
      boolean boolean0 = attachedParts0.equalsImpl(object0);
      assertEquals((short)1, attachedParts0.getRecordType());
      assertFalse(boolean0);
      assertEquals(0, attachedParts0.getPartAttachedTo());
      assertEquals((short)0, attachedParts0.getDetachedIndicator());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      Object object0 = new Object();
      boolean boolean0 = attachedParts0.equals(object0);
      assertFalse(boolean0);
      assertEquals((short)1, attachedParts0.getRecordType());
      assertEquals(0, attachedParts0.getPartAttachedTo());
      assertEquals((short)0, attachedParts0.getDetachedIndicator());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      boolean boolean0 = attachedParts0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals((short)0, attachedParts0.getDetachedIndicator());
      assertEquals(0, attachedParts0.getPartAttachedTo());
      assertEquals((short)1, attachedParts0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      boolean boolean0 = attachedParts0.equals(attachedParts0);
      assertTrue(boolean0);
      assertEquals(0, attachedParts0.getPartAttachedTo());
      assertEquals((short)0, attachedParts0.getDetachedIndicator());
      assertEquals((short)1, attachedParts0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      short short0 = attachedParts0.getDetachedIndicator();
      assertEquals((short)0, short0);
      assertEquals(0, attachedParts0.getPartAttachedTo());
      assertEquals((short)1, attachedParts0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      int int0 = attachedParts0.getPartAttachedTo();
      assertEquals(0, int0);
      assertEquals((short)0, attachedParts0.getDetachedIndicator());
      assertEquals((short)1, attachedParts0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      attachedParts0.setRecordType((short) (-3635));
      short short0 = attachedParts0.getRecordType();
      assertEquals((short) (-3635), short0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      // Undeclared exception!
      try { 
        attachedParts0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.AttachedParts", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      attachedParts0.getParameterType();
      assertEquals((short)1, attachedParts0.getRecordType());
      assertEquals(0, attachedParts0.getPartAttachedTo());
      assertEquals((short)0, attachedParts0.getDetachedIndicator());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      attachedParts0.setDetachedIndicator((short)4469);
      short short0 = attachedParts0.getDetachedIndicator();
      assertEquals((short)4469, short0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      int int0 = attachedParts0.getMarshalledSize();
      assertEquals(16, int0);
      assertEquals((short)0, attachedParts0.getDetachedIndicator());
      assertEquals((short)1, attachedParts0.getRecordType());
      assertEquals(0, attachedParts0.getPartAttachedTo());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      short short0 = attachedParts0.getRecordType();
      assertEquals((short)0, attachedParts0.getDetachedIndicator());
      assertEquals((short)1, short0);
      assertEquals(0, attachedParts0.getPartAttachedTo());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      // Undeclared exception!
      try { 
        attachedParts0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.AttachedParts", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      attachedParts0.setPartAttachedTo((-622));
      int int0 = attachedParts0.getMarshalledSize();
      assertEquals((-622), attachedParts0.getPartAttachedTo());
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AttachedParts attachedParts0 = new AttachedParts();
      attachedParts0.getParameterValue();
      assertEquals((short)0, attachedParts0.getDetachedIndicator());
      assertEquals((short)1, attachedParts0.getRecordType());
      assertEquals(0, attachedParts0.getPartAttachedTo());
  }
}
