/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:44:04 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.EntityID;
import edu.nps.moves.dis7.RepairCompletePdu;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RepairCompletePdu_ESTest extends RepairCompletePdu_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      RepairCompletePdu repairCompletePdu1 = new RepairCompletePdu();
      repairCompletePdu1.setPadding4((short) (-1));
      boolean boolean0 = repairCompletePdu0.equals(repairCompletePdu1);
      assertEquals((short) (-1), repairCompletePdu1.getPadding4());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      assertEquals((short)0, repairCompletePdu0.getPadding4());
      
      repairCompletePdu0.padding4 = (short)1490;
      repairCompletePdu0.marshal();
      assertEquals((short)9, repairCompletePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      repairCompletePdu0.setPadding4((short)192);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      repairCompletePdu0.marshal(dataOutputStream0);
      assertEquals((short)192, repairCompletePdu0.getPadding4());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      EntityID entityID0 = new EntityID();
      repairCompletePdu0.setReceivingEntityID(entityID0);
      assertEquals((short)9, repairCompletePdu0.getPduType());
      assertEquals((short)0, repairCompletePdu0.getPadding4());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(4377);
      repairCompletePdu0.marshal(byteBuffer0);
      assertEquals((short)0, repairCompletePdu0.getPadding4());
      assertEquals((short)9, repairCompletePdu0.getPduType());
      assertEquals(28, repairCompletePdu0.getLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      repairCompletePdu0.marshal((DataOutputStream) null);
      assertEquals((short)9, repairCompletePdu0.getPduType());
      assertEquals((short)0, repairCompletePdu0.getPadding4());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      EntityID entityID0 = repairCompletePdu0.receivingEntityID;
      repairCompletePdu0.repairingEntityID = entityID0;
      entityID0.setSiteID(2);
      repairCompletePdu0.getRepairingEntityID();
      assertEquals((short)9, repairCompletePdu0.getPduType());
      assertEquals((short)0, repairCompletePdu0.getPadding4());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      EntityID entityID0 = repairCompletePdu0.receivingEntityID;
      repairCompletePdu0.repairingEntityID = entityID0;
      entityID0.setEntityID(2433);
      repairCompletePdu0.getRepairingEntityID();
      assertEquals((short)9, repairCompletePdu0.getPduType());
      assertEquals((short)0, repairCompletePdu0.getPadding4());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      repairCompletePdu0.repairingEntityID.setApplicationID(3);
      EntityID entityID0 = repairCompletePdu0.getRepairingEntityID();
      assertEquals((short)9, repairCompletePdu0.getPduType());
      assertEquals((short)0, repairCompletePdu0.getPadding4());
      assertEquals(3, entityID0.getApplicationID());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("edu.nps.moves.dis7.RepairCompletePdu");
      repairCompletePdu0.unmarshal(byteBuffer0);
      int int0 = repairCompletePdu0.getRepair();
      assertEquals(29251, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      repairCompletePdu0.setRepair((-1190));
      int int0 = repairCompletePdu0.getRepair();
      assertEquals((-1190), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      EntityID entityID0 = repairCompletePdu0.getReceivingEntityID();
      entityID0.entityID = (-221);
      repairCompletePdu0.getReceivingEntityID();
      assertEquals((short)0, repairCompletePdu0.getPadding4());
      assertEquals((short)9, repairCompletePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      repairCompletePdu0.setPadding4((short)342);
      short short0 = repairCompletePdu0.getPadding4();
      assertEquals((short)342, short0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      repairCompletePdu0.padding4 = (short) (-195);
      short short0 = repairCompletePdu0.getPadding4();
      assertEquals((short) (-195), short0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      int int0 = repairCompletePdu0.getMarshalledSize();
      assertEquals((short)0, repairCompletePdu0.getPadding4());
      assertEquals((short)9, repairCompletePdu0.getPduType());
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        repairCompletePdu0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      // Undeclared exception!
      try { 
        repairCompletePdu0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.PduSuperclass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        repairCompletePdu0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      // Undeclared exception!
      try { 
        repairCompletePdu0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.PduSuperclass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      repairCompletePdu0.setRepairingEntityID((EntityID) null);
      // Undeclared exception!
      try { 
        repairCompletePdu0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.RepairCompletePdu", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      repairCompletePdu0.receivingEntityID = null;
      // Undeclared exception!
      try { 
        repairCompletePdu0.equalsImpl(repairCompletePdu0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.RepairCompletePdu", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      repairCompletePdu0.repairingEntityID = null;
      RepairCompletePdu repairCompletePdu1 = new RepairCompletePdu();
      // Undeclared exception!
      try { 
        repairCompletePdu0.equals(repairCompletePdu1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.RepairCompletePdu", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      assertEquals((short)9, repairCompletePdu0.getPduType());
      
      repairCompletePdu0.setPduType((short)1339);
      RepairCompletePdu repairCompletePdu1 = new RepairCompletePdu();
      boolean boolean0 = repairCompletePdu0.equalsImpl(repairCompletePdu1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      boolean boolean0 = repairCompletePdu0.equalsImpl(repairCompletePdu0);
      assertEquals((short)9, repairCompletePdu0.getPduType());
      assertEquals((short)0, repairCompletePdu0.getPadding4());
      assertTrue(boolean0);
      assertEquals(28, repairCompletePdu0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      RepairCompletePdu repairCompletePdu1 = new RepairCompletePdu();
      assertEquals((short)0, repairCompletePdu1.getPadding4());
      
      repairCompletePdu1.padding4 = (short)1418;
      boolean boolean0 = repairCompletePdu1.equalsImpl(repairCompletePdu0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      EntityID entityID0 = repairCompletePdu0.repairingEntityID;
      entityID0.setSiteID(9);
      repairCompletePdu0.receivingEntityID = entityID0;
      RepairCompletePdu repairCompletePdu1 = new RepairCompletePdu();
      boolean boolean0 = repairCompletePdu0.equalsImpl(repairCompletePdu1);
      assertFalse(boolean0);
      assertEquals((short)9, repairCompletePdu1.getPduType());
      assertEquals((short)0, repairCompletePdu1.getPadding4());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      boolean boolean0 = repairCompletePdu0.equalsImpl(dataInputStream0);
      assertEquals((short)0, repairCompletePdu0.getPadding4());
      assertFalse(boolean0);
      assertEquals((short)9, repairCompletePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      Object object0 = new Object();
      boolean boolean0 = repairCompletePdu0.equals(object0);
      assertEquals((short)9, repairCompletePdu0.getPduType());
      assertEquals((short)0, repairCompletePdu0.getPadding4());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      boolean boolean0 = repairCompletePdu0.equals((Object) null);
      assertEquals((short)9, repairCompletePdu0.getPduType());
      assertFalse(boolean0);
      assertEquals((short)0, repairCompletePdu0.getPadding4());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      boolean boolean0 = repairCompletePdu0.equals(repairCompletePdu0);
      assertTrue(boolean0);
      assertEquals((short)0, repairCompletePdu0.getPadding4());
      assertEquals((short)9, repairCompletePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      int int0 = repairCompletePdu0.getRepair();
      assertEquals(0, int0);
      assertEquals((short)0, repairCompletePdu0.getPadding4());
      assertEquals((short)9, repairCompletePdu0.getPduType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      repairCompletePdu0.setRepair((-1041));
      RepairCompletePdu repairCompletePdu1 = new RepairCompletePdu();
      boolean boolean0 = repairCompletePdu0.equalsImpl(repairCompletePdu1);
      assertEquals((-1041), repairCompletePdu0.getRepair());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      repairCompletePdu0.unmarshal((DataInputStream) null);
      assertEquals((short)9, repairCompletePdu0.getPduType());
      assertEquals((short)0, repairCompletePdu0.getPadding4());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      short short0 = repairCompletePdu0.getPadding4();
      assertEquals((short)9, repairCompletePdu0.getPduType());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RepairCompletePdu repairCompletePdu0 = new RepairCompletePdu();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("edu.nps.moves.dis7.RepairCompletePdu");
      repairCompletePdu0.unmarshal(byteBuffer0);
      repairCompletePdu0.getReceivingEntityID();
      assertEquals(29251, repairCompletePdu0.getRepair());
  }
}
