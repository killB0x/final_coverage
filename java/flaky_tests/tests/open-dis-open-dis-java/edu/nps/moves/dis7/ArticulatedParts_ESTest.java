/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 13:18:32 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.ArticulatedParts;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArticulatedParts_ESTest extends ArticulatedParts_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.setParameterType(796L);
      ArticulatedParts articulatedParts1 = new ArticulatedParts();
      boolean boolean0 = articulatedParts0.equalsImpl(articulatedParts1);
      assertEquals(796L, articulatedParts0.getParameterType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.setPartAttachedTo(4);
      ArticulatedParts articulatedParts1 = new ArticulatedParts();
      boolean boolean0 = articulatedParts0.equals(articulatedParts1);
      assertEquals(4, articulatedParts0.getPartAttachedTo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      assertEquals((short)0, articulatedParts0.getChangeIndicator());
      
      articulatedParts0.changeIndicator = (short) (-772);
      ArticulatedParts articulatedParts1 = new ArticulatedParts();
      boolean boolean0 = articulatedParts0.equals(articulatedParts1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      assertEquals((short)0, articulatedParts0.getRecordType());
      
      articulatedParts0.recordType = (short)2471;
      ArticulatedParts articulatedParts1 = new ArticulatedParts();
      boolean boolean0 = articulatedParts0.equals(articulatedParts1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.setParameterType((short) (-581));
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(39);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      articulatedParts0.marshal(byteBuffer0);
      assertEquals((-581L), articulatedParts0.getParameterType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.setRecordType((short) (-4276));
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(39);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      articulatedParts0.marshal(byteBuffer0);
      assertEquals((short) (-4276), articulatedParts0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.setParameterValue(1L);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1037);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      articulatedParts0.marshal(dataOutputStream0);
      assertEquals(1L, articulatedParts0.getParameterValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.recordType = (short) (-1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1037);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      articulatedParts0.marshal(dataOutputStream0);
      assertEquals("\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(0, articulatedParts0.getPartAttachedTo());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      assertEquals(0, articulatedParts0.getPartAttachedTo());
      
      articulatedParts0.partAttachedTo = (-772);
      int int0 = articulatedParts0.getMarshalledSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("2lDr(]%,_R58j@=u");
      articulatedParts0.unmarshal(byteBuffer0);
      assertEquals(17522, articulatedParts0.getPartAttachedTo());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      articulatedParts0.unmarshal(dataInputStream0);
      assertEquals((short)0, articulatedParts0.getChangeIndicator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      articulatedParts0.marshal(dataOutputStream0);
      assertEquals(0, articulatedParts0.getPartAttachedTo());
      assertEquals((short)0, articulatedParts0.getRecordType());
      assertEquals((short)0, articulatedParts0.getChangeIndicator());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.setRecordType((short)2929);
      short short0 = articulatedParts0.getRecordType();
      assertEquals((short)2929, short0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.setRecordType((short) (-1));
      short short0 = articulatedParts0.getRecordType();
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.setPartAttachedTo(164);
      int int0 = articulatedParts0.getPartAttachedTo();
      assertEquals(164, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.setPartAttachedTo((-3580));
      int int0 = articulatedParts0.getPartAttachedTo();
      assertEquals((-3580), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.setParameterValue(1L);
      long long0 = articulatedParts0.getParameterValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.setParameterValue((-1L));
      long long0 = articulatedParts0.getParameterValue();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.setParameterType((-1L));
      long long0 = articulatedParts0.getParameterType();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.setChangeIndicator((short)401);
      short short0 = articulatedParts0.getChangeIndicator();
      assertEquals((short)401, short0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.setChangeIndicator((short) (-581));
      short short0 = articulatedParts0.getChangeIndicator();
      assertEquals((short) (-581), short0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      boolean boolean0 = articulatedParts0.equalsImpl(articulatedParts0);
      assertEquals((short)0, articulatedParts0.getChangeIndicator());
      assertTrue(boolean0);
      assertEquals(0, articulatedParts0.getPartAttachedTo());
      assertEquals((short)0, articulatedParts0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      // Undeclared exception!
      try { 
        articulatedParts0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.ArticulatedParts", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate((short)0);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        articulatedParts0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.parameterType = (-2301L);
      ArticulatedParts articulatedParts1 = new ArticulatedParts();
      boolean boolean0 = articulatedParts0.equalsImpl(articulatedParts1);
      assertEquals(0, articulatedParts1.getPartAttachedTo());
      assertEquals((short)0, articulatedParts1.getRecordType());
      assertFalse(boolean0);
      assertEquals((short)0, articulatedParts1.getChangeIndicator());
      assertFalse(articulatedParts1.equals((Object)articulatedParts0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.parameterValue = (long) 16;
      ArticulatedParts articulatedParts1 = new ArticulatedParts();
      boolean boolean0 = articulatedParts0.equals(articulatedParts1);
      assertEquals((short)0, articulatedParts1.getChangeIndicator());
      assertEquals(0, articulatedParts1.getPartAttachedTo());
      assertEquals((short)0, articulatedParts1.getRecordType());
      assertFalse(boolean0);
      assertFalse(articulatedParts1.equals((Object)articulatedParts0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      ArticulatedParts articulatedParts1 = new ArticulatedParts();
      articulatedParts0.setPartAttachedTo((-1));
      boolean boolean0 = articulatedParts0.equalsImpl(articulatedParts1);
      assertEquals((-1), articulatedParts0.getPartAttachedTo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.setChangeIndicator((short)4566);
      ArticulatedParts articulatedParts1 = new ArticulatedParts();
      boolean boolean0 = articulatedParts0.equalsImpl(articulatedParts1);
      assertEquals((short)4566, articulatedParts0.getChangeIndicator());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      ArticulatedParts articulatedParts1 = new ArticulatedParts();
      articulatedParts0.setRecordType((short) (-772));
      boolean boolean0 = articulatedParts0.equalsImpl(articulatedParts1);
      assertEquals((short) (-772), articulatedParts0.getRecordType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      boolean boolean0 = articulatedParts0.equalsImpl(dataInputStream0);
      assertEquals((short)0, articulatedParts0.getChangeIndicator());
      assertFalse(boolean0);
      assertEquals(0, articulatedParts0.getPartAttachedTo());
      assertEquals((short)0, articulatedParts0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      Object object0 = new Object();
      boolean boolean0 = articulatedParts0.equals(object0);
      assertEquals((short)0, articulatedParts0.getChangeIndicator());
      assertFalse(boolean0);
      assertEquals(0, articulatedParts0.getPartAttachedTo());
      assertEquals((short)0, articulatedParts0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      ArticulatedParts articulatedParts1 = new ArticulatedParts();
      boolean boolean0 = articulatedParts0.equals(articulatedParts1);
      assertTrue(boolean0);
      assertEquals(0, articulatedParts1.getPartAttachedTo());
      assertEquals((short)0, articulatedParts1.getRecordType());
      assertEquals((short)0, articulatedParts1.getChangeIndicator());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      boolean boolean0 = articulatedParts0.equals(articulatedParts0);
      assertEquals(0, articulatedParts0.getPartAttachedTo());
      assertEquals((short)0, articulatedParts0.getRecordType());
      assertTrue(boolean0);
      assertEquals((short)0, articulatedParts0.getChangeIndicator());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      boolean boolean0 = articulatedParts0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals((short)0, articulatedParts0.getRecordType());
      assertEquals(0, articulatedParts0.getPartAttachedTo());
      assertEquals((short)0, articulatedParts0.getChangeIndicator());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.getParameterType();
      assertEquals(0, articulatedParts0.getPartAttachedTo());
      assertEquals((short)0, articulatedParts0.getRecordType());
      assertEquals((short)0, articulatedParts0.getChangeIndicator());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      short short0 = articulatedParts0.getChangeIndicator();
      assertEquals((short)0, short0);
      assertEquals(0, articulatedParts0.getPartAttachedTo());
      assertEquals((short)0, articulatedParts0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      int int0 = articulatedParts0.getPartAttachedTo();
      assertEquals((short)0, articulatedParts0.getRecordType());
      assertEquals(0, int0);
      assertEquals((short)0, articulatedParts0.getChangeIndicator());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.getParameterValue();
      assertEquals(0, articulatedParts0.getPartAttachedTo());
      assertEquals((short)0, articulatedParts0.getRecordType());
      assertEquals((short)0, articulatedParts0.getChangeIndicator());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(8);
      // Undeclared exception!
      try { 
        articulatedParts0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      short short0 = articulatedParts0.getRecordType();
      assertEquals(0, articulatedParts0.getPartAttachedTo());
      assertEquals((short)0, articulatedParts0.getChangeIndicator());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.setParameterValue((-1L));
      ArticulatedParts articulatedParts1 = new ArticulatedParts();
      boolean boolean0 = articulatedParts0.equalsImpl(articulatedParts1);
      assertEquals((-1L), articulatedParts0.getParameterValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      // Undeclared exception!
      try { 
        articulatedParts0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.ArticulatedParts", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArticulatedParts articulatedParts0 = new ArticulatedParts();
      articulatedParts0.setParameterType(796L);
      long long0 = articulatedParts0.getParameterType();
      assertEquals(796L, long0);
  }
}
