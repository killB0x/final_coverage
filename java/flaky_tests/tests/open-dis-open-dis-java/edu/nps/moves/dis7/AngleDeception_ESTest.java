/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 10:34:04 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.AngleDeception;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AngleDeception_ESTest extends AngleDeception_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.azimuthPullRate = (-715.7776F);
      AngleDeception angleDeception1 = new AngleDeception();
      angleDeception0.equals(angleDeception1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.elevationWidth = (-1.0F);
      angleDeception0.equalsImpl(angleDeception0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setElevationPullRate((-2441.0F));
      angleDeception0.equalsImpl(angleDeception0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.azimuthWidth = 1.0F;
      angleDeception0.equalsImpl(angleDeception0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setAzimuthOffset(2240.501F);
      AngleDeception angleDeception1 = new AngleDeception();
      angleDeception1.equalsImpl(angleDeception0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setAzimuthOffset(2240.501F);
      angleDeception0.equalsImpl(angleDeception0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setPadding2((short) (-1432));
      AngleDeception angleDeception1 = new AngleDeception();
      angleDeception1.equalsImpl(angleDeception0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setStateIndicator((short)307);
      AngleDeception angleDeception1 = new AngleDeception();
      angleDeception1.equalsImpl(angleDeception0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      AngleDeception angleDeception1 = new AngleDeception();
      angleDeception1.setEmitterNumber((short)890);
      angleDeception1.equalsImpl(angleDeception0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setPadding2((short) (-1432));
      AngleDeception angleDeception1 = new AngleDeception();
      angleDeception0.equals(angleDeception1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.beamNumber = (short) (-1432);
      AngleDeception angleDeception1 = new AngleDeception();
      angleDeception0.equals(angleDeception1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      AngleDeception angleDeception1 = new AngleDeception();
      angleDeception1.padding = (-1492);
      angleDeception0.equalsImpl(angleDeception1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      AngleDeception angleDeception1 = new AngleDeception();
      angleDeception1.recordLength = (-2146525590);
      angleDeception0.equalsImpl(angleDeception1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      AngleDeception angleDeception1 = new AngleDeception();
      angleDeception1.recordType = (long) (short) (-1432);
      angleDeception1.equalsImpl(angleDeception0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(48);
      angleDeception0.elevationWidth = (float) 48;
      angleDeception0.marshal(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setAzimuthPullAcceleration((byte)96);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(65535);
      angleDeception0.marshal(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setAzimuthPullRate(2398.14F);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1266);
      angleDeception0.marshal(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.azimuthWidth = 2091.9172F;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1018);
      angleDeception0.marshal(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.azimuthOffset = (-629.5467F);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1126);
      angleDeception0.marshal(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.elevationOffset = (-1273.5042F);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(48);
      angleDeception0.marshal(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setStateIndicator((short)18630);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1018);
      angleDeception0.marshal(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.emitterNumber = (short) (-1031);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1123);
      angleDeception0.marshal(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("S@9@Ia_8a X", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      angleDeception0.setElevationPullAcceleration(48);
      angleDeception0.marshal(dataOutputStream0);
      assertEquals(48.0F, angleDeception0.getElevationPullAcceleration(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("S@9@Ia_8a X", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      angleDeception0.setAzimuthPullRate(644.0F);
      angleDeception0.marshal(dataOutputStream0);
      assertEquals(644.0F, angleDeception0.getAzimuthPullRate(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setAzimuthWidth((-4445L));
      MockFile mockFile0 = new MockFile("auuB*q/ckT&ecY~\"!Q", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      angleDeception0.marshal(dataOutputStream0);
      assertEquals((-4445.0F), angleDeception0.getAzimuthWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      angleDeception0.elevationWidth = (-1916.542F);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      angleDeception0.marshal(dataOutputStream0);
      assertEquals(48, angleDeception0.getRecordLength());
      assertEquals(0, angleDeception0.getPadding());
      assertEquals(3501L, angleDeception0.getRecordType());
      assertEquals((short)0, angleDeception0.getPadding2());
      assertEquals(0L, angleDeception0.getPadding3());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.elevationPullRate = 3491.29F;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      angleDeception0.marshal(dataOutputStream0);
      assertEquals("\u0000\u0000\r\uFFFD\u00000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000EZ4\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(48, angleDeception0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.elevationOffset = 2240.501F;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NG U)eFqz>-9a5");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      angleDeception0.marshal(dataOutputStream0);
      assertEquals(48, angleDeception0.getRecordLength());
      assertEquals(0L, angleDeception0.getPadding3());
      assertEquals(3501L, angleDeception0.getRecordType());
      assertEquals(0, angleDeception0.getPadding());
      assertEquals((short)0, angleDeception0.getPadding2());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setAzimuthOffset(583.8F);
      PipedInputStream pipedInputStream0 = new PipedInputStream(255);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      angleDeception0.marshal(dataOutputStream0);
      assertEquals(583.8F, angleDeception0.getAzimuthOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setPadding2((short) (-1432));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NG U)eFqz>-9a5");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      angleDeception0.marshal(dataOutputStream0);
      assertEquals((short) (-1432), angleDeception0.getPadding2());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setBeamNumber((short)4547);
      MockFile mockFile0 = new MockFile("auuB*q/ckT&ecY~\"!Q", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      angleDeception0.marshal(dataOutputStream0);
      assertEquals((short)4547, angleDeception0.getBeamNumber());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setStateIndicator((short)307);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NG U)eFqz>-9a5");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      angleDeception0.marshal(dataOutputStream0);
      assertEquals((short)307, angleDeception0.getStateIndicator());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      assertEquals(48, angleDeception0.getRecordLength());
      
      angleDeception0.recordLength = (int) (short) (-1832);
      int int0 = angleDeception0.getMarshalledSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.padding = 279;
      int int0 = angleDeception0.getMarshalledSize();
      assertEquals((short)0, angleDeception0.getPadding2());
      assertEquals(48, angleDeception0.getRecordLength());
      assertEquals(48, int0);
      assertEquals(3501L, angleDeception0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      assertEquals(48, angleDeception0.getRecordLength());
      
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      angleDeception0.unmarshal(dataInputStream0);
      assertEquals(0L, angleDeception0.getPadding3());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.marshal((DataOutputStream) null);
      assertEquals(48, angleDeception0.getRecordLength());
      assertEquals(0L, angleDeception0.getPadding3());
      assertEquals(3501L, angleDeception0.getRecordType());
      assertEquals((short)0, angleDeception0.getPadding2());
      assertEquals(0, angleDeception0.getPadding());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setStateIndicator((short)25099);
      short short0 = angleDeception0.getStateIndicator();
      assertEquals((short)25099, short0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setStateIndicator((short) (-446));
      short short0 = angleDeception0.getStateIndicator();
      assertEquals((short) (-446), short0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      assertEquals(3501L, angleDeception0.getRecordType());
      
      angleDeception0.recordType = (-1L);
      long long0 = angleDeception0.getRecordType();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      assertEquals(3501L, angleDeception0.getRecordType());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1489);
      angleDeception0.unmarshal(byteBuffer0);
      int int0 = angleDeception0.getRecordLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      assertEquals(48, angleDeception0.getRecordLength());
      
      angleDeception0.setRecordLength((-1));
      int int0 = angleDeception0.getRecordLength();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setPadding2((short)23510);
      short short0 = angleDeception0.getPadding2();
      assertEquals((short)23510, short0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setPadding2((short) (-3204));
      short short0 = angleDeception0.getPadding2();
      assertEquals((short) (-3204), short0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.padding = 279;
      int int0 = angleDeception0.getPadding();
      assertEquals(279, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setPadding((short) (-1));
      int int0 = angleDeception0.getPadding();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setEmitterNumber((short)307);
      short short0 = angleDeception0.getEmitterNumber();
      assertEquals((short)307, short0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setEmitterNumber((short) (-377));
      short short0 = angleDeception0.getEmitterNumber();
      assertEquals((short) (-377), short0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.elevationWidth = (float) 48;
      float float0 = angleDeception0.getElevationWidth();
      assertEquals(48.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.elevationWidth = (-1916.542F);
      float float0 = angleDeception0.getElevationWidth();
      assertEquals((-1916.542F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.elevationPullRate = 3491.29F;
      float float0 = angleDeception0.getElevationPullRate();
      assertEquals(3491.29F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setElevationPullRate((-4445L));
      float float0 = angleDeception0.getElevationPullRate();
      assertEquals((-4445.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setElevationPullAcceleration(1603.43F);
      float float0 = angleDeception0.getElevationPullAcceleration();
      assertEquals(1603.43F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setElevationPullAcceleration((-405.57376F));
      float float0 = angleDeception0.getElevationPullAcceleration();
      assertEquals((-405.57376F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.elevationOffset = 2240.501F;
      float float0 = angleDeception0.getElevationOffset();
      assertEquals(2240.501F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setElevationOffset((-1.0F));
      float float0 = angleDeception0.getElevationOffset();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setBeamNumber((short)2443);
      short short0 = angleDeception0.getBeamNumber();
      assertEquals((short)2443, short0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.beamNumber = (short) (-1432);
      short short0 = angleDeception0.getBeamNumber();
      assertEquals((short) (-1432), short0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.azimuthWidth = 1.0F;
      float float0 = angleDeception0.getAzimuthWidth();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setAzimuthWidth((-4445L));
      float float0 = angleDeception0.getAzimuthWidth();
      assertEquals((-4445.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setAzimuthPullRate((short)2023);
      float float0 = angleDeception0.getAzimuthPullRate();
      assertEquals(2023.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.azimuthPullRate = (-715.7776F);
      float float0 = angleDeception0.getAzimuthPullRate();
      assertEquals((-715.7776F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.azimuthPullAcceleration = 1.0F;
      float float0 = angleDeception0.getAzimuthPullAcceleration();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setAzimuthPullAcceleration((-2203.8481F));
      float float0 = angleDeception0.getAzimuthPullAcceleration();
      assertEquals((-2203.8481F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setAzimuthOffset(2240.501F);
      float float0 = angleDeception0.getAzimuthOffset();
      assertEquals(2240.501F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setAzimuthOffset((-1537.0784F));
      float float0 = angleDeception0.getAzimuthOffset();
      assertEquals((-1537.0784F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(48);
      angleDeception0.marshal(byteBuffer0);
      // Undeclared exception!
      try { 
        angleDeception0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      // Undeclared exception!
      try { 
        angleDeception0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.AngleDeception", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        angleDeception0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      // Undeclared exception!
      try { 
        angleDeception0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.AngleDeception", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      assertEquals(0L, angleDeception0.getPadding3());
      
      angleDeception0.padding3 = (-1L);
      AngleDeception angleDeception1 = new AngleDeception();
      boolean boolean0 = angleDeception0.equalsImpl(angleDeception1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.elevationPullAcceleration = (-1.0F);
      AngleDeception angleDeception1 = new AngleDeception();
      angleDeception0.equalsImpl(angleDeception1);
      assertEquals(3501L, angleDeception1.getRecordType());
      assertEquals((short)0, angleDeception1.getPadding2());
      assertEquals(48, angleDeception1.getRecordLength());
      assertEquals(0L, angleDeception1.getPadding3());
      assertEquals((short)0, angleDeception0.getPadding2());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      AngleDeception angleDeception1 = new AngleDeception();
      assertTrue(angleDeception1.equals((Object)angleDeception0));
      
      angleDeception1.elevationPullRate = (float) 3501L;
      angleDeception0.equalsImpl(angleDeception1);
      assertEquals(3501L, angleDeception0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      AngleDeception angleDeception1 = new AngleDeception();
      assertTrue(angleDeception1.equals((Object)angleDeception0));
      
      angleDeception1.elevationWidth = (-1.0F);
      angleDeception0.equalsImpl(angleDeception1);
      assertEquals(48, angleDeception0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      AngleDeception angleDeception1 = new AngleDeception();
      assertTrue(angleDeception1.equals((Object)angleDeception0));
      
      angleDeception1.elevationOffset = (-910.11F);
      angleDeception1.equalsImpl(angleDeception0);
      assertEquals(48, angleDeception0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.azimuthPullRate = 1204.7F;
      AngleDeception angleDeception1 = new AngleDeception();
      boolean boolean0 = angleDeception0.equalsImpl(angleDeception1);
      assertFalse(angleDeception1.equals((Object)angleDeception0));
      assertEquals(3501L, angleDeception1.getRecordType());
      assertEquals((short)0, angleDeception1.getPadding2());
      assertFalse(boolean0);
      assertEquals(48, angleDeception1.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.azimuthWidth = 1.0F;
      AngleDeception angleDeception1 = new AngleDeception();
      boolean boolean0 = angleDeception0.equalsImpl(angleDeception1);
      assertEquals(48, angleDeception1.getRecordLength());
      assertEquals(0L, angleDeception1.getPadding3());
      assertFalse(boolean0);
      assertFalse(angleDeception1.equals((Object)angleDeception0));
      assertEquals(3501L, angleDeception1.getRecordType());
      assertEquals(0, angleDeception1.getPadding());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.beamNumber = (short) (-1432);
      AngleDeception angleDeception1 = new AngleDeception();
      boolean boolean0 = angleDeception1.equalsImpl(angleDeception0);
      assertFalse(angleDeception0.equals((Object)angleDeception1));
      assertEquals(0L, angleDeception1.getPadding3());
      assertEquals(3501L, angleDeception1.getRecordType());
      assertFalse(boolean0);
      assertEquals(48, angleDeception1.getRecordLength());
      assertEquals((short)0, angleDeception1.getPadding2());
      assertEquals(0, angleDeception1.getPadding());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      AngleDeception angleDeception1 = new AngleDeception();
      angleDeception1.setEmitterNumber((short)965);
      boolean boolean0 = angleDeception0.equalsImpl(angleDeception1);
      assertEquals((short)965, angleDeception1.getEmitterNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      AngleDeception angleDeception1 = new AngleDeception();
      angleDeception1.setRecordType(2205L);
      boolean boolean0 = angleDeception0.equalsImpl(angleDeception1);
      assertEquals(2205L, angleDeception1.getRecordType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      boolean boolean0 = angleDeception0.equalsImpl((Object) null);
      assertEquals(3501L, angleDeception0.getRecordType());
      assertEquals(0, angleDeception0.getPadding());
      assertEquals((short)0, angleDeception0.getPadding2());
      assertFalse(boolean0);
      assertEquals(48, angleDeception0.getRecordLength());
      assertEquals(0L, angleDeception0.getPadding3());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      AngleDeception angleDeception1 = new AngleDeception();
      boolean boolean0 = angleDeception0.equals(angleDeception1);
      assertEquals(48, angleDeception1.getRecordLength());
      assertEquals(0, angleDeception1.getPadding());
      assertTrue(boolean0);
      assertEquals(3501L, angleDeception1.getRecordType());
      assertEquals(0L, angleDeception1.getPadding3());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      boolean boolean0 = angleDeception0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals((short)0, angleDeception0.getPadding2());
      assertEquals(3501L, angleDeception0.getRecordType());
      assertEquals(0, angleDeception0.getPadding());
      assertEquals(48, angleDeception0.getRecordLength());
      assertEquals(0L, angleDeception0.getPadding3());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      boolean boolean0 = angleDeception0.equals(angleDeception0);
      assertEquals((short)0, angleDeception0.getPadding2());
      assertTrue(boolean0);
      assertEquals(3501L, angleDeception0.getRecordType());
      assertEquals(0, angleDeception0.getPadding());
      assertEquals(48, angleDeception0.getRecordLength());
      assertEquals(0L, angleDeception0.getPadding3());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      Object object0 = new Object();
      boolean boolean0 = angleDeception0.equals(object0);
      assertEquals(0L, angleDeception0.getPadding3());
      assertEquals(3501L, angleDeception0.getRecordType());
      assertFalse(boolean0);
      assertEquals(48, angleDeception0.getRecordLength());
      assertEquals(0, angleDeception0.getPadding());
      assertEquals((short)0, angleDeception0.getPadding2());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      float float0 = angleDeception0.getAzimuthWidth();
      assertEquals(3501L, angleDeception0.getRecordType());
      assertEquals(0L, angleDeception0.getPadding3());
      assertEquals((short)0, angleDeception0.getPadding2());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, angleDeception0.getPadding());
      assertEquals(48, angleDeception0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setRecordLength(1018);
      AngleDeception angleDeception1 = new AngleDeception();
      boolean boolean0 = angleDeception1.equalsImpl(angleDeception0);
      assertEquals(1018, angleDeception0.getRecordLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      long long0 = angleDeception0.getPadding3();
      assertEquals((short)0, angleDeception0.getPadding2());
      assertEquals(3501L, angleDeception0.getRecordType());
      assertEquals(0L, long0);
      assertEquals(48, angleDeception0.getRecordLength());
      assertEquals(0, angleDeception0.getPadding());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      assertEquals(48, angleDeception0.getRecordLength());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(4109);
      angleDeception0.unmarshal(byteBuffer0);
      angleDeception0.getRecordType();
      assertEquals((short)0, angleDeception0.getEmitterNumber());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      float float0 = angleDeception0.getElevationWidth();
      assertEquals(3501L, angleDeception0.getRecordType());
      assertEquals(0L, angleDeception0.getPadding3());
      assertEquals(48, angleDeception0.getRecordLength());
      assertEquals((short)0, angleDeception0.getPadding2());
      assertEquals(0, angleDeception0.getPadding());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setElevationWidth((-1.0F));
      assertEquals((-1.0F), angleDeception0.getElevationWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.getBeamNumber();
      assertEquals(0, angleDeception0.getPadding());
      assertEquals(0L, angleDeception0.getPadding3());
      assertEquals(3501L, angleDeception0.getRecordType());
      assertEquals((short)0, angleDeception0.getPadding2());
      assertEquals(48, angleDeception0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      float float0 = angleDeception0.getAzimuthOffset();
      assertEquals(0, angleDeception0.getPadding());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(48, angleDeception0.getRecordLength());
      assertEquals(3501L, angleDeception0.getRecordType());
      assertEquals((short)0, angleDeception0.getPadding2());
      assertEquals(0L, angleDeception0.getPadding3());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.getEmitterNumber();
      assertEquals(3501L, angleDeception0.getRecordType());
      assertEquals(48, angleDeception0.getRecordLength());
      assertEquals((short)0, angleDeception0.getPadding2());
      assertEquals(0, angleDeception0.getPadding());
      assertEquals(0L, angleDeception0.getPadding3());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setBeamNumber((short)1);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1123);
      angleDeception0.marshal(byteBuffer0);
      assertEquals((short)1, angleDeception0.getBeamNumber());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setAzimuthOffset((short)25099);
      AngleDeception angleDeception1 = new AngleDeception();
      boolean boolean0 = angleDeception0.equalsImpl(angleDeception1);
      assertEquals(25099.0F, angleDeception0.getAzimuthOffset(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setAzimuthPullAcceleration((-2035.0F));
      AngleDeception angleDeception1 = new AngleDeception();
      boolean boolean0 = angleDeception0.equalsImpl(angleDeception1);
      assertEquals((-2035.0F), angleDeception0.getAzimuthPullAcceleration(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.getStateIndicator();
      assertEquals(0, angleDeception0.getPadding());
      assertEquals(48, angleDeception0.getRecordLength());
      assertEquals((short)0, angleDeception0.getPadding2());
      assertEquals(3501L, angleDeception0.getRecordType());
      assertEquals(0L, angleDeception0.getPadding3());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      int int0 = angleDeception0.getRecordLength();
      assertEquals(0L, angleDeception0.getPadding3());
      assertEquals(48, int0);
      assertEquals((short)0, angleDeception0.getPadding2());
      assertEquals(3501L, angleDeception0.getRecordType());
      assertEquals(0, angleDeception0.getPadding());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      float float0 = angleDeception0.getElevationPullRate();
      assertEquals(0, angleDeception0.getPadding());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0L, angleDeception0.getPadding3());
      assertEquals(3501L, angleDeception0.getRecordType());
      assertEquals((short)0, angleDeception0.getPadding2());
      assertEquals(48, angleDeception0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      float float0 = angleDeception0.getElevationPullAcceleration();
      assertEquals((short)0, angleDeception0.getPadding2());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(48, angleDeception0.getRecordLength());
      assertEquals(0L, angleDeception0.getPadding3());
      assertEquals(0, angleDeception0.getPadding());
      assertEquals(3501L, angleDeception0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      assertEquals(0L, angleDeception0.getPadding3());
      
      angleDeception0.setPadding3(1L);
      long long0 = angleDeception0.getPadding3();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setElevationPullAcceleration((-1234.423F));
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2436);
      angleDeception0.marshal(byteBuffer0);
      assertEquals((-1234.423F), angleDeception0.getElevationPullAcceleration(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setStateIndicator((short)19141);
      AngleDeception angleDeception1 = new AngleDeception();
      boolean boolean0 = angleDeception0.equalsImpl(angleDeception1);
      assertEquals((short)19141, angleDeception0.getStateIndicator());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      int int0 = angleDeception0.getPadding();
      assertEquals(0, int0);
      assertEquals((short)0, angleDeception0.getPadding2());
      assertEquals(3501L, angleDeception0.getRecordType());
      assertEquals(0L, angleDeception0.getPadding3());
      assertEquals(48, angleDeception0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      float float0 = angleDeception0.getElevationOffset();
      assertEquals(0, angleDeception0.getPadding());
      assertEquals(48, angleDeception0.getRecordLength());
      assertEquals(0L, angleDeception0.getPadding3());
      assertEquals(3501L, angleDeception0.getRecordType());
      assertEquals((short)0, angleDeception0.getPadding2());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      long long0 = angleDeception0.getRecordType();
      assertEquals(0, angleDeception0.getPadding());
      assertEquals((short)0, angleDeception0.getPadding2());
      assertEquals(0L, angleDeception0.getPadding3());
      assertEquals(3501L, long0);
      assertEquals(48, angleDeception0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      float float0 = angleDeception0.getAzimuthPullRate();
      assertEquals(0L, angleDeception0.getPadding3());
      assertEquals(48, angleDeception0.getRecordLength());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(3501L, angleDeception0.getRecordType());
      assertEquals(0, angleDeception0.getPadding());
      assertEquals((short)0, angleDeception0.getPadding2());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      float float0 = angleDeception0.getAzimuthPullAcceleration();
      assertEquals(0L, angleDeception0.getPadding3());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, angleDeception0.getPadding2());
      assertEquals(3501L, angleDeception0.getRecordType());
      assertEquals(0, angleDeception0.getPadding());
      assertEquals(48, angleDeception0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      short short0 = angleDeception0.getPadding2();
      assertEquals(0L, angleDeception0.getPadding3());
      assertEquals((short)0, short0);
      assertEquals(48, angleDeception0.getRecordLength());
      assertEquals(0, angleDeception0.getPadding());
      assertEquals(3501L, angleDeception0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      AngleDeception angleDeception0 = new AngleDeception();
      angleDeception0.setPadding((-1492));
      AngleDeception angleDeception1 = new AngleDeception();
      boolean boolean0 = angleDeception0.equalsImpl(angleDeception1);
      assertEquals((-1492), angleDeception0.getPadding());
      assertFalse(boolean0);
  }
}
