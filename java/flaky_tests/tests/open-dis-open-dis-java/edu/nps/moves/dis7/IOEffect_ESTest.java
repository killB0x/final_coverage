/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 11:34:55 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.EntityID;
import edu.nps.moves.dis7.IOEffect;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IOEffect_ESTest extends IOEffect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      IOEffect iOEffect1 = new IOEffect();
      assertEquals(0, iOEffect1.getPadding());
      
      iOEffect1.padding = 1092;
      boolean boolean0 = iOEffect0.equalsImpl(iOEffect1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      IOEffect iOEffect1 = new IOEffect();
      iOEffect1.setIoProcess(16);
      boolean boolean0 = iOEffect0.equalsImpl(iOEffect1);
      assertEquals(16, iOEffect1.getIoProcess());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.setIoProcess(16);
      boolean boolean0 = iOEffect0.equalsImpl(iOEffect0);
      assertEquals(16, iOEffect0.getIoProcess());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.setIoEffectDuration(2);
      IOEffect iOEffect1 = new IOEffect();
      boolean boolean0 = iOEffect1.equals(iOEffect0);
      assertEquals(2, iOEffect0.getIoEffectDuration());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      IOEffect iOEffect1 = new IOEffect();
      assertTrue(iOEffect1.equals((Object)iOEffect0));
      
      iOEffect1.ioEffectDutyCycle = (short)270;
      boolean boolean0 = iOEffect0.equals(iOEffect1);
      assertFalse(iOEffect1.equals((Object)iOEffect0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      IOEffect iOEffect1 = new IOEffect();
      iOEffect1.setIoLinkType((short) (-1));
      boolean boolean0 = iOEffect1.equals(iOEffect0);
      assertEquals((short) (-1), iOEffect1.getIoLinkType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      IOEffect iOEffect1 = new IOEffect();
      iOEffect1.setIoStatus((short)335);
      boolean boolean0 = iOEffect0.equalsImpl(iOEffect1);
      assertEquals((short)335, iOEffect1.getIoStatus());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      IOEffect iOEffect1 = new IOEffect();
      iOEffect1.setRecordLength((-4212));
      boolean boolean0 = iOEffect0.equalsImpl(iOEffect1);
      assertEquals((-4212), iOEffect1.getRecordLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      IOEffect iOEffect1 = new IOEffect();
      assertEquals(5500L, iOEffect1.getRecordType());
      
      iOEffect1.recordType = (long) 21;
      boolean boolean0 = iOEffect0.equalsImpl(iOEffect1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      assertEquals(0, iOEffect0.getPadding());
      
      iOEffect0.padding = 1799;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2596);
      iOEffect0.marshal(byteBuffer0);
      assertEquals(5500L, iOEffect0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.ioEffectDuration = 1213;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("`S4M%amER{Ov6>9[+G8");
      // Undeclared exception!
      try { 
        iOEffect0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(722);
      iOEffect0.ioLinkType = (short) (-3684);
      iOEffect0.marshal(byteBuffer0);
      assertEquals(16, iOEffect0.getRecordLength());
      assertEquals(0, iOEffect0.getPadding());
      assertEquals(5500L, iOEffect0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.ioStatus = (short) (-1164);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("`S4M%amER{Ov6>9[+G8");
      // Undeclared exception!
      try { 
        iOEffect0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      MockFile mockFile0 = new MockFile("edu.nps.moves.dis7.EntityID");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      iOEffect0.setPadding(21);
      iOEffect0.marshal(dataOutputStream0);
      assertEquals(21, iOEffect0.getPadding());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((short)722);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      iOEffect0.setIoEffectDuration((short)722);
      iOEffect0.marshal(dataOutputStream0);
      assertEquals(722, iOEffect0.getIoEffectDuration());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.ioLinkType = (short) (-4212);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      iOEffect0.marshal(dataOutputStream0);
      assertEquals("\u0000\u0000\u0015|\u0000\u0010\u0000\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.ioStatus = (short)2689;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      iOEffect0.marshal(dataOutputStream0);
      assertEquals("\u0000\u0000\u0015|\u0000\u0010\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(5500L, iOEffect0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("edu.nps.moves.dis7.IOEffect");
      iOEffect0.unmarshal(byteBuffer0);
      int int0 = iOEffect0.getMarshalledSize();
      assertEquals(28272, iOEffect0.getRecordLength());
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      assertEquals(16, iOEffect0.getRecordLength());
      
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      iOEffect0.unmarshal(dataInputStream0);
      assertEquals(0, iOEffect0.getPadding());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      assertEquals(5500L, iOEffect0.getRecordType());
      
      iOEffect0.recordType = 0L;
      iOEffect0.getRecordType();
      assertEquals(16, iOEffect0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      assertEquals(16, iOEffect0.getRecordLength());
      
      iOEffect0.setRecordLength((short)0);
      int int0 = iOEffect0.getRecordLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.recordLength = (-3647);
      int int0 = iOEffect0.getRecordLength();
      assertEquals((-3647), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.setPadding(597);
      int int0 = iOEffect0.getPadding();
      assertEquals(597, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.padding = (-2147091913);
      int int0 = iOEffect0.getPadding();
      assertEquals((-2147091913), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.ioStatus = (short)255;
      short short0 = iOEffect0.getIoStatus();
      assertEquals((short)255, short0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.ioStatus = (short) (-1992);
      short short0 = iOEffect0.getIoStatus();
      assertEquals((short) (-1992), short0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.setIoProcess(351);
      int int0 = iOEffect0.getIoProcess();
      assertEquals(351, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.setIoProcess((-1376));
      int int0 = iOEffect0.getIoProcess();
      assertEquals((-1376), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.setIoLinkType((short)255);
      short short0 = iOEffect0.getIoLinkType();
      assertEquals((short)255, short0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.ioLinkType = (short) (-3684);
      short short0 = iOEffect0.getIoLinkType();
      assertEquals((short) (-3684), short0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.setIoEffectDutyCycle((short)3504);
      short short0 = iOEffect0.getIoEffectDutyCycle();
      assertEquals((short)3504, short0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.ioEffectDutyCycle = (short) (-376);
      short short0 = iOEffect0.getIoEffectDutyCycle();
      assertEquals((short) (-376), short0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.ioEffectDuration = 3;
      int int0 = iOEffect0.getIoEffectDuration();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.ioEffectDuration = (-1);
      int int0 = iOEffect0.getIoEffectDuration();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("edu.nps.moves.dis7.IOEffect");
      iOEffect0.unmarshal(byteBuffer0);
      iOEffect0.getIoEffect();
      assertEquals(26995, iOEffect0.getIoEffectDuration());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3);
      // Undeclared exception!
      try { 
        iOEffect0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.ioEffect = null;
      // Undeclared exception!
      try { 
        iOEffect0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.IOEffect", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.setIoEffect((EntityID) null);
      // Undeclared exception!
      try { 
        iOEffect0.equalsImpl(iOEffect0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.IOEffect", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      assertEquals(0, iOEffect0.getPadding());
      
      iOEffect0.padding = 255;
      IOEffect iOEffect1 = new IOEffect();
      boolean boolean0 = iOEffect0.equalsImpl(iOEffect1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      IOEffect iOEffect1 = new IOEffect();
      iOEffect1.setIoEffectDuration((-609));
      boolean boolean0 = iOEffect0.equalsImpl(iOEffect1);
      assertEquals((-609), iOEffect1.getIoEffectDuration());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.ioEffectDutyCycle = (short)255;
      IOEffect iOEffect1 = new IOEffect();
      boolean boolean0 = iOEffect0.equalsImpl(iOEffect1);
      assertEquals(5500L, iOEffect1.getRecordType());
      assertFalse(boolean0);
      assertFalse(iOEffect1.equals((Object)iOEffect0));
      assertEquals(16, iOEffect1.getRecordLength());
      assertEquals(0, iOEffect1.getPadding());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      EntityID entityID0 = iOEffect0.ioEffect;
      entityID0.setApplicationID(2);
      IOEffect iOEffect1 = new IOEffect();
      boolean boolean0 = iOEffect0.equalsImpl(iOEffect1);
      assertEquals(16, iOEffect1.getRecordLength());
      assertEquals(0, iOEffect1.getPadding());
      assertEquals(5500L, iOEffect1.getRecordType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.setIoLinkType((short)2);
      IOEffect iOEffect1 = new IOEffect();
      boolean boolean0 = iOEffect0.equalsImpl(iOEffect1);
      assertEquals((short)2, iOEffect0.getIoLinkType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      IOEffect iOEffect1 = new IOEffect();
      iOEffect1.setRecordLength(21);
      boolean boolean0 = iOEffect0.equalsImpl(iOEffect1);
      assertEquals(21, iOEffect1.getRecordLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.setRecordType((short)2);
      IOEffect iOEffect1 = new IOEffect();
      boolean boolean0 = iOEffect0.equalsImpl(iOEffect1);
      assertEquals(2L, iOEffect0.getRecordType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      Object object0 = new Object();
      boolean boolean0 = iOEffect0.equalsImpl(object0);
      assertFalse(boolean0);
      assertEquals(0, iOEffect0.getPadding());
      assertEquals(5500L, iOEffect0.getRecordType());
      assertEquals(16, iOEffect0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      IOEffect iOEffect1 = new IOEffect();
      boolean boolean0 = iOEffect1.equals(iOEffect0);
      assertTrue(boolean0);
      assertEquals(5500L, iOEffect1.getRecordType());
      assertEquals(0, iOEffect1.getPadding());
      assertEquals(16, iOEffect1.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      boolean boolean0 = iOEffect0.equals((Object) null);
      assertEquals(5500L, iOEffect0.getRecordType());
      assertFalse(boolean0);
      assertEquals(0, iOEffect0.getPadding());
      assertEquals(16, iOEffect0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      boolean boolean0 = iOEffect0.equals(iOEffect0);
      assertTrue(boolean0);
      assertEquals(0, iOEffect0.getPadding());
      assertEquals(16, iOEffect0.getRecordLength());
      assertEquals(5500L, iOEffect0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      Object object0 = new Object();
      boolean boolean0 = iOEffect0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0, iOEffect0.getPadding());
      assertEquals(5500L, iOEffect0.getRecordType());
      assertEquals(16, iOEffect0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      long long0 = iOEffect0.getRecordType();
      assertEquals(5500L, long0);
      assertEquals(16, iOEffect0.getRecordLength());
      assertEquals(0, iOEffect0.getPadding());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      int int0 = iOEffect0.getIoProcess();
      assertEquals(0, int0);
      assertEquals(16, iOEffect0.getRecordLength());
      assertEquals(0, iOEffect0.getPadding());
      assertEquals(5500L, iOEffect0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.getIoStatus();
      assertEquals(16, iOEffect0.getRecordLength());
      assertEquals(5500L, iOEffect0.getRecordType());
      assertEquals(0, iOEffect0.getPadding());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.getIoEffectDutyCycle();
      assertEquals(16, iOEffect0.getRecordLength());
      assertEquals(0, iOEffect0.getPadding());
      assertEquals(5500L, iOEffect0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.getIoLinkType();
      assertEquals(5500L, iOEffect0.getRecordType());
      assertEquals(0, iOEffect0.getPadding());
      assertEquals(16, iOEffect0.getRecordLength());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      // Undeclared exception!
      try { 
        iOEffect0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.IOEffect", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.setIoStatus((short)255);
      IOEffect iOEffect1 = new IOEffect();
      boolean boolean0 = iOEffect0.equalsImpl(iOEffect1);
      assertEquals((short)255, iOEffect0.getIoStatus());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      int int0 = iOEffect0.getPadding();
      assertEquals(16, iOEffect0.getRecordLength());
      assertEquals(0, int0);
      assertEquals(5500L, iOEffect0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      int int0 = iOEffect0.getRecordLength();
      assertEquals(5500L, iOEffect0.getRecordType());
      assertEquals(0, iOEffect0.getPadding());
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      int int0 = iOEffect0.getIoEffectDuration();
      assertEquals(16, iOEffect0.getRecordLength());
      assertEquals(0, int0);
      assertEquals(0, iOEffect0.getPadding());
      assertEquals(5500L, iOEffect0.getRecordType());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.setIoProcess(3380);
      IOEffect iOEffect1 = new IOEffect();
      boolean boolean0 = iOEffect0.equalsImpl(iOEffect1);
      assertEquals(3380, iOEffect0.getIoProcess());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      // Undeclared exception!
      try { 
        iOEffect0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.IOEffect", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      iOEffect0.marshal(dataOutputStream0);
      assertEquals(16, iOEffect0.getRecordLength());
      assertEquals(5500L, iOEffect0.getRecordType());
      assertEquals(0, iOEffect0.getPadding());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      iOEffect0.getIoEffect();
      assertEquals(5500L, iOEffect0.getRecordType());
      assertEquals(16, iOEffect0.getRecordLength());
      assertEquals(0, iOEffect0.getPadding());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      IOEffect iOEffect0 = new IOEffect();
      assertEquals(5500L, iOEffect0.getRecordType());
      
      iOEffect0.setRecordType((-1L));
      long long0 = iOEffect0.getRecordType();
      assertEquals((-1L), long0);
  }
}
