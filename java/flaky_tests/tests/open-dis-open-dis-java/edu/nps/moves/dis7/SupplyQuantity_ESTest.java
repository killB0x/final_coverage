/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 15:08:30 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.EntityType;
import edu.nps.moves.dis7.SupplyQuantity;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SupplyQuantity_ESTest extends SupplyQuantity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("edu.nps.moves.dis7.EntityType");
      supplyQuantity0.marshal(byteBuffer0);
      assertEquals(12, supplyQuantity0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      supplyQuantity0.setSupplyType((EntityType) null);
      EntityType entityType0 = supplyQuantity0.getSupplyType();
      assertNull(entityType0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      EntityType entityType0 = supplyQuantity0.supplyType;
      entityType0.subcategory = (short) (-1053);
      EntityType entityType1 = supplyQuantity0.getSupplyType();
      assertSame(entityType1, entityType0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      supplyQuantity0.setQuantity((short)1);
      float float0 = supplyQuantity0.getQuantity();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      supplyQuantity0.quantity = (-1.0F);
      float float0 = supplyQuantity0.getQuantity();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        supplyQuantity0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      // Undeclared exception!
      try { 
        supplyQuantity0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EntityType", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      // Undeclared exception!
      try { 
        supplyQuantity0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.EntityType", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      SupplyQuantity supplyQuantity1 = new SupplyQuantity();
      supplyQuantity0.setQuantity((-1041.0F));
      boolean boolean0 = supplyQuantity1.equalsImpl(supplyQuantity0);
      assertEquals((-1041.0F), supplyQuantity0.getQuantity(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      EntityType entityType0 = supplyQuantity0.getSupplyType();
      entityType0.setCategory((short) (-1));
      SupplyQuantity supplyQuantity1 = new SupplyQuantity();
      boolean boolean0 = supplyQuantity1.equalsImpl(supplyQuantity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      boolean boolean0 = supplyQuantity0.equalsImpl(supplyQuantity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      SupplyQuantity supplyQuantity1 = new SupplyQuantity();
      supplyQuantity0.setQuantity((-1041.0F));
      boolean boolean0 = supplyQuantity0.equals(supplyQuantity1);
      assertEquals((-1041.0F), supplyQuantity0.getQuantity(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      Object object0 = new Object();
      boolean boolean0 = supplyQuantity0.equalsImpl(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      SupplyQuantity supplyQuantity1 = new SupplyQuantity();
      boolean boolean0 = supplyQuantity0.equals(supplyQuantity1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = supplyQuantity0.equals(dataInputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      boolean boolean0 = supplyQuantity0.equals(supplyQuantity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      boolean boolean0 = supplyQuantity0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      float float0 = supplyQuantity0.getQuantity();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      int int0 = supplyQuantity0.getMarshalledSize();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("[tXoa^DE[Mp/li");
      supplyQuantity0.unmarshal(byteBuffer0);
      EntityType entityType0 = supplyQuantity0.getSupplyType();
      assertEquals((short)127, entityType0.getEntityKind());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      supplyQuantity0.setSupplyType((EntityType) null);
      // Undeclared exception!
      try { 
        supplyQuantity0.getMarshalledSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.SupplyQuantity", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        supplyQuantity0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      supplyQuantity0.marshal((DataOutputStream) null);
      assertEquals(0.0F, supplyQuantity0.getQuantity(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SupplyQuantity supplyQuantity0 = new SupplyQuantity();
      supplyQuantity0.unmarshal((DataInputStream) null);
      assertEquals(12, supplyQuantity0.getMarshalledSize());
  }
}
