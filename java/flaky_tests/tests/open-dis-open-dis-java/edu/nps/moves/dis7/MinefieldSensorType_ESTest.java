/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 15:25:21 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.MinefieldSensorType;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MinefieldSensorType_ESTest extends MinefieldSensorType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      minefieldSensorType0.setSensorType(27);
      MinefieldSensorType minefieldSensorType1 = new MinefieldSensorType();
      boolean boolean0 = minefieldSensorType1.equals(minefieldSensorType0);
      assertEquals(27, minefieldSensorType0.getSensorType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      minefieldSensorType0.setSensorType((-1));
      int int0 = minefieldSensorType0.getMarshalledSize();
      assertEquals((-1), minefieldSensorType0.getSensorType());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      byte[] byteArray0 = new byte[9];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      minefieldSensorType0.unmarshal(byteBuffer0);
      assertEquals(0, minefieldSensorType0.getSensorType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      minefieldSensorType0.unmarshal(dataInputStream0);
      assertEquals(2, minefieldSensorType0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(817);
      minefieldSensorType0.marshal(byteBuffer0);
      assertTrue(byteBuffer0.hasArray());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      minefieldSensorType0.setSensorType(544);
      int int0 = minefieldSensorType0.getSensorType();
      assertEquals(544, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      minefieldSensorType0.setSensorType((-1));
      int int0 = minefieldSensorType0.getSensorType();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        minefieldSensorType0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        minefieldSensorType0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      boolean boolean0 = minefieldSensorType0.equalsImpl(minefieldSensorType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      minefieldSensorType0.setSensorType(27);
      MinefieldSensorType minefieldSensorType1 = new MinefieldSensorType();
      boolean boolean0 = minefieldSensorType0.equalsImpl(minefieldSensorType1);
      assertEquals(27, minefieldSensorType0.getSensorType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      boolean boolean0 = minefieldSensorType0.equalsImpl((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      Object object0 = new Object();
      boolean boolean0 = minefieldSensorType0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      MinefieldSensorType minefieldSensorType1 = new MinefieldSensorType();
      boolean boolean0 = minefieldSensorType1.equals(minefieldSensorType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      boolean boolean0 = minefieldSensorType0.equals(minefieldSensorType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      boolean boolean0 = minefieldSensorType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      minefieldSensorType0.unmarshal((DataInputStream) null);
      assertEquals(2, minefieldSensorType0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      int int0 = minefieldSensorType0.getSensorType();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      // Undeclared exception!
      try { 
        minefieldSensorType0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.MinefieldSensorType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      // Undeclared exception!
      try { 
        minefieldSensorType0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.MinefieldSensorType", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MinefieldSensorType minefieldSensorType0 = new MinefieldSensorType();
      minefieldSensorType0.marshal((DataOutputStream) null);
      assertEquals(2, minefieldSensorType0.getMarshalledSize());
  }
}
