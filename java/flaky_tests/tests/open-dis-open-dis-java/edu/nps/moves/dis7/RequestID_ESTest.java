/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 15:24:17 GMT 2022
 */

package edu.nps.moves.dis7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nps.moves.dis7.RequestID;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RequestID_ESTest extends RequestID_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RequestID requestID0 = new RequestID();
      requestID0.setRequestID((-1965L));
      RequestID requestID1 = new RequestID();
      boolean boolean0 = requestID1.equals(requestID0);
      assertEquals((-1965L), requestID0.getRequestID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RequestID requestID0 = new RequestID();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("R^}IoAM3S(bg#");
      requestID0.unmarshal(byteBuffer0);
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=13 cap=13]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RequestID requestID0 = new RequestID();
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      requestID0.marshal(byteBuffer0);
      assertEquals(0L, requestID0.getRequestID());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RequestID requestID0 = new RequestID();
      requestID0.requestID = 1L;
      long long0 = requestID0.getRequestID();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RequestID requestID0 = new RequestID();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)14);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      requestID0.unmarshal(dataInputStream0);
      long long0 = requestID0.getRequestID();
      assertEquals((-654311424L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RequestID requestID0 = new RequestID();
      // Undeclared exception!
      try { 
        requestID0.unmarshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.RequestID", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RequestID requestID0 = new RequestID();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        requestID0.marshal(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RequestID requestID0 = new RequestID();
      boolean boolean0 = requestID0.equalsImpl(requestID0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RequestID requestID0 = new RequestID();
      requestID0.requestID = (-73L);
      RequestID requestID1 = new RequestID();
      boolean boolean0 = requestID0.equalsImpl(requestID1);
      assertFalse(boolean0);
      assertFalse(requestID1.equals((Object)requestID0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RequestID requestID0 = new RequestID();
      boolean boolean0 = requestID0.equalsImpl((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RequestID requestID0 = new RequestID();
      Object object0 = new Object();
      boolean boolean0 = requestID0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RequestID requestID0 = new RequestID();
      boolean boolean0 = requestID0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RequestID requestID0 = new RequestID();
      boolean boolean0 = requestID0.equals(requestID0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RequestID requestID0 = new RequestID();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        requestID0.unmarshal(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RequestID requestID0 = new RequestID();
      long long0 = requestID0.getRequestID();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RequestID requestID0 = new RequestID();
      requestID0.marshal((DataOutputStream) null);
      assertEquals(4, requestID0.getMarshalledSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RequestID requestID0 = new RequestID();
      // Undeclared exception!
      try { 
        requestID0.marshal((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nps.moves.dis7.RequestID", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RequestID requestID0 = new RequestID();
      int int0 = requestID0.getMarshalledSize();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RequestID requestID0 = new RequestID();
      requestID0.unmarshal((DataInputStream) null);
      assertEquals(4, requestID0.getMarshalledSize());
  }
}
