/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 01:53:25 GMT 2022
 */

package com.google.cloud.spanner.pgadapter.parsers.copy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTColumnElement;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTFilename;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTFormatType;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTID;
import com.google.cloud.spanner.pgadapter.parsers.copy.Copy;
import com.google.cloud.spanner.pgadapter.parsers.copy.CopyDefaultVisitor;
import com.google.cloud.spanner.pgadapter.parsers.copy.CopyTreeParser;
import com.google.cloud.spanner.pgadapter.parsers.copy.CopyVisitor;
import com.google.cloud.spanner.pgadapter.parsers.copy.Node;
import com.google.cloud.spanner.pgadapter.parsers.copy.SimpleNode;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ASTFilename_ESTest extends ASTFilename_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ASTFilename aSTFilename0 = new ASTFilename(1);
      CopyTreeParser.CopyOptions copyTreeParser_CopyOptions0 = new CopyTreeParser.CopyOptions();
      copyTreeParser_CopyOptions0.setDelimiter('y');
      copyTreeParser_CopyOptions0.setDelimiter('&');
      CopyTreeParser copyTreeParser0 = new CopyTreeParser(copyTreeParser_CopyOptions0);
      Object object0 = aSTFilename0.jjtAccept(copyTreeParser0, copyTreeParser0);
      aSTFilename0.jjtAccept(copyTreeParser0, object0);
      copyTreeParser0.visit(aSTFilename0, (Object) "");
      aSTFilename0.setName("");
      aSTFilename0.toString();
      aSTFilename0.getName();
      aSTFilename0.setName("");
      aSTFilename0.jjtAccept(copyTreeParser0, copyTreeParser0);
      aSTFilename0.toString();
      aSTFilename0.getName();
      aSTFilename0.toString();
      aSTFilename0.setName(":%#YuM}X1ql~");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ASTFilename aSTFilename0 = new ASTFilename((Copy) null, 1);
      aSTFilename0.children = null;
      aSTFilename0.jjtSetValue("");
      aSTFilename0.toString("");
      String string0 = aSTFilename0.getName();
      CopyTreeParser.CopyOptions copyTreeParser_CopyOptions0 = new CopyTreeParser.CopyOptions();
      CopyTreeParser copyTreeParser0 = new CopyTreeParser(copyTreeParser_CopyOptions0);
      ASTFilename aSTFilename1 = new ASTFilename((Copy) null, 1);
      Object object0 = aSTFilename1.value;
      CopyTreeParser.CopyOptions.FromTo copyTreeParser_CopyOptions_FromTo0 = CopyTreeParser.CopyOptions.FromTo.TO;
      copyTreeParser_CopyOptions0.setFromTo(copyTreeParser_CopyOptions_FromTo0);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) aSTFilename0;
      nodeArray0[1] = (Node) aSTFilename1;
      nodeArray0[2] = (Node) aSTFilename1;
      nodeArray0[3] = (Node) aSTFilename0;
      nodeArray0[4] = (Node) aSTFilename0;
      aSTFilename1.jjtSetParent(nodeArray0[1]);
      nodeArray0[5] = (Node) aSTFilename0;
      nodeArray0[6] = (Node) aSTFilename1;
      aSTFilename1.children = nodeArray0;
      Object object1 = aSTFilename1.jjtAccept(copyTreeParser0, object0);
      Object object2 = aSTFilename0.jjtAccept(copyTreeParser0, object1);
      aSTFilename1.jjtAccept(copyTreeParser0, object2);
      String string1 = null;
      aSTFilename1.setName(string1);
      aSTFilename1.jjtAccept(copyTreeParser0, string0);
      String string2 = "";
      aSTFilename1.setName(string2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASTFilename aSTFilename0 = new ASTFilename((-33));
      CopyVisitor copyVisitor0 = null;
      // Undeclared exception!
      try { 
        aSTFilename0.jjtAccept((CopyVisitor) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ASTFilename aSTFilename0 = new ASTFilename(0);
      aSTFilename0.dump("CqYw");
      aSTFilename0.setName("T2");
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("`bD");
      simpleNode0.toString("`bD");
      aSTFilename0.jjtAddChild(simpleNode0, 0);
      aSTFilename0.toString((String) null);
      aSTFilename0.jjtSetParent(simpleNode0);
      aSTFilename0.toString();
      aSTFilename0.id = 0;
      aSTFilename0.toString();
      aSTFilename0.toString();
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      Object object0 = new Object();
      aSTFilename0.jjtAccept(copyDefaultVisitor0, object0);
      aSTFilename0.getName();
      aSTFilename0.getName();
      aSTFilename0.toString();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-1190));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASTFilename aSTFilename0 = new ASTFilename((Copy) null, 0);
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      Object object0 = aSTFilename0.value;
      Object object1 = aSTFilename0.jjtAccept(copyDefaultVisitor0, (Object) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ASTFilename aSTFilename0 = new ASTFilename((Copy) null, (-167));
      assertNull(aSTFilename0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      ASTFilename aSTFilename0 = new ASTFilename(0);
      String string0 = "";
      aSTFilename0.setName("");
      aSTFilename0.setName("com.google.cloud.spanner.pgadapter.parsers.copy.JJTCopyState");
      CopyTreeParser.CopyOptions copyTreeParser_CopyOptions0 = new CopyTreeParser.CopyOptions();
      CopyTreeParser copyTreeParser0 = new CopyTreeParser(copyTreeParser_CopyOptions0);
      Object object0 = aSTFilename0.value;
      aSTFilename0.jjtAccept(copyTreeParser0, (Object) null);
      StringReader stringReader0 = new StringReader("com.google.cloud.spanner.pgadapter.parsers.copy.JJTCopyState");
      Copy copy0 = null;
      try {
        copy0 = new Copy(stringReader0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ASTFilename aSTFilename0 = new ASTFilename(64);
      String string0 = aSTFilename0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ASTFilename aSTFilename0 = new ASTFilename((-2418));
      assertEquals(0, aSTFilename0.jjtGetNumChildren());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ASTFilename aSTFilename0 = new ASTFilename((-1152));
      ASTID aSTID0 = new ASTID((-1152));
      aSTFilename0.jjtSetParent(aSTID0);
      Object object0 = aSTFilename0.value;
      aSTFilename0.parser = null;
      aSTFilename0.value = null;
      aSTFilename0.toString();
      CopyTreeParser.CopyOptions copyTreeParser_CopyOptions0 = new CopyTreeParser.CopyOptions();
      CopyTreeParser copyTreeParser0 = new CopyTreeParser(copyTreeParser_CopyOptions0);
      aSTFilename0.jjtGetValue();
      ASTFormatType aSTFormatType0 = new ASTFormatType((Copy) null, 1);
      Object object1 = aSTFilename0.value;
      copyTreeParser0.visit(aSTFormatType0, (Object) null);
      aSTFilename0.jjtSetValue((Object) null);
      aSTFilename0.jjtAccept(copyTreeParser0, "Filename: null");
      aSTFilename0.getName();
      aSTFilename0.setName((String) null);
      String string0 = aSTFilename0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASTFilename aSTFilename0 = new ASTFilename(0);
      CopyTreeParser.CopyOptions copyTreeParser_CopyOptions0 = new CopyTreeParser.CopyOptions();
      CopyTreeParser copyTreeParser0 = new CopyTreeParser(copyTreeParser_CopyOptions0);
      CopyTreeParser.CopyOptions copyTreeParser_CopyOptions1 = (CopyTreeParser.CopyOptions)aSTFilename0.jjtAccept(copyTreeParser0, copyTreeParser_CopyOptions0);
      assertNull(copyTreeParser_CopyOptions1.getFromTo());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ASTFilename aSTFilename0 = new ASTFilename(64);
      aSTFilename0.setName((String) null);
      assertEquals(64, aSTFilename0.getId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ASTFilename aSTFilename0 = new ASTFilename(64);
      String string0 = aSTFilename0.toString();
      assertEquals("Filename: null", string0);
  }
}
