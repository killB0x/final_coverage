/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 01:48:52 GMT 2022
 */

package com.google.cloud.spanner.pgadapter.parsers.copy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTFormatType;
import com.google.cloud.spanner.pgadapter.parsers.copy.Copy;
import com.google.cloud.spanner.pgadapter.parsers.copy.CopyDefaultVisitor;
import com.google.cloud.spanner.pgadapter.parsers.copy.CopyTreeParser;
import com.google.cloud.spanner.pgadapter.parsers.copy.CopyVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ASTFormatType_ESTest extends ASTFormatType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ASTFormatType aSTFormatType0 = new ASTFormatType((Copy) null, 839);
      aSTFormatType0.setFormat("BINARY");
      String string0 = aSTFormatType0.toString();
      assertEquals("Format Type: BINARY", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ASTFormatType aSTFormatType0 = new ASTFormatType(357);
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      Object object0 = aSTFormatType0.jjtAccept(copyDefaultVisitor0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ASTFormatType aSTFormatType0 = new ASTFormatType((-728));
      // Undeclared exception!
      try { 
        aSTFormatType0.jjtAccept((CopyVisitor) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.cloud.spanner.pgadapter.parsers.copy.ASTFormatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ASTFormatType aSTFormatType0 = new ASTFormatType((Copy) null, 839);
      aSTFormatType0.getFormat();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ASTFormatType aSTFormatType0 = new ASTFormatType((Copy) null, 839);
      // Undeclared exception!
      try { 
        aSTFormatType0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.cloud.spanner.pgadapter.parsers.copy.ASTFormatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ASTFormatType aSTFormatType0 = new ASTFormatType((Copy) null, 839);
      aSTFormatType0.setFormat("BINARY");
      CopyTreeParser.CopyOptions.Format copyTreeParser_CopyOptions_Format0 = aSTFormatType0.getFormat();
      assertEquals(CopyTreeParser.CopyOptions.Format.BINARY, copyTreeParser_CopyOptions_Format0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ASTFormatType aSTFormatType0 = new ASTFormatType(0);
      CopyTreeParser.CopyOptions copyTreeParser_CopyOptions0 = new CopyTreeParser.CopyOptions();
      CopyTreeParser copyTreeParser0 = new CopyTreeParser(copyTreeParser_CopyOptions0);
      Object object0 = new Object();
      Object object1 = aSTFormatType0.jjtAccept(copyTreeParser0, object0);
      assertSame(object1, object0);
  }
}
