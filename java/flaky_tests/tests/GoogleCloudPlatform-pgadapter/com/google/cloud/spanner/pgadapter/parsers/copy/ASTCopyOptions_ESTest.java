/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 01:43:32 GMT 2022
 */

package com.google.cloud.spanner.pgadapter.parsers.copy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTCopyOptions;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTFilename;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTQualifiedName;
import com.google.cloud.spanner.pgadapter.parsers.copy.Copy;
import com.google.cloud.spanner.pgadapter.parsers.copy.CopyDefaultVisitor;
import com.google.cloud.spanner.pgadapter.parsers.copy.CopyTokenManager;
import com.google.cloud.spanner.pgadapter.parsers.copy.CopyTreeParser;
import com.google.cloud.spanner.pgadapter.parsers.copy.Node;
import com.google.cloud.spanner.pgadapter.parsers.copy.SimpleCharStream;
import java.io.BufferedInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ASTCopyOptions_ESTest extends ASTCopyOptions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Copy copy0 = null;
      int int0 = (-1795);
      ASTCopyOptions aSTCopyOptions0 = new ASTCopyOptions((Copy) null, (-1795));
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      aSTCopyOptions0.jjtAccept(copyDefaultVisitor0, (Object) null);
      Object object0 = aSTCopyOptions0.childrenAccept(copyDefaultVisitor0, copyDefaultVisitor0);
      aSTCopyOptions0.jjtAccept(copyDefaultVisitor0, object0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, (-1795));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ASTCopyOptions aSTCopyOptions0 = new ASTCopyOptions((Copy) null, (-981));
      assertEquals(0, aSTCopyOptions0.jjtGetNumChildren());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = 382;
      ASTCopyOptions aSTCopyOptions0 = new ASTCopyOptions(382);
      CopyTreeParser.CopyOptions copyTreeParser_CopyOptions0 = new CopyTreeParser.CopyOptions();
      CopyTreeParser copyTreeParser0 = new CopyTreeParser(copyTreeParser_CopyOptions0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      copyTreeParser_CopyOptions0.setQuote('8');
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) aSTCopyOptions0;
      nodeArray0[1] = (Node) aSTCopyOptions0;
      nodeArray0[2] = (Node) aSTCopyOptions0;
      aSTCopyOptions0.children = nodeArray0;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        aSTCopyOptions0.jjtAccept(copyTreeParser0, bufferedInputStream0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = 0;
      ASTCopyOptions aSTCopyOptions0 = new ASTCopyOptions(0);
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      aSTCopyOptions0.jjtGetValue();
      aSTCopyOptions0.jjtAccept(copyDefaultVisitor0, (Object) null);
      CopyDefaultVisitor copyDefaultVisitor1 = new CopyDefaultVisitor();
      aSTCopyOptions0.toString("CSV");
      aSTCopyOptions0.jjtSetValue("CSVStart");
      String string0 = (String)aSTCopyOptions0.value;
      aSTCopyOptions0.jjtAccept(copyDefaultVisitor1, "CSVStart");
      aSTCopyOptions0.jjtAccept(copyDefaultVisitor1, (Object) null);
      CopyTreeParser.CopyOptions copyTreeParser_CopyOptions0 = new CopyTreeParser.CopyOptions();
      CopyTreeParser copyTreeParser0 = new CopyTreeParser(copyTreeParser_CopyOptions0);
      aSTCopyOptions0.jjtAccept(copyTreeParser0, (Object) null);
      aSTCopyOptions0.toString();
      aSTCopyOptions0.childrenAccept(copyDefaultVisitor1, (Object) null);
      copyTreeParser_CopyOptions0.addColumnName(".\"(G+.SRcggm9eM");
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ASTCopyOptions aSTCopyOptions0 = new ASTCopyOptions(0);
      assertEquals(0, aSTCopyOptions0.jjtGetNumChildren());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ASTCopyOptions aSTCopyOptions0 = new ASTCopyOptions(1);
      CopyTreeParser.CopyOptions copyTreeParser_CopyOptions0 = new CopyTreeParser.CopyOptions();
      CopyTreeParser copyTreeParser0 = new CopyTreeParser(copyTreeParser_CopyOptions0);
      aSTCopyOptions0.jjtAccept(copyTreeParser0, copyTreeParser0);
      aSTCopyOptions0.toString();
      // Undeclared exception!
      try { 
        copyTreeParser0.visit((ASTQualifiedName) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.cloud.spanner.pgadapter.parsers.copy.CopyTreeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ASTCopyOptions aSTCopyOptions0 = new ASTCopyOptions(108);
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      Object object0 = aSTCopyOptions0.childrenAccept(copyDefaultVisitor0, copyDefaultVisitor0);
      Object object1 = aSTCopyOptions0.jjtAccept(copyDefaultVisitor0, object0);
      assertSame(object0, object1);
  }
}
