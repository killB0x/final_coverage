/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 01:42:12 GMT 2022
 */

package com.google.cloud.spanner.pgadapter.parsers.copy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTBoolean;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTFilename;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTSingleChar;
import com.google.cloud.spanner.pgadapter.parsers.copy.Copy;
import com.google.cloud.spanner.pgadapter.parsers.copy.CopyDefaultVisitor;
import com.google.cloud.spanner.pgadapter.parsers.copy.CopyTreeParser;
import com.google.cloud.spanner.pgadapter.parsers.copy.CopyVisitor;
import com.google.cloud.spanner.pgadapter.parsers.copy.Node;
import java.io.FileNotFoundException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ASTBoolean_ESTest extends ASTBoolean_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ASTBoolean aSTBoolean0 = new ASTBoolean(0);
      aSTBoolean0.getBool();
      aSTBoolean0.toString();
      aSTBoolean0.setBool(true);
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      aSTBoolean0.jjtAccept(copyDefaultVisitor0, copyDefaultVisitor0);
      aSTBoolean0.setBool(true);
      aSTBoolean0.setBool(false);
      aSTBoolean0.toString();
      ASTBoolean aSTBoolean1 = new ASTBoolean((Copy) null, 1729);
      ASTBoolean aSTBoolean2 = new ASTBoolean(Integer.MIN_VALUE);
      aSTBoolean2.jjtSetParent(aSTBoolean0);
      aSTBoolean2.jjtGetValue();
      aSTBoolean1.jjtAccept(copyDefaultVisitor0, (Object) null);
      aSTBoolean0.getBool();
      aSTBoolean0.toString();
      aSTBoolean1.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ASTBoolean aSTBoolean0 = new ASTBoolean((Copy) null, 0);
      aSTBoolean0.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASTBoolean aSTBoolean0 = new ASTBoolean(0);
      aSTBoolean0.getBool();
      aSTBoolean0.toString();
      aSTBoolean0.setBool(true);
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      aSTBoolean0.jjtAccept(copyDefaultVisitor0, copyDefaultVisitor0);
      aSTBoolean0.setBool(true);
      aSTBoolean0.setBool(true);
      aSTBoolean0.toString();
      aSTBoolean0.jjtSetValue("Value: false");
      aSTBoolean0.jjtGetValue();
      aSTBoolean0.jjtAccept(copyDefaultVisitor0, "Value: false");
      Object object0 = new Object();
      aSTBoolean0.jjtAccept(copyDefaultVisitor0, object0);
      aSTBoolean0.setBool(true);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) aSTBoolean0;
      aSTBoolean0.children = nodeArray0;
      aSTBoolean0.setBool(true);
      Object object1 = new Object();
      aSTBoolean0.jjtAccept(copyDefaultVisitor0, object1);
      Object object2 = null;
      aSTBoolean0.jjtAccept(copyDefaultVisitor0, object2);
      boolean boolean0 = true;
      aSTBoolean0.setBool(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ASTBoolean aSTBoolean0 = new ASTBoolean(15);
      CopyVisitor copyVisitor0 = null;
      // Undeclared exception!
      try { 
        aSTBoolean0.jjtAccept((CopyVisitor) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASTBoolean aSTBoolean0 = new ASTBoolean((-185));
      aSTBoolean0.getBool();
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTFilename aSTFilename0 = new ASTFilename((-1305));
      aSTBoolean0.parent = (Node) aSTFilename0;
      aSTBoolean0.setBool(true);
      Object object0 = aSTBoolean0.childrenAccept(copyDefaultVisitor0, copyDefaultVisitor0);
      aSTBoolean0.value = object0;
      aSTBoolean0.jjtAccept(copyDefaultVisitor0, copyDefaultVisitor0);
      aSTBoolean0.id = (-185);
      aSTBoolean0.getBool();
      aSTBoolean0.toString();
      aSTBoolean0.toString();
      aSTBoolean0.jjtAccept(copyDefaultVisitor0, "Value: true");
      aSTBoolean0.toString();
      aSTBoolean0.toString();
      aSTBoolean0.getBool();
      aSTBoolean0.toString();
      assertTrue(aSTBoolean0.getBool());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ASTBoolean aSTBoolean0 = new ASTBoolean(0);
      CopyTreeParser.CopyOptions copyTreeParser_CopyOptions0 = new CopyTreeParser.CopyOptions();
      CopyTreeParser copyTreeParser0 = new CopyTreeParser(copyTreeParser_CopyOptions0);
      aSTBoolean0.jjtGetValue();
      Object object0 = aSTBoolean0.jjtAccept(copyTreeParser0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASTBoolean aSTBoolean0 = new ASTBoolean(110);
      assertEquals(0, aSTBoolean0.jjtGetNumChildren());
      
      String string0 = aSTBoolean0.toString();
      assertEquals("Value: false", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ASTBoolean aSTBoolean0 = new ASTBoolean(0);
      aSTBoolean0.toString();
      aSTBoolean0.getBool();
      boolean boolean0 = aSTBoolean0.getBool();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ASTBoolean aSTBoolean0 = new ASTBoolean(95);
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      Object object0 = aSTBoolean0.jjtAccept(copyDefaultVisitor0, copyDefaultVisitor0);
      assertSame(copyDefaultVisitor0, object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ASTBoolean aSTBoolean0 = new ASTBoolean(942);
      aSTBoolean0.setBool(true);
      assertTrue(aSTBoolean0.getBool());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASTBoolean aSTBoolean0 = new ASTBoolean((-2194));
      ASTSingleChar aSTSingleChar0 = new ASTSingleChar((-2194));
      aSTBoolean0.parent = (Node) aSTSingleChar0;
      aSTBoolean0.toString();
      aSTSingleChar0.jjtSetValue("Value: false");
      Node[] nodeArray0 = new Node[0];
      aSTSingleChar0.children = nodeArray0;
      Node node0 = aSTBoolean0.jjtGetParent();
      aSTBoolean0.parent = node0;
      aSTBoolean0.setBool(false);
      aSTBoolean0.getBool();
      aSTBoolean0.toString();
      aSTBoolean0.toString();
      String string0 = aSTBoolean0.toString();
      assertEquals("Value: false", string0);
      
      aSTBoolean0.getBool();
      aSTBoolean0.setBool(false);
      CopyTreeParser.CopyOptions copyTreeParser_CopyOptions0 = new CopyTreeParser.CopyOptions();
      CopyTreeParser copyTreeParser0 = new CopyTreeParser(copyTreeParser_CopyOptions0);
      Object object0 = aSTBoolean0.jjtAccept(copyTreeParser0, copyTreeParser_CopyOptions0);
      assertNotNull(object0);
      assertFalse(aSTBoolean0.getBool());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1983;
      ASTBoolean aSTBoolean0 = new ASTBoolean(1983);
      Object object0 = new Object();
      aSTBoolean0.jjtSetValue(object0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("w|(`dQ");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
