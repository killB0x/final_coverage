/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 01:58:23 GMT 2022
 */

package com.google.cloud.spanner.pgadapter.wireoutput;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.cloud.spanner.pgadapter.wireoutput.TerminateResponse;
import java.io.DataOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TerminateResponse_ESTest extends TerminateResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      TerminateResponse terminateResponse0 = new TerminateResponse(dataOutputStream0);
      String string0 = terminateResponse0.getMessageName();
      assertEquals("Terminate", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      TerminateResponse terminateResponse0 = new TerminateResponse(dataOutputStream0);
      String string0 = terminateResponse0.getPayloadString();
      assertEquals("Length: 4", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      TerminateResponse terminateResponse0 = new TerminateResponse(dataOutputStream0);
      byte byte0 = terminateResponse0.getIdentifier();
      assertEquals((byte)88, byte0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TerminateResponse terminateResponse0 = new TerminateResponse((DataOutputStream) null);
      terminateResponse0.sendPayload();
      assertEquals((byte)88, terminateResponse0.getIdentifier());
  }
}
