/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 01:57:41 GMT 2022
 */

package com.google.cloud.spanner.pgadapter.parsers.copy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTCopyOptionElement;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTStart;
import com.google.cloud.spanner.pgadapter.parsers.copy.Copy;
import com.google.cloud.spanner.pgadapter.parsers.copy.CopyDefaultVisitor;
import com.google.cloud.spanner.pgadapter.parsers.copy.CopyTreeParser;
import com.google.cloud.spanner.pgadapter.parsers.copy.CopyVisitor;
import com.google.cloud.spanner.pgadapter.parsers.copy.Node;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.SequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ASTStart_ESTest extends ASTStart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ASTStart aSTStart0 = new ASTStart(1);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) aSTStart0;
      nodeArray0[1] = (Node) aSTStart0;
      nodeArray0[2] = (Node) aSTStart0;
      nodeArray0[3] = (Node) aSTStart0;
      aSTStart0.children = nodeArray0;
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      aSTStart0.jjtGetValue();
      // Undeclared exception!
      try { 
        aSTStart0.jjtAccept(copyDefaultVisitor0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ASTStart aSTStart0 = new ASTStart((Copy) null, (-5095));
      CopyVisitor copyVisitor0 = null;
      // Undeclared exception!
      try { 
        aSTStart0.jjtAccept((CopyVisitor) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.cloud.spanner.pgadapter.parsers.copy.ASTStart", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ASTStart aSTStart0 = new ASTStart((Copy) null, 0);
      CopyTreeParser.CopyOptions copyTreeParser_CopyOptions0 = new CopyTreeParser.CopyOptions();
      CopyTreeParser copyTreeParser0 = new CopyTreeParser(copyTreeParser_CopyOptions0);
      aSTStart0.dump("o!<(iq8");
      copyTreeParser_CopyOptions0.setFilename("M>BXG(o`yA6_~.&");
      copyTreeParser_CopyOptions0.setHeader(true);
      Object object0 = aSTStart0.value;
      aSTStart0.jjtAccept(copyTreeParser0, (Object) null);
      Object object1 = aSTStart0.jjtAccept(copyTreeParser0, copyTreeParser0);
      assertSame(object1, copyTreeParser0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ASTStart aSTStart0 = new ASTStart((-2992));
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      Object object0 = aSTStart0.jjtAccept(copyDefaultVisitor0, copyDefaultVisitor0);
      Object object1 = aSTStart0.jjtAccept(copyDefaultVisitor0, object0);
      assertSame(copyDefaultVisitor0, object1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ASTStart aSTStart0 = new ASTStart(0);
      CopyTreeParser.CopyOptions copyTreeParser_CopyOptions0 = new CopyTreeParser.CopyOptions();
      CopyTreeParser copyTreeParser0 = new CopyTreeParser(copyTreeParser_CopyOptions0);
      copyTreeParser_CopyOptions0.setEscape('R');
      aSTStart0.jjtAccept(copyTreeParser0, copyTreeParser0);
      aSTStart0.jjtAccept(copyTreeParser0, (Object) null);
      aSTStart0.jjtGetValue();
      CopyTreeParser.CopyOptions.Format copyTreeParser_CopyOptions_Format0 = CopyTreeParser.CopyOptions.Format.BINARY;
      copyTreeParser_CopyOptions0.setFormat(copyTreeParser_CopyOptions_Format0);
      copyTreeParser_CopyOptions0.setHeader(false);
      aSTStart0.jjtAccept(copyTreeParser0, (Object) null);
      aSTStart0.jjtAccept(copyTreeParser0, copyTreeParser0);
      Object object0 = aSTStart0.value;
      aSTStart0.childrenAccept(copyTreeParser0, (Object) null);
      aSTStart0.jjtAccept(copyTreeParser0, (Object) null);
      CopyTreeParser copyTreeParser1 = new CopyTreeParser(copyTreeParser_CopyOptions0);
      aSTStart0.jjtAccept(copyTreeParser1, (Object) null);
      aSTStart0.jjtGetValue();
      // Undeclared exception!
      try { 
        copyTreeParser1.visit((ASTCopyOptionElement) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.cloud.spanner.pgadapter.parsers.copy.CopyTreeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ASTStart aSTStart0 = new ASTStart(12);
      assertEquals(12, aSTStart0.getId());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ASTStart aSTStart0 = new ASTStart((-3645));
      Copy copy0 = null;
      try {
        copy0 = new Copy((InputStream) null, "Ka{8fItk2{hI_\"+Oq1");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }
}
