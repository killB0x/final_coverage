/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 02:00:53 GMT 2022
 */

package com.google.cloud.spanner.pgadapter.parsers.copy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTBoolean;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTColumnElement;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTColumnList;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTCopyDirection;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTCopyOptionElement;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTCopyOptionList;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTCopyOptions;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTCopyStatement;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTFilename;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTFormatType;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTID;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTNamespace;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTQualifiedName;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTSingleChar;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTStart;
import com.google.cloud.spanner.pgadapter.parsers.copy.Copy;
import com.google.cloud.spanner.pgadapter.parsers.copy.CopyDefaultVisitor;
import com.google.cloud.spanner.pgadapter.parsers.copy.SimpleNode;
import java.io.ByteArrayInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CopyDefaultVisitor_ESTest extends CopyDefaultVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTFilename aSTFilename0 = new ASTFilename((Copy) null, 0);
      Object object0 = copyDefaultVisitor0.visit((SimpleNode) aSTFilename0, (Object) aSTFilename0);
      assertSame(object0, aSTFilename0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTCopyStatement aSTCopyStatement0 = new ASTCopyStatement((-1695));
      ASTStart aSTStart0 = new ASTStart((-1695));
      Object object0 = copyDefaultVisitor0.visit(aSTStart0, (Object) aSTCopyStatement0);
      assertSame(aSTCopyStatement0, object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTSingleChar aSTSingleChar0 = new ASTSingleChar(0);
      Object object0 = copyDefaultVisitor0.visit(aSTSingleChar0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTSingleChar aSTSingleChar0 = new ASTSingleChar((-2181));
      ASTSingleChar aSTSingleChar1 = (ASTSingleChar)copyDefaultVisitor0.visit(aSTSingleChar0, (Object) aSTSingleChar0);
      assertEquals(0, aSTSingleChar1.jjtGetNumChildren());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTQualifiedName aSTQualifiedName0 = new ASTQualifiedName(1);
      ASTCopyDirection aSTCopyDirection0 = new ASTCopyDirection(0);
      ASTCopyDirection aSTCopyDirection1 = (ASTCopyDirection)copyDefaultVisitor0.visit(aSTQualifiedName0, (Object) aSTCopyDirection0);
      assertEquals(0, aSTCopyDirection1.jjtGetNumChildren());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTColumnElement aSTColumnElement0 = new ASTColumnElement(0);
      ASTNamespace aSTNamespace0 = new ASTNamespace(793);
      ASTColumnElement aSTColumnElement1 = (ASTColumnElement)copyDefaultVisitor0.visit(aSTNamespace0, (Object) aSTColumnElement0);
      assertEquals(0, aSTColumnElement1.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTID aSTID0 = new ASTID(3486);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Object object0 = copyDefaultVisitor0.visit(aSTID0, (Object) sequenceInputStream0);
      assertSame(sequenceInputStream0, object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTFormatType aSTFormatType0 = new ASTFormatType((Copy) null, (-81));
      Object object0 = copyDefaultVisitor0.visit(aSTFormatType0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTFilename aSTFilename0 = new ASTFilename((-1409));
      ASTCopyOptionElement aSTCopyOptionElement0 = new ASTCopyOptionElement((-1409));
      Object object0 = copyDefaultVisitor0.visit(aSTFilename0, (Object) aSTCopyOptionElement0);
      assertSame(aSTCopyOptionElement0, object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTCopyStatement aSTCopyStatement0 = new ASTCopyStatement(134209536);
      Object object0 = copyDefaultVisitor0.visit(aSTCopyStatement0, (Object) aSTCopyStatement0);
      assertSame(object0, aSTCopyStatement0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTCopyOptions aSTCopyOptions0 = new ASTCopyOptions(0);
      Object object0 = copyDefaultVisitor0.visit(aSTCopyOptions0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTCopyOptionList aSTCopyOptionList0 = new ASTCopyOptionList((Copy) null, 397);
      Object object0 = copyDefaultVisitor0.visit(aSTCopyOptionList0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTColumnElement aSTColumnElement0 = new ASTColumnElement((-81));
      ASTCopyOptionList aSTCopyOptionList0 = new ASTCopyOptionList((Copy) null, 397);
      Object object0 = copyDefaultVisitor0.visit(aSTCopyOptionList0, (Object) aSTColumnElement0);
      assertSame(aSTColumnElement0, object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTCopyOptionElement aSTCopyOptionElement0 = new ASTCopyOptionElement((-1409));
      ASTCopyOptionElement aSTCopyOptionElement1 = (ASTCopyOptionElement)copyDefaultVisitor0.visit(aSTCopyOptionElement0, (Object) aSTCopyOptionElement0);
      assertEquals((-1409), aSTCopyOptionElement1.getId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTCopyDirection aSTCopyDirection0 = new ASTCopyDirection(0);
      Object object0 = copyDefaultVisitor0.visit(aSTCopyDirection0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTColumnList aSTColumnList0 = new ASTColumnList(54);
      Object object0 = copyDefaultVisitor0.visit(aSTColumnList0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTColumnList aSTColumnList0 = new ASTColumnList((-81));
      ASTColumnList aSTColumnList1 = (ASTColumnList)copyDefaultVisitor0.visit(aSTColumnList0, (Object) aSTColumnList0);
      assertEquals(0, aSTColumnList1.jjtGetNumChildren());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTColumnElement aSTColumnElement0 = new ASTColumnElement((-81));
      Object object0 = copyDefaultVisitor0.visit(aSTColumnElement0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTBoolean aSTBoolean0 = new ASTBoolean(3524);
      Object object0 = copyDefaultVisitor0.visit(aSTBoolean0, (Object) aSTBoolean0);
      assertSame(object0, aSTBoolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTCopyDirection aSTCopyDirection0 = new ASTCopyDirection(1094);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      ByteArrayInputStream byteArrayInputStream1 = (ByteArrayInputStream)copyDefaultVisitor0.defaultVisit(aSTCopyDirection0, byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream1.available());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      // Undeclared exception!
      try { 
        copyDefaultVisitor0.visit((SimpleNode) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.cloud.spanner.pgadapter.parsers.copy.CopyDefaultVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      // Undeclared exception!
      try { 
        copyDefaultVisitor0.visit((ASTNamespace) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.cloud.spanner.pgadapter.parsers.copy.CopyDefaultVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      // Undeclared exception!
      try { 
        copyDefaultVisitor0.visit((ASTCopyStatement) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.cloud.spanner.pgadapter.parsers.copy.CopyDefaultVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      // Undeclared exception!
      try { 
        copyDefaultVisitor0.visit((ASTCopyOptionElement) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.cloud.spanner.pgadapter.parsers.copy.CopyDefaultVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      // Undeclared exception!
      try { 
        copyDefaultVisitor0.visit((ASTCopyDirection) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.cloud.spanner.pgadapter.parsers.copy.CopyDefaultVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      // Undeclared exception!
      try { 
        copyDefaultVisitor0.visit((ASTBoolean) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.cloud.spanner.pgadapter.parsers.copy.CopyDefaultVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTSingleChar aSTSingleChar0 = new ASTSingleChar(0);
      Object object0 = copyDefaultVisitor0.defaultVisit(aSTSingleChar0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTCopyOptionElement aSTCopyOptionElement0 = new ASTCopyOptionElement((Copy) null, 0);
      Object object0 = copyDefaultVisitor0.visit(aSTCopyOptionElement0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTCopyDirection aSTCopyDirection0 = new ASTCopyDirection(0);
      ASTCopyDirection aSTCopyDirection1 = (ASTCopyDirection)copyDefaultVisitor0.visit(aSTCopyDirection0, (Object) aSTCopyDirection0);
      assertNull(aSTCopyDirection1.getDirection());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTStart aSTStart0 = new ASTStart(0);
      Object object0 = copyDefaultVisitor0.visit(aSTStart0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTCopyOptions aSTCopyOptions0 = new ASTCopyOptions(0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Object object0 = copyDefaultVisitor0.visit(aSTCopyOptions0, (Object) sequenceInputStream0);
      assertSame(object0, sequenceInputStream0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTBoolean aSTBoolean0 = new ASTBoolean(1149);
      Object object0 = copyDefaultVisitor0.visit(aSTBoolean0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTQualifiedName aSTQualifiedName0 = new ASTQualifiedName((Copy) null, 1243);
      Object object0 = copyDefaultVisitor0.visit(aSTQualifiedName0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      // Undeclared exception!
      try { 
        copyDefaultVisitor0.visit((ASTCopyOptionList) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.cloud.spanner.pgadapter.parsers.copy.CopyDefaultVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTCopyStatement aSTCopyStatement0 = new ASTCopyStatement(0);
      Object object0 = copyDefaultVisitor0.visit(aSTCopyStatement0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTFilename aSTFilename0 = new ASTFilename(50);
      // Undeclared exception!
      try { 
        copyDefaultVisitor0.visit((ASTColumnList) null, (Object) aSTFilename0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.cloud.spanner.pgadapter.parsers.copy.CopyDefaultVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTNamespace aSTNamespace0 = new ASTNamespace((-1));
      Object object0 = copyDefaultVisitor0.visit(aSTNamespace0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      // Undeclared exception!
      try { 
        copyDefaultVisitor0.visit((ASTSingleChar) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.cloud.spanner.pgadapter.parsers.copy.CopyDefaultVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTColumnElement aSTColumnElement0 = new ASTColumnElement((Copy) null, 0);
      Object object0 = copyDefaultVisitor0.visit(aSTColumnElement0, (Object) aSTColumnElement0);
      assertSame(aSTColumnElement0, object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      ASTFormatType aSTFormatType0 = new ASTFormatType((-1038));
      Object object0 = copyDefaultVisitor0.visit(aSTFormatType0, (Object) byteArrayInputStream0);
      assertSame(object0, byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTBoolean aSTBoolean0 = new ASTBoolean(1149);
      Object object0 = copyDefaultVisitor0.visit((SimpleNode) aSTBoolean0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTID aSTID0 = new ASTID((-1));
      Object object0 = copyDefaultVisitor0.visit(aSTID0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      ASTFilename aSTFilename0 = new ASTFilename((-1241));
      Object object0 = copyDefaultVisitor0.visit(aSTFilename0, (Object) null);
      assertNull(object0);
  }
}
