/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 01:54:58 GMT 2022
 */

package com.google.cloud.spanner.pgadapter.parsers.copy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTCopyOptionList;
import com.google.cloud.spanner.pgadapter.parsers.copy.ASTCopyStatement;
import com.google.cloud.spanner.pgadapter.parsers.copy.Copy;
import com.google.cloud.spanner.pgadapter.parsers.copy.CopyDefaultVisitor;
import com.google.cloud.spanner.pgadapter.parsers.copy.CopyTreeParser;
import com.google.cloud.spanner.pgadapter.parsers.copy.CopyVisitor;
import com.google.cloud.spanner.pgadapter.parsers.copy.Node;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ASTCopyStatement_ESTest extends ASTCopyStatement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ASTCopyStatement aSTCopyStatement0 = new ASTCopyStatement((-1220));
      String string0 = "";
      aSTCopyStatement0.jjtAddChild((Node) null, 42);
      aSTCopyStatement0.id = 1;
      aSTCopyStatement0.value = (Object) "";
      aSTCopyStatement0.dump("");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = null;
      nodeArray0[1] = (Node) aSTCopyStatement0;
      nodeArray0[2] = (Node) aSTCopyStatement0;
      aSTCopyStatement0.children = nodeArray0;
      CopyVisitor copyVisitor0 = null;
      aSTCopyStatement0.jjtAddChild((Node) null, 0);
      // Undeclared exception!
      try { 
        aSTCopyStatement0.jjtAccept((CopyVisitor) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.cloud.spanner.pgadapter.parsers.copy.ASTCopyStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ASTCopyStatement aSTCopyStatement0 = new ASTCopyStatement(0);
      assertEquals(0, aSTCopyStatement0.getId());
      
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) aSTCopyStatement0;
      nodeArray0[1] = (Node) aSTCopyStatement0;
      aSTCopyStatement0.children = nodeArray0;
      // Undeclared exception!
      try { 
        aSTCopyStatement0.jjtAccept(copyDefaultVisitor0, copyDefaultVisitor0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ASTCopyStatement aSTCopyStatement0 = new ASTCopyStatement((-1244));
      CopyTreeParser.CopyOptions copyTreeParser_CopyOptions0 = new CopyTreeParser.CopyOptions();
      CopyTreeParser.CopyOptions.Format copyTreeParser_CopyOptions_Format0 = CopyTreeParser.CopyOptions.Format.BINARY;
      copyTreeParser_CopyOptions0.setFormat(copyTreeParser_CopyOptions_Format0);
      CopyTreeParser copyTreeParser0 = new CopyTreeParser(copyTreeParser_CopyOptions0);
      aSTCopyStatement0.jjtAccept(copyTreeParser0, copyTreeParser_CopyOptions0);
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      Object object0 = aSTCopyStatement0.jjtAccept(copyDefaultVisitor0, copyDefaultVisitor0);
      assertSame(copyDefaultVisitor0, object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ASTCopyStatement aSTCopyStatement0 = new ASTCopyStatement((Copy) null, 0);
      CopyDefaultVisitor copyDefaultVisitor0 = new CopyDefaultVisitor();
      Object object0 = aSTCopyStatement0.jjtAccept(copyDefaultVisitor0, copyDefaultVisitor0);
      aSTCopyStatement0.jjtAccept(copyDefaultVisitor0, (Object) null);
      Object object1 = aSTCopyStatement0.jjtAccept(copyDefaultVisitor0, object0);
      assertSame(copyDefaultVisitor0, object1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ASTCopyStatement aSTCopyStatement0 = new ASTCopyStatement((-3561));
      CopyTreeParser.CopyOptions copyTreeParser_CopyOptions0 = null;
      // Undeclared exception!
      try { 
        aSTCopyStatement0.dump("/e32(Mh|.0fXoMI");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3561 out of bounds for length 16
         //
         verifyException("com.google.cloud.spanner.pgadapter.parsers.copy.SimpleNode", e);
      }
  }
}
