/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 19:25:28 GMT 2022
 */

package net.engio.pips.lab.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.engio.pips.lab.common.Range;
import net.engio.pips.lab.common.ValueGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(3529);
      ValueGenerator<Object> valueGenerator0 = (ValueGenerator<Object>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(valueGenerator0).next();
      Range<Object> range0 = new Range<Object>(valueGenerator0, 4407);
      Range<Object> range1 = range0.startWithRandomIndex();
      range1.getNext();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(31);
      Range<Object> range2 = range0.clone();
      range2.getElement(0);
      ValueGenerator<Object> valueGenerator1 = (ValueGenerator<Object>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, (Object) null, integer1, integer2, (Object) null).when(valueGenerator1).next();
      Range<Object> range3 = new Range<Object>(valueGenerator1, 3042);
      Range<Object> range4 = range3.clone();
      range4.getRandomElement();
      Range<Object> range5 = range4.clone();
      range5.getRandomElement();
      range5.getNext();
      range3.getNext();
      Range<Object> range6 = range4.shuffle();
      range3.clone();
      range6.getRandomElement();
      range3.getRandomElement();
      Integer integer3 = new Integer(3);
      ValueGenerator<Integer> valueGenerator2 = (ValueGenerator<Integer>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(integer2, integer3, (Integer) null, integer2, integer0).when(valueGenerator2).next();
      Range<Integer> range7 = new Range<Integer>(valueGenerator2, 2207);
      range7.shuffle();
      ValueGenerator<Object> valueGenerator3 = (ValueGenerator<Object>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(valueGenerator3).next();
      Range<Object> range8 = new Range<Object>(valueGenerator3, 2207);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-4260));
      ValueGenerator<Integer> valueGenerator0 = (ValueGenerator<Integer>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(valueGenerator0).next();
      Range<Integer> range0 = new Range<Integer>(valueGenerator0, 1);
      range0.getNext();
      ValueGenerator<Object> valueGenerator1 = (ValueGenerator<Object>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(range0).when(valueGenerator1).next();
      Range<Object> range1 = new Range<Object>(valueGenerator1, 1);
      range0.getRandomElement();
      Range<Object> range2 = range1.shuffle();
      Range<Object> range3 = range2.clone();
      Range<Object> range4 = range3.startWithRandomIndex();
      range4.clone();
      Range<Object> range5 = range3.startWithRandomIndex();
      range5.getNext();
      Range<Object> range6 = range5.clone();
      range6.getRandomElement();
      range1.getElement(1);
      range0.shuffle();
      range2.clone();
      range1.getElement(2018);
      range1.getNext();
      range2.clone();
      range3.getNext();
      Range<Object> range7 = range4.startWithRandomIndex();
      range7.getElement(3366);
      range0.startWithRandomIndex();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValueGenerator<Object> valueGenerator0 = (ValueGenerator<Object>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      Range<Object> range0 = new Range<Object>(valueGenerator0, 0);
      ValueGenerator<Object> valueGenerator1 = (ValueGenerator<Object>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      Range<Object> range1 = new Range<Object>(valueGenerator1, 0);
      range1.shuffle();
      range0.hasNext();
      ValueGenerator<Integer> valueGenerator2 = (ValueGenerator<Integer>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      Range<Integer> range2 = new Range<Integer>(valueGenerator2, 0);
      // Undeclared exception!
      try { 
        range2.getRandomElement();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.engio.pips.lab.common.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ValueGenerator<Integer> valueGenerator0 = (ValueGenerator<Integer>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(valueGenerator0).next();
      Range<Integer> range0 = new Range<Integer>(valueGenerator0, 1);
      range0.getNext();
      ValueGenerator<Object> valueGenerator1 = (ValueGenerator<Object>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(valueGenerator1).next();
      Range<Object> range1 = new Range<Object>(valueGenerator1, 1);
      range0.getRandomElement();
      Range<Object> range2 = range1.shuffle();
      Range<Object> range3 = range2.clone();
      Range<Object> range4 = range3.startWithRandomIndex();
      Range<Object> range5 = range4.clone();
      Range<Object> range6 = range3.startWithRandomIndex();
      range6.getNext();
      Range<Object> range7 = range6.clone();
      range7.getRandomElement();
      range1.getElement(1);
      Range<Integer> range8 = range0.shuffle();
      range1.getElement(2018);
      range1.getNext();
      range3.getNext();
      Range<Object> range9 = range4.startWithRandomIndex();
      range9.shuffle();
      range2.startWithRandomIndex();
      Range<Object> range10 = range2.clone();
      range1.startWithRandomIndex();
      Range<Object> range11 = range10.clone();
      range11.getRandomElement();
      range3.startWithRandomIndex();
      range8.shuffle();
      range3.hasNext();
      range5.getRandomElement();
      range8.getElement(1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ValueGenerator<Integer> valueGenerator0 = (ValueGenerator<Integer>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(valueGenerator0).next();
      Range<Integer> range0 = new Range<Integer>(valueGenerator0, 1087);
      range0.getNext();
      Range<Integer> range1 = range0.shuffle();
      range1.getNext();
      range1.getRandomElement();
      Range<Integer> range2 = range1.clone();
      range0.getNext();
      range2.getNext();
      range0.getRandomElement();
      range0.getNext();
      ValueGenerator<Object> valueGenerator1 = (ValueGenerator<Object>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(valueGenerator1).next();
      Range<Object> range3 = new Range<Object>(valueGenerator1, 1087);
      Range<Object> range4 = range3.shuffle();
      Range<Object> range5 = range4.clone();
      range4.getNext();
      range3.getRandomElement();
      Range<Object> range6 = range5.startWithRandomIndex();
      range5.clone();
      range6.hasNext();
      range1.getElement(1087);
      Range<Object> range7 = range5.startWithRandomIndex();
      Range<Object> range8 = range7.startWithRandomIndex();
      range6.clone();
      Range<Object> range9 = range3.clone();
      Range<Object> range10 = range9.clone();
      Range<Object> range11 = range10.clone();
      range8.getRandomElement();
      range6.getElement(1087);
      range8.startWithRandomIndex();
      range11.getElement(0);
      range5.getNext();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range<Object> range0 = new Range<Object>((ValueGenerator<Object>) null, 0);
      assertFalse(range0.hasNext());
      
      // Undeclared exception!
      try { 
        range0.getNext();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.engio.pips.lab.common.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range<Object> range0 = new Range<Object>((ValueGenerator<Object>) null, 0);
      // Undeclared exception!
      try { 
        range0.getElement((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("net.engio.pips.lab.common.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ValueGenerator<Integer> valueGenerator0 = (ValueGenerator<Integer>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(valueGenerator0).next();
      Range<Integer> range0 = new Range<Integer>(valueGenerator0, 1);
      Range<Integer> range1 = range0.shuffle();
      Range<Integer> range2 = range1.startWithRandomIndex();
      range2.clone();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      Range<Integer> range0 = new Range<Integer>((ValueGenerator<Integer>) null, 0);
      Range<Integer> range1 = range0.shuffle();
      Range<Integer> range2 = range1.clone();
      range2.shuffle();
      Range<Integer> range3 = range1.clone();
      range3.clone();
      range3.shuffle();
      // Undeclared exception!
      try { 
        range3.startWithRandomIndex();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.engio.pips.lab.common.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ValueGenerator<Object> valueGenerator0 = (ValueGenerator<Object>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(valueGenerator0).next();
      Range<Object> range0 = new Range<Object>(valueGenerator0, 3377);
      ValueGenerator<Integer> valueGenerator1 = (ValueGenerator<Integer>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(valueGenerator1).next();
      Range<Integer> range1 = new Range<Integer>(valueGenerator1, 3385);
      Range<Integer> range2 = range1.clone();
      Range<Integer> range3 = range2.shuffle();
      range2.shuffle();
      // Undeclared exception!
      range3.shuffle();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ValueGenerator<Object> valueGenerator0 = (ValueGenerator<Object>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(valueGenerator0).next();
      Range<Object> range0 = new Range<Object>(valueGenerator0, 1540);
      Range<Object> range1 = range0.clone();
      Range<Object> range2 = range1.startWithRandomIndex();
      Range<Object> range3 = range2.shuffle();
      // Undeclared exception!
      try { 
        range3.getElement((-793));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -793 out of bounds for length 1540
         //
         verifyException("net.engio.pips.lab.common.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ValueGenerator<Object> valueGenerator0 = (ValueGenerator<Object>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(valueGenerator0).next();
      Range<Object> range0 = new Range<Object>(valueGenerator0, 868);
      range0.shuffle();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range<Object> range0 = new Range<Object>((ValueGenerator<Object>) null, 0);
      range0.getElement(0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range<Object> range0 = new Range<Object>((ValueGenerator<Object>) null, 0);
      range0.shuffle();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ValueGenerator<Object> valueGenerator0 = (ValueGenerator<Object>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(valueGenerator0).next();
      Range<Object> range0 = new Range<Object>(valueGenerator0, 3042);
      Range<Object> range1 = range0.clone();
      range1.getRandomElement();
      Range<Object> range2 = range1.clone();
      range2.getRandomElement();
      range2.getNext();
      range0.getNext();
      Range<Object> range3 = range1.shuffle();
      range0.clone();
      range3.getRandomElement();
      range0.getRandomElement();
      ValueGenerator<Integer> valueGenerator1 = (ValueGenerator<Integer>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(valueGenerator1).next();
      Range<Integer> range4 = new Range<Integer>(valueGenerator1, 2207);
      Range<Integer> range5 = range4.shuffle();
      Range<Object> range6 = range1.startWithRandomIndex();
      Range<Object> range7 = range6.shuffle();
      range7.getNext();
      range1.getRandomElement();
      range4.getNext();
      Range<Integer> range8 = range5.clone();
      range4.getElement(3042);
      Range<Object> range9 = range1.startWithRandomIndex();
      range9.getRandomElement();
      range8.hasNext();
      // Undeclared exception!
      range4.shuffle();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ValueGenerator<Integer> valueGenerator0 = (ValueGenerator<Integer>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(valueGenerator0).next();
      Range<Integer> range0 = new Range<Integer>(valueGenerator0, 24);
      range0.getNext();
      Integer integer0 = range0.getElement(24);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range<Object> range0 = new Range<Object>((ValueGenerator<Object>) null, 0);
      // Undeclared exception!
      try { 
        range0.startWithRandomIndex();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.engio.pips.lab.common.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ValueGenerator<Integer> valueGenerator0 = (ValueGenerator<Integer>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(valueGenerator0).next();
      Range<Integer> range0 = new Range<Integer>(valueGenerator0, 3412);
      Range<Integer> range1 = range0.clone();
      Range<Integer> range2 = range1.startWithRandomIndex();
      boolean boolean0 = range2.hasNext();
      assertTrue(boolean0);
      
      range1.getNext();
      ValueGenerator<Object> valueGenerator1 = (ValueGenerator<Object>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(valueGenerator1).next();
      Range<Object> range3 = new Range<Object>(valueGenerator1, 1);
      boolean boolean1 = range3.hasNext();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range<Object> range0 = new Range<Object>((ValueGenerator<Object>) null, 0);
      boolean boolean0 = range0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ValueGenerator<Object> valueGenerator0 = (ValueGenerator<Object>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(valueGenerator0).next();
      Range<Object> range0 = new Range<Object>(valueGenerator0, 1);
      Range<Object> range1 = range0.startWithRandomIndex();
      Object object0 = range1.getNext();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ValueGenerator<Object> valueGenerator0 = (ValueGenerator<Object>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(valueGenerator0).next();
      Range<Object> range0 = new Range<Object>(valueGenerator0, 1298);
      boolean boolean0 = range0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 2017;
      Range<Object> range0 = null;
      try {
        range0 = new Range<Object>((ValueGenerator<Object>) null, 2017);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range<Object> range0 = null;
      try {
        range0 = new Range<Object>((ValueGenerator<Object>) null, 2287);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range<Object> range0 = null;
      try {
        range0 = new Range<Object>((ValueGenerator<Object>) null, (-694));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -694
         //
         verifyException("net.engio.pips.lab.common.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range<Object> range0 = new Range<Object>((ValueGenerator<Object>) null, 0);
      Range<Object> range1 = range0.clone();
      assertNotSame(range0, range1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range<Object> range0 = new Range<Object>((ValueGenerator<Object>) null, 0);
      // Undeclared exception!
      try { 
        range0.getRandomElement();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.engio.pips.lab.common.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ValueGenerator<Object> valueGenerator0 = (ValueGenerator<Object>) mock(ValueGenerator.class, new ViolatedAssumptionAnswer());
      Range<Object> range0 = new Range<Object>(valueGenerator0, 0);
      Range<Object> range1 = range0.clone();
      // Undeclared exception!
      try { 
        range1.getRandomElement();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.engio.pips.lab.common.Range", e);
      }
  }
}
