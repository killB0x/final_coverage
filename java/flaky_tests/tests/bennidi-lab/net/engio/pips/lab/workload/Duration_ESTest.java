/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 19:20:46 GMT 2022
 */

package net.engio.pips.lab.workload;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.TimeUnit;
import net.engio.pips.lab.workload.Duration;
import net.engio.pips.lab.workload.Workload;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Duration_ESTest extends Duration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Duration duration0 = new Duration(657, timeUnit0);
      duration0.inMillisecs();
      assertEquals((-1), duration0.getRepetitions());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Duration duration0 = new Duration(3639, timeUnit0);
      long long0 = duration0.inMillisecs();
      assertEquals(218340000L, long0);
      assertEquals((-1), duration0.getRepetitions());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = new Duration(0);
      int int0 = duration0.getRepetitions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = new Duration(3);
      int int0 = duration0.getRepetitions();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Duration duration0 = new Duration(657, timeUnit0);
      duration0.getDependingOn();
      assertEquals((-1), duration0.getRepetitions());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      Workload workload0 = new Workload("");
      workload0.finished();
      Duration duration0 = new Duration(workload0);
      duration0.getDependingOn();
      assertEquals((-1), duration0.getRepetitions());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      Workload workload0 = new Workload("");
      workload0.started();
      Duration duration0 = new Duration(workload0);
      duration0.getDependingOn();
      assertEquals((-1), duration0.getRepetitions());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Workload workload0 = new Workload((String) null);
      Workload workload1 = workload0.setParallelTasks(0);
      Duration duration0 = new Duration(workload1);
      duration0.getDependingOn();
      assertEquals((-1), duration0.getRepetitions());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Workload workload0 = new Workload("+");
      Workload workload1 = workload0.setParallelTasks((-1947));
      Duration duration0 = new Duration(workload1);
      duration0.getDependingOn();
      assertEquals((-1), duration0.getRepetitions());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Workload workload0 = new Workload("V");
      workload0.started();
      Duration duration0 = new Duration(workload0);
      duration0.getDependingOn();
      assertEquals((-1), duration0.getRepetitions());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Workload workload0 = new Workload((String) null);
      workload0.setDelay(0L);
      Duration duration0 = new Duration(workload0);
      duration0.getDependingOn();
      assertEquals((-1), duration0.getRepetitions());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Workload workload0 = new Workload(":m{fPWNYT$x");
      Workload workload1 = workload0.setDelay(57);
      Duration duration0 = new Duration(workload1);
      duration0.getDependingOn();
      assertEquals((-1), duration0.getRepetitions());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = new Duration(774);
      boolean boolean0 = duration0.isRepetitive();
      assertTrue(boolean0);
      assertEquals(774, duration0.getRepetitions());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Duration duration0 = new Duration(657, timeUnit0);
      boolean boolean0 = duration0.isRepetitive();
      assertEquals((-1), duration0.getRepetitions());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Workload workload0 = new Workload("");
      Duration duration0 = new Duration(workload0);
      boolean boolean0 = duration0.isDependent();
      assertEquals((-1), duration0.getRepetitions());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Duration duration0 = new Duration(657, timeUnit0);
      duration0.isDependent();
      assertEquals((-1), duration0.getRepetitions());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Workload workload0 = new Workload("");
      Duration duration0 = new Duration(workload0);
      boolean boolean0 = duration0.isTimeBased();
      assertFalse(boolean0);
      assertEquals((-1), duration0.getRepetitions());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Duration duration0 = new Duration(657, timeUnit0);
      boolean boolean0 = duration0.isTimeBased();
      assertTrue(boolean0);
      assertEquals((-1), duration0.getRepetitions());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Workload workload0 = new Workload("");
      Duration duration0 = new Duration(workload0);
      String string0 = duration0.toString();
      assertEquals("run until  ends", string0);
      assertEquals((-1), duration0.getRepetitions());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = new Duration(0);
      assertFalse(duration0.isDependent());
      
      String string0 = duration0.toString();
      assertEquals("Unknown duration", string0);
      assertEquals(0, duration0.getRepetitions());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Duration duration0 = new Duration(2684, timeUnit0);
      String string0 = duration0.toString();
      assertEquals("run for 2684NANOSECONDS", string0);
      assertEquals((-1), duration0.getRepetitions());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = new Duration(3386);
      String string0 = duration0.toString();
      assertEquals("run 3386 times", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = null;
      try {
        duration0 = new Duration(3376, (TimeUnit) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal timeout condition:3376null
         //
         verifyException("net.engio.pips.lab.workload.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Duration duration0 = null;
      try {
        duration0 = new Duration((-313), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal timeout condition:-313SECONDS
         //
         verifyException("net.engio.pips.lab.workload.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Duration duration0 = new Duration(1415, timeUnit0);
      int int0 = duration0.getRepetitions();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Workload workload0 = new Workload("");
      Duration duration0 = new Duration(workload0);
      // Undeclared exception!
      try { 
        duration0.inMillisecs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
