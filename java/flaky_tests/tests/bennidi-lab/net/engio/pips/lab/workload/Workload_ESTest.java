/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 19:22:33 GMT 2022
 */

package net.engio.pips.lab.workload;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.concurrent.TimeUnit;
import net.engio.pips.lab.ExecutionContext;
import net.engio.pips.lab.workload.Duration;
import net.engio.pips.lab.workload.ExecutionEvent;
import net.engio.pips.lab.workload.ExecutionHandler;
import net.engio.pips.lab.workload.ITaskFactory;
import net.engio.pips.lab.workload.Workload;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Workload_ESTest extends Workload_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Workload workload0 = new Workload((String) null);
      workload0.setParallelTasks((-2144838962));
      boolean boolean0 = workload0.hasTasksToRun();
      assertEquals((-2144838962), workload0.getParallelUnits());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Workload workload0 = new Workload("start fter ");
      workload0.started();
      workload0.toString();
      assertEquals((-1392409281320L), workload0.getExecutionTime());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Workload workload0 = new Workload("net.engio.pips.lab.workload.Workload$DurationSpecification");
      assertEquals((-1L), workload0.getDelay());
      
      workload0.setDelay(0);
      boolean boolean0 = workload0.hasDelay();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis((-1397L));
      Workload workload0 = new Workload("");
      workload0.finished();
      boolean boolean0 = workload0.isFinished();
      assertEquals((-1397L), workload0.getExecutionTime());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Workload.ExecutionHandlerWrapper workload_ExecutionHandlerWrapper0 = new Workload.ExecutionHandlerWrapper((ExecutionHandler) null);
      workload_ExecutionHandlerWrapper0.handle((ExecutionContext) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Workload workload0 = new Workload("(");
      System.setCurrentTimeMillis((-1L));
      workload0.finished();
      workload0.setParallelTasks(45);
      assertEquals(45, workload0.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      Workload workload0 = new Workload("");
      workload0.started();
      workload0.setParallelTasks(2146670823);
      assertEquals(2146670823, workload0.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Workload workload0 = new Workload("");
      workload0.started();
      workload0.setParallelTasks(137);
      assertEquals(137, workload0.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Workload workload0 = new Workload("net.engio.pips.lab.workload.Workload$ExecutionHandlerWrapper");
      workload0.setDelay(0L);
      workload0.setParallelTasks(2);
      assertEquals(2, workload0.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Workload workload0 = new Workload("");
      workload0.setDelay(137);
      workload0.setParallelTasks(2146670823);
      assertEquals(2146670823, workload0.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Workload workload0 = new Workload("(");
      System.setCurrentTimeMillis((-1L));
      workload0.finished();
      ITaskFactory iTaskFactory0 = mock(ITaskFactory.class, new ViolatedAssumptionAnswer());
      Workload workload1 = workload0.setITaskFactory(iTaskFactory0);
      assertTrue(workload1.hasTasksToRun());
      assertEquals((-1L), workload1.getDelay());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis((-1397L));
      Workload workload0 = new Workload("");
      workload0.started();
      ITaskFactory iTaskFactory0 = mock(ITaskFactory.class, new ViolatedAssumptionAnswer());
      Workload workload1 = workload0.setITaskFactory(iTaskFactory0);
      assertEquals((-1L), workload1.getDelay());
      assertEquals(1, workload1.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Workload workload0 = new Workload("-`u");
      assertEquals(1, workload0.getParallelUnits());
      
      Workload workload1 = workload0.setParallelTasks(0);
      ITaskFactory iTaskFactory0 = mock(ITaskFactory.class, new ViolatedAssumptionAnswer());
      workload1.setITaskFactory(iTaskFactory0);
      assertFalse(workload0.hasTasksToRun());
      assertEquals((-1L), workload0.getDelay());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Workload workload0 = new Workload("net.engio.pips.lab.workload.Workload$ExecutionHandlerWrapper");
      workload0.setParallelTasks((-49));
      ITaskFactory iTaskFactory0 = mock(ITaskFactory.class, new ViolatedAssumptionAnswer());
      workload0.setITaskFactory(iTaskFactory0);
      assertEquals((-49), workload0.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Workload workload0 = new Workload("-`u");
      workload0.started();
      ITaskFactory iTaskFactory0 = mock(ITaskFactory.class, new ViolatedAssumptionAnswer());
      Workload workload1 = workload0.setITaskFactory(iTaskFactory0);
      assertEquals((-1L), workload1.getDelay());
      assertEquals(1, workload1.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Workload workload0 = new Workload("-`u");
      assertEquals((-1L), workload0.getDelay());
      
      Workload workload1 = workload0.setDelay(0);
      ITaskFactory iTaskFactory0 = mock(ITaskFactory.class, new ViolatedAssumptionAnswer());
      workload1.setITaskFactory(iTaskFactory0);
      assertEquals(1, workload0.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Workload workload0 = new Workload("");
      Workload workload1 = workload0.setDelay(137);
      ITaskFactory iTaskFactory0 = mock(ITaskFactory.class, new ViolatedAssumptionAnswer());
      workload1.setITaskFactory(iTaskFactory0);
      assertEquals(137L, workload0.getDelay());
      assertTrue(workload0.hasDelay());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Workload workload0 = new Workload("(");
      System.setCurrentTimeMillis((-1L));
      workload0.finished();
      workload0.setDelay(1897L);
      assertEquals(1897L, workload0.getDelay());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Workload workload0 = new Workload("-`u");
      Workload workload1 = workload0.setParallelTasks(0);
      assertEquals((-1L), workload1.getDelay());
      
      workload1.setDelay(0);
      assertEquals(0, workload0.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Workload workload0 = new Workload("net.engio.pips.lab.workload.Workload$ExecutionHandlerWrapper");
      workload0.setParallelTasks((-49));
      workload0.setDelay(0L);
      assertEquals((-49), workload0.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      System.setCurrentTimeMillis((-1397L));
      Workload workload0 = new Workload("");
      workload0.started();
      workload0.setDelay(2539L);
      assertEquals(2539L, workload0.getDelay());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Workload workload0 = new Workload("-`u");
      workload0.started();
      workload0.setDelay((-2764L));
      assertEquals((-2764L), workload0.getDelay());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Workload workload0 = new Workload("(");
      ExecutionEvent executionEvent0 = ExecutionEvent.TaskInitialization;
      ExecutionHandler executionHandler0 = workload0.getHandler(executionEvent0);
      assertNotNull(executionHandler0);
      
      System.setCurrentTimeMillis((-1L));
      workload0.finished();
      Workload workload1 = workload0.handle(executionEvent0, executionHandler0);
      assertEquals(1, workload1.getParallelUnits());
      assertEquals((-1L), workload1.getDelay());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Workload workload0 = new Workload("(");
      ExecutionEvent executionEvent0 = ExecutionEvent.TaskInitialization;
      ExecutionHandler executionHandler0 = workload0.getHandler(executionEvent0);
      assertNotNull(executionHandler0);
      
      System.setCurrentTimeMillis((-1L));
      workload0.started();
      Workload workload1 = workload0.handle(executionEvent0, executionHandler0);
      assertTrue(workload1.hasTasksToRun());
      assertEquals((-1L), workload1.getDelay());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Workload workload0 = new Workload("(");
      assertEquals(1, workload0.getParallelUnits());
      
      Workload workload1 = workload0.setParallelTasks(0);
      ExecutionEvent executionEvent0 = ExecutionEvent.WorkloadInitialization;
      workload1.handle(executionEvent0, (ExecutionHandler) null);
      assertFalse(workload0.hasTasksToRun());
      assertEquals((-1L), workload0.getDelay());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Workload workload0 = new Workload("net.engio.pips.lab.workload.Workload$ExecutionHandlerWrapper");
      workload0.setParallelTasks((-49));
      ExecutionEvent executionEvent0 = ExecutionEvent.WorkloadInitialization;
      ExecutionHandler executionHandler0 = mock(ExecutionHandler.class, new ViolatedAssumptionAnswer());
      Workload.ExecutionHandlerWrapper workload_ExecutionHandlerWrapper0 = new Workload.ExecutionHandlerWrapper(executionHandler0);
      workload0.handle(executionEvent0, workload_ExecutionHandlerWrapper0);
      assertEquals((-49), workload0.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Workload workload0 = new Workload("ms)");
      workload0.started();
      ExecutionEvent executionEvent0 = ExecutionEvent.TaskInitialization;
      Workload workload1 = workload0.handle(executionEvent0, (ExecutionHandler) null);
      assertEquals((-1L), workload1.getDelay());
      assertEquals(1, workload1.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Workload workload0 = new Workload("Sample interval");
      assertEquals((-1L), workload0.getDelay());
      
      workload0.setDelay(0L);
      ExecutionEvent executionEvent0 = ExecutionEvent.WorkloadInitialization;
      ExecutionHandler executionHandler0 = mock(ExecutionHandler.class, new ViolatedAssumptionAnswer());
      Workload.ExecutionHandlerWrapper workload_ExecutionHandlerWrapper0 = new Workload.ExecutionHandlerWrapper(executionHandler0);
      workload0.handle(executionEvent0, workload_ExecutionHandlerWrapper0);
      assertTrue(workload0.hasTasksToRun());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Workload workload0 = new Workload("`V");
      workload0.setDelay(236L);
      ExecutionEvent executionEvent0 = ExecutionEvent.TaskCompletion;
      ExecutionHandler executionHandler0 = workload0.getHandler(executionEvent0);
      workload0.handle(executionEvent0, executionHandler0);
      assertEquals(236L, workload0.getDelay());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Workload workload0 = new Workload("");
      workload0.started();
      long long0 = workload0.getStarted();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Workload workload0 = new Workload("ZDw(MnLk?q");
      System.setCurrentTimeMillis((-5650L));
      workload0.started();
      long long0 = workload0.getStarted();
      assertEquals((-5650L), long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Workload workload0 = new Workload("SQ-1adYFz");
      Workload.StartSpecification workload_StartSpecification0 = workload0.starts();
      Workload workload1 = workload_StartSpecification0.immediately();
      workload1.getStartCondition();
      assertEquals((-1L), workload1.getDelay());
      assertEquals(1, workload1.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Workload workload0 = new Workload("(");
      Workload.StartSpecification workload_StartSpecification0 = workload0.starts();
      workload_StartSpecification0.after(workload0);
      workload0.getStartCondition();
      assertEquals((-1L), workload0.getDelay());
      assertTrue(workload0.hasTasksToRun());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Workload workload0 = new Workload("");
      Workload.StartSpecification workload_StartSpecification0 = workload0.new StartSpecification();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Workload workload1 = workload_StartSpecification0.after((-1962), timeUnit0);
      workload1.getStartCondition();
      assertEquals((-1L), workload1.getDelay());
      assertEquals(1, workload1.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Workload workload0 = new Workload("cyi>j2");
      assertTrue(workload0.hasTasksToRun());
      
      workload0.setParallelTasks(0);
      int int0 = workload0.getParallelUnits();
      assertFalse(workload0.hasTasksToRun());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Workload workload0 = new Workload("");
      Workload workload1 = workload0.setParallelTasks((-836));
      int int0 = workload1.getParallelUnits();
      assertEquals((-836), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Workload workload0 = new Workload((String) null);
      workload0.getName();
      assertEquals((-1L), workload0.getDelay());
      assertTrue(workload0.hasTasksToRun());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Workload workload0 = new Workload("");
      workload0.getName();
      assertEquals(1, workload0.getParallelUnits());
      assertEquals((-1L), workload0.getDelay());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Workload workload0 = new Workload("h}.euaq/Y.lJ");
      ITaskFactory iTaskFactory0 = mock(ITaskFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iTaskFactory0).toString();
      workload0.setITaskFactory(iTaskFactory0);
      workload0.getITaskFactory();
      assertTrue(workload0.hasTasksToRun());
      assertEquals((-1L), workload0.getDelay());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Workload workload0 = new Workload("`V");
      workload0.finished();
      long long0 = workload0.getExecutionTime();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Workload workload0 = new Workload("start after workload ");
      Workload.DurationSpecification workload_DurationSpecification0 = workload0.duration();
      Workload workload1 = workload_DurationSpecification0.repetitions(1);
      Duration duration0 = workload1.getDuration();
      assertEquals((-1L), workload1.getDelay());
      assertEquals(1, duration0.getRepetitions());
      assertTrue(workload1.hasTasksToRun());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Workload workload0 = new Workload("-`u");
      assertEquals((-1L), workload0.getDelay());
      
      workload0.setDelay(0);
      workload0.getDelay();
      assertTrue(workload0.hasTasksToRun());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Workload workload0 = new Workload("SQ-1adYFz");
      assertFalse(workload0.hasDelay());
      
      Workload workload1 = workload0.setDelay(1L);
      long long0 = workload1.getDelay();
      assertTrue(workload0.hasDelay());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Workload workload0 = new Workload("(");
      assertTrue(workload0.isFinished());
      
      System.setCurrentTimeMillis((-1L));
      workload0.finished();
      long long0 = workload0.getExecutionTime();
      assertFalse(workload0.isFinished());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Workload workload0 = new Workload("lYz %tu");
      long long0 = workload0.getExecutionTime();
      assertEquals(0L, long0);
      assertEquals((-1L), workload0.getDelay());
      assertEquals(1, workload0.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Workload workload0 = new Workload("(");
      assertEquals(0L, workload0.getExecutionTime());
      
      System.setCurrentTimeMillis((-1L));
      workload0.finished();
      boolean boolean0 = workload0.isFinished();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Workload workload0 = new Workload("(");
      int int0 = workload0.getParallelUnits();
      assertEquals(1, int0);
      assertEquals((-1L), workload0.getDelay());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Workload workload0 = new Workload("(");
      workload0.getName();
      assertEquals(1, workload0.getParallelUnits());
      assertEquals((-1L), workload0.getDelay());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Workload workload0 = new Workload("");
      workload0.getDuration();
      assertEquals(1, workload0.getParallelUnits());
      assertEquals((-1L), workload0.getDelay());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Workload workload0 = new Workload("");
      workload0.getStartCondition();
      assertEquals((-1L), workload0.getDelay());
      assertTrue(workload0.hasTasksToRun());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Workload workload0 = new Workload("P;z$@-eSVN+6");
      ExecutionEvent executionEvent0 = ExecutionEvent.WorkloadCompletion;
      ExecutionHandler executionHandler0 = workload0.getHandler(executionEvent0);
      assertNotNull(executionHandler0);
      
      Workload workload1 = workload0.handle(executionEvent0, executionHandler0);
      workload1.getHandler(executionEvent0);
      assertEquals((-1L), workload1.getDelay());
      assertTrue(workload1.hasTasksToRun());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Workload workload0 = new Workload("start after workload ");
      boolean boolean0 = workload0.hasTasksToRun();
      assertTrue(boolean0);
      assertEquals((-1L), workload0.getDelay());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Workload workload0 = new Workload("(");
      assertEquals(1, workload0.getParallelUnits());
      
      workload0.setParallelTasks(0);
      boolean boolean0 = workload0.hasTasksToRun();
      assertEquals(0, workload0.getParallelUnits());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Workload workload0 = new Workload("SQ-1adYFz");
      assertEquals((-1L), workload0.getDelay());
      
      workload0.setDelay(1L);
      boolean boolean0 = workload0.hasDelay();
      assertEquals(1L, workload0.getDelay());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Workload workload0 = new Workload("net.engio.pips.lab.workload.Workload$DurationSpecification");
      boolean boolean0 = workload0.hasDelay();
      assertFalse(boolean0);
      assertEquals((-1L), workload0.getDelay());
      assertEquals(1, workload0.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ExecutionEvent executionEvent0 = ExecutionEvent.WorkloadCompletion;
      Workload workload0 = new Workload("_4D~");
      ExecutionHandler executionHandler0 = workload0.getHandler(executionEvent0);
      assertNotNull(executionHandler0);
      
      Workload.ExecutionHandlerWrapper workload_ExecutionHandlerWrapper0 = new Workload.ExecutionHandlerWrapper(executionHandler0);
      workload_ExecutionHandlerWrapper0.handle((ExecutionContext) null);
      assertEquals((-1L), workload0.getDelay());
      assertTrue(workload0.hasTasksToRun());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Workload workload0 = new Workload((String) null);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Workload.DurationSpecification workload_DurationSpecification0 = workload0.new DurationSpecification();
      workload_DurationSpecification0.lasts(2146561189, timeUnit0);
      workload0.getDuration();
      assertEquals((-1L), workload0.getDelay());
      assertTrue(workload0.hasTasksToRun());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Workload workload0 = new Workload((String) null);
      ExecutionEvent executionEvent0 = ExecutionEvent.WorkloadInitialization;
      ExecutionHandler executionHandler0 = workload0.getHandler(executionEvent0);
      assertNotNull(executionHandler0);
      
      Workload workload1 = workload0.handle(executionEvent0, executionHandler0);
      Workload workload2 = workload1.handle(executionEvent0, executionHandler0);
      assertEquals((-1L), workload2.getDelay());
      assertEquals(1, workload2.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Workload workload0 = new Workload("SQ-1adYFz");
      long long0 = workload0.getDelay();
      assertEquals((-1L), long0);
      assertEquals(1, workload0.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Workload workload0 = new Workload((String) null);
      workload0.getStarted();
      assertEquals((-1L), workload0.getDelay());
      assertEquals(1, workload0.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Workload workload0 = new Workload("");
      workload0.getITaskFactory();
      assertEquals((-1L), workload0.getDelay());
      assertEquals(1, workload0.getParallelUnits());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Workload workload0 = new Workload("");
      Workload.DurationSpecification workload_DurationSpecification0 = workload0.duration();
      workload_DurationSpecification0.depends(workload0);
      workload0.getDuration();
      assertEquals((-1L), workload0.getDelay());
      assertTrue(workload0.hasTasksToRun());
  }
}
