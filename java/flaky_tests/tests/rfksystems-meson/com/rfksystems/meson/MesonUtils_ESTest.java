/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 22:19:48 GMT 2022
 */

package com.rfksystems.meson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.rfksystems.meson.MesonUtils;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MesonUtils_ESTest extends MesonUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)92;
      int int0 = MesonUtils.intFromBytes(byteArray0, 1);
      assertEquals(23552, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-1);
      long long0 = MesonUtils.longFromUInt48(byteArray0, 0);
      assertEquals(65280L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-71);
      long long0 = MesonUtils.longFromUInt48(byteArray0, 0);
      assertEquals(12124160L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-1);
      long long0 = MesonUtils.longFromUInt48(byteArray0, 0);
      assertEquals(4278190080L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)117;
      long long0 = MesonUtils.longFromUInt48(byteArray0, 0);
      assertEquals(502511173632L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = MesonUtils.longToBytes((-2953L));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-12), (byte)119}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = MesonUtils.uInt48ToBytes((byte) (-28));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-28)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = MesonUtils.intToBytes((-1141));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-5), (byte) (-117)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(618);
      byte[] byteArray0 = MesonUtils.hexToBytes(charBuffer0);
      assertEquals(309, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-28);
      String string0 = MesonUtils.bytesToHex(byteArray0);
      assertEquals("00e40000", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      long long0 = MesonUtils.longFromUInt48(byteArray0, 0);
      assertEquals(133040906960896L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-28);
      int int0 = MesonUtils.intFromBytes(byteArray0, (byte)0);
      assertEquals(14942208, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-58);
      int int0 = MesonUtils.intFromBytes(byteArray0, 1);
      assertEquals((-973078528), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      byte[] byteArray0 = MesonUtils.hexToBytes(charBuffer0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = MesonUtils.bytesToHex(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        MesonUtils.longFromUInt48((byte[]) null, 552);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rfksystems.meson.MesonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        MesonUtils.longFromUInt48(byteArray0, (byte)91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 91 out of bounds for length 0
         //
         verifyException("com.rfksystems.meson.MesonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        MesonUtils.intFromBytes((byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rfksystems.meson.MesonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        MesonUtils.hexToBytes((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rfksystems.meson.MesonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        MesonUtils.bytesToHex((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rfksystems.meson.MesonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      // Undeclared exception!
      try { 
        MesonUtils.hexToBytes(charBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hex string needs to be even-length: \u0000
         //
         verifyException("com.rfksystems.meson.MesonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MesonUtils mesonUtils0 = new MesonUtils();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = MesonUtils.intToBytes(111);
      // Undeclared exception!
      try { 
        MesonUtils.intFromBytes(byteArray0, 111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 111 out of bounds for length 4
         //
         verifyException("com.rfksystems.meson.MesonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = MesonUtils.uInt48ToBytes(0);
      long long0 = MesonUtils.longFromUInt48(byteArray0, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = MesonUtils.intFromBytes(byteArray0, (byte)0);
      assertEquals(0, int0);
  }
}
