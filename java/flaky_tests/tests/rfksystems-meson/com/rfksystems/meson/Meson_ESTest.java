/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 22:17:35 GMT 2022
 */

package com.rfksystems.meson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.rfksystems.meson.Meson;
import java.nio.ByteBuffer;
import java.time.DateTimeException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Meson_ESTest extends Meson_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(14);
      Meson meson0 = new Meson(byteBuffer0);
      assertEquals(281474976710655L, Meson.MAX_TIME);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Meson meson0 = null;
      try {
        meson0 = new Meson(281474976710655L, byteArray0, (-2993));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Generator ID must be 4 bytes
         //
         verifyException("com.rfksystems.meson.Meson", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Meson meson0 = new Meson();
      Meson meson1 = new Meson();
      boolean boolean0 = meson1.equals(meson0);
      assertEquals(13, meson0.currentCounterValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Meson meson0 = new Meson();
      Meson meson1 = new Meson(4);
      boolean boolean0 = meson0.equals(meson1);
      assertEquals(97, meson1.currentCounterValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Meson meson0 = new Meson();
      Meson meson1 = new Meson(4);
      int int0 = meson1.compareTo(meson0);
      assertEquals(3, meson1.getSequence());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = Meson.isValidHexString("0000000000002134c9310000727c");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = Meson.isValidHexString("ffffffffffff2134c93100007278");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = Meson.isValidHexString(">z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Meson meson0 = new Meson("fffffffff078-2134c931-00007272");
      assertEquals(29298, meson0.getSequence());
      assertEquals(281474976706680L, meson0.getTime());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Meson meson0 = new Meson(1L, byteArray0, 1536);
      assertEquals(1536, meson0.getSequence());
      assertEquals(1L, meson0.getTime());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Meson meson0 = new Meson(0L);
      long long0 = meson0.getTime();
      assertEquals(0L, long0);
      assertEquals(8, meson0.getSequence());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis((-813L));
      Meson meson0 = new Meson();
      long long0 = meson0.getTime();
      assertEquals(8, meson0.currentCounterValue());
      assertEquals((-813L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Meson meson0 = null;
      try {
        meson0 = new Meson((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rfksystems.meson.Meson", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(6);
      Meson meson0 = null;
      try {
        meson0 = new Meson(byteBuffer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Meson meson0 = null;
      try {
        meson0 = new Meson((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rfksystems.meson.Meson", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2361);
      Meson meson0 = null;
      try {
        meson0 = new Meson(byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rfksystems.meson.Meson", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Meson meson0 = null;
      try {
        meson0 = new Meson((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rfksystems.meson.Meson", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Meson meson0 = new Meson();
      meson0.toByteArray();
      assertEquals(5, meson0.getSequence());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Meson meson0 = new Meson();
      meson0.getSequenceHex();
      assertEquals(7, meson0.currentCounterValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Meson meson0 = new Meson();
      byte[] byteArray0 = meson0.getSequenceBytes();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)73}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = Meson.directToByteArray();
      Meson meson0 = new Meson(byteArray0);
      assertEquals(7, meson0.currentCounterValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Meson meson0 = new Meson(281474976710655L);
      meson0.getInstant();
      assertEquals(39, meson0.getSequence());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Meson meson0 = null;
      try {
        meson0 = new Meson(14, byteArray0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Generator ID must be 4 bytes
         //
         verifyException("com.rfksystems.meson.Meson", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Meson meson0 = null;
      try {
        meson0 = new Meson((-477L), byteArray0, (-2873));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time must be between MIN_TIME 0 and MAX_TIME 281474976710655
         //
         verifyException("com.rfksystems.meson.Meson", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Meson meson0 = new Meson();
      ByteBuffer byteBuffer0 = meson0.toByteBuffer();
      byteBuffer0.putChar(6, 'O');
      Meson meson1 = new Meson(byteBuffer0);
      boolean boolean0 = meson0.equals(meson1);
      assertEquals(1392409281320L, meson1.getTime());
      assertEquals(14, meson0.currentCounterValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Meson meson0 = new Meson(0L);
      Meson meson1 = new Meson();
      boolean boolean0 = meson0.equals(meson1);
      assertEquals(7, meson0.currentCounterValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Meson meson0 = new Meson();
      Object object0 = new Object();
      boolean boolean0 = meson0.equals(object0);
      assertEquals(4, meson0.currentCounterValue());
      assertFalse(boolean0);
      assertEquals(3, meson0.getSequence());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Meson meson0 = new Meson();
      boolean boolean0 = meson0.equals(meson0);
      assertEquals(18, meson0.currentCounterValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Meson meson0 = new Meson();
      Meson meson1 = new Meson();
      boolean boolean0 = meson0.equals(meson1);
      assertEquals(101, meson1.currentCounterValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Meson meson0 = new Meson();
      Meson meson1 = new Meson(6);
      int int0 = meson0.compareTo(meson1);
      assertEquals(6, meson0.getSequence());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Meson meson0 = new Meson();
      // Undeclared exception!
      try { 
        meson0.compareTo((Meson) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rfksystems.meson.Meson", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Meson meson0 = new Meson();
      int int0 = meson0.compareTo(meson0);
      assertEquals(41, meson0.getSequence());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = Meson.isValidHexString("0144320f8328-2134c931-00007268");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = Meson.isValidHexString("com.rfksystems.meson.esonUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = Meson.isValidHexString("Generator IDmust be %d bytes");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = Meson.isValidHexString("Sequence must start from positive zero");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = Meson.isValidHexString((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = Meson.isValidHexString("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Meson meson0 = null;
      try {
        meson0 = new Meson(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rfksystems.meson.Meson", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Meson meson0 = new Meson("0144320f83282134c93100007210");
      assertEquals(29200, meson0.getSequence());
      assertEquals(1392409281320L, meson0.getTime());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Meson meson0 = null;
      try {
        meson0 = new Meson("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rfksystems.meson.Meson", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Meson meson0 = null;
      try {
        meson0 = new Meson("Hex string needs to be even-length: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rfksystems.meson.Meson", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Meson meson0 = null;
      try {
        meson0 = new Meson((-359L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time must be between MIN_TIME 0 and MAX_TIME 281474976710655
         //
         verifyException("com.rfksystems.meson.Meson", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Meson meson0 = null;
      try {
        meson0 = new Meson(281474976710685L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time must be between MIN_TIME 0 and MAX_TIME 281474976710655
         //
         verifyException("com.rfksystems.meson.Meson", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Meson meson0 = null;
      try {
        meson0 = new Meson(0L, (byte[]) null, 1032);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.rfksystems.meson.Meson", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = Meson.directToHexString();
      assertEquals("0144320f83280144320f0000001b", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Meson meson0 = new Meson();
      meson0.hashCode();
      assertEquals(2, meson0.getSequence());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = Meson.generatorIdAsBytes();
      Meson meson0 = null;
      try {
        meson0 = new Meson(1L, byteArray0, (-563));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sequence must start from positive zero
         //
         verifyException("com.rfksystems.meson.Meson", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = Meson.generatorIdAsHex();
      assertEquals("0144320f", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Meson meson0 = new Meson();
      meson0.getGeneratorId();
      assertEquals(22, meson0.currentCounterValue());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Meson meson0 = new Meson();
      String string0 = meson0.toFormatString();
      assertEquals("0144320f8328-0144320f-00000031", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Meson meson0 = new Meson();
      String string0 = meson0.toString();
      assertEquals("Meson{0144320f83280144323100000005}", string0);
      assertEquals(6, meson0.currentCounterValue());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Meson meson0 = new Meson();
      // Undeclared exception!
      try { 
        meson0.getLocalDateTime();
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain LocalDateTime from TemporalAccessor: 2014-02-14T20:21:21.320Z of type java.time.Instant
         //
         verifyException("java.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Meson meson0 = new Meson();
      int int0 = meson0.getSequence();
      assertEquals(46, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Meson meson0 = new Meson();
      ByteBuffer byteBuffer0 = meson0.toByteBuffer();
      Meson meson1 = new Meson(byteBuffer0);
      boolean boolean0 = meson1.equals(meson0);
      assertEquals(11, meson0.currentCounterValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = Meson.directToFormatString();
      assertEquals("0144320f8328-01443231-00000003", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Meson meson0 = new Meson();
      meson0.getGeneratorIdHex();
      assertEquals(11, meson0.getSequence());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Meson meson0 = new Meson();
      String string0 = meson0.toHexString();
      assertEquals("0144320f83280144323100000004", string0);
      assertEquals(5, meson0.currentCounterValue());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Meson meson0 = new Meson();
      long long0 = meson0.getTime();
      assertEquals(105, meson0.getSequence());
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ByteBuffer byteBuffer0 = Meson.directToByteBuffer();
      assertEquals(14, byteBuffer0.limit());
      
      Meson meson0 = new Meson(byteBuffer0);
      meson0.getTimeBytes();
      assertEquals(4, meson0.getSequence());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Meson meson0 = new Meson();
      meson0.getTimeHex();
      assertEquals(0, meson0.getSequence());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = Meson.currentCounterValue();
      assertEquals(0, int0);
  }
}
