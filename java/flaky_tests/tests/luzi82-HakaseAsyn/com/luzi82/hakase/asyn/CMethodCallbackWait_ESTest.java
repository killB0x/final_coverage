/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 02:09:16 GMT 2022
 */

package com.luzi82.hakase.asyn;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.luzi82.hakase.asyn.CMethodCallbackWait;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMethodCallbackWait_ESTest extends CMethodCallbackWait_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CMethodCallbackWait<Object> cMethodCallbackWait0 = new CMethodCallbackWait<Object>();
      assertNotNull(cMethodCallbackWait0);
      assertFalse(cMethodCallbackWait0.mCallbackDone);
      assertFalse(cMethodCallbackWait0.mExceptionDone);
      
      CMethodCallbackWait<Integer> cMethodCallbackWait1 = new CMethodCallbackWait<Integer>();
      assertNotNull(cMethodCallbackWait1);
      assertFalse(cMethodCallbackWait1.mExceptionDone);
      assertFalse(cMethodCallbackWait1.mCallbackDone);
      
      cMethodCallbackWait1.mException = null;
      Integer integer0 = new Integer((-280));
      assertEquals((-280), (int)integer0);
      assertNotNull(integer0);
      
      cMethodCallbackWait1.callback(integer0);
      assertTrue(cMethodCallbackWait1.mCallbackDone);
      assertFalse(cMethodCallbackWait1.mExceptionDone);
      
      cMethodCallbackWait1.exception((Exception) null);
      assertTrue(cMethodCallbackWait1.mExceptionDone);
      assertTrue(cMethodCallbackWait1.mCallbackDone);
      
      cMethodCallbackWait0.callback((Object) null);
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      assertFalse(cMethodCallbackWait0.mExceptionDone);
      
      Object object0 = cMethodCallbackWait0.waitDone();
      assertNull(object0);
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      assertFalse(cMethodCallbackWait0.mExceptionDone);
      
      Object object1 = cMethodCallbackWait0.waitDone();
      assertNull(object1);
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      assertFalse(cMethodCallbackWait0.mExceptionDone);
      
      cMethodCallbackWait0.mException = null;
      cMethodCallbackWait1.callback(integer0);
      assertTrue(cMethodCallbackWait1.mExceptionDone);
      assertTrue(cMethodCallbackWait1.mCallbackDone);
      
      cMethodCallbackWait0.mCallbackDone = true;
      Object object2 = cMethodCallbackWait0.waitDone();
      assertNull(object2);
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      assertFalse(cMethodCallbackWait0.mExceptionDone);
      
      Object object3 = cMethodCallbackWait0.waitDone();
      assertNull(object3);
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      assertFalse(cMethodCallbackWait0.mExceptionDone);
      
      Object object4 = new Object();
      assertNotNull(object4);
      
      cMethodCallbackWait0.callback(object4);
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      assertFalse(cMethodCallbackWait0.mExceptionDone);
      
      cMethodCallbackWait1.exception((Exception) null);
      assertTrue(cMethodCallbackWait1.mExceptionDone);
      assertTrue(cMethodCallbackWait1.mCallbackDone);
      
      Object object5 = cMethodCallbackWait0.waitDone();
      assertNotNull(object5);
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      assertFalse(cMethodCallbackWait0.mExceptionDone);
      assertSame(object5, object4);
      
      cMethodCallbackWait0.callback((Object) null);
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      assertFalse(cMethodCallbackWait0.mExceptionDone);
      
      cMethodCallbackWait0.callback((Object) null);
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      assertFalse(cMethodCallbackWait0.mExceptionDone);
      
      Integer integer1 = cMethodCallbackWait1.waitDone();
      assertEquals((-280), (int)integer1);
      assertNotNull(integer1);
      assertTrue(cMethodCallbackWait1.mExceptionDone);
      assertTrue(cMethodCallbackWait1.mCallbackDone);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CMethodCallbackWait<Object> cMethodCallbackWait0 = new CMethodCallbackWait<Object>();
      assertNotNull(cMethodCallbackWait0);
      assertFalse(cMethodCallbackWait0.mExceptionDone);
      assertFalse(cMethodCallbackWait0.mCallbackDone);
      
      MockException mockException0 = new MockException("", (Throwable) null);
      assertNotNull(mockException0);
      
      cMethodCallbackWait0.callback("");
      assertFalse(cMethodCallbackWait0.mExceptionDone);
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      
      cMethodCallbackWait0.exception(mockException0);
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      assertTrue(cMethodCallbackWait0.mExceptionDone);
      
      cMethodCallbackWait0.callback("");
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      assertTrue(cMethodCallbackWait0.mExceptionDone);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CMethodCallbackWait<Object> cMethodCallbackWait0 = new CMethodCallbackWait<Object>();
      assertNotNull(cMethodCallbackWait0);
      assertFalse(cMethodCallbackWait0.mCallbackDone);
      assertFalse(cMethodCallbackWait0.mExceptionDone);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      cMethodCallbackWait0.callback(integer0);
      assertFalse(cMethodCallbackWait0.mExceptionDone);
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      cMethodCallbackWait0.callback(object0);
      assertFalse(cMethodCallbackWait0.mExceptionDone);
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      
      MockException mockException0 = new MockException("", (Throwable) null);
      assertNotNull(mockException0);
      
      cMethodCallbackWait0.mException = (Exception) mockException0;
      assertEquals("", cMethodCallbackWait0.mException.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", cMethodCallbackWait0.mException.toString());
      
      MockException mockException1 = (MockException)cMethodCallbackWait0.mException;
      assertNotNull(mockException1);
      assertSame(mockException1, mockException0);
      
      cMethodCallbackWait0.exception(mockException0);
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      assertTrue(cMethodCallbackWait0.mExceptionDone);
      assertSame(mockException0, mockException1);
      
      cMethodCallbackWait0.exception(mockException1);
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      assertTrue(cMethodCallbackWait0.mExceptionDone);
      assertSame(mockException1, mockException0);
      
      cMethodCallbackWait0.exception(mockException1);
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      assertTrue(cMethodCallbackWait0.mExceptionDone);
      assertSame(mockException1, mockException0);
      
      CMethodCallbackWait<Integer> cMethodCallbackWait1 = new CMethodCallbackWait<Integer>();
      assertNotNull(cMethodCallbackWait1);
      assertFalse(cMethodCallbackWait1.mExceptionDone);
      assertFalse(cMethodCallbackWait1.mCallbackDone);
      
      cMethodCallbackWait1.callback(integer0);
      assertTrue(cMethodCallbackWait1.mCallbackDone);
      assertFalse(cMethodCallbackWait1.mExceptionDone);
      
      StackTraceElement[] stackTraceElementArray0 = mockException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertSame(mockException0, mockException1);
      assertEquals(3, stackTraceElementArray0.length);
      
      cMethodCallbackWait0.exception(mockException0);
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      assertTrue(cMethodCallbackWait0.mExceptionDone);
      assertSame(mockException0, mockException1);
      
      cMethodCallbackWait0.callback("");
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      assertTrue(cMethodCallbackWait0.mExceptionDone);
      
      Object object1 = cMethodCallbackWait0.waitDone();
      assertEquals("", object1);
      assertNotNull(object1);
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      assertTrue(cMethodCallbackWait0.mExceptionDone);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CMethodCallbackWait<Integer> cMethodCallbackWait0 = new CMethodCallbackWait<Integer>();
      assertNotNull(cMethodCallbackWait0);
      assertFalse(cMethodCallbackWait0.mExceptionDone);
      assertFalse(cMethodCallbackWait0.mCallbackDone);
      
      MockException mockException0 = new MockException((Throwable) null);
      assertNotNull(mockException0);
      
      cMethodCallbackWait0.mException = (Exception) mockException0;
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", cMethodCallbackWait0.mException.toString());
      assertNull(cMethodCallbackWait0.mException.getMessage());
      
      CMethodCallbackWait<Object> cMethodCallbackWait1 = new CMethodCallbackWait<Object>();
      assertNotNull(cMethodCallbackWait1);
      assertFalse(cMethodCallbackWait1.mExceptionDone);
      assertFalse(cMethodCallbackWait1.mCallbackDone);
      
      Exception exception0 = cMethodCallbackWait1.mException;
      assertNull(exception0);
      
      cMethodCallbackWait0.exception((Exception) null);
      assertFalse(cMethodCallbackWait0.mCallbackDone);
      assertTrue(cMethodCallbackWait0.mExceptionDone);
      
      CMethodCallbackWait<Object> cMethodCallbackWait2 = new CMethodCallbackWait<Object>();
      assertFalse(cMethodCallbackWait2.equals((Object)cMethodCallbackWait1));
      assertNotNull(cMethodCallbackWait2);
      assertFalse(cMethodCallbackWait2.mExceptionDone);
      assertFalse(cMethodCallbackWait2.mCallbackDone);
      
      Exception exception1 = cMethodCallbackWait2.mException;
      assertNull(exception1);
      
      cMethodCallbackWait0.exception((Exception) null);
      assertFalse(cMethodCallbackWait0.mCallbackDone);
      assertTrue(cMethodCallbackWait0.mExceptionDone);
      
      cMethodCallbackWait2.mException = null;
      try { 
        cMethodCallbackWait0.waitDone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.luzi82.hakase.asyn.CMethodCallbackWait", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CMethodCallbackWait<Object> cMethodCallbackWait0 = new CMethodCallbackWait<Object>();
      assertNotNull(cMethodCallbackWait0);
      assertFalse(cMethodCallbackWait0.mCallbackDone);
      assertFalse(cMethodCallbackWait0.mExceptionDone);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      cMethodCallbackWait0.callback(object0);
      assertTrue(cMethodCallbackWait0.mCallbackDone);
      assertFalse(cMethodCallbackWait0.mExceptionDone);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CMethodCallbackWait<Integer> cMethodCallbackWait0 = new CMethodCallbackWait<Integer>();
      int int0 = 48;
      CMethodCallbackWait<Object> cMethodCallbackWait1 = new CMethodCallbackWait<Object>();
      Exception exception0 = cMethodCallbackWait1.mException;
      cMethodCallbackWait0.mException = null;
      cMethodCallbackWait0.mExceptionDone = true;
      Integer integer0 = new Integer(48);
      cMethodCallbackWait0.callback(integer0);
      cMethodCallbackWait1.exception((Exception) null);
      Integer integer1 = new Integer(328);
      cMethodCallbackWait0.mCallbackReturn = integer1;
      Integer integer2 = new Integer(48);
      cMethodCallbackWait0.callback(integer2);
      cMethodCallbackWait1.exception((Exception) null);
      cMethodCallbackWait1.exception((Exception) null);
      cMethodCallbackWait1.exception((Exception) null);
      cMethodCallbackWait1.exception((Exception) null);
      cMethodCallbackWait1.exception((Exception) null);
      try { 
        cMethodCallbackWait1.waitDone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.luzi82.hakase.asyn.CMethodCallbackWait", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CMethodCallbackWait<Integer> cMethodCallbackWait0 = new CMethodCallbackWait<Integer>();
      CMethodCallbackWait<Object> cMethodCallbackWait1 = new CMethodCallbackWait<Object>();
      Exception exception0 = cMethodCallbackWait1.mException;
      cMethodCallbackWait0.exception((Exception) null);
      assertTrue(cMethodCallbackWait0.mExceptionDone);
  }
}
