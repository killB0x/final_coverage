/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 02:13:05 GMT 2022
 */

package com.luzi82.hakase.asyn;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.luzi82.hakase.asyn.CResultList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CResultList_ESTest extends CResultList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CResultList<Integer> cResultList0 = new CResultList<Integer>();
      // Undeclared exception!
      try { 
        cResultList0.waitDone((-251));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -252, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CResultList<Object> cResultList0 = new CResultList<Object>();
      Integer integer0 = new Integer((-788));
      cResultList0.addLast(integer0);
      cResultList0.size();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CResultList<Object> cResultList0 = new CResultList<Object>();
      // Undeclared exception!
      try { 
        cResultList0.waitDone(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CResultList<Object> cResultList0 = new CResultList<Object>();
      Integer integer0 = new Integer((-788));
      cResultList0.addLast(integer0);
      Object object0 = cResultList0.waitDone(1);
      assertEquals((-788), object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CResultList<Object> cResultList0 = new CResultList<Object>();
      cResultList0.clear();
      assertEquals(0, cResultList0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CResultList<Integer> cResultList0 = new CResultList<Integer>();
      cResultList0.callback((Integer) null);
      assertEquals(1, cResultList0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CResultList<Object> cResultList0 = new CResultList<Object>();
      int int0 = cResultList0.size();
      assertEquals(0, int0);
  }
}
