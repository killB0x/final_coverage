/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 02:14:11 GMT 2022
 */

package com.luzi82.hakase.asyn;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.luzi82.hakase.asyn.CCallbackList;
import com.luzi82.hakase.asyn.CMethodCallbackWait;
import com.luzi82.hakase.asyn.ICallback;
import java.util.ConcurrentModificationException;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CCallbackList_ESTest extends CCallbackList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      CCallbackList cCallbackList0 = new CCallbackList(forkJoinPool0);
      // Undeclared exception!
      try { 
        cCallbackList0.next(forkJoinPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.luzi82.hakase.asyn.CCallbackList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CCallbackList cCallbackList0 = new CCallbackList((Executor) null);
      cCallbackList0.start();
      cCallbackList0.offerFirst((ICallback<Object>) null);
      // Undeclared exception!
      try { 
        cCallbackList0.next((Object) null);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      CCallbackList cCallbackList0 = new CCallbackList(scheduledThreadPoolExecutor0);
      cCallbackList0.start();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      cCallbackList0.next(timeUnit0);
      assertEquals(0, cCallbackList0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      CCallbackList cCallbackList0 = new CCallbackList(forkJoinPool0);
      CMethodCallbackWait<Exception> cMethodCallbackWait0 = new CMethodCallbackWait<Exception>();
      cCallbackList0.addCallback((ICallback<Exception>) cMethodCallbackWait0);
      // Undeclared exception!
      try { 
        cCallbackList0.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.luzi82.hakase.asyn.SCallbackUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      CCallbackList cCallbackList0 = new CCallbackList(forkJoinPool0);
      CMethodCallbackWait<Exception> cMethodCallbackWait0 = new CMethodCallbackWait<Exception>();
      cCallbackList0.setExceptionCallback(cMethodCallbackWait0);
      assertFalse(cMethodCallbackWait0.mCallbackDone);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      CCallbackList cCallbackList0 = new CCallbackList(forkJoinPool0);
      MockThread mockThread0 = new MockThread();
      cCallbackList0.addRunnable(mockThread0);
      assertFalse(mockThread0.isInterrupted());
  }
}
