/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 08:14:34 GMT 2022
 */

package org.math.array.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.math.array.util.Slicing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Slicing_ESTest extends Slicing_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1097.8331666);
      double[][] doubleArray2 = new double[8][8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray1;
      doubleArray2[7] = doubleArray1;
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The element = -1097.8331666
         // -1097.8331666 is in 0 slices :
         // slice[0]  contains 0 elements
         //   min = 0.0  max = 0.0
         //   elements indices : 
         // 
         // slice[1]  contains 0 elements
         //   min = 0.0  max = 0.0
         //   elements indices : 
         // 
         // slice[2]  contains 0 elements
         //   min = 0.0  max = 0.0
         //   elements indices : 
         // 
         // slice[3]  contains 0 elements
         //   min = 0.0  max = 0.0
         //   elements indices : 
         // 
         // slice[4]  contains 0 elements
         //   min = 0.0  max = 0.0
         //   elements indices : 
         // 
         // slice[5]  contains 0 elements
         //   min = 0.0  max = 0.0
         //   elements indices : 
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(slicing0);
      
      double[][] doubleArray2 = slicing0.getSlicingMatrix();
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      int[] intArray0 = new int[3];
      Slicing slicing1 = null;
      try {
        slicing1 = new Slicing(doubleArray2, intArray0, "UNIFORM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The element = 0.0 1.0 0.0
         // 0.0 1.0 0.0 is in 0 slices :
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[][] doubleArray1 = new double[1][5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 291.072566;
      doubleArray1[0] = doubleArray2;
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(slicing0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[][] doubleArray1 = new double[1][1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(slicing0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      double[][] doubleArray1 = new double[0][6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[][] doubleArray1 = new double[1][1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Slicing slicing0 = new Slicing(doubleArray1, doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(slicing0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      int[] intArray0 = new int[1];
      double[] doubleArray1 = new double[1];
      intArray0[0] = 1244;
      Slicing slicing0 = new Slicing(doubleArray0, intArray0, "UNIFORM");
      assertEquals(1, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1244}, intArray0);
      assertNotNull(slicing0);
      
      int int0 = slicing0.findSlice(doubleArray1);
      assertEquals(1243, int0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new int[] {1244}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(slicing0);
      
      // Undeclared exception!
      try { 
        slicing0.findSlice((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(slicing0);
      
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        slicing0.findSlice(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row have 0 elements instead of 1 elements expected.
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing((double[][]) null, (double[][]) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing((double[][]) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[][] doubleArray1 = new double[1][0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray0, doubleArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1244;
      double[][] doubleArray0 = new double[7][1];
      Slicing slicing0 = new Slicing(doubleArray0, intArray0, "UNIFORM");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[15][1];
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray0, (int[]) null, "$~jxsk*#`i,':R3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      int[] intArray0 = new int[1];
      intArray0[0] = (-1202);
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray0, intArray0, "AUTO");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1202
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[1];
      double[][] doubleArray0 = new double[0][4];
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray0, intArray0, "NZ~F");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(slicing0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(slicing0);
      
      String string0 = slicing0.toString("UNIFORM");
      assertEquals("\nSlicing UNIFORM :\nSlice 0  contains 1 elements\n  min = 0.0  max = 0.0\n  elements indices : \n 0", string0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1097.8331666);
      doubleArray0[0] = doubleArray1;
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The element = -1097.8331666
         // -1097.8331666 is in 0 slices :
         // slice[0]  contains 0 elements
         //   min = -548.9165833  max = -1646.7497498999999
         //   elements indices : 
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1247;
      double[][] doubleArray0 = new double[7][1];
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray0, intArray0, "AUTO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too much slices defined for the values to slice... you should try to reduce the nyumber of slices !
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      Slicing slicing0 = new Slicing(doubleArray0, intArray0, "AUTO");
      assertEquals(1, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1}, intArray0);
      assertNotNull(slicing0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
      int[][] intArray0 = slicing0.getSlicesIndexes();
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[1];
      int int0 = slicing0.findSlice(doubleArray1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
      double[][] doubleArray1 = slicing0.getSlicesCenters();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
      double[][] doubleArray1 = slicing0.getSlicesWidths();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = slicing0.getSlicesCardinals();
      int int0 = slicing0.findSlice(doubleArray1);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      int[] intArray0 = new int[1];
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray0, intArray0, "AUTO");
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      int[] intArray0 = new int[1];
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray0, intArray0, "6S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The bounds type : 6Sis unknown. You must specify AUTO or UNIFORM.
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Slicing.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }
}
