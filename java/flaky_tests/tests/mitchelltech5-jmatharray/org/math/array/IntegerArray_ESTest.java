/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 08:08:00 GMT 2022
 */

package org.math.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.UnknownFormatConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.math.array.IntegerArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntegerArray_ESTest extends IntegerArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = IntegerArray.fill(382, 351);
      assertEquals(382, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = IntegerArray.cumProduct(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(382, intArray0.length);
      assertEquals(382, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      int[] intArray1 = IntegerArray.cumSum(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2505;
      int int0 = IntegerArray.maxIndex(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2505, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 1;
      int int0 = IntegerArray.minIndex(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 0}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(1452, 1452);
      assertEquals(1452, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = new int[6];
      intArray1[0] = 1452;
      // Undeclared exception!
      IntegerArray.deleteRows(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[][] intArray0 = new int[6][0];
      int[][] intArray1 = IntegerArray.deleteRowsRange(intArray0, 1, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[][] intArray0 = new int[0][7];
      // Undeclared exception!
      try { 
        IntegerArray.getDiagonal(intArray0, 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[][] intArray0 = new int[3][4];
      // Undeclared exception!
      try { 
        IntegerArray.getColumnsRangeCopy(intArray0, (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[][] intArray0 = new int[10][8];
      int[][] intArray1 = IntegerArray.getSubMatrixRangeCopy(intArray0, 1, 1, 1, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(10, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[][] intArray0 = new int[6][0];
      int[][] intArray1 = IntegerArray.transpose(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[][] intArray0 = new int[0][6];
      String string0 = IntegerArray.toString(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[][] intArray0 = new int[0][6];
      String string0 = IntegerArray.toString("';aTG:", intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[][] intArray0 = new int[5][2];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = IntegerArray.sum(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1722;
      int int0 = IntegerArray.sum(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1722}, intArray0);
      assertEquals(1722, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-5326);
      int int0 = IntegerArray.sum(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, (-5326), 0, 0, 0}, intArray0);
      assertEquals((-5326), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[][] intArray0 = new int[3][7];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = IntegerArray.product(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 865;
      intArray0[1] = (-192);
      intArray0[2] = (-314);
      intArray0[3] = (-1);
      int int0 = IntegerArray.product(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {865, (-192), (-314), (-1)}, intArray0);
      assertEquals((-52149120), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[][] intArray0 = new int[4][7];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = IntegerArray.minIndex(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[][] intArray1 = new int[2][7];
      intArray1[0] = intArray0;
      int[] intArray2 = IntegerArray.min(intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 917;
      intArray0[1] = 2555;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 2307;
      int int0 = IntegerArray.min(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {917, 2555, 1, 1, 2307}, intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-1912);
      int int0 = IntegerArray.min(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-1912), 0}, intArray0);
      assertEquals((-1912), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[][] intArray0 = new int[0][7];
      int[][] intArray1 = IntegerArray.mergeRows(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[][] intArray0 = new int[1][0];
      int[][] intArray1 = IntegerArray.mergeColumns(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[][] intArray0 = new int[6][0];
      int[] intArray1 = IntegerArray.merge(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[][] intArray1 = new int[3][4];
      intArray1[0] = intArray0;
      int[] intArray2 = IntegerArray.maxIndex(intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(3, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[][] intArray0 = new int[4][6];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = IntegerArray.max(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      int int0 = IntegerArray.max(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1, 0, 0, 0}, intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-319);
      int int0 = IntegerArray.max(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-319)}, intArray0);
      assertEquals((-319), int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[][] intArray0 = new int[0][6];
      double[][] doubleArray0 = IntegerArray.int2double(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[0];
      double[] doubleArray0 = IntegerArray.int2double(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = IntegerArray.fill(1970, 1970);
      assertEquals(1970, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = IntegerArray.insert(intArray0, 1970, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1970, intArray0.length);
      assertEquals(3940, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[][] intArray0 = new int[5][4];
      int[][] intArray1 = IntegerArray.getSubMatrixRangeCopy(intArray0, 1, 0, 1, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = IntegerArray.getCopy(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[][] intArray2 = new int[1][8];
      int[][] intArray3 = IntegerArray.getRowsCopy(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray2.length);
      assertEquals(0, intArray3.length);
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = IntegerArray.fill(0, 0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[3][5];
      intArray1[0] = intArray0;
      int[] intArray2 = IntegerArray.getRowCopy(intArray1, 0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(3, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = IntegerArray.getRangeCopy(intArray0, 0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = IntegerArray.getRangeCopy(intArray0, 1, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[][] intArray0 = new int[1][0];
      int[] intArray1 = IntegerArray.getDiagonal(intArray0, (-1));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = IntegerArray.getCopy(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[][] intArray0 = new int[6][6];
      int[][] intArray1 = IntegerArray.getColumnsRangeCopy(intArray0, 0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[][] intArray1 = new int[4][7];
      intArray1[1] = intArray0;
      int int0 = IntegerArray.getColumnDimension(intArray1, 1);
      assertEquals(4, intArray1.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[][][] intArray0 = new int[0][5][3];
      int[] intArray1 = IntegerArray.getColumnCopy(intArray0, (-574), 576);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = IntegerArray.fill(367, 646);
      assertEquals(367, intArray0.length);
      assertNotNull(intArray0);
      
      int[][] intArray1 = new int[0][2];
      int[][] intArray2 = IntegerArray.getColumnsCopy(intArray1, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(367, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      
      int[] intArray3 = IntegerArray.getColumnCopy(intArray2, 367);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertEquals(367, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray3.length);
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {}, intArray3);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray3, intArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      int[][] intArray0 = IntegerArray.floor(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = IntegerArray.floor(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[][] intArray0 = IntegerArray.fill(0, 0, 0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(0, 0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[][] intArray0 = new int[2][1];
      int[][] intArray1 = IntegerArray.deleteRowsRange(intArray0, 0, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[1];
      int[][] intArray2 = IntegerArray.deleteRows(intArray0, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = IntegerArray.deleteRange(intArray0, 0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = IntegerArray.deleteRange(intArray0, 0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[][] intArray0 = new int[10][8];
      int[] intArray1 = new int[1];
      int[][] intArray2 = IntegerArray.deleteColumns(intArray0, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(10, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(10, intArray2.length);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = IntegerArray.cumSum(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = IntegerArray.copy(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = IntegerArray.copy(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(516, 516);
      assertEquals(516, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      IntegerArray.transpose(intArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.transpose((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[][] intArray0 = new int[0][5];
      // Undeclared exception!
      try { 
        IntegerArray.transpose(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(3365, 3365);
      assertEquals(3365, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      IntegerArray.toString(intArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.toString((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[][] intArray0 = new int[5][0];
      // Undeclared exception!
      try { 
        IntegerArray.toString(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(530, 530);
      assertEquals(530, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      IntegerArray.toString("j^P", intArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[][] intArray0 = new int[5][6];
      // Undeclared exception!
      try { 
        IntegerArray.toString("2jQ,%", intArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ' '
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.toString(" ", (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[][] intArray0 = new int[1][0];
      // Undeclared exception!
      try { 
        IntegerArray.toString("", intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(1728, 1728);
      assertEquals(1728, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      IntegerArray.sum(intArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.sum((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[][] intArray0 = new int[0][4];
      // Undeclared exception!
      try { 
        IntegerArray.sum(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.sum((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(520, 520);
      assertEquals(520, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      IntegerArray.product(intArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.product((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int[][] intArray0 = new int[0][1];
      // Undeclared exception!
      try { 
        IntegerArray.product(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.product((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.minIndex((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[][] intArray0 = new int[0][9];
      // Undeclared exception!
      try { 
        IntegerArray.minIndex(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.minIndex((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(1210, 1210);
      assertEquals(1210, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      IntegerArray.min(intArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.min((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[][] intArray0 = new int[0][9];
      // Undeclared exception!
      try { 
        IntegerArray.min(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.min((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        IntegerArray.min(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.mergeRows((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(1213, 1213);
      assertEquals(1213, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      IntegerArray.mergeColumns(intArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.mergeColumns((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      // Undeclared exception!
      try { 
        IntegerArray.mergeColumns(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.merge((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[][] intArray0 = new int[0][7];
      // Undeclared exception!
      try { 
        IntegerArray.merge(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(530, 530);
      assertEquals(530, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      IntegerArray.maxIndex(intArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.maxIndex((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[][] intArray0 = new int[0][0];
      // Undeclared exception!
      try { 
        IntegerArray.maxIndex(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.maxIndex((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(163, 163);
      assertEquals(163, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      IntegerArray.max(intArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.max((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[][] intArray0 = new int[0][3];
      // Undeclared exception!
      try { 
        IntegerArray.max(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.max((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        IntegerArray.max(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(288, 288);
      assertEquals(288, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      IntegerArray.int2double(intArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.int2double((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.int2double((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.insertRows((int[][]) null, (-1506), (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[][] intArray0 = new int[0][0];
      // Undeclared exception!
      try { 
        IntegerArray.insertRows(intArray0, 852, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(222, 222);
      assertEquals(222, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      IntegerArray.insertColumns(intArray0, 222, intArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.insertColumns((int[][]) null, (-1490), (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[][] intArray0 = new int[1][4];
      // Undeclared exception!
      try { 
        IntegerArray.insertColumns(intArray0, (-981), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -981 out of bounds for length 5
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        IntegerArray.insert(intArray0, 0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        IntegerArray.insert(intArray0, 1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getSubMatrixRangeCopy((int[][]) null, 1, 1, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getSubMatrixRangeCopy((int[][]) null, (-487), 3369, 3369, 2616);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -752
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[][] intArray0 = new int[0][6];
      // Undeclared exception!
      try { 
        IntegerArray.getSubMatrixRangeCopy(intArray0, (-2796), (-2796), (-2796), (-2796));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2796 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getRowsRangeCopy((int[][]) null, 4070, 4070);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[][] intArray0 = new int[22][6];
      // Undeclared exception!
      try { 
        IntegerArray.getRowsRangeCopy(intArray0, (-1), (-3044));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3042
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[][] intArray0 = new int[5][6];
      // Undeclared exception!
      try { 
        IntegerArray.getRowsRangeCopy(intArray0, (-8), (-8));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -8 out of bounds for length 5
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[][] intArray0 = new int[1][6];
      // Undeclared exception!
      try { 
        IntegerArray.getRowsCopy(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[][] intArray1 = new int[0][3];
      // Undeclared exception!
      try { 
        IntegerArray.getRowsCopy(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getRowCopy((int[][]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[][] intArray0 = new int[6][6];
      // Undeclared exception!
      try { 
        IntegerArray.getRowCopy(intArray0, 1907);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1907 out of bounds for length 6
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[19];
      // Undeclared exception!
      try { 
        IntegerArray.getRangeCopy(intArray0, 5, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -4
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = IntegerArray.fill(1615, 1615);
      assertEquals(1615, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      try { 
        IntegerArray.getRangeCopy(intArray0, 1615, 1615);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getDiagonal((int[][]) null, (-4804));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[][] intArray0 = new int[3][4];
      // Undeclared exception!
      try { 
        IntegerArray.getDiagonal(intArray0, 2007);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2004
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[][] intArray0 = new int[16][6];
      // Undeclared exception!
      try { 
        IntegerArray.getDiagonal(intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getCopy((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getColumnsRangeCopy((int[][]) null, 28, 28);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[][] intArray0 = new int[4][6];
      // Undeclared exception!
      try { 
        IntegerArray.getColumnsRangeCopy(intArray0, 442, (-841));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1282
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getColumnsCopy((int[][]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[][] intArray1 = new int[5][0];
      // Undeclared exception!
      try { 
        IntegerArray.getColumnsCopy(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getColumnDimension((int[][]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[][] intArray0 = new int[0][4];
      // Undeclared exception!
      try { 
        IntegerArray.getColumnDimension(intArray0, (-150));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -150 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getColumnCopy((int[][][]) null, 3320, 3320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[][][] intArray0 = new int[10][5][5];
      // Undeclared exception!
      try { 
        IntegerArray.getColumnCopy(intArray0, (-4765), (-4765));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -4765 out of bounds for length 5
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getColumnCopy((int[][]) null, (-759));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[][] intArray0 = new int[2][8];
      // Undeclared exception!
      try { 
        IntegerArray.getColumnCopy(intArray0, 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 19 out of bounds for length 8
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.floor((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.floor((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      IntegerArray.fill(184, 184, 184);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.fill((-1926), (-1926), (-1926));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1926
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.fill((-913), (-913));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -913
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.diagonal((-6), (-6));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -6
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.deleteRowsRange((int[][]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[][] intArray0 = new int[4][8];
      // Undeclared exception!
      try { 
        IntegerArray.deleteRowsRange(intArray0, 0, 41);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -38
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[] intArray0 = new int[17];
      // Undeclared exception!
      try { 
        IntegerArray.deleteRows((int[][]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int[][] intArray0 = new int[7][3];
      // Undeclared exception!
      try { 
        IntegerArray.deleteRows(intArray0, intArray0[4]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.deleteRange((int[]) null, (-194), (-194));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int[] intArray0 = IntegerArray.fill(33, 33);
      assertEquals(33, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      try { 
        IntegerArray.deleteRange(intArray0, 33, 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumnsRange((int[][]) null, 1085, 1085);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[][] intArray0 = new int[5][0];
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumnsRange(intArray0, 1747, 1747);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int[][] intArray0 = new int[4][8];
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumnsRange(intArray0, 9, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(453, 453);
      assertEquals(453, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = new int[0];
      // Undeclared exception!
      IntegerArray.deleteColumns(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumns((int[][]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[][] intArray0 = new int[7][6];
      int[] intArray1 = IntegerArray.merge(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(42, intArray1.length);
      assertNotNull(intArray1);
      
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumns(intArray0, intArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -36
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.delete((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(2218, 2218);
      assertEquals(2218, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      IntegerArray.cumSum(intArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.cumSum((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[][] intArray0 = new int[0][3];
      // Undeclared exception!
      try { 
        IntegerArray.cumSum(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.cumSum((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(305, 305);
      assertEquals(305, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      IntegerArray.cumProduct(intArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.cumProduct((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[][] intArray0 = new int[0][1];
      // Undeclared exception!
      try { 
        IntegerArray.cumProduct(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.cumProduct((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.copy((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int[][] intArray0 = new int[0][7];
      // Undeclared exception!
      try { 
        IntegerArray.copy(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[][] intArray0 = new int[4][8];
      int[][] intArray1 = IntegerArray.transpose(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[][] intArray0 = new int[6][6];
      int[][] intArray1 = IntegerArray.insertRows(intArray0, 2, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[][] intArray0 = new int[5][6];
      String string0 = IntegerArray.toString("", intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(string0);
      assertEquals("     \n     \n     \n     \n     ", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[][] intArray0 = new int[4][8];
      String string0 = IntegerArray.toString(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(string0);
      assertEquals("0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[][] intArray0 = new int[2][6];
      int[][] intArray1 = IntegerArray.cumProduct(intArray0);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = IntegerArray.cumProduct(intArray0);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[][] intArray0 = new int[3][4];
      int[] intArray1 = IntegerArray.product(intArray0);
      // Undeclared exception!
      try { 
        IntegerArray.deleteRows(intArray0, intArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = new int[13];
      int int0 = IntegerArray.product(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = IntegerArray.product(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[][] intArray0 = new int[11][6];
      int[][] intArray1 = IntegerArray.cumSum(intArray0);
      assertNotSame(intArray1, intArray0);
      assertEquals(11, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = IntegerArray.sum(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 3822;
      int int0 = IntegerArray.maxIndex(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[13];
      int int0 = IntegerArray.maxIndex(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = IntegerArray.maxIndex(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(13, 13);
      int[] intArray1 = IntegerArray.maxIndex(intArray0);
      assertEquals(13, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[][] intArray0 = new int[9][6];
      int[] intArray1 = IntegerArray.maxIndex(intArray0);
      int[] intArray2 = new int[1];
      // Undeclared exception!
      try { 
        IntegerArray.delete(intArray2, intArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -5
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = 2480.34;
      int[] intArray0 = IntegerArray.floor(doubleArray0);
      int int0 = IntegerArray.minIndex(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = IntegerArray.minIndex(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(827, 827);
      // Undeclared exception!
      IntegerArray.minIndex(intArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int[][] intArray0 = new int[4][8];
      int[] intArray1 = IntegerArray.minIndex(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[][] intArray0 = new int[6][4];
      int[] intArray1 = IntegerArray.max(intArray0);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = IntegerArray.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[][] intArray0 = new int[2][7];
      int[] intArray1 = IntegerArray.min(intArray0);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[11];
      // Undeclared exception!
      try { 
        IntegerArray.delete(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = IntegerArray.delete(intArray0, intArray0);
      int[] intArray2 = IntegerArray.delete(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray2);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[][] intArray0 = new int[10][8];
      int[] intArray1 = new int[1];
      int[][] intArray2 = IntegerArray.deleteRows(intArray0, intArray1);
      assertEquals(9, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[][] intArray0 = new int[6][0];
      // Undeclared exception!
      try { 
        IntegerArray.deleteRowsRange(intArray0, 118, (-678));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int[][] intArray0 = new int[3][4];
      // Undeclared exception!
      try { 
        IntegerArray.deleteRowsRange(intArray0, (-114), (-114));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -113 out of bounds for length 3
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int[][] intArray0 = new int[4][8];
      int[][] intArray1 = IntegerArray.deleteColumnsRange(intArray0, 0, 0);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int[][] intArray0 = new int[5][4];
      int[][] intArray1 = IntegerArray.insertColumns(intArray0, 1, intArray0);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int[][] intArray0 = new int[4][8];
      int[][] intArray1 = IntegerArray.mergeColumns(intArray0);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int[][] intArray0 = new int[4][8];
      int[][] intArray1 = IntegerArray.mergeRows(intArray0);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int[][] intArray0 = new int[4][8];
      int[] intArray1 = IntegerArray.getDiagonal(intArray0, 0);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int[][] intArray0 = new int[4][1];
      int[][] intArray1 = IntegerArray.getRowsRangeCopy(intArray0, 1, 1);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int[][] intArray0 = new int[3][1];
      int[][] intArray1 = IntegerArray.getRowsCopy(intArray0, intArray0[2]);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int[][][] intArray0 = new int[10][2][5];
      int[] intArray1 = IntegerArray.getColumnCopy(intArray0, 0, 0);
      assertEquals(10, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int[][] intArray0 = new int[4][8];
      int[] intArray1 = IntegerArray.getColumnCopy(intArray0, 0);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int[][] intArray0 = new int[4][8];
      int[] intArray1 = IntegerArray.getDiagonal(intArray0, 1);
      int[][] intArray2 = IntegerArray.getColumnsCopy(intArray0, intArray1);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int[][] intArray0 = new int[5][2];
      int[][] intArray1 = IntegerArray.getRowsRangeCopy(intArray0, 0, (-1));
      assertEquals(0, intArray1.length);
      
      int[][] intArray2 = IntegerArray.getColumnsRangeCopy(intArray1, 0, 1822);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int[][] intArray0 = new int[18][8];
      int[][] intArray1 = IntegerArray.getSubMatrixRangeCopy(intArray0, 0, 0, 0, 0);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int[][] intArray0 = new int[4][8];
      int[][] intArray1 = IntegerArray.copy(intArray0);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int[] intArray0 = new int[5];
      double[] doubleArray0 = IntegerArray.int2double(intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int[][] intArray0 = new int[4][8];
      double[][] doubleArray0 = IntegerArray.int2double(intArray0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = IntegerArray.floor(doubleArray0);
      int int0 = IntegerArray.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      int[][] intArray0 = IntegerArray.floor(doubleArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int[] intArray0 = IntegerArray.fill(17, 17);
      // Undeclared exception!
      try { 
        IntegerArray.getCopy(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 17 out of bounds for length 17
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int[][] intArray0 = IntegerArray.fill(7, 7, 7);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = IntegerArray.insert(intArray0, 0, intArray0);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getRangeCopy((int[]) null, 7, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      IntegerArray integerArray0 = new IntegerArray();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        IntegerArray.deleteRange(intArray0, 0, 3446);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3446
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int[][] intArray0 = new int[4][7];
      int int0 = IntegerArray.getColumnDimension(intArray0, 1);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.copy((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int[][] intArray0 = new int[3][8];
      int[] intArray1 = IntegerArray.sum(intArray0);
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumns(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int[][] intArray0 = new int[3][5];
      int[] intArray1 = IntegerArray.getRowCopy(intArray0, 0);
      assertEquals(5, intArray1.length);
  }
}
