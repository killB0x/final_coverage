/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 15:08:57 GMT 2022
 */

package com.github.edgar615.util.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.edgar615.util.collection.BoundedQueue;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BoundedQueue_ESTest extends BoundedQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BoundedQueue<Integer> boundedQueue0 = BoundedQueue.create(743);
      Integer integer0 = new Integer(0);
      boundedQueue0.add(integer0);
      int int0 = boundedQueue0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BoundedQueue<Integer> boundedQueue0 = BoundedQueue.create(1);
      Integer integer0 = new Integer((-1));
      BoundedQueue<Object> boundedQueue1 = BoundedQueue.create(1);
      boundedQueue1.add(boundedQueue0);
      Object object0 = boundedQueue1.add(integer0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BoundedQueue<Object> boundedQueue0 = BoundedQueue.create(20);
      // Undeclared exception!
      try { 
        boundedQueue0.forEach((Consumer<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        BoundedQueue.create((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BoundedQueue<Object> boundedQueue0 = BoundedQueue.create(136);
      // Undeclared exception!
      try { 
        boundedQueue0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BoundedQueue<Object> boundedQueue0 = BoundedQueue.create(136);
      Iterator<Object> iterator0 = boundedQueue0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BoundedQueue<Object> boundedQueue0 = BoundedQueue.create(136);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boundedQueue0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BoundedQueue<Object> boundedQueue0 = BoundedQueue.create(136);
      boundedQueue0.clear();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BoundedQueue<Object> boundedQueue0 = BoundedQueue.create(136);
      Spliterator<Object> spliterator0 = boundedQueue0.spliterator();
      assertNotNull(spliterator0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BoundedQueue<Object> boundedQueue0 = BoundedQueue.create(136);
      int int0 = boundedQueue0.size();
      assertEquals(0, int0);
  }
}
