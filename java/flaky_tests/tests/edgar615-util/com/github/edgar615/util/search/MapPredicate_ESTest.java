/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 13:30:12 GMT 2022
 */

package com.github.edgar615.util.search;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.edgar615.util.search.Criterion;
import com.github.edgar615.util.search.MapPredicate;
import com.github.edgar615.util.search.Op;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapPredicate_ESTest extends MapPredicate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.LE;
      Boolean boolean0 = Boolean.TRUE;
      Criterion criterion0 = new Criterion("`0Y61d{H[r$Z&U$=", op0, boolean0, boolean0);
      hashMap0.put("`0Y61d{H[r$Z&U$=", boolean0);
      Boolean boolean1 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("au&sC+i\"Pt?!!(qW*C", "au&sC+i\"Pt?!!(qW*C");
      Op op0 = Op.LT;
      Criterion criterion0 = new Criterion("au&sC+i\"Pt?!!(qW*C", op0, "au&sC+i\"Pt?!!(qW*C");
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "9l`4H#\"");
      Op op0 = Op.IS_NULL;
      Op op1 = Op.GE;
      Criterion criterion0 = new Criterion("", op1, op0, op1);
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Op op0 = Op.GT;
      Criterion criterion0 = new Criterion(" is null", op0, op0, " is null");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put(" is null", criterion0);
      MapPredicate mapPredicate0 = new MapPredicate();
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.BETWEEN;
      hashMap0.put("=6D1RC=vVxJm9Y)", "=6D1RC=vVxJm9Y)");
      Criterion criterion0 = new Criterion("=6D1RC=vVxJm9Y)", op0, (Object) null, "=6D1RC=vVxJm9Y)");
      MapPredicate mapPredicate0 = new MapPredicate();
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("`0Y61d{H[r$Z&U$=", "`0Y61d{H[r$Z&U$=");
      Op op0 = Op.BETWEEN;
      Criterion criterion0 = new Criterion("`0Y61d{H[r$Z&U$=", op0, "java.lang.Object@0000000003");
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.GE;
      Object object0 = new Object();
      Criterion criterion0 = new Criterion("com.github.edgar615.util.search.MapPredicate", op0, object0, (Object) null);
      hashMap0.put("com.github.edgar615.util.search.MapPredicate", object0);
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("9l`4H#\"", "9l`4H#\"");
      Object object0 = new Object();
      Op op0 = Op.BETWEEN;
      Criterion criterion0 = new Criterion("9l`4H#\"", op0, object0);
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put("", object0);
      Op op0 = Op.NE;
      Criterion criterion0 = new Criterion("", op0, object0);
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "");
      Op op0 = Op.LE;
      Criterion criterion0 = new Criterion("", op0, op0, hashMap0);
      MapPredicate mapPredicate0 = new MapPredicate();
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.NE;
      Criterion criterion0 = new Criterion("9l`4Hw\"", op0, "9l`4Hw\"");
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertFalse(boolean0);
      
      Op op1 = Op.LT;
      Criterion criterion1 = new Criterion("9l`4Hw\"", op1, "Sh", boolean0);
      hashMap0.putIfAbsent("9l`4Hw\"", boolean0);
      Boolean boolean1 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.GT;
      hashMap0.put("1K8I@~B_h`oS6>", op0);
      Criterion criterion0 = new Criterion("1K8I@~B_h`oS6>", op0, op0);
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.BETWEEN;
      Criterion criterion0 = new Criterion("=6D1RC=vVxJm9Y)", op0, "=6D1RC=vVxJm9Y)", "=6D1RC=vVxJm9Y)");
      hashMap0.put("=6D1RC=vVxJm9Y)", "=6D1RC=vVxJm9Y)");
      MapPredicate mapPredicate0 = new MapPredicate();
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.BETWEEN;
      Object object0 = new Object();
      hashMap0.put("_P&J&%bX", "");
      Criterion criterion0 = new Criterion("_P&J&%bX", op0, object0, object0);
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.BETWEEN;
      Object object0 = new Object();
      Criterion criterion0 = new Criterion("pl?;)YU", op0, (Object) null, object0);
      hashMap0.put("pl?;)YU", "_P&J&%bX");
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.BETWEEN;
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put("", boolean0);
      Criterion criterion0 = new Criterion("", op0, (Object) null, boolean0);
      Boolean boolean1 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.BETWEEN;
      Object object0 = new Object();
      hashMap0.put("_P&J&%bX", object0);
      Criterion criterion0 = new Criterion("_P&J&%bX", op0, (Object) null, (Object) null);
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.NOT_IN;
      Criterion criterion0 = new Criterion("`0Y61d{H[r$Z&U$=", op0, hashMap0, hashMap0);
      hashMap0.put("`0Y61d{H[r$Z&U$=", criterion0);
      MapPredicate mapPredicate0 = new MapPredicate();
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.REGEXP;
      Criterion criterion0 = new Criterion((String) null, op0);
      hashMap0.put((String) null, (Object) null);
      MapPredicate mapPredicate0 = new MapPredicate();
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.CN;
      Criterion criterion0 = new Criterion("c0N.github.edgar615.util.search.Maprxdicate", op0, "c0N.github.edgar615.util.search.Maprxdicate", hashMap0);
      hashMap0.put("c0N.github.edgar615.util.search.Maprxdicate", "c0N.github.edgar615.util.search.Maprxdicate");
      MapPredicate mapPredicate0 = new MapPredicate();
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.EW;
      hashMap0.put(" < ", mapPredicate0);
      Criterion criterion0 = new Criterion(" < ", op0, op0);
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("`0Y61d^H[rsm&U$=", "`0Y61d^H[rsm&U$=");
      MapPredicate mapPredicate0 = new MapPredicate();
      Op op0 = Op.SW;
      Criterion criterion0 = new Criterion("`0Y61d^H[rsm&U$=", op0, hashMap0);
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      Op op0 = Op.IN;
      Criterion criterion0 = new Criterion("_P&J&%bX", op0, hashMap0, "pl?;)YU");
      hashMap0.put("_P&J&%bX", object0);
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.LE;
      Criterion criterion0 = new Criterion("`0M61d^H[rs&U$=", op0, hashMap0, hashMap0);
      hashMap0.put("`0M61d^H[rs&U$=", criterion0);
      MapPredicate mapPredicate0 = new MapPredicate();
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.LT;
      hashMap0.put("BETWEEN", "BETWEEN");
      Criterion criterion0 = new Criterion("BETWEEN", op0, mapPredicate0, hashMap0);
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.GE;
      Criterion criterion0 = new Criterion("c0N.github.edgar615.util.search.Maprxdicate", op0, "c0N.github.edgar615.util.search.Maprxdicate", hashMap0);
      hashMap0.put("c0N.github.edgar615.util.search.Maprxdicate", "c0N.github.edgar615.util.search.Maprxdicate");
      MapPredicate mapPredicate0 = new MapPredicate();
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.GT;
      Criterion criterion0 = new Criterion("KSwM?Y#XF-|f@A<V^:", op0, op0, hashMap0);
      hashMap0.put("KSwM?Y#XF-|f@A<V^:", "KSwM?Y#XF-|f@A<V^:");
      MapPredicate mapPredicate0 = new MapPredicate();
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.NE;
      Criterion criterion0 = new Criterion("e.ltkwfPjG/oc", op0, "e.ltkwfPjG/oc", "e.ltkwfPjG/oc");
      hashMap0.put("e.ltkwfPjG/oc", "e.ltkwfPjG/oc");
      MapPredicate mapPredicate0 = new MapPredicate();
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put(" between ", " between ");
      Op op0 = Op.EQ;
      Criterion criterion0 = new Criterion(" between ", op0);
      MapPredicate mapPredicate0 = new MapPredicate();
      // Undeclared exception!
      try { 
        mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.IS_NOT_NULL;
      Criterion criterion0 = new Criterion("com.github.edgar615.util.search.MapPredicate", op0);
      hashMap0.put("com.github.edgar615.util.search.MapPredicate", criterion0);
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put((String) null, (Object) null);
      Op op0 = Op.IS_NOT_NULL;
      Criterion criterion0 = new Criterion((String) null, op0);
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Op op0 = Op.IS_NOT_NULL;
      Criterion criterion0 = new Criterion((String) null, op0);
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Op op0 = Op.IS_NULL;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put((String) null, (Object) null);
      Criterion criterion0 = new Criterion((String) null, op0);
      MapPredicate mapPredicate0 = new MapPredicate();
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Op op0 = Op.IS_NULL;
      Criterion criterion0 = new Criterion("; u!IE|wO(Q?JEQ", op0);
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("; u!IE|wO(Q?JEQ", "; u!IE|wO(Q?JEQ");
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MapPredicate mapPredicate0 = new MapPredicate();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      Op op0 = Op.IS_NULL;
      Criterion criterion0 = new Criterion("9l`4Hw\"", op0, "9l`4Hw\"", object0);
      Boolean boolean0 = mapPredicate0.apply((Map<String, Object>) hashMap0, criterion0);
      assertTrue(boolean0);
  }
}
