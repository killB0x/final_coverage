/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 14:38:56 GMT 2022
 */

package com.github.edgar615.util.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.edgar615.util.base.SemanticVersion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SemanticVersion_ESTest extends SemanticVersion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        SemanticVersion.isAtLeastMajorMinor("V", (-3365), (-3365));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Version number is not semantic. Should be in the format d.d.d. See http://semver.org
         //
         verifyException("com.github.edgar615.util.base.SemanticVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SemanticVersion semanticVersion0 = null;
      try {
        semanticVersion0 = new SemanticVersion((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SemanticVersion semanticVersion0 = null;
      try {
        semanticVersion0 = new SemanticVersion("]! Should be in the format d.d.d. See http://semver.org");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Version number is not semantic []! Should be in the format d.d.d. See http://semver.org]! Should be in the format d.d.d. See http://semver.org
         //
         verifyException("com.github.edgar615.util.base.SemanticVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SemanticVersion semanticVersion0 = null;
      try {
        semanticVersion0 = new SemanticVersion("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Version number is not semantic. Should be in the format d.d.d. See http://semver.org
         //
         verifyException("com.github.edgar615.util.base.SemanticVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      boolean boolean0 = SemanticVersion.isAtLeast((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SemanticVersion semanticVersion0 = null;
      try {
        semanticVersion0 = new SemanticVersion("Version number is not semantic [");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Version number is not semantic. Should be in the format d.d.d. See http://semver.org
         //
         verifyException("com.github.edgar615.util.base.SemanticVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        SemanticVersion.isAtLeast("9._@mWr[*E", "v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Version number is not semantic [9._@mWr[*E]! Should be in the format d.d.d. See http://semver.org
         //
         verifyException("com.github.edgar615.util.base.SemanticVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SemanticVersion semanticVersion0 = null;
      try {
        semanticVersion0 = new SemanticVersion("v~'Ow'g!.i*Zu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Version number is not semantic. Should be in the format d.d.d. See http://semver.org
         //
         verifyException("com.github.edgar615.util.base.SemanticVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        SemanticVersion.isAtLeastMajorMinor((String) null, (-815), (-815));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
