/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 14:59:38 GMT 2022
 */

package com.github.edgar615.util.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.edgar615.util.concurrent.StripedLock;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StripedLock_ESTest extends StripedLock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        StripedLock.create(2576);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // storage power must be in [1..6]
         //
         verifyException("com.github.edgar615.util.concurrent.StripedLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        StripedLock.create((-1109));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // storage power must be in [1..6]
         //
         verifyException("com.github.edgar615.util.concurrent.StripedLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StripedLock stripedLock0 = StripedLock.create();
      stripedLock0.lock(247);
      stripedLock0.unlock(247);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StripedLock stripedLock0 = StripedLock.create(6);
      assertNotNull(stripedLock0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StripedLock stripedLock0 = StripedLock.create();
      // Undeclared exception!
      try { 
        stripedLock0.unlock(1);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.locks.ReentrantLock$Sync", e);
      }
  }
}
