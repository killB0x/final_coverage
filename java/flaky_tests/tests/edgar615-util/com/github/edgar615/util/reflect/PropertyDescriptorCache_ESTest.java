/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 14:48:23 GMT 2022
 */

package com.github.edgar615.util.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.edgar615.util.reflect.PropertyDescriptorCache;
import java.beans.PropertyDescriptor;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyDescriptorCache_ESTest extends PropertyDescriptorCache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Field> class0 = Field.class;
      PropertyDescriptorCache<Field> propertyDescriptorCache0 = PropertyDescriptorCache.create(class0);
      Map<String, Method> map0 = propertyDescriptorCache0.getSetterByName();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      PropertyDescriptorCache<Annotation> propertyDescriptorCache0 = PropertyDescriptorCache.create(class0);
      Map<String, PropertyDescriptor> map0 = propertyDescriptorCache0.getPropertyDescriptorsByName();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Field> class0 = Field.class;
      PropertyDescriptorCache<Field> propertyDescriptorCache0 = PropertyDescriptorCache.create(class0);
      Map<Method, PropertyDescriptor> map0 = propertyDescriptorCache0.getPropertyDescriptorsByMethod();
      assertEquals(13, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Field> class0 = Field.class;
      PropertyDescriptorCache<Field> propertyDescriptorCache0 = PropertyDescriptorCache.create(class0);
      Map<Field, PropertyDescriptor> map0 = propertyDescriptorCache0.getPropertyDescriptorsByField();
      assertEquals(5, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      PropertyDescriptorCache<Annotation> propertyDescriptorCache0 = PropertyDescriptorCache.create(class0);
      Map<Class<? extends Annotation>, Map<PropertyDescriptor, Annotation>> map0 = propertyDescriptorCache0.getPropertyDescriptorsByAnnotation();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      PropertyDescriptorCache<Annotation> propertyDescriptorCache0 = PropertyDescriptorCache.create(class0);
      Map<String, Method> map0 = propertyDescriptorCache0.getGetterByName();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyDescriptorCache.create((Class<Annotation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      PropertyDescriptorCache<Annotation> propertyDescriptorCache0 = PropertyDescriptorCache.create(class0);
      Map<Method, PropertyDescriptor> map0 = propertyDescriptorCache0.getPropertyDescriptorsByMethod();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Field> class0 = Field.class;
      PropertyDescriptorCache<Field> propertyDescriptorCache0 = PropertyDescriptorCache.create(class0);
      Map<String, Method> map0 = propertyDescriptorCache0.getGetterByName();
      assertEquals(12, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      PropertyDescriptorCache<Annotation> propertyDescriptorCache0 = PropertyDescriptorCache.create(class0);
      PropertyDescriptor propertyDescriptor0 = propertyDescriptorCache0.getDescriptorByField((Field) null);
      assertNull(propertyDescriptor0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Field> class0 = Field.class;
      PropertyDescriptorCache<Field> propertyDescriptorCache0 = PropertyDescriptorCache.create(class0);
      Set<Field> set0 = propertyDescriptorCache0.getFields();
      assertEquals(5, set0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertyDescriptorCache<Object> propertyDescriptorCache0 = PropertyDescriptorCache.create(class0);
      Map<Class<? extends Annotation>, Map<PropertyDescriptor, Annotation>> map0 = propertyDescriptorCache0.getPropertyDescriptorsByAnnotation();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertyDescriptorCache<Object> propertyDescriptorCache0 = PropertyDescriptorCache.create(class0);
      Set<Method> set0 = propertyDescriptorCache0.getMethods();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Field> class0 = Field.class;
      PropertyDescriptorCache<Field> propertyDescriptorCache0 = PropertyDescriptorCache.create(class0);
      Map<String, PropertyDescriptor> map0 = propertyDescriptorCache0.getPropertyDescriptorsByName();
      assertEquals(12, map0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Field> class0 = Field.class;
      PropertyDescriptorCache<Field> propertyDescriptorCache0 = PropertyDescriptorCache.create(class0);
      Class<Annotation> class1 = Annotation.class;
      Map<PropertyDescriptor, Annotation> map0 = propertyDescriptorCache0.getDescriptorsForAnnotation(class1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertyDescriptorCache<Object> propertyDescriptorCache0 = PropertyDescriptorCache.create(class0);
      PropertyDescriptor propertyDescriptor0 = propertyDescriptorCache0.getDescriptorByName("9^V3Du+");
      assertNull(propertyDescriptor0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      PropertyDescriptorCache<Annotation> propertyDescriptorCache0 = PropertyDescriptorCache.create(class0);
      Map<String, Method> map0 = propertyDescriptorCache0.getSetterByName();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Field> class0 = Field.class;
      PropertyDescriptorCache<Field> propertyDescriptorCache0 = PropertyDescriptorCache.create(class0);
      PropertyDescriptor propertyDescriptor0 = propertyDescriptorCache0.getDescriptorByMethod((Method) null);
      assertNull(propertyDescriptor0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertyDescriptorCache<Object> propertyDescriptorCache0 = PropertyDescriptorCache.create(class0);
      Map<Field, PropertyDescriptor> map0 = propertyDescriptorCache0.getPropertyDescriptorsByField();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      PropertyDescriptorCache<Annotation> propertyDescriptorCache0 = PropertyDescriptorCache.create(class0);
      Collection<PropertyDescriptor> collection0 = propertyDescriptorCache0.getDescriptors();
      assertNotNull(collection0);
  }
}
