/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 14:49:22 GMT 2022
 */

package com.github.edgar615.util.exception;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.edgar615.util.exception.CustomErrorCode;
import com.github.edgar615.util.exception.DefaultErrorCode;
import com.github.edgar615.util.exception.ErrorCode;
import com.github.edgar615.util.exception.SystemException;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SystemException_ESTest extends SystemException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultErrorCode defaultErrorCode0 = DefaultErrorCode.BREAKER_TRIPPED;
      SystemException systemException0 = SystemException.create(defaultErrorCode0);
      SystemException systemException1 = systemException0.set("rm7mqsMJ|(hxs~crr", systemException0);
      Map<String, Object> map0 = systemException1.getProperties();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      SystemException systemException0 = SystemException.wrap((ErrorCode) null, mockThrowable0);
      ErrorCode errorCode0 = systemException0.getErrorCode();
      assertNull(errorCode0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultErrorCode defaultErrorCode0 = DefaultErrorCode.BREAKER_TRIPPED;
      SystemException systemException0 = SystemException.create(defaultErrorCode0);
      ErrorCode errorCode0 = systemException0.getErrorCode();
      assertSame(defaultErrorCode0, errorCode0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CustomErrorCode customErrorCode0 = CustomErrorCode.create((-317), "");
      SystemException systemException0 = SystemException.create(customErrorCode0);
      ErrorCode errorCode0 = systemException0.getErrorCode();
      assertSame(errorCode0, customErrorCode0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CustomErrorCode customErrorCode0 = CustomErrorCode.create((-317), "");
      SystemException systemException0 = SystemException.create(customErrorCode0);
      Object object0 = new Object();
      systemException0.set("", object0);
      Object object1 = systemException0.get("");
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultErrorCode defaultErrorCode0 = DefaultErrorCode.SERVICE_UNAVAILABLE;
      SystemException systemException0 = SystemException.create(defaultErrorCode0);
      Map<String, Object> map0 = systemException0.asMap();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultErrorCode defaultErrorCode0 = DefaultErrorCode.SERVICE_UNAVAILABLE;
      SystemException systemException0 = SystemException.create(defaultErrorCode0);
      // Undeclared exception!
      try { 
        systemException0.set((String) null, systemException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultErrorCode defaultErrorCode0 = DefaultErrorCode.NOT_YOUR_RESOURCE;
      SystemException systemException0 = SystemException.wrap(defaultErrorCode0, (Throwable) null);
      // Undeclared exception!
      try { 
        systemException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemException.create((ErrorCode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.edgar615.util.exception.SystemException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultErrorCode defaultErrorCode0 = DefaultErrorCode.EXPIRE_TOKEN;
      SystemException systemException0 = SystemException.create(defaultErrorCode0);
      SystemException systemException1 = systemException0.setAll((Map<String, Object>) null);
      assertSame(systemException1, systemException0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultErrorCode defaultErrorCode0 = DefaultErrorCode.EXPIRE;
      SystemException systemException0 = SystemException.create(defaultErrorCode0);
      SystemException systemException1 = systemException0.setDetails("q`F/.\u0005joF$$I");
      String string0 = systemException1.getMessage();
      assertEquals("Request Expired\n\t--------------------------------------------------------------\n\t| DefaultErrorCode{number=1023, message='Request Expired'}\n\t| details=[q`F/.\u0005joF$$I]\n\t--------------------------------------------------------------", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      SystemException systemException0 = SystemException.wrap((ErrorCode) null, mockThrowable0);
      String string0 = systemException0.getMessage();
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: \n\t--------------------------------------------------------------\n\t--------------------------------------------------------------", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultErrorCode defaultErrorCode0 = DefaultErrorCode.INVALID_JSON;
      DefaultErrorCode defaultErrorCode1 = DefaultErrorCode.TOO_MANY_REQ;
      SystemException systemException0 = SystemException.create(defaultErrorCode1);
      SystemException systemException1 = SystemException.wrap(defaultErrorCode0, systemException0);
      assertNotSame(systemException1, systemException0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultErrorCode defaultErrorCode0 = DefaultErrorCode.CONFLICT;
      SystemException systemException0 = SystemException.create(defaultErrorCode0);
      SystemException systemException1 = SystemException.wrap((ErrorCode) null, systemException0);
      assertSame(systemException1, systemException0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultErrorCode defaultErrorCode0 = DefaultErrorCode.INVALID_JSON;
      SystemException systemException0 = SystemException.create(defaultErrorCode0);
      SystemException systemException1 = SystemException.wrap(defaultErrorCode0, systemException0);
      assertSame(systemException1, systemException0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CustomErrorCode customErrorCode0 = CustomErrorCode.create((-317), "");
      SystemException systemException0 = SystemException.create(customErrorCode0);
      Object object0 = systemException0.get("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SystemException systemException0 = SystemException.wrap((ErrorCode) null, (Throwable) null);
      // Undeclared exception!
      try { 
        systemException0.asMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.edgar615.util.exception.SystemException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CustomErrorCode customErrorCode0 = new CustomErrorCode(0, "zC\"?1^L{MB]kf?");
      SystemException systemException0 = SystemException.create(customErrorCode0);
      ErrorCode errorCode0 = systemException0.getErrorCode();
      assertSame(customErrorCode0, errorCode0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultErrorCode defaultErrorCode0 = DefaultErrorCode.EXPIRE_TOKEN;
      SystemException systemException0 = SystemException.create(defaultErrorCode0);
      Map<String, Object> map0 = systemException0.getProperties();
      SystemException systemException1 = systemException0.setAll(map0);
      assertSame(systemException1, systemException0);
  }
}
