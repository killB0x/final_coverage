/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 14:24:16 GMT 2022
 */

package com.github.edgar615.util.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.edgar615.util.collection.Tuple3;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Tuple3_ESTest extends Tuple3_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Tuple3<Integer, Integer, Integer> tuple3_0 = Tuple3.create((Integer) null, (Integer) null, integer0);
      Tuple3<Integer, Tuple3<Integer, Integer, Integer>, Integer> tuple3_1 = Tuple3.create((Integer) null, tuple3_0, (Integer) null);
      Integer integer1 = tuple3_1.getT3();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(2246);
      Tuple3<Integer, Integer, Integer> tuple3_0 = Tuple3.create((Integer) null, (Integer) null, integer0);
      Integer integer1 = tuple3_0.getT2();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Tuple3<Integer, Integer, Integer> tuple3_0 = Tuple3.create(integer0, integer0, integer0);
      Tuple3<Tuple3<Integer, Integer, Integer>, Tuple3<Integer, Integer, Integer>, Tuple3<Integer, Integer, Integer>> tuple3_1 = Tuple3.create(tuple3_0, tuple3_0, tuple3_0);
      Tuple3<Integer, Integer, Integer> tuple3_2 = tuple3_1.getT2();
      assertSame(tuple3_0, tuple3_2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Tuple3<Integer, Integer, Integer> tuple3_0 = Tuple3.create(integer0, integer0, integer0);
      Tuple3<Tuple3<Integer, Integer, Integer>, Integer, Tuple3<Integer, Integer, Integer>> tuple3_1 = Tuple3.create(tuple3_0, integer0, tuple3_0);
      Tuple3<Integer, Integer, Integer> tuple3_2 = tuple3_1.getT1();
      assertSame(tuple3_2, tuple3_0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-176));
      Tuple3<Integer, Integer, Integer> tuple3_0 = Tuple3.create(integer0, integer0, integer0);
      boolean boolean0 = tuple3_0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Tuple3<Integer, Integer, Integer> tuple3_0 = Tuple3.create((Integer) null, (Integer) null, integer0);
      Tuple3<Integer, Integer, Tuple3<Integer, Integer, Integer>> tuple3_1 = Tuple3.create((Integer) null, integer0, tuple3_0);
      Integer integer1 = tuple3_1.getT1();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1724);
      Tuple3<Integer, Integer, Integer> tuple3_0 = Tuple3.create(integer0, integer0, integer0);
      Tuple3<Integer, Tuple3<Integer, Integer, Integer>, Tuple3<Integer, Integer, Integer>> tuple3_1 = Tuple3.create(integer0, tuple3_0, tuple3_0);
      Object object0 = tuple3_1.getT3();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Tuple3<Integer, Integer, Integer> tuple3_0 = Tuple3.create(integer0, integer0, integer0);
      Tuple3<Integer, Integer, Tuple3<Integer, Integer, Integer>> tuple3_1 = Tuple3.create(integer0, integer0, tuple3_0);
      Tuple3<Integer, Integer, Integer> tuple3_2 = Tuple3.create(integer0, integer0, (Integer) null);
      boolean boolean0 = tuple3_2.equals(tuple3_1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(12);
      Tuple3<Integer, Integer, Integer> tuple3_0 = Tuple3.create(integer0, integer0, integer0);
      Tuple3<Integer, Integer, Integer> tuple3_1 = Tuple3.create(integer0, integer0, integer0);
      boolean boolean0 = tuple3_0.equals(tuple3_1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(197);
      Tuple3<Integer, Integer, Tuple3<Integer, Integer, Integer>> tuple3_0 = Tuple3.create(integer0, integer0, (Tuple3<Integer, Integer, Integer>) null);
      Tuple3<Integer, Integer, Integer> tuple3_1 = Tuple3.create(integer0, (Integer) null, integer0);
      boolean boolean0 = tuple3_1.equals(tuple3_0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Tuple3<Integer, Integer, Integer> tuple3_0 = Tuple3.create(integer0, integer0, integer0);
      Tuple3<Integer, Tuple3<Integer, Integer, Integer>, Tuple3<Integer, Integer, Integer>> tuple3_1 = Tuple3.create(integer0, tuple3_0, tuple3_0);
      boolean boolean0 = tuple3_0.equals(tuple3_1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Tuple3<Integer, Integer, Integer> tuple3_0 = Tuple3.create((Integer) null, (Integer) null, integer0);
      Tuple3<Integer, Integer, Integer> tuple3_1 = Tuple3.create(integer0, integer0, integer0);
      boolean boolean0 = tuple3_0.equals(tuple3_1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-507));
      Tuple3<Integer, Integer, Integer> tuple3_0 = Tuple3.create(integer0, integer0, integer0);
      Tuple3<Tuple3<Integer, Integer, Integer>, Integer, Integer> tuple3_1 = Tuple3.create(tuple3_0, integer0, integer0);
      boolean boolean0 = tuple3_1.equals(tuple3_0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tuple3<Tuple3<Integer, Integer, Integer>, Integer, Tuple3<Integer, Integer, Integer>> tuple3_0 = Tuple3.create((Tuple3<Integer, Integer, Integer>) null, (Integer) null, (Tuple3<Integer, Integer, Integer>) null);
      Tuple3<Tuple3<Integer, Integer, Integer>, Tuple3<Integer, Integer, Integer>, Integer> tuple3_1 = Tuple3.create((Tuple3<Integer, Integer, Integer>) null, (Tuple3<Integer, Integer, Integer>) null, (Integer) null);
      boolean boolean0 = tuple3_1.equals(tuple3_0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-535));
      Tuple3<Integer, Integer, Integer> tuple3_0 = Tuple3.create(integer0, integer0, integer0);
      Tuple3<Integer, Integer, Tuple3<Integer, Integer, Integer>> tuple3_1 = Tuple3.create(integer0, integer0, tuple3_0);
      boolean boolean0 = tuple3_1.equals(tuple3_0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tuple3<Integer, Integer, Integer> tuple3_0 = Tuple3.create((Integer) null, (Integer) null, (Integer) null);
      boolean boolean0 = tuple3_0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(12);
      Tuple3<Integer, Integer, Integer> tuple3_0 = Tuple3.create(integer0, integer0, integer0);
      boolean boolean0 = tuple3_0.equals(tuple3_0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Tuple3<Integer, Integer, Integer> tuple3_0 = Tuple3.create(integer0, integer0, integer0);
      Tuple3<Integer, Integer, Tuple3<Integer, Integer, Integer>> tuple3_1 = Tuple3.create(integer0, (Integer) null, tuple3_0);
      tuple3_1.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(189);
      Tuple3<Integer, Integer, Integer> tuple3_0 = Tuple3.create(integer0, integer0, (Integer) null);
      tuple3_0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(2246);
      Tuple3<Integer, Integer, Integer> tuple3_0 = Tuple3.create((Integer) null, (Integer) null, integer0);
      Tuple3<Integer, Integer, Tuple3<Integer, Integer, Integer>> tuple3_1 = Tuple3.create((Integer) null, integer0, tuple3_0);
      tuple3_1.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer((-535));
      Tuple3<Integer, Integer, Integer> tuple3_0 = Tuple3.create(integer0, integer0, integer0);
      Tuple3<Integer, Integer, Tuple3<Integer, Integer, Integer>> tuple3_1 = Tuple3.create(integer0, integer0, tuple3_0);
      String string0 = tuple3_1.toString();
      assertEquals("(-535, -535, (-535, -535, -535))", string0);
  }
}
