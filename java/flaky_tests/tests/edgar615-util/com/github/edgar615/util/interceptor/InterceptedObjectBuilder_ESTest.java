/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 15:00:28 GMT 2022
 */

package com.github.edgar615.util.interceptor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.edgar615.util.interceptor.InterceptedObjectBuilder;
import com.github.edgar615.util.interceptor.Interceptor;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InterceptedObjectBuilder_ESTest extends InterceptedObjectBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InterceptedObjectBuilder interceptedObjectBuilder0 = InterceptedObjectBuilder.create();
      Object object0 = interceptedObjectBuilder0.bind((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InterceptedObjectBuilder interceptedObjectBuilder0 = InterceptedObjectBuilder.create();
      interceptedObjectBuilder0.addInterceptor((Interceptor) null);
      // Undeclared exception!
      try { 
        interceptedObjectBuilder0.bind((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.edgar615.util.interceptor.InterceptedObjectBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InterceptedObjectBuilder interceptedObjectBuilder0 = InterceptedObjectBuilder.create();
      // Undeclared exception!
      try { 
        interceptedObjectBuilder0.addInterceptors((List<Interceptor>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InterceptedObjectBuilder interceptedObjectBuilder0 = InterceptedObjectBuilder.create();
      Object object0 = interceptedObjectBuilder0.bind(interceptedObjectBuilder0);
      assertSame(interceptedObjectBuilder0, object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InterceptedObjectBuilder interceptedObjectBuilder0 = InterceptedObjectBuilder.create();
      LinkedList<Interceptor> linkedList0 = new LinkedList<Interceptor>();
      InterceptedObjectBuilder interceptedObjectBuilder1 = interceptedObjectBuilder0.addInterceptors(linkedList0);
      assertSame(interceptedObjectBuilder0, interceptedObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InterceptedObjectBuilder interceptedObjectBuilder0 = InterceptedObjectBuilder.create();
      Interceptor interceptor0 = mock(Interceptor.class, new ViolatedAssumptionAnswer());
      InterceptedObjectBuilder interceptedObjectBuilder1 = interceptedObjectBuilder0.addInterceptor(interceptor0);
      Object object0 = interceptedObjectBuilder1.bind(interceptedObjectBuilder0);
      assertSame(object0, interceptedObjectBuilder0);
  }
}
