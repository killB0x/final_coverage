/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 13:51:25 GMT 2022
 */

package com.github.edgar615.util.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.edgar615.util.base.AntPathMatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AntPathMatcher_ESTest extends AntPathMatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher.Builder antPathMatcher_Builder1 = antPathMatcher_Builder0.withIgnoreCase();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder1.build();
      boolean boolean0 = antPathMatcher0.isMatch("RB#esD,:=XMj", "r~D9?>JlZ[*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      boolean boolean0 = antPathMatcher0.isMatch("/!", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      boolean boolean0 = antPathMatcher0.isMatch("/lMF8h", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      // Undeclared exception!
      try { 
        antPathMatcher0.isMatch((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      // Undeclared exception!
      try { 
        antPathMatcher0.extractPathWithinPattern("WZ>COp[pvD[@", "WZ>COp[pvD[@");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Splitter
         //
         verifyException("com.github.edgar615.util.base.AntPathMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      antPathMatcher_Builder0.withTrimTokens();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      boolean boolean0 = antPathMatcher0.isMatch("&|p'=M)bszje\"*j", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      boolean boolean0 = antPathMatcher0.isMatch("?i/I7xm{!P.)@TxU", "/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      boolean boolean0 = antPathMatcher0.isMatch("TG[SC`jcwa", "Vq+v8Qn9=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      boolean boolean0 = antPathMatcher0.isMatch("*et", "*et");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      boolean boolean0 = antPathMatcher0.isMatch("*", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      boolean boolean0 = antPathMatcher0.isMatch("*", "*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      boolean boolean0 = antPathMatcher0.isMatch("*", "/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      boolean boolean0 = antPathMatcher0.isMatch("*et", "25");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      boolean boolean0 = antPathMatcher0.isMatch("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      antPathMatcher_Builder0.withIgnoreCase();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      boolean boolean0 = antPathMatcher0.isMatch(".2*J}`&rtZoa^+.T!", ".2*J}`&rtZoa^+.T!");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      antPathMatcher_Builder0.withIgnoreCase();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      boolean boolean0 = antPathMatcher0.isMatch("VR+v8^Qn9=", "v528!H|cLb[;^s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      antPathMatcher_Builder0.withIgnoreCase();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      boolean boolean0 = antPathMatcher0.isMatch(">D*(VaL\",NyX\"MrRR(#", ">D*(VaL\",NyX\"MrRR(#");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      antPathMatcher_Builder0.withTrimTokens();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      // Undeclared exception!
      try { 
        antPathMatcher0.isMatch(" ", " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      boolean boolean0 = antPathMatcher0.isMatch("JmNA **", "JmNA **");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      boolean boolean0 = antPathMatcher0.isMatch("*", "UIu/n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      boolean boolean0 = antPathMatcher0.isMatch("/", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      boolean boolean0 = antPathMatcher0.isMatch("/d", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      antPathMatcher_Builder0.withIgnoreCase();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder0.build();
      boolean boolean0 = antPathMatcher0.isMatch("mNA **M8", "mNA **M8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher.Builder antPathMatcher_Builder1 = antPathMatcher_Builder0.withPathSeparator('~');
      assertSame(antPathMatcher_Builder1, antPathMatcher_Builder0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher.Builder antPathMatcher_Builder1 = antPathMatcher_Builder0.withTrimTokens();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder1.build();
      boolean boolean0 = antPathMatcher0.isMatch("<QZNZ** ~oUwx1+H", "<QZNZ** ~oUwx1+H");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AntPathMatcher.Builder antPathMatcher_Builder0 = new AntPathMatcher.Builder();
      AntPathMatcher.Builder antPathMatcher_Builder1 = antPathMatcher_Builder0.withMatchStart();
      AntPathMatcher antPathMatcher0 = antPathMatcher_Builder1.build();
      boolean boolean0 = antPathMatcher0.isMatch("/", "");
      assertTrue(boolean0);
  }
}
