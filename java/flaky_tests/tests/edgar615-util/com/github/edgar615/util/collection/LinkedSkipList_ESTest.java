/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 13:35:45 GMT 2022
 */

package com.github.edgar615.util.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.edgar615.util.collection.LinkedSkipList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LinkedSkipList_ESTest extends LinkedSkipList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>((-1090));
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1090));
      linkedSkipList0.add(integer0, integer1);
      Integer integer2 = new Integer(2441);
      List<Integer> list0 = linkedSkipList0.findRange(integer1, integer2);
      assertTrue(list0.contains((-1090)));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>((-1090));
      Integer integer0 = new Integer(1);
      linkedSkipList0.add(integer0, integer0);
      long long0 = linkedSkipList0.size();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>();
      // Undeclared exception!
      try { 
        linkedSkipList0.remove((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.edgar615.util.collection.LinkedSkipList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>();
      // Undeclared exception!
      try { 
        linkedSkipList0.get((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.edgar615.util.collection.LinkedSkipList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>();
      // Undeclared exception!
      try { 
        linkedSkipList0.findRange((Integer) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.edgar615.util.collection.LinkedSkipList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>(2004318071);
      Integer integer0 = new Integer(2004318071);
      // Undeclared exception!
      linkedSkipList0.add(integer0, integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>();
      linkedSkipList0.add((Integer) null, (Integer) null);
      // Undeclared exception!
      try { 
        linkedSkipList0.add((Integer) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.edgar615.util.collection.LinkedSkipList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>();
      Integer integer0 = new Integer(4804);
      linkedSkipList0.add(integer0, integer0);
      Integer integer1 = new Integer((-13));
      Integer integer2 = new Integer((-2232));
      linkedSkipList0.add(integer2, integer2);
      Integer integer3 = linkedSkipList0.remove(integer1);
      assertNull(integer3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>();
      Integer integer0 = new Integer(1840700269);
      linkedSkipList0.add(integer0, integer0);
      Integer integer1 = Integer.valueOf(3027);
      Integer integer2 = linkedSkipList0.get(integer1);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>();
      Integer integer0 = new Integer(60);
      Integer integer1 = new Integer((-1829));
      linkedSkipList0.add(integer1, integer1);
      Integer integer2 = new Integer(16);
      linkedSkipList0.add(integer0, integer2);
      List<Integer> list0 = linkedSkipList0.findRange(integer2, integer0);
      assertTrue(list0.contains(16));
      assertFalse(list0.contains((-1829)));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>();
      Integer integer0 = new Integer(1721);
      linkedSkipList0.add(integer0, integer0);
      Integer integer1 = Integer.valueOf((-3224));
      List<Integer> list0 = linkedSkipList0.findRange(integer1, integer1);
      assertFalse(list0.contains(1721));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>(1);
      Integer integer0 = new Integer(1);
      List<Integer> list0 = linkedSkipList0.findRange(integer0, integer0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>(1);
      Integer integer0 = new Integer(1);
      linkedSkipList0.add(integer0, integer0);
      List<Integer> list0 = linkedSkipList0.findRange(integer0, integer0);
      assertTrue(list0.contains(1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>();
      Integer integer0 = new Integer(5);
      linkedSkipList0.add(integer0, integer0);
      Integer integer1 = new Integer((-2536));
      Integer integer2 = linkedSkipList0.add(integer1, integer1);
      linkedSkipList0.remove(integer2);
      assertEquals(1L, linkedSkipList0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>((-238));
      Integer integer0 = new Integer((-238));
      Integer integer1 = linkedSkipList0.remove(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>(1);
      Integer integer0 = Integer.valueOf(1);
      linkedSkipList0.add(integer0, integer0);
      linkedSkipList0.remove(integer0);
      assertEquals(0L, linkedSkipList0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>((-1));
      Integer integer0 = new Integer((-1));
      linkedSkipList0.add(integer0, integer0);
      Integer integer1 = linkedSkipList0.get(integer0);
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>((-35));
      Integer integer0 = new Integer((-35));
      Integer integer1 = linkedSkipList0.add(integer0, integer0);
      Integer integer2 = new Integer(1);
      Integer integer3 = linkedSkipList0.add(integer2, integer1);
      assertFalse(integer3.equals((Object)integer2));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(2);
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>(2);
      linkedSkipList0.add(integer0, integer0);
      linkedSkipList0.add(integer0, integer0);
      Integer integer1 = new Integer(0);
      linkedSkipList0.add(integer1, integer1);
      assertEquals(2L, linkedSkipList0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>(1);
      Integer integer0 = new Integer(1);
      Integer integer1 = linkedSkipList0.add(integer0, integer0);
      linkedSkipList0.add(integer1, integer1);
      assertEquals(1L, linkedSkipList0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedSkipList<Integer, Integer> linkedSkipList0 = new LinkedSkipList<Integer, Integer>();
      long long0 = linkedSkipList0.size();
      assertEquals(0L, long0);
  }
}
