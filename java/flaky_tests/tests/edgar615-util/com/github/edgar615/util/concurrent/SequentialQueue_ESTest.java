/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 14:31:38 GMT 2022
 */

package com.github.edgar615.util.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.edgar615.util.concurrent.IdentificationExtractor;
import com.github.edgar615.util.concurrent.SequentialQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SequentialQueue_ESTest extends SequentialQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IdentificationExtractor<String> identificationExtractor0 = (IdentificationExtractor<String>) mock(IdentificationExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(identificationExtractor0).apply(anyString());
      SequentialQueue<String> sequentialQueue0 = new SequentialQueue<String>(identificationExtractor0, (-1));
      sequentialQueue0.enqueue("$");
      sequentialQueue0.size();
      IdentificationExtractor<Object> identificationExtractor1 = (IdentificationExtractor<Object>) mock(IdentificationExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(identificationExtractor1).apply(any());
      SequentialQueue<Object> sequentialQueue1 = new SequentialQueue<Object>(identificationExtractor1, 1);
      sequentialQueue1.enqueue("$");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IdentificationExtractor<String> identificationExtractor0 = (IdentificationExtractor<String>) mock(IdentificationExtractor.class, new ViolatedAssumptionAnswer());
      SequentialQueue<String> sequentialQueue0 = new SequentialQueue<String>(identificationExtractor0, 718);
      IdentificationExtractor<Object> identificationExtractor1 = (IdentificationExtractor<Object>) mock(IdentificationExtractor.class, new ViolatedAssumptionAnswer());
      SequentialQueue<Object> sequentialQueue1 = new SequentialQueue<Object>(identificationExtractor1);
      sequentialQueue1.size();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IdentificationExtractor<String> identificationExtractor0 = (IdentificationExtractor<String>) mock(IdentificationExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(identificationExtractor0).apply(anyString());
      SequentialQueue<String> sequentialQueue0 = new SequentialQueue<String>(identificationExtractor0, (-27));
      String string0 = "";
      sequentialQueue0.enqueue("");
      // Undeclared exception!
      try { 
        sequentialQueue0.dequeue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IdentificationExtractor<String> identificationExtractor0 = (IdentificationExtractor<String>) mock(IdentificationExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(identificationExtractor0).apply(anyString());
      SequentialQueue<String> sequentialQueue0 = new SequentialQueue<String>(identificationExtractor0, 1);
      String string0 = "";
      sequentialQueue0.enqueue("");
      // Undeclared exception!
      try { 
        sequentialQueue0.dequeue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IdentificationExtractor<Object> identificationExtractor0 = (IdentificationExtractor<Object>) mock(IdentificationExtractor.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      SequentialQueue<Object> sequentialQueue0 = new SequentialQueue<Object>(identificationExtractor0, 0);
      IdentificationExtractor<Object> identificationExtractor1 = (IdentificationExtractor<Object>) mock(IdentificationExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(identificationExtractor1).apply(any());
      SequentialQueue<Object> sequentialQueue1 = new SequentialQueue<Object>(identificationExtractor1);
      sequentialQueue1.enqueue(sequentialQueue0);
      // Undeclared exception!
      try { 
        sequentialQueue1.dequeue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IdentificationExtractor<Object> identificationExtractor0 = (IdentificationExtractor<Object>) mock(IdentificationExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(identificationExtractor0).apply(any());
      SequentialQueue<Object> sequentialQueue0 = new SequentialQueue<Object>(identificationExtractor0, (-1));
      Object object0 = new Object();
      sequentialQueue0.enqueue(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IdentificationExtractor<Object> identificationExtractor0 = (IdentificationExtractor<Object>) mock(IdentificationExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(identificationExtractor0).apply(any());
      SequentialQueue<Object> sequentialQueue0 = new SequentialQueue<Object>(identificationExtractor0, 1472);
      sequentialQueue0.enqueue("");
      sequentialQueue0.enqueue("");
      sequentialQueue0.enqueue((Object) null);
      IdentificationExtractor<String> identificationExtractor1 = (IdentificationExtractor<String>) mock(IdentificationExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(identificationExtractor1).apply(anyString());
      SequentialQueue<String> sequentialQueue1 = new SequentialQueue<String>(identificationExtractor1, 1472);
      String string0 = "=";
      // Undeclared exception!
      try { 
        sequentialQueue1.complete("=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IdentificationExtractor<String> identificationExtractor0 = null;
      SequentialQueue<String> sequentialQueue0 = new SequentialQueue<String>((IdentificationExtractor<String>) null);
      String string0 = null;
      String string1 = "#.bj\\TPjrJ6C1";
      // Undeclared exception!
      try { 
        sequentialQueue0.enqueue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.edgar615.util.concurrent.SequentialQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IdentificationExtractor<Object> identificationExtractor0 = (IdentificationExtractor<Object>) mock(IdentificationExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(identificationExtractor0).apply(any());
      SequentialQueue<Object> sequentialQueue0 = new SequentialQueue<Object>(identificationExtractor0);
      sequentialQueue0.size();
      Object object0 = new Object();
      sequentialQueue0.enqueue(object0);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        sequentialQueue0.complete(object1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IdentificationExtractor<Object> identificationExtractor0 = (IdentificationExtractor<Object>) mock(IdentificationExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(identificationExtractor0).apply(any());
      SequentialQueue<Object> sequentialQueue0 = new SequentialQueue<Object>(identificationExtractor0, 1193);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        sequentialQueue0.complete(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SequentialQueue<Object> sequentialQueue0 = new SequentialQueue<Object>((IdentificationExtractor<Object>) null);
      // Undeclared exception!
      try { 
        sequentialQueue0.enqueue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.edgar615.util.concurrent.SequentialQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IdentificationExtractor<Object> identificationExtractor0 = (IdentificationExtractor<Object>) mock(IdentificationExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(identificationExtractor0).apply(any());
      SequentialQueue<Object> sequentialQueue0 = new SequentialQueue<Object>(identificationExtractor0);
      IdentificationExtractor<String> identificationExtractor1 = null;
      // Undeclared exception!
      try { 
        sequentialQueue0.complete((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }
}
