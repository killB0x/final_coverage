/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 14:20:07 GMT 2022
 */

package com.github.edgar615.util.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.edgar615.util.reflect.BeanUtils;
import java.beans.PropertyDescriptor;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanUtils_ESTest extends BeanUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Class<Annotation> class1 = Annotation.class;
      Map<PropertyDescriptor, Annotation> map0 = BeanUtils.getPropertyDescriptorsWithAnnotation((Class<?>) class0, class1);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Set<Method> set0 = BeanUtils.getMethods(class0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Set<Field> set0 = BeanUtils.getFields(class0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Map<String, Object> map0 = BeanUtils.toMap(object0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Field> class0 = Field.class;
      PropertyDescriptor propertyDescriptor0 = BeanUtils.getPropertyDescriptorByName(class0, "com.github.edgar615.util.reflect.ReflectionException");
      assertNull(propertyDescriptor0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Field> class0 = Field.class;
      boolean boolean0 = BeanUtils.isFullyAccessible(class0, "class");
      PropertyDescriptor propertyDescriptor0 = BeanUtils.getPropertyDescriptorByName(class0, "class");
      boolean boolean1 = BeanUtils.isFullyAccessible(propertyDescriptor0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = BeanUtils.getFieldWithName(class0, "declaredAnnotations");
      assertFalse(field0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.writeMethod((Class<?>) null, "]yUV:E<v2I3D;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.readMethod((Class<?>) null, "]yUV:E<v2I3D;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.isWritable((Class<?>) null, "zlasz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.isWritable((PropertyDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.edgar615.util.reflect.BeanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.isReadable((Class<?>) null, "]yUV:E<v2I3D;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.isReadable((PropertyDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.edgar615.util.reflect.BeanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.isFullyAccessible((Class<?>) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.isFullyAccessible((PropertyDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.edgar615.util.reflect.BeanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.hasProperty((Class<?>) null, "]yUV:E<v2I3D;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        BeanUtils.getPropertyDescriptorsWithAnnotation((Class<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.getPropertyDescriptors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.getPropertyDescriptorByNameOrThrow((Class<?>) null, "class");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.getPropertyDescriptorByName((Class<?>) null, "class");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        BeanUtils.getFieldWithName(class0, "k`{}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.edgar615.util.reflect.BeanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Field> class0 = Field.class;
      boolean boolean0 = BeanUtils.isReadable(class0, "class");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Field> class0 = Field.class;
      PropertyDescriptor propertyDescriptor0 = BeanUtils.getPropertyDescriptorByName(class0, "class");
      boolean boolean0 = BeanUtils.isReadable(propertyDescriptor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Field> class0 = Field.class;
      boolean boolean0 = BeanUtils.isWritable(class0, "class");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Method method0 = BeanUtils.readMethod(class0, "com.github.edgar615.util.reflect.PropertyDescriptorCache");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Method method0 = BeanUtils.readMethod(class0, "annotations");
      assertEquals("public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()", method0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Method method0 = BeanUtils.writeMethod(class0, "com.github.edgar615.util.reflect.ReflectionException");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Method method0 = BeanUtils.writeMethod(class0, "class");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Field> class0 = Field.class;
      try { 
        BeanUtils.getFieldWithName(class0, "class");
        fail("Expecting exception: NoSuchFieldException");
      
      } catch(NoSuchFieldException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Field> class0 = Field.class;
      boolean boolean0 = BeanUtils.hasProperty(class0, "class");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Field> class0 = Field.class;
      boolean boolean0 = BeanUtils.hasProperty(class0, "J>G7AL{dEsuLp{/NHh");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = BeanUtils.isWritable(class0, "class");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Field> class0 = Field.class;
      PropertyDescriptor propertyDescriptor0 = BeanUtils.getPropertyDescriptorByName(class0, "accessible");
      boolean boolean0 = BeanUtils.isWritable(propertyDescriptor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Field> class0 = Field.class;
      boolean boolean0 = BeanUtils.isFullyAccessible(class0, "declaredAnnotations");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Field> class0 = Field.class;
      boolean boolean0 = BeanUtils.isFullyAccessible(class0, "JM4`UM7N=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        BeanUtils.getPropertyDescriptorByNameOrThrow(class0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property '' not found for 'Field'
         //
         verifyException("com.github.edgar615.util.reflect.BeanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Field> class0 = Field.class;
      PropertyDescriptor propertyDescriptor0 = BeanUtils.getPropertyDescriptorByNameOrThrow(class0, "class");
      assertFalse(propertyDescriptor0.isConstrained());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Map<String, Object> map0 = BeanUtils.toMap((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.toMap("Property '%s' not found for '%s'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassCastException: class java.lang.Boolean cannot be cast to class java.lang.reflect.Method (java.lang.Boolean and java.lang.reflect.Method are in module java.base of loader 'bootstrap')
         //
         verifyException("com.github.edgar615.util.reflect.BeanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Collection<PropertyDescriptor> collection0 = BeanUtils.getPropertyDescriptors(class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Field> class0 = Field.class;
      boolean boolean0 = BeanUtils.isReadable(class0, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.getFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.getMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }
}
