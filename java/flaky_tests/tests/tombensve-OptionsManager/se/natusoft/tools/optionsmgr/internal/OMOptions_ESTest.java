/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 15:01:50 GMT 2022
 */

package se.natusoft.tools.optionsmgr.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;
import se.natusoft.tools.optionsmgr.internal.OMOptions;
import se.natusoft.tools.optionsmgr.internal.OptionsManagerType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OMOptions_ESTest extends OMOptions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OMOptions oMOptions0 = new OMOptions();
      oMOptions0.setPublicPathSeparator((String) null);
      String string0 = oMOptions0.getPublicPathSeparator();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OMOptions oMOptions0 = new OMOptions();
      oMOptions0.setPublicPathSeparator("");
      String string0 = oMOptions0.getPublicPathSeparator();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OMOptions oMOptions0 = new OMOptions();
      OptionsManagerType optionsManagerType0 = OptionsManagerType.RANDOM;
      oMOptions0.setOptionsManagerType(optionsManagerType0);
      oMOptions0.getOptionsManagerType();
      assertEquals(".", oMOptions0.getPublicPathSeparator());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OMOptions oMOptions0 = new OMOptions();
      // Undeclared exception!
      try { 
        oMOptions0.toDate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OMOptions oMOptions0 = new OMOptions();
      // Undeclared exception!
      try { 
        oMOptions0.addSimpleDateFormat((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OMOptions oMOptions0 = new OMOptions();
      // Undeclared exception!
      try { 
        oMOptions0.addSimpleDateFormat("As_;A.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'A'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OMOptions oMOptions0 = new OMOptions();
      oMOptions0.toDate(".");
      assertEquals(".", oMOptions0.getPublicPathSeparator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OMOptions oMOptions0 = new OMOptions();
      String string0 = oMOptions0.getPublicPathSeparator();
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OMOptions oMOptions0 = new OMOptions();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      oMOptions0.addDateFormat(dateFormat0);
      assertEquals(".", oMOptions0.getPublicPathSeparator());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OMOptions oMOptions0 = new OMOptions();
      OptionsManagerType optionsManagerType0 = oMOptions0.getOptionsManagerType();
      oMOptions0.setOptionsManagerType(optionsManagerType0);
      assertEquals(".", oMOptions0.getPublicPathSeparator());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OMOptions oMOptions0 = new OMOptions();
      oMOptions0.addSimpleDateFormat(".");
      Date date0 = oMOptions0.toDate(".");
      assertNotNull(date0);
      assertEquals(".", oMOptions0.getPublicPathSeparator());
  }
}
