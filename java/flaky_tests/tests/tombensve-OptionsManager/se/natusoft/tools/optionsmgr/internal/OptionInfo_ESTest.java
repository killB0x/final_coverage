/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:40:50 GMT 2022
 */

package se.natusoft.tools.optionsmgr.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.text.DateFormat;
import java.util.Locale;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;
import se.natusoft.tools.optionsmgr.internal.OMOptions;
import se.natusoft.tools.optionsmgr.internal.OptionInfo;
import se.natusoft.tools.optionsmgr.internal.OptionModelInfo;
import se.natusoft.tools.optionsmgr.internal.OptionsManagerType;
import se.natusoft.tools.optionsmgr.internal.Path;
import se.natusoft.tools.optionsmgr.internal.PropertyInfo;
import se.natusoft.tools.optionsmgr.internal.PropertyValueValidator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionInfo_ESTest extends OptionInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setName("");
      optionModelInfo0.setOwner(optionModelInfo0);
      optionModelInfo0.getName();
      optionModelInfo0.getOwner();
      try { 
        optionModelInfo0.setValueAsString("']");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // [OptionsManager BUG! Please report this!] setStringValue(value) called without a model instace available! use instantiateModel() or assureModelInstance() before calling this!
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setName("/h&E)O!&.P");
      optionModelInfo0.getModelChildNamesAsCommaSeparatedString();
      optionModelInfo0.getCollectionType();
      optionModelInfo0.getSetterMethod();
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator();
      optionModelInfo0.getModelChildNamesAsCommaSeparatedString();
      OMOptions oMOptions0 = new OMOptions();
      optionModelInfo0.setOMOptions(oMOptions0);
      propertyValueValidator0.getMustMatchText();
      propertyValueValidator0.getMustMatchText();
      propertyValueValidator0.getMustMatchText();
      propertyValueValidator0.getMustMatchText();
      optionModelInfo0.setPropertyValueValidator(propertyValueValidator0);
      propertyValueValidator0.isValid("Setter (");
      optionModelInfo0.hasReceivedValue();
      optionModelInfo0.getName();
      // Undeclared exception!
      try { 
        optionModelInfo0.getErrMsgPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      assertFalse(optionInfo0.hasReceivedValue());
      assertFalse(optionInfo0.isRequired());
      assertFalse(optionInfo0.isFlag());
      
      optionInfo0.clearCurrentCollection();
      optionInfo0.assureModelInstance();
      optionInfo0.setDescription("");
      optionInfo0.getCollectionType();
      optionInfo0.getSetterMethod();
      optionInfo0.getDescription();
      optionInfo0.isRequired();
      // Undeclared exception!
      try { 
        optionInfo0.getErrMsgPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setOwner(optionModelInfo0);
      assertFalse(optionModelInfo0.hasReceivedValue());
      assertFalse(optionModelInfo0.isFlag());
      assertFalse(optionModelInfo0.isRequired());
      
      StringBuilder stringBuilder0 = new StringBuilder("*cKA| ");
      StringBuilder stringBuilder1 = stringBuilder0.replace(1, 1, "]U=");
      StringBuilder stringBuilder2 = stringBuilder1.insert(1, "*cKA| ");
      // Undeclared exception!
      try { 
        optionModelInfo0.toString(stringBuilder2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Class<Integer> class0 = Integer.class;
      optionModelInfo0.setType(class0);
      assertFalse(optionModelInfo0.isFlag());
      assertFalse(optionModelInfo0.hasReceivedValue());
      assertFalse(optionModelInfo0.isRequired());
      
      try { 
        optionModelInfo0.assureModelInstance();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to instantiate options model!
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionModelInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      PropertyInfo propertyInfo0 = new PropertyInfo((Field) null);
      optionModelInfo0.setPropertyInfo(propertyInfo0);
      // Undeclared exception!
      try { 
        optionModelInfo0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator("5U");
      propertyValueValidator0.isValid("5U");
      optionModelInfo0.setPropertyValueValidator(propertyValueValidator0);
      Class<Object> class0 = Object.class;
      optionModelInfo0.setType(class0);
      optionModelInfo0.getPropertyValueValidator();
      // Undeclared exception!
      try { 
        optionModelInfo0.setValue(propertyValueValidator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator();
      optionModelInfo0.setPropertyValueValidator(propertyValueValidator0);
      assertFalse(optionModelInfo0.isRequired());
      assertFalse(optionModelInfo0.isFlag());
      assertFalse(optionModelInfo0.hasReceivedValue());
      
      optionModelInfo0.getPropertyValueValidator();
      optionModelInfo0.getName();
      assertFalse(optionModelInfo0.isRequired());
      assertFalse(optionModelInfo0.hasReceivedValue());
      assertFalse(optionModelInfo0.isFlag());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Path path0 = new Path("");
      optionModelInfo0.setRealPath(path0);
      Path path1 = optionModelInfo0.getRealPath();
      // Undeclared exception!
      try { 
        optionModelInfo0.setValue(path1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper$Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setOwner(optionModelInfo0);
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator();
      optionModelInfo0.setPropertyValueValidator(propertyValueValidator0);
      Class<Object> class0 = Object.class;
      optionModelInfo0.setType(class0);
      try { 
        optionModelInfo0.setValue(class0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // [OptionsManager BUG! Please report this!] setValue(value) called without a model instace available! use instantiateModel() or assureModelInstance() before calling this!
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setOwner(optionModelInfo0);
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator();
      optionModelInfo0.setPropertyValueValidator(propertyValueValidator0);
      Class<Object> class0 = Object.class;
      optionModelInfo0.setType(class0);
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        optionModelInfo0.setValue(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // [OptionsManager BUG! Please report this!] setValue(value) called without a model instace available! use instantiateModel() or assureModelInstance() before calling this!
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator("[WmZ}vJs");
      optionModelInfo0.setPropertyValueValidator(propertyValueValidator0);
      Class<Integer> class0 = Integer.class;
      optionModelInfo0.setType(class0);
      // Undeclared exception!
      try { 
        optionModelInfo0.setValue(propertyValueValidator0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 7
         // [WmZ}vJs
         //        ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator();
      optionModelInfo0.setPropertyValueValidator(propertyValueValidator0);
      optionModelInfo0.setFlag(true);
      Class<Object> class0 = Object.class;
      optionModelInfo0.setType(class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        optionModelInfo0.setValue(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator();
      optionInfo0.setPropertyValueValidator(propertyValueValidator0);
      Class<Integer> class0 = Integer.class;
      optionInfo0.setType(class0);
      // Undeclared exception!
      try { 
        optionInfo0.setValue(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator("5h");
      optionModelInfo0.setPropertyValueValidator(propertyValueValidator0);
      Class<Object> class0 = Object.class;
      optionModelInfo0.setType(class0);
      // Undeclared exception!
      try { 
        optionModelInfo0.setValue(propertyValueValidator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      Class<Object> class0 = Object.class;
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator("propertyInfo=");
      optionInfo0.setPropertyValueValidator(propertyValueValidator0);
      optionInfo0.setFlag(true);
      optionInfo0.setType(class0);
      OMOptions oMOptions0 = new OMOptions();
      optionInfo0.getOMOptions();
      // Undeclared exception!
      try { 
        optionInfo0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Class<Annotation> class0 = Annotation.class;
      optionModelInfo0.setCollectionType(class0);
      optionModelInfo0.setOwner(optionModelInfo0);
      OptionModelInfo optionModelInfo1 = optionModelInfo0.getOwner();
      optionModelInfo1.setType(class0);
      // Undeclared exception!
      try { 
        optionModelInfo1.assureModelInstance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionModelInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      optionInfo0.setFlag(true);
      Class<Object> class0 = Object.class;
      optionInfo0.setType(class0);
      // Undeclared exception!
      try { 
        optionInfo0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      Class<Object> class0 = Object.class;
      optionInfo0.setFlag(true);
      optionInfo0.setType(class0);
      OMOptions oMOptions0 = new OMOptions();
      optionInfo0.setOMOptions(oMOptions0);
      optionInfo0.getOMOptions();
      // Undeclared exception!
      try { 
        optionInfo0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setOwner(optionModelInfo0);
      // Undeclared exception!
      try { 
        optionModelInfo0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      // Undeclared exception!
      try { 
        optionInfo0.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Class<Object> class0 = Object.class;
      optionModelInfo0.setType(class0);
      optionModelInfo0.isBooleanType();
      assertFalse(optionModelInfo0.isFlag());
      assertFalse(optionModelInfo0.hasReceivedValue());
      assertFalse(optionModelInfo0.isRequired());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionInfo0.setOwner(optionModelInfo0);
      OptionModelInfo optionModelInfo1 = optionInfo0.getOwner();
      optionModelInfo0.setOwner(optionModelInfo1);
      try { 
        optionModelInfo0.setValueAsString("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // [OptionsManager BUG! Please report this!] setStringValue(value) called without a model instace available! use instantiateModel() or assureModelInstance() before calling this!
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      Class<Object> class0 = Object.class;
      optionInfo0.setType(class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        optionInfo0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      Class<Object> class0 = Object.class;
      optionInfo0.setType(class0);
      // Undeclared exception!
      try { 
        optionInfo0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      PropertyInfo propertyInfo0 = new PropertyInfo((Method) null);
      optionInfo0.setPropertyInfo(propertyInfo0);
      optionInfo0.assureModelInstance();
      optionInfo0.getPropertyInfo();
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      // Undeclared exception!
      try { 
        optionModelInfo0.setValueAsString("se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper$11");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setOwner(optionModelInfo0);
      try { 
        optionModelInfo0.setValueAsString("pM!+lbt>$2");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // [OptionsManager BUG! Please report this!] setStringValue(value) called without a model instace available! use instantiateModel() or assureModelInstance() before calling this!
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      OptionModelInfo optionModelInfo1 = new OptionModelInfo();
      optionModelInfo0.setOwner(optionModelInfo1);
      try { 
        optionModelInfo0.setValueAsString("b}*KU?ZQ_1AlVnJOj");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // [OptionsManager BUG! Please report this!] setStringValue(value) called without a model instace available! use instantiateModel() or assureModelInstance() before calling this!
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionInfo0.setOwner(optionModelInfo0);
      // Undeclared exception!
      try { 
        optionInfo0.assureModelInstance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionModelInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Class<Integer> class0 = Integer.class;
      optionModelInfo0.setFlag(false);
      optionModelInfo0.setType(class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        optionModelInfo0.setValue(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Class<Integer> class0 = Integer.class;
      optionModelInfo0.setType(class0);
      // Undeclared exception!
      try { 
        optionModelInfo0.setValue(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      Class<Object> class0 = Object.class;
      optionInfo0.setType(class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        optionInfo0.setValue(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      Class<Object> class0 = Object.class;
      optionInfo0.setType(class0);
      // Undeclared exception!
      try { 
        optionInfo0.setValue(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      optionInfo0.setDescription("P5Xc|zZy2}doH7S_");
      Class<Integer> class0 = Integer.class;
      optionInfo0.setCollectionType(class0);
      optionInfo0.getDescription();
      assertFalse(optionInfo0.isFlag());
      assertFalse(optionInfo0.isRequired());
      assertFalse(optionInfo0.hasReceivedValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      Class<Integer> class0 = Integer.class;
      optionInfo0.setCollectionType(class0);
      Class<Object> class1 = Object.class;
      optionInfo0.setType(class1);
      optionInfo0.setOwner((OptionModelInfo) null);
      optionInfo0.getCollectionType();
      optionInfo0.assureModelInstance();
      optionInfo0.getType();
      assertFalse(optionInfo0.isRequired());
      assertFalse(optionInfo0.isFlag());
      assertFalse(optionInfo0.hasReceivedValue());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Class<Object> class0 = Object.class;
      optionModelInfo0.setCollectionType(class0);
      assertFalse(optionModelInfo0.isRequired());
      assertFalse(optionModelInfo0.isFlag());
      assertFalse(optionModelInfo0.hasReceivedValue());
      
      // Undeclared exception!
      try { 
        optionModelInfo0.createCollectionInstance();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.util.Collection (java.lang.Object and java.util.Collection are in module java.base of loader 'bootstrap')
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.clearCurrentCollection();
      assertFalse(optionModelInfo0.isRequired());
      assertFalse(optionModelInfo0.hasReceivedValue());
      assertFalse(optionModelInfo0.isFlag());
      
      optionModelInfo0.getModelChildNamesAsCommaSeparatedString();
      assertFalse(optionModelInfo0.isFlag());
      
      optionModelInfo0.setFlag(true);
      optionModelInfo0.toString();
      optionModelInfo0.isFlag();
      optionModelInfo0.isFlag();
      optionModelInfo0.getCollectionType();
      optionModelInfo0.getSetterMethod();
      optionModelInfo0.getPropertyValueValidator();
      assertTrue(optionModelInfo0.isFlag());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.isLeaf();
      assertFalse(optionModelInfo0.isRequired());
      assertFalse(optionModelInfo0.isFlag());
      assertFalse(optionModelInfo0.hasReceivedValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      optionInfo0.getDescription();
      assertFalse(optionInfo0.isRequired());
      assertFalse(optionInfo0.hasReceivedValue());
      assertFalse(optionInfo0.isFlag());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      boolean boolean0 = optionInfo0.isLeaf();
      assertTrue(boolean0);
      assertFalse(optionInfo0.hasReceivedValue());
      assertFalse(optionInfo0.isFlag());
      assertFalse(optionInfo0.isRequired());
      
      String string0 = optionInfo0.toString();
      assertFalse(optionInfo0.hasReceivedValue());
      assertFalse(optionInfo0.isRequired());
      assertEquals("OptionInfo {\n    name=null\n    type=null\n    description=null\n    publicPath=null\n    realPath=null\n    flag=false\n    propertyInfo=null\n    setterMethod=null\n    owner=null}", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Class<Integer> class0 = Integer.class;
      optionModelInfo0.setCollectionType(class0);
      try { 
        optionModelInfo0.createCollectionInstance();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to instantiate class java.lang.Integer with default constructor!
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.toString();
      Class<Annotation> class0 = Annotation.class;
      optionModelInfo0.setCollectionType(class0);
      try { 
        optionModelInfo0.createCollectionInstance();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to instantiate interface java.lang.annotation.Annotation with default constructor!
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      optionInfo0.getPropertyInfo();
      assertFalse(optionInfo0.hasReceivedValue());
      assertFalse(optionInfo0.isRequired());
      assertFalse(optionInfo0.isFlag());
      
      optionInfo0.setFlag(false);
      optionInfo0.isFlag();
      optionInfo0.getPropertyInfo();
      assertFalse(optionInfo0.isRequired());
      assertFalse(optionInfo0.hasReceivedValue());
      assertFalse(optionInfo0.isFlag());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      optionInfo0.getPropertyInfo();
      optionInfo0.setFlag(false);
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionInfo0.isFlag();
      // Undeclared exception!
      try { 
        optionModelInfo0.createCollectionInstance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Class<Annotation> class0 = Annotation.class;
      optionModelInfo0.setCollectionType(class0);
      optionModelInfo0.clearCurrentCollection();
      optionModelInfo0.isCollectionType();
      optionModelInfo0.getName();
      assertTrue(optionModelInfo0.isCollectionType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Object object0 = new Object();
      Class<Annotation> class0 = Annotation.class;
      optionModelInfo0.setCollectionType(class0);
      // Undeclared exception!
      try { 
        optionModelInfo0.setValue(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper$Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Class<Integer> class0 = Integer.class;
      optionModelInfo0.setType(class0);
      optionModelInfo0.isBooleanType();
      optionModelInfo0.getSetterMethod();
      optionModelInfo0.toString();
      optionModelInfo0.setFlag(false);
      optionModelInfo0.clearCurrentCollection();
      optionModelInfo0.clearCurrentCollection();
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = 0;
      int int1 = 3009;
      PropertyInfo propertyInfo0 = new PropertyInfo((Field) null);
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
      try { 
        propertyInfo0.getAnnotation(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      optionInfo0.getPublicPath();
      optionInfo0.setRealPath((Path) null);
      optionInfo0.getCollectionType();
      optionInfo0.setType((Class) null);
      optionInfo0.getCollectionType();
      assertFalse(optionInfo0.hasReceivedValue());
      assertFalse(optionInfo0.isFlag());
      assertFalse(optionInfo0.isRequired());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.getPropertyInfo();
      optionModelInfo0.setPropertyInfo((PropertyInfo) null);
      assertFalse(optionModelInfo0.hasReceivedValue());
      assertFalse(optionModelInfo0.isFlag());
      assertFalse(optionModelInfo0.isRequired());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      optionInfo0.getPropertyInfo();
      PropertyInfo propertyInfo0 = new PropertyInfo((Method) null);
      optionInfo0.setPropertyInfo(propertyInfo0);
      optionInfo0.getSetterMethod();
      optionInfo0.setFlag(true);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        optionInfo0.setValue(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper$Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      OMOptions oMOptions0 = new OMOptions();
      OptionsManagerType optionsManagerType0 = OptionsManagerType.SEQUENTIAL;
      oMOptions0.setOptionsManagerType(optionsManagerType0);
      oMOptions0.setPublicPathSeparator("");
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      oMOptions0.addDateFormat(dateFormat0);
      optionInfo0.setOMOptions(oMOptions0);
      boolean boolean0 = optionInfo0.isCollectionType();
      assertFalse(boolean0);
      
      boolean boolean1 = optionInfo0.isRequired();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      optionInfo0.getPropertyInfo();
      String string0 = optionInfo0.toString();
      assertEquals("OptionInfo {\n    name=null\n    type=null\n    description=null\n    publicPath=null\n    realPath=null\n    flag=false\n    propertyInfo=null\n    setterMethod=null\n    owner=null}", string0);
      
      optionInfo0.getOwner();
      assertFalse(optionInfo0.hasReceivedValue());
      
      optionInfo0.getPropertyValueValidator();
      assertFalse(optionInfo0.hasReceivedValue());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      optionInfo0.getPropertyValueValidator();
      assertFalse(optionInfo0.hasReceivedValue());
      assertFalse(optionInfo0.isFlag());
      assertFalse(optionInfo0.isRequired());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setRealPath((Path) null);
      // Undeclared exception!
      try { 
        optionModelInfo0.createCollectionInstance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.getPublicPath();
      optionModelInfo0.setRealPath((Path) null);
      String string0 = null;
      optionModelInfo0.getChildByName((String) null);
      // Undeclared exception!
      try { 
        optionModelInfo0.assureModelInstance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionModelInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      String string0 = optionInfo0.toString();
      assertEquals("OptionInfo {\n    name=null\n    type=null\n    description=null\n    publicPath=null\n    realPath=null\n    flag=false\n    propertyInfo=null\n    setterMethod=null\n    owner=null}", string0);
      assertFalse(optionInfo0.isRequired());
      assertFalse(optionInfo0.hasReceivedValue());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      boolean boolean0 = optionModelInfo0.isRequired();
      assertFalse(optionModelInfo0.hasReceivedValue());
      assertFalse(boolean0);
      assertFalse(optionModelInfo0.isFlag());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      OMOptions oMOptions0 = new OMOptions();
      optionInfo0.setOMOptions(oMOptions0);
      optionInfo0.assureModelInstance();
      assertFalse(optionInfo0.isRequired());
      assertFalse(optionInfo0.isFlag());
      assertFalse(optionInfo0.hasReceivedValue());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      boolean boolean0 = optionModelInfo0.isCollectionType();
      assertFalse(boolean0);
      assertFalse(optionModelInfo0.isFlag());
      assertFalse(optionModelInfo0.hasReceivedValue());
      assertFalse(optionModelInfo0.isRequired());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      Object object0 = new Object();
      optionInfo0.getSetterMethod();
      optionInfo0.setSetterMethod((Method) null);
      // Undeclared exception!
      try { 
        optionInfo0.setValue(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper$Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.getSetterMethod();
      optionModelInfo0.setSetterMethod((Method) null);
      // Undeclared exception!
      try { 
        optionModelInfo0.createCollectionInstance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      optionInfo0.getRealPath();
      assertFalse(optionInfo0.hasReceivedValue());
      assertFalse(optionInfo0.isFlag());
      assertFalse(optionInfo0.isRequired());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      boolean boolean0 = optionInfo0.hasReceivedValue();
      assertFalse(optionInfo0.isRequired());
      assertFalse(boolean0);
      assertFalse(optionInfo0.isFlag());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      optionInfo0.clearCurrentCollection();
      optionInfo0.setName((String) null);
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionInfo0.setOwner(optionModelInfo0);
      optionModelInfo0.setDescription("");
      optionInfo0.getRealPath();
      assertFalse(optionInfo0.isRequired());
      
      optionInfo0.setRequired(true);
      boolean boolean0 = optionInfo0.hasReceivedValue();
      assertTrue(optionInfo0.isRequired());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      optionInfo0.getOwner();
      Path path0 = new Path();
      optionInfo0.setPublicPath(path0);
      // Undeclared exception!
      try { 
        Path.fromStringSeparatedBy("&-:R[Tra", "&-:R[Tra");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 8
         // \\&-:R[Tra
         //         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      // Undeclared exception!
      try { 
        optionModelInfo0.setValueAsString("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      String string0 = "";
      // Undeclared exception!
      try { 
        optionModelInfo0.setValueAsString("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      // Undeclared exception!
      try { 
        optionModelInfo0.createCollectionInstance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      optionInfo0.assureModelInstance();
      assertFalse(optionInfo0.isFlag());
      assertFalse(optionInfo0.hasReceivedValue());
      assertFalse(optionInfo0.isRequired());
      
      optionInfo0.getPropertyInfo();
      optionInfo0.setFlag(true);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        optionInfo0.setValue(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper$Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      optionInfo0.setFlag(false);
      assertFalse(optionInfo0.hasReceivedValue());
      assertFalse(optionInfo0.isFlag());
      assertFalse(optionInfo0.isRequired());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      // Undeclared exception!
      try { 
        optionModelInfo0.assureModelInstance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionModelInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.getName();
      assertFalse(optionModelInfo0.isFlag());
      assertFalse(optionModelInfo0.isRequired());
      assertFalse(optionModelInfo0.hasReceivedValue());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.getSetterMethod();
      optionModelInfo0.setDescription("text");
      optionModelInfo0.setPropertyValueValidator((PropertyValueValidator) null);
      optionModelInfo0.getName();
      optionModelInfo0.getType();
      OMOptions oMOptions0 = new OMOptions();
      String string0 = "";
      Locale locale0 = Locale.FRANCE;
      locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        MockDateFormat.getDateTimeInstance((-627), (-627), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -627
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      String string0 = optionModelInfo0.toString();
      assertEquals("OptionModelInfo {\n    children=0\n    name=null\n    type=null\n    description=null\n    publicPath=null\n    realPath=null\n    flag=false\n    propertyInfo=null\n    setterMethod=null\n    owner=null}", string0);
      assertFalse(optionModelInfo0.hasReceivedValue());
      assertFalse(optionModelInfo0.isRequired());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(0);
      stringBuilder0.insert(0, 0);
      stringBuilder1.append(true);
      StringBuilder stringBuilder2 = stringBuilder1.append((StringBuffer) null);
      optionInfo0.toString(stringBuilder2);
      // Undeclared exception!
      try { 
        optionInfo0.getErrMsgPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setName("\n");
      assertFalse(optionModelInfo0.isRequired());
      assertFalse(optionModelInfo0.isFlag());
      assertFalse(optionModelInfo0.hasReceivedValue());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.getOMOptions();
      optionModelInfo0.clearCurrentCollection();
      optionModelInfo0.setName("se.natusoft.tools.optionsmgr.internal.PropertyValueValidator");
      Path path0 = new Path();
      path0.isEmpty();
      path0.isEmpty();
      optionModelInfo0.setPublicPath(path0);
      path0.isEmpty();
      optionModelInfo0.getPropertyInfo();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        optionModelInfo0.setValue(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper$Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.getRealPath();
      optionModelInfo0.setPublicPath((Path) null);
      // Undeclared exception!
      try { 
        optionModelInfo0.assureModelInstance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionModelInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      // Undeclared exception!
      try { 
        optionInfo0.setValue(optionInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper$Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      // Undeclared exception!
      try { 
        optionModelInfo0.isBooleanType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper$Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      String string0 = "Any enum";
      optionInfo0.setRequired(true);
      optionInfo0.setDescription("Any enum");
      // Undeclared exception!
      try { 
        optionInfo0.setValue("Any enum");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper$Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setRequired(false);
      assertFalse(optionModelInfo0.isFlag());
      assertFalse(optionModelInfo0.hasReceivedValue());
      assertFalse(optionModelInfo0.isRequired());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setDescription("");
      optionModelInfo0.addChild(optionInfo0);
      optionInfo0.setOwner(optionModelInfo0);
      // Undeclared exception!
      try { 
        Path.fromStringSeparatedBy("on-`VHs[LZJT6TY", "on-`VHs[LZJT6TY");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal/unsupported escape sequence near index 1
         // \\on-`VHs[LZJT6TY
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      // Undeclared exception!
      try { 
        optionModelInfo0.getErrMsgPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.getPublicPath();
      Path path0 = null;
      try {
        path0 = new Path((Path) null, "D:A/?-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setDescription("rrDo4~uohqD");
      Class<Object> class0 = Object.class;
      optionModelInfo0.setType(class0);
      assertFalse(optionModelInfo0.isRequired());
      assertFalse(optionModelInfo0.isFlag());
      assertFalse(optionModelInfo0.hasReceivedValue());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setDescription((String) null);
      // Undeclared exception!
      try { 
        optionModelInfo0.createCollectionInstance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      optionInfo0.getSetterMethod();
      assertFalse(optionInfo0.isFlag());
      assertFalse(optionInfo0.isRequired());
      assertFalse(optionInfo0.hasReceivedValue());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      OptionInfo optionInfo0 = new OptionInfo();
      String string0 = "";
      optionInfo0.getSetterMethod();
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[2];
      accessibleObjectArray0[0] = (AccessibleObject) null;
      accessibleObjectArray0[1] = (AccessibleObject) null;
      // Undeclared exception!
      try { 
        AccessibleObject.setAccessible(accessibleObjectArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.AccessibleObject", e);
      }
  }
}
