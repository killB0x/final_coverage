/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:38:13 GMT 2022
 */

package se.natusoft.tools.optionsmgr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.text.DateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;
import se.natusoft.tools.optionsmgr.CommandLineOptionsManager;
import se.natusoft.tools.optionsmgr.PropertiesOptionsManager;
import se.natusoft.tools.optionsmgr.XMLAttributeOptionsManager;
import se.natusoft.tools.optionsmgr.XMLElementOptionsManager;
import se.natusoft.tools.optionsmgr.internal.Arguments;
import se.natusoft.tools.optionsmgr.internal.OptionInfos;
import se.natusoft.tools.optionsmgr.internal.OptionModelInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionsManager_ESTest extends OptionsManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      CommandLineOptionsManager<Object> commandLineOptionsManager0 = new CommandLineOptionsManager<Object>(class0);
      String string0 = commandLineOptionsManager0.getFullHelpTextAsString("java.lang.Object", ".");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      CommandLineOptionsManager<Object> commandLineOptionsManager0 = new CommandLineOptionsManager<Object>(class0);
      String string0 = commandLineOptionsManager0.getHelpTextAsString(".:64l+JJ+Az{vY @P", "Failed to instantiate ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      PropertiesOptionsManager<Object> propertiesOptionsManager0 = new PropertiesOptionsManager<Object>(class0);
      propertiesOptionsManager0.setModelPathSeparator("$ bon}");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<DataInputStream> class0 = DataInputStream.class;
      PropertiesOptionsManager<Object> propertiesOptionsManager0 = new PropertiesOptionsManager<Object>(class0);
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Arguments arguments0 = mock(Arguments.class, new ViolatedAssumptionAnswer());
      propertiesOptionsManager0.loadOptions(optionModelInfo0, arguments0);
      assertFalse(optionModelInfo0.isCollectionType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      PropertiesOptionsManager<Object> propertiesOptionsManager0 = new PropertiesOptionsManager<Object>(class0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("se.natusoft.tools.optionsmgr.internal.OptionInfo");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      propertiesOptionsManager0.printHelpTextFull((String) null, "", (PrintStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<DataInputStream> class0 = DataInputStream.class;
      PropertiesOptionsManager<OptionModelInfo> propertiesOptionsManager0 = new PropertiesOptionsManager<OptionModelInfo>(class0);
      MockFile mockFile0 = new MockFile((File) null, "U{%+");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      propertiesOptionsManager0.printHelpText("U{%+", "dEJ+E8puk=6/UPLRSn", (PrintStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      CommandLineOptionsManager<Object> commandLineOptionsManager0 = new CommandLineOptionsManager<Object>(class0);
      String[] stringArray0 = new String[9];
      Object object0 = commandLineOptionsManager0.loadOptions("wcgoQ6ziR", "yyyy-MM-dd HH:mm", stringArray0, 64);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      PropertiesOptionsManager<Object> propertiesOptionsManager0 = new PropertiesOptionsManager<Object>(class0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        propertiesOptionsManager0.loadOptions((InputStream) mockFileInputStream0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      XMLElementOptionsManager<OptionModelInfo> xMLElementOptionsManager0 = new XMLElementOptionsManager<OptionModelInfo>(class0);
      File file0 = MockFile.createTempFile("$ bon}", "", (File) null);
      try { 
        xMLElementOptionsManager0.loadOptions(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // XML parser failure: Premature end of file.
         //
         verifyException("se.natusoft.tools.optionsmgr.XMLElementOptionsManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      PropertiesOptionsManager<OptionModelInfo> propertiesOptionsManager0 = new PropertiesOptionsManager<OptionModelInfo>(class0);
      propertiesOptionsManager0.addSimpleDateFormat("yyyy-MM-dd HH:mm");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      PropertiesOptionsManager<Object> propertiesOptionsManager0 = new PropertiesOptionsManager<Object>(class0);
      OptionInfos optionInfos0 = new OptionInfos();
      try { 
        propertiesOptionsManager0.loadOptions(optionInfos0, (Arguments) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.PropertiesOptionsManager$POMArguments", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      XMLElementOptionsManager<Object> xMLElementOptionsManager0 = new XMLElementOptionsManager<Object>(class0);
      OptionInfos optionInfos0 = new OptionInfos();
      Arguments arguments0 = mock(Arguments.class, new ViolatedAssumptionAnswer());
      try { 
        xMLElementOptionsManager0.loadOptions(optionInfos0, arguments0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class se.natusoft.tools.optionsmgr.internal.Arguments$MockitoMock$741000622 cannot be cast to class se.natusoft.tools.optionsmgr.XMLElementOptionsManager$XMLEOMArguments (se.natusoft.tools.optionsmgr.internal.Arguments$MockitoMock$741000622 and se.natusoft.tools.optionsmgr.XMLElementOptionsManager$XMLEOMArguments are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @19f92cac)
         //
         verifyException("se.natusoft.tools.optionsmgr.XMLElementOptionsManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<DataInputStream> class0 = DataInputStream.class;
      XMLAttributeOptionsManager<OptionModelInfo> xMLAttributeOptionsManager0 = new XMLAttributeOptionsManager<OptionModelInfo>(class0);
      try { 
        xMLAttributeOptionsManager0.loadOptions((Arguments) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loading options failed: null
         //
         verifyException("se.natusoft.tools.optionsmgr.OptionsManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      PropertiesOptionsManager<Object> propertiesOptionsManager0 = new PropertiesOptionsManager<Object>(class0);
      // Undeclared exception!
      try { 
        propertiesOptionsManager0.addSimpleDateFormat("set");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'e'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      CommandLineOptionsManager<Object> commandLineOptionsManager0 = new CommandLineOptionsManager<Object>(class0);
      commandLineOptionsManager0.validateLoadedOptions("", "xeCl");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      XMLAttributeOptionsManager<Object> xMLAttributeOptionsManager0 = new XMLAttributeOptionsManager<Object>(class0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      xMLAttributeOptionsManager0.printHelpText("", (String) null, (PrintWriter) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      CommandLineOptionsManager<Object> commandLineOptionsManager0 = new CommandLineOptionsManager<Object>(class0);
      commandLineOptionsManager0.printHelpTextFull((String) null, "se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper$Type", (PrintWriter) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      PropertiesOptionsManager<Object> propertiesOptionsManager0 = new PropertiesOptionsManager<Object>(class0);
      // Undeclared exception!
      try { 
        propertiesOptionsManager0.printHelpTextFull("Z4625:2Ze>", "Z4625:2Ze>", (PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<DataInputStream> class0 = DataInputStream.class;
      PropertiesOptionsManager<Object> propertiesOptionsManager0 = new PropertiesOptionsManager<Object>(class0);
      // Undeclared exception!
      try { 
        propertiesOptionsManager0.addSimpleDateFormat((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<DataInputStream> class0 = DataInputStream.class;
      PropertiesOptionsManager<Object> propertiesOptionsManager0 = new PropertiesOptionsManager<Object>(class0);
      try { 
        propertiesOptionsManager0.loadOptionsNoIO((Arguments) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loading options failed: null
         //
         verifyException("se.natusoft.tools.optionsmgr.OptionsManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      PropertiesOptionsManager<Object> propertiesOptionsManager0 = new PropertiesOptionsManager<Object>(class0);
      // Undeclared exception!
      try { 
        propertiesOptionsManager0.printHelpText("#KSg8\"SIb&t7drg{_x'", "#KSg8\"SIb&t7drg{_x'", (PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      PropertiesOptionsManager<Object> propertiesOptionsManager0 = new PropertiesOptionsManager<Object>(class0);
      propertiesOptionsManager0.validateLoadedOptions();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<DataInputStream> class0 = DataInputStream.class;
      PropertiesOptionsManager<Object> propertiesOptionsManager0 = new PropertiesOptionsManager<Object>(class0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      propertiesOptionsManager0.addDateFormat(dateFormat0);
      assertTrue(dateFormat0.isLenient());
  }
}
