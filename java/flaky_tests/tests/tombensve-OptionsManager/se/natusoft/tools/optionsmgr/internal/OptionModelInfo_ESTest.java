/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:49:43 GMT 2022
 */

package se.natusoft.tools.optionsmgr.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.natusoft.tools.optionsmgr.internal.OMOptions;
import se.natusoft.tools.optionsmgr.internal.OptionInfo;
import se.natusoft.tools.optionsmgr.internal.OptionModelInfo;
import se.natusoft.tools.optionsmgr.internal.OptionsManagerType;
import se.natusoft.tools.optionsmgr.internal.Path;
import se.natusoft.tools.optionsmgr.internal.PropertyInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionModelInfo_ESTest extends OptionModelInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      assertFalse(optionModelInfo0.isCollectionType());
      
      optionModelInfo0.setName("?");
      PropertyInfo propertyInfo0 = new PropertyInfo((Field) null);
      optionModelInfo0.setPropertyInfo(propertyInfo0);
      // Undeclared exception!
      try { 
        optionModelInfo0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setName("?");
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      optionModelInfo0.setCollectionType(class0);
      optionModelInfo0.addChild(optionModelInfo0);
      optionModelInfo0.getChildByName("?");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Class<Object> class0 = Object.class;
      optionModelInfo0.setType(class0);
      optionModelInfo0.setType(class0);
      optionModelInfo0.setName("?");
      optionModelInfo0.setFlag(true);
      optionModelInfo0.addChild(optionModelInfo0);
      optionModelInfo0.getChildByName(":");
      optionModelInfo0.assureModelInstance();
      optionModelInfo0.getChildByName("?");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      OMOptions oMOptions0 = new OMOptions();
      OptionsManagerType optionsManagerType0 = OptionsManagerType.SEQUENTIAL;
      oMOptions0.setOptionsManagerType(optionsManagerType0);
      optionModelInfo0.setOMOptions(oMOptions0);
      Class<Object> class0 = Object.class;
      optionModelInfo0.setType(class0);
      optionModelInfo0.instantiateModelAndAddToParent();
      optionModelInfo0.instantiateModelAndAddToParent();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      OMOptions oMOptions0 = new OMOptions();
      OptionsManagerType optionsManagerType0 = OptionsManagerType.RANDOM;
      oMOptions0.setOptionsManagerType(optionsManagerType0);
      optionModelInfo0.setOMOptions(oMOptions0);
      Class<Object> class0 = Object.class;
      optionModelInfo0.setType(class0);
      OptionModelInfo optionModelInfo1 = new OptionModelInfo();
      optionModelInfo0.setOwner(optionModelInfo1);
      optionModelInfo0.isLeaf();
      // Undeclared exception!
      try { 
        optionModelInfo0.instantiateModelAndAddToParent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionModelInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      OMOptions oMOptions0 = new OMOptions();
      OptionModelInfo optionModelInfo1 = new OptionModelInfo();
      optionModelInfo0.setOwner(optionModelInfo1);
      Path path0 = new Path();
      optionModelInfo0.setPublicPath(path0);
      optionModelInfo0.setOMOptions(oMOptions0);
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      optionModelInfo0.setType(class0);
      optionModelInfo0.isLeaf();
      // Undeclared exception!
      try { 
        optionModelInfo0.instantiateModelAndAddToParent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      OMOptions oMOptions0 = new OMOptions();
      OptionsManagerType optionsManagerType0 = OptionsManagerType.RANDOM;
      oMOptions0.setOptionsManagerType(optionsManagerType0);
      optionModelInfo0.setOMOptions(oMOptions0);
      optionModelInfo0.setOwner(optionModelInfo0);
      // Undeclared exception!
      try { 
        optionModelInfo0.instantiateModelAndAddToParent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      OMOptions oMOptions0 = new OMOptions();
      OptionsManagerType optionsManagerType0 = OptionsManagerType.RANDOM;
      oMOptions0.setOptionsManagerType(optionsManagerType0);
      optionModelInfo0.setOMOptions(oMOptions0);
      optionModelInfo0.setOwner(optionModelInfo0);
      // Undeclared exception!
      try { 
        optionModelInfo0.instantiateModelAndAddToParent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      OMOptions oMOptions0 = new OMOptions();
      optionModelInfo0.setOMOptions(oMOptions0);
      Class<Object> class0 = Object.class;
      optionModelInfo0.setType(class0);
      Object object0 = optionModelInfo0.instantiateModelAndAddToParent();
      Object object1 = optionModelInfo0.instantiateModelAndAddToParent();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Class<Object> class0 = Object.class;
      OMOptions oMOptions0 = new OMOptions();
      optionModelInfo0.setOMOptions(oMOptions0);
      optionModelInfo0.setType(class0);
      boolean boolean0 = optionModelInfo0.isLeaf();
      assertFalse(boolean0);
      
      Object object0 = optionModelInfo0.instantiateModelAndAddToParent();
      Object object1 = optionModelInfo0.instantiateModelAndAddToParent();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setName("ku");
      optionModelInfo0.addChild(optionModelInfo0);
      OptionInfo optionInfo0 = optionModelInfo0.getChildByName("ku");
      assertEquals("ku", optionInfo0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setName("?");
      optionModelInfo0.addChild(optionModelInfo0);
      OptionInfo optionInfo0 = optionModelInfo0.getChildByName("?");
      assertSame(optionInfo0, optionModelInfo0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setName("publicPath=");
      optionModelInfo0.addChild(optionModelInfo0);
      optionModelInfo0.setRequired(true);
      optionModelInfo0.getChildByName("publicPath=");
      OptionModelInfo optionModelInfo1 = new OptionModelInfo();
      optionModelInfo0.setOwner(optionModelInfo1);
      OptionInfo optionInfo0 = optionModelInfo0.getChildByName("ku");
      assertNull(optionInfo0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      OMOptions oMOptions0 = new OMOptions();
      optionModelInfo0.setOMOptions(oMOptions0);
      optionModelInfo0.setOwner(optionModelInfo0);
      Class<Object> class0 = Object.class;
      optionModelInfo0.setType(class0);
      // Undeclared exception!
      try { 
        optionModelInfo0.assureModelInstance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Class<Object> class0 = Object.class;
      optionModelInfo0.setType(class0);
      optionModelInfo0.assureModelInstance();
      assertNull(optionModelInfo0.getName());
      
      optionModelInfo0.assureModelInstance();
      assertFalse(optionModelInfo0.isRequired());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      OMOptions oMOptions0 = new OMOptions();
      optionModelInfo0.setOMOptions(oMOptions0);
      optionModelInfo0.setOwner(optionModelInfo0);
      // Undeclared exception!
      try { 
        optionModelInfo0.instantiateModelAndAddToParent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.addChild(optionModelInfo0);
      assertFalse(optionModelInfo0.isLeaf());
      
      Class<Object> class0 = Object.class;
      optionModelInfo0.setType(class0);
      Object object0 = optionModelInfo0.instantiateModelAndAddToParent();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Class<Annotation> class0 = Annotation.class;
      optionModelInfo0.setType(class0);
      try { 
        optionModelInfo0.instantiateModelAndAddToParent();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to instantiate options model!
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionModelInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Class<OptionModelInfo> class0 = OptionModelInfo.class;
      optionModelInfo0.setType(class0);
      OptionModelInfo optionModelInfo1 = (OptionModelInfo)optionModelInfo0.instantiateModelAndAddToParent();
      assertFalse(optionModelInfo1.isLeaf());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Class<Object> class0 = Object.class;
      optionModelInfo0.setType(class0);
      optionModelInfo0.assureModelInstance();
      optionModelInfo0.getChildren();
      Object object0 = optionModelInfo0.getModelInstance();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.getOwner();
      optionModelInfo0.addChild((OptionInfo) null);
      String string0 = optionModelInfo0.getModelChildNamesAsCommaSeparatedString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      String string0 = optionModelInfo0.getModelChildNamesAsCommaSeparatedString();
      assertEquals("", string0);
      
      optionModelInfo0.setOwner(optionModelInfo0);
      OptionModelInfo optionModelInfo1 = optionModelInfo0.getOwner();
      optionModelInfo1.setOwner(optionModelInfo0);
      optionModelInfo0.addChild(optionModelInfo1);
      String string1 = optionModelInfo0.getModelChildNamesAsCommaSeparatedString();
      assertEquals("null", string1);
      
      optionModelInfo1.getOwner();
      boolean boolean0 = optionModelInfo1.isLeaf();
      assertFalse(boolean0);
      
      optionModelInfo0.getChildren();
      assertFalse(optionModelInfo0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.getModelChildNamesAsCommaSeparatedString();
      optionModelInfo0.setOwner(optionModelInfo0);
      // Undeclared exception!
      try { 
        optionModelInfo0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Class<Annotation> class0 = Annotation.class;
      optionModelInfo0.setType(class0);
      try { 
        optionModelInfo0.assureModelInstance();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to instantiate options model!
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionModelInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      OptionModelInfo optionModelInfo1 = new OptionModelInfo();
      Class<Annotation> class0 = Annotation.class;
      optionModelInfo1.setOwner(optionModelInfo0);
      optionModelInfo0.setType(class0);
      optionModelInfo0.getModelInstance();
      try { 
        optionModelInfo0.assureModelInstance();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to instantiate options model!
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionModelInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.addChild((OptionInfo) null);
      optionModelInfo0.getModelChildNamesAsCommaSeparatedString();
      // Undeclared exception!
      try { 
        optionModelInfo0.getChildByName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.OptionModelInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      OptionModelInfo optionModelInfo1 = new OptionModelInfo();
      Class<Annotation> class0 = Annotation.class;
      optionModelInfo1.setOwner(optionModelInfo0);
      optionModelInfo0.setType(class0);
      optionModelInfo0.getModelChildNamesAsCommaSeparatedString();
      optionModelInfo0.clearCurrentCollection();
      optionModelInfo1.setOwner(optionModelInfo0);
      optionModelInfo0.addChild(optionModelInfo1);
      optionModelInfo1.setOwner(optionModelInfo0);
      optionModelInfo0.setCollectionType(class0);
      optionModelInfo1.addChild(optionModelInfo0);
      optionModelInfo0.clearCurrentCollection();
      optionModelInfo0.getModelChildNamesAsCommaSeparatedString();
      // Undeclared exception!
      try { 
        optionModelInfo1.assureModelInstance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.addChild(optionModelInfo0);
      String string0 = optionModelInfo0.getModelChildNamesAsCommaSeparatedString();
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      OptionModelInfo optionModelInfo1 = new OptionModelInfo();
      Class<Annotation> class0 = Annotation.class;
      optionModelInfo0.setType(class0);
      optionModelInfo0.getModelChildNamesAsCommaSeparatedString();
      optionModelInfo1.setRequired(true);
      optionModelInfo1.setOwner(optionModelInfo0);
      optionModelInfo0.addChild(optionModelInfo1);
      // Undeclared exception!
      try { 
        optionModelInfo1.instantiateModelAndAddToParent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setOwner(optionModelInfo0);
      // Undeclared exception!
      try { 
        optionModelInfo0.assureModelInstance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setName("");
      optionModelInfo0.addChild(optionModelInfo0);
      OptionInfo optionInfo0 = optionModelInfo0.getChildByName("publicPath=");
      assertNull(optionInfo0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.addChild(optionModelInfo0);
      // Undeclared exception!
      try { 
        optionModelInfo0.getChildByName("}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Object object0 = optionModelInfo0.getModelInstance();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.getModelChildNamesAsCommaSeparatedString();
      Object object0 = optionModelInfo0.getModelInstance();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      OptionInfo optionInfo0 = optionModelInfo0.getChildByName("|.");
      assertNull(optionInfo0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      String string0 = optionModelInfo0.toString();
      assertEquals("OptionModelInfo {\n    children=0\n    name=null\n    type=null\n    description=null\n    publicPath=null\n    realPath=null\n    flag=false\n    propertyInfo=null\n    setterMethod=null\n    owner=null}", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      List<OptionInfo> list0 = optionModelInfo0.getChildren();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      optionModelInfo0.setFlag(false);
      optionModelInfo0.getChildren();
      optionModelInfo0.toString();
      optionModelInfo0.toString();
      optionModelInfo0.isLeaf();
      optionModelInfo0.getChildren();
      // Undeclared exception!
      try { 
        optionModelInfo0.instantiateModelAndAddToParent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      boolean boolean0 = optionModelInfo0.isLeaf();
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        optionModelInfo0.instantiateModelAndAddToParent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Object object0 = null;
      OptionModelInfo optionModelInfo1 = new OptionModelInfo();
      // Undeclared exception!
      try { 
        optionModelInfo1.assureModelInstance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      // Undeclared exception!
      try { 
        optionModelInfo0.instantiateModelAndAddToParent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      OMOptions oMOptions0 = new OMOptions();
      optionModelInfo0.setOMOptions(oMOptions0);
      optionModelInfo0.setOwner(optionModelInfo0);
      // Undeclared exception!
      try { 
        optionModelInfo0.assureModelInstance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      Class<Object> class0 = Object.class;
      optionModelInfo0.setType(class0);
      optionModelInfo0.assureModelInstance();
      // Undeclared exception!
      try { 
        optionModelInfo0.instantiateModelAndAddToParent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      // Undeclared exception!
      try { 
        optionModelInfo0.assureModelInstance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OptionModelInfo optionModelInfo0 = new OptionModelInfo();
      OptionModelInfo optionModelInfo1 = new OptionModelInfo();
      optionModelInfo0.addChild(optionModelInfo1);
      // Undeclared exception!
      try { 
        optionModelInfo0.instantiateModelAndAddToParent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
