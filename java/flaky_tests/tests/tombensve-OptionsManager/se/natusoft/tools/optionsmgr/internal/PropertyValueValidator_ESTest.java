/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:45:33 GMT 2022
 */

package se.natusoft.tools.optionsmgr.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.natusoft.tools.optionsmgr.internal.PropertyValueValidator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyValueValidator_ESTest extends PropertyValueValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator("PropertyValueValidator {");
      // Undeclared exception!
      try { 
        propertyValueValidator0.isValid("PropertyValueValidator {");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 22
         // PropertyValueValidator {
         //                       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[5];
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator(stringArray0);
      // Undeclared exception!
      try { 
        propertyValueValidator0.isValid(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator("\"");
      // Undeclared exception!
      try { 
        propertyValueValidator0.isValid("\"");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[6];
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator(stringArray0);
      String string0 = propertyValueValidator0.toString();
      assertEquals("PropertyValueValidator {validValues=[null, null, null, null, null, null]}", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator();
      String string0 = propertyValueValidator0.toString();
      assertEquals("PropertyValueValidator {}", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator("/;");
      String string0 = propertyValueValidator0.toString();
      assertEquals("PropertyValueValidator {validate=\"/;\"}", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[6];
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator(stringArray0);
      String string0 = propertyValueValidator0.getMustMatchText();
      assertEquals("Value must be one of the following values: \"null\", \"null\", \"null\", \"null\", \"null\", \"null\"", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator();
      String string0 = propertyValueValidator0.getMustMatchText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator("/;");
      String string0 = propertyValueValidator0.getMustMatchText();
      assertEquals("Value must match \"/;\"", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "";
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator(stringArray0);
      boolean boolean0 = propertyValueValidator0.isValid("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator();
      boolean boolean0 = propertyValueValidator0.isValid("PropertyValueValidator {}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator(stringArray0);
      boolean boolean0 = propertyValueValidator0.isValid("(_#UZT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator(stringArray0);
      boolean boolean0 = propertyValueValidator0.hasValidation();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator("/;");
      boolean boolean0 = propertyValueValidator0.hasValidation();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyValueValidator propertyValueValidator0 = new PropertyValueValidator();
      boolean boolean0 = propertyValueValidator0.hasValidation();
      assertFalse(boolean0);
  }
}
