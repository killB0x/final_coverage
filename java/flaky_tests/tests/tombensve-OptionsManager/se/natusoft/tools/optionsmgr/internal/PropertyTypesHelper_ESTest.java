/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:58:05 GMT 2022
 */

package se.natusoft.tools.optionsmgr.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.chrono.HijrahEra;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.natusoft.tools.optionsmgr.internal.EnumHelper;
import se.natusoft.tools.optionsmgr.internal.OMOptions;
import se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyTypesHelper_ESTest extends PropertyTypesHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<HijrahEra> class0 = HijrahEra.class;
      PropertyTypesHelper.Type propertyTypesHelper_Type0 = propertyTypesHelper0.getSupportedType(class0);
      Object object0 = propertyTypesHelper_Type0.stringToType("", class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<Date> class0 = Date.class;
      PropertyTypesHelper.Type propertyTypesHelper_Type0 = propertyTypesHelper0.getSupportedType(class0);
      boolean boolean0 = propertyTypesHelper_Type0.hasConversionError();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<Object> class0 = Object.class;
      PropertyTypesHelper.Type propertyTypesHelper_Type0 = propertyTypesHelper0.getSupportedType(class0);
      OMOptions oMOptions0 = propertyTypesHelper_Type0.getOMOptions();
      assertEquals(".", oMOptions0.getPublicPathSeparator());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<Object> class0 = Object.class;
      PropertyTypesHelper.Type propertyTypesHelper_Type0 = propertyTypesHelper0.getSupportedType(class0);
      propertyTypesHelper_Type0.fail("W,d9!pC,");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<HijrahEra> class0 = HijrahEra.class;
      boolean boolean0 = propertyTypesHelper0.isEnum(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<Object> class0 = Object.class;
      OMOptions oMOptions0 = new OMOptions();
      Object object0 = propertyTypesHelper0.convertStringToTypeInstance(class0, (String) null, oMOptions0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      // Undeclared exception!
      try { 
        propertyTypesHelper0.isValidPropertyType((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper$Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      // Undeclared exception!
      try { 
        propertyTypesHelper0.getTypeDescription((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper$Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      // Undeclared exception!
      try { 
        propertyTypesHelper0.getSupportedType((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper$Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        propertyTypesHelper0.convertStringToTypeInstance(class0, (String) null, (OMOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<HijrahEra> class0 = HijrahEra.class;
      PropertyTypesHelper.Type propertyTypesHelper_Type0 = propertyTypesHelper0.getSupportedType(class0);
      try { 
        propertyTypesHelper_Type0.convertStringToType("", class0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid value ''. Valid values are: \"java.time.chrono.hijrahera@0000000004\".
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper$Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<Object> class0 = Object.class;
      PropertyTypesHelper.Type propertyTypesHelper_Type0 = propertyTypesHelper0.getSupportedType(class0);
      Object object0 = propertyTypesHelper_Type0.convertStringToType((String) null, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<Object> class0 = Object.class;
      PropertyTypesHelper.Type propertyTypesHelper_Type0 = propertyTypesHelper0.getSupportedType(class0);
      Class<Date> class1 = Date.class;
      Object object0 = propertyTypesHelper_Type0.convertStringToType("BrNMBMU/dMu", class1);
      assertEquals("BrNMBMU/dMu", object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<Object> class0 = Object.class;
      PropertyTypesHelper.Type propertyTypesHelper_Type0 = propertyTypesHelper0.getSupportedType(class0);
      boolean boolean0 = propertyTypesHelper_Type0.isOfType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<Date> class0 = Date.class;
      PropertyTypesHelper.Type propertyTypesHelper_Type0 = propertyTypesHelper0.getSupportedType(class0);
      String string0 = propertyTypesHelper_Type0.getTypeDescription();
      assertEquals("Date", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<Date> class0 = Date.class;
      PropertyTypesHelper.Type propertyTypesHelper_Type0 = propertyTypesHelper0.getSupportedType(class0);
      // Undeclared exception!
      try { 
        propertyTypesHelper_Type0.stringToType("se.natusoft.tools.optionsmgr.internal.OMOptions");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<Date> class0 = Date.class;
      String string0 = propertyTypesHelper0.getTypeDescription(class0);
      assertEquals("Date", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<Date> class0 = Date.class;
      boolean boolean0 = propertyTypesHelper0.isValidPropertyType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<Date> class0 = Date.class;
      PropertyTypesHelper.Type propertyTypesHelper_Type0 = propertyTypesHelper0.getSupportedType(class0);
      // Undeclared exception!
      try { 
        propertyTypesHelper_Type0.stringToType("ext");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<Object> class0 = Object.class;
      Object object0 = propertyTypesHelper0.convertStringToTypeInstance(class0, "se.natusoft.tools.optionsmgr.internal.OptionsManagerType", (OMOptions) null);
      assertEquals("se.natusoft.tools.optionsmgr.internal.OptionsManagerType", object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<HijrahEra> class0 = HijrahEra.class;
      EnumHelper enumHelper0 = propertyTypesHelper0.getEnumHelper(class0);
      assertNotNull(enumHelper0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      boolean boolean0 = propertyTypesHelper0.isCollection(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<Object> class0 = Object.class;
      boolean boolean0 = propertyTypesHelper0.isEnum(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<Date> class0 = Date.class;
      OMOptions oMOptions0 = new OMOptions();
      try { 
        propertyTypesHelper0.convertStringToTypeInstance(class0, "n", oMOptions0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown date format 'n'
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.PropertyTypesHelper$Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      Class<Date> class0 = Date.class;
      PropertyTypesHelper.Type propertyTypesHelper_Type0 = propertyTypesHelper0.getSupportedType(class0);
      assertNotNull(propertyTypesHelper_Type0);
      
      String string0 = propertyTypesHelper_Type0.getValueTypeRepresentation();
      assertEquals("date", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyTypesHelper propertyTypesHelper0 = PropertyTypesHelper.getInstance();
      String string0 = propertyTypesHelper0.getSupportedTypesAsQuotedList();
      assertEquals("\"String\", \"int/Integer\", \"boolean/Boolean\", \"long/Long\", \"float/Float\", \"double/Double\", \"byte/Byte\", \"URL\", \"Date\", \"File\", \"Any enum\"", string0);
  }
}
