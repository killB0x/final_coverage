/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:56:58 GMT 2022
 */

package se.natusoft.tools.optionsmgr.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.natusoft.tools.optionsmgr.internal.Path;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Path_ESTest extends Path_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Path path0 = Path.fromStringSeparatedBy(".", ".");
      Path path1 = path0.getParentPath();
      assertEquals(".", path1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Path path0 = new Path((String) null);
      String string0 = path0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Path path0 = new Path("%?[C");
      String string0 = path0.toString();
      assertEquals("%?[C", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Path path0 = new Path("%?[C");
      String string0 = path0.getPathAsStringSeparatedBy("X\"`z/|");
      assertEquals("%?[C", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Path path0 = new Path((String) null);
      String string0 = path0.getPathAsString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Path path0 = Path.fromStringSeparatedBy(".", ".");
      String string0 = path0.getPathAsString();
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Path path0 = new Path((String) null);
      // Undeclared exception!
      try { 
        path0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Path path0 = new Path("", (String) null);
      // Undeclared exception!
      try { 
        path0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Path path0 = new Path((String) null);
      // Undeclared exception!
      try { 
        path0.getPathAsStringSeparatedBy((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Path path0 = new Path("0{_EgJ$@E", "0{_EgJ$@E");
      // Undeclared exception!
      try { 
        path0.getPathAsStringSeparatedBy("0{_EgJ$@E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Path path0 = new Path((String) null);
      // Undeclared exception!
      try { 
        path0.getParentPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Path.fromStringSeparatedBy("S<r^&jC$;F2tW:", "T5KDA-p +");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal/unsupported escape sequence near index 1
         // \\T5KDA-p +
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Path.fromStringSeparatedBy((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Path path0 = new Path((String) null);
      // Undeclared exception!
      try { 
        path0.equals("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Path path0 = null;
      try {
        path0 = new Path((Path) null, ".");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Path path0 = null;
      try {
        path0 = new Path((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Path path0 = null;
      try {
        path0 = new Path((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("se.natusoft.tools.optionsmgr.internal.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Path path0 = new Path();
      boolean boolean0 = path0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Path path0 = new Path("%?[C");
      boolean boolean0 = path0.isEmpty();
      assertFalse(boolean0);
      assertEquals("%?[C", path0.getPathAsString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Path path0 = new Path();
      boolean boolean0 = path0.equals(path0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Path path0 = new Path();
      Object object0 = new Object();
      boolean boolean0 = path0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Path path0 = new Path("-SSJvzgJ\"^F/,PBM+", "-SSJvzgJ\"^F/,PBM+");
      Path path1 = path0.getParentPath();
      assertEquals("-SSJvzgJ\"^F/,PBM+.-SSJvzgJ\"^F/,PBM+", path0.toString());
      assertEquals("-SSJvzgJ\"^F/,PBM+", path1.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Path path0 = new Path();
      Path path1 = path0.getParentPath();
      assertEquals("", path1.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Path path0 = new Path(".", ".");
      assertEquals("...", path0.getPathAsString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Path path0 = new Path();
      Path path1 = new Path(path0, ".");
      // Undeclared exception!
      try { 
        path1.getPathAsStringSeparatedBy("6$5X-oWIY!@-");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 5
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Path path0 = new Path("", "");
      Path path1 = new Path(path0);
      assertEquals("", path1.getPathAsString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Path path0 = new Path("", "");
      path0.hashCode();
      assertEquals("", path0.getPathAsString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Path path0 = Path.fromStringSeparatedBy("]}W|xVWR6W\".f{nq-QD+N", ".");
      Path path1 = new Path(path0, "");
      assertEquals("]}W|xVWR6W\".f{nq-QD+N.", path1.getPathAsString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Path path0 = new Path("", "");
      String string0 = path0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Path path0 = new Path("", "");
      String string0 = path0.getPathAsStringSeparatedBy(":Fh;cXi oN{hapxNEN&");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Path path0 = new Path("", "");
      String string0 = path0.getPathAsString();
      assertEquals("", string0);
  }
}
