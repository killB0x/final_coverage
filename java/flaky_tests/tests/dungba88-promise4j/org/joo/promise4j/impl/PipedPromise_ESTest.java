/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 15:40:08 GMT 2022
 */

package org.joo.promise4j.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinTask;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.joo.promise4j.AlwaysCallback;
import org.joo.promise4j.DoneCallback;
import org.joo.promise4j.FailCallback;
import org.joo.promise4j.PipeDoneCallback;
import org.joo.promise4j.PipeFailureCallback;
import org.joo.promise4j.Promise;
import org.joo.promise4j.impl.PipedPromise;
import org.joo.promise4j.impl.SimpleDeferredObject;
import org.joo.promise4j.impl.SimpleFailurePromise;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PipedPromise_ESTest extends PipedPromise_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoneCallback<Throwable> doneCallback0 = (DoneCallback<Throwable>) mock(DoneCallback.class, new ViolatedAssumptionAnswer());
      FailCallback<Throwable> failCallback0 = (FailCallback<Throwable>) mock(FailCallback.class, new ViolatedAssumptionAnswer());
      AlwaysCallback<Throwable, Throwable> alwaysCallback0 = (AlwaysCallback<Throwable, Throwable>) mock(AlwaysCallback.class, new ViolatedAssumptionAnswer());
      SimpleDeferredObject<Throwable, Throwable> simpleDeferredObject0 = new SimpleDeferredObject<Throwable, Throwable>(doneCallback0, failCallback0, alwaysCallback0);
      PipeDoneCallback<Throwable, Throwable, Throwable> pipeDoneCallback0 = (PipeDoneCallback<Throwable, Throwable, Throwable>) mock(PipeDoneCallback.class, new ViolatedAssumptionAnswer());
      PipeFailureCallback<Throwable, Throwable, Throwable> pipeFailureCallback0 = (PipeFailureCallback<Throwable, Throwable, Throwable>) mock(PipeFailureCallback.class, new ViolatedAssumptionAnswer());
      PipedPromise<Throwable, Throwable, Throwable, Throwable> pipedPromise0 = null;
      try {
        pipedPromise0 = new PipedPromise<Throwable, Throwable, Throwable, Throwable>(simpleDeferredObject0, pipeDoneCallback0, pipeFailureCallback0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Callback cannot be deferred in non-deferred mode
         //
         verifyException("org.joo.promise4j.impl.SimpleDeferredObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PipeDoneCallback<Throwable, ForkJoinTask<Delayed>, Throwable> pipeDoneCallback0 = (PipeDoneCallback<Throwable, ForkJoinTask<Delayed>, Throwable>) mock(PipeDoneCallback.class, new ViolatedAssumptionAnswer());
      PipeFailureCallback<Throwable, ForkJoinTask<Delayed>, Throwable> pipeFailureCallback0 = (PipeFailureCallback<Throwable, ForkJoinTask<Delayed>, Throwable>) mock(PipeFailureCallback.class, new ViolatedAssumptionAnswer());
      PipedPromise<Throwable, Throwable, ForkJoinTask<Delayed>, Throwable> pipedPromise0 = null;
      try {
        pipedPromise0 = new PipedPromise<Throwable, Throwable, ForkJoinTask<Delayed>, Throwable>((Promise<Throwable, Throwable>) null, pipeDoneCallback0, pipeFailureCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joo.promise4j.impl.PipedPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Promise<Object, Throwable> promise0 = Promise.supply(supplier0);
      PipeDoneCallback<Object, Object, Throwable> pipeDoneCallback0 = (PipeDoneCallback<Object, Object, Throwable>) mock(PipeDoneCallback.class, new ViolatedAssumptionAnswer());
      doReturn((Promise) null).when(pipeDoneCallback0).onDone(any());
      PipeFailureCallback<Throwable, Object, Throwable> pipeFailureCallback0 = (PipeFailureCallback<Throwable, Object, Throwable>) mock(PipeFailureCallback.class, new ViolatedAssumptionAnswer());
      PipedPromise<Object, Throwable, Object, Throwable> pipedPromise0 = new PipedPromise<Object, Throwable, Object, Throwable>(promise0, pipeDoneCallback0, pipeFailureCallback0);
      PipeDoneCallback<Object, Object, Throwable> pipeDoneCallback1 = (PipeDoneCallback<Object, Object, Throwable>) mock(PipeDoneCallback.class, new ViolatedAssumptionAnswer());
      Promise<Object, Throwable> promise1 = pipedPromise0.pipeDone(pipeDoneCallback1);
      assertFalse(promise1.equals((Object)promise0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Promise<Throwable, Throwable> promise0 = Promise.of((Throwable) mockThrowable0);
      PipeFailureCallback<Throwable, Object, Throwable> pipeFailureCallback0 = (PipeFailureCallback<Throwable, Object, Throwable>) mock(PipeFailureCallback.class, new ViolatedAssumptionAnswer());
      PipedPromise<Throwable, Throwable, Object, Throwable> pipedPromise0 = new PipedPromise<Throwable, Throwable, Object, Throwable>(promise0, (PipeDoneCallback<Throwable, Object, Throwable>) null, pipeFailureCallback0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      SimpleFailurePromise<Object, Throwable> simpleFailurePromise0 = new SimpleFailurePromise<Object, Throwable>(mockThrowable0);
      PipeDoneCallback<Object, Throwable, Throwable> pipeDoneCallback0 = (PipeDoneCallback<Object, Throwable, Throwable>) mock(PipeDoneCallback.class, new ViolatedAssumptionAnswer());
      PipeFailureCallback<Throwable, Throwable, Throwable> pipeFailureCallback0 = (PipeFailureCallback<Throwable, Throwable, Throwable>) mock(PipeFailureCallback.class, new ViolatedAssumptionAnswer());
      doReturn((Promise) null).when(pipeFailureCallback0).onFail(any(java.lang.Throwable.class));
      PipedPromise<Object, Throwable, Throwable, Throwable> pipedPromise0 = new PipedPromise<Object, Throwable, Throwable, Throwable>(simpleFailurePromise0, pipeDoneCallback0, pipeFailureCallback0);
  }
}
