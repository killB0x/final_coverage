/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 15:38:55 GMT 2022
 */

package org.joo.promise4j.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.concurrent.Delayed;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.joo.promise4j.AlwaysCallback;
import org.joo.promise4j.DoneCallback;
import org.joo.promise4j.FailCallback;
import org.joo.promise4j.Promise;
import org.joo.promise4j.impl.SequentialPromise;
import org.joo.promise4j.impl.SimpleDeferredObject;
import org.joo.promise4j.impl.SimpleFailurePromise;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SequentialPromise_ESTest extends SequentialPromise_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Supplier<Promise<Delayed, Throwable>>> linkedList0 = new LinkedList<Supplier<Promise<Delayed, Throwable>>>();
      FailCallback<Throwable> failCallback0 = (FailCallback<Throwable>) mock(FailCallback.class, new ViolatedAssumptionAnswer());
      AlwaysCallback<Delayed, Throwable> alwaysCallback0 = (AlwaysCallback<Delayed, Throwable>) mock(AlwaysCallback.class, new ViolatedAssumptionAnswer());
      SimpleDeferredObject<Delayed, Throwable> simpleDeferredObject0 = new SimpleDeferredObject<Delayed, Throwable>((DoneCallback<Delayed>) null, failCallback0, alwaysCallback0);
      Supplier<Promise<Delayed, Throwable>> supplier0 = (Supplier<Promise<Delayed, Throwable>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      linkedList0.add(supplier0);
      Supplier<Promise<Delayed, Throwable>> supplier1 = (Supplier<Promise<Delayed, Throwable>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      linkedList0.add(supplier1);
      SequentialPromise.of((Collection<Supplier<Promise<Delayed, Throwable>>>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        SequentialPromise.of((Collection<Supplier<Promise<Supplier<Throwable>, Throwable>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joo.promise4j.impl.SequentialPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedBlockingQueue<Supplier<Promise<Throwable, Throwable>>> linkedBlockingQueue0 = new LinkedBlockingQueue<Supplier<Promise<Throwable, Throwable>>>();
      MockThrowable mockThrowable0 = new MockThrowable("yWLs3Zew>TZBT!=_O");
      SimpleFailurePromise<Throwable, Throwable> simpleFailurePromise0 = new SimpleFailurePromise<Throwable, Throwable>(mockThrowable0);
      Supplier<Promise<Throwable, Throwable>> supplier0 = (Supplier<Promise<Throwable, Throwable>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(simpleFailurePromise0).when(supplier0).get();
      linkedBlockingQueue0.add(supplier0);
      Supplier<Promise<Throwable, Throwable>> supplier1 = (Supplier<Promise<Throwable, Throwable>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      linkedBlockingQueue0.add(supplier1);
      Promise<Throwable, Throwable> promise0 = SequentialPromise.of((Collection<Supplier<Promise<Throwable, Throwable>>>) linkedBlockingQueue0);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedBlockingQueue<Supplier<Promise<Delayed, Throwable>>> linkedBlockingQueue0 = new LinkedBlockingQueue<Supplier<Promise<Delayed, Throwable>>>();
      Supplier<Promise<Delayed, Throwable>> supplier0 = (Supplier<Promise<Delayed, Throwable>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      linkedBlockingQueue0.add(supplier0);
      Promise<Delayed, Throwable> promise0 = SequentialPromise.of((Collection<Supplier<Promise<Delayed, Throwable>>>) linkedBlockingQueue0);
      assertNull(promise0);
  }
}
