/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 15:25:33 GMT 2022
 */

package org.joo.promise4j.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joo.promise4j.AlwaysCallback;
import org.joo.promise4j.Deferred;
import org.joo.promise4j.DeferredStatus;
import org.joo.promise4j.DoneCallback;
import org.joo.promise4j.FailCallback;
import org.joo.promise4j.PipeAlwaysCallback;
import org.joo.promise4j.PipeDoneCallback;
import org.joo.promise4j.Promise;
import org.joo.promise4j.impl.AsyncDeferredObject;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AsyncDeferredObject_ESTest extends AsyncDeferredObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsyncDeferredObject<Object, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Object, Throwable>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      asyncDeferredObject0.get(1000L, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsyncDeferredObject<Object, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Object, Throwable>();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      try { 
        asyncDeferredObject0.get(0L, timeUnit0);
        fail("Expecting exception: TimeoutException");
      
      } catch(TimeoutException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joo.promise4j.impl.AsyncDeferredObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      AsyncDeferredObject<Object, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Object, Throwable>();
      System.setCurrentTimeMillis(0L);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      try { 
        asyncDeferredObject0.get((-1941000000L), timeUnit0);
        fail("Expecting exception: TimeoutException");
      
      } catch(TimeoutException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joo.promise4j.impl.AsyncDeferredObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AsyncDeferredObject<Delayed, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Delayed, Throwable>();
      MockThrowable mockThrowable0 = new MockThrowable();
      asyncDeferredObject0.reject(mockThrowable0);
      DeferredStatus deferredStatus0 = asyncDeferredObject0.getStatus();
      assertEquals(DeferredStatus.REJECTED, deferredStatus0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsyncDeferredObject<Object, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Object, Throwable>();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Object object0 = new Object();
      asyncDeferredObject0.resolve(object0);
      Object object1 = asyncDeferredObject0.get((-3890L), timeUnit0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AsyncDeferredObject<Object, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Object, Throwable>();
      asyncDeferredObject0.resolve((Object) null);
      Object object0 = asyncDeferredObject0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsyncDeferredObject<Throwable, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Throwable, Throwable>();
      Promise<Throwable, Throwable> promise0 = asyncDeferredObject0.fail((FailCallback<Throwable>) null);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncDeferredObject<Object, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Object, Throwable>();
      Promise<Object, Throwable> promise0 = asyncDeferredObject0.done((DoneCallback<Object>) null);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsyncDeferredObject<Delayed, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Delayed, Throwable>();
      PipeDoneCallback<Delayed, Object, Throwable> pipeDoneCallback0 = (PipeDoneCallback<Delayed, Object, Throwable>) mock(PipeDoneCallback.class, new ViolatedAssumptionAnswer());
      asyncDeferredObject0.then(pipeDoneCallback0);
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        asyncDeferredObject0.reject((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.CompletableFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      AsyncDeferredObject<Object, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Object, Throwable>();
      long long0 = 1L;
      // Undeclared exception!
      asyncDeferredObject0.get(1L, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncDeferredObject<Object, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Object, Throwable>();
      AsyncDeferredObject<Throwable, Throwable> asyncDeferredObject1 = new AsyncDeferredObject<Throwable, Throwable>();
      asyncDeferredObject1.promise();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      asyncDeferredObject1.get(1L, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncDeferredObject<Object, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Object, Throwable>();
      String string0 = "zx qZm`%6";
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable("AOh[6/eh4D1.R7", mockThrowable0);
      asyncDeferredObject0.reject(mockThrowable1);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      try { 
        asyncDeferredObject0.get((-1337L), timeUnit0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: AOh[6/eh4D1.R7
         //
         verifyException("org.joo.promise4j.impl.AsyncDeferredObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AsyncDeferredObject<Delayed, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Delayed, Throwable>();
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable("DeferredTimeoutScheduler", mockThrowable0);
      asyncDeferredObject0.reject(mockThrowable1);
      try { 
        asyncDeferredObject0.get();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: DeferredTimeoutScheduler
         //
         verifyException("org.joo.promise4j.impl.AsyncDeferredObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AsyncDeferredObject<Object, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Object, Throwable>();
      asyncDeferredObject0.resolve((Object) null);
      LinkedHashSet<Promise<Object, Throwable>> linkedHashSet0 = new LinkedHashSet<Promise<Object, Throwable>>();
      linkedHashSet0.add(asyncDeferredObject0);
      LinkedList<Promise<Object, Throwable>> linkedList0 = new LinkedList<Promise<Object, Throwable>>(linkedHashSet0);
      linkedList0.add((Promise<Object, Throwable>) asyncDeferredObject0);
      Promise.all((List<Promise<Object, Throwable>>) linkedList0);
      AsyncDeferredObject<Delayed, Throwable> asyncDeferredObject1 = new AsyncDeferredObject<Delayed, Throwable>();
      assertNull(asyncDeferredObject1.getStatus());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AsyncDeferredObject<Object, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Object, Throwable>();
      AlwaysCallback<Object, Throwable> alwaysCallback0 = (AlwaysCallback<Object, Throwable>) mock(AlwaysCallback.class, new ViolatedAssumptionAnswer());
      Promise<Object, Throwable> promise0 = asyncDeferredObject0.always(alwaysCallback0);
      asyncDeferredObject0.getStatus();
      asyncDeferredObject0.resolve((Object) null);
      PipeAlwaysCallback<Object, Object, Throwable, Throwable> pipeAlwaysCallback0 = (PipeAlwaysCallback<Object, Object, Throwable, Throwable>) mock(PipeAlwaysCallback.class, new ViolatedAssumptionAnswer());
      promise0.then(pipeAlwaysCallback0);
      AsyncDeferredObject<Delayed, Throwable> asyncDeferredObject1 = new AsyncDeferredObject<Delayed, Throwable>();
      assertNull(asyncDeferredObject1.getStatus());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AsyncDeferredObject<Object, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Object, Throwable>();
      asyncDeferredObject0.promise();
      asyncDeferredObject0.reject((Throwable) null);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ScheduledFuture<Object> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule(callable0, (long) 0, timeUnit0);
      asyncDeferredObject0.resolve(scheduledFuture0);
      assertEquals(DeferredStatus.REJECTED, asyncDeferredObject0.getStatus());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AsyncDeferredObject<Object, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Object, Throwable>();
      long long0 = 4886L;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      asyncDeferredObject0.timeoutAfter(4886L, timeUnit0, supplier0);
      AlwaysCallback<Object, Throwable> alwaysCallback0 = (AlwaysCallback<Object, Throwable>) mock(AlwaysCallback.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AsyncDeferredObject<Delayed, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Delayed, Throwable>();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      asyncDeferredObject0.resolve((Delayed) null);
      asyncDeferredObject0.get(374L, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Promise.supply((Supplier<Throwable>) null);
      AsyncDeferredObject<ForkJoinTask<Delayed>, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<ForkJoinTask<Delayed>, Throwable>();
      Promise.supply((Supplier<Throwable>) null);
      // Undeclared exception!
      asyncDeferredObject0.get();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AsyncDeferredObject<Delayed, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Delayed, Throwable>();
      AsyncDeferredObject<Delayed, Throwable> asyncDeferredObject1 = new AsyncDeferredObject<Delayed, Throwable>();
      PipeDoneCallback<Delayed, Object, Throwable> pipeDoneCallback0 = (PipeDoneCallback<Delayed, Object, Throwable>) mock(PipeDoneCallback.class, new ViolatedAssumptionAnswer());
      asyncDeferredObject0.then(pipeDoneCallback0);
      MockThrowable mockThrowable0 = new MockThrowable();
      asyncDeferredObject0.reject(mockThrowable0);
      asyncDeferredObject0.forward(asyncDeferredObject1);
      AsyncDeferredObject<Throwable, Throwable> asyncDeferredObject2 = new AsyncDeferredObject<Throwable, Throwable>();
      assertNull(asyncDeferredObject2.getStatus());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AsyncDeferredObject<Object, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Object, Throwable>();
      Object object0 = new Object();
      asyncDeferredObject0.resolve(object0);
      PipeDoneCallback<Object, Object, Throwable> pipeDoneCallback0 = (PipeDoneCallback<Object, Object, Throwable>) mock(PipeDoneCallback.class, new ViolatedAssumptionAnswer());
      doReturn(asyncDeferredObject0).when(pipeDoneCallback0).onDone(any());
      asyncDeferredObject0.pipeDone(pipeDoneCallback0);
      Object object1 = asyncDeferredObject0.get();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AsyncDeferredObject<Object, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Object, Throwable>();
      asyncDeferredObject0.resolve((Object) null);
      AlwaysCallback<Object, Throwable> alwaysCallback0 = (AlwaysCallback<Object, Throwable>) mock(AlwaysCallback.class, new ViolatedAssumptionAnswer());
      asyncDeferredObject0.always(alwaysCallback0);
      AsyncDeferredObject<Delayed, Throwable> asyncDeferredObject1 = new AsyncDeferredObject<Delayed, Throwable>();
      assertNull(asyncDeferredObject1.getStatus());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AsyncDeferredObject<Delayed, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Delayed, Throwable>();
      asyncDeferredObject0.then((PipeAlwaysCallback<Delayed, Object, Throwable, Throwable>) null);
      MockThrowable mockThrowable0 = new MockThrowable();
      Deferred<Delayed, Throwable> deferred0 = asyncDeferredObject0.reject(mockThrowable0);
      assertNotNull(deferred0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AsyncDeferredObject<Throwable, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Throwable, Throwable>();
      AsyncDeferredObject<Promise<Throwable, Throwable>, Throwable> asyncDeferredObject1 = new AsyncDeferredObject<Promise<Throwable, Throwable>, Throwable>();
      DoneCallback<Promise<Throwable, Throwable>> doneCallback0 = (DoneCallback<Promise<Throwable, Throwable>>) mock(DoneCallback.class, new ViolatedAssumptionAnswer());
      asyncDeferredObject1.done(doneCallback0);
      Deferred<Promise<Throwable, Throwable>, Throwable> deferred0 = asyncDeferredObject1.resolve(asyncDeferredObject0);
      assertNotNull(deferred0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AsyncDeferredObject<Delayed, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Delayed, Throwable>();
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable("DeferreTimeoutScheduler", mockThrowable0);
      Deferred<Delayed, Throwable> deferred0 = asyncDeferredObject0.reject(mockThrowable1);
      Promise<Delayed, Throwable> promise0 = asyncDeferredObject0.forward(deferred0);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AsyncDeferredObject<Object, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<Object, Throwable>();
      FailCallback<Throwable> failCallback0 = (FailCallback<Throwable>) mock(FailCallback.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      asyncDeferredObject0.withTimeout((-3890L), timeUnit0, supplier0);
      try { 
        asyncDeferredObject0.get((-3890L), timeUnit0);
        fail("Expecting exception: TimeoutException");
      
      } catch(TimeoutException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joo.promise4j.impl.AsyncDeferredObject", e);
      }
  }
}
