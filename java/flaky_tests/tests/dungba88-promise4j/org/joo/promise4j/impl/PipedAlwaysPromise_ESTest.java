/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 15:46:29 GMT 2022
 */

package org.joo.promise4j.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.CompletionStage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.joo.promise4j.DoneCallback;
import org.joo.promise4j.FailCallback;
import org.joo.promise4j.PipeAlwaysCallback;
import org.joo.promise4j.Promise;
import org.joo.promise4j.impl.PipedAlwaysPromise;
import org.joo.promise4j.impl.SimpleDeferredObject;
import org.joo.promise4j.impl.SimpleFailurePromise;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PipedAlwaysPromise_ESTest extends PipedAlwaysPromise_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      SimpleFailurePromise<Throwable, Throwable> simpleFailurePromise0 = new SimpleFailurePromise<Throwable, Throwable>(mockThrowable0);
      PipeAlwaysCallback<Throwable, Throwable, Throwable, Throwable> pipeAlwaysCallback0 = (PipeAlwaysCallback<Throwable, Throwable, Throwable, Throwable>) mock(PipeAlwaysCallback.class, new ViolatedAssumptionAnswer());
      doReturn((Promise) null).when(pipeAlwaysCallback0).onAlways(any(org.joo.promise4j.DeferredStatus.class) , any(java.lang.Throwable.class) , any(java.lang.Throwable.class));
      PipedAlwaysPromise<Throwable, Throwable, Throwable, Throwable> pipedAlwaysPromise0 = new PipedAlwaysPromise<Throwable, Throwable, Throwable, Throwable>(simpleFailurePromise0, pipeAlwaysCallback0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PipedAlwaysPromise<Throwable, Throwable, Throwable, Throwable> pipedAlwaysPromise0 = null;
      try {
        pipedAlwaysPromise0 = new PipedAlwaysPromise<Throwable, Throwable, Throwable, Throwable>((Promise<Throwable, Throwable>) null, (PipeAlwaysCallback<Throwable, Throwable, Throwable, Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joo.promise4j.impl.PipedAlwaysPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoneCallback<CompletionStage<Throwable>> doneCallback0 = (DoneCallback<CompletionStage<Throwable>>) mock(DoneCallback.class, new ViolatedAssumptionAnswer());
      FailCallback<Throwable> failCallback0 = (FailCallback<Throwable>) mock(FailCallback.class, new ViolatedAssumptionAnswer());
      SimpleDeferredObject<CompletionStage<Throwable>, Throwable> simpleDeferredObject0 = new SimpleDeferredObject<CompletionStage<Throwable>, Throwable>(doneCallback0, failCallback0);
      PipedAlwaysPromise<CompletionStage<Throwable>, Throwable, CompletionStage<Throwable>, Throwable> pipedAlwaysPromise0 = null;
      try {
        pipedAlwaysPromise0 = new PipedAlwaysPromise<CompletionStage<Throwable>, Throwable, CompletionStage<Throwable>, Throwable>(simpleDeferredObject0, (PipeAlwaysCallback<CompletionStage<Throwable>, CompletionStage<Throwable>, Throwable, Throwable>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Callback cannot be deferred in non-deferred mode
         //
         verifyException("org.joo.promise4j.impl.SimpleDeferredObject", e);
      }
  }
}
