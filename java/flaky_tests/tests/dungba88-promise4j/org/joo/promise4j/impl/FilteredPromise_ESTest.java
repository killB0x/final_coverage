/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 15:41:12 GMT 2022
 */

package org.joo.promise4j.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinTask;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.joo.promise4j.AlwaysCallback;
import org.joo.promise4j.DoneCallback;
import org.joo.promise4j.FailCallback;
import org.joo.promise4j.FilteredDoneCallback;
import org.joo.promise4j.FilteredFailureCallback;
import org.joo.promise4j.Promise;
import org.joo.promise4j.impl.FilteredPromise;
import org.joo.promise4j.impl.SimpleDeferredObject;
import org.joo.promise4j.impl.SimpleDonePromise;
import org.joo.promise4j.impl.SimpleFailurePromise;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FilteredPromise_ESTest extends FilteredPromise_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoneCallback<Throwable> doneCallback0 = (DoneCallback<Throwable>) mock(DoneCallback.class, new ViolatedAssumptionAnswer());
      FailCallback<Throwable> failCallback0 = (FailCallback<Throwable>) mock(FailCallback.class, new ViolatedAssumptionAnswer());
      AlwaysCallback<Throwable, Throwable> alwaysCallback0 = (AlwaysCallback<Throwable, Throwable>) mock(AlwaysCallback.class, new ViolatedAssumptionAnswer());
      SimpleDeferredObject<Throwable, Throwable> simpleDeferredObject0 = new SimpleDeferredObject<Throwable, Throwable>(doneCallback0, failCallback0, alwaysCallback0);
      FilteredPromise<Throwable, Throwable, Throwable, Throwable> filteredPromise0 = null;
      try {
        filteredPromise0 = new FilteredPromise<Throwable, Throwable, Throwable, Throwable>(simpleDeferredObject0, (FilteredDoneCallback<Throwable, Throwable>) null, (FilteredFailureCallback<Throwable, Throwable>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Callback cannot be deferred in non-deferred mode
         //
         verifyException("org.joo.promise4j.impl.SimpleDeferredObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FilteredDoneCallback<ForkJoinTask<Throwable>, Throwable> filteredDoneCallback0 = (FilteredDoneCallback<ForkJoinTask<Throwable>, Throwable>) mock(FilteredDoneCallback.class, new ViolatedAssumptionAnswer());
      FilteredFailureCallback<Throwable, Throwable> filteredFailureCallback0 = (FilteredFailureCallback<Throwable, Throwable>) mock(FilteredFailureCallback.class, new ViolatedAssumptionAnswer());
      FilteredPromise<ForkJoinTask<Throwable>, Throwable, Throwable, Throwable> filteredPromise0 = null;
      try {
        filteredPromise0 = new FilteredPromise<ForkJoinTask<Throwable>, Throwable, Throwable, Throwable>((Promise<ForkJoinTask<Throwable>, Throwable>) null, filteredDoneCallback0, filteredFailureCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joo.promise4j.impl.FilteredPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Promise<FilteredPromise<Throwable, Throwable, Throwable, Throwable>, Throwable> promise0 = Promise.ofCause((Throwable) mockThrowable0);
      FilteredDoneCallback<FilteredPromise<Throwable, Throwable, Throwable, Throwable>, FilteredPromise<Throwable, Throwable, Delayed, Throwable>> filteredDoneCallback0 = (FilteredDoneCallback<FilteredPromise<Throwable, Throwable, Throwable, Throwable>, FilteredPromise<Throwable, Throwable, Delayed, Throwable>>) mock(FilteredDoneCallback.class, new ViolatedAssumptionAnswer());
      FilteredFailureCallback<Throwable, Throwable> filteredFailureCallback0 = (FilteredFailureCallback<Throwable, Throwable>) mock(FilteredFailureCallback.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(filteredFailureCallback0).onFail(any(java.lang.Throwable.class));
      FilteredPromise<FilteredPromise<Throwable, Throwable, Throwable, Throwable>, Throwable, FilteredPromise<Throwable, Throwable, Delayed, Throwable>, Throwable> filteredPromise0 = new FilteredPromise<FilteredPromise<Throwable, Throwable, Throwable, Throwable>, Throwable, FilteredPromise<Throwable, Throwable, Delayed, Throwable>, Throwable>(promise0, filteredDoneCallback0, filteredFailureCallback0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      SimpleDonePromise<Throwable, Throwable> simpleDonePromise0 = new SimpleDonePromise<Throwable, Throwable>(mockThrowable0);
      FilteredDoneCallback<Throwable, Delayed> filteredDoneCallback0 = (FilteredDoneCallback<Throwable, Delayed>) mock(FilteredDoneCallback.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(filteredDoneCallback0).onDone(any(java.lang.Throwable.class));
      FilteredFailureCallback<Throwable, Throwable> filteredFailureCallback0 = (FilteredFailureCallback<Throwable, Throwable>) mock(FilteredFailureCallback.class, new ViolatedAssumptionAnswer());
      FilteredPromise<Throwable, Throwable, Delayed, Throwable> filteredPromise0 = new FilteredPromise<Throwable, Throwable, Delayed, Throwable>(simpleDonePromise0, filteredDoneCallback0, filteredFailureCallback0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleFailurePromise<ForkJoinTask<Throwable>, Throwable> simpleFailurePromise0 = new SimpleFailurePromise<ForkJoinTask<Throwable>, Throwable>((Throwable) null);
      FilteredDoneCallback<ForkJoinTask<Throwable>, Throwable> filteredDoneCallback0 = (FilteredDoneCallback<ForkJoinTask<Throwable>, Throwable>) mock(FilteredDoneCallback.class, new ViolatedAssumptionAnswer());
      FilteredPromise<ForkJoinTask<Throwable>, Throwable, Throwable, Throwable> filteredPromise0 = null;
      try {
        filteredPromise0 = new FilteredPromise<ForkJoinTask<Throwable>, Throwable, Throwable, Throwable>(simpleFailurePromise0, filteredDoneCallback0, (FilteredFailureCallback<Throwable, Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.CompletableFuture", e);
      }
  }
}
