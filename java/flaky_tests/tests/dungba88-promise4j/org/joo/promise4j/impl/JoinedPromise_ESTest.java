/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 15:34:01 GMT 2022
 */

package org.joo.promise4j.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.concurrent.Callable;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joo.promise4j.AlwaysCallback;
import org.joo.promise4j.Deferred;
import org.joo.promise4j.DoneCallback;
import org.joo.promise4j.FailCallback;
import org.joo.promise4j.FilteredFailureCallback;
import org.joo.promise4j.PipeAlwaysCallback;
import org.joo.promise4j.Promise;
import org.joo.promise4j.impl.AsyncDeferredObject;
import org.joo.promise4j.impl.CompletableDeferredObject;
import org.joo.promise4j.impl.JoinedPromise;
import org.joo.promise4j.impl.JoinedResults;
import org.joo.promise4j.impl.PipedAlwaysPromise;
import org.joo.promise4j.impl.SimpleDeferredObject;
import org.joo.promise4j.impl.SimpleDonePromise;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JoinedPromise_ESTest extends JoinedPromise_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Promise<JoinedResults<Throwable>, Throwable>[] promiseArray0 = (Promise<JoinedResults<Throwable>, Throwable>[]) Array.newInstance(Promise.class, 3);
      LinkedHashSet<Promise<ForkJoinTask<Throwable>, Throwable>> linkedHashSet0 = new LinkedHashSet<Promise<ForkJoinTask<Throwable>, Throwable>>();
      JoinedPromise<ForkJoinTask<Throwable>, Throwable> joinedPromise0 = JoinedPromise.from((Collection<Promise<ForkJoinTask<Throwable>, Throwable>>) linkedHashSet0);
      PipeAlwaysCallback<JoinedResults<ForkJoinTask<Throwable>>, JoinedResults<Throwable>, Throwable, Throwable> pipeAlwaysCallback0 = (PipeAlwaysCallback<JoinedResults<ForkJoinTask<Throwable>>, JoinedResults<Throwable>, Throwable, Throwable>) mock(PipeAlwaysCallback.class, new ViolatedAssumptionAnswer());
      doReturn((Promise) null).when(pipeAlwaysCallback0).onAlways(any(org.joo.promise4j.DeferredStatus.class) , any(org.joo.promise4j.impl.JoinedResults.class) , any(java.lang.Throwable.class));
      Promise<JoinedResults<Throwable>, Throwable> promise0 = joinedPromise0.then(pipeAlwaysCallback0);
      promiseArray0[0] = promise0;
      promiseArray0[1] = promiseArray0[0];
      promiseArray0[2] = promise0;
      JoinedPromise<JoinedResults<Throwable>, Throwable> joinedPromise1 = JoinedPromise.of(promiseArray0);
      assertNotNull(joinedPromise1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Deferred<Delayed, Throwable>[] deferredArray0 = (Deferred<Delayed, Throwable>[]) Array.newInstance(Deferred.class, 0);
      JoinedPromise<Delayed, Throwable> joinedPromise0 = JoinedPromise.of(deferredArray0);
      assertNotNull(joinedPromise0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Promise<JoinedResults<Delayed>, Throwable>[] promiseArray0 = (Promise<JoinedResults<Delayed>, Throwable>[]) Array.newInstance(Promise.class, 1);
      DoneCallback<JoinedResults<Delayed>> doneCallback0 = (DoneCallback<JoinedResults<Delayed>>) mock(DoneCallback.class, new ViolatedAssumptionAnswer());
      FailCallback<Throwable> failCallback0 = (FailCallback<Throwable>) mock(FailCallback.class, new ViolatedAssumptionAnswer());
      SimpleDeferredObject<JoinedResults<Delayed>, Throwable> simpleDeferredObject0 = new SimpleDeferredObject<JoinedResults<Delayed>, Throwable>(doneCallback0, failCallback0);
      promiseArray0[0] = (Promise<JoinedResults<Delayed>, Throwable>) simpleDeferredObject0;
      // Undeclared exception!
      try { 
        JoinedPromise.of(promiseArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Callback cannot be deferred in non-deferred mode
         //
         verifyException("org.joo.promise4j.impl.SimpleDeferredObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Deferred<CompletionStage<JoinedResults<Object>>, Throwable>[] deferredArray0 = (Deferred<CompletionStage<JoinedResults<Object>>, Throwable>[]) Array.newInstance(Deferred.class, 2);
      AsyncDeferredObject<CompletionStage<JoinedResults<Object>>, Throwable> asyncDeferredObject0 = new AsyncDeferredObject<CompletionStage<JoinedResults<Object>>, Throwable>();
      deferredArray0[0] = (Deferred<CompletionStage<JoinedResults<Object>>, Throwable>) asyncDeferredObject0;
      DoneCallback<CompletionStage<JoinedResults<Object>>> doneCallback0 = (DoneCallback<CompletionStage<JoinedResults<Object>>>) mock(DoneCallback.class, new ViolatedAssumptionAnswer());
      FailCallback<Throwable> failCallback0 = (FailCallback<Throwable>) mock(FailCallback.class, new ViolatedAssumptionAnswer());
      AlwaysCallback<CompletionStage<JoinedResults<Object>>, Throwable> alwaysCallback0 = (AlwaysCallback<CompletionStage<JoinedResults<Object>>, Throwable>) mock(AlwaysCallback.class, new ViolatedAssumptionAnswer());
      SimpleDeferredObject<CompletionStage<JoinedResults<Object>>, Throwable> simpleDeferredObject0 = new SimpleDeferredObject<CompletionStage<JoinedResults<Object>>, Throwable>(doneCallback0, failCallback0, alwaysCallback0);
      deferredArray0[1] = (Deferred<CompletionStage<JoinedResults<Object>>, Throwable>) simpleDeferredObject0;
      // Undeclared exception!
      try { 
        JoinedPromise.of(deferredArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Callback cannot be deferred in non-deferred mode
         //
         verifyException("org.joo.promise4j.impl.SimpleDeferredObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedBlockingQueue<Promise<Object, Throwable>> linkedBlockingQueue0 = new LinkedBlockingQueue<Promise<Object, Throwable>>();
      DoneCallback<Object> doneCallback0 = (DoneCallback<Object>) mock(DoneCallback.class, new ViolatedAssumptionAnswer());
      FailCallback<Throwable> failCallback0 = (FailCallback<Throwable>) mock(FailCallback.class, new ViolatedAssumptionAnswer());
      SimpleDeferredObject<Object, Throwable> simpleDeferredObject0 = new SimpleDeferredObject<Object, Throwable>(doneCallback0, failCallback0);
      linkedBlockingQueue0.add(simpleDeferredObject0);
      // Undeclared exception!
      try { 
        JoinedPromise.of((Collection<Promise<Object, Throwable>>) linkedBlockingQueue0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Callback cannot be deferred in non-deferred mode
         //
         verifyException("org.joo.promise4j.impl.SimpleDeferredObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        JoinedPromise.of((Collection<Promise<Object, Throwable>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joo.promise4j.impl.JoinedPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        JoinedPromise.from((Promise<Object, Throwable>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joo.promise4j.impl.JoinedPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Promise<Delayed, Throwable>[] promiseArray0 = (Promise<Delayed, Throwable>[]) Array.newInstance(Promise.class, 4);
      LinkedTransferQueue<Promise<Throwable, Throwable>> linkedTransferQueue0 = new LinkedTransferQueue<Promise<Throwable, Throwable>>();
      JoinedPromise<Throwable, Throwable> joinedPromise0 = JoinedPromise.from((Collection<Promise<Throwable, Throwable>>) linkedTransferQueue0);
      Promise<Throwable, Throwable> promise0 = joinedPromise0.filterFail((FilteredFailureCallback<Throwable, Throwable>) null);
      PipeAlwaysCallback<Throwable, Delayed, Throwable, Throwable> pipeAlwaysCallback0 = (PipeAlwaysCallback<Throwable, Delayed, Throwable, Throwable>) mock(PipeAlwaysCallback.class, new ViolatedAssumptionAnswer());
      doReturn((Promise) null).when(pipeAlwaysCallback0).onAlways(any(org.joo.promise4j.DeferredStatus.class) , any(java.lang.Throwable.class) , any(java.lang.Throwable.class));
      PipedAlwaysPromise<Throwable, Throwable, Delayed, Throwable> pipedAlwaysPromise0 = new PipedAlwaysPromise<Throwable, Throwable, Delayed, Throwable>(promise0, pipeAlwaysCallback0);
      promiseArray0[0] = (Promise<Delayed, Throwable>) pipedAlwaysPromise0;
      promiseArray0[1] = (Promise<Delayed, Throwable>) pipedAlwaysPromise0;
      promiseArray0[2] = promiseArray0[1];
      Promise<Delayed, Throwable> promise1 = Promise.ofCause((Throwable) null);
      promiseArray0[3] = promise1;
      // Undeclared exception!
      try { 
        JoinedPromise.from(promiseArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.CompletableFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Deferred<JoinedResults<Throwable>, Throwable>[] deferredArray0 = (Deferred<JoinedResults<Throwable>, Throwable>[]) Array.newInstance(Deferred.class, 1);
      DoneCallback<JoinedResults<Throwable>> doneCallback0 = (DoneCallback<JoinedResults<Throwable>>) mock(DoneCallback.class, new ViolatedAssumptionAnswer());
      FailCallback<Throwable> failCallback0 = (FailCallback<Throwable>) mock(FailCallback.class, new ViolatedAssumptionAnswer());
      AlwaysCallback<JoinedResults<Throwable>, Throwable> alwaysCallback0 = (AlwaysCallback<JoinedResults<Throwable>, Throwable>) mock(AlwaysCallback.class, new ViolatedAssumptionAnswer());
      SimpleDeferredObject<JoinedResults<Throwable>, Throwable> simpleDeferredObject0 = new SimpleDeferredObject<JoinedResults<Throwable>, Throwable>(doneCallback0, failCallback0, alwaysCallback0);
      deferredArray0[0] = (Deferred<JoinedResults<Throwable>, Throwable>) simpleDeferredObject0;
      // Undeclared exception!
      try { 
        JoinedPromise.from(deferredArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Callback cannot be deferred in non-deferred mode
         //
         verifyException("org.joo.promise4j.impl.SimpleDeferredObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        JoinedPromise.from((Deferred<Throwable, Throwable>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        JoinedPromise.from((Collection<Promise<Delayed, Throwable>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joo.promise4j.impl.JoinedPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Promise<ForkJoinTask<Delayed>, Throwable>[] promiseArray0 = (Promise<ForkJoinTask<Delayed>, Throwable>[]) Array.newInstance(Promise.class, 4);
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinTask<Delayed> forkJoinTask0 = ForkJoinTask.adapt((Callable<? extends Delayed>) callable0);
      SimpleDonePromise<ForkJoinTask<Delayed>, Throwable> simpleDonePromise0 = new SimpleDonePromise<ForkJoinTask<Delayed>, Throwable>(forkJoinTask0);
      promiseArray0[0] = (Promise<ForkJoinTask<Delayed>, Throwable>) simpleDonePromise0;
      DoneCallback<ForkJoinTask<Delayed>> doneCallback0 = (DoneCallback<ForkJoinTask<Delayed>>) mock(DoneCallback.class, new ViolatedAssumptionAnswer());
      FailCallback<Throwable> failCallback0 = (FailCallback<Throwable>) mock(FailCallback.class, new ViolatedAssumptionAnswer());
      AlwaysCallback<ForkJoinTask<Delayed>, Throwable> alwaysCallback0 = (AlwaysCallback<ForkJoinTask<Delayed>, Throwable>) mock(AlwaysCallback.class, new ViolatedAssumptionAnswer());
      SimpleDeferredObject<ForkJoinTask<Delayed>, Throwable> simpleDeferredObject0 = new SimpleDeferredObject<ForkJoinTask<Delayed>, Throwable>(doneCallback0, failCallback0, alwaysCallback0);
      promiseArray0[1] = (Promise<ForkJoinTask<Delayed>, Throwable>) simpleDeferredObject0;
      JoinedPromise<ForkJoinTask<Delayed>, Throwable> joinedPromise0 = null;
      try {
        joinedPromise0 = new JoinedPromise<ForkJoinTask<Delayed>, Throwable>(promiseArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Callback cannot be deferred in non-deferred mode
         //
         verifyException("org.joo.promise4j.impl.SimpleDeferredObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Promise<ForkJoinTask<Delayed>, Throwable>[] promiseArray0 = (Promise<ForkJoinTask<Delayed>, Throwable>[]) Array.newInstance(Promise.class, 3);
      CompletableDeferredObject<ForkJoinTask<Delayed>, Throwable> completableDeferredObject0 = new CompletableDeferredObject<ForkJoinTask<Delayed>, Throwable>();
      promiseArray0[0] = (Promise<ForkJoinTask<Delayed>, Throwable>) completableDeferredObject0;
      promiseArray0[1] = promiseArray0[0];
      promiseArray0[2] = promiseArray0[1];
      JoinedPromise<ForkJoinTask<Delayed>, Throwable> joinedPromise0 = new JoinedPromise<ForkJoinTask<Delayed>, Throwable>(promiseArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Promise<Delayed, Throwable>[] promiseArray0 = (Promise<Delayed, Throwable>[]) Array.newInstance(Promise.class, 0);
      JoinedPromise<Delayed, Throwable> joinedPromise0 = new JoinedPromise<Delayed, Throwable>(promiseArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Promise<ForkJoinTask<Delayed>, Throwable>[] promiseArray0 = (Promise<ForkJoinTask<Delayed>, Throwable>[]) Array.newInstance(Promise.class, 1);
      JoinedPromise<ForkJoinTask<Delayed>, Throwable> joinedPromise0 = null;
      try {
        joinedPromise0 = new JoinedPromise<ForkJoinTask<Delayed>, Throwable>(promiseArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joo.promise4j.impl.JoinedPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        JoinedPromise.of((Promise<Promise<Object, Throwable>, Throwable>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joo.promise4j.impl.JoinedPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Promise<JoinedResults<Object>, Throwable>> linkedList0 = new LinkedList<Promise<JoinedResults<Object>, Throwable>>();
      LinkedBlockingQueue<Promise<Throwable, Throwable>> linkedBlockingQueue0 = new LinkedBlockingQueue<Promise<Throwable, Throwable>>();
      JoinedPromise<Throwable, Throwable> joinedPromise0 = JoinedPromise.from((Collection<Promise<Throwable, Throwable>>) linkedBlockingQueue0);
      Promise<JoinedResults<Object>, Throwable> promise0 = joinedPromise0.filterFail((FilteredFailureCallback<Throwable, Throwable>) null);
      linkedList0.add(promise0);
      linkedList0.addFirst(promise0);
      JoinedPromise<JoinedResults<Object>, Throwable> joinedPromise1 = JoinedPromise.of((Collection<Promise<JoinedResults<Object>, Throwable>>) linkedList0);
      assertNotNull(joinedPromise1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Promise<Throwable, Throwable>[] promiseArray0 = (Promise<Throwable, Throwable>[]) Array.newInstance(Promise.class, 0);
      JoinedPromise<Throwable, Throwable> joinedPromise0 = JoinedPromise.from(promiseArray0);
      assertNotNull(joinedPromise0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Deferred<Throwable, Throwable>[] deferredArray0 = (Deferred<Throwable, Throwable>[]) Array.newInstance(Deferred.class, 0);
      JoinedPromise<Throwable, Throwable> joinedPromise0 = JoinedPromise.from(deferredArray0);
      assertNotNull(joinedPromise0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Deferred<CompletionStage<JoinedResults<Object>>, Throwable>[] deferredArray0 = (Deferred<CompletionStage<JoinedResults<Object>>, Throwable>[]) Array.newInstance(Deferred.class, 2);
      // Undeclared exception!
      try { 
        JoinedPromise.of(deferredArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joo.promise4j.impl.JoinedPromise", e);
      }
  }
}
