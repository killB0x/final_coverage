/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 15:48:43 GMT 2022
 */

package org.joo.promise4j.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.joo.promise4j.util.TimeoutScheduler;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeoutScheduler_ESTest extends TimeoutScheduler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        TimeoutScheduler.delay((Runnable) null, 0L, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ScheduledFuture<?> scheduledFuture0 = TimeoutScheduler.delay(mockThread0, 0L, timeUnit0);
      assertNotNull(scheduledFuture0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeoutScheduler timeoutScheduler0 = new TimeoutScheduler();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimeoutScheduler.DaemonThreadFactory timeoutScheduler_DaemonThreadFactory0 = new TimeoutScheduler.DaemonThreadFactory();
      MockThread mockThread0 = new MockThread("org.joo.promise4j.util.TimeoutScheduler");
      Thread thread0 = timeoutScheduler_DaemonThreadFactory0.newThread(mockThread0);
      assertTrue(thread0.isDaemon());
  }
}
