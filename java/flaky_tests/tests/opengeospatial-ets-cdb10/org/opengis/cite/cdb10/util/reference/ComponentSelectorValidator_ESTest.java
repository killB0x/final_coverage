/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 13:21:36 GMT 2022
 */

package org.opengis.cite.cdb10.util.reference;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.opengis.cite.cdb10.util.reference.ComponentSelectorValidator;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ComponentSelectorValidator_ESTest extends ComponentSelectorValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ComponentSelectorValidator componentSelectorValidator0 = new ComponentSelectorValidator((Document) null);
      boolean boolean0 = componentSelectorValidator0.isValidComponentSelector2ForDataset("fl2oP8EU.", "org.opengis.cite.cdb10.util.reference.Validator", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ComponentSelectorValidator componentSelectorValidator0 = new ComponentSelectorValidator((Document) null);
      boolean boolean0 = componentSelectorValidator0.isValidComponentSelector1ForDataset("0(ICfQ", "org.opengis.cite.cdb10.util.reference.Validator");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(document0).getLocalName();
      doReturn((String) null).when(document0).getNamespaceURI();
      doReturn((short)0, (short)0, (short)0).when(document0).getNodeType();
      doReturn((Node) null).when(document0).getParentNode();
      ComponentSelectorValidator componentSelectorValidator0 = new ComponentSelectorValidator(document0);
      componentSelectorValidator0.isValidComponentSelector2ForDataset("", "", "");
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(document0).getLocalName();
      doReturn((String) null).when(document0).getNamespaceURI();
      doReturn((short)0, (short)0, (short)0).when(document0).getNodeType();
      doReturn((Node) null).when(document0).getParentNode();
      ComponentSelectorValidator componentSelectorValidator0 = new ComponentSelectorValidator(document0);
      componentSelectorValidator0.isValidComponentSelector2ForDataset((String) null, (String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(node0).getLocalName();
      doReturn((String) null).when(node0).getNamespaceURI();
      doReturn((short)0, (short)0, (short)0, (short)0).when(node0).getNodeType();
      doReturn((Document) null).when(node0).getOwnerDocument();
      doReturn((Node) null).when(node0).getParentNode();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((short) (-1), (short) (-1)).when(document0).getNodeType();
      doReturn((Document) null).when(document0).getOwnerDocument();
      doReturn(node0, (Node) null).when(document0).getParentNode();
      ComponentSelectorValidator componentSelectorValidator0 = new ComponentSelectorValidator(document0);
      // Undeclared exception!
      try { 
        componentSelectorValidator0.isValidComponentSelector1ForDataset((String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((short)2).when(document0).getNodeType();
      ComponentSelectorValidator componentSelectorValidator0 = new ComponentSelectorValidator(document0);
      // Undeclared exception!
      try { 
        componentSelectorValidator0.isValidComponentSelector1ForDataset((String) null, (String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(document0).getLocalName();
      doReturn((String) null).when(document0).getNamespaceURI();
      doReturn((short)0, (short)0, (short)0).when(document0).getNodeType();
      doReturn((Node) null).when(document0).getParentNode();
      ComponentSelectorValidator componentSelectorValidator0 = new ComponentSelectorValidator(document0);
      boolean boolean0 = componentSelectorValidator0.isValidComponentSelector2ForDataset("%bqEtX+%L", "F~Ku\":JS_C5-yHLCR", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(document0).getLocalName();
      doReturn((String) null).when(document0).getNamespaceURI();
      doReturn((short)0, (short)0, (short)0).when(document0).getNodeType();
      doReturn((Node) null).when(document0).getParentNode();
      ComponentSelectorValidator componentSelectorValidator0 = new ComponentSelectorValidator(document0);
      boolean boolean0 = componentSelectorValidator0.isValidComponentSelector1ForDataset("", "");
      assertFalse(boolean0);
  }
}
