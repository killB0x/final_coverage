/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:24:48 GMT 2022
 */

package com.cronutils.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.value.SpecialChar;
import com.cronutils.parser.CronParserField;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CronParserField_ESTest extends CronParserField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2826), (-2826), true);
      CronParserField cronParserField0 = new CronParserField(cronFieldName0, fieldConstraints0);
      // Undeclared exception!
      try { 
        cronParserField0.parse("a`5;k.KtU~oL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid chars in expression! Expression: a`5;k.KtU~oL Invalid chars: A`;K.KTU~OL
         //
         verifyException("com.cronutils.parser.FieldParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 444, (-1470), false);
      CronParserField cronParserField0 = new CronParserField(cronFieldName0, fieldConstraints0);
      boolean boolean0 = cronParserField0.isOptional();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronParserField cronParserField0 = new CronParserField(cronFieldName0, fieldConstraints0);
      cronParserField0.getField();
      assertFalse(cronParserField0.isOptional());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2861), (-2861), false);
      hashMap0.put("'Vbd_1Q3$AV)pLL", (Integer) null);
      CronParserField cronParserField0 = new CronParserField(cronFieldName0, fieldConstraints0, false);
      // Undeclared exception!
      try { 
        cronParserField0.parse("QN[%7~)o}K");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 17
         // \\b('Vbd_1Q3$AV)pLL)\\b
         //                  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1036, 1036, true);
      CronParserField cronParserField0 = new CronParserField(cronFieldName0, fieldConstraints0);
      // Undeclared exception!
      try { 
        cronParserField0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.parser.FieldParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronParserField cronParserField0 = null;
      try {
        cronParserField0 = new CronParserField(cronFieldName0, (FieldConstraints) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // FieldConstraints must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronParserField cronParserField0 = null;
      try {
        cronParserField0 = new CronParserField(cronFieldName0, (FieldConstraints) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // FieldConstraints must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2818), (-2818), true);
      CronParserField cronParserField0 = new CronParserField(cronFieldName0, fieldConstraints0, true);
      cronParserField0.getField();
      assertTrue(cronParserField0.isOptional());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronParserField cronParserField0 = new CronParserField(cronFieldName0, fieldConstraints0);
      Integer integer0 = new Integer(0);
      hashMap0.put("", integer0);
      cronParserField0.parse("L");
      assertFalse(cronParserField0.isOptional());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-7), (-7), true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronParserField cronParserField0 = new CronParserField(cronFieldName0, fieldConstraints0, true);
      // Undeclared exception!
      try { 
        cronParserField0.parse("/C)pUH>]MrM");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"C)pUH>]MrM\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>(0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 125, true);
      CronParserField cronParserField0 = new CronParserField(cronFieldName0, fieldConstraints0, true);
      boolean boolean0 = cronParserField0.isOptional();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<CronParserField> comparator0 = CronParserField.createFieldTypeComparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2818), (-2818), true);
      CronParserField cronParserField0 = new CronParserField(cronFieldName0, fieldConstraints0, true);
      String string0 = cronParserField0.toString();
      assertTrue(cronParserField0.isOptional());
      assertEquals("CronParserField{field=SECOND}", string0);
  }
}
