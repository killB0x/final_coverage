/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 23:19:48 GMT 2022
 */

package com.cronutils.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.Cron;
import com.cronutils.model.definition.CronConstraint;
import com.cronutils.model.definition.CronDefinition;
import com.cronutils.model.definition.CronNicknames;
import com.cronutils.model.field.definition.FieldDefinition;
import com.cronutils.parser.CronParser;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CronParser_ESTest extends CronParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronConstraint> linkedHashSet0 = new LinkedHashSet<CronConstraint>();
      LinkedHashSet<CronNicknames> linkedHashSet1 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet1.add(cronNicknames0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet0, linkedHashSet1, false);
      CronParser cronParser0 = new CronParser(cronDefinition0);
      // Undeclared exception!
      try { 
        cronParser0.parse("@Nickname %s not supported!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cron expression contains 4 parts but we expect one of [0]
         //
         verifyException("com.cronutils.parser.CronParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronConstraint> linkedHashSet0 = new LinkedHashSet<CronConstraint>();
      LinkedHashSet<CronNicknames> linkedHashSet1 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet1.add(cronNicknames0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet0, linkedHashSet1, true);
      CronParser cronParser0 = new CronParser(cronDefinition0);
      // Undeclared exception!
      try { 
        cronParser0.parse("||");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // List of Cron cannot be null or empty
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronNicknames> linkedHashSet0 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet0.add(cronNicknames0);
      LinkedHashSet<CronConstraint> linkedHashSet1 = new LinkedHashSet<CronConstraint>();
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet1, linkedHashSet0, true);
      CronParser cronParser0 = new CronParser(cronDefinition0);
      linkedHashSet1.add((CronConstraint) null);
      // Undeclared exception!
      try { 
        cronParser0.parse("@monthly");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.SingleCron", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronNicknames> linkedHashSet0 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet0.add(cronNicknames0);
      LinkedHashSet<CronConstraint> linkedHashSet1 = new LinkedHashSet<CronConstraint>();
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet1, linkedHashSet0, true);
      CronParser cronParser0 = new CronParser(cronDefinition0);
      // Undeclared exception!
      try { 
        cronParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Expression must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      LinkedHashSet<CronNicknames> linkedHashSet0 = new LinkedHashSet<CronNicknames>();
      linkedHashSet0.add(cronNicknames0);
      LinkedHashSet<CronConstraint> linkedHashSet1 = new LinkedHashSet<CronConstraint>();
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet1, linkedHashSet0, true);
      CronParser cronParser0 = new CronParser(cronDefinition0);
      // Undeclared exception!
      try { 
        cronParser0.parse("| NHQ,svWULe!");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.cronutils.parser.CronParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CronParser cronParser0 = null;
      try {
        cronParser0 = new CronParser((CronDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CronDefinition must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronNicknames> linkedHashSet0 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet0.add(cronNicknames0);
      LinkedHashSet<CronConstraint> linkedHashSet1 = new LinkedHashSet<CronConstraint>();
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet1, linkedHashSet0, true);
      CronParser cronParser0 = new CronParser(cronDefinition0);
      // Undeclared exception!
      try { 
        cronParser0.parse("@daily");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Nickname @daily not supported!
         //
         verifyException("com.cronutils.parser.CronParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronNicknames> linkedHashSet0 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet0.add(cronNicknames0);
      LinkedHashSet<CronConstraint> linkedHashSet1 = new LinkedHashSet<CronConstraint>();
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet1, linkedHashSet0, true);
      CronParser cronParser0 = new CronParser(cronDefinition0);
      // Undeclared exception!
      try { 
        cronParser0.parse("Q|I)A9NmoZJv CZmZb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cron expression contains 2 parts but we expect one of [0]
         //
         verifyException("com.cronutils.parser.CronParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronNicknames> linkedHashSet0 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet0.add(cronNicknames0);
      LinkedHashSet<CronConstraint> linkedHashSet1 = new LinkedHashSet<CronConstraint>();
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet1, linkedHashSet0, true);
      CronParser cronParser0 = new CronParser(cronDefinition0);
      // Undeclared exception!
      try { 
        cronParser0.parse("@yearly");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Nickname @yearly not supported!
         //
         verifyException("com.cronutils.parser.CronParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronConstraint> linkedHashSet0 = new LinkedHashSet<CronConstraint>();
      LinkedHashSet<CronNicknames> linkedHashSet1 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet1.add(cronNicknames0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet0, linkedHashSet1, true);
      CronParser cronParser0 = new CronParser(cronDefinition0);
      // Undeclared exception!
      try { 
        cronParser0.parse("@weekly");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Nickname @weekly not supported!
         //
         verifyException("com.cronutils.parser.CronParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronNicknames> linkedHashSet0 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet0.add(cronNicknames0);
      LinkedHashSet<CronConstraint> linkedHashSet1 = new LinkedHashSet<CronConstraint>();
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet1, linkedHashSet0, true);
      CronParser cronParser0 = new CronParser(cronDefinition0);
      Cron cron0 = cronParser0.parse("@reboot");
      assertEquals("@reboot", cron0.asString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronNicknames> linkedHashSet0 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet0.add(cronNicknames0);
      LinkedHashSet<CronConstraint> linkedHashSet1 = new LinkedHashSet<CronConstraint>();
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet1, linkedHashSet0, true);
      CronParser cronParser0 = new CronParser(cronDefinition0);
      // Undeclared exception!
      try { 
        cronParser0.parse("@hourly");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Nickname @hourly not supported!
         //
         verifyException("com.cronutils.parser.CronParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronNicknames> linkedHashSet0 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet0.add(cronNicknames0);
      LinkedHashSet<CronConstraint> linkedHashSet1 = new LinkedHashSet<CronConstraint>();
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet1, linkedHashSet0, true);
      CronParser cronParser0 = new CronParser(cronDefinition0);
      // Undeclared exception!
      try { 
        cronParser0.parse("@annually");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Nickname @annually not supported!
         //
         verifyException("com.cronutils.parser.CronParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronConstraint> linkedHashSet0 = new LinkedHashSet<CronConstraint>();
      LinkedHashSet<CronNicknames> linkedHashSet1 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet1.add(cronNicknames0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet0, linkedHashSet1, true);
      CronParser cronParser0 = new CronParser(cronDefinition0);
      // Undeclared exception!
      try { 
        cronParser0.parse("@midnight");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Nickname @midnight not supported!
         //
         verifyException("com.cronutils.parser.CronParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronNicknames> linkedHashSet0 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet0.add(cronNicknames0);
      LinkedHashSet<CronConstraint> linkedHashSet1 = new LinkedHashSet<CronConstraint>();
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet1, linkedHashSet0, true);
      linkedHashSet0.clear();
      CronParser cronParser0 = new CronParser(cronDefinition0);
      // Undeclared exception!
      try { 
        cronParser0.parse("@hourly");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Nicknames not supported!
         //
         verifyException("com.cronutils.parser.CronParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronConstraint> linkedHashSet0 = new LinkedHashSet<CronConstraint>();
      LinkedHashSet<CronNicknames> linkedHashSet1 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet1.add(cronNicknames0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet0, linkedHashSet1, true);
      CronParser cronParser0 = new CronParser(cronDefinition0);
      // Undeclared exception!
      try { 
        cronParser0.parse(",");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid field value! Trailing commas not permitted! ','
         //
         verifyException("com.cronutils.parser.CronParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronNicknames> linkedHashSet0 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet0.add(cronNicknames0);
      LinkedHashSet<CronConstraint> linkedHashSet1 = new LinkedHashSet<CronConstraint>();
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet1, linkedHashSet0, true);
      CronParser cronParser0 = new CronParser(cronDefinition0);
      // Undeclared exception!
      try { 
        cronParser0.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty expression!
         //
         verifyException("com.cronutils.parser.CronParser", e);
      }
  }
}
