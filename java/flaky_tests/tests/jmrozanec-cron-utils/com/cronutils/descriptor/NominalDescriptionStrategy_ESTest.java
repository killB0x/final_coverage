/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:22:35 GMT 2022
 */

package com.cronutils.descriptor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.Function;
import com.cronutils.descriptor.NominalDescriptionStrategy;
import com.cronutils.model.field.expression.And;
import com.cronutils.model.field.expression.Every;
import com.cronutils.model.field.expression.FieldExpression;
import com.cronutils.model.field.value.IntegerFieldValue;
import java.io.StringReader;
import java.util.MissingResourceException;
import java.util.PropertyResourceBundle;
import java.util.ResourceBundle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NominalDescriptionStrategy_ESTest extends NominalDescriptionStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NominalDescriptionStrategy nominalDescriptionStrategy0 = new NominalDescriptionStrategy((ResourceBundle) null, (Function<Integer, String>) null, (FieldExpression) null);
      Function<FieldExpression, String> function0 = (Function<FieldExpression, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any(com.cronutils.model.field.expression.FieldExpression.class));
      nominalDescriptionStrategy0.addDescription(function0);
      String string0 = nominalDescriptionStrategy0.describe();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NominalDescriptionStrategy nominalDescriptionStrategy0 = new NominalDescriptionStrategy((ResourceBundle) null, (Function<Integer, String>) null, (FieldExpression) null);
      nominalDescriptionStrategy0.addDescription((Function<FieldExpression, String>) null);
      // Undeclared exception!
      try { 
        nominalDescriptionStrategy0.describe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.descriptor.NominalDescriptionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Function<Integer, String> function0 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      And and0 = new And();
      and0.and((FieldExpression) null);
      NominalDescriptionStrategy nominalDescriptionStrategy0 = new NominalDescriptionStrategy((ResourceBundle) null, function0, and0);
      // Undeclared exception!
      try { 
        nominalDescriptionStrategy0.describe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CronFieldExpression should not be null!
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NominalDescriptionStrategy nominalDescriptionStrategy0 = new NominalDescriptionStrategy((ResourceBundle) null, (Function<Integer, String>) null, (FieldExpression) null);
      Function<FieldExpression, String> function0 = (Function<FieldExpression, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("Expression must not be null", "com.cronutils.descriptor.NominalDescriptionStrategy").when(function0).apply(any(com.cronutils.model.field.expression.FieldExpression.class));
      NominalDescriptionStrategy nominalDescriptionStrategy1 = nominalDescriptionStrategy0.addDescription(function0);
      String string0 = nominalDescriptionStrategy1.describe();
      assertEquals("com.cronutils.descriptor.NominalDescriptionStrategy", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Function<Integer, String> function0 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<FieldExpression, String> function1 = (Function<FieldExpression, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("").when(function1).apply(any(com.cronutils.model.field.expression.FieldExpression.class));
      NominalDescriptionStrategy nominalDescriptionStrategy0 = new NominalDescriptionStrategy((ResourceBundle) null, function0, (FieldExpression) null);
      NominalDescriptionStrategy nominalDescriptionStrategy1 = nominalDescriptionStrategy0.addDescription(function1);
      String string0 = nominalDescriptionStrategy1.describe();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(stringReader0);
      Function<Integer, String> function0 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(3750);
      Every every0 = new Every(integerFieldValue0);
      NominalDescriptionStrategy nominalDescriptionStrategy0 = new NominalDescriptionStrategy(propertyResourceBundle0, function0, every0);
      // Undeclared exception!
      try { 
        nominalDescriptionStrategy0.describe();
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find resource for bundle java.util.PropertyResourceBundle, key every
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }
}
