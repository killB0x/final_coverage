/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 23:38:17 GMT 2022
 */

package com.cronutils.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.utils.WeekendPolicy;
import java.time.Clock;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WeekendPolicy_ESTest extends WeekendPolicy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now((ZoneId) zoneOffset0);
      WeekendPolicy weekendPolicy0 = WeekendPolicy.SATURDAY_SUNDAY;
      int int0 = WeekendPolicy.daysFromWeekend(weekendPolicy0, zonedDateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      Instant instant0 = MockInstant.from(zonedDateTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      ZonedDateTime zonedDateTime1 = MockInstant.atZone(instant0, zoneOffset0);
      WeekendPolicy weekendPolicy0 = WeekendPolicy.FRIDAY_SATURDAY;
      int int0 = WeekendPolicy.daysFromWeekend(weekendPolicy0, zonedDateTime1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(2447L);
      WeekendPolicy weekendPolicy0 = WeekendPolicy.THURSDAY_FRIDAY;
      Clock clock0 = MockClock.systemUTC();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(clock0);
      int int0 = WeekendPolicy.daysFromWeekend(weekendPolicy0, zonedDateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      Instant instant1 = MockInstant.plus(instant0, 3797L, (TemporalUnit) chronoUnit0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockInstant.atZone(instant1, zoneOffset0);
      WeekendPolicy weekendPolicy0 = WeekendPolicy.SATURDAY_SUNDAY;
      int int0 = WeekendPolicy.daysToWeekend(weekendPolicy0, zonedDateTime0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      Instant instant0 = MockInstant.from(zonedDateTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      ZonedDateTime zonedDateTime1 = MockInstant.atZone(instant0, zoneOffset0);
      WeekendPolicy weekendPolicy0 = WeekendPolicy.SATURDAY_SUNDAY;
      int int0 = WeekendPolicy.daysToWeekend(weekendPolicy0, zonedDateTime1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      Instant instant0 = MockInstant.from(zonedDateTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      ZonedDateTime zonedDateTime1 = MockInstant.atZone(instant0, zoneOffset0);
      WeekendPolicy weekendPolicy0 = WeekendPolicy.FRIDAY_SATURDAY;
      int int0 = WeekendPolicy.daysToWeekend(weekendPolicy0, zonedDateTime1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WeekendPolicy weekendPolicy0 = WeekendPolicy.FRIDAY_SATURDAY;
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      ZonedDateTime zonedDateTime0 = MockInstant.atZone(instant0, zoneOffset0);
      int int0 = WeekendPolicy.daysToWeekend(weekendPolicy0, zonedDateTime0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Instant instant0 = MockInstant.ofEpochSecond(415L, 415L);
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      Instant instant1 = MockInstant.plus(instant0, 3802L, (TemporalUnit) chronoUnit0);
      ZonedDateTime zonedDateTime0 = MockInstant.atZone(instant1, zoneOffset0);
      WeekendPolicy weekendPolicy0 = WeekendPolicy.THURSDAY_FRIDAY;
      int int0 = WeekendPolicy.daysToWeekend(weekendPolicy0, zonedDateTime0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      ZonedDateTime zonedDateTime0 = MockInstant.atZone(instant0, zoneOffset0);
      WeekendPolicy weekendPolicy0 = WeekendPolicy.THURSDAY_FRIDAY;
      int int0 = WeekendPolicy.daysToWeekend(weekendPolicy0, zonedDateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WeekendPolicy[] weekendPolicyArray0 = WeekendPolicy.values();
      assertEquals(3, weekendPolicyArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WeekendPolicy weekendPolicy0 = WeekendPolicy.valueOf("SATURDAY_SUNDAY");
      assertEquals(WeekendPolicy.SATURDAY_SUNDAY, weekendPolicy0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WeekendPolicy weekendPolicy0 = WeekendPolicy.THURSDAY_FRIDAY;
      // Undeclared exception!
      try { 
        WeekendPolicy.daysToWeekend(weekendPolicy0, (ZonedDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.utils.WeekendPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WeekendPolicy weekendPolicy0 = WeekendPolicy.FRIDAY_SATURDAY;
      // Undeclared exception!
      try { 
        WeekendPolicy.daysFromWeekend(weekendPolicy0, (ZonedDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.utils.WeekendPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Instant instant0 = MockInstant.ofEpochSecond(415L);
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      Instant instant1 = MockInstant.plus(instant0, 3802L, (TemporalUnit) chronoUnit0);
      ZonedDateTime zonedDateTime0 = MockInstant.atZone(instant1, zoneOffset0);
      WeekendPolicy weekendPolicy0 = WeekendPolicy.SATURDAY_SUNDAY;
      int int0 = WeekendPolicy.daysFromWeekend(weekendPolicy0, zonedDateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Instant instant0 = MockInstant.ofEpochSecond(415L);
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      Instant instant1 = MockInstant.plus(instant0, 3802L, (TemporalUnit) chronoUnit0);
      ZonedDateTime zonedDateTime0 = MockInstant.atZone(instant1, zoneOffset0);
      WeekendPolicy weekendPolicy0 = WeekendPolicy.FRIDAY_SATURDAY;
      int int0 = WeekendPolicy.daysFromWeekend(weekendPolicy0, zonedDateTime0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WeekendPolicy weekendPolicy0 = WeekendPolicy.FRIDAY_SATURDAY;
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      ZonedDateTime zonedDateTime0 = MockInstant.atZone(instant0, zoneOffset0);
      int int0 = WeekendPolicy.daysFromWeekend(weekendPolicy0, zonedDateTime0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Instant instant0 = MockInstant.ofEpochSecond(415L);
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      Instant instant1 = MockInstant.plus(instant0, 3802L, (TemporalUnit) chronoUnit0);
      ZonedDateTime zonedDateTime0 = MockInstant.atZone(instant1, zoneOffset0);
      WeekendPolicy weekendPolicy0 = WeekendPolicy.THURSDAY_FRIDAY;
      int int0 = WeekendPolicy.daysFromWeekend(weekendPolicy0, zonedDateTime0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      Instant instant1 = MockInstant.plus(instant0, 3797L, (TemporalUnit) chronoUnit0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockInstant.atZone(instant1, zoneOffset0);
      WeekendPolicy weekendPolicy0 = WeekendPolicy.THURSDAY_FRIDAY;
      int int0 = WeekendPolicy.daysFromWeekend(weekendPolicy0, zonedDateTime0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      WeekendPolicy weekendPolicy0 = WeekendPolicy.FRIDAY_SATURDAY;
      int int0 = WeekendPolicy.daysFromWeekend(weekendPolicy0, zonedDateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      WeekendPolicy weekendPolicy0 = WeekendPolicy.SATURDAY_SUNDAY;
      int int0 = WeekendPolicy.daysFromWeekend(weekendPolicy0, zonedDateTime0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      WeekendPolicy weekendPolicy0 = WeekendPolicy.THURSDAY_FRIDAY;
      int int0 = WeekendPolicy.daysFromWeekend(weekendPolicy0, zonedDateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Instant instant0 = MockInstant.ofEpochSecond(415L);
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      Instant instant1 = MockInstant.plus(instant0, 3802L, (TemporalUnit) chronoUnit0);
      ZonedDateTime zonedDateTime0 = MockInstant.atZone(instant1, zoneOffset0);
      WeekendPolicy weekendPolicy0 = WeekendPolicy.SATURDAY_SUNDAY;
      int int0 = WeekendPolicy.daysToWeekend(weekendPolicy0, zonedDateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      WeekendPolicy weekendPolicy0 = WeekendPolicy.FRIDAY_SATURDAY;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      int int0 = WeekendPolicy.daysToWeekend(weekendPolicy0, zonedDateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Instant instant0 = MockInstant.ofEpochSecond(415L);
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      Instant instant1 = MockInstant.plus(instant0, 3802L, (TemporalUnit) chronoUnit0);
      ZonedDateTime zonedDateTime0 = MockInstant.atZone(instant1, zoneOffset0);
      WeekendPolicy weekendPolicy0 = WeekendPolicy.FRIDAY_SATURDAY;
      int int0 = WeekendPolicy.daysToWeekend(weekendPolicy0, zonedDateTime0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      Instant instant1 = MockInstant.plus(instant0, 3797L, (TemporalUnit) chronoUnit0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockInstant.atZone(instant1, zoneOffset0);
      WeekendPolicy weekendPolicy0 = WeekendPolicy.THURSDAY_FRIDAY;
      int int0 = WeekendPolicy.daysToWeekend(weekendPolicy0, zonedDateTime0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      WeekendPolicy weekendPolicy0 = WeekendPolicy.THURSDAY_FRIDAY;
      int int0 = WeekendPolicy.daysToWeekend(weekendPolicy0, zonedDateTime0);
      assertEquals(0, int0);
  }
}
