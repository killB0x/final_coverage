/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:44:16 GMT 2022
 */

package com.cronutils.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.Cron;
import com.cronutils.model.RebootCron;
import com.cronutils.model.definition.CronConstraint;
import com.cronutils.model.definition.CronDefinition;
import com.cronutils.model.definition.CronNicknames;
import com.cronutils.model.field.definition.FieldDefinition;
import com.cronutils.utils.CronFrequencyComparator;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CronFrequencyComparator_ESTest extends CronFrequencyComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      CronFrequencyComparator cronFrequencyComparator0 = new CronFrequencyComparator(zonedDateTime0, zonedDateTime0);
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronConstraint> linkedHashSet0 = new LinkedHashSet<CronConstraint>();
      LinkedHashSet<CronNicknames> linkedHashSet1 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet1.add(cronNicknames0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet0, linkedHashSet1, true);
      RebootCron rebootCron0 = new RebootCron(cronDefinition0);
      // Undeclared exception!
      try { 
        cronFrequencyComparator0.compare((Cron) null, (Cron) rebootCron0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endDate should take place later in time than startDate
         //
         verifyException("com.cronutils.model.time.ExecutionTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      ZonedDateTime zonedDateTime1 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      CronFrequencyComparator cronFrequencyComparator0 = new CronFrequencyComparator(zonedDateTime1, zonedDateTime0);
      int int0 = cronFrequencyComparator0.compare((Cron) null, (Cron) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CronFrequencyComparator cronFrequencyComparator0 = new CronFrequencyComparator((ZonedDateTime) null, (ZonedDateTime) null);
      // Undeclared exception!
      try { 
        cronFrequencyComparator0.compare((Cron) null, (Cron) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.ExecutionTime", e);
      }
  }
}
