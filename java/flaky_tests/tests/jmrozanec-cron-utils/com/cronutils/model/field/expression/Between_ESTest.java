/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:43:34 GMT 2022
 */

package com.cronutils.model.field.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.Between;
import com.cronutils.model.field.expression.FieldExpression;
import com.cronutils.model.field.expression.visitor.FieldExpressionVisitor;
import com.cronutils.model.field.expression.visitor.FieldExpressionVisitorAdaptor;
import com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor;
import com.cronutils.model.field.value.FieldValue;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import java.util.HashMap;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Between_ESTest extends Between_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(170);
      Between between0 = new Between(integerFieldValue0, (FieldValue<?>) null);
      FieldValue<?> fieldValue0 = between0.getTo();
      assertNull(fieldValue0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      FieldValue<?> fieldValue0 = between0.getTo();
      assertSame(integerFieldValue0, fieldValue0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Between between0 = new Between((FieldValue<?>) null, (FieldValue<?>) null);
      FieldValue<?> fieldValue0 = between0.getFrom();
      assertNull(fieldValue0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(170);
      Between between0 = new Between(integerFieldValue0, (FieldValue<?>) null);
      FieldValue<?> fieldValue0 = between0.getFrom();
      assertSame(integerFieldValue0, fieldValue0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(170);
      Between between0 = new Between(integerFieldValue0, (FieldValue<?>) null);
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      FieldExpression fieldExpression0 = between0.accept(fieldExpressionVisitorAdaptor0);
      assertSame(fieldExpression0, between0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Between between0 = new Between((FieldValue<?>) null, (FieldValue<?>) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, false);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      // Undeclared exception!
      try { 
        between0.accept(validationFieldExpressionVisitor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid chars in expression! Expression: null-null Invalid chars: NULLNULL
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Between between0 = new Between((FieldValue<?>) null, (FieldValue<?>) null);
      String string0 = between0.asString();
      assertEquals("null-null", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Between between0 = new Between((FieldValue<?>) null, (FieldValue<?>) null);
      // Undeclared exception!
      try { 
        between0.accept((FieldExpressionVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.expression.Between", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Between between0 = new Between((FieldValue<?>) null, (FieldValue<?>) null);
      Between between1 = new Between(between0);
      assertFalse(between1.equals((Object)between0));
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Between between0 = null;
      try {
        between0 = new Between((Between) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.expression.Between", e);
      }
  }
}
