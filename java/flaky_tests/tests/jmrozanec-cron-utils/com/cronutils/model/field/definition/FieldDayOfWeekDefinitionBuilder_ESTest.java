/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:37:06 GMT 2022
 */

package com.cronutils.model.field.definition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.definition.CronDefinitionBuilder;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.definition.FieldDayOfWeekDefinitionBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FieldDayOfWeekDefinitionBuilder_ESTest extends FieldDayOfWeekDefinitionBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      FieldDayOfWeekDefinitionBuilder fieldDayOfWeekDefinitionBuilder0 = new FieldDayOfWeekDefinitionBuilder(cronDefinitionBuilder0, cronFieldName0);
      FieldDayOfWeekDefinitionBuilder fieldDayOfWeekDefinitionBuilder1 = fieldDayOfWeekDefinitionBuilder0.withValidRange(0, 1970);
      assertSame(fieldDayOfWeekDefinitionBuilder0, fieldDayOfWeekDefinitionBuilder1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      FieldDayOfWeekDefinitionBuilder fieldDayOfWeekDefinitionBuilder0 = new FieldDayOfWeekDefinitionBuilder(cronDefinitionBuilder0, cronFieldName0);
      FieldDayOfWeekDefinitionBuilder fieldDayOfWeekDefinitionBuilder1 = fieldDayOfWeekDefinitionBuilder0.withMondayDoWValue((-1110));
      // Undeclared exception!
      try { 
        fieldDayOfWeekDefinitionBuilder1.and();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Monday Day of Week value must be greater or equal to zero
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldDayOfWeekDefinitionBuilder fieldDayOfWeekDefinitionBuilder0 = null;
      try {
        fieldDayOfWeekDefinitionBuilder0 = new FieldDayOfWeekDefinitionBuilder(cronDefinitionBuilder0, (CronFieldName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CronFieldName must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      FieldDayOfWeekDefinitionBuilder fieldDayOfWeekDefinitionBuilder0 = null;
      try {
        fieldDayOfWeekDefinitionBuilder0 = new FieldDayOfWeekDefinitionBuilder(cronDefinitionBuilder0, cronFieldName0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CronFieldName must be DAY_OF_WEEK
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      FieldDayOfWeekDefinitionBuilder fieldDayOfWeekDefinitionBuilder0 = new FieldDayOfWeekDefinitionBuilder(cronDefinitionBuilder0, cronFieldName0);
      FieldDayOfWeekDefinitionBuilder fieldDayOfWeekDefinitionBuilder1 = fieldDayOfWeekDefinitionBuilder0.withIntMapping(1970, 0);
      assertSame(fieldDayOfWeekDefinitionBuilder1, fieldDayOfWeekDefinitionBuilder0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      FieldDayOfWeekDefinitionBuilder fieldDayOfWeekDefinitionBuilder0 = new FieldDayOfWeekDefinitionBuilder(cronDefinitionBuilder0, cronFieldName0);
      CronDefinitionBuilder cronDefinitionBuilder1 = fieldDayOfWeekDefinitionBuilder0.and();
      assertSame(cronDefinitionBuilder0, cronDefinitionBuilder1);
  }
}
