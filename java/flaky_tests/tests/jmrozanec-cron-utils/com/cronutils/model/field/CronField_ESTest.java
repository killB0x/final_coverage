/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:37:47 GMT 2022
 */

package com.cronutils.model.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.field.CronField;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.And;
import com.cronutils.model.field.expression.FieldExpression;
import com.cronutils.model.field.expression.On;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import com.cronutils.model.field.value.SpecialCharFieldValue;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CronField_ESTest extends CronField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1680, 125, true);
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      CronFieldName cronFieldName1 = cronField0.getField();
      assertEquals(0, cronFieldName1.getOrder());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.MINUTE;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      SpecialChar specialChar0 = SpecialChar.QUESTION_MARK;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      FieldConstraints fieldConstraints1 = cronField0.getConstraints();
      assertTrue(fieldConstraints1.isStrictRange());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-4130), (-4130), false);
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      FieldConstraints fieldConstraints1 = cronField0.getConstraints();
      assertEquals((-4130), fieldConstraints1.getEndRange());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.MINUTE;
      CronField cronField0 = null;
      try {
        cronField0 = new CronField(cronFieldName0, (FieldExpression) null, (FieldConstraints) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // FieldExpression must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Comparator<CronField> comparator0 = CronField.createFieldComparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.MINUTE;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      SpecialChar specialChar0 = SpecialChar.QUESTION_MARK;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      String string0 = cronField0.toString();
      assertEquals("CronField{field=MINUTE}", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.MINUTE;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      SpecialChar specialChar0 = SpecialChar.QUESTION_MARK;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      CronFieldName cronFieldName1 = cronField0.getField();
      assertSame(cronFieldName1, cronFieldName0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      FieldExpression fieldExpression0 = FieldExpression.questionMark();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 8, 8, true);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      FieldExpression fieldExpression1 = cronField0.getExpression();
      assertEquals("QuestionMark{}", fieldExpression1.toString());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      FieldExpression fieldExpression0 = FieldExpression.questionMark();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>(3737);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 3737, 3737, true);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      FieldConstraints fieldConstraints1 = cronField0.getConstraints();
      assertEquals(3737, fieldConstraints1.getStartRange());
  }
}
