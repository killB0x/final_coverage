/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:46:17 GMT 2022
 */

package com.cronutils.model.field.definition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.definition.CronDefinitionBuilder;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.constraint.FieldConstraintsBuilder;
import com.cronutils.model.field.definition.FieldDayOfWeekDefinitionBuilder;
import com.cronutils.model.field.definition.FieldSpecialCharsDefinitionBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FieldSpecialCharsDefinitionBuilder_ESTest extends FieldSpecialCharsDefinitionBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldDayOfWeekDefinitionBuilder fieldDayOfWeekDefinitionBuilder0 = cronDefinitionBuilder0.withDayOfWeek();
      FieldSpecialCharsDefinitionBuilder fieldSpecialCharsDefinitionBuilder0 = fieldDayOfWeekDefinitionBuilder0.supportsL();
      fieldSpecialCharsDefinitionBuilder0.constraints = null;
      // Undeclared exception!
      try { 
        fieldDayOfWeekDefinitionBuilder0.withValidRange(909, 909);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.definition.FieldDefinitionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldDayOfWeekDefinitionBuilder fieldDayOfWeekDefinitionBuilder0 = cronDefinitionBuilder0.withDayOfWeek();
      FieldSpecialCharsDefinitionBuilder fieldSpecialCharsDefinitionBuilder0 = fieldDayOfWeekDefinitionBuilder0.supportsL();
      fieldSpecialCharsDefinitionBuilder0.constraints = null;
      // Undeclared exception!
      try { 
        fieldDayOfWeekDefinitionBuilder0.withIntMapping(925, 925);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.definition.FieldDefinitionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldDayOfWeekDefinitionBuilder fieldDayOfWeekDefinitionBuilder0 = cronDefinitionBuilder0.withDayOfWeek();
      FieldSpecialCharsDefinitionBuilder fieldSpecialCharsDefinitionBuilder0 = fieldDayOfWeekDefinitionBuilder0.supportsL();
      fieldSpecialCharsDefinitionBuilder0.constraints = null;
      // Undeclared exception!
      try { 
        fieldSpecialCharsDefinitionBuilder0.supportsW();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.definition.FieldSpecialCharsDefinitionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      FieldSpecialCharsDefinitionBuilder fieldSpecialCharsDefinitionBuilder0 = new FieldSpecialCharsDefinitionBuilder(cronDefinitionBuilder0, cronFieldName0);
      FieldSpecialCharsDefinitionBuilder fieldSpecialCharsDefinitionBuilder1 = fieldSpecialCharsDefinitionBuilder0.supportsHash();
      FieldConstraintsBuilder fieldConstraintsBuilder0 = FieldConstraintsBuilder.instance();
      fieldSpecialCharsDefinitionBuilder1.constraints = fieldConstraintsBuilder0;
      fieldSpecialCharsDefinitionBuilder1.constraints = null;
      // Undeclared exception!
      try { 
        fieldSpecialCharsDefinitionBuilder0.supportsLW();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.definition.FieldSpecialCharsDefinitionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronFieldName cronFieldName0 = CronFieldName.HOUR;
      FieldSpecialCharsDefinitionBuilder fieldSpecialCharsDefinitionBuilder0 = new FieldSpecialCharsDefinitionBuilder(cronDefinitionBuilder0, cronFieldName0);
      FieldSpecialCharsDefinitionBuilder fieldSpecialCharsDefinitionBuilder1 = fieldSpecialCharsDefinitionBuilder0.supportsHash();
      fieldSpecialCharsDefinitionBuilder1.constraints = null;
      // Undeclared exception!
      try { 
        fieldSpecialCharsDefinitionBuilder1.supportsL();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.definition.FieldSpecialCharsDefinitionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldSpecialCharsDefinitionBuilder fieldSpecialCharsDefinitionBuilder0 = cronDefinitionBuilder0.withDayOfMonth();
      fieldSpecialCharsDefinitionBuilder0.constraints = null;
      // Undeclared exception!
      try { 
        fieldSpecialCharsDefinitionBuilder0.supportsHash();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.definition.FieldSpecialCharsDefinitionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.MINUTE;
      FieldSpecialCharsDefinitionBuilder fieldSpecialCharsDefinitionBuilder0 = null;
      try {
        fieldSpecialCharsDefinitionBuilder0 = new FieldSpecialCharsDefinitionBuilder((CronDefinitionBuilder) null, cronFieldName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ParserBuilder must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      FieldSpecialCharsDefinitionBuilder fieldSpecialCharsDefinitionBuilder0 = new FieldSpecialCharsDefinitionBuilder(cronDefinitionBuilder0, cronFieldName0);
      FieldSpecialCharsDefinitionBuilder fieldSpecialCharsDefinitionBuilder1 = fieldSpecialCharsDefinitionBuilder0.withIntMapping(2, 0);
      assertSame(fieldSpecialCharsDefinitionBuilder0, fieldSpecialCharsDefinitionBuilder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      FieldSpecialCharsDefinitionBuilder fieldSpecialCharsDefinitionBuilder0 = new FieldSpecialCharsDefinitionBuilder(cronDefinitionBuilder0, cronFieldName0);
      FieldSpecialCharsDefinitionBuilder fieldSpecialCharsDefinitionBuilder1 = fieldSpecialCharsDefinitionBuilder0.supportsW();
      assertSame(fieldSpecialCharsDefinitionBuilder0, fieldSpecialCharsDefinitionBuilder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      FieldSpecialCharsDefinitionBuilder fieldSpecialCharsDefinitionBuilder0 = new FieldSpecialCharsDefinitionBuilder(cronDefinitionBuilder0, cronFieldName0);
      FieldSpecialCharsDefinitionBuilder fieldSpecialCharsDefinitionBuilder1 = fieldSpecialCharsDefinitionBuilder0.withValidRange(31, 10);
      assertSame(fieldSpecialCharsDefinitionBuilder0, fieldSpecialCharsDefinitionBuilder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldDayOfWeekDefinitionBuilder fieldDayOfWeekDefinitionBuilder0 = cronDefinitionBuilder0.withDayOfWeek();
      FieldSpecialCharsDefinitionBuilder fieldSpecialCharsDefinitionBuilder0 = fieldDayOfWeekDefinitionBuilder0.supportsLW();
      assertSame(fieldSpecialCharsDefinitionBuilder0, fieldDayOfWeekDefinitionBuilder0);
  }
}
