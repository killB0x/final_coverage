/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 23:30:19 GMT 2022
 */

package com.cronutils.model.field.expression.visitor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.StringValidations;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.Always;
import com.cronutils.model.field.expression.And;
import com.cronutils.model.field.expression.Between;
import com.cronutils.model.field.expression.Every;
import com.cronutils.model.field.expression.On;
import com.cronutils.model.field.expression.QuestionMark;
import com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor;
import com.cronutils.model.field.value.FieldValue;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import com.cronutils.model.field.value.SpecialCharFieldValue;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValidationFieldExpressionVisitor_ESTest extends ValidationFieldExpressionVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-1), (-1), true);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1608);
      boolean boolean0 = validationFieldExpressionVisitor0.isDefault(integerFieldValue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-3870), 1896, true);
      StringValidations stringValidations0 = new StringValidations(fieldConstraints0);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0, stringValidations0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-16));
      IntegerFieldValue integerFieldValue1 = new IntegerFieldValue((-52));
      Between between0 = new Between(integerFieldValue1, integerFieldValue0);
      Between between1 = validationFieldExpressionVisitor0.visit(between0);
      assertSame(between0, between1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-3870), (-3870), true);
      StringValidations stringValidations0 = new StringValidations(fieldConstraints0);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0, stringValidations0);
      SpecialChar specialChar0 = SpecialChar.NONE;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      validationFieldExpressionVisitor0.isInRange(specialCharFieldValue0);
      assertEquals(SpecialChar.NONE, specialCharFieldValue0.getValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 1, 1, false);
      StringValidations stringValidations0 = new StringValidations(fieldConstraints0);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0, stringValidations0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1);
      Every every0 = new Every(integerFieldValue0);
      And and0 = every0.and(every0);
      And and1 = validationFieldExpressionVisitor0.visit(and0);
      assertSame(and1, and0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, (-2), (-2), true);
      SpecialChar specialChar0 = SpecialChar.LW;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      boolean boolean0 = validationFieldExpressionVisitor0.isSpecialCharNotL(specialCharFieldValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2827, 2827, false);
      StringValidations stringValidations0 = new StringValidations(fieldConstraints0);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0, stringValidations0);
      boolean boolean0 = validationFieldExpressionVisitor0.isSpecialCharNotL((FieldValue<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-1));
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-1), (-1), true);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      boolean boolean0 = validationFieldExpressionVisitor0.isDefault(integerFieldValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor((FieldConstraints) null, (StringValidations) null);
      // Undeclared exception!
      try { 
        validationFieldExpressionVisitor0.visit((QuestionMark) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-5014), (-5014), true);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      QuestionMark questionMark0 = mock(QuestionMark.class, new ViolatedAssumptionAnswer());
      doReturn("Invalid chars in expression! Expression: %s Invalid chars: %s", "Invalid chars in expression! Expression: %s Invalid chars: %s").when(questionMark0).asString();
      // Undeclared exception!
      try { 
        validationFieldExpressionVisitor0.visit(questionMark0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid chars in expression! Expression: Invalid chars in expression! Expression: %s Invalid chars: %s Invalid chars: INVALIDCHARSINEXPRESSION!EXPRESSION:%SINVALIDCHARS:%S
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor((FieldConstraints) null, (StringValidations) null);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);
      On on0 = new On(integerFieldValue0);
      // Undeclared exception!
      try { 
        validationFieldExpressionVisitor0.visit(on0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      And and0 = new And();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1244);
      Every every0 = new Every(and0, integerFieldValue0);
      and0.and(every0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 16, 3236, true);
      StringValidations stringValidations0 = new StringValidations(fieldConstraints0);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0, stringValidations0);
      // Undeclared exception!
      try { 
        validationFieldExpressionVisitor0.visit(every0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor((FieldConstraints) null, (StringValidations) null);
      // Undeclared exception!
      try { 
        validationFieldExpressionVisitor0.visit((Every) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor((FieldConstraints) null, (StringValidations) null);
      // Undeclared exception!
      try { 
        validationFieldExpressionVisitor0.visit((Between) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 1, 1, false);
      StringValidations stringValidations0 = new StringValidations(fieldConstraints0);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0, stringValidations0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1);
      Every every0 = new Every(integerFieldValue0);
      And and0 = every0.and(every0);
      and0.and(and0);
      // Undeclared exception!
      validationFieldExpressionVisitor0.visit(and0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 3, 3, true);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      And and0 = new And();
      and0.and(and0);
      // Undeclared exception!
      validationFieldExpressionVisitor0.visit(and0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor((FieldConstraints) null, (StringValidations) null);
      And and0 = new And();
      // Undeclared exception!
      try { 
        validationFieldExpressionVisitor0.visit(and0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, 1, true);
      StringValidations stringValidations0 = new StringValidations(fieldConstraints0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor((FieldConstraints) null, stringValidations0);
      // Undeclared exception!
      try { 
        validationFieldExpressionVisitor0.isPeriodInRange(integerFieldValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-2));
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2), (-2), true);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      // Undeclared exception!
      try { 
        validationFieldExpressionVisitor0.isPeriodInRange(integerFieldValue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period -2 not in range [-2, -2]
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-1));
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor((FieldConstraints) null, (StringValidations) null);
      // Undeclared exception!
      try { 
        validationFieldExpressionVisitor0.isInRange(integerFieldValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-36));
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-36), (-294), true);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      // Undeclared exception!
      try { 
        validationFieldExpressionVisitor0.isInRange(integerFieldValue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -36 not in range [-36, -294]
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      Integer integer0 = new Integer(3);
      hashMap0.put(")", integer0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-1), (-1), true);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = null;
      try {
        validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 3
         // \\b())\\b
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = null;
      try {
        validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor((FieldConstraints) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.StringValidations", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-1));
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-1), (-1), false);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      Between between1 = validationFieldExpressionVisitor0.visit(between0);
      assertSame(between1, between0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor((FieldConstraints) null, (StringValidations) null);
      // Undeclared exception!
      try { 
        validationFieldExpressionVisitor0.visit((Always) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-3485), (-3485), false);
      StringValidations stringValidations0 = new StringValidations(fieldConstraints0);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0, stringValidations0);
      boolean boolean0 = validationFieldExpressionVisitor0.isDefault((FieldValue<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Every every0 = new Every((IntegerFieldValue) null);
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 103, 103, true);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      Every every1 = validationFieldExpressionVisitor0.visit(every0);
      assertSame(every0, every1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 103, 103, true);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      validationFieldExpressionVisitor0.isPeriodInRange((FieldValue<?>) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(12);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 12, (-94), false);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      // Undeclared exception!
      try { 
        validationFieldExpressionVisitor0.visit(between0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 12 not in range [12, -94]
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-1), (-1), true);
      SpecialChar specialChar0 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      linkedHashSet0.add(specialChar0);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      Between between0 = new Between(specialCharFieldValue0, specialCharFieldValue0);
      // Undeclared exception!
      try { 
        validationFieldExpressionVisitor0.visit(between0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No special characters allowed in range, except for 'L'
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2), (-2), true);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-2));
      SpecialChar specialChar0 = SpecialChar.NONE;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      On on1 = validationFieldExpressionVisitor0.visit(on0);
      assertSame(on1, on0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-3870), (-3870), true);
      StringValidations stringValidations0 = new StringValidations(fieldConstraints0);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0, stringValidations0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-3870));
      SpecialChar specialChar0 = SpecialChar.NONE;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0);
      On on1 = validationFieldExpressionVisitor0.visit(on0);
      assertSame(on0, on1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-1), (-1), true);
      SpecialChar specialChar0 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      linkedHashSet0.add(specialChar0);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      On on1 = validationFieldExpressionVisitor0.visit(on0);
      assertSame(on0, on1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1036);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-24), 1036, true);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      IntegerFieldValue integerFieldValue1 = new IntegerFieldValue(5);
      Between between0 = new Between(integerFieldValue0, integerFieldValue1);
      // Undeclared exception!
      try { 
        validationFieldExpressionVisitor0.visit(between0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range! [1036,5]
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-1222), (-1222), true);
      SpecialChar specialChar0 = SpecialChar.L;
      linkedHashSet0.add(specialChar0);
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      Between between0 = new Between(specialCharFieldValue0, specialCharFieldValue0);
      Between between1 = validationFieldExpressionVisitor0.visit(between0);
      assertSame(between0, between1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1036);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-24), 1036, true);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      Between between1 = validationFieldExpressionVisitor0.visit(between0);
      assertSame(between0, between1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(14);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 14, 14, false);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      Every every0 = new Every(between0, integerFieldValue0);
      And and0 = every0.and(between0);
      // Undeclared exception!
      try { 
        validationFieldExpressionVisitor0.visit(and0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period 14 not in range [14, 14]
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-3870), (-3870), true);
      StringValidations stringValidations0 = new StringValidations(fieldConstraints0);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0, stringValidations0);
      QuestionMark questionMark0 = mock(QuestionMark.class, new ViolatedAssumptionAnswer());
      doReturn("-3870").when(questionMark0).asString();
      doReturn("lJ89Ce7z~4").when(questionMark0).toString();
      QuestionMark questionMark1 = validationFieldExpressionVisitor0.visit(questionMark0);
      assertSame(questionMark1, questionMark0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-3870), (-3870), true);
      StringValidations stringValidations0 = new StringValidations(fieldConstraints0);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0, stringValidations0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-3870));
      Every every0 = new Every(integerFieldValue0);
      // Undeclared exception!
      try { 
        validationFieldExpressionVisitor0.visit(every0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period -3870 not in range [-3870, -3870]
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-3870), 1896, true);
      StringValidations stringValidations0 = new StringValidations(fieldConstraints0);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0, stringValidations0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-16));
      SpecialChar specialChar0 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0);
      // Undeclared exception!
      try { 
        validationFieldExpressionVisitor0.visit(on0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid chars in expression! Expression: -16W Invalid chars: W
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }
}
