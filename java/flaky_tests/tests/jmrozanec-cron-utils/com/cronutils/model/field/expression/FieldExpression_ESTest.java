/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:35:43 GMT 2022
 */

package com.cronutils.model.field.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.Always;
import com.cronutils.model.field.expression.And;
import com.cronutils.model.field.expression.Every;
import com.cronutils.model.field.expression.FieldExpression;
import com.cronutils.model.field.expression.On;
import com.cronutils.model.field.expression.visitor.FieldExpressionVisitor;
import com.cronutils.model.field.expression.visitor.FieldExpressionVisitorAdaptor;
import com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import com.cronutils.model.field.value.SpecialCharFieldValue;
import java.util.HashMap;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FieldExpression_ESTest extends FieldExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-549));
      Every every0 = new Every(integerFieldValue0);
      FieldExpression fieldExpression0 = every0.getExpression();
      String string0 = fieldExpression0.asString();
      assertEquals("*", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      And and0 = new And();
      String string0 = and0.asString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      SpecialChar specialChar0 = SpecialChar.HASH;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      FieldExpression fieldExpression0 = on0.accept(fieldExpressionVisitorAdaptor0);
      assertSame(fieldExpression0, on0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Always always0 = Always.INSTANCE;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      SpecialChar specialChar0 = SpecialChar.NONE;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0);
      And and0 = always0.and(on0);
      And and1 = and0.and(and0);
      // Undeclared exception!
      try { 
        and1.asString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      And and0 = new And();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-2814));
      Every every0 = new Every(and0, integerFieldValue0);
      and0.and(every0);
      // Undeclared exception!
      try { 
        and0.asString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2236, 2236, true);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      And and0 = new And();
      and0.and(and0);
      // Undeclared exception!
      try { 
        and0.accept(validationFieldExpressionVisitor0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2236, 2236, true);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      And and0 = new And();
      And and1 = and0.and(and0);
      and0.and(and1);
      // Undeclared exception!
      try { 
        and0.accept(validationFieldExpressionVisitor0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      Every every0 = new Every(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      // Undeclared exception!
      try { 
        every0.accept(validationFieldExpressionVisitor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period 0 not in range [0, 0]
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldExpression fieldExpression0 = FieldExpression.always();
      assertEquals("*", fieldExpression0.asString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldExpression fieldExpression0 = FieldExpression.questionMark();
      // Undeclared exception!
      try { 
        fieldExpression0.accept((FieldExpressionVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.expression.QuestionMark", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      And and0 = new And();
      and0.and((FieldExpression) null);
      // Undeclared exception!
      try { 
        and0.asString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.expression.And", e);
      }
  }
}
