/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:34:19 GMT 2022
 */

package com.cronutils.model.field.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.Always;
import com.cronutils.model.field.expression.FieldExpression;
import com.cronutils.model.field.expression.visitor.FieldExpressionVisitor;
import com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor;
import com.cronutils.model.field.value.SpecialChar;
import java.util.HashMap;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Always_ESTest extends Always_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Always always0 = Always.INSTANCE;
      // Undeclared exception!
      try { 
        always0.accept((FieldExpressionVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.expression.Always", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-969), (-969), true);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      Always always0 = Always.INSTANCE;
      FieldExpression fieldExpression0 = always0.accept(validationFieldExpressionVisitor0);
      assertEquals("*", fieldExpression0.asString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Always always0 = Always.INSTANCE;
      String string0 = always0.toString();
      assertEquals("Always{}", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Always always0 = Always.INSTANCE;
      String string0 = always0.asString();
      assertEquals("*", string0);
  }
}
