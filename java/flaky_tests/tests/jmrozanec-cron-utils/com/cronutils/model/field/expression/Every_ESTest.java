/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:23:52 GMT 2022
 */

package com.cronutils.model.field.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.And;
import com.cronutils.model.field.expression.Between;
import com.cronutils.model.field.expression.Every;
import com.cronutils.model.field.expression.FieldExpression;
import com.cronutils.model.field.expression.On;
import com.cronutils.model.field.expression.visitor.FieldExpressionVisitor;
import com.cronutils.model.field.expression.visitor.FieldExpressionVisitorAdaptor;
import com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Every_ESTest extends Every_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-6415));
      Every every0 = new Every(integerFieldValue0);
      Every every1 = new Every(every0, integerFieldValue0);
      And and0 = every0.and((FieldExpression) null);
      Every every2 = new Every(and0, integerFieldValue0);
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      every2.and(every0);
      // Undeclared exception!
      try { 
        every2.asString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.expression.And", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      And and0 = new And();
      Every every0 = new Every(and0, (IntegerFieldValue) null);
      String string0 = every0.asString();
      assertEquals("/1", string0);
      
      and0.and(every0);
      // Undeclared exception!
      try { 
        every0.asString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 6, 6, false);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      Every every0 = new Every((IntegerFieldValue) null);
      Every every1 = validationFieldExpressionVisitor0.visit(every0);
      IntegerFieldValue integerFieldValue0 = every1.getPeriod();
      assertEquals(1, (int)integerFieldValue0.getValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Every every0 = null;
      try {
        every0 = new Every((FieldExpression) null, (IntegerFieldValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Expression must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      Every every0 = new Every(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      // Undeclared exception!
      try { 
        every0.accept(validationFieldExpressionVisitor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period 0 not in range [0, 0]
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Every every0 = new Every((IntegerFieldValue) null);
      // Undeclared exception!
      try { 
        every0.accept((FieldExpressionVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.expression.Every", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Every every0 = new Every((IntegerFieldValue) null);
      FieldExpression fieldExpression0 = every0.getExpression();
      assertEquals("Always{}", fieldExpression0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Every every0 = new Every((IntegerFieldValue) null);
      IntegerFieldValue integerFieldValue0 = every0.getPeriod();
      assertEquals(1, (int)integerFieldValue0.getValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldExpression fieldExpression0 = FieldExpression.always();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      Every every0 = new Every(fieldExpression0, integerFieldValue0);
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      integerFieldValue0.toString();
      FieldExpression fieldExpression1 = every0.accept(fieldExpressionVisitorAdaptor0);
      fieldExpression0.asString();
      fieldExpression1.and(fieldExpression0);
      And and0 = every0.and(fieldExpression0);
      fieldExpression0.and(and0);
      every0.and(fieldExpression0);
      And and1 = every0.and(fieldExpression1);
      and1.getExpressions();
      integerFieldValue0.toString();
      every0.asString();
      FieldExpression fieldExpression2 = every0.accept(fieldExpressionVisitorAdaptor0);
      integerFieldValue0.toString();
      every0.getPeriod();
      every0.asString();
      every0.getPeriod();
      every0.getExpression();
      every0.getPeriod();
      fieldExpression0.and(and1);
      every0.getPeriod();
      every0.getExpression();
      every0.accept(fieldExpressionVisitorAdaptor0);
      every0.getPeriod();
      every0.getExpression();
      every0.getPeriod();
      FieldExpression fieldExpression3 = every0.accept(fieldExpressionVisitorAdaptor0);
      assertSame(fieldExpression3, fieldExpression2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2051);
      Every every0 = new Every(integerFieldValue0);
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      linkedHashSet0.parallelStream();
      every0.asString();
      FieldConstraints fieldConstraints0 = null;
      try {
        fieldConstraints0 = new FieldConstraints((Map<String, Integer>) null, (Map<Integer, Integer>) null, linkedHashSet0, 1, 2051, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // String mapping must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      Every every0 = new Every(integerFieldValue0);
      String string0 = every0.asString();
      assertEquals("*/0", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Every every0 = new Every((IntegerFieldValue) null);
      String string0 = every0.asString();
      assertEquals("*", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-472));
      Every every0 = new Every(integerFieldValue0);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      And and0 = every0.and(between0);
      On on0 = new On(integerFieldValue0);
      every0.and(on0);
      on0.and(and0);
      on0.asString();
      on0.and(every0);
      every0.and(on0);
      Every every1 = new Every(every0, integerFieldValue0);
      String string0 = every1.asString();
      assertEquals("*/-472/-472", string0);
  }
}
