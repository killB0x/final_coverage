/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:08:27 GMT 2022
 */

package com.cronutils.model.field.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.FieldExpression;
import com.cronutils.model.field.expression.On;
import com.cronutils.model.field.expression.visitor.FieldExpressionVisitor;
import com.cronutils.model.field.expression.visitor.FieldExpressionVisitorAdaptor;
import com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import com.cronutils.model.field.value.SpecialCharFieldValue;
import java.util.HashMap;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class On_ESTest extends On_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);
      On on0 = new On(integerFieldValue0);
      // Undeclared exception!
      try { 
        on0.accept((FieldExpressionVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.expression.On", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(6);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 6, (-1), true);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      // Undeclared exception!
      try { 
        on0.accept(validationFieldExpressionVisitor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 6 not in range [6, -1]
         //
         verifyException("com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      On on0 = null;
      try {
        on0 = new On((SpecialCharFieldValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // special char must not null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.HASH;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = null;
      try {
        on0 = new On(specialCharFieldValue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value missing for a#b cron expression
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      On on0 = null;
      try {
        on0 = new On((IntegerFieldValue) null, (SpecialCharFieldValue) null, (IntegerFieldValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // time must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      On on0 = null;
      try {
        on0 = new On((IntegerFieldValue) null, (SpecialCharFieldValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // time must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      On on0 = null;
      try {
        on0 = new On((IntegerFieldValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // time must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      IntegerFieldValue integerFieldValue0 = on0.getTime();
      assertEquals((-1), (int)integerFieldValue0.getValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(16);
      On on0 = new On(integerFieldValue0);
      IntegerFieldValue integerFieldValue1 = on0.getNth();
      On on1 = new On(integerFieldValue1, specialCharFieldValue0, integerFieldValue0);
      String string0 = on1.asString();
      assertEquals("L-16", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-1807));
      On on0 = new On(integerFieldValue0, specialCharFieldValue0);
      String string0 = on0.asString();
      assertEquals("-1807L", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      String string0 = on0.asString();
      assertEquals("W", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.LW;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      String string0 = on0.asString();
      assertEquals("LW", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.QUESTION_MARK;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      String string0 = on0.asString();
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      SpecialChar specialChar0 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0);
      String string0 = on0.asString();
      assertEquals("0W", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.HASH;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2637);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      String string0 = on0.asString();
      assertEquals("2637#2637", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      String string0 = on0.asString();
      assertEquals("L", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-2211));
      SpecialChar specialChar0 = SpecialChar.HASH;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = null;
      try {
        on0 = new On(integerFieldValue0, specialCharFieldValue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value missing for a#b cron expression
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(16);
      On on0 = new On(integerFieldValue0);
      SpecialCharFieldValue specialCharFieldValue0 = on0.getSpecialChar();
      assertEquals(SpecialChar.NONE, specialCharFieldValue0.getValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(16);
      On on0 = new On(integerFieldValue0);
      String string0 = on0.asString();
      assertEquals("16", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      FieldExpression fieldExpression0 = on0.accept(fieldExpressionVisitorAdaptor0);
      assertSame(fieldExpression0, on0);
  }
}
