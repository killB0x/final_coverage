/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:42:25 GMT 2022
 */

package com.cronutils.model.field.definition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.CronType;
import com.cronutils.model.definition.CronDefinition;
import com.cronutils.model.definition.CronDefinitionBuilder;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.constraint.FieldConstraintsBuilder;
import com.cronutils.model.field.definition.FieldDefinition;
import com.cronutils.model.field.definition.FieldDefinitionBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FieldDefinitionBuilder_ESTest extends FieldDefinitionBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronFieldName cronFieldName0 = CronFieldName.HOUR;
      FieldDefinitionBuilder fieldDefinitionBuilder0 = new FieldDefinitionBuilder(cronDefinitionBuilder0, cronFieldName0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldDefinitionBuilder fieldDefinitionBuilder0 = cronDefinitionBuilder0.withMonth();
      FieldDefinitionBuilder fieldDefinitionBuilder1 = fieldDefinitionBuilder0.withValidRange(3319, 3319);
      assertSame(fieldDefinitionBuilder0, fieldDefinitionBuilder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldDefinitionBuilder fieldDefinitionBuilder0 = cronDefinitionBuilder0.withMonth();
      CronDefinitionBuilder cronDefinitionBuilder1 = fieldDefinitionBuilder0.and();
      assertSame(cronDefinitionBuilder1, cronDefinitionBuilder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldDefinitionBuilder fieldDefinitionBuilder0 = cronDefinitionBuilder0.withYear();
      fieldDefinitionBuilder0.constraints = null;
      // Undeclared exception!
      try { 
        fieldDefinitionBuilder0.withValidRange(1507, 1507);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.definition.FieldDefinitionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldDefinitionBuilder fieldDefinitionBuilder0 = cronDefinitionBuilder0.withHours();
      fieldDefinitionBuilder0.constraints = null;
      // Undeclared exception!
      try { 
        fieldDefinitionBuilder0.withStrictRange();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.definition.FieldDefinitionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldDefinitionBuilder fieldDefinitionBuilder0 = cronDefinitionBuilder0.withHours();
      fieldDefinitionBuilder0.constraints = null;
      // Undeclared exception!
      try { 
        fieldDefinitionBuilder0.withIntMapping(59, 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.definition.FieldDefinitionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldDefinitionBuilder fieldDefinitionBuilder0 = cronDefinitionBuilder0.withYear();
      FieldDefinitionBuilder fieldDefinitionBuilder1 = fieldDefinitionBuilder0.optional();
      fieldDefinitionBuilder1.constraints = null;
      // Undeclared exception!
      try { 
        fieldDefinitionBuilder1.and();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.field.definition.FieldDefinitionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      FieldConstraintsBuilder fieldConstraintsBuilder0 = FieldConstraintsBuilder.instance();
      FieldConstraints fieldConstraints0 = fieldConstraintsBuilder0.createConstraintsInstance();
      FieldDefinition fieldDefinition0 = new FieldDefinition(cronFieldName0, fieldConstraints0, true);
      cronDefinitionBuilder0.register(fieldDefinition0);
      FieldDefinitionBuilder fieldDefinitionBuilder0 = cronDefinitionBuilder0.withMinutes();
      // Undeclared exception!
      try { 
        fieldDefinitionBuilder0.and();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't register mandatory definition after a optional definition.
         //
         verifyException("com.cronutils.model.definition.CronDefinitionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      FieldDefinitionBuilder fieldDefinitionBuilder0 = null;
      try {
        fieldDefinitionBuilder0 = new FieldDefinitionBuilder((CronDefinitionBuilder) null, cronFieldName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ParserBuilder must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CronType cronType0 = CronType.SPRING;
      CronDefinition cronDefinition0 = CronDefinitionBuilder.instanceDefinitionFor(cronType0);
      assertFalse(cronDefinition0.isMatchDayOfWeekAndDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldDefinitionBuilder fieldDefinitionBuilder0 = cronDefinitionBuilder0.withHours();
      FieldDefinitionBuilder fieldDefinitionBuilder1 = fieldDefinitionBuilder0.withIntMapping(59, 59);
      assertSame(fieldDefinitionBuilder0, fieldDefinitionBuilder1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldDefinitionBuilder fieldDefinitionBuilder0 = cronDefinitionBuilder0.withMonth();
      FieldDefinitionBuilder fieldDefinitionBuilder1 = fieldDefinitionBuilder0.withStrictRange();
      assertSame(fieldDefinitionBuilder0, fieldDefinitionBuilder1);
  }
}
