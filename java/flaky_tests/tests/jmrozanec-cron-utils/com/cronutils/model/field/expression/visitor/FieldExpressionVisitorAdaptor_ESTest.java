/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:41:43 GMT 2022
 */

package com.cronutils.model.field.expression.visitor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.cronutils.model.field.expression.Always;
import com.cronutils.model.field.expression.And;
import com.cronutils.model.field.expression.Between;
import com.cronutils.model.field.expression.Every;
import com.cronutils.model.field.expression.FieldExpression;
import com.cronutils.model.field.expression.On;
import com.cronutils.model.field.expression.QuestionMark;
import com.cronutils.model.field.expression.visitor.FieldExpressionVisitorAdaptor;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import com.cronutils.model.field.value.SpecialCharFieldValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FieldExpressionVisitorAdaptor_ESTest extends FieldExpressionVisitorAdaptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      QuestionMark questionMark0 = mock(QuestionMark.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(questionMark0).toString();
      FieldExpression fieldExpression0 = fieldExpressionVisitorAdaptor0.visit(questionMark0);
      assertNotNull(fieldExpression0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      FieldExpression fieldExpression0 = fieldExpressionVisitorAdaptor0.visit((On) null);
      assertNull(fieldExpression0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-510));
      SpecialChar specialChar0 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      FieldExpression fieldExpression0 = fieldExpressionVisitorAdaptor0.visit(on0);
      assertSame(fieldExpression0, on0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(3);
      Every every0 = new Every(integerFieldValue0);
      FieldExpression fieldExpression0 = fieldExpressionVisitorAdaptor0.visit(every0);
      assertSame(fieldExpression0, every0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      FieldExpression fieldExpression0 = fieldExpressionVisitorAdaptor0.visit((Between) null);
      assertNull(fieldExpression0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-510));
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      FieldExpression fieldExpression0 = fieldExpressionVisitorAdaptor0.visit(between0);
      assertSame(fieldExpression0, between0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      FieldExpression fieldExpression0 = fieldExpressionVisitorAdaptor0.visit((And) null);
      assertNull(fieldExpression0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      And and0 = new And();
      FieldExpression fieldExpression0 = fieldExpressionVisitorAdaptor0.visit(and0);
      assertSame(and0, fieldExpression0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      FieldExpression fieldExpression0 = fieldExpressionVisitorAdaptor0.visit((Always) null);
      assertNull(fieldExpression0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      On on0 = fieldExpressionVisitorAdaptor0.caseDefault((On) null);
      assertNull(on0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      And and0 = new And();
      And and1 = fieldExpressionVisitorAdaptor0.caseDefault(and0);
      assertSame(and0, and1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      Always always0 = mock(Always.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(always0).toString();
      FieldExpression fieldExpression0 = fieldExpressionVisitorAdaptor0.visit(always0);
      assertNotNull(fieldExpression0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      FieldExpression fieldExpression0 = fieldExpressionVisitorAdaptor0.visit((Every) null);
      assertNull(fieldExpression0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      FieldExpression fieldExpression0 = fieldExpressionVisitorAdaptor0.visit((QuestionMark) null);
      assertNull(fieldExpression0);
  }
}
