/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:09:49 GMT 2022
 */

package com.cronutils.model.definition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.CronType;
import com.cronutils.model.definition.CronConstraint;
import com.cronutils.model.definition.CronDefinition;
import com.cronutils.model.definition.CronDefinitionBuilder;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.definition.FieldDayOfWeekDefinitionBuilder;
import com.cronutils.model.field.definition.FieldDefinition;
import com.cronutils.model.field.definition.FieldDefinitionBuilder;
import com.cronutils.model.field.definition.FieldQuestionMarkDefinitionBuilder;
import com.cronutils.model.field.definition.FieldSpecialCharsDefinitionBuilder;
import com.cronutils.model.field.value.SpecialChar;
import java.util.HashMap;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CronDefinitionBuilder_ESTest extends CronDefinitionBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      cronDefinitionBuilder0.withSupportedNicknameReboot();
      CronDefinitionBuilder cronDefinitionBuilder1 = cronDefinitionBuilder0.matchDayOfWeekAndDayOfMonth();
      CronDefinition cronDefinition0 = cronDefinitionBuilder1.instance();
      assertTrue(cronDefinition0.isMatchDayOfWeekAndDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      // Undeclared exception!
      try { 
        cronDefinitionBuilder0.register((FieldDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.definition.CronDefinitionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        CronDefinitionBuilder.instanceDefinitionFor((CronType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.definition.CronDefinitionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(512, 512);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 512, 5, false);
      FieldDefinition fieldDefinition0 = new FieldDefinition(cronFieldName0, fieldConstraints0);
      cronDefinitionBuilder0.register(fieldDefinition0);
      cronDefinitionBuilder0.register(fieldDefinition0);
      assertFalse(fieldDefinition0.isOptional());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldDefinitionBuilder fieldDefinitionBuilder0 = cronDefinitionBuilder0.withHours();
      assertNotNull(fieldDefinitionBuilder0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronDefinitionBuilder cronDefinitionBuilder1 = cronDefinitionBuilder0.withSupportedNicknameHourly();
      assertSame(cronDefinitionBuilder1, cronDefinitionBuilder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronDefinitionBuilder cronDefinitionBuilder1 = cronDefinitionBuilder0.withSupportedNicknameMonthly();
      assertSame(cronDefinitionBuilder0, cronDefinitionBuilder1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldDayOfWeekDefinitionBuilder fieldDayOfWeekDefinitionBuilder0 = cronDefinitionBuilder0.withDayOfWeek();
      assertNotNull(fieldDayOfWeekDefinitionBuilder0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldDefinitionBuilder fieldDefinitionBuilder0 = cronDefinitionBuilder0.withSeconds();
      assertNotNull(fieldDefinitionBuilder0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronConstraint cronConstraint0 = mock(CronConstraint.class, new ViolatedAssumptionAnswer());
      CronDefinitionBuilder cronDefinitionBuilder1 = cronDefinitionBuilder0.withCronValidation(cronConstraint0);
      assertSame(cronDefinitionBuilder0, cronDefinitionBuilder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronDefinitionBuilder cronDefinitionBuilder1 = cronDefinitionBuilder0.withSupportedNicknameMidnight();
      assertSame(cronDefinitionBuilder1, cronDefinitionBuilder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldDefinitionBuilder fieldDefinitionBuilder0 = cronDefinitionBuilder0.withMonth();
      assertNotNull(fieldDefinitionBuilder0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      // Undeclared exception!
      try { 
        cronDefinitionBuilder0.instance();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field definitions must not be empty
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronDefinitionBuilder cronDefinitionBuilder1 = cronDefinitionBuilder0.withSupportedNicknameAnnually();
      assertSame(cronDefinitionBuilder0, cronDefinitionBuilder1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronDefinitionBuilder cronDefinitionBuilder1 = cronDefinitionBuilder0.withSupportedNicknameDaily();
      assertSame(cronDefinitionBuilder1, cronDefinitionBuilder0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldDefinitionBuilder fieldDefinitionBuilder0 = cronDefinitionBuilder0.withYear();
      assertNotNull(fieldDefinitionBuilder0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronDefinitionBuilder cronDefinitionBuilder1 = cronDefinitionBuilder0.withSupportedNicknameWeekly();
      assertSame(cronDefinitionBuilder0, cronDefinitionBuilder1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldDefinitionBuilder fieldDefinitionBuilder0 = cronDefinitionBuilder0.withMinutes();
      assertNotNull(fieldDefinitionBuilder0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldSpecialCharsDefinitionBuilder fieldSpecialCharsDefinitionBuilder0 = cronDefinitionBuilder0.withDayOfMonth();
      assertNotNull(fieldSpecialCharsDefinitionBuilder0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronDefinitionBuilder cronDefinitionBuilder1 = cronDefinitionBuilder0.withSupportedNicknameYearly();
      assertSame(cronDefinitionBuilder0, cronDefinitionBuilder1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, 1737, true);
      FieldDefinition fieldDefinition0 = new FieldDefinition(cronFieldName0, fieldConstraints0, true);
      cronDefinitionBuilder0.register(fieldDefinition0);
      FieldDefinition fieldDefinition1 = new FieldDefinition(cronFieldName0, fieldConstraints0, false);
      // Undeclared exception!
      try { 
        cronDefinitionBuilder0.register(fieldDefinition1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't register mandatory definition after a optional definition.
         //
         verifyException("com.cronutils.model.definition.CronDefinitionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      FieldQuestionMarkDefinitionBuilder fieldQuestionMarkDefinitionBuilder0 = cronDefinitionBuilder0.withDayOfYear();
      assertNotNull(fieldQuestionMarkDefinitionBuilder0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CronType cronType0 = CronType.UNIX;
      CronDefinition cronDefinition0 = CronDefinitionBuilder.instanceDefinitionFor(cronType0);
      assertFalse(cronDefinition0.isMatchDayOfWeekAndDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CronType cronType0 = CronType.SPRING;
      CronDefinition cronDefinition0 = CronDefinitionBuilder.instanceDefinitionFor(cronType0);
      assertFalse(cronDefinition0.isMatchDayOfWeekAndDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();
      cronDefinitionBuilder0.withSupportedNicknameReboot();
      CronDefinition cronDefinition0 = cronDefinitionBuilder0.instance();
      assertFalse(cronDefinition0.isMatchDayOfWeekAndDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CronType cronType0 = CronType.QUARTZ;
      CronDefinition cronDefinition0 = CronDefinitionBuilder.instanceDefinitionFor(cronType0);
      assertFalse(cronDefinition0.isMatchDayOfWeekAndDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CronType cronType0 = CronType.SPRING53;
      CronDefinition cronDefinition0 = CronDefinitionBuilder.instanceDefinitionFor(cronType0);
      assertFalse(cronDefinition0.isMatchDayOfWeekAndDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CronType cronType0 = CronType.CRON4J;
      CronDefinition cronDefinition0 = CronDefinitionBuilder.instanceDefinitionFor(cronType0);
      assertTrue(cronDefinition0.isMatchDayOfWeekAndDayOfMonth());
  }
}
