/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 23:34:23 GMT 2022
 */

package com.cronutils.model.time.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.field.CronField;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.And;
import com.cronutils.model.field.expression.Between;
import com.cronutils.model.field.expression.Every;
import com.cronutils.model.field.expression.FieldExpression;
import com.cronutils.model.field.expression.On;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import com.cronutils.model.time.generator.EveryFieldValueGenerator;
import java.util.HashMap;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EveryFieldValueGenerator_ESTest extends EveryFieldValueGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      And and0 = new And();
      Every every0 = new Every(and0, (IntegerFieldValue) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-24), 995, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.isMatch(1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      And and0 = new And();
      Every every0 = new Every(and0, (IntegerFieldValue) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1050, 4297, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(1, 1050);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      And and0 = new And();
      Every every0 = new Every(and0, (IntegerFieldValue) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 995, false);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes((-1624), 93);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      And and0 = new And();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-3001));
      Every every0 = new Every(and0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-3001), 2402, false);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.generatePreviousValue((-2099));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      And and0 = new And();
      Every every0 = new Every(and0, (IntegerFieldValue) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-3522), 2842, false);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.generatePreviousValue(5);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      Every every0 = new Every(integerFieldValue0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 0, 0, true);
      CronFieldName cronFieldName0 = CronFieldName.HOUR;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(246, 0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      And and0 = new And();
      Every every0 = new Every(and0, (IntegerFieldValue) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 995, false);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.offset();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      And and0 = new And();
      Every every0 = new Every(and0, (IntegerFieldValue) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 995, 844, false);
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.offset();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      And and0 = new And();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-3001));
      Every every0 = new Every(and0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-3001), 2402, false);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.offset();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      And and0 = new And();
      Every every0 = new Every(and0, (IntegerFieldValue) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2842, 2842, false);
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.matchesFieldExpressionClass(every0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      And and0 = new And();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-3001));
      Every every0 = new Every(and0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-3001), 2402, false);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.matchesFieldExpressionClass(and0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Every every0 = new Every((IntegerFieldValue) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2295), (-2295), true);
      CronFieldName cronFieldName0 = CronFieldName.HOUR;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.generatePreviousValue((-2295));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      And and0 = new And();
      Every every0 = new Every(and0, (IntegerFieldValue) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 995, false);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.generateNextValue(0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      Every every0 = new Every(integerFieldValue0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 0, 0, true);
      CronFieldName cronFieldName0 = CronFieldName.HOUR;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      // Undeclared exception!
      try { 
        everyFieldValueGenerator0.isMatch(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.cronutils.model.time.generator.EveryFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Every every0 = new Every((IntegerFieldValue) null);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 2040, 987, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.cronField = null;
      // Undeclared exception!
      try { 
        everyFieldValueGenerator0.generatePreviousValue((-3008));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.EveryFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      Every every0 = new Every(integerFieldValue0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 0, 0, true);
      CronFieldName cronFieldName0 = CronFieldName.HOUR;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      // Undeclared exception!
      try { 
        everyFieldValueGenerator0.generatePreviousValue(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.cronutils.model.time.generator.EveryFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1034);
      Every every0 = new Every(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1034, 1034, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.cronField = null;
      // Undeclared exception!
      try { 
        everyFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(1034, 1034);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.EveryFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      Every every0 = new Every(integerFieldValue0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 0, 961, false);
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      // Undeclared exception!
      try { 
        everyFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(0, 961);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.cronutils.model.time.generator.EveryFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EveryFieldValueGenerator everyFieldValueGenerator0 = null;
      try {
        everyFieldValueGenerator0 = new EveryFieldValueGenerator((CronField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CronField must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 6, 6, false);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = null;
      try {
        everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FieldExpression does not match required class
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FieldExpression fieldExpression0 = FieldExpression.always();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1879);
      Every every0 = new Every(fieldExpression0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1324, 1879, false);
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      try { 
        everyFieldValueGenerator0.generateNextValue(1324);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.EveryFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      And and0 = new And();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-3001));
      Every every0 = new Every(and0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-3001), 2402, false);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.generateNextValue((-2099));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(665);
      Every every0 = new Every(integerFieldValue0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 665, 665, false);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      try { 
        everyFieldValueGenerator0.generateNextValue(665);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.EveryFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Every every0 = new Every((IntegerFieldValue) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2295), (-2295), true);
      CronFieldName cronFieldName0 = CronFieldName.HOUR;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.isMatch(1183);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Every every0 = new Every((IntegerFieldValue) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>(1010, 1010);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1010, 1010, true);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.isMatch(1010);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(665);
      Every every0 = new Every(integerFieldValue0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 665, 665, false);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.isMatch((-2459));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      Every every0 = new Every(integerFieldValue0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 0, 0, true);
      CronFieldName cronFieldName0 = CronFieldName.HOUR;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes((-40), 995);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(665);
      Every every0 = new Every(integerFieldValue0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 665, 665, false);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes((-353), (-353));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Every every0 = new Every((IntegerFieldValue) null);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 1015, 961, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.generatePreviousValue(1015);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(665);
      Every every0 = new Every(integerFieldValue0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 665, 665, false);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      try { 
        everyFieldValueGenerator0.generatePreviousValue((-3369));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.EveryFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-1218));
      Every every0 = new Every(integerFieldValue0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, (-1218), 2114, true);
      CronFieldName cronFieldName0 = CronFieldName.MINUTE;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.generatePreviousValue((-1218));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      And and0 = new And();
      Every every0 = new Every(and0, (IntegerFieldValue) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 3544, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.generateNextValue((-3766));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-2112));
      On on0 = new On(integerFieldValue0);
      Every every0 = new Every(on0, integerFieldValue0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 789, 789, false);
      CronFieldName cronFieldName0 = CronFieldName.HOUR;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      everyFieldValueGenerator0.isMatch(789);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1855);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      Every every0 = new Every(between0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1855, 1855, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-1218));
      Every every0 = new Every(integerFieldValue0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, (-1218), 2114, true);
      CronFieldName cronFieldName0 = CronFieldName.MINUTE;
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);
      // Undeclared exception!
      everyFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(0, 2114);
  }
}
