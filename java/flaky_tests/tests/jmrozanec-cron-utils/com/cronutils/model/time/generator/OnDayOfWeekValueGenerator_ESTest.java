/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 23:42:11 GMT 2022
 */

package com.cronutils.model.time.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.mapper.WeekDay;
import com.cronutils.model.field.CronField;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.And;
import com.cronutils.model.field.expression.Every;
import com.cronutils.model.field.expression.On;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import com.cronutils.model.field.value.SpecialCharFieldValue;
import com.cronutils.model.time.generator.OnDayOfWeekValueGenerator;
import java.time.DateTimeException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OnDayOfWeekValueGenerator_ESTest extends OnDayOfWeekValueGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(7);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2422), 7, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(2, true);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, (-1676), 2, weekDay0);
      onDayOfWeekValueGenerator0.generateNextValue(360);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(7);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 7, 7, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(7, true);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 926, 7, weekDay0);
      onDayOfWeekValueGenerator0.generateNextValue(7);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      SpecialChar specialChar0 = SpecialChar.HASH;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(1, true);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, (-568), 1, weekDay0);
      onDayOfWeekValueGenerator0.isMatch(3950);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-31), 3425, false);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(1771, false);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, (-31), (-2011), weekDay0);
      // Undeclared exception!
      try { 
        onDayOfWeekValueGenerator0.generatePreviousValue(1771);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): -2011
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-1), 7, false);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(1771, false);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 23, 23, weekDay0);
      // Undeclared exception!
      try { 
        onDayOfWeekValueGenerator0.isMatch(211);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 23
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-8));
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-1), 7, false);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(1771, false);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, (-8), (-8), weekDay0);
      // Undeclared exception!
      try { 
        onDayOfWeekValueGenerator0.generateNextValue((-1));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): -8
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      SpecialChar specialChar0 = SpecialChar.HASH;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 16, 0, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(1, false);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 3, 1, weekDay0);
      try { 
        onDayOfWeekValueGenerator0.generatePreviousValue((-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.OnDayOfWeekValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-8));
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2890), 1990, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(6, false);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 1935, 6, weekDay0);
      onDayOfWeekValueGenerator0.generateCandidates((-8), (-2));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(3);
      SpecialChar specialChar0 = SpecialChar.LW;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 3, 16, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(16, true);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 1, 16, weekDay0);
      onDayOfWeekValueGenerator0.isMatch(4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-886), 3, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(2358, true);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 0, 2358, weekDay0);
      onDayOfWeekValueGenerator0.matchesFieldExpressionClass(on0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(3);
      SpecialChar specialChar0 = SpecialChar.LW;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 3, 16, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(16, true);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 1, 16, weekDay0);
      Every every0 = new Every(integerFieldValue0);
      onDayOfWeekValueGenerator0.matchesFieldExpressionClass(every0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      SpecialChar specialChar0 = SpecialChar.HASH;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(3, true);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 0, 1, weekDay0);
      onDayOfWeekValueGenerator0.isMatch(0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      SpecialChar specialChar0 = SpecialChar.HASH;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 16, 0, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(2, false);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 1, 7, weekDay0);
      onDayOfWeekValueGenerator0.generatePreviousValue(16);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      SpecialChar specialChar0 = SpecialChar.HASH;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 16, 0, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(1, false);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 3, 1, weekDay0);
      onDayOfWeekValueGenerator0.generatePreviousValue(1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      SpecialChar specialChar0 = SpecialChar.HASH;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(3, true);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 0, 1, weekDay0);
      onDayOfWeekValueGenerator0.generateNextValue((-2608));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-8));
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2890), 1990, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(6, false);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 1935, 6, weekDay0);
      onDayOfWeekValueGenerator0.generateNextValue((-2890));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(7);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>(7);
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 7, 7, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(37, false);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 7, 7, weekDay0);
      // Undeclared exception!
      onDayOfWeekValueGenerator0.isMatch(Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(23);
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 23, 3, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 2, 2, (WeekDay) null);
      // Undeclared exception!
      try { 
        onDayOfWeekValueGenerator0.isMatch(23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.mapper.ConstantsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(7);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>(7);
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 7, 7, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 387, 7, (WeekDay) null);
      // Undeclared exception!
      try { 
        onDayOfWeekValueGenerator0.generatePreviousValue(7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.mapper.ConstantsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 2, 2, (WeekDay) null);
      // Undeclared exception!
      try { 
        onDayOfWeekValueGenerator0.generateNextValue(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.mapper.ConstantsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WeekDay weekDay0 = new WeekDay(2034, false);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = null;
      try {
        onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator((CronField) null, 2034, 2034, weekDay0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CronField must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-3155), (-3155), true);
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(2, true);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = null;
      try {
        onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 2, (-3155), weekDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FieldExpression does not match required class
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2034);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2034, 2034, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(1, false);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 2034, 1, weekDay0);
      try { 
        onDayOfWeekValueGenerator0.generatePreviousValue(2034);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.OnDayOfWeekValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(125);
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0);
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 125, 125, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(5, false);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 5, 5, weekDay0);
      int int0 = onDayOfWeekValueGenerator0.generateNextValue(5);
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, true);
      WeekDay weekDay0 = new WeekDay(2, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 140, 2, weekDay0);
      int int0 = onDayOfWeekValueGenerator0.generatePreviousValue(140);
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(23);
      SpecialChar specialChar0 = SpecialChar.HASH;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 23, 23, false);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(8, false);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 8, 8, weekDay0);
      int int0 = onDayOfWeekValueGenerator0.generateNextValue(8);
      assertEquals(166, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 37, 37, false);
      WeekDay weekDay0 = new WeekDay(37, false);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 37, 37, weekDay0);
      try { 
        onDayOfWeekValueGenerator0.generateNextValue(37);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.OnDayOfWeekValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(2, true);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 2, 2, weekDay0);
      List<Integer> list0 = onDayOfWeekValueGenerator0.generateCandidates(2146, 2146);
      assertTrue(list0.contains(2146));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(23);
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-1), 7, false);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(1771, false);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, (-2127), 7, weekDay0);
      int int0 = onDayOfWeekValueGenerator0.generatePreviousValue(1133);
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(125);
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0);
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 2, 2, true);
      WeekDay weekDay0 = new WeekDay(125, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfWeekValueGenerator onDayOfWeekValueGenerator0 = new OnDayOfWeekValueGenerator(cronField0, 125, 2, weekDay0);
      try { 
        onDayOfWeekValueGenerator0.generateNextValue(125);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.OnDayOfWeekValueGenerator", e);
      }
  }
}
