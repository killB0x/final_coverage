/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:21:38 GMT 2022
 */

package com.cronutils.model.time.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.mapper.WeekDay;
import com.cronutils.model.field.CronField;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.And;
import com.cronutils.model.field.expression.Between;
import com.cronutils.model.field.value.FieldValue;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import com.cronutils.model.field.value.SpecialCharFieldValue;
import com.cronutils.model.time.generator.BetweenDayOfWeekValueGenerator;
import java.time.DateTimeException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BetweenDayOfWeekValueGenerator_ESTest extends BetweenDayOfWeekValueGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2526);
      IntegerFieldValue integerFieldValue1 = new IntegerFieldValue(3360);
      Between between0 = new Between(integerFieldValue0, integerFieldValue1);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-543), 3360, false);
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(1791, true);
      BetweenDayOfWeekValueGenerator betweenDayOfWeekValueGenerator0 = new BetweenDayOfWeekValueGenerator(cronField0, 59, 1808, weekDay0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2549);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 2549, true);
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(0, false);
      BetweenDayOfWeekValueGenerator betweenDayOfWeekValueGenerator0 = new BetweenDayOfWeekValueGenerator(cronField0, (-1667), 0, weekDay0);
      betweenDayOfWeekValueGenerator0.matchesFieldExpressionClass(between0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2549);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2070, 0, false);
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(0, false);
      BetweenDayOfWeekValueGenerator betweenDayOfWeekValueGenerator0 = new BetweenDayOfWeekValueGenerator(cronField0, 1, 0, weekDay0);
      betweenDayOfWeekValueGenerator0.matchesFieldExpressionClass(and0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2549);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2549, 0, true);
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(2549, true);
      BetweenDayOfWeekValueGenerator betweenDayOfWeekValueGenerator0 = new BetweenDayOfWeekValueGenerator(cronField0, 2549, 1, weekDay0);
      betweenDayOfWeekValueGenerator0.isMatch(13);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2549);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2070, 0, true);
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(0, true);
      BetweenDayOfWeekValueGenerator betweenDayOfWeekValueGenerator0 = new BetweenDayOfWeekValueGenerator(cronField0, 2070, 1, weekDay0);
      betweenDayOfWeekValueGenerator0.isMatch(1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2549);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2070, 0, true);
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(0, true);
      BetweenDayOfWeekValueGenerator betweenDayOfWeekValueGenerator0 = new BetweenDayOfWeekValueGenerator(cronField0, 2070, 1, weekDay0);
      betweenDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(2070, 3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2549);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2070, 0, true);
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(2549, true);
      BetweenDayOfWeekValueGenerator betweenDayOfWeekValueGenerator0 = new BetweenDayOfWeekValueGenerator(cronField0, 2070, 1, weekDay0);
      betweenDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(2549, 13);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2536);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2536, 2536, false);
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(2536, false);
      BetweenDayOfWeekValueGenerator betweenDayOfWeekValueGenerator0 = new BetweenDayOfWeekValueGenerator(cronField0, 2536, 2536, weekDay0);
      // Undeclared exception!
      try { 
        betweenDayOfWeekValueGenerator0.isMatch(2536);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 2536
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2549);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2549, 2549, true);
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(2549, true);
      BetweenDayOfWeekValueGenerator betweenDayOfWeekValueGenerator0 = new BetweenDayOfWeekValueGenerator(cronField0, 1, 1, weekDay0);
      // Undeclared exception!
      betweenDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(1, 2549);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2549);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-588), (-588), true);
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(2549, true);
      BetweenDayOfWeekValueGenerator betweenDayOfWeekValueGenerator0 = new BetweenDayOfWeekValueGenerator(cronField0, (-588), (-588), weekDay0);
      // Undeclared exception!
      try { 
        betweenDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes((-588), (-588));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): -588
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2570);
      Between between0 = new Between(integerFieldValue0, (FieldValue<?>) null);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2570, 2570, false);
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(2570, false);
      BetweenDayOfWeekValueGenerator betweenDayOfWeekValueGenerator0 = null;
      try {
        betweenDayOfWeekValueGenerator0 = new BetweenDayOfWeekValueGenerator(cronField0, 2570, 2570, weekDay0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.BetweenDayOfWeekValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WeekDay weekDay0 = new WeekDay(2549, false);
      BetweenDayOfWeekValueGenerator betweenDayOfWeekValueGenerator0 = null;
      try {
        betweenDayOfWeekValueGenerator0 = new BetweenDayOfWeekValueGenerator((CronField) null, 366, 2549, weekDay0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CronField must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 11, 11, false);
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(11, false);
      BetweenDayOfWeekValueGenerator betweenDayOfWeekValueGenerator0 = null;
      try {
        betweenDayOfWeekValueGenerator0 = new BetweenDayOfWeekValueGenerator(cronField0, 11, 11, weekDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FieldExpression does not match required class
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.NONE;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      Between between0 = new Between(specialCharFieldValue0, specialCharFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 6, (-2065), true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(1, false);
      BetweenDayOfWeekValueGenerator betweenDayOfWeekValueGenerator0 = null;
      try {
        betweenDayOfWeekValueGenerator0 = new BetweenDayOfWeekValueGenerator(cronField0, 1, 1, weekDay0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.cronutils.model.field.value.SpecialChar cannot be cast to class java.lang.Integer (com.cronutils.model.field.value.SpecialChar is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @5bafe115; java.lang.Integer is in module java.base of loader 'bootstrap')
         //
         verifyException("com.cronutils.model.time.generator.BetweenDayOfWeekValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2539);
      IntegerFieldValue integerFieldValue1 = new IntegerFieldValue(2570);
      Between between0 = new Between(integerFieldValue1, integerFieldValue0);
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2526, (-5756), false);
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(2526, false);
      BetweenDayOfWeekValueGenerator betweenDayOfWeekValueGenerator0 = new BetweenDayOfWeekValueGenerator(cronField0, 3520, 2526, weekDay0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2549);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2549, 0, true);
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(0, true);
      BetweenDayOfWeekValueGenerator betweenDayOfWeekValueGenerator0 = new BetweenDayOfWeekValueGenerator(cronField0, 2549, 1, weekDay0);
      betweenDayOfWeekValueGenerator0.generateNextValue(884);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2549);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2070, 0, true);
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(0, true);
      BetweenDayOfWeekValueGenerator betweenDayOfWeekValueGenerator0 = new BetweenDayOfWeekValueGenerator(cronField0, 2070, 1, weekDay0);
      int int0 = betweenDayOfWeekValueGenerator0.generatePreviousValue((-5149));
      assertEquals(0, int0);
  }
}
