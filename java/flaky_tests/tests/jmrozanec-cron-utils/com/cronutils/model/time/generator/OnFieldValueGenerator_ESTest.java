/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:14:09 GMT 2022
 */

package com.cronutils.model.time.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.field.CronField;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.And;
import com.cronutils.model.field.expression.FieldExpression;
import com.cronutils.model.field.expression.On;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import com.cronutils.model.field.value.SpecialCharFieldValue;
import com.cronutils.model.time.generator.OnFieldValueGenerator;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OnFieldValueGenerator_ESTest extends OnFieldValueGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, 1, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      boolean boolean0 = onFieldValueGenerator0.isMatch((-932));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, 1, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      List<Integer> list0 = onFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes((-245), (-932));
      assertFalse(list0.contains(0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, 1, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      List<Integer> list0 = onFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(4127, 1);
      assertFalse(list0.contains(0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      try { 
        onFieldValueGenerator0.generatePreviousValue((-1030));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.OnFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, 1, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      try { 
        onFieldValueGenerator0.generateNextValue(0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.OnFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, 1, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      boolean boolean0 = onFieldValueGenerator0.matchesFieldExpressionClass(on0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, 1, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      FieldExpression fieldExpression0 = FieldExpression.always();
      boolean boolean0 = onFieldValueGenerator0.matchesFieldExpressionClass(fieldExpression0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      SpecialChar specialChar0 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2409), (-2409), false);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      boolean boolean0 = onFieldValueGenerator0.isMatch((-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 8, 1792, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      int int0 = onFieldValueGenerator0.generatePreviousValue(2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      SpecialChar specialChar0 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2409), (-2409), false);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      int int0 = onFieldValueGenerator0.generatePreviousValue(930);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, 1, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      int int0 = onFieldValueGenerator0.generateNextValue((-3008));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.MINUTE;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1278);
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1278, 125, false);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      int int0 = onFieldValueGenerator0.generateNextValue((-321));
      assertEquals(1278, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OnFieldValueGenerator onFieldValueGenerator0 = null;
      try {
        onFieldValueGenerator0 = new OnFieldValueGenerator((CronField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CronField must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.MINUTE;
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2385), (-2385), false);
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = null;
      try {
        onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FieldExpression does not match required class
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-1486), (-1486), false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-1486));
      On on0 = new On(integerFieldValue0);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      List<Integer> list0 = onFieldValueGenerator0.generateCandidates((-1486), (-1486));
      assertTrue(list0.contains((-1486)));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, 1, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      boolean boolean0 = onFieldValueGenerator0.isMatch(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, 1, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      List<Integer> list0 = onFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes((-2334), 0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-1480), (-1480), false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-1480));
      On on0 = new On(integerFieldValue0);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      try { 
        onFieldValueGenerator0.generatePreviousValue((-1480));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.OnFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(689);
      On on0 = new On(integerFieldValue0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 689, 393, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      int int0 = onFieldValueGenerator0.generatePreviousValue(4023);
      assertEquals(689, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      SpecialChar specialChar0 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 4882, (-1559), false);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      try { 
        onFieldValueGenerator0.generateNextValue(0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.OnFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2385), (-2385), false);
      CronFieldName cronFieldName0 = CronFieldName.HOUR;
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      int int0 = onFieldValueGenerator0.generateNextValue((-2385));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, false);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);
      List<Integer> list0 = onFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes((-2770), 1);
      assertTrue(list0.contains(0));
  }
}
