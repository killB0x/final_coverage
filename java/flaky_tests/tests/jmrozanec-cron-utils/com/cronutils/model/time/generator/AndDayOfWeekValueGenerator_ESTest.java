/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:27:40 GMT 2022
 */

package com.cronutils.model.time.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.mapper.WeekDay;
import com.cronutils.model.field.CronField;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.And;
import com.cronutils.model.field.expression.FieldExpression;
import com.cronutils.model.field.expression.On;
import com.cronutils.model.field.expression.visitor.FieldExpressionVisitorAdaptor;
import com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import com.cronutils.model.field.value.SpecialCharFieldValue;
import com.cronutils.model.time.generator.AndDayOfWeekValueGenerator;
import java.time.DateTimeException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AndDayOfWeekValueGenerator_ESTest extends AndDayOfWeekValueGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      SpecialChar specialChar0 = SpecialChar.LW;
      linkedHashSet0.add(specialChar0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator0 = new AndDayOfWeekValueGenerator(cronField0, (-20), 0, (WeekDay) null);
      CronField.createFieldComparator();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(316);
      On on0 = new On(integerFieldValue0);
      SpecialChar specialChar1 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar1);
      CronField cronField1 = new CronField(cronFieldName0, and0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(1291, true);
      int int0 = (-843);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator1 = null;
      try {
        andDayOfWeekValueGenerator1 = new AndDayOfWeekValueGenerator((CronField) null, 0, (-843), (WeekDay) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CronField must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      SpecialChar specialChar0 = SpecialChar.LW;
      linkedHashSet0.add(specialChar0);
      int int0 = 0;
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator0 = new AndDayOfWeekValueGenerator(cronField0, 0, 0, (WeekDay) null);
      CronField.createFieldComparator();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-3368));
      and0.and((FieldExpression) null);
      linkedHashSet0.stream();
      int int1 = 1;
      // Undeclared exception!
      try { 
        andDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // FieldExpression must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      SpecialChar specialChar0 = SpecialChar.LW;
      linkedHashSet0.add(specialChar0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator0 = new AndDayOfWeekValueGenerator(cronField0, (-1), 0, (WeekDay) null);
      CronField.createFieldComparator();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(316);
      On on0 = new On(integerFieldValue0);
      and0.and(on0);
      linkedHashSet0.stream();
      Integer integer0 = new Integer(0);
      hashMap1.put(integer0, integer0);
      WeekDay weekDay0 = new WeekDay(0, true);
      WeekDay weekDay1 = new WeekDay(0, true);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator1 = new AndDayOfWeekValueGenerator(cronField0, 316, 4, weekDay1);
      andDayOfWeekValueGenerator1.generateCandidatesNotIncludingIntervalExtremes(1, 93);
      andDayOfWeekValueGenerator1.generateCandidatesNotIncludingIntervalExtremes(0, 0);
      andDayOfWeekValueGenerator1.generatePreviousValue(0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 6, 0, false);
      ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);
      And and1 = validationFieldExpressionVisitor0.visit(and0);
      and0.and(and1);
      SpecialChar specialChar0 = SpecialChar.LW;
      linkedHashSet0.add(specialChar0);
      FieldConstraints fieldConstraints1 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints1);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator0 = new AndDayOfWeekValueGenerator(cronField0, 0, 0, (WeekDay) null);
      CronField.createFieldComparator();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-3368));
      On on0 = new On(integerFieldValue0);
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on1 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      and0.and(on1);
      // Undeclared exception!
      try { 
        andDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(0, 0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator0 = new AndDayOfWeekValueGenerator(cronField0, 0, 1, (WeekDay) null);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1);
      SpecialChar specialChar0 = SpecialChar.NONE;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      and0.and(on0);
      // Undeclared exception!
      try { 
        andDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.mapper.ConstantsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      SpecialChar specialChar0 = SpecialChar.LW;
      linkedHashSet0.add(specialChar0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      Integer integer0 = new Integer(0);
      hashMap0.put((String) null, integer0);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator0 = new AndDayOfWeekValueGenerator(cronField0, 0, 0, (WeekDay) null);
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      On on0 = new On(integerFieldValue0);
      andDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes((-12), 1);
      FieldExpression fieldExpression0 = fieldExpressionVisitorAdaptor0.visit(on0);
      fieldExpression0.and(on0);
      and0.and(fieldExpression0);
      linkedHashSet0.stream();
      and0.asString();
      andDayOfWeekValueGenerator0.isMatch(1);
      // Undeclared exception!
      try { 
        andDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(0, (-12));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 3, 3, true);
      WeekDay weekDay0 = new WeekDay(1, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      SpecialChar specialChar0 = SpecialChar.HASH;
      linkedHashSet0.add(specialChar0);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator0 = new AndDayOfWeekValueGenerator(cronField0, 1538, 1, weekDay0);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator1 = new AndDayOfWeekValueGenerator(cronField0, 802, 1891, weekDay0);
      int int0 = andDayOfWeekValueGenerator1.generatePreviousValue(3);
      assertEquals(0, int0);
      
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator2 = new AndDayOfWeekValueGenerator(cronField0, 0, 802, weekDay0);
      WeekDay weekDay1 = new WeekDay(3, true);
      List<Integer> list0 = andDayOfWeekValueGenerator2.generateCandidates(1543, 1803);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator3 = new AndDayOfWeekValueGenerator(cronField0, (-104), 0, weekDay0);
      List<Integer> list1 = andDayOfWeekValueGenerator2.generateCandidatesNotIncludingIntervalExtremes(0, 1);
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      SpecialChar specialChar0 = SpecialChar.LW;
      boolean boolean0 = linkedHashSet0.add(specialChar0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      Integer integer0 = new Integer(0);
      hashMap0.put((String) null, integer0);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator0 = new AndDayOfWeekValueGenerator(cronField0, 0, 0, (WeekDay) null);
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      On on0 = new On(integerFieldValue0);
      On on1 = (On)fieldExpressionVisitorAdaptor0.visit(on0);
      And and1 = on1.and(on0);
      WeekDay weekDay0 = new WeekDay(8, false);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator1 = new AndDayOfWeekValueGenerator(cronField0, (-1), 0, weekDay0);
      andDayOfWeekValueGenerator1.generateCandidatesNotIncludingIntervalExtremes(1125, 0);
      andDayOfWeekValueGenerator0.generateNextValue(0);
      On on2 = (On)fieldExpressionVisitorAdaptor0.visit(on1);
      andDayOfWeekValueGenerator1.matchesFieldExpressionClass(on2);
      boolean boolean1 = andDayOfWeekValueGenerator1.matchesFieldExpressionClass(and1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 3, 3, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(3, false);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator0 = new AndDayOfWeekValueGenerator(cronField0, 3, 3, weekDay0);
      andDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(3, 1);
      boolean boolean0 = andDayOfWeekValueGenerator0.isMatch((-20));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      SpecialChar specialChar0 = SpecialChar.L;
      linkedHashSet0.add(specialChar0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator0 = new AndDayOfWeekValueGenerator(cronField0, 0, 0, (WeekDay) null);
      CronField.createFieldComparator();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-3368));
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      and0.and(on0);
      // Undeclared exception!
      try { 
        andDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(0, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      SpecialChar specialChar0 = SpecialChar.LW;
      linkedHashSet0.add(specialChar0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator0 = new AndDayOfWeekValueGenerator(cronField0, (-1), 0, (WeekDay) null);
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      CronField.createFieldComparator();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(316);
      On on0 = new On(integerFieldValue0);
      SpecialChar specialChar1 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar1);
      On on1 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      fieldExpressionVisitorAdaptor0.visit(on1);
      And and1 = and0.and(on1);
      linkedHashSet0.stream();
      andDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(0, (-2568));
      and1.asString();
      andDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(0, 0);
      int int0 = andDayOfWeekValueGenerator0.generatePreviousValue((-80));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      SpecialChar specialChar0 = SpecialChar.LW;
      linkedHashSet0.add(specialChar0);
      int int0 = 0;
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator0 = new AndDayOfWeekValueGenerator(cronField0, 0, 0, (WeekDay) null);
      FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      On on0 = new On(integerFieldValue0);
      FieldExpression fieldExpression0 = fieldExpressionVisitorAdaptor0.visit(on0);
      and0.and(fieldExpression0);
      linkedHashSet0.stream();
      int int1 = 0;
      and0.asString();
      // Undeclared exception!
      try { 
        andDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(0, (-1));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      SpecialChar specialChar0 = SpecialChar.LW;
      linkedHashSet0.add(specialChar0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator0 = new AndDayOfWeekValueGenerator(cronField0, 0, 0, (WeekDay) null);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-3368));
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      and0.and(on0);
      List<Integer> list0 = andDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(0, 0);
      assertFalse(list0.contains((-3368)));
      
      int int0 = andDayOfWeekValueGenerator0.generateNextValue(2167);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 3, 3, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(3, false);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator0 = new AndDayOfWeekValueGenerator(cronField0, 3, 3, weekDay0);
      boolean boolean0 = andDayOfWeekValueGenerator0.isMatch(1);
      assertFalse(boolean0);
      
      int int0 = andDayOfWeekValueGenerator0.generatePreviousValue(1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 3, 3, true);
      WeekDay weekDay0 = new WeekDay(1, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator0 = new AndDayOfWeekValueGenerator(cronField0, 1538, 1, weekDay0);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator1 = new AndDayOfWeekValueGenerator(cronField0, 802, 1891, weekDay0);
      andDayOfWeekValueGenerator1.generatePreviousValue(3);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator2 = new AndDayOfWeekValueGenerator(cronField0, 0, 802, weekDay0);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator3 = new AndDayOfWeekValueGenerator(cronField0, 802, 2618, weekDay0);
      andDayOfWeekValueGenerator3.generateNextValue(0);
      int int0 = andDayOfWeekValueGenerator2.generateNextValue(0);
      int int1 = andDayOfWeekValueGenerator3.generatePreviousValue(2735);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 3, 3, true);
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(1891, true);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator0 = null;
      try {
        andDayOfWeekValueGenerator0 = new AndDayOfWeekValueGenerator(cronField0, 802, 1538, weekDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CronField does not belong to day of week
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      FieldExpression fieldExpression0 = FieldExpression.questionMark();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(2769, true);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator0 = null;
      try {
        andDayOfWeekValueGenerator0 = new AndDayOfWeekValueGenerator(cronField0, (-2784), 2769, weekDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FieldExpression does not match required class
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 3, 3, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(3, false);
      AndDayOfWeekValueGenerator andDayOfWeekValueGenerator0 = null;
      try {
        andDayOfWeekValueGenerator0 = new AndDayOfWeekValueGenerator(cronField0, 3, 3, weekDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CronField does not belong to day of week
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }
}
