/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:29:44 GMT 2022
 */

package com.cronutils.model.time.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.field.CronField;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.And;
import com.cronutils.model.field.expression.Every;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import com.cronutils.model.time.generator.NullFieldValueGenerator;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FieldValueGenerator_ESTest extends FieldValueGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      And and0 = new And();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-3836));
      Every every0 = new Every(and0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-3836), (-3836), true);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      NullFieldValueGenerator nullFieldValueGenerator0 = new NullFieldValueGenerator(cronField0);
      List<Integer> list0 = nullFieldValueGenerator0.generateCandidates((-3836), 1209);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      And and0 = new And();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-3836));
      Every every0 = new Every(and0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-3836), (-3836), true);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      NullFieldValueGenerator nullFieldValueGenerator0 = new NullFieldValueGenerator(cronField0);
      boolean boolean0 = nullFieldValueGenerator0.isMatch((-3836));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-1), (-1), true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      NullFieldValueGenerator nullFieldValueGenerator0 = new NullFieldValueGenerator(cronField0);
      try { 
        nullFieldValueGenerator0.generatePreviousValue((-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.NullFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      NullFieldValueGenerator nullFieldValueGenerator0 = new NullFieldValueGenerator(cronField0);
      try { 
        nullFieldValueGenerator0.generateNextValue(2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.NullFieldValueGenerator", e);
      }
  }
}
