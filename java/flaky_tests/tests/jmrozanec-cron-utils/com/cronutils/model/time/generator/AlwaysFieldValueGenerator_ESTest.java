/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:13:04 GMT 2022
 */

package com.cronutils.model.time.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.field.CronField;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.And;
import com.cronutils.model.field.expression.FieldExpression;
import com.cronutils.model.field.expression.On;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import com.cronutils.model.time.generator.AlwaysFieldValueGenerator;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AlwaysFieldValueGenerator_ESTest extends AlwaysFieldValueGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 814, 814, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator(cronField0);
      boolean boolean0 = alwaysFieldValueGenerator0.matchesFieldExpressionClass(fieldExpression0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-410), 909, true);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      On on0 = new On(integerFieldValue0);
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator(cronField0);
      boolean boolean0 = alwaysFieldValueGenerator0.matchesFieldExpressionClass(on0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, false);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator(cronField0);
      int int0 = alwaysFieldValueGenerator0.generatePreviousValue(815);
      assertEquals(814, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-410), 909, true);
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator(cronField0);
      int int0 = alwaysFieldValueGenerator0.generatePreviousValue((-1));
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, false);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator(cronField0);
      int int0 = alwaysFieldValueGenerator0.generateNextValue((-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-410), 909, true);
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator(cronField0);
      int int0 = alwaysFieldValueGenerator0.generateNextValue(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-475), (-475), true);
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator(cronField0);
      List<Integer> list0 = alwaysFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes((-475), 2247);
      assertEquals(2721, list0.size());
      assertFalse(list0.contains((-475)));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = null;
      try {
        alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator((CronField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CronField must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>(1121);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1121, 1121, false);
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = null;
      try {
        alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator(cronField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FieldExpression does not match required class
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-410), 909, true);
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator(cronField0);
      boolean boolean0 = alwaysFieldValueGenerator0.isMatch(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.HOUR;
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-293), 0, false);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator(cronField0);
      boolean boolean0 = alwaysFieldValueGenerator0.isMatch(8);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 814, 814, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator(cronField0);
      boolean boolean0 = alwaysFieldValueGenerator0.isMatch(26);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2073), (-2073), true);
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator(cronField0);
      // Undeclared exception!
      alwaysFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes((-2147454063), (-1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.HOUR;
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-293), 0, false);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator(cronField0);
      List<Integer> list0 = alwaysFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes((-132), (-559));
      assertFalse(list0.contains(0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, false);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator(cronField0);
      int int0 = alwaysFieldValueGenerator0.generatePreviousValue(1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.HOUR;
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-293), 0, false);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator(cronField0);
      try { 
        alwaysFieldValueGenerator0.generatePreviousValue((-2106));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.AlwaysFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 27, 814, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator(cronField0);
      int int0 = alwaysFieldValueGenerator0.generateNextValue((-3391));
      assertEquals((-3390), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, false);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator(cronField0);
      try { 
        alwaysFieldValueGenerator0.generateNextValue(785);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.AlwaysFieldValueGenerator", e);
      }
  }
}
