/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:02:33 GMT 2022
 */

package com.cronutils.model.time.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.field.CronField;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.And;
import com.cronutils.model.field.expression.Every;
import com.cronutils.model.field.expression.FieldExpression;
import com.cronutils.model.field.expression.On;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import com.cronutils.model.field.value.SpecialCharFieldValue;
import com.cronutils.model.time.generator.OnDayOfMonthValueGenerator;
import java.time.DateTimeException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OnDayOfMonthValueGenerator_ESTest extends OnDayOfMonthValueGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, false);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(5);
      SpecialChar specialChar0 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 29, 6);
      int int0 = onDayOfMonthValueGenerator0.generatePreviousValue(29);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 7, 7, true);
      SpecialChar specialChar0 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(7);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 16, 5);
      int int0 = onDayOfMonthValueGenerator0.generatePreviousValue(7);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, false);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(5);
      SpecialChar specialChar0 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 772, 3);
      int int0 = onDayOfMonthValueGenerator0.generatePreviousValue(2176);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 7, (-1634), true);
      SpecialChar specialChar0 = SpecialChar.LW;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 3, 1);
      boolean boolean0 = onDayOfMonthValueGenerator0.isMatch(2036);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(7);
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 7, 7, true);
      SpecialChar specialChar0 = SpecialChar.LW;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 3, 1);
      try { 
        onDayOfMonthValueGenerator0.generateNextValue(31);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.OnDayOfMonthValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(7);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-23), 3, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 2, 1656);
      boolean boolean0 = onDayOfMonthValueGenerator0.matchesFieldExpressionClass(on0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(7);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 2184, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 0, 0);
      FieldExpression fieldExpression0 = FieldExpression.always();
      boolean boolean0 = onDayOfMonthValueGenerator0.matchesFieldExpressionClass(fieldExpression0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, false);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      IntegerFieldValue integerFieldValue1 = new IntegerFieldValue(3250);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue1);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, (-2218), 3);
      int int0 = onDayOfMonthValueGenerator0.generatePreviousValue((-2774));
      assertEquals((-3219), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      SpecialChar specialChar0 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 0, 0);
      // Undeclared exception!
      try { 
        onDayOfMonthValueGenerator0.isMatch(0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      SpecialChar specialChar0 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 0, 0);
      // Undeclared exception!
      try { 
        onDayOfMonthValueGenerator0.generatePreviousValue(0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 8, 8, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 8, 8);
      onDayOfMonthValueGenerator0.cronField = null;
      // Undeclared exception!
      try { 
        onDayOfMonthValueGenerator0.generatePreviousValue(8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.OnDayOfMonthValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, true);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);
      SpecialChar specialChar0 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0);
      Every every0 = new Every(integerFieldValue0);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      CronField cronField1 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField1, 2, (-821));
      onDayOfMonthValueGenerator0.cronField = cronField0;
      // Undeclared exception!
      try { 
        onDayOfMonthValueGenerator0.generatePreviousValue((-2902));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.cronutils.model.field.expression.Every cannot be cast to class com.cronutils.model.field.expression.On (com.cronutils.model.field.expression.Every and com.cronutils.model.field.expression.On are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7dac0b92)
         //
         verifyException("com.cronutils.model.time.generator.OnDayOfMonthValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, false);
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 0, 0);
      // Undeclared exception!
      try { 
        onDayOfMonthValueGenerator0.generateNextValue(0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = null;
      try {
        onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator((CronField) null, 6, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CronField must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 5, 5, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = null;
      try {
        onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FieldExpression does not match required class
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 7, (-1634), true);
      SpecialChar specialChar0 = SpecialChar.LW;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 3, 1);
      int int0 = onDayOfMonthValueGenerator0.generateNextValue((-1));
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 12, 12, false);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(12);
      SpecialChar specialChar0 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 12, 12);
      try { 
        onDayOfMonthValueGenerator0.generatePreviousValue(12);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.OnDayOfMonthValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, false);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(5);
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 2, 2);
      boolean boolean0 = onDayOfMonthValueGenerator0.isMatch((-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(7);
      On on0 = new On(integerFieldValue0);
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, linkedHashSet0, 2, (-1863), true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, (-1863), 4);
      boolean boolean0 = onDayOfMonthValueGenerator0.isMatch(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      SpecialChar specialChar0 = SpecialChar.LW;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 8, 8, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 8, 8);
      try { 
        onDayOfMonthValueGenerator0.generatePreviousValue(8);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.OnDayOfMonthValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 6, 6, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 6, 6);
      boolean boolean0 = onDayOfMonthValueGenerator0.isMatch(30);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 45, 6, false);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 6, 6);
      try { 
        onDayOfMonthValueGenerator0.generateNextValue(45);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.OnDayOfMonthValueGenerator", e);
      }
  }
}
