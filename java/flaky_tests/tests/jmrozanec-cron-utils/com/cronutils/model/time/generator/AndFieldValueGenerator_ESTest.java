/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 23:48:25 GMT 2022
 */

package com.cronutils.model.time.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.field.CronField;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.And;
import com.cronutils.model.field.expression.Between;
import com.cronutils.model.field.expression.Every;
import com.cronutils.model.field.expression.FieldExpression;
import com.cronutils.model.field.expression.On;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import com.cronutils.model.field.value.SpecialCharFieldValue;
import com.cronutils.model.time.generator.AndFieldValueGenerator;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AndFieldValueGenerator_ESTest extends AndFieldValueGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1858);
      SpecialChar specialChar0 = SpecialChar.HASH;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      And and0 = on0.and(on0);
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, Integer.MIN_VALUE, 1858, false);
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      int int0 = andFieldValueGenerator0.generatePreviousValue(4520);
      assertEquals(1858, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, (-3587), false);
      And and0 = new And();
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      boolean boolean0 = andFieldValueGenerator0.matchesFieldExpressionClass(and0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.QUESTION_MARK;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1858);
      Every every0 = new Every(integerFieldValue0);
      And and0 = on0.and(every0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-1369), 1858, false);
      CronFieldName cronFieldName0 = CronFieldName.HOUR;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      boolean boolean0 = andFieldValueGenerator0.matchesFieldExpressionClass(every0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(9);
      SpecialChar specialChar0 = SpecialChar.QUESTION_MARK;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      Between between0 = new Between(integerFieldValue0, specialCharFieldValue0);
      And and0 = on0.and(between0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 9, 9, false);
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      boolean boolean0 = andFieldValueGenerator0.isMatch(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.MINUTE;
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-8), (-8), true);
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      boolean boolean0 = andFieldValueGenerator0.isMatch((-8));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.QUESTION_MARK;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1867);
      Every every0 = new Every(integerFieldValue0);
      And and0 = on0.and(every0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1867, 1867, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      int int0 = andFieldValueGenerator0.generatePreviousValue(1867);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      And and0 = new And();
      FieldExpression fieldExpression0 = FieldExpression.always();
      and0.and(fieldExpression0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 498, 498, true);
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      int int0 = andFieldValueGenerator0.generateNextValue(1);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.MINUTE;
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-8), (-8), true);
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      List<Integer> list0 = andFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes((-8), (-8));
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      and0.and((FieldExpression) null);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1863, 1863, false);
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      // Undeclared exception!
      try { 
        andFieldValueGenerator0.isMatch(875);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // FieldExpression must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 4314, 4314, true);
      and0.and(and0);
      CronFieldName cronFieldName0 = CronFieldName.MINUTE;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      // Undeclared exception!
      try { 
        andFieldValueGenerator0.isMatch(4314);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FieldExpression class com.cronutils.model.field.expression.And not supported!
         //
         verifyException("com.cronutils.model.time.generator.AndFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      and0.and((FieldExpression) null);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1863, 1863, false);
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      // Undeclared exception!
      try { 
        andFieldValueGenerator0.generatePreviousValue(490);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // FieldExpression must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      and0.and(and0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 544, 544, true);
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      // Undeclared exception!
      try { 
        andFieldValueGenerator0.generatePreviousValue(498);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FieldExpression class com.cronutils.model.field.expression.And not supported!
         //
         verifyException("com.cronutils.model.time.generator.AndFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.QUESTION_MARK;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1836);
      Every every0 = new Every(integerFieldValue0);
      And and0 = on0.and(every0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1836, 1836, true);
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      CronField cronField1 = new CronField(cronFieldName0, on0, fieldConstraints0);
      andFieldValueGenerator0.cronField = cronField1;
      // Undeclared exception!
      try { 
        andFieldValueGenerator0.generatePreviousValue(1836);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.QUESTION_MARK;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      Every every0 = new Every(integerFieldValue0);
      And and0 = on0.and(every0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1167, 1793, false);
      CronFieldName cronFieldName0 = CronFieldName.HOUR;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      // Undeclared exception!
      try { 
        andFieldValueGenerator0.generatePreviousValue(1167);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.cronutils.model.time.generator.EveryFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1);
      SpecialChar specialChar0 = SpecialChar.QUESTION_MARK;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      Between between0 = new Between(integerFieldValue0, specialCharFieldValue0);
      And and0 = on0.and(between0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, 0, false);
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      // Undeclared exception!
      andFieldValueGenerator0.generateNextValue(Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-16), (-16), false);
      and0.and((FieldExpression) null);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      // Undeclared exception!
      try { 
        andFieldValueGenerator0.generateNextValue(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // FieldExpression must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 488, 488, true);
      and0.and(and0);
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      // Undeclared exception!
      try { 
        andFieldValueGenerator0.generateNextValue(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FieldExpression class com.cronutils.model.field.expression.And not supported!
         //
         verifyException("com.cronutils.model.time.generator.AndFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1833, 1833, false);
      CronFieldName cronFieldName0 = CronFieldName.MINUTE;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2450);
      On on0 = new On(integerFieldValue0);
      CronField cronField1 = new CronField(cronFieldName0, on0, fieldConstraints0);
      andFieldValueGenerator0.cronField = cronField1;
      // Undeclared exception!
      try { 
        andFieldValueGenerator0.generateNextValue(1833);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      And and0 = new And();
      And and1 = and0.and((FieldExpression) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2079, 2079, false);
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      CronField cronField0 = new CronField(cronFieldName0, and1, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      // Undeclared exception!
      try { 
        andFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(1827, 2079);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // FieldExpression must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      Every every0 = new Every(integerFieldValue0);
      And and0 = on0.and(every0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-122), 0, false);
      CronFieldName cronFieldName0 = CronFieldName.MINUTE;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      // Undeclared exception!
      try { 
        andFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes((-122), 1842);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.cronutils.model.time.generator.EveryFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AndFieldValueGenerator andFieldValueGenerator0 = null;
      try {
        andFieldValueGenerator0 = new AndFieldValueGenerator((CronField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CronField must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, 1, false);
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      FieldExpression fieldExpression0 = FieldExpression.questionMark();
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = null;
      try {
        andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FieldExpression does not match required class
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.QUESTION_MARK;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1858);
      Every every0 = new Every(integerFieldValue0);
      And and0 = on0.and(every0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-1369), 1858, false);
      CronFieldName cronFieldName0 = CronFieldName.HOUR;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      try { 
        andFieldValueGenerator0.generateNextValue(969);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.AndFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.QUESTION_MARK;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-2860));
      Every every0 = new Every(integerFieldValue0);
      And and0 = on0.and(every0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 1867, true);
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      int int0 = andFieldValueGenerator0.generateNextValue((-3561));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      and0.and(and0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 541, 541, true);
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      // Undeclared exception!
      try { 
        andFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(498, 498);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FieldExpression class com.cronutils.model.field.expression.And not supported!
         //
         verifyException("com.cronutils.model.time.generator.AndFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.LW;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(Integer.MIN_VALUE);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, Integer.MIN_VALUE, (-1315), false);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      And and0 = on0.and(between0);
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      // Undeclared exception!
      andFieldValueGenerator0.generatePreviousValue(2060);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.MINUTE;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2044);
      On on0 = new On(integerFieldValue0);
      Every every0 = new Every(integerFieldValue0);
      And and0 = on0.and(every0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2044, 2044, true);
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      List<Integer> list0 = andFieldValueGenerator0.generateCandidates(2044, 435);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(2044));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      And and0 = new And();
      FieldExpression fieldExpression0 = FieldExpression.always();
      And and1 = and0.and(fieldExpression0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1832, 1832, true);
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      CronField cronField0 = new CronField(cronFieldName0, and1, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      List<Integer> list0 = andFieldValueGenerator0.generateCandidates((-1), (-1));
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SpecialChar specialChar0 = SpecialChar.NONE;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      FieldExpression fieldExpression0 = FieldExpression.always();
      And and0 = on0.and(fieldExpression0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 93, 3, true);
      CronFieldName cronFieldName0 = CronFieldName.HOUR;
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      try { 
        andFieldValueGenerator0.generatePreviousValue((-1871));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.AndFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      And and0 = new And();
      FieldExpression fieldExpression0 = FieldExpression.always();
      And and1 = and0.and(fieldExpression0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1827, 1827, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      CronField cronField0 = new CronField(cronFieldName0, and1, fieldConstraints0);
      AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);
      andFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(17, 1827);
      // Undeclared exception!
      andFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(17, 1827);
  }
}
