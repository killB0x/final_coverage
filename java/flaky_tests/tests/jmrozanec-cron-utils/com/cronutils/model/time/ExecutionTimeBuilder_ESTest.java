/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 23:46:39 GMT 2022
 */

package com.cronutils.model.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.Cron;
import com.cronutils.model.field.CronField;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.And;
import com.cronutils.model.field.expression.Between;
import com.cronutils.model.field.expression.Every;
import com.cronutils.model.field.expression.FieldExpression;
import com.cronutils.model.field.expression.On;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import com.cronutils.model.field.value.SpecialCharFieldValue;
import com.cronutils.model.time.ExecutionTimeBuilder;
import java.util.HashMap;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExecutionTimeBuilder_ESTest extends ExecutionTimeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      CronFieldName cronFieldName0 = CronFieldName.HOUR;
      FieldExpression fieldExpression0 = FieldExpression.questionMark();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, 1, true);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      // Undeclared exception!
      try { 
        executionTimeBuilder0.forHoursMatching(cronField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values must not be empty
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1);
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2838), 1, false);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      ExecutionTimeBuilder executionTimeBuilder1 = executionTimeBuilder0.forYearsMatching(cronField0);
      assertSame(executionTimeBuilder0, executionTimeBuilder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, false);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      ExecutionTimeBuilder executionTimeBuilder1 = executionTimeBuilder0.forMonthsMatching(cronField0);
      assertSame(executionTimeBuilder1, executionTimeBuilder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldExpression fieldExpression0 = FieldExpression.questionMark();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1893, 2099, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      ExecutionTimeBuilder executionTimeBuilder1 = executionTimeBuilder0.forDaysOfYearMatching(cronField0);
      assertSame(executionTimeBuilder0, executionTimeBuilder1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, false);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      ExecutionTimeBuilder executionTimeBuilder1 = executionTimeBuilder0.forDaysOfWeekMatching(cronField0);
      assertSame(executionTimeBuilder1, executionTimeBuilder0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1421, 1970, true);
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      ExecutionTimeBuilder executionTimeBuilder1 = executionTimeBuilder0.forDaysOfMonthMatching(cronField0);
      assertSame(executionTimeBuilder0, executionTimeBuilder1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      // Undeclared exception!
      try { 
        executionTimeBuilder0.forYearsMatching((CronField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.ExecutionTimeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      // Undeclared exception!
      try { 
        executionTimeBuilder0.forSecondsMatching((CronField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.ExecutionTimeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2447, 2447, true);
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      // Undeclared exception!
      try { 
        executionTimeBuilder0.forSecondsMatching(cronField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid argument! Expected CronField instance for field MONTH but found SECOND
         //
         verifyException("com.cronutils.model.time.ExecutionTimeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      // Undeclared exception!
      try { 
        executionTimeBuilder0.forMonthsMatching((CronField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.ExecutionTimeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      Every every0 = new Every(integerFieldValue0);
      SpecialChar specialChar0 = SpecialChar.LW;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0);
      And and0 = every0.and(on0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 1, true);
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      // Undeclared exception!
      try { 
        executionTimeBuilder0.forMonthsMatching(cronField0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.cronutils.model.time.generator.EveryFieldValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      // Undeclared exception!
      try { 
        executionTimeBuilder0.forMinutesMatching((CronField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.ExecutionTimeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2447, 2447, true);
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      // Undeclared exception!
      try { 
        executionTimeBuilder0.forMinutesMatching(cronField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid argument! Expected CronField instance for field MONTH but found MINUTE
         //
         verifyException("com.cronutils.model.time.ExecutionTimeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      // Undeclared exception!
      try { 
        executionTimeBuilder0.forHoursMatching((CronField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.ExecutionTimeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      // Undeclared exception!
      try { 
        executionTimeBuilder0.forDaysOfYearMatching((CronField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.ExecutionTimeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      // Undeclared exception!
      try { 
        executionTimeBuilder0.forDaysOfWeekMatching((CronField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.ExecutionTimeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      // Undeclared exception!
      try { 
        executionTimeBuilder0.forDaysOfMonthMatching((CronField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.ExecutionTimeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, false);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      // Undeclared exception!
      try { 
        executionTimeBuilder0.forDaysOfWeekMatching(cronField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid argument! Expected CronField instance for field MONTH but found DAY_OF_WEEK
         //
         verifyException("com.cronutils.model.time.ExecutionTimeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      CronFieldName cronFieldName0 = CronFieldName.MINUTE;
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-1), (-1), true);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      // Undeclared exception!
      try { 
        executionTimeBuilder0.forMonthsMatching(cronField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid argument! Expected CronField instance for field MINUTE but found MONTH
         //
         verifyException("com.cronutils.model.time.ExecutionTimeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      CronFieldName cronFieldName0 = CronFieldName.SECOND;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1689, 1689, false);
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      executionTimeBuilder0.forSecondsMatching(cronField0);
      // Undeclared exception!
      try { 
        executionTimeBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.ExecutionTimeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      // Undeclared exception!
      try { 
        executionTimeBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.ExecutionTimeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      CronFieldName cronFieldName0 = CronFieldName.MINUTE;
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-6), 0, true);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      // Undeclared exception!
      try { 
        executionTimeBuilder0.forDaysOfYearMatching(cronField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid argument! Expected CronField instance for field MINUTE but found DAY_OF_YEAR
         //
         verifyException("com.cronutils.model.time.ExecutionTimeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, false);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      // Undeclared exception!
      try { 
        executionTimeBuilder0.forYearsMatching(cronField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid argument! Expected CronField instance for field MONTH but found YEAR
         //
         verifyException("com.cronutils.model.time.ExecutionTimeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      CronFieldName cronFieldName0 = CronFieldName.MINUTE;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, 1, false);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1);
      Between between0 = new Between(integerFieldValue0, integerFieldValue0);
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      ExecutionTimeBuilder executionTimeBuilder1 = executionTimeBuilder0.forMinutesMatching(cronField0);
      assertSame(executionTimeBuilder0, executionTimeBuilder1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExecutionTimeBuilder executionTimeBuilder0 = new ExecutionTimeBuilder((Cron) null);
      CronFieldName cronFieldName0 = CronFieldName.MONTH;
      FieldExpression fieldExpression0 = FieldExpression.questionMark();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-219), 1, true);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      // Undeclared exception!
      try { 
        executionTimeBuilder0.forDaysOfMonthMatching(cronField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid argument! Expected CronField instance for field MONTH but found DAY_OF_MONTH
         //
         verifyException("com.cronutils.model.time.ExecutionTimeBuilder", e);
      }
  }
}
