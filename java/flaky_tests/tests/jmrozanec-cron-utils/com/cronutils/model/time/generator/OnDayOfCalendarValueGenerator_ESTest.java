/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:31:24 GMT 2022
 */

package com.cronutils.model.time.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.model.field.CronField;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.On;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import com.cronutils.model.field.value.SpecialCharFieldValue;
import com.cronutils.model.time.generator.OnDayOfMonthValueGenerator;
import java.time.DateTimeException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OnDayOfCalendarValueGenerator_ESTest extends OnDayOfCalendarValueGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2888), 1, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, (-1926), 1);
      List<Integer> list0 = onDayOfMonthValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(0, 31);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 0, 0);
      // Undeclared exception!
      try { 
        onDayOfMonthValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(1, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 1, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 1, 1);
      List<Integer> list0 = onDayOfMonthValueGenerator0.generateCandidatesNotIncludingIntervalExtremes((-1008), 1684);
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(1684));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2888), 1, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, (-1926), 1);
      List<Integer> list0 = onDayOfMonthValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(30, 30);
      assertTrue(list0.isEmpty());
  }
}
