/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 23:54:06 GMT 2022
 */

package com.cronutils.model.time.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.mapper.WeekDay;
import com.cronutils.model.field.CronField;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.Every;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import com.cronutils.model.time.generator.EveryDayOfWeekValueGenerator;
import java.time.DateTimeException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EveryDayOfWeekValueGenerator_ESTest extends EveryDayOfWeekValueGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);
      assertNotNull(integerFieldValue0);
      
      Every every0 = new Every(integerFieldValue0);
      assertNotNull(every0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      WeekDay weekDay0 = new WeekDay(2, false);
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertNotNull(weekDay0);
      
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertNotNull(fieldConstraints0);
      
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(cronField0);
      
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 8, 8, weekDay0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(everyDayOfWeekValueGenerator0);
      
      List<Integer> list0 = everyDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(3, 22);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(22));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);
      assertNotNull(integerFieldValue0);
      
      Every every0 = new Every(integerFieldValue0);
      assertNotNull(every0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      WeekDay weekDay0 = new WeekDay(2, false);
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertNotNull(weekDay0);
      
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertNotNull(fieldConstraints0);
      
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(cronField0);
      
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 8, 8, weekDay0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(everyDayOfWeekValueGenerator0);
      
      try { 
        everyDayOfWeekValueGenerator0.generatePreviousValue((-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.EveryDayOfWeekValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);
      assertNotNull(integerFieldValue0);
      
      Every every0 = new Every(integerFieldValue0);
      assertNotNull(every0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      WeekDay weekDay0 = new WeekDay(2, false);
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertNotNull(weekDay0);
      
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertNotNull(fieldConstraints0);
      
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(cronField0);
      
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 8, 8, weekDay0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(everyDayOfWeekValueGenerator0);
      
      List<Integer> list0 = everyDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(22, 2057);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(2));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(17);
      assertNotNull(integerFieldValue0);
      
      Every every0 = new Every(integerFieldValue0);
      assertNotNull(every0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      WeekDay weekDay0 = new WeekDay(17, false);
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(17, weekDay0.getMondayDoWValue());
      assertNotNull(weekDay0);
      
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 17, 17, true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(17, fieldConstraints0.getStartRange());
      assertEquals(17, fieldConstraints0.getEndRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertNotNull(fieldConstraints0);
      
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(17, fieldConstraints0.getStartRange());
      assertEquals(17, fieldConstraints0.getEndRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(cronField0);
      
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = null;
      try {
        everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, (-98), 8, weekDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cron Expression for day of week has an invalid period.
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Every every0 = new Every((IntegerFieldValue) null);
      assertNotNull(every0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      WeekDay weekDay0 = new WeekDay(7, false);
      assertEquals(7, weekDay0.getMondayDoWValue());
      assertFalse(weekDay0.isFirstDayZero());
      assertNotNull(weekDay0);
      
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 7, 7, false);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(fieldConstraints0.isStrictRange());
      assertEquals(7, fieldConstraints0.getStartRange());
      assertEquals(7, fieldConstraints0.getEndRange());
      assertNotNull(fieldConstraints0);
      
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(fieldConstraints0.isStrictRange());
      assertEquals(7, fieldConstraints0.getStartRange());
      assertEquals(7, fieldConstraints0.getEndRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(cronField0);
      
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 7, 7, weekDay0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(7, weekDay0.getMondayDoWValue());
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(fieldConstraints0.isStrictRange());
      assertEquals(7, fieldConstraints0.getStartRange());
      assertEquals(7, fieldConstraints0.getEndRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(everyDayOfWeekValueGenerator0);
      
      // Undeclared exception!
      everyDayOfWeekValueGenerator0.generatePreviousValue(Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Every every0 = new Every((IntegerFieldValue) null);
      assertNotNull(every0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      WeekDay weekDay0 = new WeekDay(2, false);
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertNotNull(weekDay0);
      
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, false);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertFalse(fieldConstraints0.isStrictRange());
      assertNotNull(fieldConstraints0);
      
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertFalse(fieldConstraints0.isStrictRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(cronField0);
      
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 2, 2, weekDay0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertFalse(fieldConstraints0.isStrictRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(everyDayOfWeekValueGenerator0);
      
      // Undeclared exception!
      everyDayOfWeekValueGenerator0.generateNextValue(Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);
      assertNotNull(integerFieldValue0);
      
      Every every0 = new Every(integerFieldValue0);
      assertNotNull(every0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      WeekDay weekDay0 = new WeekDay(2, false);
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertFalse(weekDay0.isFirstDayZero());
      assertNotNull(weekDay0);
      
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, false);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertFalse(fieldConstraints0.isStrictRange());
      assertNotNull(fieldConstraints0);
      
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertFalse(fieldConstraints0.isStrictRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(cronField0);
      
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 2, 2, weekDay0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertFalse(fieldConstraints0.isStrictRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(everyDayOfWeekValueGenerator0);
      
      // Undeclared exception!
      everyDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(Integer.MIN_VALUE, (-4114));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Every every0 = new Every((IntegerFieldValue) null);
      assertNotNull(every0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>(2);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      WeekDay weekDay0 = new WeekDay(2, true);
      assertTrue(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertNotNull(weekDay0);
      
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 261, 5428, true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(5428, fieldConstraints0.getEndRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(261, fieldConstraints0.getStartRange());
      assertNotNull(fieldConstraints0);
      
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(5428, fieldConstraints0.getEndRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(261, fieldConstraints0.getStartRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(cronField0);
      
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 408, 2, weekDay0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(19);
      assertNotNull(integerFieldValue0);
      
      Every every0 = new Every(integerFieldValue0);
      assertNotNull(every0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      WeekDay weekDay0 = new WeekDay(19, false);
      assertEquals(19, weekDay0.getMondayDoWValue());
      assertFalse(weekDay0.isFirstDayZero());
      assertNotNull(weekDay0);
      
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 19, 19, false);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(19, fieldConstraints0.getStartRange());
      assertFalse(fieldConstraints0.isStrictRange());
      assertEquals(19, fieldConstraints0.getEndRange());
      assertNotNull(fieldConstraints0);
      
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(19, fieldConstraints0.getStartRange());
      assertFalse(fieldConstraints0.isStrictRange());
      assertEquals(19, fieldConstraints0.getEndRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(cronField0);
      
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = null;
      try {
        everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 19, 19, weekDay0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 19
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Every every0 = new Every((IntegerFieldValue) null);
      assertNotNull(every0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, false);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertNotNull(fieldConstraints0);
      
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(cronField0);
      
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = null;
      try {
        everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 2, 2, (WeekDay) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.mapper.ConstantsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WeekDay weekDay0 = new WeekDay(2, true);
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertTrue(weekDay0.isFirstDayZero());
      assertNotNull(weekDay0);
      
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = null;
      try {
        everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator((CronField) null, 2, 2, weekDay0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CronField must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Every every0 = new Every((IntegerFieldValue) null);
      assertNotNull(every0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      WeekDay weekDay0 = new WeekDay(1, true);
      assertEquals(1, weekDay0.getMondayDoWValue());
      assertTrue(weekDay0.isFirstDayZero());
      assertNotNull(weekDay0);
      
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, (-639), true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(1, fieldConstraints0.getStartRange());
      assertEquals((-639), fieldConstraints0.getEndRange());
      assertNotNull(fieldConstraints0);
      
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(1, fieldConstraints0.getStartRange());
      assertEquals((-639), fieldConstraints0.getEndRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(cronField0);
      
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = null;
      try {
        everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, (-639), 1, weekDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Collection is empty
         //
         verifyException("java.util.EnumSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);
      assertNotNull(integerFieldValue0);
      
      Every every0 = new Every(integerFieldValue0);
      assertNotNull(every0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      WeekDay weekDay0 = new WeekDay(2, false);
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertNotNull(weekDay0);
      
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertNotNull(fieldConstraints0);
      
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(cronField0);
      
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 8, 8, weekDay0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(everyDayOfWeekValueGenerator0);
      
      boolean boolean0 = everyDayOfWeekValueGenerator0.isMatch(2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);
      assertNotNull(integerFieldValue0);
      
      Every every0 = new Every(integerFieldValue0);
      assertNotNull(every0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      WeekDay weekDay0 = new WeekDay(2, false);
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertFalse(weekDay0.isFirstDayZero());
      assertNotNull(weekDay0);
      
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertNotNull(fieldConstraints0);
      
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(cronField0);
      
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 8, 8, weekDay0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(everyDayOfWeekValueGenerator0);
      
      boolean boolean0 = everyDayOfWeekValueGenerator0.isMatch(4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);
      assertNotNull(integerFieldValue0);
      
      Every every0 = new Every(integerFieldValue0);
      assertNotNull(every0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      WeekDay weekDay0 = new WeekDay(2, false);
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertFalse(weekDay0.isFirstDayZero());
      assertNotNull(weekDay0);
      
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertNotNull(fieldConstraints0);
      
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(cronField0);
      
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 8, 8, weekDay0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(everyDayOfWeekValueGenerator0);
      
      boolean boolean0 = everyDayOfWeekValueGenerator0.isMatch(86);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);
      assertNotNull(integerFieldValue0);
      
      Every every0 = new Every(integerFieldValue0);
      assertNotNull(every0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      WeekDay weekDay0 = new WeekDay(2, false);
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertNotNull(weekDay0);
      
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertNotNull(fieldConstraints0);
      
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(cronField0);
      
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 8, 8, weekDay0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(everyDayOfWeekValueGenerator0);
      
      boolean boolean0 = everyDayOfWeekValueGenerator0.isMatch((-1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);
      assertNotNull(integerFieldValue0);
      
      Every every0 = new Every(integerFieldValue0);
      assertNotNull(every0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      WeekDay weekDay0 = new WeekDay(2, true);
      assertTrue(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertNotNull(weekDay0);
      
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertNotNull(fieldConstraints0);
      
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(cronField0);
      
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 2, 2, weekDay0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(everyDayOfWeekValueGenerator0);
      
      try { 
        everyDayOfWeekValueGenerator0.generateNextValue(35);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.EveryDayOfWeekValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);
      assertNotNull(integerFieldValue0);
      
      Every every0 = new Every(integerFieldValue0);
      assertNotNull(every0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      WeekDay weekDay0 = new WeekDay(2, true);
      assertTrue(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertNotNull(weekDay0);
      
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertNotNull(fieldConstraints0);
      
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(cronField0);
      
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 2, 2, weekDay0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(everyDayOfWeekValueGenerator0);
      
      int int0 = everyDayOfWeekValueGenerator0.generateNextValue(2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);
      assertNotNull(integerFieldValue0);
      
      Every every0 = new Every(integerFieldValue0);
      assertNotNull(every0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      WeekDay weekDay0 = new WeekDay(2, true);
      assertTrue(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertNotNull(weekDay0);
      
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertNotNull(fieldConstraints0);
      
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(cronField0);
      
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 2, 2, weekDay0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertNotNull(everyDayOfWeekValueGenerator0);
      
      List<Integer> list0 = everyDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(2, 4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(weekDay0.isFirstDayZero());
      assertEquals(2, weekDay0.getMondayDoWValue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(2, fieldConstraints0.getEndRange());
      assertEquals(2, fieldConstraints0.getStartRange());
      assertTrue(fieldConstraints0.isStrictRange());
      assertEquals(CronFieldName.DAY_OF_WEEK, cronField0.getField());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(2));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);
      Every every0 = new Every(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      WeekDay weekDay0 = new WeekDay(2, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, 2, false);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 2, 2, weekDay0);
      try { 
        everyDayOfWeekValueGenerator0.generatePreviousValue(2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.EveryDayOfWeekValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Every every0 = new Every((IntegerFieldValue) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(3);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      WeekDay weekDay0 = new WeekDay(3, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 3, 3, false);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 3, 3, weekDay0);
      List<Integer> list0 = everyDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(3, 1878);
      assertFalse(list0.contains(3));
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(8);
      Every every0 = new Every(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      WeekDay weekDay0 = new WeekDay(8, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 8, 8, true);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = null;
      try {
        everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 8, 8, weekDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cron Expression for day of week has an invalid period.
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Every every0 = new Every((IntegerFieldValue) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      WeekDay weekDay0 = new WeekDay(7, true);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 7, 7, true);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 7, 7, weekDay0);
      int int0 = everyDayOfWeekValueGenerator0.generatePreviousValue(7);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-10));
      Every every0 = new Every(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      WeekDay weekDay0 = new WeekDay(6, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 6, 6, false);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = null;
      try {
        everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 6, 6, weekDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cron Expression for day of week has an invalid period.
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }
}
