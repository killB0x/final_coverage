/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:04:03 GMT 2022
 */

package com.cronutils.model.time.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.mapper.WeekDay;
import com.cronutils.model.field.CronField;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.constraint.FieldConstraints;
import com.cronutils.model.field.expression.And;
import com.cronutils.model.field.expression.Between;
import com.cronutils.model.field.expression.Every;
import com.cronutils.model.field.expression.FieldExpression;
import com.cronutils.model.field.expression.On;
import com.cronutils.model.field.value.FieldValue;
import com.cronutils.model.field.value.IntegerFieldValue;
import com.cronutils.model.field.value.SpecialChar;
import com.cronutils.model.field.value.SpecialCharFieldValue;
import com.cronutils.model.time.generator.FieldValueGenerator;
import com.cronutils.model.time.generator.FieldValueGeneratorFactory;
import java.time.DateTimeException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FieldValueGeneratorFactory_ESTest extends FieldValueGeneratorFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldValue<And> fieldValue0 = (FieldValue<And>) mock(FieldValue.class, new ViolatedAssumptionAnswer());
      Between between0 = new Between(fieldValue0, fieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, (-755), false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(0, false);
      // Undeclared exception!
      try { 
        FieldValueGeneratorFactory.createDayOfWeekValueGeneratorInstance(cronField0, 1, 0, weekDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CronField does not belong to day of week
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-1695));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      SpecialChar specialChar0 = SpecialChar.W;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(integerFieldValue0, specialCharFieldValue0);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, (-1695), true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      // Undeclared exception!
      try { 
        FieldValueGeneratorFactory.createDayOfMonthValueGeneratorInstance(cronField0, 0, 257);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CronField does not belong to day of month
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(135);
      On on0 = new On(integerFieldValue0);
      Every every0 = new Every(integerFieldValue0);
      And and0 = on0.and(every0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 135, 135, true);
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      FieldValueGenerator fieldValueGenerator0 = FieldValueGeneratorFactory.createDayOfYearValueGeneratorInstance(cronField0, 135);
      assertNotNull(fieldValueGenerator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldValueGeneratorFactory.forCronField((CronField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.FieldValueGeneratorFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldValueGeneratorFactory.createYearValueGeneratorInstance((CronField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.FieldValueGeneratorFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, false);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      // Undeclared exception!
      try { 
        FieldValueGeneratorFactory.createYearValueGeneratorInstance(cronField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create instance for On instance with L value
         //
         verifyException("com.cronutils.model.time.generator.FieldValueGeneratorFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldValueGeneratorFactory.createDayOfYearValueGeneratorInstance((CronField) null, 35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.FieldValueGeneratorFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      FieldExpression fieldExpression0 = FieldExpression.always();
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-1));
      Every every0 = new Every(fieldExpression0, integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 3026, (-1), false);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(3026, false);
      // Undeclared exception!
      try { 
        FieldValueGeneratorFactory.createDayOfWeekValueGeneratorInstance(cronField0, 3026, (-1), weekDay0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): -1
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(1);
      Every every0 = new Every(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, (-2250), false);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(0, false);
      // Undeclared exception!
      try { 
        FieldValueGeneratorFactory.createDayOfWeekValueGeneratorInstance(cronField0, 1, 4, weekDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Collection is empty
         //
         verifyException("java.util.EnumSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldValueGeneratorFactory.createDayOfMonthValueGeneratorInstance((CronField) null, 1894, 1894);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.FieldValueGeneratorFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 457, 457, false);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      // Undeclared exception!
      try { 
        FieldValueGeneratorFactory.forCronField(cronField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create instance for On instance with L value
         //
         verifyException("com.cronutils.model.time.generator.FieldValueGeneratorFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      FieldExpression fieldExpression0 = FieldExpression.questionMark();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 5, 5, false);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      FieldValueGenerator fieldValueGenerator0 = FieldValueGeneratorFactory.forCronField(cronField0);
      assertNotNull(fieldValueGenerator0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 1, false);
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      SpecialChar specialChar0 = SpecialChar.LW;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);
      Every every0 = new Every(on0, integerFieldValue0);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      FieldValueGenerator fieldValueGenerator0 = FieldValueGeneratorFactory.forCronField(cronField0);
      assertNotNull(fieldValueGenerator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, false);
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(1, false);
      // Undeclared exception!
      try { 
        FieldValueGeneratorFactory.createDayOfWeekValueGeneratorInstance(cronField0, 710, (-2185), weekDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CronField does not belong to day of week
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      Between between0 = new Between((FieldValue<?>) null, (FieldValue<?>) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, 1, false);
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(1, false);
      // Undeclared exception!
      try { 
        FieldValueGeneratorFactory.createDayOfWeekValueGeneratorInstance(cronField0, 1, 1, weekDay0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.model.time.generator.BetweenDayOfWeekValueGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 4, 4, true);
      SpecialChar specialChar0 = SpecialChar.NONE;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      WeekDay weekDay0 = new WeekDay(1379, true);
      FieldValueGenerator fieldValueGenerator0 = FieldValueGeneratorFactory.createDayOfWeekValueGeneratorInstance(cronField0, (-534), (-1614), weekDay0);
      assertNotNull(fieldValueGenerator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.HOUR;
      FieldExpression fieldExpression0 = FieldExpression.questionMark();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>(7, 7);
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 7, 7, true);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      FieldValueGenerator fieldValueGenerator0 = FieldValueGeneratorFactory.createDayOfWeekValueGeneratorInstance(cronField0, 7, 7, (WeekDay) null);
      assertNotNull(fieldValueGenerator0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 4, 4, true);
      SpecialChar specialChar0 = SpecialChar.NONE;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      FieldValueGenerator fieldValueGenerator0 = FieldValueGeneratorFactory.createDayOfMonthValueGeneratorInstance(cronField0, 0, 1);
      assertNotNull(fieldValueGenerator0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      FieldExpression fieldExpression0 = FieldExpression.questionMark();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 5, 5, false);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      FieldValueGenerator fieldValueGenerator0 = FieldValueGeneratorFactory.createDayOfMonthValueGeneratorInstance(cronField0, 5, 5);
      assertNotNull(fieldValueGenerator0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-1));
      On on0 = new On(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-1), (-1), true);
      CronFieldName cronFieldName0 = CronFieldName.MINUTE;
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      FieldValueGenerator fieldValueGenerator0 = FieldValueGeneratorFactory.forCronField(cronField0);
      assertNotNull(fieldValueGenerator0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(545);
      Every every0 = new Every(integerFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 545, 545, false);
      CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);
      FieldValueGenerator fieldValueGenerator0 = FieldValueGeneratorFactory.createYearValueGeneratorInstance(cronField0);
      assertNotNull(fieldValueGenerator0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      Between between0 = new Between((FieldValue<?>) null, (FieldValue<?>) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1477, 1477, false);
      CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);
      FieldValueGenerator fieldValueGenerator0 = FieldValueGeneratorFactory.forCronField(cronField0);
      assertNotNull(fieldValueGenerator0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      And and0 = new And();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 0, false);
      CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);
      FieldValueGenerator fieldValueGenerator0 = FieldValueGeneratorFactory.forCronField(cronField0);
      assertNotNull(fieldValueGenerator0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;
      FieldExpression fieldExpression0 = FieldExpression.always();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 1, 1, false);
      CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);
      FieldValueGenerator fieldValueGenerator0 = FieldValueGeneratorFactory.forCronField(cronField0);
      assertNotNull(fieldValueGenerator0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      SpecialChar specialChar0 = SpecialChar.L;
      SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);
      On on0 = new On(specialCharFieldValue0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();
      FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 457, 457, true);
      CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);
      // Undeclared exception!
      try { 
        FieldValueGeneratorFactory.createDayOfYearValueGeneratorInstance(cronField0, 457);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create instance for On instance with L value
         //
         verifyException("com.cronutils.model.time.generator.FieldValueGeneratorFactory", e);
      }
  }
}
