/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:42:36 GMT 2022
 */

package com.cronutils.model.time;

import org.junit.Test;
import static org.junit.Assert.*;
import com.cronutils.model.time.NearestValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NearestValue_ESTest extends NearestValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NearestValue nearestValue0 = new NearestValue(0, 1);
      int int0 = nearestValue0.getValue();
      assertEquals(1, nearestValue0.getShifts());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NearestValue nearestValue0 = new NearestValue((-2915), (-2915));
      int int0 = nearestValue0.getValue();
      assertEquals((-2915), int0);
      assertEquals((-2915), nearestValue0.getShifts());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NearestValue nearestValue0 = new NearestValue(1, 1);
      int int0 = nearestValue0.getShifts();
      assertEquals(1, nearestValue0.getValue());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NearestValue nearestValue0 = new NearestValue((-2915), (-2915));
      int int0 = nearestValue0.getShifts();
      assertEquals((-2915), nearestValue0.getValue());
      assertEquals((-2915), int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NearestValue nearestValue0 = new NearestValue(1, 1);
      int int0 = nearestValue0.getValue();
      assertEquals(1, int0);
      assertEquals(1, nearestValue0.getShifts());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NearestValue nearestValue0 = new NearestValue(0, 0);
      int int0 = nearestValue0.getShifts();
      assertEquals(0, int0);
      assertEquals(0, nearestValue0.getValue());
  }
}
