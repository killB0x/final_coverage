/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:07:00 GMT 2022
 */

package com.cronutils.mapper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.mapper.WeekDay;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WeekDay_ESTest extends WeekDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WeekDay weekDay0 = new WeekDay(1, false);
      WeekDay weekDay1 = new WeekDay(1, true);
      int int0 = weekDay0.mapTo(1, weekDay1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WeekDay weekDay0 = new WeekDay(354, true);
      WeekDay weekDay1 = new WeekDay(0, true);
      int int0 = weekDay0.mapTo(354, weekDay1);
      assertEquals(0, weekDay1.getMondayDoWValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WeekDay weekDay0 = new WeekDay(6, false);
      weekDay0.isFirstDayZero();
      assertEquals(6, weekDay0.getMondayDoWValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WeekDay weekDay0 = new WeekDay(0, false);
      int int0 = weekDay0.getMondayDoWValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WeekDay weekDay0 = new WeekDay(983, true);
      // Undeclared exception!
      try { 
        weekDay0.mapTo(983, (WeekDay) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.mapper.WeekDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WeekDay weekDay0 = null;
      try {
        weekDay0 = new WeekDay((-1), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Monday Day of Week value must be greater or equal to zero
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WeekDay weekDay0 = new WeekDay(6, true);
      int int0 = weekDay0.getMondayDoWValue();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WeekDay weekDay0 = new WeekDay(6, true);
      weekDay0.isFirstDayZero();
      assertEquals(6, weekDay0.getMondayDoWValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WeekDay weekDay0 = new WeekDay(25, false);
      WeekDay weekDay1 = new WeekDay(0, false);
      int int0 = weekDay1.mapTo(1, weekDay0);
      assertEquals(19, int0);
      assertEquals(0, weekDay1.getMondayDoWValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WeekDay weekDay0 = new WeekDay(6, true);
      WeekDay weekDay1 = new WeekDay(6, false);
      int int0 = weekDay0.mapTo(2033, weekDay1);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WeekDay weekDay0 = new WeekDay(6, true);
      WeekDay weekDay1 = new WeekDay(6, false);
      int int0 = weekDay0.mapTo((-1509), weekDay1);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WeekDay weekDay0 = new WeekDay(6, true);
      WeekDay weekDay1 = new WeekDay(6, false);
      assertFalse(weekDay1.isFirstDayZero());
      
      int int0 = weekDay1.mapTo(6, weekDay0);
      assertEquals(6, weekDay1.getMondayDoWValue());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WeekDay weekDay0 = new WeekDay(6, true);
      int int0 = weekDay0.mapTo(6, weekDay0);
      assertEquals(6, weekDay0.getMondayDoWValue());
      assertEquals(6, int0);
      assertTrue(weekDay0.isFirstDayZero());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WeekDay weekDay0 = new WeekDay(0, false);
      WeekDay weekDay1 = new WeekDay(0, true);
      // Undeclared exception!
      try { 
        weekDay1.mapTo(0, weekDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Monday Day of Week value must be greater or equal to zero
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }
}
