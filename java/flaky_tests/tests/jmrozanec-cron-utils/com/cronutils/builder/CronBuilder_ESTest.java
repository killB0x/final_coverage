/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 23:25:20 GMT 2022
 */

package com.cronutils.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.builder.CronBuilder;
import com.cronutils.model.Cron;
import com.cronutils.model.definition.CronConstraint;
import com.cronutils.model.definition.CronDefinition;
import com.cronutils.model.definition.CronNicknames;
import com.cronutils.model.field.CronFieldName;
import com.cronutils.model.field.definition.FieldDefinition;
import com.cronutils.model.field.expression.And;
import com.cronutils.model.field.expression.FieldExpression;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CronBuilder_ESTest extends CronBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        CronBuilder.yearly((CronDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.builder.CronBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronConstraint> linkedHashSet0 = new LinkedHashSet<CronConstraint>();
      CronConstraint cronConstraint0 = mock(CronConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cronConstraint0).getDescription();
      doReturn(false).when(cronConstraint0).validate(any(com.cronutils.model.Cron.class));
      linkedHashSet0.add(cronConstraint0);
      LinkedHashSet<CronNicknames> linkedHashSet1 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet1.add(cronNicknames0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet0, linkedHashSet1, true);
      // Undeclared exception!
      try { 
        CronBuilder.yearly(cronDefinition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid cron expression: . null
         //
         verifyException("com.cronutils.model.SingleCron", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        CronBuilder.weekly((CronDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.builder.CronBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronNicknames> linkedHashSet0 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet0.add(cronNicknames0);
      LinkedHashSet<CronConstraint> linkedHashSet1 = new LinkedHashSet<CronConstraint>();
      CronConstraint cronConstraint0 = mock(CronConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cronConstraint0).getDescription();
      doReturn(false).when(cronConstraint0).validate(any(com.cronutils.model.Cron.class));
      linkedHashSet1.add(cronConstraint0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet1, linkedHashSet0, true);
      // Undeclared exception!
      try { 
        CronBuilder.weekly(cronDefinition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid cron expression: . null
         //
         verifyException("com.cronutils.model.SingleCron", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        CronBuilder.reboot((CronDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CronDefinition must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        CronBuilder.monthly((CronDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.builder.CronBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronConstraint> linkedHashSet0 = new LinkedHashSet<CronConstraint>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      LinkedHashSet<CronNicknames> linkedHashSet1 = new LinkedHashSet<CronNicknames>();
      CronConstraint cronConstraint0 = mock(CronConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cronConstraint0).getDescription();
      doReturn(false).when(cronConstraint0).validate(any(com.cronutils.model.Cron.class));
      linkedHashSet0.add(cronConstraint0);
      linkedHashSet1.add(cronNicknames0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet0, linkedHashSet1, true);
      // Undeclared exception!
      try { 
        CronBuilder.monthly(cronDefinition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid cron expression: . null
         //
         verifyException("com.cronutils.model.SingleCron", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        CronBuilder.midnight((CronDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.builder.CronBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronConstraint> linkedHashSet0 = new LinkedHashSet<CronConstraint>();
      LinkedHashSet<CronNicknames> linkedHashSet1 = new LinkedHashSet<CronNicknames>();
      CronConstraint cronConstraint0 = mock(CronConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cronConstraint0).getDescription();
      doReturn(false).when(cronConstraint0).validate(any(com.cronutils.model.Cron.class));
      linkedHashSet0.add(cronConstraint0);
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet1.add(cronNicknames0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet0, linkedHashSet1, true);
      // Undeclared exception!
      try { 
        CronBuilder.midnight(cronDefinition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid cron expression: . null
         //
         verifyException("com.cronutils.model.SingleCron", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CronBuilder cronBuilder0 = CronBuilder.cron((CronDefinition) null);
      // Undeclared exception!
      try { 
        cronBuilder0.instance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CronDefinition must not be null
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      LinkedHashSet<CronNicknames> linkedHashSet0 = new LinkedHashSet<CronNicknames>();
      linkedHashSet0.add(cronNicknames0);
      LinkedHashSet<CronConstraint> linkedHashSet1 = new LinkedHashSet<CronConstraint>();
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet1, linkedHashSet0, true);
      CronConstraint cronConstraint0 = mock(CronConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cronConstraint0).getDescription();
      doReturn(false).when(cronConstraint0).validate(any(com.cronutils.model.Cron.class));
      linkedHashSet1.add(cronConstraint0);
      CronBuilder cronBuilder0 = CronBuilder.cron(cronDefinition0);
      // Undeclared exception!
      try { 
        cronBuilder0.instance();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid cron expression: . null
         //
         verifyException("com.cronutils.model.SingleCron", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        CronBuilder.hourly((CronDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.builder.CronBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronNicknames> linkedHashSet0 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet0.add(cronNicknames0);
      LinkedHashSet<CronConstraint> linkedHashSet1 = new LinkedHashSet<CronConstraint>();
      CronConstraint cronConstraint0 = mock(CronConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cronConstraint0).getDescription();
      doReturn(false).when(cronConstraint0).validate(any(com.cronutils.model.Cron.class));
      linkedHashSet1.add(cronConstraint0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet1, linkedHashSet0, true);
      // Undeclared exception!
      try { 
        CronBuilder.hourly(cronDefinition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid cron expression: . null
         //
         verifyException("com.cronutils.model.SingleCron", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        CronBuilder.daily((CronDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.builder.CronBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronNicknames> linkedHashSet0 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet0.add(cronNicknames0);
      LinkedHashSet<CronConstraint> linkedHashSet1 = new LinkedHashSet<CronConstraint>();
      CronConstraint cronConstraint0 = mock(CronConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cronConstraint0).getDescription();
      doReturn(false).when(cronConstraint0).validate(any(com.cronutils.model.Cron.class));
      linkedHashSet1.add(cronConstraint0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet1, linkedHashSet0, true);
      // Undeclared exception!
      try { 
        CronBuilder.daily(cronDefinition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid cron expression: . null
         //
         verifyException("com.cronutils.model.SingleCron", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        CronBuilder.annually((CronDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.builder.CronBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronNicknames> linkedHashSet0 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet0.add(cronNicknames0);
      LinkedHashSet<CronConstraint> linkedHashSet1 = new LinkedHashSet<CronConstraint>();
      CronConstraint cronConstraint0 = mock(CronConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cronConstraint0).getDescription();
      doReturn(false).when(cronConstraint0).validate(any(com.cronutils.model.Cron.class));
      linkedHashSet1.add(cronConstraint0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet1, linkedHashSet0, true);
      // Undeclared exception!
      try { 
        CronBuilder.annually(cronDefinition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid cron expression: . null
         //
         verifyException("com.cronutils.model.SingleCron", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CronBuilder cronBuilder0 = CronBuilder.cron((CronDefinition) null);
      FieldExpression fieldExpression0 = FieldExpression.questionMark();
      CronFieldName cronFieldName0 = CronFieldName.YEAR;
      // Undeclared exception!
      try { 
        cronBuilder0.addField(cronFieldName0, fieldExpression0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // CronBuilder not initialized.
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronNicknames> linkedHashSet0 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet0.add(cronNicknames0);
      LinkedHashSet<CronConstraint> linkedHashSet1 = new LinkedHashSet<CronConstraint>();
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet1, linkedHashSet0, true);
      Cron cron0 = CronBuilder.daily(cronDefinition0);
      assertNotNull(cron0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronConstraint> linkedHashSet0 = new LinkedHashSet<CronConstraint>();
      LinkedHashSet<CronNicknames> linkedHashSet1 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet1.add(cronNicknames0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet0, linkedHashSet1, true);
      Cron cron0 = CronBuilder.yearly(cronDefinition0);
      assertNotNull(cron0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronConstraint> linkedHashSet0 = new LinkedHashSet<CronConstraint>();
      LinkedHashSet<CronNicknames> linkedHashSet1 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet1.add(cronNicknames0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet0, linkedHashSet1, true);
      CronBuilder cronBuilder0 = CronBuilder.cron(cronDefinition0);
      Cron cron0 = cronBuilder0.instance();
      assertNotNull(cron0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronConstraint> linkedHashSet0 = new LinkedHashSet<CronConstraint>();
      LinkedHashSet<CronNicknames> linkedHashSet1 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet1.add(cronNicknames0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet0, linkedHashSet1, true);
      Cron cron0 = CronBuilder.hourly(cronDefinition0);
      assertNotNull(cron0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronNicknames> linkedHashSet0 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet0.add(cronNicknames0);
      LinkedHashSet<CronConstraint> linkedHashSet1 = new LinkedHashSet<CronConstraint>();
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet1, linkedHashSet0, true);
      Cron cron0 = CronBuilder.weekly(cronDefinition0);
      assertNotNull(cron0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronConstraint> linkedHashSet0 = new LinkedHashSet<CronConstraint>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      LinkedHashSet<CronNicknames> linkedHashSet1 = new LinkedHashSet<CronNicknames>();
      linkedHashSet1.add(cronNicknames0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet0, linkedHashSet1, true);
      Cron cron0 = CronBuilder.monthly(cronDefinition0);
      assertNotNull(cron0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CronBuilder cronBuilder0 = CronBuilder.cron((CronDefinition) null);
      And and0 = new And();
      // Undeclared exception!
      try { 
        cronBuilder0.withMinute(and0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // CronBuilder not initialized.
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CronBuilder cronBuilder0 = CronBuilder.cron((CronDefinition) null);
      And and0 = new And();
      // Undeclared exception!
      try { 
        cronBuilder0.withMonth(and0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // CronBuilder not initialized.
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CronBuilder cronBuilder0 = CronBuilder.cron((CronDefinition) null);
      // Undeclared exception!
      try { 
        cronBuilder0.withDoM((FieldExpression) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // CronBuilder not initialized.
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronConstraint> linkedHashSet0 = new LinkedHashSet<CronConstraint>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      LinkedHashSet<CronNicknames> linkedHashSet1 = new LinkedHashSet<CronNicknames>();
      linkedHashSet1.add(cronNicknames0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet0, linkedHashSet1, true);
      Cron cron0 = CronBuilder.midnight(cronDefinition0);
      assertNotNull(cron0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronConstraint> linkedHashSet0 = new LinkedHashSet<CronConstraint>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      LinkedHashSet<CronNicknames> linkedHashSet1 = new LinkedHashSet<CronNicknames>();
      linkedHashSet1.add(cronNicknames0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet0, linkedHashSet1, true);
      CronBuilder cronBuilder0 = CronBuilder.cron(cronDefinition0);
      // Undeclared exception!
      try { 
        cronBuilder0.withDoW((FieldExpression) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cron field definition does not exist: DAY_OF_WEEK
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CronBuilder cronBuilder0 = CronBuilder.cron((CronDefinition) null);
      // Undeclared exception!
      try { 
        cronBuilder0.withSecond((FieldExpression) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // CronBuilder not initialized.
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CronBuilder cronBuilder0 = CronBuilder.cron((CronDefinition) null);
      FieldExpression fieldExpression0 = FieldExpression.questionMark();
      // Undeclared exception!
      try { 
        cronBuilder0.withYear(fieldExpression0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // CronBuilder not initialized.
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CronBuilder cronBuilder0 = CronBuilder.cron((CronDefinition) null);
      // Undeclared exception!
      try { 
        cronBuilder0.withHour((FieldExpression) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // CronBuilder not initialized.
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CronBuilder cronBuilder0 = CronBuilder.cron((CronDefinition) null);
      // Undeclared exception!
      try { 
        cronBuilder0.withDoY((FieldExpression) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // CronBuilder not initialized.
         //
         verifyException("com.cronutils.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronConstraint> linkedHashSet0 = new LinkedHashSet<CronConstraint>();
      LinkedHashSet<CronNicknames> linkedHashSet1 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet1.add(cronNicknames0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet0, linkedHashSet1, false);
      Cron cron0 = CronBuilder.reboot(cronDefinition0);
      assertEquals("@reboot", cron0.asString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<FieldDefinition> linkedList0 = new LinkedList<FieldDefinition>();
      LinkedHashSet<CronConstraint> linkedHashSet0 = new LinkedHashSet<CronConstraint>();
      LinkedHashSet<CronNicknames> linkedHashSet1 = new LinkedHashSet<CronNicknames>();
      CronNicknames cronNicknames0 = CronNicknames.REBOOT;
      linkedHashSet1.add(cronNicknames0);
      CronDefinition cronDefinition0 = new CronDefinition(linkedList0, linkedHashSet0, linkedHashSet1, true);
      Cron cron0 = CronBuilder.annually(cronDefinition0);
      assertNotNull(cron0);
  }
}
