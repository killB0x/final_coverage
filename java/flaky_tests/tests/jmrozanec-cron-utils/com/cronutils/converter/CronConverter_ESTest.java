/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 00:48:28 GMT 2022
 */

package com.cronutils.converter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cronutils.converter.CalendarToCronTransformer;
import com.cronutils.converter.CronConverter;
import com.cronutils.converter.CronToCalendarTransformer;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CronConverter_ESTest extends CronConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CronToCalendarTransformer cronToCalendarTransformer0 = new CronToCalendarTransformer();
      CalendarToCronTransformer calendarToCronTransformer0 = new CalendarToCronTransformer();
      CronConverter cronConverter0 = new CronConverter(cronToCalendarTransformer0, calendarToCronTransformer0);
      CronConverter cronConverter1 = cronConverter0.using("");
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds((-1), (-1), (-1));
      CronConverter cronConverter2 = cronConverter1.from(zoneOffset0);
      CronConverter cronConverter3 = cronConverter2.to(zoneOffset0);
      assertSame(cronConverter3, cronConverter1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CalendarToCronTransformer calendarToCronTransformer0 = new CalendarToCronTransformer();
      CronConverter cronConverter0 = new CronConverter((CronToCalendarTransformer) null, calendarToCronTransformer0);
      CronConverter cronConverter1 = cronConverter0.using("p=5$j=w'Br8=S");
      String string0 = cronConverter1.convert();
      assertEquals("p=5$j=w'Br8=S", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CronToCalendarTransformer cronToCalendarTransformer0 = new CronToCalendarTransformer();
      CalendarToCronTransformer calendarToCronTransformer0 = new CalendarToCronTransformer();
      CronConverter cronConverter0 = new CronConverter(cronToCalendarTransformer0, calendarToCronTransformer0);
      // Undeclared exception!
      try { 
        cronConverter0.using((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.converter.CronConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CronToCalendarTransformer cronToCalendarTransformer0 = new CronToCalendarTransformer();
      CalendarToCronTransformer calendarToCronTransformer0 = new CalendarToCronTransformer();
      CronConverter cronConverter0 = new CronConverter(cronToCalendarTransformer0, calendarToCronTransformer0);
      CronConverter cronConverter1 = cronConverter0.using("");
      String string0 = cronConverter1.convert();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CronToCalendarTransformer cronToCalendarTransformer0 = new CronToCalendarTransformer();
      CalendarToCronTransformer calendarToCronTransformer0 = new CalendarToCronTransformer();
      CronConverter cronConverter0 = new CronConverter(cronToCalendarTransformer0, calendarToCronTransformer0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds((-1), (-1), (-1));
      // Undeclared exception!
      try { 
        cronConverter0.from(zoneOffset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.converter.BaseCronTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CronToCalendarTransformer cronToCalendarTransformer0 = new CronToCalendarTransformer();
      CalendarToCronTransformer calendarToCronTransformer0 = new CalendarToCronTransformer();
      CronConverter cronConverter0 = new CronConverter(cronToCalendarTransformer0, calendarToCronTransformer0);
      String string0 = cronConverter0.convert();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CalendarToCronTransformer calendarToCronTransformer0 = new CalendarToCronTransformer();
      CronToCalendarTransformer cronToCalendarTransformer0 = new CronToCalendarTransformer();
      CronConverter cronConverter0 = new CronConverter(cronToCalendarTransformer0, calendarToCronTransformer0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      // Undeclared exception!
      try { 
        cronConverter0.to(zoneOffset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cronutils.converter.CronConverter", e);
      }
  }
}
