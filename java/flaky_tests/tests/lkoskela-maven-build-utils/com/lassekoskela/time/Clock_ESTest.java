/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 18:12:10 GMT 2022
 */

package com.lassekoskela.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lassekoskela.time.Clock;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Clock_ESTest extends Clock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Clock.freeze();
      Clock.advance(3236L);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      long long0 = Clock.now();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      long long0 = Clock.now();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        Clock.advance(1L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Advancing time is not supported by com.lassekoskela.time.Clock$SystemClock
         //
         verifyException("com.lassekoskela.time.Clock$TimeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Clock.reset();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Clock clock0 = new Clock();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Clock.freeze();
      long long0 = Clock.now();
      assertEquals(1392409281320L, long0);
  }
}
