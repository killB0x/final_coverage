/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 18:08:03 GMT 2022
 */

package com.lassekoskela.maven.buildevents;

import org.junit.Test;
import static org.junit.Assert.*;
import com.lassekoskela.maven.buildevents.BuildStep;
import com.lassekoskela.time.Duration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BuildStep_ESTest extends BuildStep_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BuildStep buildStep0 = new BuildStep("com.lassekoskela.time.Duration", "q", "/", "QA!i6d3~Qo?%^bdrHC", (String) null);
      String string0 = buildStep0.toString();
      assertEquals("BuildStep(com.lassekoskela.time.Duration/q//:QA!i6d3~Qo?%^bdrHC/null)", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BuildStep buildStep0 = new BuildStep("?`dV]\"l", "?`dV]\"l", "?`dV]\"l", "?`dV]\"l", "?`dV]\"l");
      buildStep0.end();
      Duration duration0 = buildStep0.duration();
      assertEquals(1.39240928132E9, duration0.inSeconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BuildStep buildStep0 = new BuildStep("scHC@Y/SfFX$_w7", "scHC@Y/SfFX$_w7", "", "", "scHC@Y/SfFX$_w7");
      buildStep0.start();
      Duration duration0 = buildStep0.duration();
      assertEquals((-1392409281320L), duration0.inMillis());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BuildStep buildStep0 = new BuildStep("q", "q", "com.lassekoskela.time.Duration", "q", "-#~bge>?\"S");
      Object object0 = new Object();
      boolean boolean0 = buildStep0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BuildStep buildStep0 = new BuildStep("q", "q", "com.lassekoskela.time.Duration", "q", "-#~bge>?\"S");
      boolean boolean0 = buildStep0.equals(buildStep0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BuildStep buildStep0 = new BuildStep((String) null, (String) null, (String) null, (String) null, (String) null);
      boolean boolean0 = buildStep0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BuildStep buildStep0 = new BuildStep("q", "q", "q", "q", "q");
      Duration duration0 = buildStep0.duration();
      assertEquals(0L, duration0.inMillis());
  }
}
