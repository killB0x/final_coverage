/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 15:07:55 GMT 2022
 */

package com.hanframework.kit.date;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hanframework.kit.date.DatePatternEnum;
import java.text.ParseException;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatePatternEnum_ESTest extends DatePatternEnum_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DatePatternEnum[] datePatternEnumArray0 = DatePatternEnum.values();
      assertEquals(21, datePatternEnumArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DatePatternEnum datePatternEnum0 = DatePatternEnum.valueOf("DATE_TIME_MS_PATTERN");
      assertEquals(0, datePatternEnum0.getIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DatePatternEnum datePatternEnum0 = DatePatternEnum.valueOf("ONLY_YEAR_PATTERN");
      assertEquals("yyyy", datePatternEnum0.getPattern());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DatePatternEnum datePatternEnum0 = DatePatternEnum.ONLY_DAY_PATTERN;
      Date date0 = datePatternEnum0.parse("2.r1[");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DatePatternEnum datePatternEnum0 = DatePatternEnum.ONLY_MINUTE_PATTERN;
      int int0 = datePatternEnum0.getIndex();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatePatternEnum datePatternEnum0 = DatePatternEnum.ZN_MONTH_PATTERN;
      try { 
        datePatternEnum0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatePatternEnum datePatternEnum0 = DatePatternEnum.DATE_TIME_MS_PATTERN;
      DateTimeFormatter dateTimeFormatter0 = datePatternEnum0.getFormatter();
      assertNotNull(dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatePatternEnum datePatternEnum0 = DatePatternEnum.DATE_TIME_MS_PATTERN;
      String string0 = datePatternEnum0.getPattern();
      assertEquals("yyyy-MM-dd HH:mm:ss.SSS", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatePatternEnum datePatternEnum0 = DatePatternEnum.ZN_YEAR_ONLY_PATTERN;
      // Undeclared exception!
      try { 
        datePatternEnum0.format((Date) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DatePatternEnum datePatternEnum0 = DatePatternEnum.DATE_TIME_MS_PATTERN;
      String string0 = datePatternEnum0.getDesc();
      assertEquals("\u5E74-\u6708-\u65E5 \u65F6:\u5206:\u79D2.\u6BEB\u79D2", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatePatternEnum datePatternEnum0 = DatePatternEnum.MINUTE_PATTERN;
      String string0 = datePatternEnum0.format();
      assertEquals("2014-02-14 20:21", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatePatternEnum datePatternEnum0 = DatePatternEnum.DATE_TIME_MS_PATTERN;
      int int0 = datePatternEnum0.getIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      DatePatternEnum datePatternEnum0 = DatePatternEnum.GAP_LESS_DATE_PATTERN;
      String string0 = datePatternEnum0.format((Date) mockDate0);
      assertEquals("20140214", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DatePatternEnum datePatternEnum0 = DatePatternEnum.DATE_TIME_MS_PATTERN;
      try { 
        datePatternEnum0.parse("DATE_PATTERN");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"DATE_PATTERN\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }
}
