/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 15:08:57 GMT 2022
 */

package com.hanframework.kit.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hanframework.kit.text.Ansi;
import com.hanframework.kit.text.AnsiRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AnsiRenderer_ESTest extends AnsiRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = AnsiRenderer.render(")UKP}&%D@|!K_r~FqS");
      assertEquals(")UKP}&%D@|!K_r~FqS", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = AnsiRenderer.render("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnsiRenderer.render((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hanframework.kit.text.AnsiRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = AnsiRenderer.test("nS2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = AnsiRenderer.test("@|");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = AnsiRenderer.test((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AnsiRenderer.Code ansiRenderer_Code0 = AnsiRenderer.Code.BLINK_SLOW;
      boolean boolean0 = ansiRenderer_Code0.isAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AnsiRenderer.Code ansiRenderer_Code0 = AnsiRenderer.Code.ITALIC;
      boolean boolean0 = ansiRenderer_Code0.isBackground();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AnsiRenderer.Code ansiRenderer_Code0 = AnsiRenderer.Code.ITALIC;
      boolean boolean0 = ansiRenderer_Code0.isColor();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AnsiRenderer.Code ansiRenderer_Code0 = AnsiRenderer.Code.FG_RED;
      // Undeclared exception!
      try { 
        ansiRenderer_Code0.getAttribute();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.hanframework.kit.text.Ansi$Color cannot be cast to class com.hanframework.kit.text.Ansi$Attribute (com.hanframework.kit.text.Ansi$Color and com.hanframework.kit.text.Ansi$Attribute are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @95a8fb1)
         //
         verifyException("com.hanframework.kit.text.AnsiRenderer$Code", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AnsiRenderer.Code ansiRenderer_Code0 = AnsiRenderer.Code.RED;
      Ansi.Color ansi_Color0 = ansiRenderer_Code0.getColor();
      assertEquals(31, ansi_Color0.fg());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AnsiRenderer ansiRenderer0 = new AnsiRenderer();
  }
}
