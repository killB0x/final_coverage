/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 14:42:49 GMT 2022
 */

package com.hanframework.kit.string;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hanframework.kit.string.ObjectTools;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectTools_ESTest extends ObjectTools_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectTools.hashCode((-1425L));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1175);
      int int0 = ObjectTools.nullSafeHashCode(shortArray0);
      assertEquals((-958), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = 2245L;
      int int0 = ObjectTools.nullSafeHashCode(longArray0);
      assertEquals((-837294988), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      int int0 = ObjectTools.nullSafeHashCode(byteArray0);
      assertEquals((-1572108040), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ObjectTools.nullSafeToString((Object) "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ObjectTools.nullSafeHashCode(booleanArray0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 32;
      intArray0[1] = 982;
      int int0 = ObjectTools.nullSafeHashCode(intArray0);
      assertEquals((-5860317), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[2] = 1.0F;
      floatArray0[3] = 84.39541F;
      floatArray0[4] = (-4027.3F);
      floatArray0[6] = 1.0F;
      int int0 = ObjectTools.nullSafeHashCode(floatArray0);
      assertEquals((-833657965), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1610.0);
      doubleArray0[3] = 1.0;
      int int0 = ObjectTools.nullSafeHashCode(doubleArray0);
      assertEquals((-1864467321), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = 'h';
      int int0 = ObjectTools.nullSafeHashCode(charArray0);
      assertEquals((-1956177041), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ObjectTools.nullSafeToString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectTools.hashCode(true);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectTools.hashCode(false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectTools.nullSafeEquals(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectTools.nullSafeEquals((Object) null, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = ObjectTools.isEmpty((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[3] = (Object) "{false, true, false, true, true, true, true, true, false}";
      boolean boolean0 = ObjectTools.isEmpty(objectArray0[3]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = ObjectTools.isEmpty((Object) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      boolean boolean0 = ObjectTools.isCheckedException(mockRuntimeException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockError mockError0 = new MockError("/Nmuqx4");
      boolean boolean0 = ObjectTools.isCheckedException(mockError0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = ObjectTools.isCheckedException((Throwable) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ObjectTools.hashCode(0.0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ObjectTools.hashCode((-2038.0F));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = ObjectTools.nullSafeToString(shortArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = ObjectTools.nullSafeToString((short[]) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      short[] shortArray0 = new short[6];
      String string0 = ObjectTools.nullSafeToString(shortArray0);
      assertEquals("{0, 0, 0, 0, 0, 0}", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = ObjectTools.nullSafeToString(longArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = ObjectTools.nullSafeToString((long[]) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long[] longArray0 = new long[2];
      String string0 = ObjectTools.nullSafeToString(longArray0);
      assertEquals("{0, 0}", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = ObjectTools.nullSafeToString(intArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = ObjectTools.nullSafeToString((int[]) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[9];
      String string0 = ObjectTools.nullSafeToString(intArray0);
      assertEquals("{0, 0, 0, 0, 0, 0, 0, 0, 0}", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = ObjectTools.nullSafeToString(floatArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = ObjectTools.nullSafeToString((float[]) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      float[] floatArray0 = new float[8];
      String string0 = ObjectTools.nullSafeToString(floatArray0);
      assertEquals("{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      String string0 = ObjectTools.nullSafeToString(doubleArray0);
      assertEquals("{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = ObjectTools.nullSafeToString((double[]) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = ObjectTools.nullSafeToString(doubleArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = ObjectTools.nullSafeToString(charArray0);
      assertEquals("{'\u0000', '\u0000', '\u0000', '\u0000'}", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = ObjectTools.nullSafeToString((char[]) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = ObjectTools.nullSafeToString(charArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = ObjectTools.nullSafeToString(byteArray0);
      assertEquals("{0, 0, 0}", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = ObjectTools.nullSafeToString((byte[]) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = ObjectTools.nullSafeToString(byteArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      String string0 = ObjectTools.nullSafeToString(booleanArray0);
      assertEquals("{false, false, false, false, false, false, false, false, false}", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = ObjectTools.nullSafeToString((boolean[]) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      String string0 = ObjectTools.nullSafeToString(booleanArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = ObjectTools.nullSafeToString(objectArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = ObjectTools.nullSafeToString((Object[]) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String string0 = ObjectTools.nullSafeToString(objectArray0);
      assertEquals("{null, null, null, null, null, null}", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = ObjectTools.nullSafeToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockError mockError0 = new MockError("");
      String string0 = ObjectTools.nullSafeClassName(mockError0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockError", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = ObjectTools.nullSafeClassName((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = ObjectTools.getDisplayString((Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ObjectTools.getDisplayString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = ObjectTools.identityToString((Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ObjectTools.identityToString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      int int0 = ObjectTools.nullSafeHashCode(booleanArray0);
      assertEquals((-1285982643), int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = ObjectTools.nullSafeHashCode((short[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      short[] shortArray0 = new short[6];
      int int0 = ObjectTools.nullSafeHashCode(shortArray0);
      assertEquals(1917558471, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = ObjectTools.nullSafeHashCode((long[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ObjectTools.nullSafeHashCode(longArray0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = ObjectTools.nullSafeHashCode((int[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = ObjectTools.nullSafeHashCode(intArray0);
      assertEquals(200404057, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = ObjectTools.nullSafeHashCode((float[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = ObjectTools.nullSafeHashCode((double[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = ObjectTools.nullSafeHashCode((char[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      char[] charArray0 = new char[8];
      int int0 = ObjectTools.nullSafeHashCode(charArray0);
      assertEquals(232720647, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = ObjectTools.nullSafeHashCode(byteArray0);
      assertEquals(217, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = ObjectTools.nullSafeHashCode((byte[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = ObjectTools.nullSafeHashCode((boolean[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = ObjectTools.nullSafeHashCode((Object[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      int int0 = ObjectTools.nullSafeHashCode(objectArray0);
      assertEquals(232720647, int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = ObjectTools.nullSafeHashCode((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Object object0 = new Object();
      int int0 = ObjectTools.nullSafeHashCode(object0);
      assertEquals(1, int0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short) (-1);
      int int1 = ObjectTools.nullSafeHashCode(objectArray0);
      assertEquals((-576625979), int1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      boolean boolean0 = ObjectTools.nullSafeEquals(0.0F, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MockError mockError0 = new MockError();
      boolean boolean0 = ObjectTools.nullSafeEquals(mockError0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockError mockError0 = new MockError("!6#~>\"9;-/za1s/8?W");
      MockError mockError1 = new MockError("", mockError0);
      boolean boolean0 = ObjectTools.nullSafeEquals(mockError1, mockError0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ObjectTools.toObjectArray(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source is not an array: java.lang.Object@6f215c0e
         //
         verifyException("com.hanframework.kit.string.ObjectTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Object[] objectArray0 = ObjectTools.toObjectArray((Object) null);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      boolean boolean0 = ObjectTools.containsElement(objectArray0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectTools.containsElement((Object[]) null, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ObjectTools.containsElement(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MockError mockError0 = new MockError();
      boolean boolean0 = ObjectTools.isEmpty((Object) mockError0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      boolean boolean0 = ObjectTools.isNotEmpty((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      boolean boolean0 = ObjectTools.isNotEmpty(".G");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ObjectTools.isEmpty(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ObjectTools.isEmpty(objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      boolean boolean0 = ObjectTools.isEmpty((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      MockError mockError0 = new MockError();
      boolean boolean0 = ObjectTools.isArray(mockError0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      boolean boolean0 = ObjectTools.isArray((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      MockError mockError0 = new MockError();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0);
      MockThrowable mockThrowable0 = new MockThrowable(mockRuntimeException0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      boolean boolean0 = ObjectTools.isCompatibleWithThrowsClause(mockThrowable0, classArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<Error>[] classArray0 = (Class<Error>[]) Array.newInstance(Class.class, 1);
      Class<Error> class0 = Error.class;
      classArray0[0] = class0;
      boolean boolean0 = ObjectTools.isCompatibleWithThrowsClause(mockThrowable0, classArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      boolean boolean0 = ObjectTools.isCompatibleWithThrowsClause(mockThrowable0, (Class[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      MockError mockError0 = new MockError();
      Class<Error>[] classArray0 = (Class<Error>[]) Array.newInstance(Class.class, 0);
      boolean boolean0 = ObjectTools.isCompatibleWithThrowsClause(mockError0, classArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      MockError mockError0 = new MockError();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0);
      MockThrowable mockThrowable0 = new MockThrowable(mockRuntimeException0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      // Undeclared exception!
      try { 
        ObjectTools.isCompatibleWithThrowsClause(mockThrowable0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hanframework.kit.string.ObjectTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ObjectTools.getIdentityHexString(object0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      ObjectTools objectTools0 = new ObjectTools();
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      float[] floatArray0 = new float[3];
      int int0 = ObjectTools.nullSafeHashCode(floatArray0);
      assertEquals(208537, int0);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ObjectTools.nullSafeHashCode(doubleArray0);
      assertEquals(208537, int0);
  }
}
