/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 15:14:32 GMT 2022
 */

package com.hanframework.kit.string;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hanframework.kit.string.Default;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Default_ESTest extends Default_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = Default.defaultValue((Object) null, object0, (Default.DefaultIF<Object>) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = Default.defaultValue(object0, object0, (Default.DefaultIF<Object>) null);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      Default.DefaultIF<Object> default_DefaultIF0 = (Default.DefaultIF<Object>) mock(Default.DefaultIF.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(default_DefaultIF0).defaultIf();
      Object object1 = Default.defaultValue(object0, (Object) null, default_DefaultIF0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object object0 = new Object();
      Default default0 = new Default();
      Class<Object> class0 = Object.class;
      Object object1 = Default.defaultValue((Object) default0, object0, class0);
      assertSame(default0, object1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object object0 = new Object();
      Default.DefaultIF<Object> default_DefaultIF0 = (Default.DefaultIF<Object>) mock(Default.DefaultIF.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(default_DefaultIF0).defaultIf();
      Object object1 = Default.defaultValue(object0, object0, default_DefaultIF0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        Default.defaultValue((Object) null, (Object) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \u53C2\u6570\u4E0D\u80FD\u90FD\u4E3A\u7A7A
         //
         verifyException("com.hanframework.kit.string.Default", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Default default0 = new Default();
      Class<Object> class0 = Object.class;
      Object object0 = Default.defaultValue((Object) null, (Object) default0, class0);
      assertSame(default0, object0);
  }
}
