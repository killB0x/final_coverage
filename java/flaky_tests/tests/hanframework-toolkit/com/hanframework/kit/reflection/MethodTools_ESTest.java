/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 15:10:01 GMT 2022
 */

package com.hanframework.kit.reflection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hanframework.kit.reflection.MethodTools;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.UndeclaredThrowableException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MethodTools_ESTest extends MethodTools_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<IllegalAccessException> class0 = IllegalAccessException.class;
      // Undeclared exception!
      try { 
        MethodTools.invokeStaticMethod(class0, (String) null, classArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodTools.findMethodByName(class0, (String) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        MethodTools.rethrowRuntimeException(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodTools.rethrowRuntimeException((Throwable) null);
        fail("Expecting exception: UndeclaredThrowableException");
      
      } catch(UndeclaredThrowableException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hanframework.kit.reflection.MethodTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        MethodTools.rethrowRuntimeException(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      try { 
        MethodTools.invokeStaticMethod(class0, "", (Object[]) null, (Class[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockIllegalAccessException0);
      // Undeclared exception!
      try { 
        MethodTools.handleInvocationTargetException(invocationTargetException0);
        fail("Expecting exception: UndeclaredThrowableException");
      
      } catch(UndeclaredThrowableException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hanframework.kit.reflection.MethodTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        MethodTools.handleInvocationTargetException(invocationTargetException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockError mockError0 = new MockError();
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockError0);
      // Undeclared exception!
      try { 
        MethodTools.handleInvocationTargetException(invocationTargetException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MethodTools methodTools0 = new MethodTools();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodTools.invoke((Method) null, (Object) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hanframework.kit.reflection.MethodTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodTools.ignoreAccessInvoke((Method) null, (Object) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hanframework.kit.reflection.MethodTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodTools.findMethodByName(class0, "kI&h{&4", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodTools.handleInvocationTargetException((InvocationTargetException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hanframework.kit.reflection.MethodTools", e);
      }
  }
}
