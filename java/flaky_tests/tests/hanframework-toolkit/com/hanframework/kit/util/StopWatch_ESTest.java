/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 15:05:39 GMT 2022
 */

package com.hanframework.kit.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hanframework.kit.util.StopWatch;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StopWatch_ESTest extends StopWatch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("; no task info kept");
      stopWatch0.start("\"Z\"Wrw");
      stopWatch0.stop();
      stopWatch0.start("2U{");
      stopWatch0.stop();
      stopWatch0.start((String) null);
      System.setCurrentTimeMillis(1090L);
      stopWatch0.stop();
      stopWatch0.toString();
      assertEquals(3, stopWatch0.getTaskCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("; no task info kept");
      stopWatch0.start("\"Z\"Wrw");
      stopWatch0.stop();
      stopWatch0.start("2U{");
      stopWatch0.stop();
      stopWatch0.start((String) null);
      System.setCurrentTimeMillis(1090L);
      stopWatch0.stop();
      stopWatch0.prettyPrint();
      assertEquals((-1392409280230L), stopWatch0.getTotalTimeMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("@kDbK7xJ|:K");
      stopWatch0.start((String) null);
      stopWatch0.stop();
      stopWatch0.start("@kDbK7xJ|:K': running time (millis) = 0");
      stopWatch0.isRunning();
      assertEquals(1, stopWatch0.getTaskCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("; no task info kept");
      stopWatch0.start("\"Z\"Wrw");
      stopWatch0.stop();
      stopWatch0.start("2U{");
      stopWatch0.stop();
      stopWatch0.start((String) null);
      System.setCurrentTimeMillis(1090L);
      stopWatch0.stop();
      double double0 = stopWatch0.getTotalTimeSeconds();
      assertEquals(3, stopWatch0.getTaskCount());
      assertEquals((-1.39240928023E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("; no task info kept");
      stopWatch0.start("\"Z\"Wrw");
      stopWatch0.stop();
      stopWatch0.start("2U{");
      stopWatch0.stop();
      stopWatch0.start((String) null);
      System.setCurrentTimeMillis(1090L);
      stopWatch0.stop();
      long long0 = stopWatch0.getTotalTimeMillis();
      assertEquals((-1.39240928023E9), stopWatch0.getTotalTimeSeconds(), 0.01);
      assertEquals((-1392409280230L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      stopWatch0.start();
      stopWatch0.stop();
      stopWatch0.getTaskInfo();
      assertEquals(1, stopWatch0.getTaskCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      stopWatch0.start();
      stopWatch0.stop();
      int int0 = stopWatch0.getTaskCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("; no task info kept");
      stopWatch0.start("\"Z\"Wrw");
      stopWatch0.stop();
      stopWatch0.start("2U{");
      stopWatch0.stop();
      stopWatch0.start((String) null);
      System.setCurrentTimeMillis(1090L);
      stopWatch0.stop();
      long long0 = stopWatch0.getLastTaskTimeMillis();
      assertEquals(3, stopWatch0.getTaskCount());
      assertEquals((-1392409280230L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("@kDbK7xJ|:K");
      stopWatch0.start((String) null);
      stopWatch0.stop();
      stopWatch0.getLastTaskName();
      assertEquals(1, stopWatch0.getTaskCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      stopWatch0.start();
      stopWatch0.stop();
      stopWatch0.getLastTaskName();
      assertEquals(1, stopWatch0.getTaskCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("; no task info kept");
      stopWatch0.start("\"Z\"Wrw");
      stopWatch0.stop();
      stopWatch0.start("2U{");
      stopWatch0.stop();
      stopWatch0.start((String) null);
      System.setCurrentTimeMillis(1090L);
      stopWatch0.stop();
      stopWatch0.getLastTaskInfo();
      assertEquals(3, stopWatch0.getTaskCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch((String) null);
      String string0 = stopWatch0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      String string0 = stopWatch0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("@kDbK7xJ|:K");
      stopWatch0.start("");
      stopWatch0.stop();
      stopWatch0.start("@kDbK7xJ|:K");
      stopWatch0.currentTaskName();
      assertEquals(1, stopWatch0.getTaskCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      stopWatch0.start("");
      String string0 = stopWatch0.currentTaskName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      stopWatch0.start();
      try { 
        stopWatch0.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't start StopWatch: it's already running
         //
         verifyException("com.hanframework.kit.util.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("%");
      stopWatch0.start();
      stopWatch0.stop();
      stopWatch0.prettyPrint("%");
      assertEquals(1, stopWatch0.getTaskCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      String string0 = stopWatch0.shortSummary("");
      assertEquals("': running time (millis) = 0", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("-f+Lr|Z=&d|O");
      StopWatch.TaskInfo[] stopWatch_TaskInfoArray0 = stopWatch0.getTaskInfo();
      assertEquals(0, stopWatch_TaskInfoArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StopWatch.TaskInfo stopWatch_TaskInfo0 = new StopWatch.TaskInfo((String) null, 0L);
      double double0 = stopWatch_TaskInfo0.getTimeSeconds();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StopWatch.TaskInfo stopWatch_TaskInfo0 = new StopWatch.TaskInfo("_", 2038L);
      long long0 = stopWatch_TaskInfo0.getTimeMillis();
      assertEquals(2038L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("; no task info kept");
      long long0 = stopWatch0.getTotalTimeMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("; no task info kept");
      double double0 = stopWatch0.getTotalTimeSeconds();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      stopWatch0.setKeepTaskList(false);
      String string0 = stopWatch0.toString();
      assertEquals("': running time (millis) = 0; no task info kept", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("");
      stopWatch0.setKeepTaskList(false);
      String string0 = stopWatch0.prettyPrint("");
      assertEquals("': running time (millis) = 0\nNo task info kept", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      String string0 = stopWatch0.shortSummary((String) null);
      assertEquals("': running time (millis) = 0", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      stopWatch0.setKeepTaskList(false);
      // Undeclared exception!
      try { 
        stopWatch0.getTaskInfo();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Task info is not being kept!
         //
         verifyException("com.hanframework.kit.util.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      try { 
        stopWatch0.getLastTaskInfo();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No tasks run: can't get last task info
         //
         verifyException("com.hanframework.kit.util.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("; no task info kept");
      stopWatch0.start("\"Z\"Wrw");
      stopWatch0.stop();
      stopWatch0.getLastTaskInfo();
      assertFalse(stopWatch0.isRunning());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      try { 
        stopWatch0.getLastTaskName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No tasks run: can't get last task name
         //
         verifyException("com.hanframework.kit.util.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("; no task info kept");
      stopWatch0.start("\"Z\"Wrw");
      stopWatch0.stop();
      stopWatch0.getLastTaskName();
      assertFalse(stopWatch0.isRunning());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      try { 
        stopWatch0.getLastTaskTimeMillis();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No tasks run: can't get last task interval
         //
         verifyException("com.hanframework.kit.util.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("; no task info kept");
      stopWatch0.start("\"Z\"Wrw");
      stopWatch0.stop();
      long long0 = stopWatch0.getLastTaskTimeMillis();
      assertEquals(1, stopWatch0.getTaskCount());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("");
      try { 
        stopWatch0.stop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't stop StopWatch: it's not running
         //
         verifyException("com.hanframework.kit.util.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("@kDbK7xJ|:K");
      stopWatch0.start("@kDbK7xJ|:K");
      try { 
        stopWatch0.start("@kDbK7xJ|:K");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't start StopWatch: it's already running
         //
         verifyException("com.hanframework.kit.util.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("; no task info kept");
      int int0 = stopWatch0.getTaskCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      stopWatch0.start();
      stopWatch0.stop();
      StopWatch.TaskInfo stopWatch_TaskInfo0 = stopWatch0.getLastTaskInfo();
      stopWatch_TaskInfo0.getTaskName();
      assertEquals(1, stopWatch0.getTaskCount());
      assertFalse(stopWatch0.isRunning());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("@kDbK7xJ|:K");
      String string0 = stopWatch0.currentTaskName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("@kDbK7xJ|:K");
      boolean boolean0 = stopWatch0.isRunning();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("");
      stopWatch0.setKeepTaskList(false);
      stopWatch0.start();
      stopWatch0.stop();
      assertEquals(1, stopWatch0.getTaskCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("; no task info kept");
      String string0 = stopWatch0.getId();
      assertEquals("; no task info kept", string0);
  }
}
