/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 14:55:17 GMT 2022
 */

package com.hanframework.kit.futrue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.hanframework.kit.futrue.DefaultEnhanceFutureListeners;
import com.hanframework.kit.futrue.DefaultEnhancePromise;
import com.hanframework.kit.futrue.EnhanceFuture;
import com.hanframework.kit.futrue.EnhanceFutureListener;
import com.hanframework.kit.futrue.Promise;
import java.lang.reflect.Array;
import java.util.concurrent.CancellationException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultEnhancePromise_ESTest extends DefaultEnhancePromise_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultEnhancePromise<CancellationException> defaultEnhancePromise0 = new DefaultEnhancePromise<CancellationException>();
      assertTrue(defaultEnhancePromise0.isCancellable());
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      try { 
        defaultEnhancePromise0.get(0L, timeUnit0);
        fail("Expecting exception: TimeoutException");
      
      } catch(TimeoutException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.hanframework.kit.futrue.AbstractEnhanceFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultEnhancePromise<CancellationException> defaultEnhancePromise0 = new DefaultEnhancePromise<CancellationException>();
      Consumer<CancellationException> consumer0 = (Consumer<CancellationException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      defaultEnhancePromise0.addSuccessListener(consumer0);
      defaultEnhancePromise0.cancel(false);
      defaultEnhancePromise0.isSuccess();
      Throwable throwable0 = defaultEnhancePromise0.cause();
      // Undeclared exception!
      try { 
        defaultEnhancePromise0.setFailure(throwable0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // complete already: com.hanframework.kit.futrue.DefaultEnhancePromise@1
         //
         verifyException("com.hanframework.kit.futrue.DefaultEnhancePromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultEnhancePromise<CancellationException> defaultEnhancePromise0 = new DefaultEnhancePromise<CancellationException>();
      DefaultEnhanceFutureListeners defaultEnhanceFutureListeners0 = null;
      defaultEnhancePromise0.addListener((DefaultEnhanceFutureListeners) null);
      CancellationException cancellationException0 = new CancellationException("com.hanframework.kit.futrue.DefaultEnhancePromise$CauseHolder");
      cancellationException0.printStackTrace();
      defaultEnhancePromise0.setSuccess(cancellationException0);
      defaultEnhancePromise0.isSuccess();
      DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>> defaultEnhancePromise1 = new DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>>();
      Consumer<DefaultEnhancePromise<CancellationException>> consumer0 = (Consumer<DefaultEnhancePromise<CancellationException>>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      defaultEnhancePromise1.addSuccessListener(consumer0);
      defaultEnhancePromise1.setSuccess(defaultEnhancePromise0);
      Consumer<DefaultEnhancePromise<CancellationException>> consumer1 = (Consumer<DefaultEnhancePromise<CancellationException>>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      defaultEnhancePromise1.addSuccessListener(consumer1);
      // Undeclared exception!
      try { 
        defaultEnhancePromise0.setSuccess((CancellationException) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // complete already: com.hanframework.kit.futrue.DefaultEnhancePromise@1
         //
         verifyException("com.hanframework.kit.futrue.DefaultEnhancePromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>> defaultEnhancePromise0 = new DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>>();
      defaultEnhancePromise0.cancel(true);
      defaultEnhancePromise0.sync();
      Consumer<DefaultEnhancePromise<CancellationException>> consumer0 = (Consumer<DefaultEnhancePromise<CancellationException>>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      defaultEnhancePromise0.addSuccessListener(consumer0);
      DefaultEnhanceFutureListeners defaultEnhanceFutureListeners0 = new DefaultEnhanceFutureListeners();
      EnhanceFutureListener<DefaultEnhancePromise<CancellationException>> enhanceFutureListener0 = (EnhanceFutureListener<DefaultEnhancePromise<CancellationException>>) mock(EnhanceFutureListener.class, new ViolatedAssumptionAnswer());
      defaultEnhanceFutureListeners0.remove(enhanceFutureListener0);
      defaultEnhancePromise0.addListener(defaultEnhanceFutureListeners0);
      Consumer<Throwable> consumer1 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      defaultEnhancePromise0.addErrorListener(consumer1);
      DefaultEnhancePromise<CancellationException> defaultEnhancePromise1 = new DefaultEnhancePromise<CancellationException>();
      defaultEnhancePromise1.isCancellable();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      defaultEnhancePromise1.await((-1L), timeUnit0);
      defaultEnhancePromise1.isDone();
      CancellationException cancellationException0 = new CancellationException("");
      cancellationException0.getCause();
      // Undeclared exception!
      try { 
        cancellationException0.addSuppressed((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot suppress a null exception.
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultEnhancePromise<CancellationException> defaultEnhancePromise0 = new DefaultEnhancePromise<CancellationException>();
      defaultEnhancePromise0.cancel(true);
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      defaultEnhancePromise0.await();
      defaultEnhancePromise0.cancel(true);
      defaultEnhancePromise0.addErrorListener(consumer0);
      defaultEnhancePromise0.isDone();
      defaultEnhancePromise0.getNow();
      DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>> defaultEnhancePromise1 = new DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>>();
      Consumer<Throwable> consumer1 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      defaultEnhancePromise1.addErrorListener(consumer1);
      Consumer<Throwable> consumer2 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      defaultEnhancePromise1.cancel(true);
      defaultEnhancePromise0.sync();
      defaultEnhancePromise1.addErrorListener(consumer2);
      Throwable throwable0 = defaultEnhancePromise0.cause();
      defaultEnhancePromise1.isCancelled();
      defaultEnhancePromise0.getNow();
      Consumer<Throwable> consumer3 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      defaultEnhancePromise0.addErrorListener(consumer3);
      defaultEnhancePromise1.cancel(false);
      EnhanceFutureListener<DefaultEnhancePromise<CancellationException>>[] enhanceFutureListenerArray0 = (EnhanceFutureListener<DefaultEnhancePromise<CancellationException>>[]) Array.newInstance(EnhanceFutureListener.class, 9);
      EnhanceFutureListener<DefaultEnhancePromise<CancellationException>> enhanceFutureListener0 = (EnhanceFutureListener<DefaultEnhancePromise<CancellationException>>) mock(EnhanceFutureListener.class, new ViolatedAssumptionAnswer());
      enhanceFutureListenerArray0[0] = enhanceFutureListener0;
      enhanceFutureListenerArray0[1] = enhanceFutureListener0;
      enhanceFutureListenerArray0[2] = enhanceFutureListener0;
      enhanceFutureListenerArray0[3] = enhanceFutureListener0;
      enhanceFutureListenerArray0[4] = enhanceFutureListener0;
      enhanceFutureListenerArray0[5] = enhanceFutureListener0;
      enhanceFutureListenerArray0[6] = enhanceFutureListener0;
      enhanceFutureListenerArray0[7] = enhanceFutureListener0;
      enhanceFutureListenerArray0[8] = enhanceFutureListener0;
      DefaultEnhanceFutureListeners defaultEnhanceFutureListeners0 = new DefaultEnhanceFutureListeners(enhanceFutureListenerArray0);
      defaultEnhancePromise0.addListener(defaultEnhanceFutureListeners0);
      // Undeclared exception!
      try { 
        defaultEnhancePromise0.setFailure(throwable0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // complete already: com.hanframework.kit.futrue.DefaultEnhancePromise@1
         //
         verifyException("com.hanframework.kit.futrue.DefaultEnhancePromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultEnhancePromise<CancellationException> defaultEnhancePromise0 = new DefaultEnhancePromise<CancellationException>();
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.printStackTrace();
      defaultEnhancePromise0.setFailure(mockThrowable0);
      defaultEnhancePromise0.await();
      defaultEnhancePromise0.sync();
      CancellationException cancellationException0 = new CancellationException();
      cancellationException0.getCause();
      cancellationException0.initCause((Throwable) null);
      // Undeclared exception!
      try { 
        defaultEnhancePromise0.setSuccess(cancellationException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // complete already: com.hanframework.kit.futrue.DefaultEnhancePromise@1
         //
         verifyException("com.hanframework.kit.futrue.DefaultEnhancePromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>> defaultEnhancePromise0 = new DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>>();
      defaultEnhancePromise0.getNow();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>> defaultEnhancePromise0 = new DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>>();
      DefaultEnhancePromise<CancellationException> defaultEnhancePromise1 = new DefaultEnhancePromise<CancellationException>();
      defaultEnhancePromise0.setSuccess(defaultEnhancePromise1);
      defaultEnhancePromise0.sync();
      defaultEnhancePromise0.sync();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultEnhancePromise<CancellationException> defaultEnhancePromise0 = new DefaultEnhancePromise<CancellationException>();
      CancellationException cancellationException0 = new CancellationException("P89$wvH[Ohzt");
      defaultEnhancePromise0.setSuccess(cancellationException0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      defaultEnhancePromise0.await(0L, timeUnit0);
      DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>> defaultEnhancePromise1 = new DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>>();
      CancellationException cancellationException1 = new CancellationException();
      defaultEnhancePromise1.setFailure(cancellationException1);
      defaultEnhancePromise0.getNow();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultEnhancePromise<CancellationException> defaultEnhancePromise0 = new DefaultEnhancePromise<CancellationException>();
      defaultEnhancePromise0.cancel(true);
      CancellationException cancellationException0 = new CancellationException("");
      cancellationException0.getSuppressed();
      cancellationException0.fillInStackTrace();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      defaultEnhancePromise0.await(3616L, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      defaultEnhancePromise0.await(1000000L, timeUnit1);
      // Undeclared exception!
      try { 
        defaultEnhancePromise0.setSuccess(cancellationException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // complete already: com.hanframework.kit.futrue.DefaultEnhancePromise@1
         //
         verifyException("com.hanframework.kit.futrue.DefaultEnhancePromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultEnhancePromise<CancellationException> defaultEnhancePromise0 = new DefaultEnhancePromise<CancellationException>();
      DefaultEnhanceFutureListeners defaultEnhanceFutureListeners0 = new DefaultEnhanceFutureListeners();
      defaultEnhancePromise0.addListener(defaultEnhanceFutureListeners0);
      assertFalse(defaultEnhancePromise0.isDone());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultEnhancePromise<CancellationException> defaultEnhancePromise0 = new DefaultEnhancePromise<CancellationException>();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = defaultEnhancePromise0.await(0L, timeUnit0);
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      defaultEnhancePromise0.addErrorListener(consumer0);
      Consumer<CancellationException> consumer1 = (Consumer<CancellationException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      defaultEnhancePromise0.addSuccessListener(consumer1);
      DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>> defaultEnhancePromise1 = new DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>>();
      boolean boolean1 = defaultEnhancePromise1.isCancelled();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultEnhancePromise<CancellationException> defaultEnhancePromise0 = new DefaultEnhancePromise<CancellationException>();
      boolean boolean0 = defaultEnhancePromise0.isDone();
      assertFalse(boolean0);
      
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      defaultEnhancePromise0.addErrorListener(consumer0);
      Consumer<Throwable> consumer1 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      defaultEnhancePromise0.addErrorListener(consumer1);
      defaultEnhancePromise0.isCancellable();
      boolean boolean1 = defaultEnhancePromise0.isSuccess();
      boolean boolean2 = defaultEnhancePromise0.isCancelled();
      assertTrue(boolean2 == boolean1);
      
      DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>> defaultEnhancePromise1 = new DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>>();
      Consumer<CancellationException> consumer2 = (Consumer<CancellationException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      defaultEnhancePromise0.addSuccessListener(consumer2);
      Consumer<DefaultEnhancePromise<CancellationException>> consumer3 = (Consumer<DefaultEnhancePromise<CancellationException>>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      defaultEnhancePromise1.addSuccessListener(consumer3);
      boolean boolean3 = defaultEnhancePromise0.isCancellable();
      assertFalse(boolean3 == boolean0);
      
      Consumer<DefaultEnhancePromise<CancellationException>> consumer4 = (Consumer<DefaultEnhancePromise<CancellationException>>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      EnhanceFuture<DefaultEnhancePromise<CancellationException>> enhanceFuture0 = defaultEnhancePromise1.addSuccessListener(consumer4);
      assertTrue(enhanceFuture0.isCancellable());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>> defaultEnhancePromise0 = new DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>>();
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      defaultEnhancePromise0.addErrorListener(consumer0);
      Consumer<Throwable> consumer1 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      defaultEnhancePromise0.addErrorListener(consumer1);
      boolean boolean0 = defaultEnhancePromise0.isSuccess();
      assertFalse(boolean0);
      
      defaultEnhancePromise0.getNow();
      assertFalse(defaultEnhancePromise0.isDone());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultEnhancePromise<CancellationException> defaultEnhancePromise0 = new DefaultEnhancePromise<CancellationException>();
      Consumer<CancellationException> consumer0 = (Consumer<CancellationException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      defaultEnhancePromise0.addSuccessListener(consumer0);
      boolean boolean0 = defaultEnhancePromise0.isCancellable();
      assertFalse(defaultEnhancePromise0.isDone());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>> defaultEnhancePromise0 = new DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>>();
      DefaultEnhanceFutureListeners defaultEnhanceFutureListeners0 = new DefaultEnhanceFutureListeners();
      defaultEnhancePromise0.addListener(defaultEnhanceFutureListeners0);
      defaultEnhancePromise0.cancel(false);
      Throwable throwable0 = defaultEnhancePromise0.cause();
      DefaultEnhancePromise<CancellationException> defaultEnhancePromise1 = new DefaultEnhancePromise<CancellationException>();
      defaultEnhancePromise1.setFailure(throwable0);
      defaultEnhancePromise1.isSuccess();
      DefaultEnhancePromise<CancellationException> defaultEnhancePromise2 = new DefaultEnhancePromise<CancellationException>();
      // Undeclared exception!
      try { 
        defaultEnhancePromise0.setSuccess(defaultEnhancePromise2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // complete already: com.hanframework.kit.futrue.DefaultEnhancePromise@1
         //
         verifyException("com.hanframework.kit.futrue.DefaultEnhancePromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultEnhancePromise<CancellationException> defaultEnhancePromise0 = new DefaultEnhancePromise<CancellationException>();
      Consumer<CancellationException> consumer0 = (Consumer<CancellationException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      defaultEnhancePromise0.addSuccessListener(consumer0);
      DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>> defaultEnhancePromise1 = new DefaultEnhancePromise<DefaultEnhancePromise<CancellationException>>();
      CancellationException cancellationException0 = new CancellationException("`'ub,}Y");
      MockThrowable mockThrowable0 = new MockThrowable("h`|f", cancellationException0);
      MockThrowable.replacement_getStackTrace(mockThrowable0);
      Throwable throwable0 = cancellationException0.initCause(mockThrowable0);
      defaultEnhancePromise1.setFailure(throwable0);
      assertTrue(defaultEnhancePromise1.isCancelled());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultEnhancePromise<CancellationException> defaultEnhancePromise0 = new DefaultEnhancePromise<CancellationException>();
      CancellationException cancellationException0 = new CancellationException("");
      Promise<CancellationException> promise0 = defaultEnhancePromise0.setSuccess(cancellationException0);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultEnhancePromise<CancellationException> defaultEnhancePromise0 = new DefaultEnhancePromise<CancellationException>();
      CancellationException cancellationException0 = new CancellationException("JGFI=-8");
      MockThrowable mockThrowable0 = new MockThrowable("com.hanframework.kit.futrue.DefaultEnhanceFutureListeners", cancellationException0);
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, "complete already: ", "`*P9$n&8Cg7e$m>", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }
}
