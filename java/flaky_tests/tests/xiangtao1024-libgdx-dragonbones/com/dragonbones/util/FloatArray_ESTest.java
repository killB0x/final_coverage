/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 03:26:04 GMT 2022
 */

package com.dragonbones.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.dragonbones.util.FloatArray;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FloatArray_ESTest extends FloatArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(0);
      floatArray0.incrementLength(0);
      assertEquals(0, floatArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(0);
      Float float0 = new Float(0.0F);
      floatArray0.pushObject(float0);
      floatArray0.setObject(1, float0);
      assertEquals(1, floatArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[] floatArray0 = new float[6];
      FloatArray floatArray1 = new FloatArray(floatArray0);
      floatArray1.set(0, 0.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray1.getLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(0);
      floatArray0.setLength(9);
      floatArray0.getObject(9);
      assertEquals(9, floatArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 7;
      FloatArray floatArray1 = new FloatArray(floatArray0, 1);
      Float float0 = floatArray1.getObject(0);
      assertEquals(1, floatArray1.getLength());
      assertEquals(7.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2232);
      FloatArray floatArray1 = new FloatArray(floatArray0, 9);
      Float float0 = floatArray1.getObject(0);
      assertEquals((-2232.0F), (float)float0, 0.01F);
      assertEquals(9, floatArray1.getLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(0);
      int int0 = floatArray0.getLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(11);
      int int0 = floatArray0.getLength();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      float[] floatArray0 = new float[1];
      FloatArray floatArray1 = new FloatArray(floatArray0, (-396));
      int int0 = floatArray1.getLength();
      assertEquals((-396), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(0);
      floatArray0.setLength(9);
      floatArray0.get(0);
      assertEquals(9, floatArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = 880.135F;
      FloatArray floatArray1 = new FloatArray(floatArray0, 1);
      float float0 = floatArray1.get(1);
      assertEquals(1, floatArray1.getLength());
      assertEquals(880.135F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-204.88939F);
      FloatArray floatArray1 = new FloatArray(floatArray0);
      float float0 = floatArray1.get(0);
      assertEquals(9, floatArray1.getLength());
      assertEquals((-204.88939F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(2305);
      floatArray0.create(16);
      assertEquals(2305, floatArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray();
      FloatArray floatArray1 = floatArray0.copy();
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray1.getLength());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      float[] floatArray0 = new float[0];
      FloatArray floatArray1 = new FloatArray(floatArray0, (-1026));
      FloatArray floatArray2 = floatArray1.copy();
      assertNotSame(floatArray2, floatArray1);
      assertEquals((-1026), floatArray2.getLength());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(false);
      // Undeclared exception!
      try { 
        floatArray0.sort((-1606), (-1606));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray();
      // Undeclared exception!
      try { 
        floatArray0.sort(1513, (-1253));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1513) > toIndex(-1253)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray();
      // Undeclared exception!
      try { 
        floatArray0.sort((-1342), (-1342));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1342
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(260);
      // Undeclared exception!
      try { 
        floatArray0.setObject(260, (Float) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.FloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(1);
      Float float0 = new Float((double) (-2217));
      // Undeclared exception!
      try { 
        floatArray0.setObject((-2217), float0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2217 out of bounds for length 1
         //
         verifyException("com.dragonbones.util.FloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(true);
      // Undeclared exception!
      try { 
        floatArray0.setLength(845);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.FloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(true);
      // Undeclared exception!
      try { 
        floatArray0.set(1026, (-1387.9465F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.FloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(true);
      // Undeclared exception!
      try { 
        floatArray0.push(1498.6803F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.FloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(false);
      // Undeclared exception!
      try { 
        floatArray0.getObject(11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.FloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      float[] floatArray0 = new float[2];
      FloatArray floatArray1 = new FloatArray(floatArray0, 0);
      // Undeclared exception!
      try { 
        floatArray1.getObject((-2338));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2338 out of bounds for length 2
         //
         verifyException("com.dragonbones.util.FloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(false);
      // Undeclared exception!
      try { 
        floatArray0.get(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.FloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray();
      // Undeclared exception!
      try { 
        floatArray0.create((-1375));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1375
         //
         verifyException("com.dragonbones.util.FloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FloatArray floatArray0 = null;
      try {
        floatArray0 = new FloatArray((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.FloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FloatArray floatArray0 = null;
      try {
        floatArray0 = new FloatArray((-1352));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1352
         //
         verifyException("com.dragonbones.util.FloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      float[] floatArray0 = new float[6];
      FloatArray floatArray1 = new FloatArray(floatArray0);
      // Undeclared exception!
      try { 
        floatArray1.get((-3361));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3361 out of bounds for length 6
         //
         verifyException("com.dragonbones.util.FloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(0);
      // Undeclared exception!
      try { 
        floatArray0.set(1543, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1543 out of bounds for length 0
         //
         verifyException("com.dragonbones.util.FloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(11);
      floatArray0.setLength((-2799));
      // Undeclared exception!
      try { 
        floatArray0.push((-2799));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2799 out of bounds for length 11
         //
         verifyException("com.dragonbones.util.FloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(17);
      floatArray0.sort(17, 17);
      assertEquals(17, floatArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray();
      // Undeclared exception!
      try { 
        floatArray0.sort((Comparator<Float>) null, (-1), (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented
         //
         verifyException("com.dragonbones.util.FloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(false);
      // Undeclared exception!
      try { 
        floatArray0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.FloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(11);
      floatArray0.push((-2799));
      assertEquals(12, floatArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(2628);
      FloatArray floatArray1 = floatArray0.copy();
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2628, floatArray1.getLength());
  }
}
