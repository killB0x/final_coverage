/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 03:27:03 GMT 2022
 */

package com.dragonbones.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.dragonbones.util.ArrayBase;
import com.dragonbones.util.IntArray;
import java.util.Comparator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntArray_ESTest extends IntArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1796);
      intArray0[1] = (-1273);
      intArray0[2] = 0;
      IntArray intArray1 = new IntArray(intArray0, 0);
      IntArray intArray2 = intArray1.copy();
      intArray2.iterator();
      intArray1.createInstance();
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-1273);
      integerArray0[1] = (Integer) (-1796);
      integerArray0[2] = (Integer) 0;
      intArray2.concat(integerArray0);
      IntArray intArray3 = intArray1.createInstance();
      intArray1.get(0);
      int int0 = 206;
      // Undeclared exception!
      try { 
        intArray3.getObject(206);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2153);
      intArray0[1] = 3763;
      intArray0[2] = 3763;
      intArray0[3] = 0;
      intArray0[4] = 778;
      intArray0[5] = 0;
      intArray0[6] = 1450;
      intArray0[7] = 3;
      IntArray intArray1 = new IntArray(intArray0, 1);
      intArray1.getObject(0);
      intArray1.get(3);
      ArrayBase<Integer> arrayBase0 = intArray1.create(3763);
      assertNotSame(intArray1, arrayBase0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntArray intArray0 = new IntArray(true);
      intArray0.createInstance();
      // Undeclared exception!
      try { 
        intArray0.setLength(2865);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntArray intArray0 = new IntArray(2374);
      intArray0.push(1);
      intArray0.incrementLength((-988));
      intArray0.getLength();
      intArray0.get(2374);
      intArray0.slice();
      intArray0.push(259);
      int int0 = (-561);
      int int1 = 2923;
      int int2 = 7;
      // Undeclared exception!
      try { 
        intArray0.sort(2923, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2923) > toIndex(7)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      assertEquals(0, intArray0.getLength());
      
      intArray0.spliterator();
      intArray0.push(0);
      intArray0.incrementLength((-1));
      intArray0.create(16);
      intArray0.getObject(0);
      intArray0.getLength();
      IntArray intArray1 = intArray0.copy();
      // Undeclared exception!
      try { 
        intArray1.set(799, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntArray intArray0 = new IntArray(true);
      // Undeclared exception!
      try { 
        intArray0.get(3262);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 4108;
      IntArray intArray0 = new IntArray(4108);
      intArray0.create(16);
      int int1 = 3260;
      intArray0.create(3260);
      IntArray intArray1 = intArray0.copy();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1));
      intArray0.indexOfObject(integer0);
      intArray1.forEach(consumer0);
      intArray1.get(1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        intArray1.sort(comparator0, 16, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntArray intArray0 = new IntArray(false);
      // Undeclared exception!
      try { 
        intArray0.set((-2150), (-2150));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      IntArray intArray1 = null;
      try {
        intArray1 = new IntArray((-500));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -500
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntArray intArray0 = new IntArray(2200);
      IntArray intArray1 = intArray0.createInstance();
      ArrayBase<Integer> arrayBase0 = intArray0.create(0);
      intArray1.getLength();
      intArray0.length();
      intArray0.sort(0, 0);
      intArray1.slice(0);
      intArray1.length();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      intArray1.forEach(consumer0);
      IntArray intArray2 = intArray1.copy();
      Integer integer0 = new Integer(1896);
      intArray2.indexOfObject(integer0);
      intArray0.size();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IntArray intArray3 = new IntArray(1);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      intArray3.concat(integerArray0);
      intArray0.set(1, (int) integerArray0[0]);
      assertFalse(intArray0.equals((Object)arrayBase0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[0];
      IntArray intArray1 = new IntArray(intArray0, 0);
      intArray1.copy();
      IntArray intArray2 = new IntArray(intArray0, 1045);
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[2] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[3] = integer2;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      Integer integer3 = new Integer((-952));
      integerArray0[6] = integer3;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      intArray1.concat(integerArray0);
      // Undeclared exception!
      try { 
        intArray1.set((-1), 704);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntArray intArray0 = new IntArray(1655);
      Integer integer0 = new Integer(2812);
      intArray0.setObject(0, integer0);
      assertEquals(1655, intArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 192;
      IntArray intArray1 = new IntArray(intArray0);
      intArray1.push((-3720));
      int int0 = (-3772);
      intArray1.push((-3720));
      IntArray intArray2 = new IntArray(intArray0, (-171));
      intArray2.getLength();
      int int1 = (-18);
      intArray1.setLength((-18));
      intArray1.setLength((-171));
      // Undeclared exception!
      try { 
        intArray2.push((-18));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -171 out of bounds for length 1
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 192;
      IntArray intArray1 = new IntArray(intArray0);
      intArray1.push((-3720));
      int int0 = (-3772);
      intArray1.push((-3720));
      IntArray intArray2 = new IntArray(intArray0, (-171));
      intArray2.getLength();
      int int1 = (-18);
      intArray1.setLength((-18));
      intArray1.setLength((-1351));
      // Undeclared exception!
      try { 
        intArray2.push((-675));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -171 out of bounds for length 1
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 192;
      intArray0[1] = 192;
      int int0 = (-1461);
      IntArray intArray1 = new IntArray(192);
      intArray1.push(0);
      int int1 = 453;
      intArray1.incrementLength(453);
      intArray1.spliterator();
      intArray1.getLength();
      int int2 = 1;
      // Undeclared exception!
      try { 
        intArray1.get((-857));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 4058;
      intArray0[1] = 0;
      intArray0[2] = 3068;
      IntArray intArray1 = new IntArray(intArray0, 3068);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 3068;
      integerArray0[1] = (Integer) 3068;
      integerArray0[3] = (Integer) 3068;
      integerArray0[4] = (Integer) 4058;
      intArray1.push(0);
      intArray1.getObject(0);
      assertEquals(3069, intArray1.getLength());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntArray intArray0 = new IntArray((int[]) null, 3);
      // Undeclared exception!
      try { 
        intArray0.getObject(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntArray intArray0 = new IntArray(2200);
      IntArray intArray1 = intArray0.createInstance();
      int int0 = 0;
      intArray0.create(0);
      intArray1.getLength();
      intArray0.length();
      intArray0.sort(0, 0);
      intArray1.slice(0);
      intArray1.length();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      intArray1.forEach(consumer0);
      IntArray intArray2 = intArray1.copy();
      Integer integer0 = new Integer(1896);
      intArray2.indexOfObject(integer0);
      intArray0.size();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      intArray0.size();
      // Undeclared exception!
      try { 
        intArray2.sort(comparator0, 0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      // Undeclared exception!
      try { 
        intArray0.create((-2282));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2282
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntArray intArray0 = new IntArray(false);
      intArray0.spliterator();
      Integer integer0 = new Integer(576);
      // Undeclared exception!
      try { 
        intArray0.setObject(1874, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      // Undeclared exception!
      try { 
        intArray0.get(3070);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      IntArray intArray1 = new IntArray(intArray0, (-1933));
      // Undeclared exception!
      try { 
        intArray1.get(2031);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 192;
      IntArray intArray0 = new IntArray();
      // Undeclared exception!
      try { 
        intArray0.sort(2488, 192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2488) > toIndex(192)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-3392);
      IntArray intArray1 = new IntArray(intArray0);
      IntArray intArray2 = intArray1.createInstance();
      intArray1.clear();
      Integer integer0 = new Integer(0);
      intArray2.indexOfObject(integer0);
      intArray2.setLength(613);
      // Undeclared exception!
      try { 
        intArray1.getObject((-1406));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 16;
      intArray0[2] = (-1300);
      intArray0[3] = (-5512);
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int0 = (-1649);
      intArray0[6] = (-1649);
      IntArray intArray1 = new IntArray(intArray0);
      IntArray intArray2 = intArray1.copy();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      intArray2.slice();
      Integer integer0 = new Integer((-5512));
      intArray2.indexOf(integer0);
      // Undeclared exception!
      try { 
        intArray2.sort(comparator0, (-1), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IntArray intArray0 = new IntArray(true);
      // Undeclared exception!
      try { 
        intArray0.sort((-751), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IntArray intArray0 = new IntArray(false);
      // Undeclared exception!
      try { 
        intArray0.push(2230);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IntArray intArray0 = new IntArray(1655);
      Integer integer0 = new Integer(2812);
      // Undeclared exception!
      try { 
        intArray0.setObject(1655, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1267);
      intArray0[2] = 0;
      int int0 = (-1);
      intArray0[3] = (-1);
      IntArray intArray1 = new IntArray(intArray0);
      intArray1.setLength((-952));
      intArray1.copy();
      // Undeclared exception!
      try { 
        intArray1.setObject((-1267), (Integer) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = (-3252);
      IntArray intArray1 = new IntArray(intArray0, (-3252));
      IntArray intArray2 = intArray1.copy();
      intArray1.clear();
      int int1 = (-784);
      // Undeclared exception!
      try { 
        intArray2.slice();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3252
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      IntArray intArray1 = intArray0.copy();
      assertEquals(0, intArray1.getLength());
      assertNotSame(intArray1, intArray0);
      
      IntArray intArray2 = intArray1.createInstance();
      // Undeclared exception!
      try { 
        intArray2.sort((-533), 514);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -533
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[0];
      IntArray intArray1 = new IntArray(intArray0);
      assertEquals(0, intArray1.getLength());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      // Undeclared exception!
      try { 
        intArray0.sort((Comparator<Integer>) null, (-3735), (-3735));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      IntArray intArray1 = new IntArray(intArray0);
      intArray1.setLength(359);
      intArray1.incrementLength(0);
      Comparator<Integer> comparator0 = null;
      // Undeclared exception!
      try { 
        intArray1.sort((Comparator<Integer>) null, 359, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1153);
      intArray0[1] = 0;
      IntArray intArray1 = new IntArray(intArray0, 1083);
      intArray1.clear();
      Consumer<Object> consumer0 = null;
      Integer integer0 = new Integer(1083);
      intArray1.pushObject(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      int int1 = 0;
      // Undeclared exception!
      try { 
        intArray1.slice((-1153), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IntArray intArray0 = new IntArray(false);
      // Undeclared exception!
      try { 
        intArray0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IntArray intArray0 = new IntArray(true);
      // Undeclared exception!
      try { 
        intArray0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      // Undeclared exception!
      try { 
        intArray0.unshiftObject((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      // Undeclared exception!
      try { 
        intArray0.set(997, (-786));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IntArray intArray0 = new IntArray(16);
      // Undeclared exception!
      try { 
        intArray0.getObject(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1880;
      IntArray intArray1 = new IntArray(intArray0, (-1));
      intArray1.length();
      int int0 = 796;
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 1880;
      integerArray0[1] = (Integer) 1880;
      integerArray0[2] = (Integer) 1880;
      integerArray0[3] = (Integer) 1880;
      // Undeclared exception!
      try { 
        intArray1.splice(1451, (-256), integerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      intArray0.clear();
      intArray0.createInstance();
      assertEquals(0, intArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      // Undeclared exception!
      try { 
        intArray0.popObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IntArray intArray0 = new IntArray(3069);
      intArray0.push(16);
      assertEquals(3070, intArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      // Undeclared exception!
      try { 
        intArray0.sort(1024, 1024);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1024
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IntArray intArray0 = new IntArray(192);
      assertEquals(192, intArray0.getLength());
      
      intArray0.create(192);
      assertEquals(192, intArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      intArray0.push(0);
      intArray0.create(1671);
      // Undeclared exception!
      try { 
        intArray0.sort(1671, 1671);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1671
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      IntArray intArray1 = intArray0.createInstance();
      assertEquals(0, intArray1.getLength());
      
      int int0 = 3570;
      // Undeclared exception!
      try { 
        intArray1.forEach((Consumer<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
