/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 03:23:32 GMT 2022
 */

package com.dragonbones.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.dragonbones.util.Array;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Array_ESTest extends Array_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 1;
      Array<Integer> array0 = new Array<Integer>(integerArray0);
      Array<Object> array1 = new Array<Object>();
      array1.setObject(int0, array0);
      assertEquals(0, array1.getLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Array<Object> array0 = new Array<Object>(0);
      array0.setLength(0);
      assertEquals(0, array0.getLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Array<Integer> array0 = new Array<Integer>(integerArray0);
      array0.pushObject(integerArray0[0]);
      array0.set(16, integerArray0[0]);
      assertEquals(7, array0.getLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Array<Integer> array0 = new Array<Integer>(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      array0.sort(comparator0, 0, 0);
      assertEquals(0, array0.getLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      Object object0 = new Object();
      array0.add(object0);
      assertEquals(1, array0.getLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      array0.getObject(9);
      assertEquals(0, array0.getLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      array0.push(array0);
      array0.getObject(0);
      assertEquals(1, array0.getLength());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Array<Object> array0 = new Array<Object>(2800);
      int int0 = array0.getLength();
      assertEquals(2800, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-3201));
      integerArray0[1] = integer0;
      Array<Integer> array0 = new Array<Integer>(integerArray0, (int) integerArray0[1]);
      int int0 = array0.getLength();
      assertEquals((-3201), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      array0.get(1);
      assertEquals(0, array0.getLength());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) array0;
      Array<Object> array1 = new Array<Object>(objectArray0, 0);
      Array array2 = (Array)array1.get(0);
      assertEquals(0, array2.getLength());
      assertNotNull(array2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      Array<Object> array1 = array0.copy();
      assertEquals(0, array1.getLength());
      assertNotSame(array1, array0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-3201));
      integerArray0[1] = integer0;
      Array<Integer> array0 = new Array<Integer>(integerArray0, (int) integerArray0[1]);
      Array<Integer> array1 = array0.copy();
      assertEquals((-3201), array1.getLength());
      assertNotSame(array1, array0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Array<Object> array0 = new Array<Object>(3294);
      // Undeclared exception!
      try { 
        array0.sort((Comparator<Object>) null, 0, 3294);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      // Undeclared exception!
      try { 
        array0.sort((Comparator<Object>) null, 2643, (-1405));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2643) > toIndex(-1405)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Array<Object> array0 = new Array<Object>(0);
      // Undeclared exception!
      try { 
        array0.setObject(0, (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Array<Integer> array0 = new Array<Integer>((Integer[]) null, (-1545));
      // Undeclared exception!
      try { 
        array0.setLength(2441);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Array<Object> array0 = new Array<Object>((Object[]) null, 9);
      // Undeclared exception!
      try { 
        array0.push((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Array<Integer> array0 = new Array<Integer>(integerArray0, (-1726));
      Integer integer0 = new Integer((-722));
      // Undeclared exception!
      try { 
        array0.push(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1726 out of bounds for length 0
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Array<Integer> array0 = new Array<Integer>((Integer[]) null, 0);
      // Undeclared exception!
      try { 
        array0.getObject(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Array<Object> array0 = new Array<Object>(0);
      // Undeclared exception!
      try { 
        array0.get(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Array<Integer> array0 = new Array<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        array0.create((-508));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -508
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Array<Object> array0 = new Array<Object>((Object[]) null, 9);
      // Undeclared exception!
      try { 
        array0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-752));
      integerArray0[0] = integer0;
      integerArray0[2] = integerArray0[0];
      Array<Integer> array0 = new Array<Integer>(integerArray0, (int) integerArray0[2]);
      // Undeclared exception!
      try { 
        array0.add(integerArray0[2]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -752 out of bounds for length 6
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Array<Object> array0 = null;
      try {
        array0 = new Array<Object>((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Array<Integer> array0 = new Array<Integer>((Integer[]) null, 2260);
      // Undeclared exception!
      try { 
        array0.get(2260);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Array<Object> array0 = new Array<Object>(0);
      int int0 = array0.getLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Array<Object> array0 = new Array<Object>((Object[]) null, (-1819));
      // Undeclared exception!
      try { 
        array0.setObject(12, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Array<Object> array0 = new Array<Object>(0);
      // Undeclared exception!
      try { 
        array0.set(3, array0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 0
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 1;
      Array<Integer> array0 = new Array<Integer>(integerArray0);
      array0.create(int0);
      assertEquals(4, array0.getLength());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Array<Integer> array0 = new Array<Integer>((Integer[]) null, 608);
      // Undeclared exception!
      try { 
        array0.add((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      // Undeclared exception!
      try { 
        array0.sort((Comparator<Object>) null, 0, 3294);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 3294
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(267);
      integerArray0[1] = integer0;
      Array<Integer> array0 = new Array<Integer>(integerArray0, (int) integerArray0[1]);
      Array<Integer> array1 = array0.copy();
      assertNotSame(array1, array0);
      assertEquals(267, array1.getLength());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Array<Object> array0 = null;
      try {
        array0 = new Array<Object>((-1676));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1676
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      // Undeclared exception!
      try { 
        array0.getObject((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 16
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }
}
