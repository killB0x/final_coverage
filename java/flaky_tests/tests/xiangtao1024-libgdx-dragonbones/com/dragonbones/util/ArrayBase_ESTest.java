/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 03:16:34 GMT 2022
 */

package com.dragonbones.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.dragonbones.util.Array;
import com.dragonbones.util.ArrayBase;
import com.dragonbones.util.BoolArray;
import com.dragonbones.util.CharArray;
import com.dragonbones.util.IntArray;
import com.dragonbones.util.ShortArray;
import java.util.Comparator;
import java.util.Iterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayBase_ESTest extends ArrayBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BoolArray boolArray0 = new BoolArray();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-2219));
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        boolArray0.concat(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharArray charArray0 = new CharArray(intArray0, (-1));
      Integer[] integerArray0 = new Integer[9];
      // Undeclared exception!
      try { 
        charArray0.concat(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharArray charArray0 = new CharArray();
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) intArray0[1];
      charArray0.splice(0, 0, integerArray0);
      // Undeclared exception!
      try { 
        charArray0.splice(6, (-4584), integerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[3];
      IntArray intArray1 = new IntArray(intArray0, 7);
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        intArray1.splice(1, (-1), integerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[2];
      IntArray intArray1 = new IntArray(intArray0, (-597));
      Integer[] integerArray0 = new Integer[8];
      // Undeclared exception!
      try { 
        intArray1.splice((-597), 2288, integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[3];
      CharArray charArray0 = new CharArray(intArray0, (-1675));
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      charArray0.forEach(consumer0);
      assertEquals((-1675), charArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[4];
      IntArray intArray1 = new IntArray(intArray0, (-1));
      int int0 = intArray1.indexOf((Integer) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Array<Object> array0 = new Array<Object>(16);
      array0.setLength(2077);
      assertEquals(2077, array0.getLength());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      array0.sort((Comparator<Object>) null);
      assertEquals(0, array0.getLength());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharArray charArray0 = new CharArray();
      charArray0.clear();
      assertEquals(0, charArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharArray charArray0 = new CharArray();
      int int0 = charArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharArray charArray0 = new CharArray();
      charArray0.setLength((-383));
      int int0 = charArray0.size();
      assertEquals((-383), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BoolArray boolArray0 = new BoolArray();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) boolArray0;
      Array<Object> array0 = new Array<Object>(objectArray0);
      array0.popObject();
      assertEquals(0, array0.getLength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharArray charArray0 = new CharArray(intArray0, 1357);
      int int0 = charArray0.length();
      assertEquals(1357, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[2];
      IntArray intArray1 = new IntArray(intArray0, (-597));
      int int0 = intArray1.length();
      assertEquals((-597), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharArray charArray0 = new CharArray();
      Iterator<Integer> iterator0 = charArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      CharArray charArray0 = new CharArray(intArray0);
      int int0 = charArray0.indexOfObject((Integer) 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[4];
      IntArray intArray1 = new IntArray(intArray0, 2068);
      int int0 = intArray1.indexOf((Integer) intArray0[0]);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = (-1962);
      IntArray intArray1 = new IntArray(intArray0, 31);
      int int0 = intArray1.indexOf((Integer) (-1962));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      Object object0 = array0.getObject(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Array<Object> array0 = new Array<Object>(objectArray0);
      Object object1 = array0.getObject(0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      int int0 = array0.getLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Array<Object> array0 = new Array<Object>(objectArray0, 4532);
      int int0 = array0.getLength();
      assertEquals(4532, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Array<Object> array0 = new Array<Object>(objectArray0, (-1));
      int int0 = array0.getLength();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharArray charArray0 = new CharArray();
      ArrayBase<Integer> arrayBase0 = charArray0.create(1);
      assertNotNull(arrayBase0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      ArrayBase<Object> arrayBase0 = array0.copy();
      assertNotNull(arrayBase0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharArray charArray0 = new CharArray();
      // Undeclared exception!
      try { 
        charArray0.unshiftObject((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharArray charArray0 = new CharArray();
      charArray0.splice((-3634), 3143, (Integer[]) null);
      Integer integer0 = Integer.valueOf((-3634));
      // Undeclared exception!
      try { 
        charArray0.unshiftObject(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BoolArray boolArray0 = new BoolArray();
      // Undeclared exception!
      try { 
        boolArray0.sort((Comparator<Integer>) null, 559, 559);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Array<Object> array0 = new Array<Object>((Object[]) null, 1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        array0.sort(comparator0, 1947, 1947);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      // Undeclared exception!
      try { 
        array0.sort((Comparator<Object>) null, 665, (-847));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(665) > toIndex(-847)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      // Undeclared exception!
      try { 
        array0.sort((Comparator<Object>) null, 591, 591);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 591
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharArray charArray0 = new CharArray();
      // Undeclared exception!
      try { 
        charArray0.sort((Comparator<Integer>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Array<Object> array0 = new Array<Object>(integerArray0, (-1));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        array0.sort(comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-1)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharArray charArray0 = new CharArray();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) charArray0;
      Array<Object> array0 = new Array<Object>(objectArray0);
      // Undeclared exception!
      try { 
        array0.sort((Comparator<Object>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.dragonbones.util.CharArray cannot be cast to class java.lang.Comparable (com.dragonbones.util.CharArray is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @2a49791e; java.lang.Comparable is in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Array<Object> array0 = new Array<Object>(objectArray0, 708);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        array0.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 708
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharArray charArray0 = new CharArray(false);
      // Undeclared exception!
      try { 
        charArray0.slice((-3029), 1009);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharArray charArray0 = new CharArray();
      // Undeclared exception!
      try { 
        charArray0.slice(941, 16);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -925
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharArray charArray0 = new CharArray(true);
      // Undeclared exception!
      try { 
        charArray0.slice((-2280));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      // Undeclared exception!
      try { 
        array0.slice(1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      // Undeclared exception!
      try { 
        array0.slice((-2785));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharArray charArray0 = new CharArray(intArray0, 1631);
      // Undeclared exception!
      try { 
        charArray0.slice();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ShortArray shortArray0 = new ShortArray(true);
      // Undeclared exception!
      try { 
        shortArray0.setObject(565, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BoolArray boolArray0 = new BoolArray();
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        boolArray0.setObject((-1), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Array<Object> array0 = new Array<Object>((Object[]) null, 12);
      // Undeclared exception!
      try { 
        array0.setLength((-4007));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharArray charArray0 = new CharArray();
      // Undeclared exception!
      try { 
        charArray0.pushObject((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Array<Integer> array0 = new Array<Integer>(integerArray0, (-576));
      Integer integer0 = new Integer((-576));
      // Undeclared exception!
      try { 
        array0.pushObject(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharArray charArray0 = new CharArray(true);
      // Undeclared exception!
      try { 
        charArray0.popObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BoolArray boolArray0 = new BoolArray();
      // Undeclared exception!
      try { 
        boolArray0.popObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharArray charArray0 = new CharArray(true);
      Array<Object> array0 = new Array<Object>((Object[]) null, 1734);
      // Undeclared exception!
      try { 
        array0.indexOf(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharArray charArray0 = new CharArray(intArray0, 1357);
      Integer integer0 = new Integer(1357);
      // Undeclared exception!
      try { 
        charArray0.indexOf(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharArray charArray0 = new CharArray(false);
      // Undeclared exception!
      try { 
        charArray0.incrementLength(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharArray charArray0 = new CharArray(true);
      // Undeclared exception!
      try { 
        charArray0.getObject(530);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BoolArray boolArray0 = new BoolArray();
      // Undeclared exception!
      try { 
        boolArray0.getObject(180);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      // Undeclared exception!
      try { 
        array0.create((-2291));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2291
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ShortArray shortArray0 = new ShortArray(true);
      // Undeclared exception!
      try { 
        shortArray0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Array<Object> array0 = new Array<Object>(integerArray0, (-1));
      // Undeclared exception!
      try { 
        array0.concat(integerArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("com.dragonbones.util.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Array<Object> array0 = new Array<Object>(objectArray0, 2294);
      // Undeclared exception!
      try { 
        array0.concat(objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharArray charArray0 = new CharArray();
      // Undeclared exception!
      try { 
        charArray0.slice((-3029), 1009);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharArray charArray0 = new CharArray();
      ArrayBase<Integer> arrayBase0 = charArray0.slice(1009, 1009);
      assertNotNull(arrayBase0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[3];
      CharArray charArray0 = new CharArray(intArray0, 1351);
      // Undeclared exception!
      try { 
        charArray0.indexOfObject((Integer) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharArray charArray0 = new CharArray();
      Integer integer0 = new Integer(1);
      int int0 = charArray0.indexOfObject(integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharArray charArray0 = new CharArray();
      int int0 = charArray0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharArray charArray0 = new CharArray();
      charArray0.incrementLength((-1586));
      // Undeclared exception!
      try { 
        charArray0.slice();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1586
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      BoolArray boolArray0 = new BoolArray();
      boolArray0.push(3);
      ArrayBase<Integer> arrayBase0 = boolArray0.concat(integerArray0);
      assertNotNull(arrayBase0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Array<Object> array0 = new Array<Object>((Object[]) null, 2568);
      // Undeclared exception!
      try { 
        array0.slice();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Array<Object> array0 = new Array<Object>(3);
      Integer integer0 = new Integer(3);
      array0.unshiftObject(integer0);
      assertEquals(4, array0.getLength());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Array<Object> array0 = new Array<Object>(objectArray0);
      array0.popObject();
      assertEquals(0, array0.getLength());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Array<Object> array0 = new Array<Object>(objectArray0);
      // Undeclared exception!
      try { 
        array0.sort((Comparator<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      array0.pushObject(array0);
      int int0 = array0.indexOfObject(array0);
      assertEquals(1, array0.getLength());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Array<Object> array0 = new Array<Object>((Object[]) null, 2568);
      int int0 = array0.size();
      assertEquals(2568, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      ArrayBase<Object> arrayBase0 = array0.slice();
      assertNotNull(arrayBase0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharArray charArray0 = new CharArray(false);
      // Undeclared exception!
      try { 
        charArray0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.util.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Array<Object> array0 = new Array<Object>();
      ArrayBase<Object> arrayBase0 = array0.slice(0);
      assertNotNull(arrayBase0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int[] intArray0 = new int[1];
      CharArray charArray0 = new CharArray(intArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      charArray0.forEach(consumer0);
      assertEquals(1, charArray0.getLength());
  }
}
