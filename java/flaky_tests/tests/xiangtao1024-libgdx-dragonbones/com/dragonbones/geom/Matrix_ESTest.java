/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 03:18:06 GMT 2022
 */

package com.dragonbones.geom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.dragonbones.geom.Matrix;
import com.dragonbones.geom.Point;
import com.dragonbones.util.FloatArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Matrix matrix0 = new Matrix((-962.8F), (-962.8F), 544.2957F, 0.0F, 544.2957F, 0.0F);
      Point point0 = new Point(0.0F, 0.0F);
      matrix0.transformPoint(1.9F, 1.9F, point0, true);
      assertEquals((-795.1581F), point0.x, 0.01F);
      assertEquals((-1829.32F), point0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Matrix matrix0 = new Matrix(1000.0F, (-619.10864F), (-619.10864F), 1000.0F, (-619.10864F), 0.0F);
      Matrix matrix1 = matrix0.invert();
      matrix1.d = (-1.0F);
      Point point0 = new Point(1000.0F, (-1.0F));
      matrix0.transformPoint((-619.10864F), (-619.10864F), point0);
      assertEquals(0.0016215222F, matrix0.a, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Matrix matrix0 = new Matrix(2784.2F, 0.0F, 0.0F, (-818.7946F), 4284.72F, 224.5674F);
      matrix0.invert();
      assertEquals((-0.0012213074F), matrix0.d, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.c = 1.0F;
      Matrix matrix1 = new Matrix((-869.3F), 0.0F, 0.0F, 1438.2144F, 0.0F, 0.0F);
      matrix0.concat(matrix1);
      matrix0.invert();
      assertEquals((-0.0011503509F), matrix0.a, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Matrix matrix0 = new Matrix((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      matrix0.concat(matrix0);
      assertEquals(2.0F, matrix0.d, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.c = 1.0F;
      Matrix matrix1 = new Matrix((-869.3F), 0.0F, 0.0F, 1438.2144F, 0.0F, 0.0F);
      matrix0.concat(matrix1);
      matrix0.concat(matrix0);
      assertEquals(2068460.5F, matrix0.d, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Matrix matrix0 = new Matrix(869.02313F, (-1333.569F), (-1333.569F), 869.02313F, 0.0F, 0.0F);
      Matrix matrix1 = new Matrix(0.0F, 1.0F, 0.0F, 0.0F, (-1097.217F), 1.0F);
      matrix0.concat(matrix1);
      assertEquals((-1097.217F), matrix0.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      Matrix matrix1 = new Matrix(1.0F, 1.0F, 1.0F, 0.0F, 1.0F, 0.0F);
      matrix0.copyFrom(matrix1);
      Matrix matrix2 = matrix1.copyFrom(matrix0);
      matrix2.tx = 0.0F;
      matrix1.concat(matrix0);
      assertEquals(0.0F, matrix0.d, 0.01F);
      assertEquals(1.0F, matrix0.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      Matrix matrix1 = new Matrix((-869.3F), 0.0F, 0.0F, 1438.2144F, 0.0F, 0.0F);
      matrix0.concat(matrix1);
      assertEquals(1438.2144F, matrix0.d, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Matrix matrix0 = new Matrix((-1.0F), (-2873.653F), (-1.0F), 0.0F, (-1050.7F), 0.0F);
      Matrix matrix1 = matrix0.copyFrom(matrix0);
      assertEquals(0.0F, matrix1.d, 0.01F);
      assertEquals((-1050.7F), matrix1.tx, 0.01F);
      assertEquals(0.0F, matrix1.ty, 0.01F);
      assertEquals((-2873.653F), matrix1.b, 0.01F);
      assertEquals((-1.0F), matrix1.a, 0.01F);
      assertEquals((-1.0F), matrix1.c, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Matrix matrix0 = new Matrix((-1.0F), 170.2F, (-1.0F), (-4.18363F), 1.0F, 0.0F);
      String string0 = matrix0.toString();
      assertEquals("[object dragonBones.Matrix] a:-1.0 b:170.2 c:-1.0 d:-4.18363 tx:1.0 ty:0.0", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Matrix matrix0 = new Matrix((-1583.9016F), (-3456.002F), (-3456.002F), (-3456.002F), (-4203.9634F), (-4203.9634F));
      FloatArray floatArray0 = new FloatArray(4460);
      floatArray0.push((-267.9F));
      matrix0.copyFromArray(floatArray0, 4460);
      assertEquals((-267.9F), matrix0.a, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Matrix matrix0 = new Matrix((-962.8F), (-962.8F), 544.2957F, 0.0F, 544.2957F, 0.0F);
      FloatArray floatArray0 = new FloatArray(0);
      floatArray0.unshiftObject((Float) matrix0.a);
      matrix0.copyFromArray(floatArray0);
      assertEquals(0.0F, matrix0.tx, 0.01F);
      assertEquals(0.0F, matrix0.c, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Matrix matrix0 = new Matrix((-20.907982F), (-20.907982F), (-20.907982F), (-20.907982F), (-20.907982F), (-20.907982F));
      // Undeclared exception!
      try { 
        matrix0.transformPoint((-20.907982F), (-20.907982F), (Point) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.geom.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Matrix matrix0 = new Matrix((-6.79F), (-6.79F), (-6.79F), (-6.79F), (-6.79F), (-6.79F));
      // Undeclared exception!
      try { 
        matrix0.transformPoint((-6.79F), (-6.79F), (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.geom.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      // Undeclared exception!
      try { 
        matrix0.copyFromArray((FloatArray) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.geom.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      // Undeclared exception!
      try { 
        matrix0.copyFromArray((FloatArray) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.geom.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      // Undeclared exception!
      try { 
        matrix0.copyFrom((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.geom.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      // Undeclared exception!
      try { 
        matrix0.concat((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.geom.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Matrix matrix0 = new Matrix(1000.0F, (-619.10864F), (-619.10864F), 1000.0F, (-619.10864F), 0.0F);
      Point point0 = new Point(1000.0F, (-1.0F));
      matrix0.transformPoint((-619.10864F), 0.6215222F, point0, false);
      assertEquals(383917.03F, point0.y, 0.01F);
      assertEquals((-620112.56F), point0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Matrix matrix0 = new Matrix((-962.8F), (-962.8F), 544.2957F, 0.0F, 544.2957F, 0.0F);
      FloatArray floatArray0 = new FloatArray(0);
      // Undeclared exception!
      try { 
        matrix0.copyFromArray(floatArray0, 2034);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2034 out of bounds for length 0
         //
         verifyException("com.dragonbones.util.FloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Matrix matrix0 = new Matrix(0.0F, 0.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      matrix0.invert();
      assertEquals(1.0F, matrix0.a, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Matrix matrix0 = new Matrix((-1.0F), 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      matrix0.invert();
      assertEquals(0.0F, matrix0.a, 0.01F);
      assertEquals(0.0F, matrix0.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Matrix matrix0 = new Matrix(0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F);
      assertEquals(0.0F, matrix0.b, 0.01F);
      
      Matrix matrix1 = matrix0.invert();
      assertEquals(0.0F, matrix0.c, 0.01F);
      assertEquals(0.0F, matrix0.a, 0.01F);
      assertEquals(0.0F, matrix0.tx, 0.01F);
      assertEquals(1.0F, matrix1.d, 0.01F);
      assertEquals(0.0F, matrix0.ty, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.invert();
      assertEquals(-0.0F, matrix0.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      Matrix matrix1 = new Matrix(1.0F, 1.0F, 1.0F, 0.0F, 1.0F, 0.0F);
      matrix0.copyFrom(matrix1);
      matrix0.invert();
      assertEquals(-0.0F, matrix0.a, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.c = 1.0F;
      matrix0.concat(matrix0);
      assertEquals(2.0F, matrix0.c, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Matrix matrix0 = new Matrix(1.0F, 1.0F, 1.0F, 0.0F, 1.0F, 0.0F);
      matrix0.concat(matrix0);
      assertEquals(1.0F, matrix0.d, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      String string0 = matrix0.toString();
      assertEquals("[object dragonBones.Matrix] a:1.0 b:0.0 c:0.0 d:1.0 tx:0.0 ty:0.0", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.identity();
      assertEquals(0.0F, matrix0.c, 0.01F);
      assertEquals(1.0F, matrix0.a, 0.01F);
      assertEquals(0.0F, matrix0.b, 0.01F);
      assertEquals(0.0F, matrix0.ty, 0.01F);
      assertEquals(1.0F, matrix0.d, 0.01F);
      assertEquals(0.0F, matrix0.tx, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      FloatArray floatArray0 = new FloatArray(2);
      // Undeclared exception!
      try { 
        matrix0.copyFromArray(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("com.dragonbones.util.FloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      Matrix matrix1 = matrix0.copyFrom(matrix0);
      assertEquals(1.0F, matrix1.d, 0.01F);
      assertEquals(0.0F, matrix1.tx, 0.01F);
      assertEquals(0.0F, matrix1.ty, 0.01F);
      assertEquals(0.0F, matrix1.c, 0.01F);
      assertEquals(0.0F, matrix1.b, 0.01F);
      assertEquals(1.0F, matrix1.a, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      Point point0 = new Point(0.0F, 1.0F);
      matrix0.transformPoint(0.0F, (-2163.0F), point0);
      assertEquals((-2163.0F), point0.y, 0.01F);
  }
}
