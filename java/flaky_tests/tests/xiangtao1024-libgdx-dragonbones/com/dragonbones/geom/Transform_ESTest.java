/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 03:13:15 GMT 2022
 */

package com.dragonbones.geom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.dragonbones.geom.Matrix;
import com.dragonbones.geom.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Transform_ESTest extends Transform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transform transform0 = new Transform();
      transform0.scaleY = 0.0F;
      Matrix matrix0 = new Matrix(1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F);
      Transform transform1 = new Transform(1.0F, 1.0F, 0.0F, (-921.28534F), 1498.8F, 1.0F);
      transform0.add(transform1);
      transform0.toMatrix(matrix0);
      assertEquals(1.0F, matrix0.tx, 0.01F);
      assertEquals(-0.0F, matrix0.c, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transform transform0 = new Transform();
      Matrix matrix0 = new Matrix((-10.59F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Matrix matrix1 = new Matrix(Float.NaN, (-10.59F), (-0.7853982F), (-0.7853982F), 1013.3127F, (-10.59F));
      Transform transform1 = transform0.fromMatrix(matrix1);
      transform1.toMatrix(matrix0);
      assertEquals(Float.NaN, transform0.scaleX, 0.01F);
      assertEquals(1.1107208F, transform0.scaleY, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transform transform0 = new Transform();
      transform0.rotation = 103.55648F;
      Matrix matrix0 = new Matrix();
      transform0.toMatrix(matrix0);
      assertEquals((-0.99327064F), matrix0.d, 0.01F);
      assertEquals(1.0F, transform0.scaleX, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Transform transform0 = new Transform();
      transform0.skew = 2635.65F;
      Matrix matrix0 = new Matrix();
      transform0.toMatrix(matrix0);
      assertEquals((-0.14581232F), matrix0.c, 0.01F);
      assertEquals(1.0F, transform0.scaleY, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transform transform0 = new Transform();
      Matrix matrix0 = new Matrix(1.0F, 0.0F, (-4016.1177F), 0.7853982F, 1.0F, 0.7853982F);
      transform0.fromMatrix(matrix0);
      assertEquals(1.5706007F, transform0.skew, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Transform transform0 = new Transform();
      Transform transform1 = new Transform(1.0F, 0.0F, 0.0F, 6.2831855F, 0.7853982F, (-677.76953F));
      transform0.copyFrom(transform1);
      transform0.minus(transform0);
      assertEquals(1.0F, transform0.scaleX, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transform transform0 = new Transform(2274.0168F, 2274.0168F, (-1.0F), 2274.0168F, 0.0F, (-1.0F));
      transform0.minus(transform0);
      assertEquals(0.0F, transform0.rotation, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transform transform0 = new Transform();
      Matrix matrix0 = new Matrix((-10.59F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Transform transform1 = transform0.fromMatrix(matrix0);
      transform0.add(transform1);
      assertEquals(Float.NaN, transform0.skew, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transform transform0 = new Transform();
      assertEquals(0.0F, transform0.skew, 0.01F);
      
      transform0.skew = 2641.4722F;
      String string0 = transform0.toString();
      assertEquals("[object dragonBones.Transform] x:0.0 y:0.0 skewX:151345.20692588107 skewY:0.0 scaleX:1.0 scaleY:1.0", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transform transform0 = new Transform();
      // Undeclared exception!
      try { 
        transform0.toMatrix((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.geom.Transform", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transform transform0 = new Transform();
      // Undeclared exception!
      try { 
        transform0.minus((Transform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.geom.Transform", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transform transform0 = new Transform();
      // Undeclared exception!
      try { 
        transform0.fromMatrix((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.geom.Transform", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transform transform0 = new Transform();
      // Undeclared exception!
      try { 
        transform0.copyFrom((Transform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.geom.Transform", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transform transform0 = new Transform();
      // Undeclared exception!
      try { 
        transform0.add((Transform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dragonbones.geom.Transform", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transform transform0 = new Transform();
      Matrix matrix0 = new Matrix(0.7853982F, 57.29578F, 1.5707964F, 0.0F, 6.2831855F, 0.0F);
      transform0.fromMatrix(matrix0);
      transform0.toMatrix(matrix0);
      assertEquals(1.5570894F, transform0.rotation, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transform transform0 = new Transform();
      Matrix matrix0 = new Matrix();
      Transform transform1 = transform0.identity();
      transform1.rotation = (-278.7F);
      transform0.toMatrix(matrix0);
      assertEquals((-0.62025076F), matrix0.d, 0.01F);
      assertEquals(0.78440356F, matrix0.c, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Transform transform0 = new Transform();
      Matrix matrix0 = new Matrix();
      Transform transform1 = transform0.toMatrix(matrix0);
      assertEquals(0.0F, transform1.y, 0.01F);
      assertEquals(0.0F, transform1.rotation, 0.01F);
      assertEquals(0.0F, transform1.x, 0.01F);
      assertEquals(1.0F, transform1.scaleY, 0.01F);
      assertEquals(0.0F, transform1.skew, 0.01F);
      assertEquals(0.0F, matrix0.c, 0.01F);
      assertEquals(1.0F, transform1.scaleX, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transform transform0 = new Transform();
      Transform transform1 = new Transform();
      transform1.skew = 2641.4722F;
      transform0.minus(transform1);
      Matrix matrix0 = new Matrix(0.7853982F, (-68.79919F), 0.017453292F, 0.0F, 0.0F, 0.0F);
      transform0.toMatrix(matrix0);
      assertEquals((-2641.4722F), transform0.skew, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Transform transform0 = new Transform();
      Matrix matrix0 = new Matrix(0.7853982F, 6.2831855F, 0.0F, (-3054.381F), 0.0F, 6.2831855F);
      transform0.fromMatrix(matrix0);
      assertEquals(1.4464413F, transform0.rotation, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transform transform0 = new Transform();
      Matrix matrix0 = new Matrix((-1307.4F), 1.0F, 1.5707964F, 1.0F, (-1307.4F), 6.2831855F);
      transform0.fromMatrix(matrix0);
      assertEquals((-3.1423576F), transform0.rotation, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Transform transform0 = new Transform((-1387.3374F), (-1387.3374F), (-1081.043F), (-1387.3374F), (-1081.043F), (-1387.3374F));
      Matrix matrix0 = new Matrix();
      transform0.fromMatrix(matrix0);
      assertEquals(-0.0F, transform0.skew, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Transform transform0 = new Transform();
      Matrix matrix0 = new Matrix(0.7853982F, (-0.7853982F), (-1.0F), 1.0F, 0.017453292F, (-2192.5903F));
      transform0.fromMatrix(matrix0);
      assertEquals((-2192.5903F), transform0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transform transform0 = new Transform();
      Matrix matrix0 = new Matrix(57.29578F, 57.29578F, 0.017453292F, 6.2831855F, 57.29578F, 3.1415927F);
      transform0.fromMatrix(matrix0);
      assertEquals(3.1415927F, transform0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float float0 = Transform.normalizeRadian(231.85F);
      assertEquals((-0.62785023F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      float float0 = Transform.normalizeRadian((-5466.0F));
      assertEquals(0.37121716F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Transform transform0 = new Transform();
      assertEquals(0.0F, transform0.rotation, 0.01F);
      
      Transform transform1 = transform0.identity();
      transform1.rotation = (-278.7F);
      String string0 = transform0.toString();
      assertEquals("[object dragonBones.Transform] x:0.0 y:0.0 skewX:0.0 skewY:-15968.334449707414 scaleX:1.0 scaleY:1.0", string0);
  }
}
