/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:43:07 GMT 2022
 */

package com.amlinv.logging.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.amlinv.logging.util.RepeatLogMessageSuppressor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.slf4j.Logger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RepeatLogMessageSuppressor_ESTest extends RepeatLogMessageSuppressor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RepeatLogMessageSuppressor repeatLogMessageSuppressor0 = new RepeatLogMessageSuppressor();
      Object[] objectArray0 = new Object[6];
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      repeatLogMessageSuppressor0.debug(logger0, "", objectArray0);
      assertEquals(300000L, repeatLogMessageSuppressor0.getMinDelay());
      
      repeatLogMessageSuppressor0.setMinDelay((-1L));
      Logger logger1 = mock(Logger.class, new ViolatedAssumptionAnswer());
      repeatLogMessageSuppressor0.error(logger1, (String) null, (Object[]) null);
      assertEquals((-1L), repeatLogMessageSuppressor0.getMinDelay());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RepeatLogMessageSuppressor repeatLogMessageSuppressor0 = new RepeatLogMessageSuppressor();
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      repeatLogMessageSuppressor0.info(logger0, "or$o6ZT3\"a", (Object[]) null);
      assertEquals(300000L, repeatLogMessageSuppressor0.getMinDelay());
      
      repeatLogMessageSuppressor0.setMinDelay(0L);
      Logger logger1 = mock(Logger.class, new ViolatedAssumptionAnswer());
      repeatLogMessageSuppressor0.error(logger1, "or$o6ZT3\"a", (Object[]) null);
      assertEquals(0L, repeatLogMessageSuppressor0.getMinDelay());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RepeatLogMessageSuppressor repeatLogMessageSuppressor0 = new RepeatLogMessageSuppressor();
      repeatLogMessageSuppressor0.setMinDelay((-2989L));
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[5];
      repeatLogMessageSuppressor0.error(logger0, "F(Pb", objectArray0);
      Logger logger1 = mock(Logger.class, new ViolatedAssumptionAnswer());
      repeatLogMessageSuppressor0.warn(logger1, "hnZV", objectArray0);
      assertEquals((-2989L), repeatLogMessageSuppressor0.getMinDelay());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RepeatLogMessageSuppressor repeatLogMessageSuppressor0 = new RepeatLogMessageSuppressor();
      assertEquals(300000L, repeatLogMessageSuppressor0.getMinDelay());
      
      repeatLogMessageSuppressor0.setMinDelay(0L);
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[9];
      repeatLogMessageSuppressor0.warn(logger0, "", objectArray0);
      Logger logger1 = mock(Logger.class, new ViolatedAssumptionAnswer());
      repeatLogMessageSuppressor0.warn(logger1, "", objectArray0);
      assertEquals(0L, repeatLogMessageSuppressor0.getMinDelay());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RepeatLogMessageSuppressor repeatLogMessageSuppressor0 = new RepeatLogMessageSuppressor();
      repeatLogMessageSuppressor0.setMinDelay((-2989L));
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Logger logger1 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[5];
      repeatLogMessageSuppressor0.error(logger1, "F(Pb", objectArray0);
      repeatLogMessageSuppressor0.info(logger0, "hnZV", objectArray0);
      assertEquals((-2989L), repeatLogMessageSuppressor0.getMinDelay());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RepeatLogMessageSuppressor repeatLogMessageSuppressor0 = new RepeatLogMessageSuppressor();
      assertEquals(300000L, repeatLogMessageSuppressor0.getMinDelay());
      
      repeatLogMessageSuppressor0.setMinDelay(0L);
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[9];
      repeatLogMessageSuppressor0.warn(logger0, "", objectArray0);
      Logger logger1 = mock(Logger.class, new ViolatedAssumptionAnswer());
      repeatLogMessageSuppressor0.info(logger1, "", objectArray0);
      assertEquals(0L, repeatLogMessageSuppressor0.getMinDelay());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RepeatLogMessageSuppressor repeatLogMessageSuppressor0 = new RepeatLogMessageSuppressor();
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[1];
      repeatLogMessageSuppressor0.debug(logger0, "", objectArray0);
      repeatLogMessageSuppressor0.setMinDelay((-2955L));
      Logger logger1 = mock(Logger.class, new ViolatedAssumptionAnswer());
      repeatLogMessageSuppressor0.debug(logger1, "fM", objectArray0);
      assertEquals((-2955L), repeatLogMessageSuppressor0.getMinDelay());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RepeatLogMessageSuppressor repeatLogMessageSuppressor0 = new RepeatLogMessageSuppressor();
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Logger logger1 = mock(Logger.class, new ViolatedAssumptionAnswer());
      repeatLogMessageSuppressor0.info(logger1, "or$o6ZT3\"a", (Object[]) null);
      assertEquals(300000L, repeatLogMessageSuppressor0.getMinDelay());
      
      Object[] objectArray0 = new Object[4];
      repeatLogMessageSuppressor0.setMinDelay(0L);
      repeatLogMessageSuppressor0.debug(logger0, "or$o6ZT3\"a", objectArray0);
      assertEquals(0L, repeatLogMessageSuppressor0.getMinDelay());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RepeatLogMessageSuppressor repeatLogMessageSuppressor0 = new RepeatLogMessageSuppressor();
      assertEquals(300000L, repeatLogMessageSuppressor0.getMinDelay());
      
      repeatLogMessageSuppressor0.setMinDelay(0L);
      long long0 = repeatLogMessageSuppressor0.getMinDelay();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RepeatLogMessageSuppressor repeatLogMessageSuppressor0 = new RepeatLogMessageSuppressor();
      repeatLogMessageSuppressor0.setMinDelay((-2989L));
      long long0 = repeatLogMessageSuppressor0.getMinDelay();
      assertEquals((-2989L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RepeatLogMessageSuppressor repeatLogMessageSuppressor0 = new RepeatLogMessageSuppressor();
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        repeatLogMessageSuppressor0.warn((Logger) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.amlinv.logging.util.RepeatLogMessageSuppressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RepeatLogMessageSuppressor repeatLogMessageSuppressor0 = new RepeatLogMessageSuppressor();
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        repeatLogMessageSuppressor0.info((Logger) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.amlinv.logging.util.RepeatLogMessageSuppressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RepeatLogMessageSuppressor repeatLogMessageSuppressor0 = new RepeatLogMessageSuppressor();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        repeatLogMessageSuppressor0.error((Logger) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.amlinv.logging.util.RepeatLogMessageSuppressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RepeatLogMessageSuppressor repeatLogMessageSuppressor0 = new RepeatLogMessageSuppressor();
      // Undeclared exception!
      try { 
        repeatLogMessageSuppressor0.debug((Logger) null, "oVp7{+q", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.amlinv.logging.util.RepeatLogMessageSuppressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RepeatLogMessageSuppressor repeatLogMessageSuppressor0 = new RepeatLogMessageSuppressor();
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[6];
      repeatLogMessageSuppressor0.debug(logger0, "", objectArray0);
      Logger logger1 = mock(Logger.class, new ViolatedAssumptionAnswer());
      repeatLogMessageSuppressor0.error(logger1, "l(q%2|?6}", objectArray0);
      assertEquals(300000L, repeatLogMessageSuppressor0.getMinDelay());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RepeatLogMessageSuppressor repeatLogMessageSuppressor0 = new RepeatLogMessageSuppressor();
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[6];
      repeatLogMessageSuppressor0.debug(logger0, "", objectArray0);
      Logger logger1 = mock(Logger.class, new ViolatedAssumptionAnswer());
      repeatLogMessageSuppressor0.warn(logger1, "", objectArray0);
      assertEquals(300000L, repeatLogMessageSuppressor0.getMinDelay());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RepeatLogMessageSuppressor repeatLogMessageSuppressor0 = new RepeatLogMessageSuppressor();
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Logger logger1 = mock(Logger.class, new ViolatedAssumptionAnswer());
      repeatLogMessageSuppressor0.info(logger1, "or$o6ZT3\"a", (Object[]) null);
      repeatLogMessageSuppressor0.info(logger0, "Qh]`~2lj`Ei/'q;jo", (Object[]) null);
      assertEquals(300000L, repeatLogMessageSuppressor0.getMinDelay());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RepeatLogMessageSuppressor repeatLogMessageSuppressor0 = new RepeatLogMessageSuppressor();
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[6];
      Logger logger1 = mock(Logger.class, new ViolatedAssumptionAnswer());
      repeatLogMessageSuppressor0.debug(logger1, "", objectArray0);
      repeatLogMessageSuppressor0.debug(logger0, "", objectArray0);
      assertEquals(300000L, repeatLogMessageSuppressor0.getMinDelay());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RepeatLogMessageSuppressor repeatLogMessageSuppressor0 = new RepeatLogMessageSuppressor();
      long long0 = repeatLogMessageSuppressor0.getMinDelay();
      assertEquals(300000L, long0);
  }
}
