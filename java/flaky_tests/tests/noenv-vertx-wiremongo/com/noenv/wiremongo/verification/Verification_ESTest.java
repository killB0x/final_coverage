/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 05:38:59 GMT 2022
 */

package com.noenv.wiremongo.verification;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.noenv.wiremongo.verification.Verification;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Verification_ESTest extends Verification_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Verification> linkedList0 = new LinkedList<Verification>();
      Verification verification0 = new Verification("", linkedList0);
      Verification verification1 = verification0.isRunAtMost(1242);
      verification0.assertSucceed();
      assertSame(verification0, verification1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Verification> linkedList0 = new LinkedList<Verification>();
      Verification verification0 = new Verification("(TClu/'>?'7_4^:'^o", linkedList0);
      verification0.isRunAtLeast((-1));
      // Undeclared exception!
      try { 
        verification0.assertSucceed();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // expected '(TClu/'>?'7_4^:'^o' to be checked, but it was not
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Verification> linkedList0 = new LinkedList<Verification>();
      Verification verification0 = new Verification((String) null, linkedList0);
      verification0.isRunExactly((-2534));
      // Undeclared exception!
      try { 
        verification0.assertSucceed();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // expected 'null' to be checked, but it was not
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Verification verification0 = new Verification(":=N", (List<Verification>) null);
      verification0.isRunAfterPreviousVerifications();
      // Undeclared exception!
      try { 
        verification0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.noenv.wiremongo.verification.Verification", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Verification> linkedList0 = new LinkedList<Verification>();
      Verification verification0 = new Verification("#,r9mNQ~HaNTG36v", linkedList0);
      // Undeclared exception!
      try { 
        verification0.assertSucceed();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // expected '#,r9mNQ~HaNTG36v' to be checked, but it was not
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Verification> linkedList0 = new LinkedList<Verification>();
      Verification verification0 = new Verification("", linkedList0);
      Verification verification1 = verification0.isRunAtLeastOnce();
      assertFalse(linkedList0.contains(verification1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Verification> linkedList0 = new LinkedList<Verification>();
      Verification verification0 = new Verification("y", linkedList0);
      linkedList0.add(verification0);
      Verification verification1 = new Verification("", linkedList0);
      Verification verification2 = verification1.isRunAfterPreviousVerifications();
      verification2.execute();
      assertFalse(verification2.equals((Object)verification0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Verification> linkedList0 = new LinkedList<Verification>();
      Verification verification0 = new Verification("", linkedList0);
      Verification verification1 = verification0.isRunAfterPreviousVerifications();
      linkedList0.add(verification0);
      verification0.execute();
      assertSame(verification0, verification1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Verification> linkedList0 = new LinkedList<Verification>();
      Verification verification0 = new Verification("", linkedList0);
      Verification verification1 = verification0.isRunAtMost((-105));
      // Undeclared exception!
      try { 
        verification1.assertSucceed();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // expected '' to run at most -105 time(s), but it ran more often
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Verification> linkedList0 = new LinkedList<Verification>();
      Verification verification0 = new Verification("", linkedList0);
      Verification verification1 = verification0.isNeverRun();
      verification0.assertSucceed();
      assertSame(verification0, verification1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Verification> linkedList0 = new LinkedList<Verification>();
      Verification verification0 = new Verification("", linkedList0);
      verification0.execute();
      verification0.assertSucceed();
      assertFalse(linkedList0.contains(verification0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Verification> linkedList0 = new LinkedList<Verification>();
      Verification verification0 = new Verification("lTw0|", linkedList0);
      verification0.isRunExactlyOnce();
      // Undeclared exception!
      try { 
        verification0.assertSucceed();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // expected 'lTw0|' to be checked, but it was not
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Verification> linkedList0 = new LinkedList<Verification>();
      Verification verification0 = new Verification("4", linkedList0);
      Verification verification1 = verification0.isRunExactly(0);
      // Undeclared exception!
      try { 
        verification1.assertSucceed();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // expected '4' to be checked, but it was not
         //
      }
  }
}
