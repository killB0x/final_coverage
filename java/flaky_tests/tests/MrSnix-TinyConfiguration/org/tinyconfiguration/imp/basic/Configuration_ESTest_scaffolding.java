/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sat Nov 05 12:25:59 GMT 2022
 */

package org.tinyconfiguration.imp.basic;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class Configuration_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  protected static ExecutorService executor; 

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.tinyconfiguration.imp.basic.Configuration"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    executor.shutdownNow(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/user"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Configuration_ESTest_scaffolding.class.getClassLoader() ,
      "org.tinyconfiguration.imp.basic.ex.configuration.MissingConfigurationIdentifiersException",
      "org.tinyconfiguration.imp.basic.io.HandlerJSON",
      "org.tinyconfiguration.abc.utils.FormatType",
      "org.tinyconfiguration.abc.data.Value",
      "org.tinyconfiguration.abc.ex.ConfigurationException",
      "org.tinyconfiguration.imp.basic.io.HandlerCSV",
      "org.tinyconfiguration.abc.io.handlers.AbstractReader",
      "org.tinyconfiguration.imp.basic.Property",
      "org.tinyconfiguration.abc.data.base.AbstractValue",
      "org.tinyconfiguration.imp.basic.ex.configuration.InvalidConfigurationNameException",
      "org.tinyconfiguration.imp.basic.ex.configuration.InvalidConfigurationVersionException",
      "org.tinyconfiguration.imp.basic.ex.io.ParsingProcessException",
      "org.tinyconfiguration.imp.basic.io.HandlerYAML$ImplReaderYAML",
      "org.tinyconfiguration.imp.basic.io.HandlerXML",
      "org.tinyconfiguration.abc.AbstractConfiguration",
      "org.tinyconfiguration.imp.basic.io.HandlerYAML",
      "org.tinyconfiguration.abc.builders.AbstractBuilder",
      "org.tinyconfiguration.abc.io.handlers.AbstractWriter",
      "org.tinyconfiguration.imp.basic.ex.property.MalformedConfigurationPropertyException",
      "org.tinyconfiguration.imp.basic.io.HandlerYAML$ImplWriterYAML",
      "org.tinyconfiguration.imp.basic.Configuration$Builder",
      "org.tinyconfiguration.imp.basic.io.HandlerXML$ImplWriterXML",
      "org.tinyconfiguration.imp.basic.io.HandlerCSV$ImplReaderCSV",
      "org.tinyconfiguration.abc.AbstractProperty",
      "org.tinyconfiguration.imp.basic.ex.property.MissingConfigurationPropertyException",
      "org.tinyconfiguration.abc.io.utils.Readable",
      "org.tinyconfiguration.abc.data.base.Modifiable",
      "org.tinyconfiguration.imp.basic.Configuration$1",
      "org.tinyconfiguration.imp.basic.io.HandlerCSV$ImplWriterCSV",
      "org.tinyconfiguration.imp.basic.io.HandlerXML$ImplReaderXML",
      "org.tinyconfiguration.imp.basic.ex.property.InvalidConfigurationPropertyException",
      "org.tinyconfiguration.abc.ex.PropertyException",
      "org.tinyconfiguration.imp.basic.io.HandlerJSON$ImplWriterJSON",
      "org.tinyconfiguration.imp.basic.ex.property.DuplicatedConfigurationPropertyException",
      "org.tinyconfiguration.imp.basic.Property$1",
      "org.tinyconfiguration.abc.AbstractCollection",
      "org.tinyconfiguration.imp.basic.Configuration",
      "org.tinyconfiguration.imp.basic.ex.property.UnknownConfigurationPropertyException",
      "org.tinyconfiguration.abc.io.utils.Writable"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.tinyconfiguration.imp.basic.Property", false, Configuration_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Configuration_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.tinyconfiguration.abc.AbstractConfiguration",
      "org.tinyconfiguration.imp.basic.Configuration",
      "org.tinyconfiguration.abc.utils.FormatType",
      "org.tinyconfiguration.imp.basic.Configuration$1",
      "org.tinyconfiguration.imp.basic.io.HandlerXML$ImplWriterXML",
      "org.tinyconfiguration.imp.basic.io.HandlerXML$ImplReaderXML",
      "org.tinyconfiguration.imp.basic.io.HandlerXML",
      "org.tinyconfiguration.imp.basic.io.HandlerJSON",
      "org.tinyconfiguration.imp.basic.io.HandlerYAML$ImplWriterYAML",
      "org.tinyconfiguration.imp.basic.io.HandlerYAML$ImplReaderYAML",
      "org.tinyconfiguration.imp.basic.io.HandlerYAML",
      "org.tinyconfiguration.imp.basic.io.HandlerCSV$ImplWriterCSV",
      "org.tinyconfiguration.imp.basic.io.HandlerCSV$ImplReaderCSV",
      "org.tinyconfiguration.imp.basic.io.HandlerCSV",
      "org.tinyconfiguration.abc.builders.AbstractBuilder",
      "org.tinyconfiguration.imp.basic.Configuration$Builder",
      "org.tinyconfiguration.abc.AbstractProperty",
      "org.tinyconfiguration.imp.basic.Property"
    );
  }
}
