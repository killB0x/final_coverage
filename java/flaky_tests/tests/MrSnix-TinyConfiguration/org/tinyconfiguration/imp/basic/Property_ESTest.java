/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 12:28:01 GMT 2022
 */

package org.tinyconfiguration.imp.basic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.tinyconfiguration.imp.basic.Property;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Property_ESTest extends Property_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder();
      property_Builder0.clear();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder(false);
      float[] floatArray0 = new float[9];
      Property.Builder property_Builder1 = property_Builder0.setValue(floatArray0);
      assertSame(property_Builder1, property_Builder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder();
      char[] charArray0 = new char[9];
      Property.Builder property_Builder1 = property_Builder0.setValue(charArray0);
      assertSame(property_Builder0, property_Builder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder();
      byte[] byteArray0 = new byte[7];
      Property.Builder property_Builder1 = property_Builder0.setValue(byteArray0);
      assertSame(property_Builder1, property_Builder0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder(true);
      Property.Builder property_Builder1 = property_Builder0.setKey("4{");
      Property.Builder property_Builder2 = property_Builder1.setValue(true);
      Property.Builder property_Builder3 = property_Builder1.setOptional(true);
      property_Builder3.setDescription("4{");
      Property property0 = property_Builder2.build();
      boolean boolean0 = property0.isOptional();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder();
      property_Builder0.setKey("^");
      Property.Builder property_Builder1 = property_Builder0.setValue("^");
      // Undeclared exception!
      try { 
        property_Builder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The description must be set!
         //
         verifyException("org.tinyconfiguration.imp.basic.Property$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder(false);
      property_Builder0.setKey("Y");
      // Undeclared exception!
      try { 
        property_Builder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The value must be set!
         //
         verifyException("org.tinyconfiguration.imp.basic.Property$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder();
      // Undeclared exception!
      try { 
        property_Builder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The key must be set!
         //
         verifyException("org.tinyconfiguration.imp.basic.Property$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder();
      // Undeclared exception!
      try { 
        property_Builder0.setValidator((Predicate<Property>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validator function cannot be null
         //
         verifyException("org.tinyconfiguration.imp.basic.Property$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder();
      // Undeclared exception!
      try { 
        property_Builder0.setDescription("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The description cannot be empty
         //
         verifyException("org.tinyconfiguration.imp.basic.Property$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder();
      // Undeclared exception!
      try { 
        property_Builder0.setDescription((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The description cannot be null
         //
         verifyException("org.tinyconfiguration.imp.basic.Property$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder();
      // Undeclared exception!
      try { 
        property_Builder0.setKey("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key cannot be empty
         //
         verifyException("org.tinyconfiguration.imp.basic.Property$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder();
      // Undeclared exception!
      try { 
        property_Builder0.setKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The key cannot be null
         //
         verifyException("org.tinyconfiguration.imp.basic.Property$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder(false);
      property_Builder0.setValue(false);
      Property.Builder property_Builder1 = property_Builder0.setKey("4");
      property_Builder0.setDescription("Y");
      Property property0 = property_Builder1.build();
      boolean boolean0 = property0.isValid();
      assertTrue(boolean0);
      assertFalse(property0.isOptional());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder();
      Property.Builder property_Builder1 = property_Builder0.setKey("E");
      property_Builder1.setDescription("E");
      Property.Builder property_Builder2 = property_Builder0.setValue(83);
      Property property0 = property_Builder2.build();
      // Undeclared exception!
      try { 
        property0.set((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The value cannot be null
         //
         verifyException("org.tinyconfiguration.imp.basic.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder();
      String[] stringArray0 = new String[6];
      property_Builder0.setValue(stringArray0);
      property_Builder0.setKey("%");
      property_Builder0.setDescription("%");
      Property property0 = property_Builder0.build();
      // Undeclared exception!
      try { 
        property0.set("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value must be of the same class as the one declared
         //
         verifyException("org.tinyconfiguration.imp.basic.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder(false);
      Property.Builder property_Builder1 = property_Builder0.setKey("Y");
      Property.Builder property_Builder2 = property_Builder1.setDescription("Y");
      property_Builder1.setValue(false);
      Property property0 = property_Builder2.build();
      boolean boolean0 = property0.isOptional();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder(false);
      Property.Builder property_Builder1 = property_Builder0.setValue(false);
      property_Builder1.setKey("4");
      property_Builder0.setDescription("Y");
      Object object0 = new Object();
      Predicate<Property> predicate0 = Predicate.isEqual(object0);
      property_Builder1.setValidator(predicate0);
      Property property0 = property_Builder1.build();
      boolean boolean0 = property0.isValid();
      assertFalse(boolean0);
      assertFalse(property0.isOptional());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder(false);
      boolean[] booleanArray0 = new boolean[10];
      Property.Builder property_Builder1 = property_Builder0.setValue(booleanArray0);
      assertSame(property_Builder0, property_Builder1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder(true);
      Property.Builder property_Builder1 = property_Builder0.setValue('E');
      assertSame(property_Builder0, property_Builder1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder(true);
      short[] shortArray0 = new short[9];
      Property.Builder property_Builder1 = property_Builder0.setValue(shortArray0);
      assertSame(property_Builder0, property_Builder1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder(false);
      Property.Builder property_Builder1 = property_Builder0.setValue(0.0F);
      assertSame(property_Builder0, property_Builder1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder();
      double[] doubleArray0 = new double[0];
      Property.Builder property_Builder1 = property_Builder0.setValue(doubleArray0);
      assertSame(property_Builder0, property_Builder1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder();
      long[] longArray0 = new long[2];
      Property.Builder property_Builder1 = property_Builder0.setValue(longArray0);
      assertSame(property_Builder1, property_Builder0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder();
      Property.Builder property_Builder1 = property_Builder0.setValue((byte) (-1));
      assertSame(property_Builder1, property_Builder0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder(true);
      int[] intArray0 = new int[5];
      Property.Builder property_Builder1 = property_Builder0.setValue(intArray0);
      assertSame(property_Builder1, property_Builder0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder(false);
      Property.Builder property_Builder1 = property_Builder0.setValue((-329.8019));
      assertSame(property_Builder0, property_Builder1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder();
      Property.Builder property_Builder1 = property_Builder0.setValue("1+[");
      property_Builder0.setKey("%");
      property_Builder0.setDescription("%");
      Property property0 = property_Builder1.build();
      property0.set("");
      assertFalse(property0.isOptional());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder();
      Property.Builder property_Builder1 = property_Builder0.setValue(801L);
      assertSame(property_Builder0, property_Builder1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Property.Builder property_Builder0 = new Property.Builder();
      Property.Builder property_Builder1 = property_Builder0.setValue((short) (-676));
      assertSame(property_Builder0, property_Builder1);
  }
}
