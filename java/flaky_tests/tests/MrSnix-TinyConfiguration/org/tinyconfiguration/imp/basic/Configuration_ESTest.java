/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 12:25:59 GMT 2022
 */

package org.tinyconfiguration.imp.basic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.tinyconfiguration.abc.utils.FormatType;
import org.tinyconfiguration.imp.basic.Configuration;
import org.tinyconfiguration.imp.basic.Property;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Configuration_ESTest extends Configuration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      configuration_Builder0.clear();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder(false);
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      configuration_Builder1.setPathname("Z");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Z/OWE79C3a9LIYo)b");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "org.tinyconfiguration.imp.basic.io.HandlerXML$ImplWriterXML");
      configuration_Builder0.setFilename("OWE79C3a9LIYo)b");
      configuration_Builder1.setVersion("v,JW0C#>WtzWhm5/{&I");
      Configuration configuration0 = configuration_Builder1.build();
      FormatType formatType0 = FormatType.CSV;
      configuration0.read(formatType0);
      assertEquals("Z", configuration0.getPathname());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      configuration_Builder0.setPathname("<");
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setVersion("<");
      Configuration.Builder configuration_Builder2 = configuration_Builder0.setName("<");
      configuration_Builder2.setFilename("<");
      Configuration configuration0 = configuration_Builder1.build();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FormatType formatType0 = FormatType.CSV;
      try { 
        configuration0.write(formatType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setPathname("<");
      configuration_Builder1.setVersion("<");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("</<");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setName("<");
      configuration_Builder2.setFilename("<");
      Configuration configuration0 = configuration_Builder2.build();
      FormatType formatType0 = FormatType.YAML;
      try { 
        configuration0.write(formatType0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder(false);
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      configuration_Builder1.setPathname("Z");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Z/OWE79C3a9LIYo)b");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "org.tinyconfiguration.imp.basic.io.HandlerXML$ImplWriterXML");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      configuration_Builder0.setFilename("OWE79C3a9LIYo)b");
      configuration_Builder1.setVersion("v,JW0C#>WtzWhm5/{&I");
      Configuration configuration0 = configuration_Builder1.build();
      FormatType formatType0 = FormatType.CSV;
      // Undeclared exception!
      try { 
        configuration0.read(formatType0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("java.io.BufferedReader$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      configuration_Builder0.setPathname("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setFilename("Z");
      configuration_Builder1.setVersion("Z");
      Configuration configuration0 = configuration_Builder2.build();
      List<Property> list0 = configuration0.getProperties();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setFilename("Z");
      configuration_Builder1.setVersion("Z");
      // Undeclared exception!
      try { 
        configuration_Builder2.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The pathname must be set!
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      configuration_Builder0.setVersion("Z");
      configuration_Builder0.setName("Z");
      // Undeclared exception!
      try { 
        configuration_Builder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The filename must be set!
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      configuration_Builder0.setName("tkVfh4P/|}A");
      // Undeclared exception!
      try { 
        configuration_Builder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The version must be set!
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      // Undeclared exception!
      try { 
        configuration_Builder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The name must be set!
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      // Undeclared exception!
      try { 
        configuration_Builder0.put((Property) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The property object cannot be null
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      // Undeclared exception!
      try { 
        configuration_Builder0.setPathname("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pathname cannot be empty
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      // Undeclared exception!
      try { 
        configuration_Builder0.setPathname((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The pathname cannot be null
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      // Undeclared exception!
      try { 
        configuration_Builder0.setFilename("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The filename cannot be empty
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      // Undeclared exception!
      try { 
        configuration_Builder0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The filename cannot be null
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      // Undeclared exception!
      try { 
        configuration_Builder0.setVersion("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The version cannot be empty
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      // Undeclared exception!
      try { 
        configuration_Builder0.setVersion((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The version cannot be null
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      // Undeclared exception!
      try { 
        configuration_Builder0.setName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The name cannot be empty
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      // Undeclared exception!
      try { 
        configuration_Builder0.setName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The name cannot be null
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setPathname("Z");
      configuration_Builder2.setFilename("Z");
      configuration_Builder0.setVersion("Z");
      Configuration configuration0 = configuration_Builder1.build();
      FormatType formatType0 = FormatType.YAML;
      Future<Void> future0 = configuration0.writeAsync(formatType0);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder0.setPathname("Z");
      configuration_Builder2.setFilename("Z");
      configuration_Builder1.setVersion("Z");
      Configuration configuration0 = configuration_Builder1.build();
      FormatType formatType0 = FormatType.JSON;
      // Undeclared exception!
      try { 
        configuration0.writeAsync(formatType0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.tinyconfiguration.imp.basic.io.HandlerJSON
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder(false);
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setPathname("Z");
      configuration_Builder2.setFilename("Z");
      configuration_Builder0.setVersion("Z");
      Configuration configuration0 = configuration_Builder1.build();
      FormatType formatType0 = FormatType.XML;
      Future<Void> future0 = configuration0.writeAsync(formatType0);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setPathname("Z");
      configuration_Builder1.setVersion("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder0.setName("Z");
      configuration_Builder2.setFilename("Z");
      Configuration configuration0 = configuration_Builder0.build();
      // Undeclared exception!
      try { 
        configuration0.writeAsync((FormatType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The format type cannot be null
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setPathname("Z");
      configuration_Builder2.setFilename("Z");
      Configuration.Builder configuration_Builder3 = configuration_Builder1.setVersion("Z");
      Configuration configuration0 = configuration_Builder3.build();
      FormatType formatType0 = FormatType.CSV;
      Future<Void> future0 = configuration0.writeAsync(formatType0);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setPathname("<");
      configuration_Builder1.setVersion("<");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setName("<");
      configuration_Builder2.setFilename("<");
      Configuration configuration0 = configuration_Builder2.build();
      FormatType formatType0 = FormatType.YAML;
      // Undeclared exception!
      try { 
        configuration0.write(formatType0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/yaml/snakeyaml/DumperOptions
         //
         verifyException("org.tinyconfiguration.imp.basic.io.HandlerYAML$ImplWriterYAML", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      configuration_Builder0.setPathname("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setFilename("Z");
      configuration_Builder2.setVersion("Z");
      FormatType formatType0 = FormatType.JSON;
      Configuration configuration0 = configuration_Builder0.build();
      // Undeclared exception!
      try { 
        configuration0.write(formatType0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.tinyconfiguration.imp.basic.io.HandlerJSON
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Configuration.Builder configuration_Builder0 = new Configuration.Builder();
          Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
          configuration_Builder0.setPathname("Z");
          Configuration.Builder configuration_Builder2 = configuration_Builder1.setFilename("Z");
          configuration_Builder1.setVersion("Z");
          Configuration configuration0 = configuration_Builder2.build();
          FormatType formatType0 = FormatType.XML;
          // Undeclared exception!
          try { 
            configuration0.write(formatType0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/user/Z/Z\" \"write\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkWrite(SecurityManager.java:752)
             // java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:225)
             // java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:126)
             // java.xml/com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl.getOutputHandler(TransformerImpl.java:514)
             // java.xml/com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl.transform(TransformerImpl.java:355)
             // org.tinyconfiguration.imp.basic.io.HandlerXML$ImplWriterXML.toFile(HandlerXML.java:153)
             // org.tinyconfiguration.imp.basic.io.HandlerXML$ImplWriterXML.write(HandlerXML.java:60)
             // org.tinyconfiguration.imp.basic.Configuration.write(Configuration.java:197)
             // jdk.internal.reflect.GeneratedMethodAccessor78.invoke(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setPathname("Z");
      configuration_Builder1.setFilename("Z");
      configuration_Builder2.setVersion("Z");
      Configuration configuration0 = configuration_Builder2.build();
      // Undeclared exception!
      try { 
        configuration0.write((FormatType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The export format cannot be null
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("K*HtawY9d?yI[");
      Configuration.Builder configuration_Builder2 = configuration_Builder0.setPathname("K*HtawY9d?yI[");
      configuration_Builder2.setFilename("K*HtawY9d?yI[");
      configuration_Builder1.setVersion("K*HtawY9d?yI[");
      FormatType formatType0 = FormatType.YAML;
      Configuration configuration0 = configuration_Builder1.build();
      Future<Void> future0 = configuration0.readAsync(formatType0);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("h<");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setPathname("h<");
      Configuration.Builder configuration_Builder3 = configuration_Builder2.setFilename("h<");
      configuration_Builder2.setVersion("h<");
      Configuration configuration0 = configuration_Builder3.build();
      FormatType formatType0 = FormatType.JSON;
      // Undeclared exception!
      try { 
        configuration0.readAsync(formatType0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.tinyconfiguration.imp.basic.io.HandlerJSON
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder0.setPathname("Z");
      Configuration.Builder configuration_Builder3 = configuration_Builder2.setFilename("Z");
      configuration_Builder1.setVersion("Z");
      Configuration configuration0 = configuration_Builder3.build();
      FormatType formatType0 = FormatType.XML;
      Future<Void> future0 = configuration0.readAsync(formatType0);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setPathname("h");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setVersion("h");
      Configuration.Builder configuration_Builder3 = configuration_Builder2.setName("h");
      configuration_Builder0.setFilename("h");
      Configuration configuration0 = configuration_Builder3.build();
      // Undeclared exception!
      try { 
        configuration0.readAsync((FormatType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The export format cannot be null
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder(false);
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("S'Q=");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setPathname("Z");
      Configuration.Builder configuration_Builder3 = configuration_Builder2.setFilename("Z");
      configuration_Builder3.setVersion("}KY '!EE");
      Configuration configuration0 = configuration_Builder0.build();
      FormatType formatType0 = FormatType.CSV;
      Future<Void> future0 = configuration0.readAsync(formatType0);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setPathname("Z");
      configuration_Builder2.setFilename("Z");
      Configuration.Builder configuration_Builder3 = configuration_Builder1.setVersion("Z");
      Configuration configuration0 = configuration_Builder3.build();
      FormatType formatType0 = FormatType.CSV;
      try { 
        configuration0.read(formatType0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder(false);
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("S'Q=");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setPathname("Z");
      Configuration.Builder configuration_Builder3 = configuration_Builder2.setFilename("Z");
      configuration_Builder3.setVersion("}KY '!EE");
      Configuration configuration0 = configuration_Builder0.build();
      FormatType formatType0 = FormatType.JSON;
      // Undeclared exception!
      try { 
        configuration0.read(formatType0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.tinyconfiguration.imp.basic.io.HandlerJSON
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setPathname("Z");
      configuration_Builder2.setFilename("Z");
      configuration_Builder0.setVersion("Z");
      Configuration configuration0 = configuration_Builder1.build();
      FormatType formatType0 = FormatType.XML;
      try { 
        configuration0.read(formatType0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /home/user/Z/Z (No such file or directory)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setPathname("%");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setVersion("%");
      configuration_Builder1.setName("%");
      configuration_Builder2.setFilename("%");
      Configuration configuration0 = configuration_Builder0.build();
      // Undeclared exception!
      try { 
        configuration0.read((FormatType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The export format cannot be null
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder(false);
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setPathname("Z");
      configuration_Builder2.setFilename("Z");
      configuration_Builder0.setVersion("Z");
      Configuration configuration0 = configuration_Builder1.build();
      FormatType formatType0 = FormatType.YAML;
      // Undeclared exception!
      try { 
        configuration0.read(formatType0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/yaml/snakeyaml/Yaml
         //
         verifyException("org.tinyconfiguration.imp.basic.io.HandlerYAML$ImplReaderYAML", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder0.setPathname("Z");
      Configuration.Builder configuration_Builder3 = configuration_Builder2.setFilename("Z");
      configuration_Builder1.setVersion("Z");
      Configuration configuration0 = configuration_Builder3.build();
      // Undeclared exception!
      try { 
        configuration0.contains("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key cannot be empty
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      configuration_Builder0.setPathname("Z");
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setVersion("Z");
      configuration_Builder1.setName("Z");
      configuration_Builder1.setFilename("Z");
      Configuration configuration0 = configuration_Builder0.build();
      // Undeclared exception!
      try { 
        configuration0.contains((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The key cannot be null
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder(false);
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setPathname("Z");
      configuration_Builder0.setFilename("OWE79C3a9LIYo)b");
      configuration_Builder0.setVersion("Z");
      Configuration configuration0 = configuration_Builder2.build();
      boolean boolean0 = configuration0.contains("T:Y(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setPathname("Z");
      configuration_Builder1.setFilename("Z");
      Configuration.Builder configuration_Builder3 = configuration_Builder2.setVersion("Z");
      Property property0 = mock(Property.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(property0).toString();
      doReturn("Z", "Z").when(property0).getKey();
      Configuration.Builder configuration_Builder4 = configuration_Builder3.put(property0);
      Configuration configuration0 = configuration_Builder4.build();
      Property property1 = configuration0.get("Z");
      assertNull(property1.getDescription());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("K*HtawY9d?yI[");
      Configuration.Builder configuration_Builder2 = configuration_Builder0.setPathname("K*HtawY9d?yI[");
      configuration_Builder2.setFilename("K*HtawY9d?yI[");
      configuration_Builder1.setVersion("K*HtawY9d?yI[");
      Configuration configuration0 = configuration_Builder2.build();
      // Undeclared exception!
      try { 
        configuration0.get("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key cannot be empty
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder0.setPathname("Z");
      Configuration.Builder configuration_Builder3 = configuration_Builder2.setFilename("Z");
      configuration_Builder1.setVersion("Z");
      Configuration configuration0 = configuration_Builder3.build();
      // Undeclared exception!
      try { 
        configuration0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The key cannot be null
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setPathname("Z");
      configuration_Builder1.setFilename("Z");
      configuration_Builder2.setVersion("Z");
      Configuration configuration0 = configuration_Builder2.build();
      // Undeclared exception!
      try { 
        configuration0.get("Z");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // The following key does not exists: Z
         //
         verifyException("org.tinyconfiguration.imp.basic.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      configuration_Builder0.setPathname("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setFilename("Z");
      configuration_Builder2.setVersion("Z");
      Configuration configuration0 = configuration_Builder1.build();
      configuration0.clear();
      assertEquals("Z", configuration0.getName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder();
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      configuration_Builder0.setPathname("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setFilename("Z");
      configuration_Builder1.setVersion("Z");
      Configuration configuration0 = configuration_Builder2.build();
      FormatType formatType0 = FormatType.CSV;
      configuration0.write(formatType0);
      assertFalse(configuration0.exist());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Configuration.Builder configuration_Builder0 = new Configuration.Builder(false);
      Configuration.Builder configuration_Builder1 = configuration_Builder0.setName("Z");
      Configuration.Builder configuration_Builder2 = configuration_Builder1.setPathname("Z");
      Configuration.Builder configuration_Builder3 = configuration_Builder2.setFilename("Z");
      Configuration.Builder configuration_Builder4 = configuration_Builder3.setVersion("Z");
      Configuration configuration0 = configuration_Builder4.build();
      boolean boolean0 = configuration0.isEmpty();
      assertTrue(boolean0);
  }
}
