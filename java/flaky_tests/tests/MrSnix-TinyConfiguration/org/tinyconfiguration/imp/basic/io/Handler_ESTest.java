/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 12:37:20 GMT 2022
 */

package org.tinyconfiguration.imp.basic.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.tinyconfiguration.imp.basic.Configuration;
import org.tinyconfiguration.imp.basic.Property;
import org.tinyconfiguration.imp.basic.io.Handler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Handler_ESTest extends Handler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Property property0 = mock(Property.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Handler.Internal.__empty_array(property0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.tinyconfiguration.imp.basic.io.Handler$1
         //
         verifyException("org.tinyconfiguration.imp.basic.io.Handler$Internal", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Property property0 = mock(Property.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Handler.Internal.__decode_value(property0, "T |a5");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.tinyconfiguration.imp.basic.io.Handler$1
         //
         verifyException("org.tinyconfiguration.imp.basic.io.Handler$Internal", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn("\"").when(configuration0).getName();
      doReturn((String) null, (String) null).when(configuration0).getVersion();
      try { 
        Handler.Internal.__decode_header(configuration0, "\"", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The configuration version does not match, expecting \"null\" but \"\" was provided
         //
         verifyException("org.tinyconfiguration.imp.basic.io.Handler$Internal", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(configuration0).getName();
      try { 
        Handler.Internal.__decode_header(configuration0, "+zD9H|&cwb", "org.tinyconfiguration.abc.AbstractConfiguration");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The configuration name does not match, expecting \"null\" but \"+zD9H|&cwb\" was provided
         //
         verifyException("org.tinyconfiguration.imp.basic.io.Handler$Internal", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      try { 
        Handler.Internal.__decode_header((Configuration) null, "K^m1?Y9e#Zg$", (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The configuration is missing the following identifier: version
         //
         verifyException("org.tinyconfiguration.imp.basic.io.Handler$Internal", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      try { 
        Handler.Internal.__decode_header((Configuration) null, (String) null, "FBP3y6Sv");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The configuration is missing the following identifier: name
         //
         verifyException("org.tinyconfiguration.imp.basic.io.Handler$Internal", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn("\"").when(configuration0).getName();
      doReturn("\"").when(configuration0).getVersion();
      Handler.Internal.__decode_header(configuration0, "\"", "\"");
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Handler handler0 = new Handler();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Handler.Internal.YAML handler_Internal_YAML0 = new Handler.Internal.YAML();
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Handler.Internal handler_Internal0 = new Handler.Internal();
  }
}
