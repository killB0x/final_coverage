/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 12:23:05 GMT 2022
 */

package org.tinyconfiguration.abc.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.tinyconfiguration.abc.data.Datatype;
import org.tinyconfiguration.abc.data.Value;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Value_ESTest extends Value_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      value0.isArray();
      assertEquals(Datatype.UNKNOWN, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      value0.getType();
      assertEquals(Datatype.UNKNOWN, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      Datatype datatype0 = value0.getDatatype();
      assertEquals(Datatype.UNKNOWN, datatype0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Value value0 = new Value();
      short[] shortArray0 = value0.asShortArray();
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Value value0 = new Value();
      long[] longArray0 = value0.asLongArray();
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Value value0 = new Value();
      float[] floatArray0 = value0.asFloatArray();
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Value value0 = new Value();
      double[] doubleArray0 = value0.asDoubleArray();
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Value value0 = new Value();
      char[] charArray0 = value0.asCharacterArray();
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Value value0 = new Value();
      byte[] byteArray0 = value0.asByteArray();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Value value0 = new Value(byte0);
      value0.asByte();
      assertEquals(Datatype.BYTE, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Byte byte0 = new Byte((byte)72);
      Value value0 = new Value(byte0);
      value0.asByte();
      assertEquals(Datatype.BYTE, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-39));
      Value value0 = new Value(byte0);
      value0.asByte();
      assertEquals(Datatype.BYTE, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Value value0 = new Value();
      boolean[] booleanArray0 = value0.asBooleanArray();
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isTextArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isStringArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isShortArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isShort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isNumericArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isNumeric();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isLongArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isIntegerArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isInteger();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isFloatArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isDoubleArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isCharacterArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isCharacter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isBooleanArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isBoolean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.asStringArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      // Undeclared exception!
      try { 
        value0.asShort();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.Short (java.lang.Object and java.lang.Short are in module java.base of loader 'bootstrap')
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      // Undeclared exception!
      try { 
        value0.asLong();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.Long (java.lang.Object and java.lang.Long are in module java.base of loader 'bootstrap')
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      // Undeclared exception!
      try { 
        value0.asIntArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class [I (java.lang.Object and [I are in module java.base of loader 'bootstrap')
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.asInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.asFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.asDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.asCharacter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.asByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.asBoolean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Value value0 = null;
      try {
        value0 = new Value((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tinyconfiguration.abc.data.base.AbstractValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      boolean boolean0 = value0.isText();
      assertEquals(Datatype.UNKNOWN, value0.getDatatype());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Value value0 = new Value("2");
      boolean boolean0 = value0.isText();
      assertEquals(Datatype.STRING, value0.getDatatype());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Byte byte0 = new Byte((byte)100);
      Value value0 = new Value(byte0);
      boolean boolean0 = value0.isNumeric();
      assertEquals(Datatype.BYTE, value0.getDatatype());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      boolean boolean0 = value0.isNumeric();
      assertFalse(boolean0);
      assertEquals(Datatype.UNKNOWN, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Value value0 = new Value("2");
      value0.isStringArray();
      assertEquals(Datatype.STRING, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Value value0 = new Value("");
      boolean boolean0 = value0.isString();
      assertEquals(Datatype.STRING, value0.getDatatype());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      value0.isString();
      assertEquals(Datatype.UNKNOWN, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Byte byte0 = new Byte((byte)100);
      Value value0 = new Value(byte0);
      value0.isCharacterArray();
      assertEquals(Datatype.BYTE, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Value value0 = new Value();
      Value value1 = new Value(value0);
      boolean boolean0 = value1.isCharacter();
      assertEquals(Datatype.UNKNOWN, value1.getDatatype());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      value0.isBooleanArray();
      assertEquals(Datatype.UNKNOWN, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Value value0 = new Value("");
      boolean boolean0 = value0.isBoolean();
      assertFalse(boolean0);
      assertEquals(Datatype.STRING, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      value0.isDoubleArray();
      assertEquals(Datatype.UNKNOWN, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      boolean boolean0 = value0.isDouble();
      assertEquals(Datatype.UNKNOWN, value0.getDatatype());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      value0.isFloatArray();
      assertEquals(Datatype.UNKNOWN, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      boolean boolean0 = value0.isFloat();
      assertEquals(Datatype.UNKNOWN, value0.getDatatype());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      value0.isLongArray();
      assertEquals(Datatype.UNKNOWN, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Byte byte0 = new Byte((byte)64);
      Value value0 = new Value(byte0);
      boolean boolean0 = value0.isLong();
      assertFalse(boolean0);
      assertEquals(Datatype.BYTE, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      value0.isIntegerArray();
      assertEquals(Datatype.UNKNOWN, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Value value0 = new Value("2");
      boolean boolean0 = value0.isInteger();
      assertEquals(Datatype.STRING, value0.getDatatype());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      value0.isShortArray();
      assertEquals(Datatype.UNKNOWN, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Byte byte0 = new Byte((byte)72);
      Value value0 = new Value(byte0);
      boolean boolean0 = value0.isShort();
      assertFalse(boolean0);
      assertEquals(Datatype.BYTE, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      Value value0 = new Value(byte0);
      value0.isByteArray();
      assertEquals(Datatype.BYTE, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-39));
      Value value0 = new Value(byte0);
      boolean boolean0 = value0.isByte();
      assertEquals(Datatype.BYTE, value0.getDatatype());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      boolean boolean0 = value0.isByte();
      assertEquals(Datatype.UNKNOWN, value0.getDatatype());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.isArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      // Undeclared exception!
      try { 
        value0.asByte();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.Byte (java.lang.Object and java.lang.Byte are in module java.base of loader 'bootstrap')
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Byte byte0 = new Byte((byte)100);
      Value value0 = new Value(byte0);
      value0.asStringArray();
      assertEquals(Datatype.BYTE, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Value value0 = new Value("");
      value0.asStringArray();
      assertEquals(Datatype.STRING, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Value value0 = new Value();
      String string0 = value0.asString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Value value0 = new Value("");
      value0.asString();
      assertEquals(Datatype.STRING, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Byte byte0 = new Byte((byte)100);
      Value value0 = new Value(byte0);
      boolean boolean0 = value0.isTextArray();
      assertEquals(Datatype.BYTE, value0.getDatatype());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      boolean boolean0 = value0.isNumericArray();
      assertEquals(Datatype.UNKNOWN, value0.getDatatype());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      String[] stringArray0 = value0.asStringArray();
      assertNull(stringArray0);
      assertEquals(Datatype.UNKNOWN, value0.getDatatype());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      // Undeclared exception!
      try { 
        value0.asCharacterArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class [C (java.lang.Object and [C are in module java.base of loader 'bootstrap')
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Value value0 = new Value();
      int[] intArray0 = value0.asIntArray();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      // Undeclared exception!
      try { 
        value0.asCharacter();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.Character (java.lang.Object and java.lang.Character are in module java.base of loader 'bootstrap')
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      // Undeclared exception!
      try { 
        value0.asBoolean();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.Boolean (java.lang.Object and java.lang.Boolean are in module java.base of loader 'bootstrap')
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      // Undeclared exception!
      try { 
        value0.asDoubleArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class [D (java.lang.Object and [D are in module java.base of loader 'bootstrap')
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      // Undeclared exception!
      try { 
        value0.asLongArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class [J (java.lang.Object and [J are in module java.base of loader 'bootstrap')
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      // Undeclared exception!
      try { 
        value0.asFloatArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class [F (java.lang.Object and [F are in module java.base of loader 'bootstrap')
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      // Undeclared exception!
      try { 
        value0.asInt();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.Integer (java.lang.Object and java.lang.Integer are in module java.base of loader 'bootstrap')
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Byte byte0 = new Byte((byte)100);
      Value value0 = new Value(byte0);
      String string0 = value0.asString();
      assertEquals(Datatype.BYTE, value0.getDatatype());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.asLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      // Undeclared exception!
      try { 
        value0.asByteArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class [B (java.lang.Object and [B are in module java.base of loader 'bootstrap')
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      // Undeclared exception!
      try { 
        value0.asBooleanArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class [Z (java.lang.Object and [Z are in module java.base of loader 'bootstrap')
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try { 
        value0.asShort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Object object0 = new Object();
      Value value0 = new Value(object0);
      // Undeclared exception!
      try { 
        value0.asDouble();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.Double (java.lang.Object and java.lang.Double are in module java.base of loader 'bootstrap')
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Byte byte0 = new Byte((byte)100);
      Value value0 = new Value(byte0);
      // Undeclared exception!
      try { 
        value0.asFloat();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Byte cannot be cast to class java.lang.Float (java.lang.Byte and java.lang.Float are in module java.base of loader 'bootstrap')
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Value value0 = new Value();
      value0.getDatatype();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Value value0 = new Value("");
      // Undeclared exception!
      try { 
        value0.asShortArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.String cannot be cast to class [S (java.lang.String and [S are in module java.base of loader 'bootstrap')
         //
         verifyException("org.tinyconfiguration.abc.data.Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Value value0 = new Value();
      Class<?> class0 = value0.getType();
      assertNull(class0);
  }
}
