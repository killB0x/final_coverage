/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 12:27:01 GMT 2022
 */

package org.tinyconfiguration.abc.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.tinyconfiguration.abc.utils.SpecialCharacters;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SpecialCharacters_ESTest extends SpecialCharacters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SpecialCharacters[] specialCharactersArray0 = SpecialCharacters.values();
      assertEquals(0, specialCharactersArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SpecialCharacters.Type specialCharacters_Type0 = SpecialCharacters.Type.ARR_DECODE;
      // Undeclared exception!
      try { 
        SpecialCharacters.substitute(specialCharacters_Type0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tinyconfiguration.abc.utils.SpecialCharacters", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SpecialCharacters.Type specialCharacters_Type0 = SpecialCharacters.Type.STR_DECODE;
      String string0 = SpecialCharacters.substitute(specialCharacters_Type0, ";:nF\u0004IC(&8<bLg");
      assertEquals(";:nF\u0004IC(&8<bLg", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SpecialCharacters.Type specialCharacters_Type0 = SpecialCharacters.Type.STR_ENCODE;
      String string0 = SpecialCharacters.substitute(specialCharacters_Type0, "+8[k#E<wGH");
      assertEquals("+8[k#E<wGH", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SpecialCharacters.Type specialCharacters_Type0 = SpecialCharacters.Type.ARR_ENCODE;
      String string0 = SpecialCharacters.substitute(specialCharacters_Type0, ";_nF\u0004IC(&8<bLIg");
      assertEquals(";_nF\u0004IC(&8<bLIg", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SpecialCharacters.Type specialCharacters_Type0 = SpecialCharacters.Type.ARR_DECODE;
      String string0 = SpecialCharacters.substitute(specialCharacters_Type0, "");
      assertEquals("", string0);
  }
}
