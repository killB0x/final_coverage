/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 09:34:12 GMT 2022
 */

package net.openhft.chronicle.jlbh;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Duration;
import java.util.Map;
import net.openhft.chronicle.jlbh.ImmutableRunResult;
import net.openhft.chronicle.jlbh.JLBHResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ImmutableRunResult_ESTest extends ImmutableRunResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ImmutableRunResult immutableRunResult0 = new ImmutableRunResult(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ImmutableRunResult immutableRunResult0 = new ImmutableRunResult(doubleArray0);
      Duration duration0 = immutableRunResult0.get999thPercentile();
      assertNull(duration0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ImmutableRunResult immutableRunResult0 = new ImmutableRunResult(doubleArray0);
      Duration duration0 = immutableRunResult0.get9999thPercentile();
      assertNull(duration0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImmutableRunResult immutableRunResult0 = null;
      try {
        immutableRunResult0 = new ImmutableRunResult((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.openhft.chronicle.jlbh.ImmutableRunResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ImmutableRunResult immutableRunResult0 = null;
      try {
        immutableRunResult0 = new ImmutableRunResult(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.openhft.chronicle.jlbh.ImmutableRunResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ImmutableRunResult immutableRunResult0 = new ImmutableRunResult(doubleArray0);
      Object object0 = new Object();
      boolean boolean0 = immutableRunResult0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ImmutableRunResult immutableRunResult0 = new ImmutableRunResult(doubleArray0);
      boolean boolean0 = immutableRunResult0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ImmutableRunResult immutableRunResult0 = new ImmutableRunResult(doubleArray0);
      boolean boolean0 = immutableRunResult0.equals(immutableRunResult0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ImmutableRunResult immutableRunResult0 = new ImmutableRunResult(doubleArray0);
      ImmutableRunResult immutableRunResult1 = new ImmutableRunResult(doubleArray0);
      boolean boolean0 = immutableRunResult0.equals(immutableRunResult1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ImmutableRunResult immutableRunResult0 = new ImmutableRunResult(doubleArray0);
      immutableRunResult0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      ImmutableRunResult immutableRunResult0 = new ImmutableRunResult(doubleArray0);
      Duration duration0 = immutableRunResult0.get9999thPercentile();
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ImmutableRunResult immutableRunResult0 = new ImmutableRunResult(doubleArray0);
      Duration duration0 = immutableRunResult0.get90thPercentile();
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ImmutableRunResult immutableRunResult0 = new ImmutableRunResult(doubleArray0);
      Duration duration0 = immutableRunResult0.getWorst();
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      ImmutableRunResult immutableRunResult0 = new ImmutableRunResult(doubleArray0);
      Duration duration0 = immutableRunResult0.get50thPercentile();
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      ImmutableRunResult immutableRunResult0 = new ImmutableRunResult(doubleArray0);
      String string0 = immutableRunResult0.toString();
      assertEquals("ImmutableRunResult{percentiles={PERCENTILE_50TH=PT0S, PERCENTILE_90TH=PT0S, PERCENTILE_99TH=PT0S, PERCENTILE_99_7TH=PT0S, PERCENTILE_99_9TH=PT0S, PERCENTILE_99_97TH=PT0S, PERCENTILE_99_99TH=PT0S, WORST=PT0S}}", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ImmutableRunResult immutableRunResult0 = new ImmutableRunResult(doubleArray0);
      Duration duration0 = immutableRunResult0.get999thPercentile();
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ImmutableRunResult immutableRunResult0 = new ImmutableRunResult(doubleArray0);
      Duration duration0 = immutableRunResult0.get99thPercentile();
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ImmutableRunResult immutableRunResult0 = new ImmutableRunResult(doubleArray0);
      Map<JLBHResult.RunResult.Percentile, Duration> map0 = immutableRunResult0.percentiles();
      assertEquals(8, map0.size());
  }
}
