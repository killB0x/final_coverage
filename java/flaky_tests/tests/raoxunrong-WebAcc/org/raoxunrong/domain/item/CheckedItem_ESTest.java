/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 23:06:18 GMT 2022
 */

package org.raoxunrong.domain.item;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.raoxunrong.check.CheckType;
import org.raoxunrong.domain.item.CheckedItem;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CheckedItem_ESTest extends CheckedItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CheckType checkType0 = CheckType.AccessibilityCheck;
      Integer integer0 = new Integer(0);
      CheckedItem<Integer> checkedItem0 = new CheckedItem<Integer>((String) null, false, integer0, checkType0);
      boolean boolean0 = checkedItem0.isPass();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(824);
      CheckType checkType0 = CheckType.SpellingCheck;
      CheckedItem<Integer> checkedItem0 = new CheckedItem<Integer>((String) null, false, integer0, checkType0);
      checkedItem0.getItemName();
      assertFalse(checkedItem0.isPass());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-316));
      CheckType checkType0 = CheckType.AccessibilityCheck;
      CheckedItem<Object> checkedItem0 = new CheckedItem<Object>("W58N", true, integer0, checkType0);
      checkedItem0.getItemName();
      assertTrue(checkedItem0.isPass());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      CheckedItem<Object> checkedItem0 = new CheckedItem<Object>("ffY.c", false, object0, (CheckType) null);
      checkedItem0.getCheckType();
      assertFalse(checkedItem0.isPass());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      CheckType checkType0 = CheckType.AccessibilityCheck;
      CheckedItem<Integer> checkedItem0 = new CheckedItem<Integer>((String) null, false, integer0, checkType0);
      // Undeclared exception!
      try { 
        checkedItem0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.raoxunrong.domain.item.CheckedItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CheckType checkType0 = CheckType.SpellingCheck;
      CheckedItem<Integer> checkedItem0 = new CheckedItem<Integer>((String) null, false, (Integer) null, checkType0);
      CheckedItem<CheckedItem<Integer>> checkedItem1 = new CheckedItem<CheckedItem<Integer>>((String) null, false, checkedItem0, checkType0);
      // Undeclared exception!
      try { 
        checkedItem1.equals(checkedItem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CheckType checkType0 = CheckType.AccessibilityCheck;
      CheckedItem<Object> checkedItem0 = new CheckedItem<Object>((String) null, false, (Object) null, checkType0);
      CheckedItem<CheckedItem<Object>> checkedItem1 = new CheckedItem<CheckedItem<Object>>("", false, checkedItem0, checkType0);
      boolean boolean0 = checkedItem1.equals(checkedItem0);
      assertFalse(boolean0);
      assertFalse(checkedItem1.isPass());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CheckType checkType0 = CheckType.SpellingCheck;
      CheckedItem<Object> checkedItem0 = new CheckedItem<Object>("", true, "", checkType0);
      CheckedItem<Object> checkedItem1 = new CheckedItem<Object>("", true, checkedItem0, checkType0);
      Object object0 = checkedItem1.getAdditionalInfo();
      Integer integer0 = new Integer(878);
      CheckedItem<Integer> checkedItem2 = new CheckedItem<Integer>("", true, integer0, checkType0);
      boolean boolean0 = checkedItem2.equals(object0);
      assertTrue(checkedItem2.isPass());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CheckType checkType0 = CheckType.SpellingCheck;
      CheckedItem<Object> checkedItem0 = new CheckedItem<Object>("", true, "", checkType0);
      boolean boolean0 = checkedItem0.equals(checkedItem0);
      assertTrue(checkedItem0.isPass());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CheckType checkType0 = CheckType.SpellingCheck;
      CheckedItem<Object> checkedItem0 = new CheckedItem<Object>("", true, "", checkType0);
      Object object0 = checkedItem0.getAdditionalInfo();
      Integer integer0 = new Integer(878);
      CheckedItem<Integer> checkedItem1 = new CheckedItem<Integer>("", true, integer0, checkType0);
      boolean boolean0 = checkedItem1.equals(object0);
      assertFalse(boolean0);
      assertTrue(checkedItem1.isPass());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CheckType checkType0 = CheckType.SpellingCheck;
      CheckedItem<Object> checkedItem0 = new CheckedItem<Object>("", true, "", checkType0);
      boolean boolean0 = checkedItem0.isPass();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CheckType checkType0 = CheckType.SpellingCheck;
      CheckedItem<Object> checkedItem0 = new CheckedItem<Object>("", true, "", checkType0);
      CheckType checkType1 = checkedItem0.getCheckType();
      CheckedItem<Object> checkedItem1 = new CheckedItem<Object>("w$u%388V2.", true, (Object) null, checkType1);
      checkedItem1.getAdditionalInfo();
      assertTrue(checkedItem1.isPass());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CheckType checkType0 = CheckType.SpellingCheck;
      CheckedItem<Object> checkedItem0 = new CheckedItem<Object>("", true, "", checkType0);
      checkedItem0.getItemName();
      assertTrue(checkedItem0.isPass());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CheckType checkType0 = CheckType.SpellingCheck;
      CheckedItem<Object> checkedItem0 = new CheckedItem<Object>("", true, "", checkType0);
      checkedItem0.hashCode();
      assertTrue(checkedItem0.isPass());
  }
}
