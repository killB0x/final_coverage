/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 19:27:40 GMT 2022
 */

package org.yamcs.jsle.udpslebridge;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.yamcs.jsle.provider.CltuServiceProvider;
import org.yamcs.jsle.provider.FrameSink;
import org.yamcs.jsle.udpslebridge.UdpFrameSink;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UdpFrameSink_ESTest extends UdpFrameSink_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UdpFrameSink udpFrameSink0 = new UdpFrameSink(")%i3m~$u", 1247, (-945));
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        udpFrameSink0.throwEvent((-1), byteArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UdpFrameSink udpFrameSink0 = new UdpFrameSink("bzN.Gq M#UPAq", 0, 1899);
      byte[] byteArray0 = new byte[6];
      udpFrameSink0.startup();
      FrameSink.UplinkResult frameSink_UplinkResult0 = udpFrameSink0.uplink(byteArray0);
      assertNotNull(frameSink_UplinkResult0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UdpFrameSink udpFrameSink0 = new UdpFrameSink("uD3 1V|,1vX?=7o", 11, 11);
      udpFrameSink0.startup();
      udpFrameSink0.shutdown();
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        udpFrameSink0.uplink(byteArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UdpFrameSink udpFrameSink0 = new UdpFrameSink("uJlJl*Ca}V+", (-244), (-244));
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        udpFrameSink0.uplink(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-244
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UdpFrameSink udpFrameSink0 = new UdpFrameSink("uD3 1V|,1vX?=7o", 0, 0);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        udpFrameSink0.uplink(byteArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.yamcs.jsle.udpslebridge.UdpFrameSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UdpFrameSink udpFrameSink0 = new UdpFrameSink("uD3 1V|,1vX?=7o", 127, 127);
      // Undeclared exception!
      try { 
        udpFrameSink0.throwEvent(127, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Properties properties0 = new Properties();
      UdpFrameSink udpFrameSink0 = null;
      try {
        udpFrameSink0 = new UdpFrameSink(properties0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find property 'fsink..host'
         //
         verifyException("org.yamcs.jsle.udpslebridge.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UdpFrameSink udpFrameSink0 = new UdpFrameSink("Sending UDP CLTU ", 1, (-1970));
      udpFrameSink0.shutdown();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UdpFrameSink udpFrameSink0 = new UdpFrameSink("bzN.Gq M#UPAq", 0, 1899);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        udpFrameSink0.uplink(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.yamcs.jsle.udpslebridge.UdpFrameSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UdpFrameSink udpFrameSink0 = null;
      try {
        udpFrameSink0 = new UdpFrameSink((Properties) null, "org.yamcs.jsle.udpslebridge.UdpFrameSink");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.yamcs.jsle.udpslebridge.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UdpFrameSink udpFrameSink0 = new UdpFrameSink("uD3 1V|,1vX?=7o", 0, 0);
      // Undeclared exception!
      try { 
        udpFrameSink0.start((CltuServiceProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.yamcs.jsle.udpslebridge.UdpFrameSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UdpFrameSink udpFrameSink0 = new UdpFrameSink("bzN.Gq M#UPAq", 0, 1899);
      int int0 = udpFrameSink0.stop((CltuServiceProvider) null);
      assertEquals((-1), int0);
  }
}
