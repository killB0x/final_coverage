/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 19:19:13 GMT 2022
 */

package org.yamcs.jsle.udpslebridge;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.UncheckedIOException;
import java.nio.file.Path;
import java.util.Calendar;
import java.util.NoSuchElementException;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.yamcs.jsle.udpslebridge.FrameFileIterator;
import org.yamcs.jsle.udpslebridge.TimestampedFrameData;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FrameFileIterator_ESTest extends FrameFileIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FrameFileIterator frameFileIterator0 = new FrameFileIterator("QL@F+zS1", 2L, 30L);
      File file0 = MockFile.createTempFile("QL@F+zS1", "QL@F+zS1");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      frameFileIterator0.currentFile = (FileInputStream) mockFileInputStream0;
      boolean boolean0 = frameFileIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FrameFileIterator frameFileIterator0 = new FrameFileIterator("QL@F+zS1", 2L, 30L);
      Path path0 = frameFileIterator0.searchNextDay();
      assertNull(path0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FrameFileIterator frameFileIterator0 = new FrameFileIterator("", 1L, 0L);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      String string0 = frameFileIterator0.getDir(calendar0);
      assertEquals("2014-02-14", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FrameFileIterator frameFileIterator0 = new FrameFileIterator("l=>9+9pO*Wrb", 857L, 857L);
      // Undeclared exception!
      try { 
        frameFileIterator0.readFrame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.yamcs.jsle.udpslebridge.FrameFileIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FrameFileIterator frameFileIterator0 = new FrameFileIterator("NX5W+{|w`k.", (-1570L), (-1570L));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      frameFileIterator0.currentFile = (FileInputStream) mockFileInputStream0;
      // Undeclared exception!
      try { 
        frameFileIterator0.readFrame();
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.yamcs.jsle.udpslebridge.FrameFileIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FrameFileIterator frameFileIterator0 = new FrameFileIterator("CP.Y(_UWO$f", 1L, 1L);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      frameFileIterator0.currentFile = (FileInputStream) mockFileInputStream0;
      // Undeclared exception!
      try { 
        frameFileIterator0.hasNext();
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.yamcs.jsle.udpslebridge.FrameFileIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FrameFileIterator frameFileIterator0 = new FrameFileIterator("'Mk!B*xUXkEN+5~<Z", 0L, 0L);
      // Undeclared exception!
      try { 
        frameFileIterator0.getDir((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FrameFileIterator frameFileIterator0 = new FrameFileIterator(":", (-28L), (-28L));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(12, 12, (-78));
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        frameFileIterator0.getDir(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FrameFileIterator frameFileIterator0 = null;
      try {
        frameFileIterator0 = new FrameFileIterator((String) null, (-426L), (-426L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FrameFileIterator frameFileIterator0 = new FrameFileIterator("QL@F+zS1", (-426L), (-426L));
      File file0 = MockFile.createTempFile("QL@F+zS1", "QL@F+zS1");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      frameFileIterator0.currentFile = (FileInputStream) mockFileInputStream0;
      TimestampedFrameData timestampedFrameData0 = frameFileIterator0.readFrame();
      assertNull(timestampedFrameData0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FrameFileIterator frameFileIterator0 = new FrameFileIterator("org.yamcs.jsle.udpslebridge.FrameFileIterator", 25L, 345600000L);
      boolean boolean0 = frameFileIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FrameFileIterator frameFileIterator0 = new FrameFileIterator("QL@F+zS1", (-426L), (-426L));
      // Undeclared exception!
      try { 
        frameFileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.yamcs.jsle.udpslebridge.FrameFileIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FrameFileIterator frameFileIterator0 = new FrameFileIterator("&:QPV= }T", 821L, 821L);
      byte[] byteArray0 = new byte[0];
      TimestampedFrameData timestampedFrameData0 = new TimestampedFrameData(821L, 1, byteArray0);
      frameFileIterator0.currentFrame = timestampedFrameData0;
      TimestampedFrameData timestampedFrameData1 = frameFileIterator0.next();
      assertSame(timestampedFrameData1, timestampedFrameData0);
  }
}
