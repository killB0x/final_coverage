/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 19:29:51 GMT 2022
 */

package org.yamcs.jsle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.yamcs.jsle.ParameterName;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ParameterName_ESTest extends ParameterName_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ParameterName[] parameterNameArray0 = ParameterName.values();
      assertEquals(56, parameterNameArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ParameterName parameterName0 = ParameterName.valueOf("blockingTimeoutPeriod");
      assertEquals("Period (in milliseconds) from inserting the first Packet into theFrame Data Unit until this unit is passed to the FOP regardless ofthe number of Packets contained; this timeout period is applicableto all blocking regardless of the specific MAP. ", parameterName0.getDescription());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ParameterName parameterName0 = ParameterName.valueOf("vcMuxControl");
      assertEquals(ParameterName.vcMuxControl, parameterName0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ParameterName parameterName0 = ParameterName.byId(0);
      int int0 = parameterName0.id();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ParameterName parameterName0 = ParameterName.byId(302);
      assertEquals(ParameterName.permittedFrameQuality, parameterName0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        ParameterName.byId(42);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid id 42
         //
         verifyException("org.yamcs.jsle.ParameterName", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ParameterName parameterName0 = ParameterName.notificationMode;
      int int0 = parameterName0.id();
      assertEquals(205, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ParameterName parameterName0 = ParameterName.blockingTimeoutPeriod;
      String string0 = parameterName0.getDescription();
      assertEquals("Period (in milliseconds) from inserting the first Packet into theFrame Data Unit until this unit is passed to the FOP regardless ofthe number of Packets contained; this timeout period is applicableto all blocking regardless of the specific MAP. ", string0);
  }
}
