/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 22:22:58 GMT 2022
 */

package uk.ziglio.construct.protocols.layer3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ziglio.construct.core.Construct;
import uk.ziglio.construct.core.PassClass;
import uk.ziglio.construct.protocols.layer3.ipv6;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ipv6_ESTest extends ipv6_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      ipv6.ipv6_header = (Construct) passClass0;
      String[] stringArray0 = new String[9];
      ipv6.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ipv6.ipv6_header = null;
      // Undeclared exception!
      try { 
        ipv6.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ziglio.construct.protocols.layer3.ipv6", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ipv6 ipv6_0 = new ipv6();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        ipv6.main(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownHostException: Not IPv4: [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70]
         //
         verifyException("uk.ziglio.construct.Adapters", e);
      }
  }
}
