/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 22:12:16 GMT 2022
 */

package uk.ziglio.construct.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ziglio.construct.core.PassClass;
import uk.ziglio.construct.core.Range;
import uk.ziglio.construct.lib.BitStream;
import uk.ziglio.construct.lib.ByteBufferWrapper;
import uk.ziglio.construct.lib.Containers;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      Range<PassClass> range0 = new Range<PassClass>(1, 1, passClass0);
      byte[] byteArray0 = new byte[6];
      Object object0 = range0.parse(byteArray0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Range<PassClass> range1 = new Range<PassClass>(1, 8, passClass0);
      range1.build_stream(object0, byteArrayOutputStream0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      byte[] byteArray0 = new byte[1];
      passClass0._set_flag((-2827));
      Range<PassClass> range0 = new Range<PassClass>((-631), (-2377), passClass0);
      range0.parse(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      Range<PassClass> range0 = new Range<PassClass>(2061, 8, passClass0);
      passClass0.conflags = 2061;
      byte[] byteArray0 = new byte[0];
      range0.parse(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      Range<PassClass> range0 = new Range<PassClass>(1, 4, passClass0);
      byte[] byteArray0 = new byte[0];
      Object object0 = range0.parse(byteArray0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1145);
      PassClass[] passClassArray0 = new PassClass[4];
      Containers.Container containers_Container0 = new Containers.Container(passClassArray0);
      range0._build(object0, byteArrayOutputStream0, containers_Container0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      Range<PassClass> range0 = new Range<PassClass>(0, (-3801), passClass0);
      byte[] byteArray0 = new byte[6];
      range0.parse(byteArray0, true);
      range0.get();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      Range<PassClass> range0 = new Range<PassClass>(1, 1, passClass0);
      byte[] byteArray0 = new byte[6];
      range0.parse(byteArray0, false);
      range0.get();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      Range<PassClass> range0 = new Range<PassClass>(1, 0, passClass0);
      BitStream.BitStreamReader bitStream_BitStreamReader0 = new BitStream.BitStreamReader();
      PassClass[] passClassArray0 = new PassClass[4];
      ByteBufferWrapper byteBufferWrapper0 = new ByteBufferWrapper();
      byte[] byteArray0 = new byte[4];
      byteBufferWrapper0.wrap(byteArray0);
      bitStream_BitStreamReader0.init(byteBufferWrapper0);
      Containers.Container containers_Container0 = new Containers.Container(passClassArray0);
      range0._parse(bitStream_BitStreamReader0, containers_Container0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      Range<PassClass> range0 = new Range<PassClass>(2, 2, passClass0);
      BitStream.BitStreamReader bitStream_BitStreamReader0 = new BitStream.BitStreamReader();
      // Undeclared exception!
      try { 
        range0._parse(bitStream_BitStreamReader0, (Containers.Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ziglio.construct.lib.BitStream$BitStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range<PassClass> range0 = null;
      try {
        range0 = new Range<PassClass>(4, 1, (PassClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ziglio.construct.core.Subconstruct", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      Range<PassClass> range0 = new Range<PassClass>(1, 4, passClass0);
      range0.get();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      Range<PassClass> range0 = new Range<PassClass>((-8), (-8), passClass0);
      byte[] byteArray0 = new byte[6];
      Object object0 = range0.parse(byteArray0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        range0.build_stream(object0, byteArrayOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected -8 to -8 found 0
         //
         verifyException("uk.ziglio.construct.core.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      Range<PassClass> range0 = new Range<PassClass>(65, 0, passClass0);
      byte[] byteArray0 = new byte[0];
      Object object0 = range0.parse(byteArray0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        range0.build_stream(object0, byteArrayOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected 65 to 0 found 0
         //
         verifyException("uk.ziglio.construct.core.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      Range<PassClass> range0 = new Range<PassClass>(1, 1, passClass0);
      PassClass[] passClassArray0 = new PassClass[2];
      Containers.Container containers_Container0 = new Containers.Container(passClassArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        range0._build(passClass0, byteArrayOutputStream0, containers_Container0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected object array
         //
         verifyException("uk.ziglio.construct.core.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      Range<PassClass> range0 = new Range<PassClass>(1, 1, passClass0);
      byte[] byteArray0 = new byte[8];
      passClass0.conflags = (int) (byte)7;
      ArrayList arrayList0 = (ArrayList)range0.parse(byteArray0, true);
      assertEquals(1, arrayList0.size());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      range0.build_stream(arrayList0, byteArrayOutputStream0);
      assertEquals(2, range0.conflags);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      Range<PassClass> range0 = new Range<PassClass>(1, 1, passClass0);
      Object[] objectArray0 = new Object[0];
      Containers.Container containers_Container0 = new Containers.Container(objectArray0);
      // Undeclared exception!
      try { 
        range0._sizeof(containers_Container0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can't calculate size
         //
         verifyException("uk.ziglio.construct.core.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      Range<PassClass> range0 = new Range<PassClass>(7, 7, passClass0);
      range0.set((Object) null);
      assertEquals(2, range0.conflags);
  }
}
