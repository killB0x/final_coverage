/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 22:13:56 GMT 2022
 */

package uk.ziglio.construct.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import uk.ziglio.construct.core.MetaArray;
import uk.ziglio.construct.core.PassClass;
import uk.ziglio.construct.interfaces.CountFunc;
import uk.ziglio.construct.lib.BitStream;
import uk.ziglio.construct.lib.ByteBufferWrapper;
import uk.ziglio.construct.lib.Containers;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MetaArray_ESTest extends MetaArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CountFunc countFunc0 = mock(CountFunc.class, new ViolatedAssumptionAnswer());
      doReturn(11, 1641, (-1266), 1843, 0).when(countFunc0).count(any(uk.ziglio.construct.lib.Containers.Container.class));
      PassClass passClass0 = PassClass.getInstance();
      MetaArray<PassClass> metaArray0 = new MetaArray<PassClass>(countFunc0, passClass0);
      CountFunc countFunc1 = metaArray0.countfunc;
      MetaArray<MetaArray<PassClass>> metaArray1 = new MetaArray<MetaArray<PassClass>>(countFunc1, metaArray0);
      byte[] byteArray0 = new byte[0];
      metaArray1.parse(byteArray0);
      Integer[] integerArray0 = new Integer[0];
      Containers.Container containers_Container0 = new Containers.Container(integerArray0);
      metaArray1._sizeof(containers_Container0);
      assertEquals(2, metaArray1.conflags);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CountFunc countFunc0 = mock(CountFunc.class, new ViolatedAssumptionAnswer());
      doReturn(88, 88, 88, 5298).when(countFunc0).count(any(uk.ziglio.construct.lib.Containers.Container.class));
      PassClass passClass0 = PassClass.getInstance();
      MetaArray<PassClass> metaArray0 = new MetaArray<PassClass>(countFunc0, passClass0);
      byte[] byteArray0 = new byte[2];
      Object object0 = metaArray0.parse(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2970);
      Object[] objectArray0 = new Object[8];
      Containers.Container containers_Container0 = new Containers.Container(objectArray0);
      metaArray0._build(object0, (ByteArrayOutputStream) null, containers_Container0);
      Object object1 = metaArray0.parse(byteArray0, containers_Container0);
      // Undeclared exception!
      try { 
        metaArray0._build(object1, byteArrayOutputStream0, containers_Container0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected 5298, found 88
         //
         verifyException("uk.ziglio.construct.core.MetaArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CountFunc countFunc0 = mock(CountFunc.class, new ViolatedAssumptionAnswer());
      doReturn(11, 1641, (-1266), 1843, 0).when(countFunc0).count(any(uk.ziglio.construct.lib.Containers.Container.class));
      PassClass passClass0 = PassClass.getInstance();
      passClass0.conflags = (-3643);
      MetaArray<PassClass> metaArray0 = new MetaArray<PassClass>(countFunc0, passClass0);
      CountFunc countFunc1 = metaArray0.countfunc;
      MetaArray<MetaArray<PassClass>> metaArray1 = new MetaArray<MetaArray<PassClass>>(countFunc1, metaArray0);
      byte[] byteArray0 = new byte[0];
      metaArray1.parse(byteArray0);
      assertEquals((-3642), metaArray1.conflags);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      MetaArray<PassClass> metaArray0 = new MetaArray<PassClass>((CountFunc) null, passClass0);
      // Undeclared exception!
      try { 
        metaArray0._sizeof((Containers.Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ziglio.construct.core.MetaArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CountFunc countFunc0 = mock(CountFunc.class, new ViolatedAssumptionAnswer());
      doReturn(100, 100, 0, 0, 0).when(countFunc0).count(any(uk.ziglio.construct.lib.Containers.Container.class));
      PassClass passClass0 = PassClass.getInstance();
      MetaArray<PassClass> metaArray0 = new MetaArray<PassClass>(countFunc0, passClass0);
      Integer[] integerArray0 = new Integer[6];
      Containers.Container containers_Container0 = new Containers.Container(integerArray0);
      ByteBufferWrapper byteBufferWrapper0 = new ByteBufferWrapper();
      CountFunc countFunc1 = metaArray0.countfunc;
      MetaArray<MetaArray<PassClass>> metaArray1 = new MetaArray<MetaArray<PassClass>>(countFunc1, metaArray0);
      metaArray1._parse(byteBufferWrapper0, containers_Container0);
      assertEquals(2, metaArray1.conflags);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      MetaArray<PassClass> metaArray0 = new MetaArray<PassClass>((CountFunc) null, passClass0);
      ByteBufferWrapper byteBufferWrapper0 = new ByteBufferWrapper();
      // Undeclared exception!
      try { 
        metaArray0._parse(byteBufferWrapper0, (Containers.Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CountFunc countFunc0 = mock(CountFunc.class, new ViolatedAssumptionAnswer());
      doReturn(88, 88, 88, 88, 88).when(countFunc0).count(any(uk.ziglio.construct.lib.Containers.Container.class));
      PassClass passClass0 = PassClass.getInstance();
      MetaArray<PassClass> metaArray0 = new MetaArray<PassClass>(countFunc0, passClass0);
      CountFunc countFunc1 = metaArray0.countfunc;
      MetaArray<MetaArray<PassClass>> metaArray1 = new MetaArray<MetaArray<PassClass>>(countFunc1, metaArray0);
      Integer[] integerArray0 = new Integer[6];
      Containers.Container containers_Container0 = new Containers.Container(integerArray0);
      ByteBufferWrapper byteBufferWrapper0 = new ByteBufferWrapper();
      passClass0.conflags = 57;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Object object0 = metaArray1.parse_stream(byteBufferWrapper0, false);
      // Undeclared exception!
      metaArray1._build(object0, byteArrayOutputStream0, containers_Container0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CountFunc countFunc0 = mock(CountFunc.class, new ViolatedAssumptionAnswer());
      doReturn(88).when(countFunc0).count(any(uk.ziglio.construct.lib.Containers.Container.class));
      PassClass passClass0 = PassClass.getInstance();
      MetaArray<PassClass> metaArray0 = new MetaArray<PassClass>(countFunc0, passClass0);
      MetaArray<PassClass> metaArray1 = new MetaArray<PassClass>((CountFunc) null, passClass0);
      Integer[] integerArray0 = new Integer[6];
      Containers.Container containers_Container0 = new Containers.Container(integerArray0);
      BitStream.BitStreamReader bitStream_BitStreamReader0 = new BitStream.BitStreamReader();
      Object object0 = metaArray0._parse(bitStream_BitStreamReader0, containers_Container0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        metaArray1._build(object0, byteArrayOutputStream0, containers_Container0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ziglio.construct.core.MetaArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      CountFunc countFunc0 = mock(CountFunc.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(countFunc0).count(any(uk.ziglio.construct.lib.Containers.Container.class));
      MetaArray<PassClass> metaArray0 = new MetaArray<PassClass>(countFunc0, passClass0);
      byte[] byteArray0 = new byte[4];
      MetaArray<PassClass> metaArray1 = metaArray0.parse(byteArray0, (Containers.Container) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        metaArray1._build((Object) null, byteArrayOutputStream0, (Containers.Container) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MetaArray<PassClass> metaArray0 = null;
      try {
        metaArray0 = new MetaArray<PassClass>((CountFunc) null, (PassClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ziglio.construct.core.Subconstruct", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CountFunc countFunc0 = mock(CountFunc.class, new ViolatedAssumptionAnswer());
      doReturn(88, 0).when(countFunc0).count(any(uk.ziglio.construct.lib.Containers.Container.class));
      PassClass passClass0 = PassClass.getInstance();
      MetaArray<PassClass> metaArray0 = new MetaArray<PassClass>(countFunc0, passClass0);
      Integer[] integerArray0 = new Integer[6];
      Containers.Container containers_Container0 = new Containers.Container(integerArray0);
      ByteBufferWrapper byteBufferWrapper0 = new ByteBufferWrapper();
      ArrayList arrayList0 = (ArrayList)metaArray0._parse(byteBufferWrapper0, containers_Container0);
      assertEquals(88, arrayList0.size());
      
      passClass0.conflags = 57;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        metaArray0._build(arrayList0, byteArrayOutputStream0, containers_Container0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected 0, found 88
         //
         verifyException("uk.ziglio.construct.core.MetaArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CountFunc countFunc0 = mock(CountFunc.class, new ViolatedAssumptionAnswer());
      doReturn((-1397), (-1397)).when(countFunc0).count(any(uk.ziglio.construct.lib.Containers.Container.class));
      PassClass passClass0 = PassClass.getInstance();
      MetaArray<PassClass> metaArray0 = new MetaArray<PassClass>(countFunc0, passClass0);
      Integer[] integerArray0 = new Integer[6];
      Containers.Container containers_Container0 = new Containers.Container(integerArray0);
      ByteBufferWrapper byteBufferWrapper0 = new ByteBufferWrapper();
      Object object0 = metaArray0._parse(byteBufferWrapper0, containers_Container0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4);
      // Undeclared exception!
      try { 
        metaArray0._build(object0, byteArrayOutputStream0, containers_Container0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected -1397, found 0
         //
         verifyException("uk.ziglio.construct.core.MetaArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PassClass passClass0 = PassClass.getInstance();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MetaArray<PassClass> metaArray0 = new MetaArray<PassClass>((CountFunc) null, passClass0);
      // Undeclared exception!
      try { 
        metaArray0._build((Object) null, byteArrayOutputStream0, (Containers.Container) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Must build a List
         //
         verifyException("uk.ziglio.construct.core.MetaArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CountFunc countFunc0 = mock(CountFunc.class, new ViolatedAssumptionAnswer());
      doReturn(88).when(countFunc0).count(any(uk.ziglio.construct.lib.Containers.Container.class));
      PassClass passClass0 = PassClass.getInstance();
      MetaArray<PassClass> metaArray0 = new MetaArray<PassClass>(countFunc0, passClass0);
      Integer[] integerArray0 = new Integer[6];
      Containers.Container containers_Container0 = new Containers.Container(integerArray0);
      ByteBufferWrapper byteBufferWrapper0 = new ByteBufferWrapper();
      passClass0.conflags = 57;
      ArrayList arrayList0 = (ArrayList)metaArray0._parse(byteBufferWrapper0, containers_Container0);
      assertEquals(2, metaArray0.conflags);
      assertEquals(88, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CountFunc countFunc0 = mock(CountFunc.class, new ViolatedAssumptionAnswer());
      doReturn(88, 88).when(countFunc0).count(any(uk.ziglio.construct.lib.Containers.Container.class));
      PassClass passClass0 = PassClass.getInstance();
      MetaArray<PassClass> metaArray0 = new MetaArray<PassClass>(countFunc0, passClass0);
      CountFunc countFunc1 = metaArray0.countfunc;
      assertNotNull(countFunc1);
      
      MetaArray<MetaArray<PassClass>> metaArray1 = new MetaArray<MetaArray<PassClass>>(countFunc1, metaArray0);
      Integer[] integerArray0 = new Integer[6];
      Containers.Container containers_Container0 = new Containers.Container(integerArray0);
      int int0 = metaArray1._sizeof(containers_Container0);
      assertEquals(0, int0);
      assertEquals(2, metaArray1.conflags);
  }
}
