/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 22:10:26 GMT 2022
 */

package uk.ziglio.construct.lib;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ziglio.construct.lib.Binary;
import uk.ziglio.construct.lib.Decoder;
import uk.ziglio.construct.lib.Encoder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Binary_ESTest extends Binary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      Binary.int_to_bin((int) (byte) (-84), 22928);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = Binary.int_to_bin(0, 0);
      byte[] byteArray1 = new byte[0];
      Binary.byteArrayToHexString(byteArray1, (-1132));
      Binary.BinaryEncoder();
      Binary.bin_to_int(byteArray0, true);
      Binary.int_to_bin(0, 9966);
      Binary.byteArrayToHexString(byteArray0, 0);
      Binary.BinaryEncoder();
      Binary.BinaryEncoder();
      // Undeclared exception!
      Binary.int_to_bin(9966);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = Binary.int_to_bin(51, 1224);
      Binary.bin_to_int(byteArray0, false);
      Binary.byteArrayToHexString(byteArray0);
      Binary.BinaryDecoder();
      Binary.BinaryDecoder();
      Binary.byteArrayToHexString(byteArray0, 51);
      byte[] byteArray1 = Binary.encode_bin(byteArray0);
      byte[] byteArray2 = Binary.swap_bytes(byteArray1, 51);
      // Undeclared exception!
      Binary.bin_to_int(byteArray2, false);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 36;
      byte[] byteArray0 = Binary.int_to_bin(36, 2217);
      byte[] byteArray1 = Binary.encode_bin(byteArray0);
      int int1 = 474;
      Binary.int_to_bin(2217, 474);
      int int2 = 28;
      Binary.int_to_bin(28, 36);
      Binary.BinaryDecoder();
      // Undeclared exception!
      Binary.swap_bytes(byteArray1, 36);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = Binary.hexStringToByteArray("");
      assertEquals(0, byteArray0.length);
      
      Binary.bin_to_int(byteArray0, true);
      byte[] byteArray1 = Binary.int_to_bin(1985, 1985);
      byte[] byteArray2 = Binary.encode_bin(byteArray1);
      Binary.hexStringToByteArray("");
      // Undeclared exception!
      Binary.encode_bin(byteArray2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2104;
      byte[] byteArray0 = Binary.int_to_bin(2104, 2104);
      byte[] byteArray1 = Binary.encode_bin(byteArray0);
      // Undeclared exception!
      Binary.byteArrayToHexString(byteArray1, 2104);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = Binary.int_to_bin(1757, 1757);
      byte[] byteArray1 = Binary.int_to_bin((-1983));
      Binary.BinaryDecoder();
      Binary.bin_to_int(byteArray0, true);
      int int0 = 0;
      Binary.byteArrayToHexString(byteArray1, 0);
      Binary.swap_bytes(byteArray1);
      Binary.bin_to_int(byteArray1, true);
      byte[] byteArray2 = Binary.encode_bin(byteArray0);
      // Undeclared exception!
      Binary.decode_bin(byteArray2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      boolean boolean0 = true;
      Binary.bin_to_int(byteArray0, true);
      byte[] byteArray1 = Binary.int_to_bin(0, 1985);
      byte[] byteArray2 = Binary.encode_bin(byteArray1);
      Binary.hexStringToByteArray("uk.ziglio.construct.lib.Binary");
      Binary.byteArrayToHexString(byteArray0);
      Binary.swap_bytes(byteArray0);
      // Undeclared exception!
      Binary.byteArrayToHexString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = Binary.int_to_bin(1985, 1985);
      byte[] byteArray1 = Binary.encode_bin(byteArray0);
      // Undeclared exception!
      Binary.swap_bytes(byteArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      boolean boolean0 = true;
      int int0 = 1985;
      byte[] byteArray1 = Binary.int_to_bin((-577), 1625);
      byte[] byteArray2 = Binary.encode_bin(byteArray1);
      Binary.hexStringToByteArray("");
      // Undeclared exception!
      Binary.bin_to_int(byteArray2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-1);
      byte[] byteArray1 = Binary.encode_bin(byteArray0);
      int int0 = Binary.bin_to_int(byteArray1, true);
      assertEquals((-7073537), int0);
      
      Binary.swap_bytes(byteArray1);
      assertEquals(56, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Binary.swap_bytes((byte[]) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ziglio.construct.lib.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)103;
      int int0 = Binary.bin_to_int(byteArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = Binary.int_to_bin((int) (byte) (-53));
      String string0 = Binary.byteArrayToHexString(byteArray1, (int) (byte)0);
      assertEquals("\n01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 01 01 00 00 \n", string0);
      
      String string1 = Binary.byteArrayToHexString(byteArray1, (int) (byte) (-23));
      assertEquals("\n01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 01 01 00 00 \n", string1);
      assertNotNull(string1);
      
      byte[] byteArray2 = Binary.encode_bin(byteArray0);
      byte[] byteArray3 = Binary.decode_bin(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertEquals(1, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = Binary.hexStringToByteArray("");
      byte[] byteArray1 = Binary.swap_bytes(byteArray0, 3834);
      Binary.byteArrayToHexString(byteArray0);
      byte[] byteArray2 = Binary.int_to_bin(3834);
      assertEquals(32, byteArray2.length);
      
      int int0 = Binary.bin_to_int(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Binary.decode_bin((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ziglio.construct.lib.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = Binary.hexStringToByteArray("");
      Binary.bin_to_int(byteArray0, true);
      String string0 = Binary.byteArrayToHexString(byteArray0, (-1214));
      assertEquals("\n\n", string0);
      
      byte[] byteArray1 = Binary.int_to_bin(0);
      assertEquals(32, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = Binary.byteArrayToHexString((byte[]) null, (-686));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = Binary.int_to_bin(3);
      Binary binary0 = new Binary();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-31);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)69;
      byteArray1[3] = (byte) (-17);
      byteArray1[4] = (byte)51;
      byteArray1[5] = (byte)122;
      byteArray1[6] = (byte)2;
      byteArray1[7] = (byte) (-16);
      Binary.byteArrayToHexString(byteArray1);
      Binary.byteArrayToHexString(byteArray0);
      byte[] byteArray2 = Binary.hexStringToByteArray("");
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)13;
      byteArray3[1] = (byte)55;
      byteArray3[2] = (byte)15;
      byteArray3[3] = (byte) (-34);
      byteArray3[4] = (byte)107;
      boolean boolean0 = true;
      Binary.bin_to_int(byteArray2, true);
      // Undeclared exception!
      try { 
        Binary.swap_bytes(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Binary.swap_bytes(byteArray0);
      Binary binary0 = new Binary();
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-23);
      byteArray2[1] = (byte)56;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)1;
      String string0 = Binary.byteArrayToHexString(byteArray2, (int) (byte)0);
      assertEquals("\nE9 38 00 00 01 \n", string0);
      
      Binary.byteArrayToHexString(byteArray0);
      Binary.byteArrayToHexString(byteArray0, (-3453));
      Binary.byteArrayToHexString(byteArray1, 232);
      Binary.byteArrayToHexString(byteArray1);
      Binary.byteArrayToHexString(byteArray0);
      Binary.byteArrayToHexString(byteArray1, (-1));
      String string1 = Binary.byteArrayToHexString(byteArray1, 761);
      assertNotNull(string1);
      
      Binary.swap_bytes(byteArray0, (-502));
      byte[] byteArray3 = Binary.encode_bin(byteArray0);
      byte[] byteArray4 = Binary.swap_bytes(byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      
      byte[] byteArray5 = new byte[5];
      byteArray5[0] = (byte) (-26);
      byteArray5[1] = (byte) (-26);
      byteArray5[2] = (byte)0;
      byteArray5[3] = (byte) (-25);
      byteArray5[4] = (byte)56;
      String string2 = Binary.byteArrayToHexString(byteArray5);
      assertEquals("E6E600E738", string2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = Binary.int_to_bin((-2162));
      int int0 = Binary.bin_to_int(byteArray0, true);
      assertEquals(32, byteArray0.length);
      assertEquals((-2161), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = Binary.int_to_bin((-724));
      Binary.decode_bin(byteArray0);
      byte[] byteArray1 = Binary.hexStringToByteArray("");
      Binary.decode_bin(byteArray1);
      byte[] byteArray2 = Binary.int_to_bin((-1119));
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)0;
      Binary.byteArrayToHexString(byteArray3);
      byte[] byteArray4 = Binary.swap_bytes(byteArray2);
      Binary.int_to_bin((-724), (int) (byte)0);
      Binary.encode_bin(byteArray1);
      Binary.bin_to_int(byteArray4, true);
      Binary.BinaryEncoder();
      int int0 = 2008;
      byte[] byteArray5 = Binary.int_to_bin(245, 2008);
      Binary.byteArrayToHexString(byteArray5, (-1119));
      Binary.hexStringToByteArray("");
      // Undeclared exception!
      try { 
        Binary.int_to_bin(245, (-1119));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1119
         //
         verifyException("uk.ziglio.construct.lib.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Binary.swap_bytes(byteArray0);
      Binary.BinaryDecoder();
      Binary binary0 = new Binary();
      Binary.byteArrayToHexString(byteArray0, 0);
      Binary.byteArrayToHexString(byteArray1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)48;
      Binary.byteArrayToHexString(byteArray2, (-1));
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte) (-97);
      byteArray3[1] = (byte) (-37);
      byteArray3[2] = (byte) (-25);
      // Undeclared exception!
      try { 
        Binary.decode_bin(byteArray3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Data length must be a multiple of 8
         //
         verifyException("uk.ziglio.construct.lib.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Binary.swap_bytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ziglio.construct.lib.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = Binary.int_to_bin(3);
      Binary binary0 = new Binary();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-31);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)69;
      byteArray1[3] = (byte) (-17);
      byteArray1[4] = (byte)51;
      byteArray1[5] = (byte)122;
      byteArray1[6] = (byte)2;
      byteArray1[7] = (byte) (-16);
      String string0 = Binary.byteArrayToHexString(byteArray1);
      assertEquals("E1FF45EF337A02F0", string0);
      
      String string1 = Binary.byteArrayToHexString(byteArray0);
      assertEquals("0000000000000000000000000000000000000000000000000000000000000101", string1);
      
      byte[] byteArray2 = Binary.hexStringToByteArray("");
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)13;
      byteArray3[1] = (byte)55;
      byteArray3[2] = (byte)15;
      byteArray3[3] = (byte) (-34);
      byteArray3[4] = (byte)107;
      byteArray3[5] = (byte)30;
      int int0 = Binary.bin_to_int(byteArray3, true);
      assertEquals((-2), int0);
      
      Binary.int_to_bin(223, (int) (byte)15);
      String string2 = Binary.byteArrayToHexString(byteArray2, 250);
      assertNotNull(string2);
      assertEquals("\n\n", string2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = Binary.int_to_bin(57);
      Binary.bin_to_int(byteArray0, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte) (-32);
      byteArray1[2] = (byte) (-7);
      byteArray1[3] = (byte) (-25);
      byteArray1[4] = (byte)18;
      byteArray1[5] = (byte) (-73);
      byteArray1[6] = (byte)116;
      byteArray1[7] = (byte) (-13);
      // Undeclared exception!
      try { 
        Binary.swap_bytes(byteArray1, (int) (byte)116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)10;
      int int0 = Binary.bin_to_int(byteArray0, false);
      assertEquals((-66), int0);
      
      byte[] byteArray1 = Binary.encode_bin(byteArray0);
      byte[] byteArray2 = Binary.int_to_bin((int) (byte) (-58));
      assertEquals(32, byteArray2.length);
      
      Binary.BinaryDecoder();
      String string0 = Binary.byteArrayToHexString(byteArray1);
      assertEquals("0001000000010000000000000101000101010000000101000000000001000100", string0);
      
      Binary.encode_bin(byteArray1);
      String string1 = Binary.byteArrayToHexString(byteArray0, (-66));
      assertEquals("\n44 0D C6 0A \n", string1);
      
      byte[] byteArray3 = Binary.decode_bin(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-57)}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-76);
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-18);
      byte byte1 = (byte)59;
      byteArray0[3] = (byte)59;
      // Undeclared exception!
      try { 
        Binary.decode_bin(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Data length must be a multiple of 8
         //
         verifyException("uk.ziglio.construct.lib.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        Binary.decode_bin(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Data length must be a multiple of 8
         //
         verifyException("uk.ziglio.construct.lib.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Binary.hexStringToByteArray("Data length must be a multiple of 8");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = Binary.byteArrayToHexString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Binary.bin_to_int((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ziglio.construct.lib.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)1;
      Binary.encode_bin(byteArray0);
      // Undeclared exception!
      try { 
        Binary.swap_bytes(byteArray0, (-565));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Binary.bin_to_int((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ziglio.construct.lib.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Binary.int_to_bin((-2386), (-419));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -419
         //
         verifyException("uk.ziglio.construct.lib.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Binary.int_to_bin((-2843), (-2843));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2843
         //
         verifyException("uk.ziglio.construct.lib.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Binary.encode_bin((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ziglio.construct.lib.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        Binary.hexStringToByteArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ziglio.construct.lib.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byte[] byteArray1 = Binary.decode_bin(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Binary.decode_bin(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Decoder decoder0 = Binary.BinaryDecoder();
      assertNotNull(decoder0);
      
      byte[] byteArray0 = Binary.int_to_bin(1015);
      int int0 = 251;
      Binary.byteArrayToHexString(byteArray0, 251);
      Binary.int_to_bin(251);
      Binary.byteArrayToHexString(byteArray0);
      byte[] byteArray1 = Binary.int_to_bin(1015);
      byte[] byteArray2 = Binary.decode_bin(byteArray0);
      Binary.BinaryEncoder();
      Binary.BinaryEncoder();
      Binary.decode_bin(byteArray1);
      Binary.encode_bin(byteArray2);
      // Undeclared exception!
      try { 
        Binary.swap_bytes(byteArray1, 1015);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = Binary.int_to_bin((-149));
      assertEquals(32, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = null;
      Binary.byteArrayToHexString((byte[]) null);
      // Undeclared exception!
      try { 
        Binary.hexStringToByteArray("j");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Binary.byteArrayToHexString(byteArray0);
      assertNotNull(string0);
      assertEquals("00", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Binary.byteArrayToHexString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-11);
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-1);
      byte byte1 = (byte)80;
      byteArray0[2] = (byte)80;
      byte byte2 = (byte) (-101);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-70);
      Binary.byteArrayToHexString(byteArray0);
      Binary binary0 = new Binary();
      Binary.byteArrayToHexString(byteArray0, (-790));
      Binary.byteArrayToHexString(byteArray0);
      Binary.byteArrayToHexString(byteArray0, 49);
      Binary.byteArrayToHexString(byteArray0, 66);
      Binary.byteArrayToHexString(byteArray0);
      Binary.byteArrayToHexString(byteArray0, (int) (byte) (-101));
      Binary.byteArrayToHexString(byteArray0);
      Binary.encode_bin(byteArray0);
      // Undeclared exception!
      try { 
        Binary.swap_bytes(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      try { 
        Binary.swap_bytes(byteArray0, 192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = Binary.int_to_bin(6);
      assertEquals(32, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = Binary.int_to_bin(382);
      // Undeclared exception!
      try { 
        Binary.swap_bytes(byteArray0, 233);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Binary binary0 = new Binary();
      byte[] byteArray0 = Binary.hexStringToByteArray("");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      int int0 = Binary.bin_to_int(byteArray0, true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      String string0 = Binary.byteArrayToHexString(byteArray0, 12);
      assertEquals("\n00 00 00 00 00 00 00 00 00 00 00 00 \n00 00 00 00 \n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = Binary.hexStringToByteArray("w@O%a/PG+j,Y<5 4");
      byte[] byteArray1 = Binary.encode_bin(byteArray0);
      assertEquals(64, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-97), (byte) (-17), (byte) (-17), (byte) (-17), (byte) (-11), (byte) (-12)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Binary binary0 = new Binary();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)65;
      int int0 = Binary.bin_to_int(byteArray0, true);
      assertEquals((-19), int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Binary.BinaryDecoder();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte) (-39);
      Binary.encode_bin(byteArray0);
      // Undeclared exception!
      try { 
        Binary.hexStringToByteArray("@Yn#eBv'V>3oY");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = Binary.int_to_bin(792, 792);
      assertEquals(792, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Binary.encode_bin(byteArray0);
      assertEquals(48, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Binary.encode_bin(byteArray0);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = Binary.bin_to_int(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Binary.byteArrayToHexString(byteArray0, (int) (byte)0);
      assertNotNull(string0);
      assertEquals("\n00 \n", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = Binary.bin_to_int(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        Binary.swap_bytes(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)4;
      int int0 = Binary.bin_to_int(byteArray0);
      assertEquals((-2), int0);
      
      byte[] byteArray1 = Binary.int_to_bin((int) (byte)4, 434);
      Binary.BinaryDecoder();
      Binary.encode_bin(byteArray0);
      int int1 = Binary.bin_to_int(byteArray1);
      assertEquals(4, int1);
      
      byte[] byteArray2 = Binary.swap_bytes(byteArray0, 3);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-89), (byte)4, (byte)61, (byte)12, (byte) (-2)}, byteArray2);
      
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)61;
      byteArray3[1] = (byte)61;
      byteArray3[2] = (byte) (-89);
      byteArray3[3] = (byte)32;
      byteArray3[4] = (byte)12;
      byteArray3[5] = (byte)12;
      byteArray3[6] = (byte)52;
      byteArray3[7] = (byte) (-89);
      String string0 = Binary.byteArrayToHexString(byteArray3, 1);
      assertEquals("\n3D \n3D \nA7 \n20 \n0C \n0C \n34 \nA7 \n\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Binary.swap_bytes(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = Binary.hexStringToByteArray("uk.ziglio.construct.lib.Binary");
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Encoder encoder0 = Binary.BinaryEncoder();
      assertNotNull(encoder0);
      
      byte[] byteArray0 = Binary.hexStringToByteArray("S7@#gJsu");
      // Undeclared exception!
      try { 
        Binary.swap_bytes(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
