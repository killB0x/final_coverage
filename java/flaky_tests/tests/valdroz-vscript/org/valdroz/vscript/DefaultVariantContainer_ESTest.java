/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 07:09:54 GMT 2022
 */

package org.valdroz.vscript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.valdroz.vscript.DefaultVariantContainer;
import org.valdroz.vscript.Variant;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultVariantContainer_ESTest extends DefaultVariantContainer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultVariantContainer defaultVariantContainer0 = new DefaultVariantContainer();
      Variant variant0 = Variant.emptyStringVariant();
      // Undeclared exception!
      defaultVariantContainer0.setVariant("6muP>U'qg>X&]5Hc", 97196323, variant0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultVariantContainer defaultVariantContainer0 = new DefaultVariantContainer();
      Variant variant0 = Variant.emptyArray();
      // Undeclared exception!
      try { 
        defaultVariantContainer0.setVariant("hours_before_now", (-1), variant0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultVariantContainer defaultVariantContainer0 = new DefaultVariantContainer();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Variant variant0 = Variant.fromBigDecimal(bigDecimal0);
      defaultVariantContainer0.setVariant("", 2, variant0);
      boolean boolean0 = defaultVariantContainer0.contains("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultVariantContainer defaultVariantContainer0 = new DefaultVariantContainer();
      boolean boolean0 = defaultVariantContainer0.contains("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultVariantContainer defaultVariantContainer0 = new DefaultVariantContainer();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Variant variant0 = Variant.fromBigDecimal(bigDecimal0);
      defaultVariantContainer0.setVariant("", 2, variant0);
      defaultVariantContainer0.setVariant("", 2, variant0);
      assertTrue(variant0.isNumeric());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultVariantContainer defaultVariantContainer0 = new DefaultVariantContainer();
      Variant variant0 = defaultVariantContainer0.getVariant("", 2);
      assertFalse(variant0.isString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DefaultVariantContainer defaultVariantContainer0 = new DefaultVariantContainer();
      Variant variant0 = defaultVariantContainer0.getVariant((String) null);
      assertEquals((-1), variant0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DefaultVariantContainer defaultVariantContainer0 = new DefaultVariantContainer();
      defaultVariantContainer0.setVariant("juAP{zJyCc=kol", (Variant) null);
  }
}
