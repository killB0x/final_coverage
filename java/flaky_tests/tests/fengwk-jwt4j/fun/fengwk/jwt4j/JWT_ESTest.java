/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 15:27:05 GMT 2022
 */

package fun.fengwk.jwt4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import fun.fengwk.jwt4j.JWT;
import fun.fengwk.jwt4j.JsonUtils;
import fun.fengwk.jwt4j.support.GsonJsonUtilsInitializer;
import java.lang.reflect.Type;
import java.security.Key;
import javax.crypto.spec.SecretKeySpec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JWT_ESTest extends JWT_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "fun.fengwk.jwt4j.JWT");
      JWT.Parser jWT_Parser0 = new JWT.Parser("fun.fengwk.jwt4j.JWT", secretKeySpec0);
      assertFalse(jWT_Parser0.validate());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("Unupported val_dte alg '%s'", "Unupported val_dte alg '%s'", "Unupported val_dte alg '%s'", "Unupported val_dte alg '%s'").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[5];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "Unupported val_dte alg '%s'");
      JWT jWT0 = jWT_Builder1.build(secretKeySpec0);
      JsonUtils jsonUtils1 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("HS256", "w").when(jsonUtils1).toJson(any());
      JWT.registerJsonUtils(jsonUtils1);
      String string0 = jWT0.toString();
      assertEquals("SFMyNTY.dw.pyWesdTJfKVP1tkfUotkkxfqjpeHoodxLmVzsGlc2MU", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("5p^[#_6R@d5~8rYG:<e", "/_<` 1r(*W0v").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "fun.fengwk.jwt4j.JWT");
      JWT.Builder jWT_Builder1 = jWT_Builder0.rs256();
      // Undeclared exception!
      try { 
        jWT_Builder1.build(secretKeySpec0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: RS256Signer's key must be private key
         //
         verifyException("fun.fengwk.jwt4j.JWT$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      jWT_Builder1.sub("Go:");
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("5p^[#_6R@d5~8rYG:<e", "/_<` 1r(*W0v", "fun.fengwk.jwt4j.JWT$1", "").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "fun.fengwk.jwt4r.JWT");
      JWT jWT0 = jWT_Builder1.build(secretKeySpec0);
      String string0 = jWT0.sub();
      assertEquals("Go:", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      jWT_Builder0.hs256();
      JWT.Builder jWT_Builder1 = jWT_Builder0.sub("");
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("5p^[#_6R@d5~8rYG:<e", "/_<` 1r(*W0v", "fun.fengwk.jwt4j.JWT$1", "").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "fun.fengwk.jwt4j.JWT");
      JWT jWT0 = jWT_Builder1.build(secretKeySpec0);
      String string0 = jWT0.sub();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("5p^[#_6R@d5~8rYG:<e", "/_<` 1r(*W0v", "fun.fengwk.jwt4j.JWT$1", "").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      jWT_Builder0.nbf(0L);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "fun.fengwk.jwt4j.JWT");
      JWT jWT0 = jWT_Builder1.build(secretKeySpec0);
      Long long0 = jWT0.nbf();
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      jWT_Builder0.hs256();
      jWT_Builder0.nbf(1L);
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("5p^[#_6R@d5~8rYG:<e", "/_<` 1r(*W0v", (String) null, (String) null).when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, (byte)0, 0, "");
      JWT jWT0 = jWT_Builder0.build(secretKeySpec0);
      Long long0 = jWT0.nbf();
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn(":\"1x:A,^Si", ":\"1x:A,^Si", ":\"1x:A,^Si", ":\"1x:A,^Si").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, ":\"1x:A,^Si");
      JWT jWT0 = jWT_Builder1.build(secretKeySpec0);
      jWT_Builder0.nbf((-1L));
      Long long0 = jWT0.nbf();
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      jWT_Builder0.hs256();
      jWT_Builder0.iss("Unsupported validate alg '%s'");
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("5p^[#_6R@d5~8}rYG:<e", "RS256", "fun.fengwk.jwt4j.JWT$1", "").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[1];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "Unsupported validate alg '%s'");
      JWT jWT0 = jWT_Builder0.build(secretKeySpec0);
      String string0 = jWT0.iss();
      assertEquals("Unsupported validate alg '%s'", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      jWT_Builder0.hs256();
      jWT_Builder0.iss("");
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("5p^[#_6R@d5~8rYG:<e", "/_<` 1r(*W0v", "", "").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, (byte)0, 0, "");
      JWT jWT0 = jWT_Builder0.build(secretKeySpec0);
      String string0 = jWT0.iss();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      jWT_Builder1.jti("fun.fengwk.jwt4j.JWT");
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("5p^[#_6R@d5~8}rYG:<e", "/_<` 1r(*W0v", "fun.fengwk.jwt4j.JWT$1", "").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "fun.fengwk.jwt4j.JWT");
      JWT jWT0 = jWT_Builder0.build(secretKeySpec0);
      String string0 = jWT0.id();
      assertEquals("fun.fengwk.jwt4j.JWT", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      JWT.Builder jWT_Builder2 = jWT_Builder1.jti("");
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("5p^[#_6R@d5~8}rYG:<e", "RS256", "fun.fengwk.jwt4j.JWT$1", "").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "");
      JWT jWT0 = jWT_Builder2.build(secretKeySpec0);
      String string0 = jWT0.id();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      jWT_Builder1.iat(0L);
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("fun.fengwk.jwt4j.support.RS256Signer", "fun.fengwk.jwt4j.support.RS256Signer", "fun.fengwk.jwt4j.support.RS256Signer", "fun.fengwk.jwt4j.support.RS256Signer").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "fun.fengwk.jwt4j.support.RS256Signer");
      JWT jWT0 = jWT_Builder0.build(secretKeySpec0);
      Long long0 = jWT0.iat();
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      jWT_Builder1.iat(22L);
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("Sp'X>y]m", "/_<` 1r(*W0v", "fun.fengFk.jwt4j.JWT$1", "fun.fengwk.jwt4j.JWT").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "fun.fengwk.jwt4j.JWT");
      JWT jWT0 = jWT_Builder0.build(secretKeySpec0);
      Long long0 = jWT0.iat();
      assertEquals(22L, (long)long0);
      assertNotNull(long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("fu.fengwk.jwt4j.support.RS256Signer", "fu.fengwk.jwt4j.support.RS256Signer", "fu.fengwk.jwt4j.support.RS256Signer", "fu.fengwk.jwt4j.support.RS256Signer").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      jWT_Builder0.iat((-666L));
      byte[] byteArray0 = new byte[1];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "fu.fengwk.jwt4j.support.RS256Signer");
      JWT jWT0 = jWT_Builder0.build(secretKeySpec0);
      Long long0 = jWT0.iat();
      assertEquals((-666L), (long)long0);
      assertNotNull(long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("Unupported val_dte alg '%s'", "Unupported val_dte alg '%s'", "Unupported val_dte alg '%s'", "Unupported val_dte alg '%s'").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[5];
      jWT_Builder0.exp(0L);
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "Unupported val_dte alg '%s'");
      JWT jWT0 = jWT_Builder1.build(secretKeySpec0);
      Long long0 = jWT0.exp();
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("5p^[#_6R@d5~8}rYG:<e", "RS256", "fun.fengwk.jwt4j.JWT$1", "").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "");
      JWT jWT0 = jWT_Builder0.build(secretKeySpec0);
      jWT_Builder1.exp(2124L);
      Long long0 = jWT0.exp();
      assertNotNull(long0);
      assertEquals(2124L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("Unupported val_dte alg '%s'", "Unupported val_dte alg '%s'", "Unupported val_dte alg '%s'", "Unupported val_dte alg '%s'").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[16];
      jWT_Builder0.exp((byte) (-20));
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "b&6*[CF}J1.pv#4.");
      JWT jWT0 = jWT_Builder0.build(secretKeySpec0);
      Long long0 = jWT0.exp();
      assertEquals((-20L), (long)long0);
      assertNotNull(long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      GsonJsonUtilsInitializer gsonJsonUtilsInitializer0 = new GsonJsonUtilsInitializer();
      jWT_Builder0.claims("fun.fengwk.jwt4j.JWT$1", gsonJsonUtilsInitializer0);
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("5p^[#_6R@d5~8rYG:<e", "/_<` 1r(*W0v", "fun.fengwk.jwt4j.JWT$1", "").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "fun.fengwk.jwt4j.JWT");
      JWT jWT0 = jWT_Builder1.build(secretKeySpec0);
      GsonJsonUtilsInitializer gsonJsonUtilsInitializer1 = (GsonJsonUtilsInitializer)jWT0.claims("fun.fengwk.jwt4j.JWT$1");
      assertEquals(Integer.MAX_VALUE, gsonJsonUtilsInitializer1.getOrder());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      jWT_Builder0.aud("Sp'X>y]m");
      jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("Sp'X>y]m", "/_<` 1r(*W0v", "fun.fengFk.jwt4j.JWT$1", "fun.fengwk.jwt4j.JWT").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "fun.fengwk.jwt4j.JWT");
      JWT jWT0 = jWT_Builder0.build(secretKeySpec0);
      String string0 = jWT0.adu();
      assertEquals("Sp'X>y]m", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      jWT_Builder1.aud("");
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("5p^[#_6R@d5~8}rYG:<e", "RS256", "fun.fengwk.jwt4j.JWT$1", "").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "");
      JWT jWT0 = jWT_Builder0.build(secretKeySpec0);
      String string0 = jWT0.adu();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("Unupported val_dte alg '%s'", "Unupported val_dte alg '%s'", "Unupported val_dte alg '%s'", "Unupported val_dte alg '%s'").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[5];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "Unupported val_dte alg '%s'");
      JWT jWT0 = jWT_Builder1.build(secretKeySpec0);
      JsonUtils jsonUtils1 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jsonUtils1).toJson(any());
      JWT.registerJsonUtils(jsonUtils1);
      // Undeclared exception!
      try { 
        jWT0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fun.fengwk.jwt4j.JWT", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      jWT_Builder1.iat(0L);
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("fun.fengwk.jwt4j.support.RS256Signer", "/_<` 1r(*W0v", "fun.fengwk.jwt4j.JWT$1", "fun.fengwk.jwt4j.JWT").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "fun.fengwk.jwt4j.JWT");
      JWT jWT0 = jWT_Builder1.build(secretKeySpec0);
      JWT.registerJsonUtils((JsonUtils) null);
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        jWT0.claims("iat", (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fun.fengwk.jwt4j.JWT", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "");
      JWT jWT0 = jWT_Builder1.build(secretKeySpec0);
      Class<GsonJsonUtilsInitializer> class0 = GsonJsonUtilsInitializer.class;
      GsonJsonUtilsInitializer gsonJsonUtilsInitializer0 = jWT0.claims("jti", class0);
      assertNull(gsonJsonUtilsInitializer0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "");
      JWT.Parser jWT_Parser0 = new JWT.Parser("HS256", secretKeySpec0);
      boolean boolean0 = jWT_Parser0.validate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonUtils0).fromJson(anyString() , any(java.lang.reflect.Type.class));
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[5];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "Unupported val_dte alg '%s'");
      JWT.Parser jWT_Parser0 = new JWT.Parser("VW51cHBvcnRlZCB2YWxfZHRlIGFsZyAnJXMn.VW51cHBvcnRlZCB2YWxfZHRlIGFsZyAnJXMn.pyWesdTJfKVP1tkfUotkkxfqjpeHoodxLmVzsGlc2MU", secretKeySpec0);
      assertFalse(jWT_Parser0.validate());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "Unupported val_dte alg '%s'");
      JWT.Parser jWT_Parser0 = new JWT.Parser("", secretKeySpec0);
      assertFalse(jWT_Parser0.validate());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "b&6*[CF}J1.pv#4.");
      JWT.Parser jWT_Parser0 = new JWT.Parser((String) null, secretKeySpec0);
      assertFalse(jWT_Parser0.validate());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      // Undeclared exception!
      try { 
        jWT_Builder0.build((Key) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Must specify alg
         //
         verifyException("fun.fengwk.jwt4j.JWT$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      JWT.Builder jWT_Builder2 = jWT_Builder1.jti(":\"1x:A,^Si");
      GsonJsonUtilsInitializer gsonJsonUtilsInitializer0 = new GsonJsonUtilsInitializer();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonUtils0).fromJson(anyString() , any(java.lang.reflect.Type.class));
      doReturn(":\"1x:A,^Si", ":\"1x:A,^Si", ":\"1x:A,^Si", ":\"1x:A,^Si", (String) null).when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, ":\"1x:A,^Si");
      JWT jWT0 = jWT_Builder2.build(secretKeySpec0);
      Class<GsonJsonUtilsInitializer> class0 = jWT0.claims("jti", (Type) null);
      assertNotNull(class0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("5p^[#_6R@d5~8}rYG:<e", "/_<` 1r(*W0v", "fun.fengwk.jwt4j.JWT$1", "").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "fun.fengwk.jwt4j.JWT");
      JWT jWT0 = jWT_Builder1.build(secretKeySpec0);
      Long long0 = jWT0.iat();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn(":\"1x:A,^Si", ":\"1x:A,^Si", ":\"1x:A,^Si", ":\"1x:A,^Si").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, ":\"1x:A,^Si");
      JWT jWT0 = jWT_Builder1.build(secretKeySpec0);
      Long long0 = jWT0.nbf();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("Unupported val_dte alg '%s'", "Unupported val_dte alg '%s'", "Unupported val_dte alg '%s'", "Unupported val_dte alg '%s'").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[5];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "Unupported val_dte alg '%s'");
      JWT jWT0 = jWT_Builder1.build(secretKeySpec0);
      Long long0 = jWT0.exp();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("5p^[#_6R@d5~8rYG:<e", "/_<` 1r(*W0v", "fun.fengwk.jwt4j.JWT$1", "").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "fun.fengwk.jwt4j.JWT");
      JWT jWT0 = jWT_Builder0.build(secretKeySpec0);
      String string0 = jWT0.iss();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("5p^[#_6R@d5~8}rYG:<e", "/_<` 1r(*W0v", "fun.fengwk.jwt4j.JWT$1", "").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "fun.fengwk.jwt4j.JWT");
      JWT jWT0 = jWT_Builder1.build(secretKeySpec0);
      String string0 = jWT0.adu();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[5];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "");
      JWT jWT0 = jWT_Builder0.build(secretKeySpec0);
      Object object0 = jWT0.claims("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "");
      JWT jWT0 = jWT_Builder0.build(secretKeySpec0);
      Class<Long> class0 = Long.TYPE;
      Class<GsonJsonUtilsInitializer> class1 = jWT0.claims("jti", (Type) class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("5p^[#_6R@d5~8}rYG:<e", "/_<` 1r(*W0v", "fun.fengwk.jwt4j.JWT$1", "").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "fun.fengwk.jwt4j.JWT");
      JWT jWT0 = jWT_Builder1.build(secretKeySpec0);
      String string0 = jWT0.alg();
      assertEquals("HS256", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("Unupported val_dte alg '%s'", "Unupported val_dte alg '%s'", "Unupported val_dte alg '%s'", "Unupported val_dte alg '%s'").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[5];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "Unupported val_dte alg '%s'");
      JWT jWT0 = jWT_Builder1.build(secretKeySpec0);
      String string0 = jWT0.sub();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      jWT_Builder0.hs256();
      JsonUtils jsonUtils0 = mock(JsonUtils.class, new ViolatedAssumptionAnswer());
      doReturn("5p^[#_6R@d5~8rYG:<e", "/_<` 1r(*W0v", "fun.fengwk.jwt4j.JWT$1", "").when(jsonUtils0).toJson(any());
      JWT.registerJsonUtils(jsonUtils0);
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "fun.fengwk.jwt4j.JWT");
      JWT jWT0 = jWT_Builder0.build(secretKeySpec0);
      String string0 = jWT0.id();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JWT.Builder jWT_Builder0 = new JWT.Builder();
      JWT.Builder jWT_Builder1 = jWT_Builder0.alg("/z}&");
      assertSame(jWT_Builder1, jWT_Builder0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JWT.Parser jWT_Parser0 = new JWT.Parser("RS256Signer's key must be private key", (Key) null);
      JWT jWT0 = jWT_Parser0.parse();
      assertNull(jWT0);
  }
}
