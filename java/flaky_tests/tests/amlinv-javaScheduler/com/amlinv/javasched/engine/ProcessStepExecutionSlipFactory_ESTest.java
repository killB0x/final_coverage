/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 08:38:50 GMT 2022
 */

package com.amlinv.javasched.engine;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.amlinv.javasched.Step;
import com.amlinv.javasched.engine.ProcessStepExecutionListener;
import com.amlinv.javasched.engine.ProcessStepExecutionSlip;
import com.amlinv.javasched.engine.ProcessStepExecutionSlipFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProcessStepExecutionSlipFactory_ESTest extends ProcessStepExecutionSlipFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ProcessStepExecutionSlipFactory processStepExecutionSlipFactory0 = new ProcessStepExecutionSlipFactory();
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      ProcessStepExecutionListener processStepExecutionListener0 = mock(ProcessStepExecutionListener.class, new ViolatedAssumptionAnswer());
      ProcessStepExecutionSlip processStepExecutionSlip0 = new ProcessStepExecutionSlip(step0, processStepExecutionListener0);
      ProcessStepExecutionListener processStepExecutionListener1 = mock(ProcessStepExecutionListener.class, new ViolatedAssumptionAnswer());
      processStepExecutionSlipFactory0.createProcessStepExecutionSlip(processStepExecutionSlip0, processStepExecutionListener1);
      ProcessStepExecutionListener processStepExecutionListener2 = mock(ProcessStepExecutionListener.class, new ViolatedAssumptionAnswer());
      ProcessStepExecutionSlip processStepExecutionSlip1 = processStepExecutionSlipFactory0.createProcessStepExecutionSlip(processStepExecutionSlip0, processStepExecutionListener2);
      assertFalse(processStepExecutionSlip1.equals((Object)processStepExecutionSlip0));
  }
}
