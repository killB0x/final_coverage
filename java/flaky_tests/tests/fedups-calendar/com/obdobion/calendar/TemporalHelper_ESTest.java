/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 03:01:02 GMT 2022
 */

package com.obdobion.calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.obdobion.calendar.TemporalHelper;
import com.obdobion.calendar.helper.ITemporalHelperImpl;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TemporalHelper_ESTest extends TemporalHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ITemporalHelperImpl iTemporalHelperImpl0 = TemporalHelper.getDelegate();
      ITemporalHelperImpl iTemporalHelperImpl1 = TemporalHelper.setDelegate((ITemporalHelperImpl) null);
      assertSame(iTemporalHelperImpl1, iTemporalHelperImpl0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        TemporalHelper.parseWithPredefinedParsers("29");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '29' could not be parsed: Invalid value for HourOfDay (valid values 0 - 23): 29
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      try { 
        TemporalHelper.parseWithPredefinedParsers("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // not in a predefined date / time format ()
         //
         verifyException("com.obdobion.calendar.helper.TemporalHelperAbstractImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        TemporalHelper.parseWithPredefinedParsers((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDateTime localDateTime0 = TemporalHelper.parseWithPredefinedParsers("0");
      assertNotNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ITemporalHelperImpl iTemporalHelperImpl0 = TemporalHelper.setDelegate((ITemporalHelperImpl) null);
      assertNull(iTemporalHelperImpl0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = TemporalHelper.getOutputDF();
      assertNotNull(dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = TemporalHelper.getOutputTF();
      DateTimeFormatter dateTimeFormatter1 = TemporalHelper.getOutputTF();
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleDateFormat simpleDateFormat0 = TemporalHelper.getOutputSDF();
      assertEquals("yyyy-MM-dd@HH:mm:ss.SSS", simpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = TemporalHelper.getOutputDTF();
      assertNotNull(dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TemporalHelper temporalHelper0 = new TemporalHelper();
  }
}
