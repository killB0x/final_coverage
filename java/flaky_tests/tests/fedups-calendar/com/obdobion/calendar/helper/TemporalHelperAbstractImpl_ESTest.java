/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 02:55:58 GMT 2022
 */

package com.obdobion.calendar.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.obdobion.calendar.helper.TemporalHelperEUImpl;
import com.obdobion.calendar.helper.TemporalHelperUSImpl;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TemporalHelperAbstractImpl_ESTest extends TemporalHelperAbstractImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TemporalHelperUSImpl temporalHelperUSImpl0 = new TemporalHelperUSImpl();
      assertNotNull(temporalHelperUSImpl0);
      
      // Undeclared exception!
      try { 
        temporalHelperUSImpl0.createFormatWithDateOnly("&2g?;EHD$y({lrBp4f+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern includes reserved character: '{'
         //
         verifyException("java.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      temporalHelperEUImpl0.createPredefinedDateFormats();
      temporalHelperEUImpl0.createFormatWithTimeOnly("0/0000@0:0:0.0");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      temporalHelperEUImpl0.createPredefinedDateFormats();
      temporalHelperEUImpl0.createFormatWithDateOnly("0000/0/0");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      temporalHelperEUImpl0.createPredefinedDateFormats();
      temporalHelperEUImpl0.createFormat(".");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      Matcher matcher0 = temporalHelperEUImpl0.createMatcher("0000/0/0");
      assertNotNull(matcher0);
      assertFalse(matcher0.hasTransparentBounds());
      assertTrue(matcher0.hasAnchoringBounds());
      assertEquals(0, matcher0.groupCount());
      assertEquals("java.util.regex.Matcher[pattern=0000/0/0 region=0,0 lastmatch=]", matcher0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      Matcher matcher0 = temporalHelperEUImpl0.createMatcher("[0-9]{1,2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec), [0-9]{4}");
      assertNotNull(matcher0);
      assertFalse(matcher0.hasTransparentBounds());
      assertTrue(matcher0.hasAnchoringBounds());
      assertEquals(1, matcher0.groupCount());
      assertEquals("java.util.regex.Matcher[pattern=[0-9]{1,2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec), [0-9]{4} region=0,0 lastmatch=]", matcher0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      // Undeclared exception!
      try { 
        temporalHelperEUImpl0.parseWithPredefinedParsers((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      temporalHelperEUImpl0.fmtMakerIndex = 47;
      // Undeclared exception!
      try { 
        temporalHelperEUImpl0.parseWithPredefinedParsers("M");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 189 out of bounds for length 189
         //
         verifyException("com.obdobion.calendar.helper.TemporalHelperAbstractImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      // Undeclared exception!
      try { 
        temporalHelperEUImpl0.createWithTimePattern("(Ey8rl$Ms", "(Ey8rl$Ms", '[');
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 9
         // (Ey8rl$Ms
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      // Undeclared exception!
      try { 
        temporalHelperEUImpl0.createWithTimePattern("yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd'T'HH:mm:ss", 'O');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.calendar.helper.TemporalHelperAbstractImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      temporalHelperEUImpl0.createPredefinedDateFormats();
      // Undeclared exception!
      try { 
        temporalHelperEUImpl0.createWithTimePattern("[0-9]{4}", "[0-9]{4}", 'T');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern includes reserved character: '{'
         //
         verifyException("java.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      temporalHelperEUImpl0.createPredefinedDateFormats();
      temporalHelperEUImpl0.fmtMakerIndex = 1603;
      // Undeclared exception!
      try { 
        temporalHelperEUImpl0.createWithTimePattern("0-0000@0:0", "MeQ\" 0~ZlSu i71/L", '3');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1604 out of bounds for length 189
         //
         verifyException("com.obdobion.calendar.helper.TemporalHelperAbstractImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      temporalHelperEUImpl0.fmtMakerIndex = 47;
      // Undeclared exception!
      try { 
        temporalHelperEUImpl0.createPredefinedDateFormats();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 189 out of bounds for length 189
         //
         verifyException("com.obdobion.calendar.helper.TemporalHelperAbstractImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      // Undeclared exception!
      try { 
        temporalHelperEUImpl0.createMatcher((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.calendar.helper.TemporalHelperAbstractImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TemporalHelperUSImpl temporalHelperUSImpl0 = new TemporalHelperUSImpl();
      assertNotNull(temporalHelperUSImpl0);
      
      // Undeclared exception!
      try { 
        temporalHelperUSImpl0.createFormatWithTimeOnly("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      // Undeclared exception!
      try { 
        temporalHelperEUImpl0.createFormatWithTimeOnly("s\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TemporalHelperUSImpl temporalHelperUSImpl0 = new TemporalHelperUSImpl();
      assertNotNull(temporalHelperUSImpl0);
      
      // Undeclared exception!
      try { 
        temporalHelperUSImpl0.createFormatWithTimeOnly("com.obdobion.calendar.helper.TemporalHelperUSImpl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown pattern letter: o
         //
         verifyException("java.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      // Undeclared exception!
      try { 
        temporalHelperEUImpl0.createFormatWithTimeOnly("psug''YGjL-C");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      DateTimeFormatter[] dateTimeFormatterArray0 = new DateTimeFormatter[0];
      temporalHelperEUImpl0.predefinedFmt = dateTimeFormatterArray0;
      // Undeclared exception!
      try { 
        temporalHelperEUImpl0.createFormatWithTimeOnly("0000/0");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TemporalHelperUSImpl temporalHelperUSImpl0 = new TemporalHelperUSImpl();
      assertNotNull(temporalHelperUSImpl0);
      
      // Undeclared exception!
      try { 
        temporalHelperUSImpl0.createFormatWithDateOnly("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      temporalHelperEUImpl0.createPredefinedDateFormats();
      temporalHelperEUImpl0.fmtMakerIndex = (-1);
      // Undeclared exception!
      try { 
        temporalHelperEUImpl0.createFormatWithDateOnly("Q4");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      // Undeclared exception!
      try { 
        temporalHelperEUImpl0.createFormat("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      // Undeclared exception!
      try { 
        temporalHelperEUImpl0.createFormat("vd7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      // Undeclared exception!
      try { 
        temporalHelperEUImpl0.createFormat("com.obdobion.calendar.helper.TemporalHelperUSImpl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown pattern letter: o
         //
         verifyException("java.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TemporalHelperUSImpl temporalHelperUSImpl0 = new TemporalHelperUSImpl();
      assertNotNull(temporalHelperUSImpl0);
      
      DateTimeFormatter[] dateTimeFormatterArray0 = new DateTimeFormatter[1];
      temporalHelperUSImpl0.predefinedFmt = dateTimeFormatterArray0;
      // Undeclared exception!
      try { 
        temporalHelperUSImpl0.createFormat("0000/0/0@0");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      assertNotNull(temporalHelperEUImpl0);
      
      // Undeclared exception!
      try { 
        temporalHelperEUImpl0.createFormatWithDateOnly("*(?i)now");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      // Undeclared exception!
      try { 
        temporalHelperEUImpl0.parseWithPredefinedParsers("@0:0:0.0");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '@0:0:0.0' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      temporalHelperEUImpl0.createPredefinedDateFormats();
      temporalHelperEUImpl0.createWithTimePattern("H:m", "H:m", 'n');
      // Undeclared exception!
      try { 
        temporalHelperEUImpl0.parseWithPredefinedParsers("H:m");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'H:m' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      // Undeclared exception!
      try { 
        temporalHelperEUImpl0.parseWithPredefinedParsers("0-0000@0:0");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '0-0000@0:0' could not be parsed: Invalid value for YearOfEra (valid values 1 - 999999999/1000000000): 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      try { 
        temporalHelperEUImpl0.parseWithPredefinedParsers("`&A`_8wB");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // not in a predefined date / time format (`&A`_8wB)
         //
         verifyException("com.obdobion.calendar.helper.TemporalHelperAbstractImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      LocalDateTime localDateTime0 = temporalHelperEUImpl0.parseWithPredefinedParsers("now");
      assertNotNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      LocalDateTime localDateTime0 = temporalHelperEUImpl0.parseWithPredefinedParsers("today");
      assertNotNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      LocalDateTime localDateTime0 = temporalHelperEUImpl0.parseSpecialDate("0000/0/0");
      assertNotNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      DateTimeFormatter dateTimeFormatter0 = temporalHelperEUImpl0.getOutputDTF();
      assertNotNull(dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TemporalHelperUSImpl temporalHelperUSImpl0 = new TemporalHelperUSImpl();
      SimpleDateFormat simpleDateFormat0 = temporalHelperUSImpl0.getOutputSDF();
      assertEquals("yyyy-MM-dd@HH:mm:ss.SSS", simpleDateFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TemporalHelperUSImpl temporalHelperUSImpl0 = new TemporalHelperUSImpl();
      DateTimeFormatter dateTimeFormatter0 = temporalHelperUSImpl0.getOutputDF();
      assertNotNull(dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TemporalHelperEUImpl temporalHelperEUImpl0 = new TemporalHelperEUImpl();
      DateTimeFormatter dateTimeFormatter0 = temporalHelperEUImpl0.getOutputTF();
      assertNotNull(dateTimeFormatter0);
  }
}
