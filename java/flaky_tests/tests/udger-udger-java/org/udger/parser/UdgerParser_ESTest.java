/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 05:47:03 GMT 2022
 */

package org.udger.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.udger.parser.UdgerParser;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UdgerParser_ESTest extends UdgerParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      udgerParser0.setDeviceBrandParserEnabled(false);
      udgerParser0.isDeviceBrandParserEnabled();
      // Undeclared exception!
      try { 
        udgerParser0.parseUa("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/sqlite/SQLiteConfig
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "@";
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("@");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0, 99);
      udgerParser0.isValid(1027);
      boolean boolean0 = false;
      udgerParser0.setOsParserEnabled(false);
      udgerParser0.isOsParserEnabled();
      int int0 = (-3073);
      udgerParser0.setOsParserEnabled(false);
      udgerParser0.isValid((-3073));
      udgerParser0.close();
      boolean boolean1 = false;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      // Undeclared exception!
      try { 
        udgerParser_ParserDbData0.prepare(connection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      udgerParser0.close();
      assertTrue(udgerParser0.isDeviceBrandParserEnabled());
      assertTrue(udgerParser0.isOsParserEnabled());
      assertTrue(udgerParser0.isDeviceParserEnabled());
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(10, 10, 10, 0, 0).when(resultSet0).getInt(anyString());
      doReturn("", (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyString());
      doReturn(true, false, false, false, false).when(resultSet0).next();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      Statement statement1 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      // Undeclared exception!
      udgerParser_ParserDbData0.prepare(connection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      udgerParser0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((-44), (-44), (-44)).when(resultSet0).getInt(anyString());
      doReturn("").when(resultSet0).getString(anyString());
      doReturn(true, false).when(resultSet0).next();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      Statement statement1 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, (Statement) null).when(connection0).createStatement();
      udgerParser0.isDeviceParserEnabled();
      udgerParser0.isOsParserEnabled();
      // Undeclared exception!
      try { 
        udgerParser_ParserDbData0.prepare(connection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      udgerParser0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(44, 44, 44, 44, 44).when(resultSet1).getInt(anyString());
      doReturn(false, false, false, false, true).when(resultSet1).next();
      Statement statement1 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet1, resultSet1, resultSet1, resultSet1, resultSet1).when(statement1).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement1, statement1, statement1, statement1).when(connection0).createStatement();
      // Undeclared exception!
      udgerParser_ParserDbData0.prepare(connection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      udgerParser0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(resultSet1).getInt(anyString());
      doReturn(false, false, false, false, true).when(resultSet1).next();
      Statement statement1 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet1, resultSet1, resultSet1, resultSet1, resultSet1).when(statement1).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement1, statement1, statement1, statement1).when(connection0).createStatement();
      // Undeclared exception!
      udgerParser_ParserDbData0.prepare(connection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      udgerParser0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(930, 930, 930).when(resultSet0).getInt(anyString());
      doReturn("/si").when(resultSet0).getString(anyString());
      doReturn(true).when(resultSet0).next();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      Statement statement1 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      // Undeclared exception!
      try { 
        udgerParser_ParserDbData0.prepare(connection0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      udgerParser0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(resultSet0).getInt(anyString());
      doReturn((String) null).when(resultSet0).getString(anyString());
      doReturn(true).when(resultSet0).next();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement1 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      // Undeclared exception!
      try { 
        udgerParser_ParserDbData0.prepare(connection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(resultSet0).getInt(anyString());
      doReturn((String) null).when(resultSet0).getString(anyString());
      doReturn(true).when(resultSet0).next();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      Statement statement1 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      // Undeclared exception!
      try { 
        udgerParser_ParserDbData0.prepare(connection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      udgerParser0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      Statement statement1 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null, (ResultSet) null, (ResultSet) null).when(statement1).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement1, statement1, statement1, (Statement) null).when(connection0).createStatement();
      // Undeclared exception!
      try { 
        udgerParser_ParserDbData0.prepare(connection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(statement0).executeQuery(anyString());
      Statement statement1 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null, (ResultSet) null).when(statement1).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement1, statement1, (Statement) null).when(connection0).createStatement();
      int int0 = 122;
      // Undeclared exception!
      try { 
        udgerParser_ParserDbData0.prepare(connection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      udgerParser0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(resultSet1).getInt(anyString());
      doReturn(false, false, false, true, true).when(resultSet1).next();
      Statement statement1 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet1, resultSet1, resultSet1, resultSet1).when(statement1).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement1, statement1, statement1, statement1).when(connection0).createStatement();
      // Undeclared exception!
      udgerParser_ParserDbData0.prepare(connection0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      udgerParser0.close();
      int int0 = (-1923);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      Statement statement1 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null, (ResultSet) null, (ResultSet) null, (ResultSet) null, (ResultSet) null).when(statement1).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement1, statement1, statement1, statement1).when(connection0).createStatement();
      udgerParser_ParserDbData0.prepare(connection0);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      udgerParser_ParserDbData0.prepare(connection1);
      // Undeclared exception!
      try { 
        udgerParser0.parseUa("PfwW-_I 6EY)");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/sqlite/SQLiteConfig
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      Statement statement1 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null, (ResultSet) null, (ResultSet) null, (ResultSet) null, (ResultSet) null).when(statement1).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement1, statement1, statement1, statement1).when(connection0).createStatement();
      udgerParser_ParserDbData0.prepare(connection0);
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      // Undeclared exception!
      try { 
        udgerParser0.parseUa("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/sqlite/SQLiteConfig
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("org.udger.parser.UdgerParser$IdRegString");
      int int0 = (-907);
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0, (-907));
      udgerParser0.close();
      int int1 = (-1923);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      // Undeclared exception!
      try { 
        udgerParser_ParserDbData0.prepare(connection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      udgerParser0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(resultSet1).next();
      Statement statement1 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet1, resultSet1, resultSet1, resultSet1, resultSet1).when(statement1).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement1, statement1, statement1, statement1).when(connection0).createStatement();
      udgerParser_ParserDbData0.prepare(connection0);
      udgerParser0.close();
      boolean boolean0 = udgerParser0.isValid(122);
      assertTrue(boolean0);
      assertTrue(udgerParser0.isDeviceParserEnabled());
      assertTrue(udgerParser0.isOsParserEnabled());
      assertTrue(udgerParser0.isDeviceBrandParserEnabled());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(statement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, (Statement) null).when(connection0).createStatement();
      // Undeclared exception!
      try { 
        udgerParser_ParserDbData0.prepare(connection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(statement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, (Statement) null).when(connection0).createStatement();
      // Undeclared exception!
      try { 
        udgerParser_ParserDbData0.prepare(connection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0, 1027);
      udgerParser0.isValid(1027);
      udgerParser0.close();
      boolean boolean0 = false;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      // Undeclared exception!
      try { 
        udgerParser_ParserDbData0.prepare(connection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("cCS8wvRqw?}C^I*<4");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      boolean boolean0 = udgerParser0.isValid(3);
      assertTrue(boolean0);
      assertTrue(udgerParser0.isDeviceParserEnabled());
      assertTrue(udgerParser0.isDeviceBrandParserEnabled());
      assertTrue(udgerParser0.isOsParserEnabled());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("D+da*hN|nbbmg");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      assertTrue(udgerParser0.isDeviceBrandParserEnabled());
      assertTrue(udgerParser0.isOsParserEnabled());
      assertTrue(udgerParser0.isDeviceParserEnabled());
      
      boolean boolean0 = udgerParser0.isDeviceBrandParserEnabled();
      assertTrue(boolean0);
      assertTrue(udgerParser0.isOsParserEnabled());
      assertTrue(udgerParser0.isDeviceParserEnabled());
      
      boolean boolean1 = udgerParser0.isDeviceParserEnabled();
      assertTrue(boolean1 == boolean0);
      assertTrue(udgerParser0.isOsParserEnabled());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData((String) null);
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0, (-321));
      assertTrue(udgerParser0.isDeviceParserEnabled());
      
      udgerParser0.setDeviceParserEnabled(false);
      assertFalse(udgerParser0.isDeviceParserEnabled());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData(", uaFamilyVendor=");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0, true, 3983);
      assertTrue(udgerParser0.isDeviceParserEnabled());
      
      udgerParser0.setDeviceParserEnabled(false);
      assertFalse(udgerParser0.isDeviceParserEnabled());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData(")z,E&~");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      udgerParser0.setOsParserEnabled(true);
      udgerParser0.isDeviceBrandParserEnabled();
      // Undeclared exception!
      try { 
        udgerParser0.parseIp(")z,E&~");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/sqlite/SQLiteConfig
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("cCS8wvRw?}C^I*<4");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      udgerParser0.setDeviceBrandParserEnabled(false);
      // Undeclared exception!
      try { 
        udgerParser0.parseIp("cCS8wvRw?}C^I*<4");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/sqlite/SQLiteConfig
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UdgerParser udgerParser0 = new UdgerParser((UdgerParser.ParserDbData) null);
      udgerParser0.setDeviceBrandParserEnabled(true);
      boolean boolean0 = false;
      udgerParser0.setDeviceBrandParserEnabled(false);
      // Undeclared exception!
      try { 
        udgerParser0.parseIp(" ");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/sqlite/SQLiteConfig
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "";
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      boolean boolean0 = true;
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0, true, 0);
      // Undeclared exception!
      try { 
        udgerParser0.parseIp("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/sqlite/SQLiteConfig
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UdgerParser udgerParser0 = new UdgerParser((UdgerParser.ParserDbData) null, (-1));
      // Undeclared exception!
      try { 
        udgerParser0.parseUa("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/sqlite/SQLiteConfig
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData(";h|");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0, (-321));
      // Undeclared exception!
      try { 
        udgerParser0.parseUa(";h|");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/sqlite/SQLiteConfig
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("os");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0, false, 0);
      assertTrue(udgerParser0.isOsParserEnabled());
      
      udgerParser0.setOsParserEnabled(false);
      assertFalse(udgerParser0.isOsParserEnabled());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      // Undeclared exception!
      try { 
        udgerParser0.parseIp("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/sqlite/SQLiteConfig
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UdgerParser udgerParser0 = new UdgerParser((UdgerParser.ParserDbData) null);
      udgerParser0.setOsParserEnabled(false);
      udgerParser0.setOsParserEnabled(true);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        udgerParser0.parseUa("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/sqlite/SQLiteConfig
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("D+da*hN|nbbmg");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      // Undeclared exception!
      try { 
        udgerParser0.parseUa("D+da*hN|nbbmg");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/sqlite/SQLiteConfig
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("cCS8wvRqw?}C^I*<4");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      boolean boolean0 = udgerParser0.isOsParserEnabled();
      assertTrue(boolean0);
      assertTrue(udgerParser0.isDeviceParserEnabled());
      assertTrue(udgerParser0.isDeviceBrandParserEnabled());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      udgerParser0.isOsParserEnabled();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      udgerParser0.close();
      // Undeclared exception!
      try { 
        udgerParser_ParserDbData0.prepare(connection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UdgerParser udgerParser0 = new UdgerParser((UdgerParser.ParserDbData) null, false, (-1088));
      udgerParser0.close();
      assertTrue(udgerParser0.isDeviceBrandParserEnabled());
      assertTrue(udgerParser0.isOsParserEnabled());
      assertTrue(udgerParser0.isDeviceParserEnabled());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "$?y[R1`\"9w.xM~\"Y.Z";
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("$?y[R1`\"9w.xM~\"Y.Z");
      int int0 = 122;
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0, false, 122);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection1).createStatement();
      // Undeclared exception!
      try { 
        udgerParser_ParserDbData0.prepare(connection1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      UdgerParser udgerParser0 = new UdgerParser(udgerParser_ParserDbData0);
      udgerParser0.close();
      int int0 = (-1923);
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(statement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, (Statement) null).when(connection0).createStatement();
      // Undeclared exception!
      try { 
        udgerParser_ParserDbData0.prepare(connection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      // Undeclared exception!
      try { 
        udgerParser_ParserDbData0.prepare(connection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData((String) null);
      // Undeclared exception!
      try { 
        udgerParser_ParserDbData0.prepare((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "";
      UdgerParser.ParserDbData udgerParser_ParserDbData0 = new UdgerParser.ParserDbData("");
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      // Undeclared exception!
      try { 
        udgerParser_ParserDbData0.prepare(connection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.udger.parser.UdgerParser", e);
      }
  }
}
