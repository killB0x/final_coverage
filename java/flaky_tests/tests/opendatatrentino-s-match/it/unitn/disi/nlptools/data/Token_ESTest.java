/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 09:14:23 GMT 2022
 */

package it.unitn.disi.nlptools.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import it.unitn.disi.nlptools.data.Token;
import it.unitn.disi.smatch.data.ling.ISense;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Token_ESTest extends Token_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Token token0 = new Token((String) null);
      token0.setPOSTag("[<BZO5lwEb32z{");
      String string0 = token0.toString();
      assertEquals("Token{text='null', lemma='null', posTag='[<BZO5lwEb32z{', senses=[]}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Token token0 = new Token((String) null);
      token0.setLemma("[<BZO5lwEb32z{");
      String string0 = token0.toString();
      assertEquals("Token{text='null', lemma='[<BZO5lwEb32z{', posTag='null', senses=[]}", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Token token0 = new Token();
      token0.senses = null;
      List<ISense> list0 = token0.getSenses();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Token token0 = new Token();
      LinkedList<ISense> linkedList0 = new LinkedList<ISense>();
      token0.setSenses(linkedList0);
      List<ISense> list0 = token0.getSenses();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Token token0 = new Token("");
      LinkedList<ISense> linkedList0 = new LinkedList<ISense>();
      token0.senses = (List<ISense>) linkedList0;
      ISense iSense0 = mock(ISense.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iSense0).toString();
      linkedList0.add(iSense0);
      List<ISense> list0 = token0.getSenses();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Token token0 = new Token((String) null);
      token0.setPOSTag("[<BZO5lwEb32z{");
      String string0 = token0.getPOSTag();
      assertEquals("[<BZO5lwEb32z{", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Token token0 = new Token("");
      token0.setPOSTag("");
      String string0 = token0.getPOSTag();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Token token0 = new Token("");
      token0.setLemma("");
      String string0 = token0.getLemma();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Token token0 = new Token();
      token0.setLemma("DFoCf'");
      String string0 = token0.getLemma();
      assertEquals("DFoCf'", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Token token0 = new Token();
      String string0 = token0.getLemma();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Token token0 = new Token();
      String string0 = token0.getPOSTag();
      assertNull(string0);
  }
}
