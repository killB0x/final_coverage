/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 09:08:44 GMT 2022
 */

package it.unitn.disi.nlptools.data;

import org.junit.Test;
import static org.junit.Assert.*;
import it.unitn.disi.nlptools.data.IToken;
import it.unitn.disi.nlptools.data.MultiWord;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiWord_ESTest extends MultiWord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiWord multiWord0 = new MultiWord("it.unitn.disi.smatch.oracles.LinguisticOracleException");
      multiWord0.setTokens((List<IToken>) null);
      List<IToken> list0 = multiWord0.getTokens();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiWord multiWord0 = new MultiWord("it.unitn.disi.smatch.oracles.LinguisticOracleException");
      LinkedList<IToken> linkedList0 = new LinkedList<IToken>();
      multiWord0.setTokens(linkedList0);
      List<IToken> list0 = multiWord0.getTokens();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultiWord multiWord0 = new MultiWord("&nO/JX!R");
      LinkedList<IToken> linkedList0 = new LinkedList<IToken>();
      linkedList0.add((IToken) multiWord0);
      multiWord0.setTokens(linkedList0);
      List<IToken> list0 = multiWord0.getTokens();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiWord multiWord0 = new MultiWord("");
      multiWord0.setTokenIndexes((List<Integer>) null);
      List<Integer> list0 = multiWord0.getTokenIndexes();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiWord multiWord0 = new MultiWord((String) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiWord0.setTokenIndexes(linkedList0);
      List<Integer> list0 = multiWord0.getTokenIndexes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiWord multiWord0 = new MultiWord("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      multiWord0.setTokenIndexes(linkedList0);
      List<Integer> list0 = multiWord0.getTokenIndexes();
      assertTrue(list0.contains(0));
  }
}
