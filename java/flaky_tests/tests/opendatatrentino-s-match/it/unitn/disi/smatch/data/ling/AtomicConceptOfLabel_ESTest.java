/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 08:57:29 GMT 2022
 */

package it.unitn.disi.smatch.data.ling;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import it.unitn.disi.smatch.data.ling.AtomicConceptOfLabel;
import it.unitn.disi.smatch.data.ling.ISense;
import java.util.Iterator;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AtomicConceptOfLabel_ESTest extends AtomicConceptOfLabel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel((-68), "$fd`yU-D|", "$fd`yU-D|");
      atomicConceptOfLabel0.toString();
      assertEquals((-68), atomicConceptOfLabel0.getId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel((-1), "", "");
      atomicConceptOfLabel0.toString();
      assertEquals((-1), atomicConceptOfLabel0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel((-1), "argument is null", "argument is null");
      atomicConceptOfLabel0.getToken();
      assertEquals((-1), atomicConceptOfLabel0.getId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel((-266), "", "");
      atomicConceptOfLabel0.getToken();
      assertEquals((-266), atomicConceptOfLabel0.getId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel((-266), "[R\"y.jz&", "[R\"y.jz&");
      atomicConceptOfLabel0.getLemma();
      assertEquals((-266), atomicConceptOfLabel0.getId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel((-266), "", "");
      atomicConceptOfLabel0.getLemma();
      assertEquals((-266), atomicConceptOfLabel0.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel((-496), "C.e=%J1", "\"0_$_YM<");
      int int0 = atomicConceptOfLabel0.getId();
      assertEquals("C.e=%J1", atomicConceptOfLabel0.getToken());
      assertEquals((-496), int0);
      assertEquals("\"0_$_YM<", atomicConceptOfLabel0.getLemma());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel();
      // Undeclared exception!
      try { 
        atomicConceptOfLabel0.addSense((-5457), (ISense) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new sense is null
         //
         verifyException("it.unitn.disi.smatch.data.ling.AtomicConceptOfLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel();
      int int0 = atomicConceptOfLabel0.getSenseCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel();
      // Undeclared exception!
      try { 
        atomicConceptOfLabel0.getSenseAt((-1475));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // acol has no senses
         //
         verifyException("it.unitn.disi.smatch.data.ling.AtomicConceptOfLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel();
      atomicConceptOfLabel0.trim();
      assertNull(atomicConceptOfLabel0.getToken());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel();
      // Undeclared exception!
      try { 
        atomicConceptOfLabel0.removeSense((ISense) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument is null
         //
         verifyException("it.unitn.disi.smatch.data.ling.AtomicConceptOfLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel();
      List<ISense> list0 = atomicConceptOfLabel0.getSenseList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel();
      Iterator<ISense> iterator0 = atomicConceptOfLabel0.getSenses();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel();
      // Undeclared exception!
      try { 
        atomicConceptOfLabel0.getSenseIndex((ISense) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument is null
         //
         verifyException("it.unitn.disi.smatch.data.ling.AtomicConceptOfLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel();
      // Undeclared exception!
      try { 
        atomicConceptOfLabel0.addSense((ISense) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new sense is null
         //
         verifyException("it.unitn.disi.smatch.data.ling.AtomicConceptOfLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel();
      String string0 = atomicConceptOfLabel0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel(1534, (String) null, (String) null);
      atomicConceptOfLabel0.setToken((String) null);
      assertEquals(1534, atomicConceptOfLabel0.getId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel();
      atomicConceptOfLabel0.setId(2223);
      int int0 = atomicConceptOfLabel0.getId();
      assertEquals(2223, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel();
      String string0 = atomicConceptOfLabel0.getToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel();
      int int0 = atomicConceptOfLabel0.getId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel();
      String string0 = atomicConceptOfLabel0.getLemma();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel();
      // Undeclared exception!
      try { 
        atomicConceptOfLabel0.removeSense((-1192));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // acol has no senses
         //
         verifyException("it.unitn.disi.smatch.data.ling.AtomicConceptOfLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AtomicConceptOfLabel atomicConceptOfLabel0 = new AtomicConceptOfLabel();
      atomicConceptOfLabel0.setLemma("it.unitn.disi.smatch.data.ling.AtomicConceptOfLabel");
      assertNull(atomicConceptOfLabel0.getToken());
  }
}
