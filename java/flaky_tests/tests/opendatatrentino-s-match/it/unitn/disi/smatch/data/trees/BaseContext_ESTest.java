/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 09:02:21 GMT 2022
 */

package it.unitn.disi.smatch.data.trees;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import it.unitn.disi.smatch.data.trees.BaseContext;
import it.unitn.disi.smatch.data.trees.BaseNode;
import it.unitn.disi.smatch.data.trees.INode;
import it.unitn.disi.smatch.data.trees.Node;
import java.util.Iterator;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseContext_ESTest extends BaseContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BaseContext<Node> baseContext0 = new BaseContext<Node>();
      Node node0 = new Node();
      node0.setParent((INode) node0);
      baseContext0.setRoot(node0);
      baseContext0.getRoot();
      assertTrue(baseContext0.hasRoot());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BaseContext<BaseNode<Node, Node>> baseContext0 = new BaseContext<BaseNode<Node, Node>>();
      baseContext0.createRoot();
      BaseNode<Node, Node> baseNode0 = baseContext0.getRoot();
      assertEquals("n0_4825281", baseNode0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BaseContext<Node> baseContext0 = new BaseContext<Node>();
      Node node0 = new Node();
      node0.createChild();
      baseContext0.setRoot(node0);
      baseContext0.getRoot();
      assertTrue(baseContext0.hasRoot());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BaseContext<Node> baseContext0 = new BaseContext<Node>();
      // Undeclared exception!
      try { 
        baseContext0.setRoot((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.unitn.disi.smatch.data.trees.BaseContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BaseContext<BaseNode<BaseNode<BaseNode, BaseNode>, BaseNode<BaseNode, BaseNode>>> baseContext0 = new BaseContext<BaseNode<BaseNode<BaseNode, BaseNode>, BaseNode<BaseNode, BaseNode>>>();
      boolean boolean0 = baseContext0.hasRoot();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BaseContext<BaseNode<Node, Node>> baseContext0 = new BaseContext<BaseNode<Node, Node>>();
      baseContext0.createRoot();
      boolean boolean0 = baseContext0.hasRoot();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BaseContext<Node> baseContext0 = new BaseContext<Node>();
      Node node0 = new Node();
      baseContext0.setRoot(node0);
      baseContext0.trim();
      assertTrue(baseContext0.hasRoot());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BaseContext<BaseNode<BaseNode<BaseNode, Node>, Node>> baseContext0 = new BaseContext<BaseNode<BaseNode<BaseNode, Node>, Node>>();
      baseContext0.trim();
      assertFalse(baseContext0.hasRoot());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BaseContext<BaseNode<Node, BaseNode<Node, BaseNode>>> baseContext0 = new BaseContext<BaseNode<Node, BaseNode<Node, BaseNode>>>();
      List<BaseNode<Node, BaseNode<Node, BaseNode>>> list0 = baseContext0.getNodesList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BaseContext<Node> baseContext0 = new BaseContext<Node>();
      Node node0 = new Node();
      baseContext0.setRoot(node0);
      baseContext0.getNodes();
      assertTrue(baseContext0.hasRoot());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BaseContext<BaseNode<Node, Node>> baseContext0 = new BaseContext<BaseNode<Node, Node>>();
      Iterator<BaseNode<Node, Node>> iterator0 = baseContext0.getNodes();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BaseContext<BaseNode<Node, Node>> baseContext0 = new BaseContext<BaseNode<Node, Node>>();
      BaseNode<Node, Node> baseNode0 = baseContext0.getRoot();
      assertNull(baseNode0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BaseContext<BaseNode<Node, Node>> baseContext0 = new BaseContext<BaseNode<Node, Node>>();
      BaseNode<Node, Node> baseNode0 = baseContext0.createNode((String) null);
      assertEquals(0, baseNode0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BaseContext<BaseNode<Node, Node>> baseContext0 = new BaseContext<BaseNode<Node, Node>>();
      BaseNode<Node, Node> baseNode0 = baseContext0.createRoot((String) null);
      baseContext0.treeStructureChanged(baseNode0);
      assertTrue(baseNode0.getAllowsChildren());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BaseContext<Node> baseContext0 = new BaseContext<Node>();
      Node node0 = new Node();
      baseContext0.setRoot(node0);
      baseContext0.getNodesList();
      baseContext0.getNodesList();
      assertTrue(baseContext0.hasRoot());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BaseContext<BaseNode<BaseNode<BaseNode, Node>, Node>> baseContext0 = new BaseContext<BaseNode<BaseNode<BaseNode, Node>, Node>>();
      BaseNode<BaseNode<BaseNode, Node>, Node> baseNode0 = baseContext0.createNode();
      assertEquals((-1), baseNode0.getIndex());
  }
}
