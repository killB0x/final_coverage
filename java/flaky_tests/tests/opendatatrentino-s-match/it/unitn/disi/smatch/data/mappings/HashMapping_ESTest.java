/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 08:50:19 GMT 2022
 */

package it.unitn.disi.smatch.data.mappings;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import it.unitn.disi.smatch.data.ling.IAtomicConceptOfLabel;
import it.unitn.disi.smatch.data.mappings.HashMapping;
import it.unitn.disi.smatch.data.mappings.IContextMapping;
import it.unitn.disi.smatch.data.mappings.IMappingElement;
import it.unitn.disi.smatch.data.mappings.MappingElement;
import it.unitn.disi.smatch.data.trees.Context;
import it.unitn.disi.smatch.data.trees.IContext;
import it.unitn.disi.smatch.data.trees.INode;
import it.unitn.disi.smatch.data.trees.Node;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HashMapping_ESTest extends HashMapping_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMapping<Node> hashMapping0 = new HashMapping<Node>((Properties) null);
      Node node0 = new Node();
      MappingElement<Node> mappingElement0 = new MappingElement<Node>(node0, node0, 'x');
      hashMapping0.add((IMappingElement<Node>) mappingElement0);
      boolean boolean0 = hashMapping0.setRelation(node0, node0, '!');
      assertFalse(hashMapping0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Context context0 = new Context();
      HashMapping<Object> hashMapping0 = new HashMapping<Object>(context0, context0);
      IContextMapping<IAtomicConceptOfLabel> iContextMapping0 = hashMapping0.getACoLMappingInstance((IContext) null, context0);
      assertEquals(0.0, iContextMapping0.getSimilarity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Context context0 = new Context();
      HashMapping<Node> hashMapping0 = new HashMapping<Node>(context0, context0);
      Properties properties0 = hashMapping0.properties;
      HashMapping<Object> hashMapping1 = new HashMapping<Object>(properties0);
      IContextMapping<IAtomicConceptOfLabel> iContextMapping0 = hashMapping1.getACoLMappingInstance(context0, context0);
      assertEquals(0.0, iContextMapping0.getSimilarity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMapping<MappingElement<Object>> hashMapping0 = new HashMapping<MappingElement<Object>>((Properties) null);
      Context context0 = new Context();
      IContextMapping<INode> iContextMapping0 = hashMapping0.getContextMappingInstance(context0, context0);
      assertEquals(0, iContextMapping0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMapping<Object> hashMapping0 = new HashMapping<Object>();
      Context context0 = new Context();
      IContextMapping<INode> iContextMapping0 = hashMapping0.getContextMappingInstance((IContext) null, context0);
      assertTrue(iContextMapping0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMapping<Node> hashMapping0 = new HashMapping<Node>();
      Node node0 = new Node();
      Node node1 = new Node();
      hashMapping0.setRelation(node0, node1, '&');
      char char0 = hashMapping0.getRelation(node1, node0);
      assertEquals(1, hashMapping0.size());
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMapping<Object> hashMapping0 = new HashMapping<Object>();
      Object object0 = new Object();
      MappingElement<Object> mappingElement0 = new MappingElement<Object>((Object) null, object0, ';');
      hashMapping0.add((IMappingElement<Object>) mappingElement0);
      int int0 = hashMapping0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMapping<Object> hashMapping0 = new HashMapping<Object>();
      Iterator<IMappingElement<Object>> iterator0 = hashMapping0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMapping<Node> hashMapping0 = new HashMapping<Node>();
      Node node0 = new Node();
      hashMapping0.setRelation(node0, node0, '4');
      char char0 = hashMapping0.getRelation(node0, node0);
      assertEquals(1, hashMapping0.size());
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMapping<Object> hashMapping0 = new HashMapping<Object>();
      Node node0 = new Node();
      MappingElement<Object> mappingElement0 = new MappingElement<Object>(hashMapping0, node0, 'R');
      hashMapping0.add((IMappingElement<Object>) mappingElement0);
      boolean boolean0 = hashMapping0.add((IMappingElement<Object>) mappingElement0);
      assertEquals(1, hashMapping0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Context context0 = new Context();
      HashMapping<Node> hashMapping0 = new HashMapping<Node>(context0, context0);
      Properties properties0 = new Properties();
      Object object0 = new Object();
      properties0.put(properties0, object0);
      // Undeclared exception!
      try { 
        hashMapping0.setProperties(properties0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMapping<Node> hashMapping0 = new HashMapping<Node>();
      // Undeclared exception!
      try { 
        hashMapping0.setProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.unitn.disi.smatch.data.mappings.HashMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMapping<Object> hashMapping0 = new HashMapping<Object>();
      // Undeclared exception!
      try { 
        hashMapping0.add((IMappingElement<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.unitn.disi.smatch.data.mappings.HashMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMapping<Node> hashMapping0 = new HashMapping<Node>();
      Node node0 = new Node();
      Node node1 = new Node();
      hashMapping0.setRelation(node1, node0, 'O');
      hashMapping0.getTargets(node1);
      assertEquals(1, hashMapping0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMapping<Node> hashMapping0 = new HashMapping<Node>();
      Node node0 = new Node();
      hashMapping0.setRelation(node0, node0, 'J');
      hashMapping0.getSources(node0);
      assertEquals(1, hashMapping0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMapping<Object> hashMapping0 = new HashMapping<Object>();
      MappingElement<Object> mappingElement0 = new MappingElement<Object>(hashMapping0, hashMapping0, '.');
      hashMapping0.add((IMappingElement<Object>) mappingElement0);
      hashMapping0.getSources(mappingElement0);
      assertFalse(hashMapping0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMapping<Node> hashMapping0 = new HashMapping<Node>();
      Node node0 = new Node();
      hashMapping0.setRelation(node0, node0, '1');
      boolean boolean0 = hashMapping0.setRelation(node0, node0, '~');
      assertFalse(hashMapping0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMapping<Node> hashMapping0 = new HashMapping<Node>();
      Node node0 = new Node();
      hashMapping0.setRelation(node0, node0, 'k');
      boolean boolean0 = hashMapping0.setRelation(node0, node0, 'k');
      assertFalse(hashMapping0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Node node0 = new Node();
      HashMapping<Node> hashMapping0 = new HashMapping<Node>();
      boolean boolean0 = hashMapping0.setRelation(node0, node0, '?');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMapping<Node> hashMapping0 = new HashMapping<Node>();
      Node node0 = new Node();
      hashMapping0.setRelation(node0, node0, 'v');
      char char0 = hashMapping0.getRelation(node0, node0);
      assertFalse(hashMapping0.isEmpty());
      assertEquals('v', char0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMapping<Object> hashMapping0 = new HashMapping<Object>();
      Object object0 = new Object();
      boolean boolean0 = hashMapping0.remove(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMapping<Object> hashMapping0 = new HashMapping<Object>();
      boolean boolean0 = hashMapping0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMapping<Object> hashMapping0 = new HashMapping<Object>();
      // Undeclared exception!
      try { 
        hashMapping0.remove(hashMapping0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class it.unitn.disi.smatch.data.mappings.HashMapping cannot be cast to class it.unitn.disi.smatch.data.mappings.IMappingElement (it.unitn.disi.smatch.data.mappings.HashMapping and it.unitn.disi.smatch.data.mappings.IMappingElement are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @637ad69a)
         //
         verifyException("it.unitn.disi.smatch.data.mappings.HashMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMapping<MappingElement<Object>> hashMapping0 = new HashMapping<MappingElement<Object>>();
      Object object0 = new Object();
      boolean boolean0 = hashMapping0.contains(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMapping<Object> hashMapping0 = new HashMapping<Object>();
      // Undeclared exception!
      try { 
        hashMapping0.contains(hashMapping0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class it.unitn.disi.smatch.data.mappings.HashMapping cannot be cast to class it.unitn.disi.smatch.data.mappings.IMappingElement (it.unitn.disi.smatch.data.mappings.HashMapping and it.unitn.disi.smatch.data.mappings.IMappingElement are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @637ad69a)
         //
         verifyException("it.unitn.disi.smatch.data.mappings.HashMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMapping<Object> hashMapping0 = new HashMapping<Object>();
      boolean boolean0 = hashMapping0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Context context0 = new Context();
      HashMapping<Object> hashMapping0 = new HashMapping<Object>(context0, context0);
      Properties properties0 = hashMapping0.getProperties();
      Object object0 = new Object();
      properties0.put(object0, object0);
      Properties properties1 = new Properties();
      boolean boolean0 = hashMapping0.setProperties(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Properties properties0 = new Properties();
      HashMapping<Object> hashMapping0 = new HashMapping<Object>(properties0);
      boolean boolean0 = hashMapping0.setProperties(properties0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMapping<Node> hashMapping0 = new HashMapping<Node>();
      Node node0 = new Node();
      hashMapping0.setRelation(node0, node0, 'L');
      boolean boolean0 = hashMapping0.setRelation((Node) null, (Node) null, 'L');
      assertEquals(2, hashMapping0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMapping<Node> hashMapping0 = new HashMapping<Node>();
      Node node0 = new Node("");
      Node node1 = new Node();
      hashMapping0.setRelation(node1, node1, '8');
      char char0 = hashMapping0.getRelation(node0, node0);
      assertFalse(hashMapping0.isEmpty());
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMapping<Object> hashMapping0 = new HashMapping<Object>();
      Object object0 = new Object();
      hashMapping0.setRelation(object0, object0, 'V');
      assertEquals(1, hashMapping0.size());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      boolean boolean0 = hashMapping0.retainAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMapping<Node> hashMapping0 = new HashMapping<Node>();
      Node node0 = new Node();
      hashMapping0.setRelation(node0, node0, 'k');
      hashMapping0.getTargets(node0);
      assertEquals(1, hashMapping0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMapping<Node> hashMapping0 = new HashMapping<Node>();
      Node node0 = new Node("");
      hashMapping0.setRelation(node0, node0, '8');
      assertFalse(hashMapping0.isEmpty());
      
      boolean boolean0 = hashMapping0.setRelation(node0, node0, '?');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMapping<Object> hashMapping0 = new HashMapping<Object>();
      Properties properties0 = hashMapping0.getProperties();
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMapping<Node> hashMapping0 = new HashMapping<Node>();
      hashMapping0.clear();
      assertEquals(0.0, hashMapping0.getSimilarity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMapping<Object> hashMapping0 = new HashMapping<Object>();
      // Undeclared exception!
      try { 
        hashMapping0.setProperties("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/log4j/Priority
         //
         verifyException("it.unitn.disi.smatch.data.mappings.HashMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMapping<Object> hashMapping0 = new HashMapping<Object>();
      int int0 = hashMapping0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMapping<Object> hashMapping0 = new HashMapping<Object>((IContext) null, (IContext) null);
      boolean boolean0 = hashMapping0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMapping<Object> hashMapping0 = new HashMapping<Object>();
      HashMapping<Node> hashMapping1 = new HashMapping<Node>((Properties) null);
      MappingElement<Object> mappingElement0 = new MappingElement<Object>(hashMapping1, hashMapping1, 'U');
      hashMapping0.add((IMappingElement<Object>) mappingElement0);
      boolean boolean0 = hashMapping0.isEmpty();
      assertEquals(1, hashMapping0.size());
      assertFalse(boolean0);
  }
}
