/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 08:55:47 GMT 2022
 */

package it.unitn.disi.smatch.data.mappings;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import it.unitn.disi.smatch.data.mappings.MappingElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MappingElement_ESTest extends MappingElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-566));
      MappingElement<Object> mappingElement0 = new MappingElement<Object>(integer0, integer0, 'S');
      Object object0 = new Object();
      Integer integer1 = new Integer((-566));
      MappingElement<Object> mappingElement1 = new MappingElement<Object>(integer1, integer1, 'S');
      MappingElement<Object> mappingElement2 = new MappingElement<Object>(mappingElement0, mappingElement0, 'S');
      MappingElement<Object> mappingElement3 = new MappingElement<Object>(object0, mappingElement1, 'S');
      MappingElement<Integer> mappingElement4 = new MappingElement<Integer>(integer1, (Integer) null, 'S');
      Integer integer2 = mappingElement4.target;
      mappingElement0.target = (Object) null;
      MappingElement mappingElement5 = (MappingElement)mappingElement3.target;
      Integer integer3 = new Integer((-566));
      mappingElement1.target = (Object) integer3;
      mappingElement0.equals(mappingElement5);
      Integer integer4 = new Integer('S');
      MappingElement<MappingElement<Object>> mappingElement6 = new MappingElement<MappingElement<Object>>(mappingElement3, mappingElement1, 'S');
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(3635);
      MappingElement<Object> mappingElement0 = new MappingElement<Object>(integer0, integer0, 'E');
      Object object0 = new Object();
      Integer integer1 = new Integer(3635);
      MappingElement<Object> mappingElement1 = new MappingElement<Object>(integer1, integer1, 'E');
      MappingElement<Object> mappingElement2 = new MappingElement<Object>((Object) null, integer1, 'P');
      Integer integer2 = (Integer)mappingElement0.target;
      MappingElement<Object> mappingElement3 = new MappingElement<Object>(integer1, integer2, 'U');
      mappingElement3.getSource();
      Object object1 = new Object();
      MappingElement<Object> mappingElement4 = new MappingElement<Object>(object1, integer2, 'T');
      Integer integer3 = (Integer)mappingElement2.target;
      Integer integer4 = new Integer(3635);
      Integer integer5 = new Integer(3635);
      MappingElement<Integer> mappingElement5 = new MappingElement<Integer>(integer4, integer5, 'P');
      mappingElement2.equals(mappingElement5);
      MappingElement<Object> mappingElement6 = new MappingElement<Object>(mappingElement2, (Object) null, 'w');
      Integer integer6 = new Integer(3635);
      Integer integer7 = (Integer)mappingElement2.target;
      MappingElement<MappingElement<Object>> mappingElement7 = new MappingElement<MappingElement<Object>>(mappingElement0, mappingElement4, 't');
      MappingElement<Object> mappingElement8 = mappingElement7.source;
      MappingElement<Object> mappingElement9 = new MappingElement<Object>(integer7, mappingElement8, '6');
      MappingElement<MappingElement<Object>> mappingElement10 = new MappingElement<MappingElement<Object>>(mappingElement2, mappingElement1, '.');
      mappingElement0.equals(mappingElement1);
      mappingElement8.equals(mappingElement4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(3635);
      MappingElement<Object> mappingElement0 = new MappingElement<Object>(integer0, integer0, 'E');
      MappingElement<Object> mappingElement1 = new MappingElement<Object>((Object) null, integer0, 'E');
      MappingElement<Integer> mappingElement2 = new MappingElement<Integer>(integer0, integer0, 'E');
      mappingElement1.equals(mappingElement2);
      mappingElement2.equals(mappingElement0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(3635);
      MappingElement<Object> mappingElement0 = new MappingElement<Object>(integer0, integer0, 'E');
      Object object0 = new Object();
      Integer integer1 = new Integer(3635);
      MappingElement<Object> mappingElement1 = new MappingElement<Object>(integer1, integer1, 'E');
      MappingElement mappingElement2 = (MappingElement)mappingElement0.getSource();
      mappingElement1.target = (Object) mappingElement2;
      MappingElement<Object> mappingElement3 = new MappingElement<Object>(object0, mappingElement1, 'E');
      MappingElement mappingElement4 = (MappingElement)mappingElement3.target;
      mappingElement0.equals(mappingElement4);
      Integer integer2 = new Integer(2371);
      mappingElement1.equals(object0);
      Integer integer3 = new Integer(3991);
      // Undeclared exception!
      try { 
        mappingElement2.getSource();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-744));
      MappingElement<Integer> mappingElement0 = new MappingElement<Integer>(integer0, integer0, 'q');
      Integer integer1 = new Integer(570);
      mappingElement0.source = integer1;
      Object object0 = new Object();
      mappingElement0.equals(object0);
      MappingElement<Object> mappingElement1 = new MappingElement<Object>(mappingElement0.source, integer0, 'q');
      Integer integer2 = mappingElement0.source;
      mappingElement1.source = (Object) integer2;
      mappingElement0.equals(mappingElement1);
      mappingElement1.equals(mappingElement0);
      MappingElement<Object> mappingElement2 = new MappingElement<Object>(mappingElement1, mappingElement1.source, 'q');
      Object object1 = new Object();
      MappingElement<Object> mappingElement3 = new MappingElement<Object>(object1, object0, 'q');
      MappingElement<Object> mappingElement4 = new MappingElement<Object>(mappingElement2, mappingElement3, 'q');
      mappingElement4.relation = 'p';
      MappingElement<Object> mappingElement5 = new MappingElement<Object>(mappingElement4, integer1, 'q');
      Object object2 = new Object();
      mappingElement2.target = object2;
      mappingElement5.relation = 'p';
      mappingElement0.equals(mappingElement5);
      Integer integer3 = mappingElement0.target;
      mappingElement0.equals(integer3);
      Object object3 = mappingElement5.getSource();
      MappingElement<Object> mappingElement6 = new MappingElement<Object>(mappingElement1.source, object3, 'p');
      MappingElement<Object> mappingElement7 = new MappingElement<Object>(mappingElement5, mappingElement6, 'p');
      MappingElement<Object> mappingElement8 = new MappingElement<Object>(mappingElement1.source, mappingElement7, 'p');
      MappingElement<Object> mappingElement9 = new MappingElement<Object>((Object) null, mappingElement2, 'D');
      MappingElement<Object> mappingElement10 = new MappingElement<Object>(mappingElement8, mappingElement9, 'q');
      mappingElement0.equals(mappingElement10);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MappingElement<Integer> mappingElement0 = new MappingElement<Integer>(integer0, integer1, '_');
      mappingElement0.relation = '_';
      MappingElement<Object> mappingElement1 = new MappingElement<Object>(mappingElement0, mappingElement0, '_');
      mappingElement0.relation = 'j';
      mappingElement1.relation = '>';
      Object object0 = mappingElement1.getSource();
      mappingElement1.hashCode();
      mappingElement0.getSource();
      mappingElement0.getSource();
      mappingElement1.hashCode();
      mappingElement0.equals(mappingElement1);
      Object object1 = mappingElement1.getSource();
      MappingElement<MappingElement<Object>> mappingElement2 = new MappingElement<MappingElement<Object>>(mappingElement1, mappingElement1, '>');
      MappingElement<Object> mappingElement3 = mappingElement2.source;
      MappingElement<Object> mappingElement4 = new MappingElement<Object>(object1, mappingElement3, '>');
      mappingElement3.target = (Object) mappingElement4;
      mappingElement2.equals(mappingElement3);
      mappingElement2.source = mappingElement3;
      mappingElement0.getSource();
      mappingElement0.getSource();
      MappingElement<Object> mappingElement5 = mappingElement2.getSource();
      mappingElement5.getTarget();
      mappingElement2.getRelation();
      mappingElement1.equals(object0);
      mappingElement5.getRelation();
      MappingElement<Object> mappingElement6 = mappingElement2.getSource();
      mappingElement2.source.equals(mappingElement3);
      mappingElement6.equals(mappingElement3.target);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1322));
      MappingElement<Object> mappingElement0 = new MappingElement<Object>(integer0, integer0, 'M');
      MappingElement<Object> mappingElement1 = new MappingElement<Object>(integer0, mappingElement0, 'z');
      MappingElement<Object> mappingElement2 = new MappingElement<Object>(mappingElement1, mappingElement1, 'M');
      MappingElement mappingElement3 = (MappingElement)mappingElement2.source;
      boolean boolean0 = mappingElement1.equals(mappingElement3);
      assertEquals('z', mappingElement3.getRelation());
      assertTrue(boolean0);
      assertFalse(mappingElement2.equals((Object)mappingElement0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(31);
      MappingElement<Integer> mappingElement0 = new MappingElement<Integer>((Integer) null, integer0, 'a');
      mappingElement0.equals(integer0);
      MappingElement<Integer> mappingElement1 = new MappingElement<Integer>(integer0, (Integer) null, 'a');
      MappingElement<Object> mappingElement2 = new MappingElement<Object>(mappingElement1, integer0, 'a');
      mappingElement1.source = null;
      boolean boolean0 = mappingElement2.equals(mappingElement0);
      assertFalse(boolean0);
      
      MappingElement<MappingElement<Integer>> mappingElement3 = new MappingElement<MappingElement<Integer>>(mappingElement1, mappingElement0, 'a');
      MappingElement<Integer> mappingElement4 = mappingElement3.source;
      Integer integer1 = new Integer(60);
      mappingElement2.target = (Object) mappingElement1;
      mappingElement4.target = integer1;
      Object object0 = new Object();
      mappingElement2.source = object0;
      boolean boolean1 = mappingElement0.equals(mappingElement4);
      assertFalse(boolean1);
      
      MappingElement<MappingElement<Object>> mappingElement5 = new MappingElement<MappingElement<Object>>(mappingElement2, mappingElement2, '*');
      boolean boolean2 = mappingElement5.equals(mappingElement0);
      assertFalse(boolean2);
      
      Integer integer2 = new Integer(1696);
      boolean boolean3 = mappingElement2.equals(integer2);
      assertFalse(boolean3);
      
      boolean boolean4 = mappingElement2.equals((Object) null);
      assertEquals('a', mappingElement2.getRelation());
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-566));
      MappingElement<Object> mappingElement0 = new MappingElement<Object>(integer0, integer0, 'S');
      Object object0 = new Object();
      MappingElement<Object> mappingElement1 = new MappingElement<Object>(integer0, integer0, 'S');
      MappingElement<Object> mappingElement2 = new MappingElement<Object>(mappingElement0, mappingElement0, 'S');
      MappingElement<Object> mappingElement3 = new MappingElement<Object>(object0, mappingElement1, 'S');
      MappingElement<Integer> mappingElement4 = new MappingElement<Integer>(integer0, (Integer) null, 'S');
      Integer integer1 = mappingElement4.target;
      mappingElement4.source = null;
      mappingElement0.target = (Object) null;
      MappingElement mappingElement5 = (MappingElement)mappingElement3.target;
      mappingElement1.target = (Object) null;
      mappingElement0.equals(mappingElement5);
      Integer integer2 = new Integer('S');
      MappingElement<MappingElement<Object>> mappingElement6 = new MappingElement<MappingElement<Object>>(mappingElement3, mappingElement1, 'S');
      boolean boolean0 = mappingElement1.equals(mappingElement3);
      assertTrue(mappingElement1.equals((Object)mappingElement0));
      assertFalse(mappingElement3.equals((Object)mappingElement2));
      assertEquals('S', mappingElement3.getRelation());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(3635);
      MappingElement<Object> mappingElement0 = new MappingElement<Object>(integer0, integer0, 'E');
      MappingElement<Object> mappingElement1 = new MappingElement<Object>((Object) null, integer0, 'E');
      MappingElement<Integer> mappingElement2 = new MappingElement<Integer>(integer0, integer0, 'E');
      boolean boolean0 = mappingElement1.equals(mappingElement2);
      assertFalse(boolean0);
      
      mappingElement0.target = (Object) mappingElement1;
      boolean boolean1 = mappingElement2.equals(mappingElement0);
      assertFalse(boolean1);
      
      boolean boolean2 = mappingElement0.equals(mappingElement2);
      assertFalse(mappingElement0.equals((Object)mappingElement1));
      assertFalse(boolean2);
      assertEquals('E', mappingElement2.getRelation());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(3635);
      MappingElement<Object> mappingElement0 = new MappingElement<Object>(integer0, integer0, 'E');
      Object object0 = new Object();
      Integer integer1 = new Integer(3635);
      MappingElement<Object> mappingElement1 = new MappingElement<Object>(integer1, integer1, 'E');
      MappingElement<Object> mappingElement2 = new MappingElement<Object>(mappingElement0, mappingElement0, 'P');
      Object object1 = mappingElement2.getSource();
      assertTrue(mappingElement0.equals((Object)mappingElement1));
      
      mappingElement1.target = object1;
      MappingElement<Object> mappingElement3 = new MappingElement<Object>(object0, mappingElement1, 'E');
      MappingElement mappingElement4 = (MappingElement)mappingElement3.target;
      boolean boolean0 = mappingElement0.equals(mappingElement4);
      assertFalse(boolean0);
      
      Integer integer2 = new Integer(2371);
      MappingElement<Integer> mappingElement5 = new MappingElement<Integer>(integer0, integer2, ']');
      Integer integer3 = mappingElement5.getSource();
      assertEquals(3635, (int)integer3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-6036));
      MappingElement<Integer> mappingElement0 = new MappingElement<Integer>(integer0, (Integer) null, '\\');
      mappingElement0.target = integer0;
      mappingElement0.source = null;
      mappingElement0.target = null;
      mappingElement0.relation = '\\';
      Integer integer1 = new Integer(0);
      mappingElement0.source = integer1;
      mappingElement0.target = null;
      mappingElement0.source = null;
      mappingElement0.relation = 'I';
      mappingElement0.relation = '&';
      mappingElement0.hashCode();
      mappingElement0.getTarget();
      mappingElement0.getRelation();
      mappingElement0.getSource();
      mappingElement0.getSource();
      assertEquals('&', mappingElement0.getRelation());
      
      Integer integer2 = mappingElement0.source;
      MappingElement<Object> mappingElement1 = new MappingElement<Object>((Object) null, (Object) null, 'p');
      MappingElement<Object> mappingElement2 = new MappingElement<Object>((Object) null, mappingElement1, '&');
      assertEquals('p', mappingElement1.getRelation());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      MappingElement<Integer> mappingElement0 = new MappingElement<Integer>(integer0, integer1, 'L');
      mappingElement0.target = integer0;
      mappingElement0.relation = 'L';
      mappingElement0.target = integer0;
      mappingElement0.getRelation();
      mappingElement0.getTarget();
      Object object0 = new Object();
      MappingElement<Object> mappingElement1 = new MappingElement<Object>(mappingElement0.target, object0, 'L');
      Object object1 = mappingElement0.getSource();
      MappingElement<Object> mappingElement2 = new MappingElement<Object>((Object) null, object1, 'L');
      MappingElement<Object> mappingElement3 = new MappingElement<Object>(mappingElement1, mappingElement2, 'L');
      boolean boolean0 = mappingElement3.equals(mappingElement1);
      assertFalse(boolean0);
      assertEquals('L', mappingElement3.getRelation());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MappingElement<Integer> mappingElement0 = new MappingElement<Integer>(integer0, integer0, '7');
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-1));
      mappingElement0.target = integer2;
      mappingElement0.relation = '{';
      MappingElement<Object> mappingElement1 = new MappingElement<Object>(integer0, integer1, '~');
      mappingElement1.hashCode();
      Object object0 = mappingElement1.getTarget();
      mappingElement1.target = (Object) mappingElement0;
      mappingElement1.target = object0;
      mappingElement1.hashCode();
      mappingElement1.relation = '~';
      Integer integer3 = new Integer((-1));
      mappingElement0.source = integer3;
      Integer integer4 = new Integer((-1));
      mappingElement0.target = integer4;
      mappingElement1.getTarget();
      mappingElement0.source = integer0;
      mappingElement1.getTarget();
      mappingElement0.getRelation();
      MappingElement<MappingElement<Object>> mappingElement2 = new MappingElement<MappingElement<Object>>(mappingElement1, mappingElement1, '2');
      MappingElement<Object> mappingElement3 = mappingElement2.getTarget();
      Integer integer5 = new Integer(0);
      mappingElement3.source = (Object) integer5;
      mappingElement3.relation = '7';
      mappingElement1.getRelation();
      mappingElement1.getRelation();
      boolean boolean0 = mappingElement3.equals(integer3);
      assertEquals('7', mappingElement1.getRelation());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer('V');
      MappingElement<Integer> mappingElement0 = new MappingElement<Integer>(integer0, integer0, 'b');
      mappingElement0.getSource();
      assertEquals('b', mappingElement0.getRelation());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(278);
      Integer integer1 = new Integer(278);
      Integer integer2 = new Integer(278);
      MappingElement<Integer> mappingElement0 = new MappingElement<Integer>(integer1, integer2, 'Q');
      MappingElement<Object> mappingElement1 = new MappingElement<Object>(integer0, mappingElement0, 'Q');
      mappingElement1.getRelation();
      mappingElement0.source = integer2;
      Integer integer3 = (Integer)mappingElement1.source;
      mappingElement1.equals(integer3);
      mappingElement1.getTarget();
      Integer integer4 = new Integer(1);
      mappingElement0.source = integer4;
      MappingElement<MappingElement<Integer>> mappingElement2 = new MappingElement<MappingElement<Integer>>(mappingElement0, mappingElement0, 'm');
      MappingElement<Integer> mappingElement3 = mappingElement2.getTarget();
      Integer integer5 = (Integer)mappingElement1.source;
      mappingElement3.equals(integer5);
      mappingElement0.source = integer1;
      mappingElement1.getSource();
      mappingElement0.relation = '0';
      mappingElement0.getTarget();
      MappingElement<MappingElement<Object>> mappingElement4 = new MappingElement<MappingElement<Object>>(mappingElement1, mappingElement1, 'Q');
      mappingElement4.target = mappingElement1;
      MappingElement<Object> mappingElement5 = mappingElement4.getSource();
      Integer integer6 = new Integer(1);
      MappingElement<Object> mappingElement6 = new MappingElement<Object>(integer6, mappingElement0.source, 'Q');
      Integer integer7 = (Integer)mappingElement6.getSource();
      mappingElement4.target.relation = '\"';
      mappingElement5.source = (Object) integer6;
      mappingElement5.source = (Object) integer7;
      mappingElement5.getRelation();
      mappingElement3.hashCode();
      mappingElement3.hashCode();
      mappingElement3.getSource();
      assertEquals('0', mappingElement3.getRelation());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MappingElement<Integer> mappingElement0 = new MappingElement<Integer>((Integer) null, (Integer) null, 'K');
      Integer integer0 = new Integer(3486);
      MappingElement<Integer> mappingElement1 = new MappingElement<Integer>(integer0, (Integer) null, 's');
      Object object0 = mappingElement1.getTarget();
      assertNull(object0);
      
      boolean boolean0 = mappingElement0.equals((Object) null);
      assertFalse(boolean0);
      
      boolean boolean1 = mappingElement0.equals(mappingElement1);
      assertFalse(boolean1);
      assertEquals('s', mappingElement1.getRelation());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MappingElement<Object> mappingElement0 = new MappingElement<Object>((Object) null, (Object) null, 'u');
      mappingElement0.getSource();
      Integer integer0 = new Integer((-459));
      Integer integer1 = new Integer((-459));
      MappingElement<Integer> mappingElement1 = new MappingElement<Integer>(integer0, integer1, '`');
      Object object0 = mappingElement1.getSource();
      boolean boolean0 = mappingElement0.equals(object0);
      assertFalse(boolean0);
      
      MappingElement<MappingElement<Object>> mappingElement2 = new MappingElement<MappingElement<Object>>(mappingElement0, mappingElement0, 'u');
      MappingElement<Object> mappingElement3 = mappingElement2.getSource();
      assertNotNull(mappingElement3);
      
      mappingElement1.equals(mappingElement3);
      MappingElement<Object> mappingElement4 = mappingElement2.getTarget();
      assertNotNull(mappingElement4);
      
      Integer integer2 = new Integer((-459));
      mappingElement2.target = mappingElement0;
      mappingElement3.source = (Object) integer0;
      MappingElement<Integer> mappingElement5 = new MappingElement<Integer>(integer2, integer1, '\"');
      assertFalse(mappingElement5.equals((Object)mappingElement1));
      
      mappingElement4.target = (Object) mappingElement5;
      mappingElement3.hashCode();
      boolean boolean1 = mappingElement3.equals((Object) null);
      assertFalse(boolean1);
      
      MappingElement<MappingElement<Integer>> mappingElement6 = new MappingElement<MappingElement<Integer>>(mappingElement1, mappingElement1, '\"');
      boolean boolean2 = mappingElement6.equals(mappingElement3);
      assertEquals('u', mappingElement3.getRelation());
      assertFalse(mappingElement1.equals((Object)mappingElement5));
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(88);
      MappingElement<Integer> mappingElement0 = new MappingElement<Integer>(integer0, integer0, 'I');
      mappingElement0.target = integer0;
      Integer integer1 = new Integer(88);
      Integer integer2 = new Integer(0);
      mappingElement0.source = integer2;
      mappingElement0.source = integer1;
      MappingElement<Object> mappingElement1 = new MappingElement<Object>(mappingElement0, mappingElement0, '?');
      Integer integer3 = mappingElement0.target;
      mappingElement1.target = (Object) integer3;
      mappingElement0.getRelation();
      MappingElement<MappingElement<Object>> mappingElement2 = new MappingElement<MappingElement<Object>>(mappingElement1, mappingElement1, 'I');
      mappingElement2.relation = 'y';
      mappingElement0.relation = '!';
      MappingElement<Object> mappingElement3 = new MappingElement<Object>(mappingElement0.source, mappingElement1.target, '?');
      mappingElement2.equals(mappingElement3);
      mappingElement2.getRelation();
      assertEquals('y', mappingElement2.getRelation());
      
      mappingElement3.source = (Object) mappingElement0.source;
      MappingElement<Object> mappingElement4 = new MappingElement<Object>(mappingElement0.target, integer3, 'I');
      mappingElement0.source = integer1;
      mappingElement3.equals(mappingElement4);
      mappingElement4.getRelation();
      Integer integer4 = (Integer)mappingElement4.target;
      boolean boolean0 = mappingElement0.equals(integer4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MappingElement<Integer> mappingElement0 = new MappingElement<Integer>(integer0, integer1, 'U');
      Integer integer2 = new Integer(0);
      mappingElement0.source = integer2;
      mappingElement0.getRelation();
      MappingElement<Integer> mappingElement1 = new MappingElement<Integer>(integer1, mappingElement0.source, 'I');
      mappingElement1.relation = 'F';
      MappingElement<Object> mappingElement2 = new MappingElement<Object>(mappingElement0, mappingElement1, '$');
      mappingElement2.relation = 'U';
      MappingElement mappingElement3 = (MappingElement)mappingElement2.target;
      mappingElement2.source = (Object) mappingElement3;
      mappingElement2.equals(mappingElement0.source);
      mappingElement2.equals(integer0);
      mappingElement1.getTarget();
      assertEquals('F', mappingElement1.getRelation());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      MappingElement<Object> mappingElement0 = new MappingElement<Object>(object0, object0, 'V');
      MappingElement<Object> mappingElement1 = new MappingElement<Object>(mappingElement0, mappingElement0, 'V');
      MappingElement mappingElement2 = (MappingElement)mappingElement1.target;
      boolean boolean0 = mappingElement1.equals(mappingElement2);
      assertFalse(boolean0);
      
      mappingElement0.hashCode();
      Object object1 = mappingElement1.getTarget();
      assertNotNull(object1);
      
      MappingElement<MappingElement<Object>> mappingElement3 = new MappingElement<MappingElement<Object>>(mappingElement0, mappingElement0, 'V');
      assertEquals('V', mappingElement3.getRelation());
      
      char char0 = mappingElement3.getRelation();
      assertEquals('V', char0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(1901);
      MappingElement<Integer> mappingElement0 = new MappingElement<Integer>(integer0, integer0, 'g');
      MappingElement<Integer> mappingElement1 = new MappingElement<Integer>(integer0, integer0, 'g');
      boolean boolean0 = mappingElement0.equals(mappingElement1);
      assertEquals('g', mappingElement1.getRelation());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      MappingElement<Object> mappingElement0 = new MappingElement<Object>(object0, object0, 'd');
      boolean boolean0 = mappingElement0.equals(object0);
      assertFalse(boolean0);
      assertEquals('d', mappingElement0.getRelation());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MappingElement<MappingElement<Object>> mappingElement0 = new MappingElement<MappingElement<Object>>((MappingElement<Object>) null, (MappingElement<Object>) null, 'L');
      mappingElement0.source = null;
      mappingElement0.hashCode();
      assertEquals('L', mappingElement0.getRelation());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MappingElement<MappingElement<Object>> mappingElement0 = new MappingElement<MappingElement<Object>>((MappingElement<Object>) null, (MappingElement<Object>) null, 's');
      boolean boolean0 = mappingElement0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals('s', mappingElement0.getRelation());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      MappingElement<Object> mappingElement0 = new MappingElement<Object>(object0, object0, 'd');
      MappingElement<MappingElement<Object>> mappingElement1 = new MappingElement<MappingElement<Object>>(mappingElement0, mappingElement0, 'd');
      assertEquals('d', mappingElement1.getRelation());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MappingElement<Integer> mappingElement0 = new MappingElement<Integer>(integer0, integer1, 'K');
      char char0 = mappingElement0.getRelation();
      assertEquals('K', char0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      MappingElement<Object> mappingElement0 = new MappingElement<Object>(object0, object0, 'V');
      MappingElement<Object> mappingElement1 = new MappingElement<Object>(mappingElement0, mappingElement0, 'V');
      mappingElement0.hashCode();
      MappingElement mappingElement2 = (MappingElement)mappingElement1.getTarget();
      assertEquals('V', mappingElement2.getRelation());
      assertNotNull(mappingElement2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object object0 = new Object();
      MappingElement<Object> mappingElement0 = new MappingElement<Object>(object0, object0, 'V');
      MappingElement<Object> mappingElement1 = new MappingElement<Object>(mappingElement0, mappingElement0, 'V');
      MappingElement mappingElement2 = (MappingElement)mappingElement1.getTarget();
      assertNotNull(mappingElement2);
      assertEquals('V', mappingElement2.getRelation());
  }
}
