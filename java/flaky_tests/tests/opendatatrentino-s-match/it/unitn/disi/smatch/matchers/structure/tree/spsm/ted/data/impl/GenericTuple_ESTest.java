/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 08:59:11 GMT 2022
 */

package it.unitn.disi.smatch.matchers.structure.tree.spsm.ted.data.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import it.unitn.disi.smatch.matchers.structure.tree.spsm.ted.data.impl.GenericTuple;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GenericTuple_ESTest extends GenericTuple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GenericTuple<Integer> genericTuple0 = new GenericTuple<Integer>((Integer) null, (Integer) null);
      Integer integer0 = genericTuple0.getRight();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      GenericTuple<Integer> genericTuple0 = new GenericTuple<Integer>(integer0, integer0);
      GenericTuple<Object> genericTuple1 = new GenericTuple<Object>(integer0, genericTuple0);
      Object object0 = genericTuple1.getRight();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      GenericTuple<Integer> genericTuple0 = new GenericTuple<Integer>(integer0, integer0);
      GenericTuple<Object> genericTuple1 = new GenericTuple<Object>(integer0, genericTuple0);
      GenericTuple<GenericTuple<Object>> genericTuple2 = new GenericTuple<GenericTuple<Object>>(genericTuple1, genericTuple1);
      Object object0 = genericTuple2.getLeft();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1279));
      GenericTuple<Object> genericTuple0 = new GenericTuple<Object>((Object) null, integer0);
      // Undeclared exception!
      try { 
        genericTuple0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1279));
      GenericTuple<Integer> genericTuple0 = new GenericTuple<Integer>((Integer) null, integer0);
      Object object0 = genericTuple0.getLeft();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GenericTuple<Integer> genericTuple0 = new GenericTuple<Integer>((Integer) null, (Integer) null);
      genericTuple0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      GenericTuple<Integer> genericTuple0 = new GenericTuple<Integer>(integer0, integer0);
      genericTuple0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      GenericTuple<Object> genericTuple0 = new GenericTuple<Object>(object0, object0);
      GenericTuple<Object> genericTuple1 = new GenericTuple<Object>(object0, object0);
      boolean boolean0 = genericTuple0.equals(genericTuple1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1);
      GenericTuple<Object> genericTuple0 = new GenericTuple<Object>(integer0, integer0);
      GenericTuple<Object> genericTuple1 = new GenericTuple<Object>(integer0, (Object) null);
      boolean boolean0 = genericTuple0.equals(genericTuple1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      GenericTuple<Object> genericTuple0 = new GenericTuple<Object>(object0, object0);
      GenericTuple<GenericTuple<Object>> genericTuple1 = new GenericTuple<GenericTuple<Object>>(genericTuple0, genericTuple0);
      GenericTuple<Integer> genericTuple2 = new GenericTuple<Integer>((Integer) null, (Integer) null);
      boolean boolean0 = genericTuple2.equals(genericTuple1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      GenericTuple<Object> genericTuple0 = new GenericTuple<Object>(object0, object0);
      GenericTuple<GenericTuple<Object>> genericTuple1 = new GenericTuple<GenericTuple<Object>>(genericTuple0, genericTuple0);
      boolean boolean0 = genericTuple1.equals(genericTuple0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1654);
      GenericTuple<Object> genericTuple0 = new GenericTuple<Object>(integer0, (Object) null);
      GenericTuple<Object> genericTuple1 = new GenericTuple<Object>(integer0, (Object) null);
      boolean boolean0 = genericTuple0.equals(genericTuple1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(1654);
      GenericTuple<Object> genericTuple0 = new GenericTuple<Object>(integer0, (Object) null);
      boolean boolean0 = genericTuple0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      GenericTuple<Object> genericTuple0 = new GenericTuple<Object>(object0, object0);
      boolean boolean0 = genericTuple0.equals(genericTuple0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(1);
      GenericTuple<Object> genericTuple0 = new GenericTuple<Object>((Object) null, integer0);
      GenericTuple<Object> genericTuple1 = new GenericTuple<Object>((Object) null, (Object) null);
      boolean boolean0 = genericTuple1.equals(genericTuple0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(1);
      GenericTuple<Object> genericTuple0 = new GenericTuple<Object>(integer0, integer0);
      String string0 = genericTuple0.toString();
      assertNotNull(string0);
  }
}
