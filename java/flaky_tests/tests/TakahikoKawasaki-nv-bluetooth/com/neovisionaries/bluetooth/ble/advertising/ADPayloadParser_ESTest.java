/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 23:26:56 GMT 2022
 */

package com.neovisionaries.bluetooth.ble.advertising;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.neovisionaries.bluetooth.ble.advertising.ADManufacturerSpecificBuilder;
import com.neovisionaries.bluetooth.ble.advertising.ADPayloadParser;
import com.neovisionaries.bluetooth.ble.advertising.ADStructure;
import com.neovisionaries.bluetooth.ble.advertising.ADStructureBuilder;
import com.neovisionaries.bluetooth.ble.advertising.FlagsBuilder;
import com.neovisionaries.bluetooth.ble.advertising.LocalNameBuilder;
import com.neovisionaries.bluetooth.ble.advertising.MS004CBuilder;
import com.neovisionaries.bluetooth.ble.advertising.MS019ABuilder;
import com.neovisionaries.bluetooth.ble.advertising.MSBuilder;
import com.neovisionaries.bluetooth.ble.advertising.TxPowerLevelBuilder;
import com.neovisionaries.bluetooth.ble.advertising.UUIDsBuilder;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ADPayloadParser_ESTest extends ADPayloadParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[3] = (byte)2;
      List<ADStructure> list0 = aDPayloadParser0.parse(byteArray0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      MS004CBuilder mS004CBuilder0 = new MS004CBuilder();
      aDPayloadParser0.registerManufacturerSpecificBuilder(65535, mS004CBuilder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      MSBuilder mSBuilder0 = new MSBuilder();
      aDPayloadParser0.registerManufacturerSpecificBuilder((byte)0, mSBuilder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      FlagsBuilder flagsBuilder0 = new FlagsBuilder();
      aDPayloadParser0.registerBuilder(255, flagsBuilder0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-82);
      List<ADStructure> list0 = aDPayloadParser0.parse(byteArray0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      List<ADStructure> list0 = aDPayloadParser0.parse(byteArray0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      byte[] byteArray0 = new byte[19];
      byteArray0[2] = (byte)2;
      List<ADStructure> list0 = aDPayloadParser0.parse(byteArray0, (int) (byte)2, 13);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)5;
      List<ADStructure> list0 = aDPayloadParser0.parse(byteArray0, (int) (byte)2, 13);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      byte[] byteArray0 = new byte[4];
      List<ADStructure> list0 = aDPayloadParser0.parse(byteArray0, 2727, 255);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      TxPowerLevelBuilder txPowerLevelBuilder0 = new TxPowerLevelBuilder();
      aDPayloadParser0.registerBuilder(0, txPowerLevelBuilder0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[42];
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      List<ADStructure> list0 = aDPayloadParser0.parse(byteArray0, 5, Integer.MAX_VALUE);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      byte[] byteArray0 = new byte[0];
      List<ADStructure> list0 = aDPayloadParser0.parse(byteArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[39];
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      List<ADStructure> list0 = aDPayloadParser0.parse(byteArray0, 1316, (-223));
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      byte[] byteArray0 = new byte[6];
      List<ADStructure> list0 = aDPayloadParser0.parse(byteArray0, (-5), 7);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      List<ADStructure> list0 = aDPayloadParser0.parse((byte[]) null, 255, 255);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      List<ADStructure> list0 = aDPayloadParser0.parse((byte[]) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      aDPayloadParser0.registerManufacturerSpecificBuilder(927, (ADManufacturerSpecificBuilder) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      MS019ABuilder mS019ABuilder0 = new MS019ABuilder();
      // Undeclared exception!
      try { 
        aDPayloadParser0.registerManufacturerSpecificBuilder(2147483632, mS019ABuilder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'companyId' is out of the valid range: 2147483632
         //
         verifyException("com.neovisionaries.bluetooth.ble.advertising.ADPayloadParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      MSBuilder mSBuilder0 = new MSBuilder();
      // Undeclared exception!
      try { 
        aDPayloadParser0.registerManufacturerSpecificBuilder((-754), mSBuilder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'companyId' is out of the valid range: -754
         //
         verifyException("com.neovisionaries.bluetooth.ble.advertising.ADPayloadParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      aDPayloadParser0.registerBuilder(31, (ADStructureBuilder) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      UUIDsBuilder uUIDsBuilder0 = new UUIDsBuilder();
      // Undeclared exception!
      try { 
        aDPayloadParser0.registerBuilder(1404, uUIDsBuilder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'type' is out of the valid range: 1404
         //
         verifyException("com.neovisionaries.bluetooth.ble.advertising.ADPayloadParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ADPayloadParser aDPayloadParser0 = ADPayloadParser.getInstance();
      LocalNameBuilder localNameBuilder0 = new LocalNameBuilder();
      // Undeclared exception!
      try { 
        aDPayloadParser0.registerBuilder((-1648), localNameBuilder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'type' is out of the valid range: -1648
         //
         verifyException("com.neovisionaries.bluetooth.ble.advertising.ADPayloadParser", e);
      }
  }
}
