/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 23:31:11 GMT 2022
 */

package com.neovisionaries.bluetooth.ble.advertising;

import org.junit.Test;
import static org.junit.Assert.*;
import com.neovisionaries.bluetooth.ble.advertising.Flags;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Flags_ESTest extends Flags_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Flags flags0 = new Flags();
      assertFalse(flags0.isGeneralDiscoverable());
      
      flags0.setGeneralDiscoverable(true);
      flags0.setGeneralDiscoverable(true);
      assertTrue(flags0.isGeneralDiscoverable());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-69);
      Flags flags0 = new Flags(255, 1261, byteArray0);
      boolean boolean0 = flags0.isLimitedDiscoverable();
      assertTrue(flags0.isLegacySupported());
      assertTrue(flags0.isControllerSimultaneitySupported());
      assertTrue(boolean0);
      assertTrue(flags0.isGeneralDiscoverable());
      assertTrue(flags0.isHostSimultaneitySupported());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      Flags flags0 = new Flags(199, (-2299), byteArray0);
      boolean boolean0 = flags0.isControllerSimultaneitySupported();
      assertTrue(flags0.isLegacySupported());
      assertTrue(flags0.isHostSimultaneitySupported());
      assertTrue(boolean0);
      assertTrue(flags0.isGeneralDiscoverable());
      assertFalse(flags0.isLimitedDiscoverable());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Flags flags0 = new Flags();
      byte[] byteArray0 = new byte[0];
      flags0.setData(byteArray0);
      flags0.setLimitedDiscoverable(false);
      assertFalse(flags0.isLimitedDiscoverable());
      assertFalse(flags0.isControllerSimultaneitySupported());
      assertTrue(flags0.isLegacySupported());
      assertFalse(flags0.isGeneralDiscoverable());
      assertFalse(flags0.isHostSimultaneitySupported());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Flags flags0 = new Flags();
      flags0.setData((byte[]) null);
      flags0.setLimitedDiscoverable(false);
      assertFalse(flags0.isLimitedDiscoverable());
      assertFalse(flags0.isControllerSimultaneitySupported());
      assertFalse(flags0.isHostSimultaneitySupported());
      assertFalse(flags0.isGeneralDiscoverable());
      assertTrue(flags0.isLegacySupported());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Flags flags0 = new Flags(10, 10, byteArray0);
      assertFalse(flags0.isLegacySupported());
      assertTrue(flags0.isLimitedDiscoverable());
      assertTrue(flags0.isHostSimultaneitySupported());
      assertTrue(flags0.isGeneralDiscoverable());
      assertTrue(flags0.isControllerSimultaneitySupported());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      Flags flags0 = new Flags(0, 543, byteArray0);
      boolean boolean0 = flags0.isLegacySupported();
      assertFalse(flags0.isLimitedDiscoverable());
      assertFalse(flags0.isControllerSimultaneitySupported());
      assertFalse(boolean0);
      assertTrue(flags0.isHostSimultaneitySupported());
      assertTrue(flags0.isGeneralDiscoverable());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Flags flags0 = new Flags((-972), (-972), byteArray0);
      assertFalse(flags0.isHostSimultaneitySupported());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Flags flags0 = new Flags((-1118), (-1118), (byte[]) null);
      assertFalse(flags0.isLegacySupported());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Flags flags0 = new Flags();
      assertTrue(flags0.isLegacySupported());
      
      flags0.setLegacySupported(false);
      assertFalse(flags0.isLegacySupported());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Flags flags0 = new Flags();
      flags0.setLegacySupported(true);
      assertFalse(flags0.isHostSimultaneitySupported());
      assertFalse(flags0.isControllerSimultaneitySupported());
      assertFalse(flags0.isGeneralDiscoverable());
      assertFalse(flags0.isLimitedDiscoverable());
      assertTrue(flags0.isLegacySupported());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Flags flags0 = new Flags();
      boolean boolean0 = flags0.isControllerSimultaneitySupported();
      assertFalse(flags0.isLimitedDiscoverable());
      assertFalse(flags0.isGeneralDiscoverable());
      assertFalse(flags0.isHostSimultaneitySupported());
      assertTrue(flags0.isLegacySupported());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Flags flags0 = new Flags();
      assertFalse(flags0.isControllerSimultaneitySupported());
      
      flags0.setControllerSimultaneitySupported(true);
      assertTrue(flags0.isControllerSimultaneitySupported());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Flags flags0 = new Flags(0, 439, byteArray0);
      boolean boolean0 = flags0.isGeneralDiscoverable();
      assertTrue(flags0.isLegacySupported());
      assertFalse(boolean0);
      assertFalse(flags0.isLimitedDiscoverable());
      assertFalse(flags0.isControllerSimultaneitySupported());
      assertFalse(flags0.isHostSimultaneitySupported());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Flags flags0 = new Flags(0, 439, byteArray0);
      boolean boolean0 = flags0.isLegacySupported();
      assertTrue(boolean0);
      assertFalse(flags0.isHostSimultaneitySupported());
      assertFalse(flags0.isControllerSimultaneitySupported());
      assertFalse(flags0.isGeneralDiscoverable());
      assertFalse(flags0.isLimitedDiscoverable());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Flags flags0 = new Flags();
      String string0 = flags0.toString();
      assertEquals("Flags(LimitedDiscoverable=false,GeneralDiscoverable=false,LegacySupported=true,ControllerSimultaneitySupported=false,HostSimultaneitySupported=false)", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Flags flags0 = new Flags();
      assertFalse(flags0.isGeneralDiscoverable());
      
      flags0.setGeneralDiscoverable(true);
      boolean boolean0 = flags0.isGeneralDiscoverable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Flags flags0 = new Flags();
      boolean boolean0 = flags0.isLimitedDiscoverable();
      assertFalse(boolean0);
      assertFalse(flags0.isHostSimultaneitySupported());
      assertFalse(flags0.isGeneralDiscoverable());
      assertTrue(flags0.isLegacySupported());
      assertFalse(flags0.isControllerSimultaneitySupported());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Flags flags0 = new Flags();
      assertFalse(flags0.isHostSimultaneitySupported());
      
      flags0.setHostSimultaneitySupported(true);
      boolean boolean0 = flags0.isHostSimultaneitySupported();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Flags flags0 = new Flags();
      boolean boolean0 = flags0.isHostSimultaneitySupported();
      assertTrue(flags0.isLegacySupported());
      assertFalse(flags0.isGeneralDiscoverable());
      assertFalse(flags0.isControllerSimultaneitySupported());
      assertFalse(flags0.isLimitedDiscoverable());
      assertFalse(boolean0);
  }
}
