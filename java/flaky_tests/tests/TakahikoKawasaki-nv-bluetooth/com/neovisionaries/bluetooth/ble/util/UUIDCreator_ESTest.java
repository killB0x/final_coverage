/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 23:29:06 GMT 2022
 */

package com.neovisionaries.bluetooth.ble.util;

import org.junit.Test;
import static org.junit.Assert.*;
import com.neovisionaries.bluetooth.ble.util.UUIDCreator;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UUIDCreator_ESTest extends UUIDCreator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      UUID uUID0 = UUIDCreator.from128(byteArray0);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-4);
      UUID uUID0 = UUIDCreator.from32(byteArray0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)10;
      UUID uUID0 = UUIDCreator.from32(byteArray0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)87;
      UUID uUID0 = UUIDCreator.from32(byteArray0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      UUID uUID0 = UUIDCreator.from32(byteArray0);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      UUID uUID0 = UUIDCreator.from16(byteArray0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      Random.setNextRandom(Integer.MAX_VALUE);
      UUID uUID0 = UUIDCreator.from32(byteArray0, 0, false);
      assertEquals("ffffff7f-0000-4080-8100-008002000080", uUID0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      Random.setNextRandom((-1952));
      UUID uUID0 = UUIDCreator.from32(byteArray0, 1);
      assertEquals((-6915558700102500352L), uUID0.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      UUID uUID0 = UUIDCreator.from32(byteArray0, 1);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Random.setNextRandom(187);
      byte[] byteArray0 = new byte[5];
      UUID uUID0 = UUIDCreator.from32(byteArray0);
      assertEquals((-4827858797353500672L), uUID0.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Random.setNextRandom((-1499));
      UUID uUID0 = UUIDCreator.from16(byteArray0, (int) (byte)1, false);
      assertEquals((-2664723600828448768L), uUID0.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Random.setNextRandom((-1499));
      UUID uUID0 = UUIDCreator.from16(byteArray0, (int) (byte)1);
      assertEquals((-7132294431146442752L), uUID0.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      UUID uUID0 = UUIDCreator.from16(byteArray0, 5);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Random.setNextRandom(2147483633);
      UUID uUID0 = UUIDCreator.from16(byteArray0);
      assertEquals((-5476377696822886529L), uUID0.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      Random.setNextRandom(2147483632);
      UUID uUID0 = UUIDCreator.from128(byteArray0, 9, false);
      assertEquals((-5548435290877591681L), uUID0.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[29];
      Random.setNextRandom(2147483644);
      UUID uUID0 = UUIDCreator.from128(byteArray0, 2);
      assertEquals((-216173331903197313L), uUID0.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      UUID uUID0 = UUIDCreator.from128(byteArray0, 1);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      Random.setNextRandom(2147483645);
      UUID uUID0 = UUIDCreator.from128(byteArray0);
      assertEquals((-144115737848492161L), uUID0.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      UUID uUID0 = UUIDCreator.from128(byteArray0, 0, true);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UUID uUID0 = UUIDCreator.from128((byte[]) null, (-1), false);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      UUID uUID0 = UUIDCreator.from128(byteArray0, (int) (byte)0, true);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      UUID uUID0 = UUIDCreator.from128(byteArray0, 2147483633, false);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      UUID uUID0 = UUIDCreator.from128(byteArray0, (int) (byte) (-82), false);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      UUID uUID0 = UUIDCreator.from32(byteArray0, 1, true);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UUID uUID0 = UUIDCreator.from32((byte[]) null, 2, false);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      UUID uUID0 = UUIDCreator.from32(byteArray0, (int) (byte)10, false);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      UUID uUID0 = UUIDCreator.from32(byteArray0, (-1), false);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      UUID uUID0 = UUIDCreator.from16(byteArray0, 5, true);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      UUID uUID0 = UUIDCreator.from16(byteArray0, (int) (byte) (-82), false);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      UUID uUID0 = UUIDCreator.from16(byteArray0, 13, true);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      UUID uUID0 = UUIDCreator.from16(byteArray0, Integer.MAX_VALUE, true);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      UUID uUID0 = UUIDCreator.from128(byteArray0, 2147483633);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      UUID uUID0 = UUIDCreator.from128(byteArray0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      UUID uUID0 = UUIDCreator.from32(byteArray0, (int) (byte)1, false);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      UUID uUID0 = UUIDCreator.from32(byteArray0, Integer.MAX_VALUE, true);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      UUID uUID0 = UUIDCreator.from32(byteArray0, 3852);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      UUID uUID0 = UUIDCreator.from16(byteArray0, Integer.MAX_VALUE);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UUID uUID0 = UUIDCreator.from16(byteArray0);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UUID uUID0 = UUIDCreator.from16((byte[]) null, 187, false);
      assertNull(uUID0);
  }
}
