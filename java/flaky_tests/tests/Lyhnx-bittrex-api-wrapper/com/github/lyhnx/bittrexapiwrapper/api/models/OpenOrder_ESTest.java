/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 02:37:13 GMT 2022
 */

package com.github.lyhnx.bittrexapiwrapper.api.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.lyhnx.bittrexapiwrapper.api.models.OpenOrder;
import java.util.Date;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpenOrder_ESTest extends OpenOrder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setImmediateOrCancel(true);
      boolean boolean0 = openOrder0.isImmediateOrCancel();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setConditional(true);
      boolean boolean0 = openOrder0.isConditional();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setCancelInitiated(true);
      boolean boolean0 = openOrder0.isCancelInitiated();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom((-653));
      OpenOrder openOrder0 = new OpenOrder();
      UUID uUID0 = MockUUID.randomUUID();
      openOrder0.setUuid(uUID0);
      UUID uUID1 = openOrder0.getUuid();
      assertEquals("8d020000-8e02-4000-8f02-000090020000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      UUID uUID0 = MockUUID.fromString(", immediateOrCancel=");
      openOrder0.setUuid(uUID0);
      UUID uUID1 = openOrder0.getUuid();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setQuantityRemaining(1);
      double double0 = openOrder0.getQuantityRemaining();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setQuantityRemaining((-1.0));
      double double0 = openOrder0.getQuantityRemaining();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setQuantity(1382);
      double double0 = openOrder0.getQuantity();
      assertEquals(1382.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setQuantity((-59.74252447607056));
      double double0 = openOrder0.getQuantity();
      assertEquals((-59.74252447607056), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setPricePerUnit(1554.8064632);
      double double0 = openOrder0.getPricePerUnit();
      assertEquals(1554.8064632, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setPricePerUnit((-1.0));
      double double0 = openOrder0.getPricePerUnit();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setPrice((-1280.8751987607));
      double double0 = openOrder0.getPrice();
      assertEquals((-1280.8751987607), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      UUID uUID0 = MockUUID.fromString("_+~%T");
      openOrder0.setOrderUUID(uUID0);
      UUID uUID1 = openOrder0.getOrderUUID();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setOrderType("M.T#Xz");
      String string0 = openOrder0.getOrderType();
      assertEquals("M.T#Xz", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setOrderType("");
      String string0 = openOrder0.getOrderType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      MockDate mockDate0 = new MockDate((-1), (-1), (-1));
      openOrder0.setOpened(mockDate0);
      Date date0 = openOrder0.getOpened();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setLimit((-3570.2398));
      double double0 = openOrder0.getLimit();
      assertEquals((-3570.2398), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setExchange("");
      String string0 = openOrder0.getExchange();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setConditionTarget("wI?~bU$|ysOr\"!");
      String string0 = openOrder0.getConditionTarget();
      assertEquals("wI?~bU$|ysOr\"!", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setConditionTarget("");
      String string0 = openOrder0.getConditionTarget();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setCondition("OpenOrder [uuid=null, orderUUID=null, exchange=null, orderType=null, condition=null, conditionTarget=null, quantity=0.0, quantityRemaining=-1280.8751987607, limit=0.0, commissionPaid=0.0, price=-1280.8751987607, pricePerUnit=-129.21, opened=null, closed=Fri Feb 14 20:21:21 GMT 2014, cancelInitiated=false, immediateOrCancel=false, conditional=true]");
      String string0 = openOrder0.getCondition();
      assertEquals("OpenOrder [uuid=null, orderUUID=null, exchange=null, orderType=null, condition=null, conditionTarget=null, quantity=0.0, quantityRemaining=-1280.8751987607, limit=0.0, commissionPaid=0.0, price=-1280.8751987607, pricePerUnit=-129.21, opened=null, closed=Fri Feb 14 20:21:21 GMT 2014, cancelInitiated=false, immediateOrCancel=false, conditional=true]", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setCommissionPaid(1774.2498873618727);
      double double0 = openOrder0.getCommissionPaid();
      assertEquals(1774.2498873618727, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setCommissionPaid((-1138.1));
      double double0 = openOrder0.getCommissionPaid();
      assertEquals((-1138.1), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      boolean boolean0 = openOrder0.isCancelInitiated();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      String string0 = openOrder0.getOrderType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      double double0 = openOrder0.getPrice();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      String string0 = openOrder0.getConditionTarget();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      double double0 = openOrder0.getQuantityRemaining();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      Date date0 = openOrder0.getClosed();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      UUID uUID0 = openOrder0.getOrderUUID();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setPrice(2006.41302738);
      double double0 = openOrder0.getPrice();
      assertEquals(2006.41302738, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      MockDate mockDate0 = new MockDate();
      openOrder0.setClosed(mockDate0);
      Date date0 = openOrder0.getClosed();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setLimit(1L);
      double double0 = openOrder0.getLimit();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      double double0 = openOrder0.getCommissionPaid();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      boolean boolean0 = openOrder0.isImmediateOrCancel();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setCondition("");
      String string0 = openOrder0.getCondition();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      openOrder0.setExchange(", opened=");
      String string0 = openOrder0.getExchange();
      assertEquals(", opened=", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      double double0 = openOrder0.getQuantity();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      double double0 = openOrder0.getLimit();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      String string0 = openOrder0.toString();
      assertEquals("OpenOrder [uuid=null, orderUUID=null, exchange=null, orderType=null, condition=null, conditionTarget=null, quantity=0.0, quantityRemaining=0.0, limit=0.0, commissionPaid=0.0, price=0.0, pricePerUnit=0.0, opened=null, closed=null, cancelInitiated=false, immediateOrCancel=false, conditional=false]", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      Date date0 = openOrder0.getOpened();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      double double0 = openOrder0.getPricePerUnit();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      String string0 = openOrder0.getCondition();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      boolean boolean0 = openOrder0.isConditional();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      UUID uUID0 = openOrder0.getUuid();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OpenOrder openOrder0 = new OpenOrder();
      String string0 = openOrder0.getExchange();
      assertNull(string0);
  }
}
