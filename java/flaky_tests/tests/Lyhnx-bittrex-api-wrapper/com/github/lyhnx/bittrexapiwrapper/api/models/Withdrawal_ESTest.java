/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 02:29:44 GMT 2022
 */

package com.github.lyhnx.bittrexapiwrapper.api.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.lyhnx.bittrexapiwrapper.api.models.Withdrawal;
import java.time.Instant;
import java.util.Date;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Withdrawal_ESTest extends Withdrawal_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      withdrawal0.setPendingPayment(true);
      boolean boolean0 = withdrawal0.isPendingPayment();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      withdrawal0.setInvalidAddress(true);
      boolean boolean0 = withdrawal0.isInvalidAddress();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      withdrawal0.setCanceled(true);
      boolean boolean0 = withdrawal0.isCanceled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      withdrawal0.setAuthorized(true);
      boolean boolean0 = withdrawal0.isAuthorized();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      withdrawal0.setTxId("2_qi|i\"");
      String string0 = withdrawal0.getTxId();
      assertEquals("2_qi|i\"", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      withdrawal0.setTxCost(1.0);
      double double0 = withdrawal0.getTxCost();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      withdrawal0.setTxCost((-4154.930538286513));
      double double0 = withdrawal0.getTxCost();
      assertEquals((-4154.930538286513), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Random.setNextRandom(2517);
      Withdrawal withdrawal0 = new Withdrawal();
      UUID uUID0 = MockUUID.randomUUID();
      withdrawal0.setPaymentUUID(uUID0);
      UUID uUID1 = withdrawal0.getPaymentUUID();
      assertEquals("d5090000-d609-4000-9709-0000d8090000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      Instant instant0 = MockInstant.ofEpochSecond(931L);
      Date date0 = Date.from(instant0);
      withdrawal0.setOpened(date0);
      Date date1 = withdrawal0.getOpened();
      assertEquals("Thu Jan 01 00:15:31 GMT 1970", date1.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      withdrawal0.setCurrency("sv/(^#~vS|H9D");
      String string0 = withdrawal0.getCurrency();
      assertEquals("sv/(^#~vS|H9D", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      withdrawal0.setCurrency("");
      String string0 = withdrawal0.getCurrency();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      withdrawal0.setAmount(25.95584076220269);
      double double0 = withdrawal0.getAmount();
      assertEquals(25.95584076220269, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      withdrawal0.setAmount((-529.5179894828199));
      double double0 = withdrawal0.getAmount();
      assertEquals((-529.5179894828199), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      withdrawal0.setAddress("sv/(^#~vS|H9D");
      String string0 = withdrawal0.getAddress();
      assertEquals("sv/(^#~vS|H9D", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      withdrawal0.setAddress("");
      String string0 = withdrawal0.getAddress();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      withdrawal0.setTxId("");
      String string0 = withdrawal0.getTxId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      boolean boolean0 = withdrawal0.isAuthorized();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      String string0 = withdrawal0.toString();
      assertEquals("Withdrawal [paymentUUID=null, currency=null, amount=0.0, txCost=0.0, address=null, opened=null, txId=null, authorized=false, pendingPayment=false, canceled=false, invalidAddress=false]", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      boolean boolean0 = withdrawal0.isCanceled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      UUID uUID0 = MockUUID.randomUUID();
      withdrawal0.setPaymentUUID(uUID0);
      UUID uUID1 = withdrawal0.getPaymentUUID();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      String string0 = withdrawal0.getTxId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      boolean boolean0 = withdrawal0.isInvalidAddress();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      String string0 = withdrawal0.getAddress();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      String string0 = withdrawal0.getCurrency();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      double double0 = withdrawal0.getTxCost();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      Date date0 = withdrawal0.getOpened();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      boolean boolean0 = withdrawal0.isPendingPayment();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      UUID uUID0 = withdrawal0.getPaymentUUID();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Withdrawal withdrawal0 = new Withdrawal();
      double double0 = withdrawal0.getAmount();
      assertEquals(0.0, double0, 0.01);
  }
}
