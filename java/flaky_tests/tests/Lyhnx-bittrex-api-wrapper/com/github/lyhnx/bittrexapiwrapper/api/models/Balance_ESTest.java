/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 02:39:22 GMT 2022
 */

package com.github.lyhnx.bittrexapiwrapper.api.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.lyhnx.bittrexapiwrapper.api.models.Balance;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Balance_ESTest extends Balance_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(1428);
      Balance balance0 = new Balance();
      UUID uUID0 = MockUUID.fromString((String) null);
      balance0.setUuid(uUID0);
      UUID uUID1 = balance0.getUuid();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Balance balance0 = new Balance();
      balance0.setPending(1.0);
      double double0 = balance0.getPending();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Balance balance0 = new Balance();
      balance0.setPending((-1933.0));
      double double0 = balance0.getPending();
      assertEquals((-1933.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Balance balance0 = new Balance();
      com.github.lyhnx.bittrexapiwrapper.market.Currency currency0 = new com.github.lyhnx.bittrexapiwrapper.market.Currency("23b7gw/L*-D\"un1", "23b7gw/L*-D\"un1");
      balance0.setCurrency(currency0);
      com.github.lyhnx.bittrexapiwrapper.market.Currency currency1 = balance0.getCurrency();
      assertEquals("23b7gw/L*-D\"un1", currency1.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Balance balance0 = new Balance();
      balance0.setCryptoAddress("");
      String string0 = balance0.getCryptoAddress();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Balance balance0 = new Balance();
      balance0.setBalance(1884.39109932);
      double double0 = balance0.getBalance();
      assertEquals(1884.39109932, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Balance balance0 = new Balance();
      balance0.setBalance((-1800.326957068));
      double double0 = balance0.getBalance();
      assertEquals((-1800.326957068), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Balance balance0 = new Balance();
      balance0.setAvailable(2324.845911681);
      double double0 = balance0.getAvailable();
      assertEquals(2324.845911681, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Balance balance0 = new Balance();
      String string0 = balance0.toString();
      assertEquals("Balance [currency=null, balance=0.0, available=0.0, pending=0.0, cryptoAddress=null, requested=false, uuid=null]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Balance balance0 = new Balance();
      double double0 = balance0.getBalance();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Balance balance0 = new Balance();
      boolean boolean0 = balance0.isRequested();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Balance balance0 = new Balance();
      double double0 = balance0.getPending();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Balance balance0 = new Balance();
      UUID uUID0 = MockUUID.randomUUID();
      balance0.setUuid(uUID0);
      UUID uUID1 = balance0.getUuid();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Balance balance0 = new Balance();
      double double0 = balance0.getAvailable();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Balance balance0 = new Balance();
      balance0.setAvailable((-3027.29400566));
      double double0 = balance0.getAvailable();
      assertEquals((-3027.29400566), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Balance balance0 = new Balance();
      UUID uUID0 = balance0.getUuid();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Balance balance0 = new Balance();
      String string0 = balance0.getCryptoAddress();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Balance balance0 = new Balance();
      balance0.setRequested(true);
      boolean boolean0 = balance0.isRequested();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Balance balance0 = new Balance();
      com.github.lyhnx.bittrexapiwrapper.market.Currency currency0 = balance0.getCurrency();
      assertNull(currency0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Balance balance0 = new Balance();
      balance0.setCryptoAddress("Currency [name=23b7gw/L*-D\"un1, symbol=23b7gw/L*-D\"un1]");
      String string0 = balance0.getCryptoAddress();
      assertEquals("Currency [name=23b7gw/L*-D\"un1, symbol=23b7gw/L*-D\"un1]", string0);
  }
}
