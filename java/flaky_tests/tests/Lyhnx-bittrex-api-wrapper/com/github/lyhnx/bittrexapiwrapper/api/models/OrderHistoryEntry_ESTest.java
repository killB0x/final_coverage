/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 02:33:23 GMT 2022
 */

package com.github.lyhnx.bittrexapiwrapper.api.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.lyhnx.bittrexapiwrapper.api.models.OrderHistoryEntry;
import java.util.Date;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OrderHistoryEntry_ESTest extends OrderHistoryEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setImmediateOrCancel(true);
      boolean boolean0 = orderHistoryEntry0.isImmediateOrCancel();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setConditional(true);
      boolean boolean0 = orderHistoryEntry0.isConditional();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setQuantityRemaining(1154.4);
      double double0 = orderHistoryEntry0.getQuantityRemaining();
      assertEquals(1154.4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setQuantityRemaining((-1980.517986531883));
      double double0 = orderHistoryEntry0.getQuantityRemaining();
      assertEquals((-1980.517986531883), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setQuantity(764.2190916314);
      double double0 = orderHistoryEntry0.getQuantity();
      assertEquals(764.2190916314, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setQuantity((-1.0));
      double double0 = orderHistoryEntry0.getQuantity();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setPricePerUnit(1.0);
      double double0 = orderHistoryEntry0.getPricePerUnit();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setPrice(788.56323775054);
      double double0 = orderHistoryEntry0.getPrice();
      assertEquals(788.56323775054, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setPrice((-1.0));
      double double0 = orderHistoryEntry0.getPrice();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Random.setNextRandom(2949);
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      UUID uUID0 = MockUUID.randomUUID();
      orderHistoryEntry0.setOrderUUID(uUID0);
      UUID uUID1 = orderHistoryEntry0.getOrderUUID();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setOrderType("Wf?/Pd|o{:");
      String string0 = orderHistoryEntry0.getOrderType();
      assertEquals("Wf?/Pd|o{:", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setOrderType("");
      String string0 = orderHistoryEntry0.getOrderType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setLimit(1.0);
      double double0 = orderHistoryEntry0.getLimit();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setLimit((-4436.29));
      double double0 = orderHistoryEntry0.getLimit();
      assertEquals((-4436.29), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setExchange("OrderHistoryEntry [orderUUID=null, exchange=null, orderType=null, condition=null, conditionTarget=br@ FZ, limit=0.0, quantity=0.0, quantityRemaining=0.0, commission=0.0, price=0.0, pricePerUnit=0.0, conditional=false, immediateOrCancel=false, timestamp=null, closed=null]");
      String string0 = orderHistoryEntry0.getExchange();
      assertEquals("OrderHistoryEntry [orderUUID=null, exchange=null, orderType=null, condition=null, conditionTarget=br@ FZ, limit=0.0, quantity=0.0, quantityRemaining=0.0, commission=0.0, price=0.0, pricePerUnit=0.0, conditional=false, immediateOrCancel=false, timestamp=null, closed=null]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setConditionTarget("0[.L':57=6RI");
      String string0 = orderHistoryEntry0.getConditionTarget();
      assertEquals("0[.L':57=6RI", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setConditionTarget("");
      String string0 = orderHistoryEntry0.getConditionTarget();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setCondition("OrderHistoryEntry [orderUUID=null, exchange=null, orderType=null, condition=null, conditionTarget=null, limit=0.0, quantity=0.0, quantityRemaining=0.0, commission=0.0, price=0.0, pricePerUnit=0.0, conditional=false, immediateOrCancel=false, timestamp=null, closed=null]");
      String string0 = orderHistoryEntry0.getCondition();
      assertEquals("OrderHistoryEntry [orderUUID=null, exchange=null, orderType=null, condition=null, conditionTarget=null, limit=0.0, quantity=0.0, quantityRemaining=0.0, commission=0.0, price=0.0, pricePerUnit=0.0, conditional=false, immediateOrCancel=false, timestamp=null, closed=null]", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setCommission(1369.1084537);
      double double0 = orderHistoryEntry0.getCommission();
      assertEquals(1369.1084537, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setCommission((-479.2139));
      double double0 = orderHistoryEntry0.getCommission();
      assertEquals((-479.2139), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      MockDate mockDate0 = new MockDate();
      orderHistoryEntry0.setClosed(mockDate0);
      Date date0 = orderHistoryEntry0.getClosed();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      boolean boolean0 = orderHistoryEntry0.isImmediateOrCancel();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setExchange("");
      String string0 = orderHistoryEntry0.getExchange();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      double double0 = orderHistoryEntry0.getQuantity();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      String string0 = orderHistoryEntry0.getOrderType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      String string0 = orderHistoryEntry0.getExchange();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      double double0 = orderHistoryEntry0.getQuantityRemaining();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      double double0 = orderHistoryEntry0.getPrice();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      double double0 = orderHistoryEntry0.getLimit();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setPricePerUnit((-4436.29));
      double double0 = orderHistoryEntry0.getPricePerUnit();
      assertEquals((-4436.29), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      String string0 = orderHistoryEntry0.getCondition();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      double double0 = orderHistoryEntry0.getPricePerUnit();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      String string0 = orderHistoryEntry0.toString();
      assertEquals("OrderHistoryEntry [orderUUID=null, exchange=null, orderType=null, condition=null, conditionTarget=null, limit=0.0, quantity=0.0, quantityRemaining=0.0, commission=0.0, price=0.0, pricePerUnit=0.0, conditional=false, immediateOrCancel=false, timestamp=null, closed=null]", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      String string0 = orderHistoryEntry0.getConditionTarget();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      Date date0 = orderHistoryEntry0.getClosed();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      MockDate mockDate0 = new MockDate(0, 0, (-706), 0, 1744);
      orderHistoryEntry0.setTimestamp(mockDate0);
      Date date0 = orderHistoryEntry0.getTimestamp();
      assertEquals("Tue Jan 25 05:04:00 GMT 1898", date0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      boolean boolean0 = orderHistoryEntry0.isConditional();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      UUID uUID0 = MockUUID.randomUUID();
      orderHistoryEntry0.setOrderUUID(uUID0);
      UUID uUID1 = orderHistoryEntry0.getOrderUUID();
      assertEquals(16793600L, uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      orderHistoryEntry0.setCondition("");
      String string0 = orderHistoryEntry0.getCondition();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      Date date0 = orderHistoryEntry0.getTimestamp();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      UUID uUID0 = orderHistoryEntry0.getOrderUUID();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OrderHistoryEntry orderHistoryEntry0 = new OrderHistoryEntry();
      double double0 = orderHistoryEntry0.getCommission();
      assertEquals(0.0, double0, 0.01);
  }
}
