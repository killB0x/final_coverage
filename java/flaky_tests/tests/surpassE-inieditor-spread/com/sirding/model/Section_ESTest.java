/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 06:13:43 GMT 2022
 */

package com.sirding.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.sirding.model.Options;
import com.sirding.model.Section;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Section_ESTest extends Section_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Section section0 = new Section();
      section0.setSectionName("");
      String string0 = section0.getSectionName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Section section0 = new Section();
      HashMap<String, Options> hashMap0 = new HashMap<String, Options>();
      Options options0 = new Options();
      hashMap0.putIfAbsent("", options0);
      section0.setMap(hashMap0);
      Map<String, Options> map0 = section0.getMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Section section0 = new Section();
      section0.setList((List<String>) null);
      List<String> list0 = section0.getList();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Section section0 = new Section();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      section0.setList(linkedList0);
      List<String> list0 = section0.getList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Section section0 = new Section();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      section0.setIgnoreSet(linkedHashSet0);
      Set<String> set0 = section0.getIgnoreSet();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Section section0 = new Section();
      section0.setIgnoreMap((Map<String, Options>) null);
      Map<String, Options> map0 = section0.getIgnoreMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Section section0 = new Section();
      HashMap<String, Options> hashMap0 = new HashMap<String, Options>();
      Options options0 = new Options();
      hashMap0.putIfAbsent("", options0);
      section0.setIgnoreMap(hashMap0);
      Map<String, Options> map0 = section0.getIgnoreMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Section section0 = new Section();
      section0.setComment("");
      String string0 = section0.getComment();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Section section0 = new Section();
      section0.setComment("com.sirding.model.Section");
      String string0 = section0.getComment();
      assertEquals("com.sirding.model.Section", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Section section0 = new Section();
      section0.setIgnoreSet((Set<String>) null);
      Set<String> set0 = section0.getIgnoreSet();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Section section0 = new Section();
      section0.setMap((Map<String, Options>) null);
      Map<String, Options> map0 = section0.getMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Section section0 = new Section();
      String string0 = section0.getComment();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Section section0 = new Section();
      Set<String> set0 = section0.getIgnoreSet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Section section0 = new Section();
      section0.setSectionName("0a]Z+nN;#D+yO\"");
      String string0 = section0.getSectionName();
      assertEquals("0a]Z+nN;#D+yO\"", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Section section0 = new Section();
      Map<String, Options> map0 = section0.getIgnoreMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Section section0 = new Section();
      List<String> list0 = section0.getList();
      section0.setList(list0);
      assertNull(section0.getComment());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Section section0 = new Section();
      String string0 = section0.getSectionName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Section section0 = new Section();
      boolean boolean0 = section0.isBlankLine();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Section section0 = new Section();
      section0.setBlankLine(true);
      boolean boolean0 = section0.isBlankLine();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Section section0 = new Section();
      Map<String, Options> map0 = section0.getMap();
      section0.setIgnoreMap(map0);
      assertTrue(map0.isEmpty());
  }
}
