/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 06:14:36 GMT 2022
 */

package com.sirding.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.sirding.model.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Options_ESTest extends Options_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Options options0 = new Options();
      Object object0 = new Object();
      options0.setValue(object0);
      options0.getValue();
      assertEquals(0, options0.getPriority());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Options options0 = new Options();
      options0.setPriority(334);
      int int0 = options0.getPriority();
      assertEquals(334, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Options options0 = new Options();
      options0.setPriority((-1656));
      int int0 = options0.getPriority();
      assertEquals((-1656), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      options0.setName("");
      options0.getName();
      assertEquals(0, options0.getPriority());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Options options0 = new Options();
      options0.setComment("ec|9O");
      options0.getComment();
      assertEquals(0, options0.getPriority());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      options0.setName("zmrE7^n8<p");
      options0.getName();
      assertEquals(0, options0.getPriority());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Options options0 = new Options();
      options0.isBlankLine();
      assertEquals(0, options0.getPriority());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      int int0 = options0.getPriority();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Options options0 = new Options();
      options0.getValue();
      assertEquals(0, options0.getPriority());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Options options0 = new Options();
      options0.setComment("");
      options0.getComment();
      assertEquals(0, options0.getPriority());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      options0.getName();
      assertEquals(0, options0.getPriority());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Options options0 = new Options();
      options0.getComment();
      assertEquals(0, options0.getPriority());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Options options0 = new Options();
      options0.setBlankLine(true);
      boolean boolean0 = options0.isBlankLine();
      assertTrue(boolean0);
  }
}
