/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 06:15:18 GMT 2022
 */

package com.sirding.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.sirding.model.ProField;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProField_ESTest extends ProField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProField proField0 = new ProField();
      proField0.setValue("F/}iiU8n1!s%#B:=1");
      String string0 = proField0.getValue();
      assertEquals("F/}iiU8n1!s%#B:=1", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ProField proField0 = new ProField();
      proField0.setValue("");
      String string0 = proField0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ProField proField0 = new ProField();
      proField0.setProFieldMap((Map<String, Object>) null);
      Map<String, Object> map0 = proField0.getProFieldMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ProField proField0 = new ProField();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put("", object0);
      proField0.setProFieldMap(hashMap0);
      Map<String, Object> map0 = proField0.getProFieldMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProField proField0 = new ProField();
      proField0.setProFieldList((List<Field>) null);
      List<Field> list0 = proField0.getProFieldList();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ProField proField0 = new ProField();
      LinkedList<Field> linkedList0 = new LinkedList<Field>();
      linkedList0.add((Field) null);
      proField0.setProFieldList(linkedList0);
      List<Field> list0 = proField0.getProFieldList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProField proField0 = new ProField();
      proField0.setKey("");
      String string0 = proField0.getKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProField proField0 = new ProField();
      proField0.setFieldMap((Map<String, Field>) null);
      Map<String, Field> map0 = proField0.getFieldMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProField proField0 = new ProField();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      proField0.setFieldMap(hashMap0);
      hashMap0.put("", (Field) null);
      Map<String, Field> map0 = proField0.getFieldMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ProField proField0 = new ProField();
      Map<String, Object> map0 = proField0.getProFieldMap();
      proField0.setProFieldMap(map0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProField proField0 = new ProField();
      List<Field> list0 = proField0.getProFieldList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ProField proField0 = new ProField();
      Map<String, Field> map0 = proField0.getFieldMap();
      proField0.setFieldMap(map0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProField proField0 = new ProField();
      String string0 = proField0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ProField proField0 = new ProField();
      proField0.setKey(":>EX4_N@t.Hr/X+");
      String string0 = proField0.getKey();
      assertEquals(":>EX4_N@t.Hr/X+", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ProField proField0 = new ProField();
      String string0 = proField0.getKey();
      assertNull(string0);
  }
}
