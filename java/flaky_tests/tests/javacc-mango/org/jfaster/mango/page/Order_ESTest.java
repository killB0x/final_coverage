/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:36:39 GMT 2022
 */

package org.jfaster.mango.page;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.page.Direction;
import org.jfaster.mango.page.Order;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Order_ESTest extends Order_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Order order0 = Order.desc("+$cN");
      order0.toString();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Order.asc("2 ]R&d(");
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Order.desc("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // property must not be null or empty
         //
         verifyException("org.jfaster.mango.page.Order", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        Order.by("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // property must not be null or empty
         //
         verifyException("org.jfaster.mango.page.Order", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        Order.by((Direction) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // direction must not be null
         //
         verifyException("org.jfaster.mango.page.Order", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        Order.asc("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // property must not be null or empty
         //
         verifyException("org.jfaster.mango.page.Order", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Order order0 = Order.desc("+$cN");
      order0.getProperty();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Order order0 = Order.desc("+$cN");
      assertNotNull(order0);
      assertEquals("+$cN", order0.getProperty());
      assertEquals(Direction.DESC, order0.getDirection());
      
      Order order1 = Order.by(order0.DEFAULT_DIRECTION, "+$cN");
      assertNotNull(order1);
      assertFalse(order1.equals((Object)order0));
      assertEquals("+$cN", order0.getProperty());
      assertEquals(Direction.DESC, order0.getDirection());
      assertEquals(Direction.ASC, order1.getDirection());
      assertEquals("+$cN", order1.getProperty());
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Order order0 = Order.desc("+$cN");
      Direction direction0 = order0.getDirection();
      assertEquals(Direction.DESC, direction0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Order order0 = Order.by("dDAq fk?EDAt:9Ps");
      String string0 = order0.toString();
      assertEquals("dDAq fk?EDAt:9Ps asc", string0);
  }
}
