/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:34:47 GMT 2022
 */

package org.jfaster.mango.page;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.binding.BoundSql;
import org.jfaster.mango.page.MySQLPageHandler;
import org.jfaster.mango.page.Order;
import org.jfaster.mango.page.Page;
import org.jfaster.mango.page.Sort;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MySQLPageHandler_ESTest extends MySQLPageHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MySQLPageHandler mySQLPageHandler0 = new MySQLPageHandler();
      StringBuilder stringBuilder0 = new StringBuilder(2122);
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      // Undeclared exception!
      try { 
        mySQLPageHandler0.handleSort(boundSql0, (Sort) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.page.MySQLPageHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MySQLPageHandler mySQLPageHandler0 = new MySQLPageHandler();
      StringBuilder stringBuilder0 = new StringBuilder("$hi%0&KITV,tQQ}J|];");
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      Order[] orderArray0 = new Order[4];
      Sort sort0 = Sort.by(orderArray0);
      Page page0 = Page.of(2924, 2924, sort0);
      // Undeclared exception!
      try { 
        mySQLPageHandler0.handlePage(boundSql0, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.Joiner", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MySQLPageHandler mySQLPageHandler0 = new MySQLPageHandler();
      StringBuilder stringBuilder0 = new StringBuilder(268);
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      LinkedList<Order> linkedList0 = new LinkedList<Order>();
      Sort sort0 = Sort.by((List<Order>) linkedList0);
      Page page0 = Page.of(268, 268, sort0);
      mySQLPageHandler0.handlePage(boundSql0, page0);
      assertEquals(" limit ?, ?", boundSql0.getSql());
      assertEquals(" limit ?, ?", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MySQLPageHandler mySQLPageHandler0 = new MySQLPageHandler();
      StringBuilder stringBuilder0 = new StringBuilder("]1ioHJ.j>Ru");
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      Page page0 = Page.of(2, 4192);
      mySQLPageHandler0.handlePage(boundSql0, page0);
      assertEquals("]1ioHJ.j>Ru limit ?, ?", boundSql0.getSql());
      assertEquals("]1ioHJ.j>Ru limit ?, ?", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MySQLPageHandler mySQLPageHandler0 = new MySQLPageHandler();
      StringBuilder stringBuilder0 = new StringBuilder(268);
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      mySQLPageHandler0.handleCount(boundSql0);
      assertEquals("SELECT COUNT(1) FROM () aliasForPage", boundSql0.getSql());
      assertEquals("SELECT COUNT(1) FROM () aliasForPage", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MySQLPageHandler mySQLPageHandler0 = new MySQLPageHandler();
      StringBuilder stringBuilder0 = new StringBuilder(268);
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      LinkedList<Order> linkedList0 = new LinkedList<Order>();
      Sort sort0 = Sort.by((List<Order>) linkedList0);
      mySQLPageHandler0.handleSort(boundSql0, sort0);
      assertEquals("", boundSql0.getSql());
  }
}
