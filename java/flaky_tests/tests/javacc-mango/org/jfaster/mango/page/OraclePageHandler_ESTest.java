/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:35:51 GMT 2022
 */

package org.jfaster.mango.page;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.binding.BoundSql;
import org.jfaster.mango.page.Direction;
import org.jfaster.mango.page.OraclePageHandler;
import org.jfaster.mango.page.Page;
import org.jfaster.mango.page.Sort;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OraclePageHandler_ESTest extends OraclePageHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OraclePageHandler oraclePageHandler0 = new OraclePageHandler();
      StringBuilder stringBuilder0 = new StringBuilder("org.jfaster.mango.page.Page");
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      Direction direction0 = Direction.ASC;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.jfaster.mango.page.Page";
      stringArray0[1] = "org.jfaster.mango.page.Page";
      Sort sort0 = Sort.by(direction0, stringArray0);
      oraclePageHandler0.handleSort(boundSql0, sort0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OraclePageHandler oraclePageHandler0 = new OraclePageHandler();
      StringBuilder stringBuilder0 = new StringBuilder("org.jfaster.mango.page.Page");
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      oraclePageHandler0.handleCount(boundSql0);
      assertEquals("SELECT COUNT(1) FROM (org.jfaster.mango.page.Page) aliasForPage", boundSql0.getSql());
      assertEquals("SELECT COUNT(1) FROM (org.jfaster.mango.page.Page) aliasForPage", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OraclePageHandler oraclePageHandler0 = new OraclePageHandler();
      StringBuilder stringBuilder0 = new StringBuilder(0);
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      Page page0 = Page.of(1078, 425);
      oraclePageHandler0.handlePage(boundSql0, page0);
      assertEquals("SELECT * FROM ( SELECT B.* , ROWNUM RN FROM () B WHERE ROWNUM <= 458575 ) WHERE RN > 458150", boundSql0.getSql());
      assertEquals("SELECT * FROM ( SELECT B.* , ROWNUM RN FROM () B WHERE ROWNUM <= 458575 ) WHERE RN > 458150", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OraclePageHandler oraclePageHandler0 = new OraclePageHandler();
      // Undeclared exception!
      try { 
        oraclePageHandler0.handleCount((BoundSql) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.page.OraclePageHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OraclePageHandler oraclePageHandler0 = new OraclePageHandler();
      // Undeclared exception!
      try { 
        oraclePageHandler0.handleSort((BoundSql) null, (Sort) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.page.OraclePageHandler", e);
      }
  }
}
