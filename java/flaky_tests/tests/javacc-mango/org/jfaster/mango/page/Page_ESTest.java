/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:34:41 GMT 2022
 */

package org.jfaster.mango.page;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.page.Direction;
import org.jfaster.mango.page.Order;
import org.jfaster.mango.page.Page;
import org.jfaster.mango.page.Sort;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Page_ESTest extends Page_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Sort sort0 = Sort.by(stringArray0);
      // Undeclared exception!
      try { 
        Page.of(0, (-1), sort0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pageSize need > 0, but pageSize is -1
         //
         verifyException("org.jfaster.mango.page.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Page.of((-208), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pageNum need >= 0, but pageNum is -208
         //
         verifyException("org.jfaster.mango.page.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Page page0 = Page.of(0, 1, (Sort) null);
      assertEquals(1, page0.getPageSize());
      assertEquals(0, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Direction direction0 = Direction.DESC;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(E,DllH";
      stringArray0[1] = ";>v)HZ~6;";
      Page page0 = Page.of(0, 2, direction0, stringArray0);
      assertEquals(2, page0.getPageSize());
      assertEquals(0, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Order order0 = Order.by("org.jfaster.mango.page.Sort");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.jfaster.mango.page.Sort";
      stringArray0[1] = "org.jfaster.mango.page.Sort";
      stringArray0[2] = "org.jfaster.mango.page.Sort";
      Page page0 = Page.of(1, 1, order0.DEFAULT_DIRECTION, stringArray0);
      assertEquals(1, page0.getPageNum());
      assertEquals(1, page0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Order[] orderArray0 = new Order[1];
      Sort sort0 = Sort.by(orderArray0);
      Page page0 = Page.of(2858, 2858, sort0);
      page0.getSort();
      assertEquals(2858, page0.getPageSize());
      assertEquals(2858, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Page page0 = Page.of(0, 1);
      int int0 = page0.getPageNum();
      assertEquals(1, page0.getPageSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Page.of(0, 0, (Sort) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pageSize need > 0, but pageSize is 0
         //
         verifyException("org.jfaster.mango.page.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Direction direction0 = Direction.DESC;
      // Undeclared exception!
      try { 
        Page.of(0, 0, direction0, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // properties must not be null or empty
         //
         verifyException("org.jfaster.mango.page.Sort", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Page page0 = Page.of(322, 322);
      int int0 = page0.getPageNum();
      assertEquals(322, int0);
      assertEquals(322, page0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Page page0 = Page.of(4244, 4244);
      page0.getSort();
      assertEquals(4244, page0.getPageNum());
      assertEquals(4244, page0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Page page0 = Page.of(3717, 3717);
      int int0 = page0.getPageSize();
      assertEquals(3717, int0);
      assertEquals(3717, page0.getPageNum());
  }
}
