/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:27:30 GMT 2022
 */

package org.jfaster.mango.page;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.page.Direction;
import org.jfaster.mango.page.Order;
import org.jfaster.mango.page.Sort;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Sort_ESTest extends Sort_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Direction direction0 = Direction.ASC;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ASC";
      stringArray0[1] = "o'y3T^^G;~C{$";
      stringArray0[2] = "properties must not be null";
      Sort sort0 = Sort.by(direction0, stringArray0);
      String string0 = sort0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Direction direction0 = Direction.ASC;
      // Undeclared exception!
      try { 
        Sort.by(direction0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // property must not be null or empty
         //
         verifyException("org.jfaster.mango.page.Order", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Order> linkedList0 = new LinkedList<Order>();
      Sort sort0 = Sort.by((List<Order>) linkedList0);
      assertNotNull(sort0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Sort sort0 = Sort.by(stringArray0);
      String string0 = sort0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Direction direction0 = Direction.DESC;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Sort.by(direction0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // properties must not be null or empty
         //
         verifyException("org.jfaster.mango.page.Sort", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Direction direction0 = Direction.DESC;
      // Undeclared exception!
      try { 
        Sort.by(direction0, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // properties must not be null or empty
         //
         verifyException("org.jfaster.mango.page.Sort", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        Sort.by((Direction) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // direction must not be null
         //
         verifyException("org.jfaster.mango.page.Sort", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[16];
      // Undeclared exception!
      try { 
        Sort.by(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // property must not be null or empty
         //
         verifyException("org.jfaster.mango.page.Order", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Sort.by((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // properties must not be null
         //
         verifyException("org.jfaster.mango.page.Sort", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Sort.by((Order[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // orders must not be null
         //
         verifyException("org.jfaster.mango.page.Sort", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Sort.by((List<Order>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // orders must not be null
         //
         verifyException("org.jfaster.mango.page.Sort", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Order[] orderArray0 = new Order[1];
      Sort sort0 = Sort.by(orderArray0);
      // Undeclared exception!
      try { 
        sort0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.Joiner", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Sort sort0 = Sort.by(stringArray0);
      List<Order> list0 = sort0.getOrders();
      assertEquals(0, list0.size());
  }
}
