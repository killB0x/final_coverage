/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:48:04 GMT 2022
 */

package org.jfaster.mango.transaction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.datasource.DriverManagerDataSource;
import org.jfaster.mango.transaction.DataSourceMonitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DataSourceMonitor_ESTest extends DataSourceMonitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        DataSourceMonitor.resetAutoCommitFail((DataSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        DataSourceMonitor.needCheckAutoCommit((DataSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Map<DataSource, Integer> map0 = DataSourceMonitor.getFailedDataSources();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource();
      DataSourceMonitor.resetAutoCommitFail(driverManagerDataSource0);
      DataSourceMonitor.resetAutoCommitFail(driverManagerDataSource0);
      assertNull(driverManagerDataSource0.getPassword());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource();
      DataSourceMonitor.resetAutoCommitFail(driverManagerDataSource0);
      boolean boolean0 = DataSourceMonitor.needCheckAutoCommit(driverManagerDataSource0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource();
      boolean boolean0 = DataSourceMonitor.needCheckAutoCommit(driverManagerDataSource0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DataSourceMonitor.setForceCheckAutoCommit(true);
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource();
      boolean boolean0 = DataSourceMonitor.needCheckAutoCommit(driverManagerDataSource0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DataSourceMonitor dataSourceMonitor0 = new DataSourceMonitor();
  }
}
