/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:51:52 GMT 2022
 */

package org.jfaster.mango.util.local;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfaster.mango.util.local.CacheLoader;
import org.jfaster.mango.util.local.DoubleCheckCache;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleCheckCache_ESTest extends DoubleCheckCache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer((-1629));
      Integer integer1 = new Integer((-1629));
      CacheLoader<Integer, Integer> cacheLoader0 = (CacheLoader<Integer, Integer>) mock(CacheLoader.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(cacheLoader0).load(anyInt());
      DoubleCheckCache<Integer, Integer> doubleCheckCache0 = new DoubleCheckCache<Integer, Integer>(cacheLoader0);
      Integer integer2 = doubleCheckCache0.get(integer1);
      assertEquals((-1629), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CacheLoader<Integer, Integer> cacheLoader0 = (CacheLoader<Integer, Integer>) mock(CacheLoader.class, new ViolatedAssumptionAnswer());
      DoubleCheckCache<Integer, Integer> doubleCheckCache0 = new DoubleCheckCache<Integer, Integer>(cacheLoader0);
      // Undeclared exception!
      try { 
        doubleCheckCache0.get((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer((-2555));
      DoubleCheckCache<Integer, Integer> doubleCheckCache0 = new DoubleCheckCache<Integer, Integer>((CacheLoader<Integer, Integer>) null);
      // Undeclared exception!
      try { 
        doubleCheckCache0.get(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.local.DoubleCheckCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CacheLoader<Integer, Integer> cacheLoader0 = (CacheLoader<Integer, Integer>) mock(CacheLoader.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(cacheLoader0).load(anyInt());
      DoubleCheckCache<Integer, Integer> doubleCheckCache0 = new DoubleCheckCache<Integer, Integer>(cacheLoader0);
      Integer integer0 = new Integer(1558);
      doubleCheckCache0.get(integer0);
      Integer integer1 = doubleCheckCache0.get(integer0);
      assertNull(integer1);
  }
}
