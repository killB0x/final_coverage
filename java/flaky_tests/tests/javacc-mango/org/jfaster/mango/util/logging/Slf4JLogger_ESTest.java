/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:13:18 GMT 2022
 */

package org.jfaster.mango.util.logging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.jfaster.mango.util.logging.InternalLogLevel;
import org.jfaster.mango.util.logging.Slf4JLogger;
import org.junit.runner.RunWith;
import org.slf4j.Logger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Slf4JLogger_ESTest extends Slf4JLogger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("k2k5KQWf").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      InternalLogLevel internalLogLevel0 = InternalLogLevel.ERROR;
      slf4JLogger0.log(internalLogLevel0, " ;S.HSe.cQ47", (Object) internalLogLevel0, (Object) null);
      assertEquals("k2k5KQWf", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.error("");
      assertEquals("", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("k2k5KQWf").when(logger0).getName();
      doReturn(false).when(logger0).isWarnEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      boolean boolean0 = slf4JLogger0.isWarnEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("ERROR").when(logger0).getName();
      doReturn(false, true).when(logger0).isTraceEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      InternalLogLevel internalLogLevel0 = InternalLogLevel.TRACE;
      boolean boolean0 = slf4JLogger0.isEnabled(internalLogLevel0);
      boolean boolean1 = slf4JLogger0.isTraceEnabled();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(")z:+615n").when(logger0).getName();
      doReturn(false).when(logger0).isTraceEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      boolean boolean0 = slf4JLogger0.isTraceEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("@x)[b@T/X\"RDQ/N&>").when(logger0).getName();
      doReturn(true).when(logger0).isInfoEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      boolean boolean0 = slf4JLogger0.isInfoEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("org.jfaster.mango.util.logging.Slf4JLogger").when(logger0).getName();
      doReturn(true).when(logger0).isErrorEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      boolean boolean0 = slf4JLogger0.isErrorEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("_BAX]>+(#oI-ne~$`").when(logger0).getName();
      doReturn(false).when(logger0).isDebugEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      boolean boolean0 = slf4JLogger0.isDebugEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Slf4JLogger slf4JLogger0 = null;
      try {
        slf4JLogger0 = new Slf4JLogger((Logger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.Slf4JLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(logger0).getName();
      Slf4JLogger slf4JLogger0 = null;
      try {
        slf4JLogger0 = new Slf4JLogger(logger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name
         //
         verifyException("org.jfaster.mango.util.logging.AbstractInternalLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("k2k5KQWf").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.trace("+6s's:H]d);]Va", (Object) "+6s's:H]d);]Va", (Object) "");
      assertEquals("k2k5KQWf", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      MockThrowable mockThrowable0 = new MockThrowable("org.jfaster.mango.util.logging.Slf4JLoggerFactory");
      slf4JLogger0.warn((String) null, (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.jfaster.mango.util.logging.Slf4JLoggerFactory", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      Object object0 = new Object();
      slf4JLogger0.debug("", (Object) "", object0);
      assertEquals("", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("ERROR").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.debug("$VALUES");
      assertEquals("ERROR", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("`$S`").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      Object object0 = new Object();
      slf4JLogger0.debug("", object0);
      assertEquals("`$S`", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("k2k5KQWf").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      Object object0 = new Object();
      slf4JLogger0.info("f$9a`c", object0, (Object) null);
      assertEquals("k2k5KQWf", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("RTF#XPe").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      slf4JLogger0.error("v3JwxW)4", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      Object[] objectArray0 = new Object[2];
      slf4JLogger0.debug("", objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("`$S`").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.trace("`$S`");
      assertEquals("`$S`", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("ERROR").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      Object object0 = new Object();
      slf4JLogger0.trace("&MaDF8>xMjy?", object0);
      assertEquals("ERROR", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("_BAX]>+(#oI-ne~$`").when(logger0).getName();
      doReturn(false).when(logger0).isErrorEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      boolean boolean0 = slf4JLogger0.isErrorEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("_BAX]>+(#oI-ne~$`").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.error("<[Vl", (Object) null);
      assertEquals("_BAX]>+(#oI-ne~$`", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("_BAX]>+(#oI-ne~$`").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      MockThrowable mockThrowable0 = new MockThrowable("_BAX]>+(#oI-ne~$`");
      slf4JLogger0.debug("_BAX]>+(#oI-ne~$`", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: _BAX]>+(#oI-ne~$`", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.warn("", (Object) "");
      assertEquals("", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      MockThrowable mockThrowable0 = new MockThrowable();
      slf4JLogger0.trace((String) null, (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("US-ASCF;II").when(logger0).getName();
      doReturn(true).when(logger0).isWarnEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      boolean boolean0 = slf4JLogger0.isWarnEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("k2k5KQWf").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      InternalLogLevel internalLogLevel0 = InternalLogLevel.DEBUG;
      Object object0 = new Object();
      slf4JLogger0.warn("", (Object) internalLogLevel0, object0);
      assertEquals("k2k5KQWf", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      MockThrowable mockThrowable0 = new MockThrowable();
      slf4JLogger0.info("", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("F'beqNl}n?").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.error("", (Object) "", (Object) "");
      assertEquals("F'beqNl}n?", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("ERROR").when(logger0).getName();
      doReturn(true).when(logger0).isDebugEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      boolean boolean0 = slf4JLogger0.isDebugEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      Object[] objectArray0 = new Object[2];
      slf4JLogger0.info("", objectArray0);
      assertEquals("", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("`$S`").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      Object[] objectArray0 = new Object[1];
      slf4JLogger0.warn("", objectArray0);
      assertEquals("`$S`", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.warn("rb/-");
      assertEquals("", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      Object[] objectArray0 = new Object[1];
      slf4JLogger0.trace("", objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("_BAX]>+(#oI-ne~$`").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.info("_BAX]>+(#oI-ne~$`");
      assertEquals("_BAX]>+(#oI-ne~$`", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("_BAX]>+(#oI-ne~$`").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.info("_BAX]>+(#oI-ne~$`", (Object) null);
      assertEquals("_BAX]>+(#oI-ne~$`", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      doReturn(false).when(logger0).isInfoEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      boolean boolean0 = slf4JLogger0.isInfoEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      Object[] objectArray0 = new Object[5];
      slf4JLogger0.error("%", objectArray0);
      assertEquals("", slf4JLogger0.name());
  }
}
