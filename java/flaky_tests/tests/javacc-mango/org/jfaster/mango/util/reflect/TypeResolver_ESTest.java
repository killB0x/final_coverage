/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:41:56 GMT 2022
 */

package org.jfaster.mango.util.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfaster.mango.util.reflect.TypeResolver;
import org.jfaster.mango.util.reflect.Types;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeResolver_ESTest extends TypeResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(type0).getTypeName();
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      TypeResolver typeResolver0 = new TypeResolver();
      Type[] typeArray1 = new Type[1];
      typeArray1[0] = type0;
      Types.WildcardTypeImpl types_WildcardTypeImpl1 = new Types.WildcardTypeImpl(typeArray1, typeArray0);
      // Undeclared exception!
      try { 
        typeResolver0.where(types_WildcardTypeImpl1, types_WildcardTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incompatible type: ? super null extends null extends null vs. ? super null super null extends null extends null
         //
         verifyException("org.jfaster.mango.util.reflect.TypeResolver$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      Type[] typeArray1 = new Type[1];
      typeArray1[0] = (Type) types_WildcardTypeImpl0;
      Types.WildcardTypeImpl types_WildcardTypeImpl1 = new Types.WildcardTypeImpl(typeArray0, typeArray1);
      TypeResolver typeResolver0 = new TypeResolver();
      // Undeclared exception!
      try { 
        typeResolver0.where(types_WildcardTypeImpl0, types_WildcardTypeImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incompatible type: ? vs. ? extends ?
         //
         verifyException("org.jfaster.mango.util.reflect.TypeResolver$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Type[] typeArray0 = new Type[7];
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(type0).toString();
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      typeArray0[6] = type0;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      TypeResolver typeResolver0 = new TypeResolver();
      // Undeclared exception!
      try { 
        typeResolver0.where(types_WildcardTypeImpl0, type0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not a WildcardType
         //
         verifyException("org.jfaster.mango.util.reflect.TypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeResolver typeResolver0 = new TypeResolver();
      HashMap<TypeResolver.TypeVariableKey, Types.WildcardTypeImpl> hashMap0 = new HashMap<TypeResolver.TypeVariableKey, Types.WildcardTypeImpl>();
      TypeResolver typeResolver1 = typeResolver0.where((Map<TypeResolver.TypeVariableKey, ? extends Type>) hashMap0);
      assertNotSame(typeResolver0, typeResolver1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeResolver typeResolver0 = new TypeResolver();
      Type type0 = typeResolver0.resolveType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeResolver typeResolver0 = new TypeResolver();
      // Undeclared exception!
      try { 
        typeResolver0.where((Type) null, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.TypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeResolver typeResolver0 = new TypeResolver();
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      // Undeclared exception!
      try { 
        typeResolver0.where(types_WildcardTypeImpl0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.TypeResolver$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      TypeResolver typeResolver0 = new TypeResolver();
      Type type1 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(type1).toString();
      // Undeclared exception!
      try { 
        typeResolver0.where(type1, type0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Unknown type: null
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      Object object0 = TypeResolver.TypeVariableKey.forLookup(types_WildcardTypeImpl0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeResolver.accordingTo((Type) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // must have been one of the known types
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeResolver typeResolver0 = new TypeResolver();
      HashMap<TypeResolver.TypeVariableKey, Types.WildcardTypeImpl> hashMap0 = new HashMap<TypeResolver.TypeVariableKey, Types.WildcardTypeImpl>();
      Type[] typeArray0 = new Type[6];
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      hashMap0.put((TypeResolver.TypeVariableKey) null, types_WildcardTypeImpl0);
      // Undeclared exception!
      try { 
        typeResolver0.where((Map<TypeResolver.TypeVariableKey, ? extends Type>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.TypeResolver$TypeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeResolver typeResolver0 = new TypeResolver();
      Type[] typeArray0 = new Type[8];
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(type0).toString();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(type0).getTypeName();
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      typeArray0[6] = type0;
      typeArray0[7] = type0;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      Type type1 = typeResolver0.resolveType(types_WildcardTypeImpl0);
      assertNotSame(type1, types_WildcardTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      TypeResolver typeResolver0 = TypeResolver.accordingTo(types_WildcardTypeImpl0);
      Type[] typeArray1 = new Type[5];
      typeArray1[0] = (Type) types_WildcardTypeImpl0;
      typeArray1[1] = (Type) types_WildcardTypeImpl0;
      typeArray1[2] = (Type) types_WildcardTypeImpl0;
      typeArray1[3] = (Type) types_WildcardTypeImpl0;
      typeArray1[4] = (Type) types_WildcardTypeImpl0;
      Types.WildcardTypeImpl types_WildcardTypeImpl1 = new Types.WildcardTypeImpl(typeArray1, typeArray0);
      // Undeclared exception!
      try { 
        typeResolver0.where(types_WildcardTypeImpl1, types_WildcardTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incompatible type: ? super ? super ? super ? super ? super ? vs. ?
         //
         verifyException("org.jfaster.mango.util.reflect.TypeResolver$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeResolver typeResolver0 = new TypeResolver();
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      TypeResolver typeResolver1 = typeResolver0.where(types_WildcardTypeImpl0, types_WildcardTypeImpl0);
      assertNotSame(typeResolver0, typeResolver1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      Type[] typeArray1 = new Type[2];
      typeArray1[0] = (Type) types_WildcardTypeImpl0;
      typeArray1[1] = (Type) types_WildcardTypeImpl0;
      Types.WildcardTypeImpl types_WildcardTypeImpl1 = new Types.WildcardTypeImpl(typeArray1, typeArray1);
      TypeResolver typeResolver0 = TypeResolver.accordingTo(types_WildcardTypeImpl1);
      assertNotNull(typeResolver0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      TypeResolver typeResolver0 = TypeResolver.accordingTo(types_WildcardTypeImpl0);
      Type[] typeArray1 = new Type[5];
      typeArray1[0] = (Type) types_WildcardTypeImpl0;
      typeArray1[1] = (Type) types_WildcardTypeImpl0;
      typeArray1[2] = (Type) types_WildcardTypeImpl0;
      typeArray1[3] = (Type) types_WildcardTypeImpl0;
      typeArray1[4] = (Type) types_WildcardTypeImpl0;
      Types.WildcardTypeImpl types_WildcardTypeImpl1 = new Types.WildcardTypeImpl(typeArray0, typeArray1);
      // Undeclared exception!
      try { 
        typeResolver0.where(types_WildcardTypeImpl1, types_WildcardTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incompatible type: ? extends ? extends ? extends ? extends ? extends ? vs. ?
         //
         verifyException("org.jfaster.mango.util.reflect.TypeResolver$1", e);
      }
  }
}
