/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:00:55 GMT 2022
 */

package org.jfaster.mango.util.bean;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Field;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.util.bean.BeanUtil;
import org.jfaster.mango.util.bean.PropertyMeta;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanUtil_ESTest extends BeanUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtil.fetchPropertyMetas((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtil.fetchPropertyMeta((Class<?>) null, "Im4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        BeanUtil.fetchField(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.bean.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      List<Field> list0 = BeanUtil.fetchField(class0);
      assertEquals(5, list0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      PropertyMeta propertyMeta0 = BeanUtil.fetchPropertyMeta(class0, "");
      assertNull(propertyMeta0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BeanUtil beanUtil0 = new BeanUtil();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      List<PropertyMeta> list0 = BeanUtil.fetchPropertyMetas(class0);
      assertTrue(list0.isEmpty());
  }
}
