/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 12:21:24 GMT 2022
 */

package org.jfaster.mango.util.logging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.jfaster.mango.util.logging.ConsoleLogger;
import org.jfaster.mango.util.logging.InternalLogLevel;
import org.jfaster.mango.util.logging.NoLogger;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractInternalLogger_ESTest extends AbstractInternalLogger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("aK&X");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.ERROR;
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      Object object0 = noLogger0.readResolve();
      noLogger0.log(internalLogLevel0, "BT,U^U0Q|.", (Object) mockThrowable0, object0);
      assertEquals("aK&X", noLogger0.name());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("O");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.WARN;
      noLogger0.log(internalLogLevel0, "", (Object) "", (Object) internalLogLevel0);
      assertFalse(noLogger0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.INFO;
      Object object0 = consoleLogger0.readResolve();
      NoLogger noLogger0 = new NoLogger("");
      InternalLogLevel internalLogLevel1 = InternalLogLevel.TRACE;
      noLogger0.log(internalLogLevel1, "org.jfaster.mango.util.logging.InternalLoggerFactory", object0, (Object) internalLogLevel0);
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      String string0 = noLogger0.name();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("7g_`*1ac bv");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.ERROR;
      boolean boolean0 = consoleLogger0.isEnabled(internalLogLevel0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("!*4Cgm9");
      // Undeclared exception!
      try { 
        noLogger0.log((InternalLogLevel) null, "!*4Cgm9", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.AbstractInternalLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("] ");
      MockThrowable mockThrowable0 = new MockThrowable("] ");
      // Undeclared exception!
      try { 
        noLogger0.log((InternalLogLevel) null, "] ", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.AbstractInternalLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("kKSa2G^c-d");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.INFO;
      // Undeclared exception!
      try { 
        noLogger0.log((InternalLogLevel) null, "kKSa2G^c-d", (Object) "kKSa2G^c-d", (Object) internalLogLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.AbstractInternalLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger(".e<RiP9A;RmN");
      // Undeclared exception!
      try { 
        noLogger0.log((InternalLogLevel) null, ".e<RiP9A;RmN", (Object) ".e<RiP9A;RmN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.AbstractInternalLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      // Undeclared exception!
      try { 
        noLogger0.log((InternalLogLevel) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.AbstractInternalLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("[");
      // Undeclared exception!
      try { 
        noLogger0.isEnabled((InternalLogLevel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.AbstractInternalLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("] ");
      String string0 = noLogger0.name();
      assertEquals("] ", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("] ");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.ERROR;
      noLogger0.log(internalLogLevel0, "] ", (Object[]) null);
      assertFalse(noLogger0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InternalLogLevel internalLogLevel0 = InternalLogLevel.WARN;
      NoLogger noLogger0 = new NoLogger("vl'Q_Cqk8{74");
      noLogger0.log(internalLogLevel0, "vl'Q_Cqk8{74", (Object[]) null);
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.INFO;
      noLogger0.log(internalLogLevel0, "", (Object[]) null);
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("] ");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.DEBUG;
      noLogger0.log(internalLogLevel0, "] ", (Object[]) null);
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("4");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.TRACE;
      noLogger0.log(internalLogLevel0, "4", (Object[]) null);
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("!(*4Cgm9u");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.INFO;
      noLogger0.log(internalLogLevel0, "!(*4Cgm9u", (Object) "!(*4Cgm9u", (Object) internalLogLevel0);
      assertFalse(noLogger0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("!(*4C}gm9u");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.DEBUG;
      noLogger0.log(internalLogLevel0, "!(*4C}gm9u", (Object) "!(*4C}gm9u", (Object) internalLogLevel0);
      assertEquals("!(*4C}gm9u", noLogger0.name());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("!(*4Cgm9u");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.ERROR;
      noLogger0.log(internalLogLevel0, "!(*4Cgm9u", (Object) "!(*4Cgm9u");
      assertFalse(noLogger0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("] ");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.WARN;
      noLogger0.log(internalLogLevel0, "] ", (Object) internalLogLevel0);
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("+e\"n");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.INFO;
      noLogger0.log(internalLogLevel0, "+e\"n", (Object) "+e\"n");
      assertFalse(noLogger0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("fg");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.DEBUG;
      noLogger0.log(internalLogLevel0, "fg", (Object) internalLogLevel0);
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("] ");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.TRACE;
      noLogger0.log(internalLogLevel0, "] ", (Object) internalLogLevel0);
      assertFalse(noLogger0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("MQ");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.ERROR;
      noLogger0.log(internalLogLevel0, "MQ");
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("MQ");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.WARN;
      noLogger0.log(internalLogLevel0, "MQ");
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("MQ");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.INFO;
      noLogger0.log(internalLogLevel0, "MQ");
      assertFalse(noLogger0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("+>+");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.DEBUG;
      noLogger0.log(internalLogLevel0, "+>+");
      assertFalse(noLogger0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.TRACE;
      noLogger0.log(internalLogLevel0, "");
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("] ");
      MockThrowable mockThrowable0 = new MockThrowable("] ");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.ERROR;
      noLogger0.log(internalLogLevel0, "] ", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ] ", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("] ");
      MockThrowable mockThrowable0 = new MockThrowable();
      InternalLogLevel internalLogLevel0 = InternalLogLevel.WARN;
      noLogger0.log(internalLogLevel0, "] ", (Throwable) mockThrowable0);
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("MQ");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.DEBUG;
      MockThrowable mockThrowable0 = new MockThrowable();
      noLogger0.log(internalLogLevel0, "MQ", (Throwable) mockThrowable0);
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("] ");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.INFO;
      MockThrowable mockThrowable0 = new MockThrowable("] ");
      noLogger0.log(internalLogLevel0, "] ", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ] ", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("+e\"n");
      MockThrowable mockThrowable0 = new MockThrowable();
      InternalLogLevel internalLogLevel0 = InternalLogLevel.TRACE;
      noLogger0.log(internalLogLevel0, "+e\"n", (Throwable) mockThrowable0);
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.ERROR;
      boolean boolean0 = noLogger0.isEnabled(internalLogLevel0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("] ");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.INFO;
      boolean boolean0 = noLogger0.isEnabled(internalLogLevel0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.DEBUG;
      boolean boolean0 = noLogger0.isEnabled(internalLogLevel0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.WARN;
      boolean boolean0 = noLogger0.isEnabled(internalLogLevel0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("] ");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.TRACE;
      boolean boolean0 = noLogger0.isEnabled(internalLogLevel0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NoLogger noLogger0 = null;
      try {
        noLogger0 = new NoLogger((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name
         //
         verifyException("org.jfaster.mango.util.logging.AbstractInternalLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("-zdfLNFBHb1");
      String string0 = noLogger0.toString();
      assertEquals("NoLogger(-zdfLNFBHb1)", string0);
  }
}
