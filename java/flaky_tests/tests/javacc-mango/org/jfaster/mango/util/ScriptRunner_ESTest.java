/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 12:29:09 GMT 2022
 */

package org.jfaster.mango.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfaster.mango.util.ScriptRunner;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScriptRunner_ESTest extends ScriptRunner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Error running script.  Cause:;");
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      doReturn(false).when(connection0).getAutoCommit();
      ScriptRunner scriptRunner0 = new ScriptRunner(connection0, false, true);
      // Undeclared exception!
      try { 
        scriptRunner0.runScript(stringReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error running script.  Cause: java.lang.NullPointerException
         //
         verifyException("org.jfaster.mango.util.ScriptRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).getAutoCommit();
      ScriptRunner scriptRunner0 = new ScriptRunner(connection0, false, true);
      StringReader stringReader0 = new StringReader("Error executing: ");
      scriptRunner0.runScript(stringReader0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".T");
      stringReader0.close();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(connection0).getAutoCommit();
      ScriptRunner scriptRunner0 = new ScriptRunner(connection0, false, false);
      try { 
        scriptRunner0.runScript(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("org.jfaster.mango.util.ScriptRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/.nAR]S(;");
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(connection0).getAutoCommit();
      ScriptRunner scriptRunner0 = new ScriptRunner(connection0, true, true);
      scriptRunner0.setErrorLogWriter((PrintWriter) null);
      stringReader0.close();
      try { 
        scriptRunner0.runScript(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("org.jfaster.mango.util.ScriptRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      doReturn("UqI'i").when(resultSetMetaData0).getColumnLabel(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn("UqI'i").when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(statement0).execute(anyString());
      doReturn(resultSet0).when(statement0).getResultSet();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      doReturn(false, false).when(connection0).getAutoCommit();
      ScriptRunner scriptRunner0 = new ScriptRunner(connection0, true, true);
      scriptRunner0.setDelimiter("^m8xb#z2wG4", true);
      StringReader stringReader0 = new StringReader("^m8xb#z2wG4");
      scriptRunner0.setLogWriter((PrintWriter) null);
      scriptRunner0.runScript(stringReader0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(statement0).execute(anyString());
      doReturn(resultSet0).when(statement0).getResultSet();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      doReturn(true, true).when(connection0).getAutoCommit();
      StringReader stringReader0 = new StringReader("Error running script.  Cause:;");
      ScriptRunner scriptRunner0 = new ScriptRunner(connection0, true, true);
      scriptRunner0.runScript(stringReader0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(13).when(resultSetMetaData0).getColumnCount();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSetMetaData0).getColumnLabel(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(statement0).execute(anyString());
      doReturn(resultSet0).when(statement0).getResultSet();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      doReturn(true, true).when(connection0).getAutoCommit();
      StringReader stringReader0 = new StringReader("Error running script.  Cause:;");
      ScriptRunner scriptRunner0 = new ScriptRunner(connection0, true, true);
      scriptRunner0.runScript(stringReader0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",mD;");
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      doReturn(true).when(connection0).getAutoCommit();
      ScriptRunner scriptRunner0 = new ScriptRunner(connection0, true, true);
      // Undeclared exception!
      try { 
        scriptRunner0.runScript(stringReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error running script.  Cause: java.lang.NullPointerException
         //
         verifyException("org.jfaster.mango.util.ScriptRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Error running script.  Cause:;");
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(statement0).execute(anyString());
      doReturn((ResultSet) null).when(statement0).getResultSet();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      doReturn(false, false).when(connection0).getAutoCommit();
      ScriptRunner scriptRunner0 = new ScriptRunner(connection0, true, true);
      scriptRunner0.runScript(stringReader0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(statement0).execute(anyString());
      doReturn((ResultSet) null).when(statement0).getResultSet();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      doReturn(false).when(connection0).getAutoCommit();
      StringReader stringReader0 = new StringReader("Error running script.  Cause:;");
      ScriptRunner scriptRunner0 = new ScriptRunner(connection0, false, false);
      scriptRunner0.runScript(stringReader0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(connection0).getAutoCommit();
      ScriptRunner scriptRunner0 = new ScriptRunner(connection0, false, false);
      scriptRunner0.setDelimiter("--\"k#", true);
      StringReader stringReader0 = new StringReader("Error executing: ");
      scriptRunner0.runScript(stringReader0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("//;u7K?F");
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(connection0).getAutoCommit();
      ScriptRunner scriptRunner0 = new ScriptRunner(connection0, false, false);
      scriptRunner0.runScript(stringReader0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(connection0).getAutoCommit();
      ScriptRunner scriptRunner0 = new ScriptRunner(connection0, false, false);
      StringReader stringReader0 = new StringReader(" ");
      scriptRunner0.runScript(stringReader0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("--m8xb#z2wG4");
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(connection0).getAutoCommit();
      ScriptRunner scriptRunner0 = new ScriptRunner(connection0, false, false);
      scriptRunner0.runScript(stringReader0);
  }
}
