/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:28:37 GMT 2022
 */

package org.jfaster.mango.util.logging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.jfaster.mango.util.logging.NoLogger;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NoLogger_ESTest extends NoLogger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      Object[] objectArray0 = new Object[1];
      noLogger0.warn("", objectArray0);
      assertEquals("", noLogger0.name());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("f(/H'?\"-&LX*AnPDE");
      noLogger0.warn("f(/H'?\"-&LX*AnPDE");
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("org.jfaster.mango.util.logging.NoLogger");
      Object[] objectArray0 = new Object[7];
      noLogger0.trace("org.jfaster.mango.util.logging.NoLogger", objectArray0);
      assertFalse(noLogger0.isErrorEnabled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      Object object0 = noLogger0.readResolve();
      Object object1 = new Object();
      noLogger0.trace("/Qx;,", object0, object1);
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      Object object0 = new Object();
      noLogger0.trace("+47!", object0);
      assertFalse(noLogger0.isErrorEnabled());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      noLogger0.info("", (Object[]) null);
      assertFalse(noLogger0.isErrorEnabled());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      Object object0 = noLogger0.readResolve();
      noLogger0.info("", object0, object0);
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("org.jfaster.mango.util.logging.AbstractInternalLogger");
      noLogger0.info("7V1gL ;E3&WpN");
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("K^KN0J~%");
      Object[] objectArray0 = new Object[8];
      noLogger0.error("K^KN0J~%", objectArray0);
      assertFalse(noLogger0.isErrorEnabled());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("org.jfaster.mango.util.logging.NoLogger");
      Object object0 = new Object();
      Object object1 = noLogger0.readResolve();
      noLogger0.error("org.jfaster.mango.util.logging.NoLogger", object0, object1);
      assertEquals("org.jfaster.mango.util.logging.NoLogger", noLogger0.name());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("org.jfaster.mango.util.logging.NoLogger");
      noLogger0.error("org.jfaster.mango.util.logging.NoLogger");
      assertEquals("org.jfaster.mango.util.logging.NoLogger", noLogger0.name());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("TRACE");
      Object[] objectArray0 = new Object[5];
      noLogger0.debug("jQS[[GQFwd", objectArray0);
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("ub|gC");
      Object object0 = noLogger0.readResolve();
      noLogger0.debug("@j^><ENV ", (Object) "@j^><ENV ", object0);
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("org.jfaster.mango.util.logging.AbstractInternalLogger");
      boolean boolean0 = noLogger0.isInfoEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NoLogger noLogger0 = null;
      try {
        noLogger0 = new NoLogger((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name
         //
         verifyException("org.jfaster.mango.util.logging.AbstractInternalLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("org.jfaster.mango.util.logging.AbstractInternalLogger");
      Object object0 = new Object();
      noLogger0.info("`kXK9pMZdM~&1z*03Y", object0);
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("org.jfaster.mango.util.logging.AbstractInternalLogger");
      noLogger0.error("7V1gL ;E3&WpN", (Throwable) null);
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("org.jfaster.mango.util.logging.AbstractInternalLogger");
      noLogger0.warn("", (Object) null);
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("org.jfaster.mango.util.logging.AbstractInternalLogger");
      noLogger0.debug("org.jfaster.mango.util.logging.AbstractInternalLogger", (Object) "org.jfaster.mango.util.logging.AbstractInternalLogger");
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      boolean boolean0 = noLogger0.isErrorEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("org.jfaster.mango.util.logging.AbstractInternalLogger");
      boolean boolean0 = noLogger0.isDebugEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      boolean boolean0 = noLogger0.isTraceEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("Q+R");
      noLogger0.debug("$VALUES");
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("Q+R");
      MockThrowable mockThrowable0 = new MockThrowable("$VALUES");
      noLogger0.info(",", (Throwable) mockThrowable0);
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      boolean boolean0 = noLogger0.isWarnEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      Object object0 = new Object();
      noLogger0.warn("Y4", object0, object0);
      assertFalse(noLogger0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      noLogger0.trace("+nN=.\"pY(SNsSA5A");
      assertFalse(noLogger0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("org.jfaster.mango.util.logging.AbstractInternalLogger");
      noLogger0.warn("a96vj6\"&4O)", (Throwable) null);
      assertFalse(noLogger0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("gRY63<m");
      noLogger0.error("gRY63<m", (Object) "gRY63<m");
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      NoLogger noLogger0 = new NoLogger("");
      noLogger0.trace("", (Throwable) mockThrowable0);
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("kmB@*GBM)p3@-<L[N6");
      NoLogger noLogger0 = new NoLogger("kmB@*GBM)p3@-<L[N6");
      noLogger0.debug("kmB@*GBM)p3@-<L[N6", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: kmB@*GBM)p3@-<L[N6", mockThrowable0.toString());
  }
}
