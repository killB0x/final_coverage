/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:06:02 GMT 2022
 */

package org.jfaster.mango.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfaster.mango.util.Iterators;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Iterators_ESTest extends Iterators_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      Iterators.size(iterator0);
      boolean boolean0 = true;
      Iterator<Integer> iterator1 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false, false, false, false).when(iterator1).hasNext();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(iterator1).next();
      // Undeclared exception!
      Iterators.size(iterator1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      Iterators.size(iterator0);
      Iterators iterators0 = new Iterators();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Iterator<Object> iterator0 = null;
      // Undeclared exception!
      try { 
        Iterators.size((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.Iterators", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Iterators iterators0 = new Iterators();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      int int0 = Iterators.size(iterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Iterators.size(iterator0);
      Iterators iterators0 = new Iterators();
      Iterator<Object> iterator1 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator1).hasNext();
      Iterators.size(iterator1);
      Iterator<Integer> iterator2 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator2).hasNext();
      int int0 = Iterators.size(iterator2);
      assertEquals(0, int0);
  }
}
