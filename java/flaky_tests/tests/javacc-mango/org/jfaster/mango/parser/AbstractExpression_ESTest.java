/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:03:07 GMT 2022
 */

package org.jfaster.mango.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.binding.DefaultInvocationContext;
import org.jfaster.mango.parser.ASTExpressionParameter;
import org.jfaster.mango.parser.ASTIntegerLiteral;
import org.jfaster.mango.parser.ASTLTNode;
import org.jfaster.mango.parser.ASTNENode;
import org.jfaster.mango.parser.ASTOrNode;
import org.jfaster.mango.parser.ASTStringLiteral;
import org.jfaster.mango.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractExpression_ESTest extends AbstractExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ASTIntegerLiteral aSTIntegerLiteral0 = new ASTIntegerLiteral(0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      boolean boolean0 = aSTIntegerLiteral0.evaluate(defaultInvocationContext0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ASTNENode aSTNENode0 = new ASTNENode(0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTNENode0.value(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter((-635));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTExpressionParameter0.value(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // invoker must set
         //
         verifyException("org.jfaster.mango.parser.ASTExpressionParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode((-2250));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTLTNode0.evaluate(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter((-635));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTExpressionParameter0.evaluate(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // invoker must set
         //
         verifyException("org.jfaster.mango.parser.ASTExpressionParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ASTOrNode aSTOrNode0 = new ASTOrNode((Parser) null, 0);
      assertEquals(0, aSTOrNode0.jjtGetNumChildren());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral((-25));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      Object object0 = aSTStringLiteral0.value(defaultInvocationContext0);
      assertNull(object0);
  }
}
