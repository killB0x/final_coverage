/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:47:18 GMT 2022
 */

package org.jfaster.mango.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.jfaster.mango.binding.DefaultInvocationContext;
import org.jfaster.mango.binding.InvocationContext;
import org.jfaster.mango.parser.ASTBlank;
import org.jfaster.mango.parser.ASTQuoteText;
import org.jfaster.mango.parser.ASTText;
import org.jfaster.mango.parser.Parser;
import org.jfaster.mango.parser.ParserVisitor;
import org.jfaster.mango.parser.visitor.CheckAndBindVisitor;
import org.jfaster.mango.parser.visitor.InterablePropertyCollectVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractStringNode_ESTest extends AbstractStringNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ASTQuoteText aSTQuoteText0 = new ASTQuoteText(1);
      String string0 = aSTQuoteText0.toString();
      assertEquals("Block[null]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CheckAndBindVisitor checkAndBindVisitor0 = CheckAndBindVisitor.INSTANCE;
      ASTQuoteText aSTQuoteText0 = new ASTQuoteText((Parser) null, 0);
      Object object0 = aSTQuoteText0.jjtAccept(checkAndBindVisitor0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Parser parser0 = new Parser(mockFileInputStream0);
      ASTBlank aSTBlank0 = new ASTBlank(parser0, 0);
      InterablePropertyCollectVisitor interablePropertyCollectVisitor0 = InterablePropertyCollectVisitor.INSTANCE;
      Object object0 = aSTBlank0.jjtAccept(interablePropertyCollectVisitor0, interablePropertyCollectVisitor0);
      assertSame(interablePropertyCollectVisitor0, object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ASTQuoteText aSTQuoteText0 = new ASTQuoteText((-3605));
      aSTQuoteText0.setValue("DeJthR");
      String string0 = aSTQuoteText0.getValue();
      assertEquals("DeJthR", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASTQuoteText aSTQuoteText0 = new ASTQuoteText(0);
      aSTQuoteText0.setValue("");
      String string0 = aSTQuoteText0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ASTQuoteText aSTQuoteText0 = new ASTQuoteText((-1));
      aSTQuoteText0.setGroupValue("org.jfaster.mango.descriptor.ParameterDescriptor");
      String string0 = aSTQuoteText0.getGroupValue();
      assertEquals("org.jfaster.mango.descriptor.ParameterDescriptor", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASTText aSTText0 = new ASTText((-2303));
      // Undeclared exception!
      try { 
        aSTText0.render((InvocationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.AbstractStringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ASTQuoteText aSTQuoteText0 = new ASTQuoteText(484);
      // Undeclared exception!
      try { 
        aSTQuoteText0.jjtAccept((ParserVisitor) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.ASTQuoteText", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ASTQuoteText aSTQuoteText0 = new ASTQuoteText((-1));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      boolean boolean0 = aSTQuoteText0.render(defaultInvocationContext0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ASTQuoteText aSTQuoteText0 = new ASTQuoteText(0);
      String string0 = aSTQuoteText0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASTText aSTText0 = new ASTText((-2303));
      // Undeclared exception!
      try { 
        aSTText0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2303 out of bounds for length 37
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ASTText aSTText0 = new ASTText((-2303));
      String string0 = aSTText0.getGroupValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ASTText aSTText0 = new ASTText((-2303));
      aSTText0.setGroupValue("");
      String string0 = aSTText0.getGroupValue();
      assertEquals("", string0);
  }
}
