/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 12:57:24 GMT 2022
 */

package org.jfaster.mango.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.sql.PreparedStatement;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfaster.mango.binding.BindingParameter;
import org.jfaster.mango.binding.DefaultInvocationContext;
import org.jfaster.mango.binding.DefaultParameterContext;
import org.jfaster.mango.descriptor.ParameterDescriptor;
import org.jfaster.mango.parser.ASTFalse;
import org.jfaster.mango.parser.ASTMerge;
import org.jfaster.mango.parser.ASTNENode;
import org.jfaster.mango.parser.ASTReplace;
import org.jfaster.mango.parser.Node;
import org.jfaster.mango.parser.Parser;
import org.jfaster.mango.parser.ParserVisitor;
import org.jfaster.mango.parser.Token;
import org.jfaster.mango.parser.visitor.CheckAndBindVisitor;
import org.jfaster.mango.parser.visitor.InterablePropertyCollectVisitor;
import org.jfaster.mango.parser.visitor.NodeCollectVisitor;
import org.jfaster.mango.parser.visitor.TextBlankJoinVisitor;
import org.jfaster.mango.type.IntegerTypeHandler;
import org.jfaster.mango.util.jdbc.JdbcType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ASTNENode_ESTest extends ASTNENode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ASTNENode aSTNENode0 = new ASTNENode(1783);
      ASTFalse aSTFalse0 = new ASTFalse((-2729));
      aSTNENode0.jjtAddChild(aSTFalse0, 0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTNENode0.value(defaultInvocationContext0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ASTNENode aSTNENode0 = new ASTNENode(4);
      Node[] nodeArray0 = new Node[0];
      aSTNENode0.children = nodeArray0;
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTNENode0.evaluate(defaultInvocationContext0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASTNENode aSTNENode0 = new ASTNENode(58);
      Node[] nodeArray0 = new Node[0];
      aSTNENode0.children = nodeArray0;
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTNENode0.value(defaultInvocationContext0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ASTNENode aSTNENode0 = new ASTNENode(123);
      ASTReplace aSTReplace0 = new ASTReplace(0);
      aSTNENode0.jjtAddChild(aSTReplace0, 0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTNENode0.value(defaultInvocationContext0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.jfaster.mango.parser.ASTReplace cannot be cast to class org.jfaster.mango.parser.AbstractExpression (org.jfaster.mango.parser.ASTReplace and org.jfaster.mango.parser.AbstractExpression are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @c2aaa4b)
         //
         verifyException("org.jfaster.mango.parser.ASTNENode", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASTNENode aSTNENode0 = new ASTNENode(1);
      Token token0 = aSTNENode0.lastToken;
      aSTNENode0.jjtSetFirstToken((Token) null);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      IntegerTypeHandler integerTypeHandler0 = new IntegerTypeHandler();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      JdbcType jdbcType0 = JdbcType.UNDEFINED;
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) aSTNENode0;
      nodeArray0[1] = (Node) aSTNENode0;
      nodeArray0[2] = (Node) aSTNENode0;
      nodeArray0[3] = (Node) aSTNENode0;
      nodeArray0[4] = (Node) aSTNENode0;
      nodeArray0[5] = (Node) aSTNENode0;
      aSTNENode0.children = nodeArray0;
      integerTypeHandler0.setNonNullParameter(preparedStatement0, 0, integer0, jdbcType0);
      aSTNENode0.jjtSetValue(integerTypeHandler0);
      PreparedStatement preparedStatement1 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      PreparedStatement preparedStatement2 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      integerTypeHandler0.setParameter(preparedStatement2, 1, integer0);
      Integer integer1 = new Integer(1);
      integerTypeHandler0.setParameter(preparedStatement1, (-321), integer1);
      defaultInvocationContext0.setGlobalTable("");
      defaultInvocationContext0.appendToArgs(aSTNENode0, integerTypeHandler0);
      // Undeclared exception!
      try { 
        aSTNENode0.evaluate(defaultInvocationContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ASTNENode aSTNENode0 = new ASTNENode((-315));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) aSTNENode0;
      ASTMerge aSTMerge0 = new ASTMerge(0);
      nodeArray0[1] = (Node) aSTMerge0;
      nodeArray0[2] = (Node) aSTNENode0;
      nodeArray0[3] = (Node) aSTNENode0;
      nodeArray0[4] = (Node) aSTNENode0;
      nodeArray0[5] = (Node) aSTNENode0;
      nodeArray0[6] = (Node) aSTNENode0;
      nodeArray0[7] = (Node) aSTNENode0;
      aSTNENode0.children = nodeArray0;
      defaultInvocationContext0.getBoundSql();
      // Undeclared exception!
      try { 
        aSTNENode0.value(defaultInvocationContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASTNENode aSTNENode0 = new ASTNENode((-106));
      // Undeclared exception!
      try { 
        aSTNENode0.jjtAccept((ParserVisitor) null, aSTNENode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.ASTNENode", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ASTNENode aSTNENode0 = new ASTNENode((-15));
      CheckAndBindVisitor checkAndBindVisitor0 = CheckAndBindVisitor.INSTANCE;
      aSTNENode0.jjtAccept(checkAndBindVisitor0, (Object) null);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      LinkedList<ParameterDescriptor> linkedList0 = new LinkedList<ParameterDescriptor>();
      DefaultParameterContext.create(linkedList0);
      DefaultParameterContext.create(linkedList0);
      int int0 = 1256;
      // Undeclared exception!
      try { 
        aSTNENode0.value(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ASTNENode aSTNENode0 = new ASTNENode((-3093));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTNENode0.evaluate(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ASTNENode aSTNENode0 = new ASTNENode((-6));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTNENode0.value(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASTNENode aSTNENode0 = new ASTNENode(2740);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      String string0 = "y}1d][#";
      defaultInvocationContext0.trim("y}1d][#");
      Parser parser0 = new Parser((Reader) null);
      aSTNENode0.parser = parser0;
      // Undeclared exception!
      try { 
        aSTNENode0.value(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ASTNENode aSTNENode0 = new ASTNENode((-3695));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      LinkedList<ParameterDescriptor> linkedList0 = new LinkedList<ParameterDescriptor>();
      DefaultParameterContext defaultParameterContext0 = DefaultParameterContext.create(linkedList0);
      JdbcType jdbcType0 = JdbcType.DATALINK;
      defaultInvocationContext0.getBoundSql();
      BindingParameter bindingParameter0 = new BindingParameter("9^7XEKUTCb,,", ":*Lu;4*f;#R=f,Hw}|4", jdbcType0);
      // Undeclared exception!
      try { 
        defaultParameterContext0.getBindingParameterInvoker(bindingParameter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Parameter ':9^7XEKUTCb,,' not found, available root parameters are []
         //
         verifyException("org.jfaster.mango.binding.DefaultParameterContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ASTNENode aSTNENode0 = new ASTNENode(1132);
      assertEquals(0, aSTNENode0.jjtGetNumChildren());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultInvocationContext.create();
      ASTNENode aSTNENode0 = new ASTNENode((-2783));
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        aSTNENode0.jjtAccept(textBlankJoinVisitor0, textBlankJoinVisitor0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ASTNENode aSTNENode0 = new ASTNENode((Parser) null, (-1005));
      assertEquals(0, aSTNENode0.jjtGetNumChildren());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = new Parser(stringReader0);
      ASTNENode aSTNENode0 = new ASTNENode(parser0, 0);
      InterablePropertyCollectVisitor interablePropertyCollectVisitor0 = InterablePropertyCollectVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        aSTNENode0.jjtAccept(interablePropertyCollectVisitor0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.InterablePropertyCollectVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ASTNENode aSTNENode0 = new ASTNENode((-1000));
      NodeCollectVisitor nodeCollectVisitor0 = NodeCollectVisitor.INSTANCE;
      Object object0 = aSTNENode0.jjtAccept(nodeCollectVisitor0, nodeCollectVisitor0);
      assertEquals(NodeCollectVisitor.INSTANCE, object0);
  }
}
