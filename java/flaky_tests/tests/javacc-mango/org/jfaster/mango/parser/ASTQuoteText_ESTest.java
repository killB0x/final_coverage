/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:09:04 GMT 2022
 */

package org.jfaster.mango.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.parser.ASTQuoteText;
import org.jfaster.mango.parser.Parser;
import org.jfaster.mango.parser.ParserVisitor;
import org.jfaster.mango.parser.visitor.NodeCollectVisitor;
import org.jfaster.mango.parser.visitor.TextBlankJoinVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ASTQuoteText_ESTest extends ASTQuoteText_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ASTQuoteText aSTQuoteText0 = new ASTQuoteText(1648);
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      Object object0 = aSTQuoteText0.jjtAccept(textBlankJoinVisitor0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ASTQuoteText aSTQuoteText0 = new ASTQuoteText(0);
      // Undeclared exception!
      try { 
        aSTQuoteText0.jjtAccept((ParserVisitor) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.ASTQuoteText", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ASTQuoteText aSTQuoteText0 = new ASTQuoteText((Parser) null, 0);
      assertEquals(0, aSTQuoteText0.jjtGetNumChildren());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ASTQuoteText aSTQuoteText0 = new ASTQuoteText(0);
      NodeCollectVisitor nodeCollectVisitor0 = NodeCollectVisitor.INSTANCE;
      Object object0 = aSTQuoteText0.jjtAccept(nodeCollectVisitor0, nodeCollectVisitor0);
      assertSame(object0, nodeCollectVisitor0);
  }
}
