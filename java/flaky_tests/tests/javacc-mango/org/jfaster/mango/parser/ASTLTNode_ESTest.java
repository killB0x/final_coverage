/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:11:05 GMT 2022
 */

package org.jfaster.mango.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfaster.mango.binding.InvocationContext;
import org.jfaster.mango.parser.ASTLTNode;
import org.jfaster.mango.parser.Node;
import org.jfaster.mango.parser.Parser;
import org.jfaster.mango.parser.ParserVisitor;
import org.jfaster.mango.parser.Token;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ASTLTNode_ESTest extends ASTLTNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode(1463);
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      assertNotNull(aSTLTNode0);
      
      Node[] nodeArray0 = new Node[0];
      aSTLTNode0.children = nodeArray0;
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      
      // Undeclared exception!
      try { 
        aSTLTNode0.value((InvocationContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Parser parser0 = mock(Parser.class, new ViolatedAssumptionAnswer());
      ASTLTNode aSTLTNode0 = new ASTLTNode(parser0, 54);
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      assertNotNull(aSTLTNode0);
      
      Token token0 = aSTLTNode0.jjtGetLastToken();
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      assertNull(token0);
      
      aSTLTNode0.jjtSetFirstToken((Token) null);
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      
      ParserVisitor parserVisitor0 = mock(ParserVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(aSTLTNode0).when(parserVisitor0).visit(any(org.jfaster.mango.parser.ASTLTNode.class) , any());
      ASTLTNode aSTLTNode1 = (ASTLTNode)aSTLTNode0.jjtAccept(parserVisitor0, parserVisitor0);
      assertSame(aSTLTNode0, aSTLTNode1);
      assertSame(aSTLTNode1, aSTLTNode0);
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      assertEquals(0, aSTLTNode1.jjtGetNumChildren());
      assertNotNull(aSTLTNode1);
      
      InvocationContext invocationContext0 = mock(InvocationContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        aSTLTNode0.evaluate(invocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode(1464);
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      assertNotNull(aSTLTNode0);
      
      aSTLTNode0.id = 1464;
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      
      // Undeclared exception!
      try { 
        aSTLTNode0.jjtAccept((ParserVisitor) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.ASTLTNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode(1463);
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      assertNotNull(aSTLTNode0);
      
      // Undeclared exception!
      try { 
        aSTLTNode0.value((InvocationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Parser parser0 = mock(Parser.class, new ViolatedAssumptionAnswer());
      ASTLTNode aSTLTNode0 = new ASTLTNode(parser0, 54);
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      assertNotNull(aSTLTNode0);
      
      Token token0 = aSTLTNode0.jjtGetLastToken();
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      assertNull(token0);
      
      aSTLTNode0.jjtSetFirstToken((Token) null);
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      
      ParserVisitor parserVisitor0 = mock(ParserVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(parserVisitor0).visit(any(org.jfaster.mango.parser.ASTLTNode.class) , any());
      Object object0 = aSTLTNode0.jjtAccept(parserVisitor0, parserVisitor0);
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      assertNull(object0);
      
      InvocationContext invocationContext0 = mock(InvocationContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        aSTLTNode0.evaluate(invocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode(1463);
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      assertNotNull(aSTLTNode0);
      
      ParserVisitor parserVisitor0 = mock(ParserVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(parserVisitor0).visit(any(org.jfaster.mango.parser.ASTLTNode.class) , any());
      Object object0 = aSTLTNode0.jjtAccept(parserVisitor0, parserVisitor0);
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = (-1762);
      ASTLTNode aSTLTNode0 = new ASTLTNode((-1762));
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      assertNotNull(aSTLTNode0);
      
      ParserVisitor parserVisitor0 = mock(ParserVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(parserVisitor0).visit(any(org.jfaster.mango.parser.ASTLTNode.class) , any());
      Object object0 = aSTLTNode0.jjtGetValue();
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      assertNull(object0);
      
      aSTLTNode0.jjtSetValue((Object) null);
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      
      Object object1 = aSTLTNode0.value;
      assertNull(object1);
      
      Object object2 = aSTLTNode0.jjtAccept(parserVisitor0, (Object) null);
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      assertNull(object2);
      
      aSTLTNode0.value = null;
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      
      aSTLTNode0.id = (-816);
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
      
      String string0 = "]6!Y^\\~#rxe";
      // Undeclared exception!
      try { 
        aSTLTNode0.dump("]6!Y^~#rxe");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -816 out of bounds for length 37
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode(109);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) aSTLTNode0;
      nodeArray0[1] = (Node) aSTLTNode0;
      nodeArray0[2] = (Node) aSTLTNode0;
      nodeArray0[3] = (Node) aSTLTNode0;
      nodeArray0[4] = (Node) aSTLTNode0;
      nodeArray0[5] = (Node) aSTLTNode0;
      aSTLTNode0.children = nodeArray0;
      InvocationContext invocationContext0 = mock(InvocationContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        aSTLTNode0.evaluate(invocationContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode(0);
      InvocationContext invocationContext0 = mock(InvocationContext.class, new ViolatedAssumptionAnswer());
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) aSTLTNode0;
      nodeArray0[1] = (Node) aSTLTNode0;
      aSTLTNode0.jjtGetParent();
      aSTLTNode0.parent = nodeArray0[0];
      nodeArray0[2] = null;
      nodeArray0[3] = (Node) aSTLTNode0;
      nodeArray0[4] = (Node) aSTLTNode0;
      nodeArray0[5] = (Node) aSTLTNode0;
      nodeArray0[6] = (Node) aSTLTNode0;
      nodeArray0[7] = (Node) aSTLTNode0;
      nodeArray0[8] = (Node) aSTLTNode0;
      aSTLTNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        aSTLTNode0.evaluate(invocationContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Parser parser0 = mock(Parser.class, new ViolatedAssumptionAnswer());
      ASTLTNode aSTLTNode0 = new ASTLTNode(parser0, 161);
      InvocationContext invocationContext0 = mock(InvocationContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        aSTLTNode0.evaluate(invocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode((Parser) null, 11);
      aSTLTNode0.id = 11;
      aSTLTNode0.jjtGetValue();
      aSTLTNode0.value = null;
      ASTLTNode aSTLTNode1 = new ASTLTNode(11);
      ASTLTNode aSTLTNode2 = new ASTLTNode(1601);
      // Undeclared exception!
      try { 
        aSTLTNode0.value((InvocationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Parser parser0 = mock(Parser.class, new ViolatedAssumptionAnswer());
      ASTLTNode aSTLTNode0 = new ASTLTNode(parser0, 1081);
      Parser parser1 = mock(Parser.class, new ViolatedAssumptionAnswer());
      aSTLTNode0.parser = parser1;
      InvocationContext invocationContext0 = mock(InvocationContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        aSTLTNode0.evaluate(invocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }
}
