/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:03:23 GMT 2022
 */

package org.jfaster.mango.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.binding.DefaultInvocationContext;
import org.jfaster.mango.parser.ASTStringLiteral;
import org.jfaster.mango.parser.Parser;
import org.jfaster.mango.parser.visitor.ParameterExpandVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ASTStringLiteral_ESTest extends ASTStringLiteral_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      aSTStringLiteral0.toString();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      ParameterExpandVisitor parameterExpandVisitor0 = ParameterExpandVisitor.INSTANCE;
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      aSTStringLiteral0.jjtAccept(parameterExpandVisitor0, defaultInvocationContext0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      // Undeclared exception!
      try { 
        aSTStringLiteral0.init("A");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      // Undeclared exception!
      try { 
        aSTStringLiteral0.init((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.ASTStringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral((Parser) null, (-1695));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTStringLiteral0.evaluate(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Parser parser0 = new Parser(pipedReader0);
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(parser0, (-1));
      // Undeclared exception!
      try { 
        aSTStringLiteral0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 37
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      Parser parser0 = new Parser(pipedReader0);
      assertNotNull(parser0);
      
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(parser0, (-1));
      assertEquals(0, aSTStringLiteral0.jjtGetNumChildren());
      assertNotNull(aSTStringLiteral0);
      
      aSTStringLiteral0.init("\"#else\"");
      assertEquals(0, aSTStringLiteral0.jjtGetNumChildren());
      
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      assertNull(defaultInvocationContext0.getGlobalTable());
      assertNotNull(defaultInvocationContext0);
      
      boolean boolean0 = aSTStringLiteral0.evaluate(defaultInvocationContext0);
      assertTrue(boolean0);
      assertEquals(0, aSTStringLiteral0.jjtGetNumChildren());
      assertNull(defaultInvocationContext0.getGlobalTable());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      ParameterExpandVisitor parameterExpandVisitor0 = ParameterExpandVisitor.INSTANCE;
      Object object0 = aSTStringLiteral0.jjtAccept(parameterExpandVisitor0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      Object object0 = aSTStringLiteral0.value(defaultInvocationContext0);
      assertNull(object0);
  }
}
