/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:26:01 GMT 2022
 */

package org.jfaster.mango.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfaster.mango.binding.BindingParameter;
import org.jfaster.mango.binding.DefaultInvocationContext;
import org.jfaster.mango.binding.TransferableBindingParameterInvoker;
import org.jfaster.mango.parser.ASTJDBCIterableParameter;
import org.jfaster.mango.parser.Parser;
import org.jfaster.mango.parser.visitor.InterablePropertyCollectVisitor;
import org.jfaster.mango.parser.visitor.NodeCollectVisitor;
import org.jfaster.mango.parser.visitor.ParameterExpandVisitor;
import org.jfaster.mango.parser.visitor.TextBlankJoinVisitor;
import org.jfaster.mango.type.TypeHandler;
import org.jfaster.mango.util.jdbc.JdbcType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ASTJDBCIterableParameter_ESTest extends ASTJDBCIterableParameter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ASTJDBCIterableParameter aSTJDBCIterableParameter0 = new ASTJDBCIterableParameter((-1063));
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      Object object0 = aSTJDBCIterableParameter0.jjtAccept(textBlankJoinVisitor0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("in(:0)");
      Parser parser0 = new Parser(stringReader0);
      ASTJDBCIterableParameter aSTJDBCIterableParameter0 = new ASTJDBCIterableParameter(parser0, 54);
      InterablePropertyCollectVisitor interablePropertyCollectVisitor0 = InterablePropertyCollectVisitor.INSTANCE;
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Object object0 = aSTJDBCIterableParameter0.jjtAccept(interablePropertyCollectVisitor0, sequenceInputStream0);
      assertSame(sequenceInputStream0, object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASTJDBCIterableParameter aSTJDBCIterableParameter0 = new ASTJDBCIterableParameter((-1265));
      aSTJDBCIterableParameter0.setPropertyOfMapper("in(:0)");
      String string0 = aSTJDBCIterableParameter0.getPropertyOfMapper();
      assertEquals("in(:0)", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ASTJDBCIterableParameter aSTJDBCIterableParameter0 = new ASTJDBCIterableParameter(4);
      // Undeclared exception!
      try { 
        aSTJDBCIterableParameter0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.ASTJDBCIterableParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASTJDBCIterableParameter aSTJDBCIterableParameter0 = new ASTJDBCIterableParameter((-1052));
      ParameterExpandVisitor parameterExpandVisitor0 = ParameterExpandVisitor.INSTANCE;
      Integer integer0 = new Integer(3841);
      // Undeclared exception!
      try { 
        aSTJDBCIterableParameter0.jjtAccept(parameterExpandVisitor0, integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Integer cannot be cast to class org.jfaster.mango.binding.ParameterContext (java.lang.Integer is in module java.base of loader 'bootstrap'; org.jfaster.mango.binding.ParameterContext is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7a72f1f4)
         //
         verifyException("org.jfaster.mango.parser.visitor.ParameterExpandVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ASTJDBCIterableParameter aSTJDBCIterableParameter0 = new ASTJDBCIterableParameter(4);
      // Undeclared exception!
      try { 
        aSTJDBCIterableParameter0.init((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASTJDBCIterableParameter aSTJDBCIterableParameter0 = new ASTJDBCIterableParameter((Parser) null, 12);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTJDBCIterableParameter0.render(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // invoker must set
         //
         verifyException("org.jfaster.mango.parser.ASTJDBCIterableParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ASTJDBCIterableParameter aSTJDBCIterableParameter0 = new ASTJDBCIterableParameter((-1052));
      // Undeclared exception!
      try { 
        aSTJDBCIterableParameter0.init(">3");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't compile string '>3'
         //
         verifyException("org.jfaster.mango.parser.ASTJDBCIterableParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ASTJDBCIterableParameter aSTJDBCIterableParameter0 = new ASTJDBCIterableParameter(2);
      String string0 = aSTJDBCIterableParameter0.getPropertyOfMapper();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JdbcType jdbcType0 = JdbcType.REAL;
      BindingParameter bindingParameter0 = new BindingParameter("org.jfaster.mango.type.BaseTypeHandler", "", jdbcType0);
      Class<Short> class0 = Short.TYPE;
      TransferableBindingParameterInvoker transferableBindingParameterInvoker0 = TransferableBindingParameterInvoker.create(class0, bindingParameter0);
      ASTJDBCIterableParameter aSTJDBCIterableParameter0 = new ASTJDBCIterableParameter((-2));
      aSTJDBCIterableParameter0.setBindingParameterInvoker(transferableBindingParameterInvoker0);
      assertNull(aSTJDBCIterableParameter0.getPropertyOfMapper());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASTJDBCIterableParameter aSTJDBCIterableParameter0 = new ASTJDBCIterableParameter((-2));
      // Undeclared exception!
      try { 
        aSTJDBCIterableParameter0.getFullName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.ASTJDBCIterableParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ASTJDBCIterableParameter aSTJDBCIterableParameter0 = new ASTJDBCIterableParameter((-1104));
      BindingParameter bindingParameter0 = aSTJDBCIterableParameter0.getBindingParameter();
      assertNull(bindingParameter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ASTJDBCIterableParameter aSTJDBCIterableParameter0 = new ASTJDBCIterableParameter((-1450));
      NodeCollectVisitor nodeCollectVisitor0 = NodeCollectVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        aSTJDBCIterableParameter0.jjtAccept(nodeCollectVisitor0, aSTJDBCIterableParameter0.value);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.NodeCollectVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ASTJDBCIterableParameter aSTJDBCIterableParameter0 = new ASTJDBCIterableParameter((-1104));
      aSTJDBCIterableParameter0.setBindingParameter((BindingParameter) null);
      assertEquals(0, aSTJDBCIterableParameter0.jjtGetNumChildren());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ASTJDBCIterableParameter aSTJDBCIterableParameter0 = new ASTJDBCIterableParameter(0);
      TypeHandler<Object> typeHandler0 = (TypeHandler<Object>) mock(TypeHandler.class, new ViolatedAssumptionAnswer());
      aSTJDBCIterableParameter0.setTypeHandler(typeHandler0);
      assertNull(aSTJDBCIterableParameter0.getPropertyOfMapper());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ASTJDBCIterableParameter aSTJDBCIterableParameter0 = new ASTJDBCIterableParameter((Parser) null, (-1169));
      // Undeclared exception!
      try { 
        aSTJDBCIterableParameter0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1169 out of bounds for length 37
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Parser parser0 = new Parser("");
      ASTJDBCIterableParameter aSTJDBCIterableParameter0 = new ASTJDBCIterableParameter(parser0, 0);
      // Undeclared exception!
      try { 
        aSTJDBCIterableParameter0.init("in(:0)");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }
}
