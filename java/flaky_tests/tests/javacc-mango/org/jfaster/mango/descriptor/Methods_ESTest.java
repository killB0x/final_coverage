/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:04:28 GMT 2022
 */

package org.jfaster.mango.descriptor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.List;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.descriptor.Methods;
import org.jfaster.mango.util.reflect.TypeToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Methods_ESTest extends Methods_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of(class0);
      Type type0 = Methods.resolveType((Type) null, typeToken0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of(class0);
      Class class1 = (Class)Methods.resolveType(class0, typeToken0);
      assertFalse(class1.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Type type0 = Methods.fixTypeInJava6((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class class1 = (Class)Methods.fixTypeInJava6(class0);
      assertEquals(17, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of(class0);
      Class class1 = (Class)Methods.fixAndResolveType(class0, typeToken0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeToken<Object> typeToken0 = TypeToken.of((Class<Object>) null);
      // Undeclared exception!
      try { 
        Methods.resolveType((Type) null, typeToken0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Methods.resolveType(class0, (TypeToken<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Methods.listMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Methods.getMethodDescriptor(class0, (Method) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.descriptor.Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of((Class<Object>) null);
      // Undeclared exception!
      try { 
        Methods.fixAndResolveType(class0, typeToken0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Methods.fixAndResolveType(class0, (TypeToken<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Method> class0 = Method.class;
      List<Method> list0 = Methods.listMethods(class0);
      assertEquals(45, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of(class0);
      Type type0 = Methods.fixAndResolveType((Type) null, typeToken0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Methods methods0 = new Methods();
  }
}
