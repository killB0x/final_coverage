/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:42:46 GMT 2022
 */

package org.jfaster.mango.crud.named.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.crud.named.parser.OpUnit;
import org.jfaster.mango.crud.named.parser.op.Op;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpUnit_ESTest extends OpUnit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OpUnit opUnit0 = OpUnit.create(")~&!P&JXNot");
      assertEquals(")~&!P&JX", opUnit0.getProperty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        OpUnit.create("False");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        OpUnit.create((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OpUnit opUnit0 = OpUnit.create("HzIsNull");
      opUnit0.getOp();
      assertEquals("hz", opUnit0.getProperty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OpUnit opUnit0 = OpUnit.create(";Ik");
      Op op0 = opUnit0.getOp();
      assertEquals(1, op0.paramCount());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OpUnit opUnit0 = OpUnit.create(";Ik");
      String string0 = opUnit0.getProperty();
      assertEquals(";Ik", string0);
  }
}
