/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:31:55 GMT 2022
 */

package org.jfaster.mango.crud.named.parser.op;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.crud.named.parser.op.BetweenOp;
import org.jfaster.mango.crud.named.parser.op.EqualsOp;
import org.jfaster.mango.crud.named.parser.op.GreaterThanEqualOp;
import org.jfaster.mango.crud.named.parser.op.GreaterThanOp;
import org.jfaster.mango.crud.named.parser.op.InOp;
import org.jfaster.mango.crud.named.parser.op.IsNullOp;
import org.jfaster.mango.crud.named.parser.op.LessThanEqualOp;
import org.jfaster.mango.crud.named.parser.op.LessThanOp;
import org.jfaster.mango.crud.named.parser.op.NotInOp;
import org.jfaster.mango.crud.named.parser.op.NotNullOp;
import org.jfaster.mango.crud.named.parser.op.NotOp;
import org.jfaster.mango.crud.named.parser.op.TrueOp;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractOp_ESTest extends AbstractOp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GreaterThanEqualOp greaterThanEqualOp0 = new GreaterThanEqualOp();
      GreaterThanEqualOp greaterThanEqualOp1 = new GreaterThanEqualOp();
      boolean boolean0 = greaterThanEqualOp1.equals(greaterThanEqualOp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EqualsOp equalsOp0 = new EqualsOp();
      GreaterThanEqualOp greaterThanEqualOp0 = new GreaterThanEqualOp();
      boolean boolean0 = greaterThanEqualOp0.equals(equalsOp0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LessThanOp lessThanOp0 = new LessThanOp();
      assertEquals(1, lessThanOp0.paramCount());
      
      lessThanOp0.hashCode();
      NotInOp notInOp0 = new NotInOp();
      Object object0 = new Object();
      notInOp0.hashCode();
      notInOp0.hashCode();
      notInOp0.equals(object0);
      lessThanOp0.equals(notInOp0);
      NotOp notOp0 = new NotOp();
      String string0 = notOp0.operator();
      NotNullOp notNullOp0 = new NotNullOp();
      String string1 = notNullOp0.render("aT^DB[!,E");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BetweenOp betweenOp0 = new BetweenOp();
      betweenOp0.hashCode();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GreaterThanEqualOp greaterThanEqualOp0 = new GreaterThanEqualOp();
      boolean boolean0 = greaterThanEqualOp0.equals(greaterThanEqualOp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LessThanOp lessThanOp0 = new LessThanOp();
      Object object0 = new Object();
      boolean boolean0 = lessThanOp0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GreaterThanOp greaterThanOp0 = new GreaterThanOp();
      TrueOp trueOp0 = new TrueOp();
      trueOp0.toString();
      trueOp0.render((String) null);
      trueOp0.hashCode();
      trueOp0.toString();
      trueOp0.hashCode();
      trueOp0.keyword();
      Object object0 = new Object();
      trueOp0.equals(object0);
      NotOp notOp0 = new NotOp();
      trueOp0.toString();
      String string0 = notOp0.keyword();
      greaterThanOp0.keyword();
      GreaterThanEqualOp greaterThanEqualOp0 = new GreaterThanEqualOp();
      greaterThanEqualOp0.operator();
      NotInOp notInOp0 = new NotInOp();
      notInOp0.equals(">=");
      NotInOp notInOp1 = new NotInOp();
      notInOp1.toString();
      notInOp0.equals(notInOp1);
      notInOp0.keyword();
      EqualsOp equalsOp0 = new EqualsOp();
      equalsOp0.keyword();
      InOp inOp0 = new InOp();
      inOp0.keyword();
      inOp0.keyword();
      trueOp0.render("NotIn");
      notOp0.keyword();
      NotNullOp notNullOp0 = new NotNullOp();
      notNullOp0.render("Ysa9Y\"XyiXz}");
      IsNullOp isNullOp0 = new IsNullOp();
      Object object1 = new Object();
      greaterThanEqualOp0.equals(object1);
      isNullOp0.keyword();
      String string1 = greaterThanEqualOp0.operator();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LessThanEqualOp lessThanEqualOp0 = new LessThanEqualOp();
      String string0 = lessThanEqualOp0.toString();
      assertEquals("LessThanEqual", string0);
  }
}
