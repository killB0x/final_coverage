/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:11:01 GMT 2022
 */

package org.jfaster.mango.crud.buildin.factory;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Type;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.crud.CrudMeta;
import org.jfaster.mango.crud.buildin.builder.AbstractBuildinBuilder;
import org.jfaster.mango.crud.buildin.factory.BuildinDeleteBuilderFactory;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BuildinDeleteBuilderFactory_ESTest extends BuildinDeleteBuilderFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BuildinDeleteBuilderFactory buildinDeleteBuilderFactory0 = new BuildinDeleteBuilderFactory();
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      List<Type> list0 = buildinDeleteBuilderFactory0.expectedParameterType(class0, class1);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BuildinDeleteBuilderFactory buildinDeleteBuilderFactory0 = new BuildinDeleteBuilderFactory();
      // Undeclared exception!
      try { 
        buildinDeleteBuilderFactory0.createInternalBuilder((CrudMeta) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.crud.buildin.factory.BuildinDeleteBuilderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BuildinDeleteBuilderFactory buildinDeleteBuilderFactory0 = new BuildinDeleteBuilderFactory();
      Class<Object> class0 = Object.class;
      CrudMeta crudMeta0 = new CrudMeta(class0);
      AbstractBuildinBuilder abstractBuildinBuilder0 = buildinDeleteBuilderFactory0.createInternalBuilder(crudMeta0);
      assertNotNull(abstractBuildinBuilder0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BuildinDeleteBuilderFactory buildinDeleteBuilderFactory0 = new BuildinDeleteBuilderFactory();
      Class<Integer> class0 = Integer.class;
      Class class1 = (Class)buildinDeleteBuilderFactory0.expectedReturnType(class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BuildinDeleteBuilderFactory buildinDeleteBuilderFactory0 = new BuildinDeleteBuilderFactory();
      String string0 = buildinDeleteBuilderFactory0.expectedMethodName();
      assertEquals("delete", string0);
  }
}
