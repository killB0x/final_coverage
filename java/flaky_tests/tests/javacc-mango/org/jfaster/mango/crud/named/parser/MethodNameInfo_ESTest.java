/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:56:26 GMT 2022
 */

package org.jfaster.mango.crud.named.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.crud.named.parser.MethodNameInfo;
import org.jfaster.mango.crud.named.parser.OpUnit;
import org.jfaster.mango.crud.named.parser.OrderType;
import org.jfaster.mango.crud.named.parser.OrderUnit;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MethodNameInfo_ESTest extends MethodNameInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MethodNameInfo methodNameInfo0 = new MethodNameInfo((List<OpUnit>) null, linkedList0, (OrderUnit) null);
      OrderUnit orderUnit0 = methodNameInfo0.getOrderUnit();
      assertNull(orderUnit0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      OrderType orderType0 = OrderType.NONE;
      OrderUnit orderUnit0 = new OrderUnit("@zX#+P5<kZ#mq=>}kr", orderType0, 62);
      MethodNameInfo methodNameInfo0 = new MethodNameInfo((List<OpUnit>) null, linkedList0, orderUnit0);
      OrderUnit orderUnit1 = methodNameInfo0.getOrderUnit();
      assertSame(orderUnit1, orderUnit0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<OpUnit> linkedList0 = new LinkedList<OpUnit>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      OrderType orderType0 = OrderType.DESC;
      OrderUnit orderUnit0 = new OrderUnit("x+e4qwBeo1x$H]", orderType0, (-1));
      MethodNameInfo methodNameInfo0 = new MethodNameInfo(linkedList0, linkedList1, orderUnit0);
      OrderUnit orderUnit1 = methodNameInfo0.getOrderUnit();
      assertEquals("x+e4qwBeo1x$H]", orderUnit1.getProperty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MethodNameInfo methodNameInfo0 = new MethodNameInfo((List<OpUnit>) null, linkedList0, (OrderUnit) null);
      List<OpUnit> list0 = methodNameInfo0.getOpUnits();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<OpUnit> linkedList0 = new LinkedList<OpUnit>();
      OpUnit opUnit0 = OpUnit.create("0YHP' -4dLP(z'");
      linkedList0.add(opUnit0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      OrderType orderType0 = OrderType.DESC;
      OrderUnit orderUnit0 = new OrderUnit("", orderType0, 0);
      MethodNameInfo methodNameInfo0 = new MethodNameInfo(linkedList0, linkedList1, orderUnit0);
      List<OpUnit> list0 = methodNameInfo0.getOpUnits();
      assertTrue(list0.contains(opUnit0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MethodNameInfo methodNameInfo0 = new MethodNameInfo((List<OpUnit>) null, linkedList0, (OrderUnit) null);
      List<String> list0 = methodNameInfo0.getLogics();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<OpUnit> linkedList0 = new LinkedList<OpUnit>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("r");
      OrderType orderType0 = OrderType.DESC;
      OrderUnit orderUnit0 = new OrderUnit("", orderType0, 0);
      MethodNameInfo methodNameInfo0 = new MethodNameInfo(linkedList0, linkedList1, orderUnit0);
      List<String> list0 = methodNameInfo0.getLogics();
      assertTrue(list0.contains("r"));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<OpUnit> linkedList0 = new LinkedList<OpUnit>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      OrderType orderType0 = OrderType.DESC;
      OrderUnit orderUnit0 = new OrderUnit("", orderType0, 0);
      MethodNameInfo methodNameInfo0 = new MethodNameInfo(linkedList0, linkedList1, orderUnit0);
      OrderUnit orderUnit1 = methodNameInfo0.getOrderUnit();
      assertSame(orderUnit1, orderUnit0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedList<OpUnit> linkedList0 = new LinkedList<OpUnit>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      OrderType orderType0 = OrderType.DESC;
      OrderUnit orderUnit0 = new OrderUnit("", orderType0, 0);
      MethodNameInfo methodNameInfo0 = new MethodNameInfo(linkedList0, linkedList1, orderUnit0);
      List<OpUnit> list0 = methodNameInfo0.getOpUnits();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LinkedList<OpUnit> linkedList0 = new LinkedList<OpUnit>();
      MethodNameInfo methodNameInfo0 = new MethodNameInfo(linkedList0, (List<String>) null, (OrderUnit) null);
      List<String> list0 = methodNameInfo0.getLogics();
      assertNull(list0);
  }
}
