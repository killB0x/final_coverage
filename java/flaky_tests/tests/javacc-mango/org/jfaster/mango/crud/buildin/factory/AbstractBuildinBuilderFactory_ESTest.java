/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:27:02 GMT 2022
 */

package org.jfaster.mango.crud.buildin.factory;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Type;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.crud.Builder;
import org.jfaster.mango.crud.buildin.factory.BuildinAddBuilderFactory;
import org.jfaster.mango.crud.buildin.factory.BuildinDeleteBuilderFactory;
import org.jfaster.mango.crud.buildin.factory.BuildinFindAllSortBuilderFactory;
import org.jfaster.mango.crud.buildin.factory.BuildinFindOneBuilderFactory;
import org.jfaster.mango.crud.buildin.factory.BuildinGetOneBuilderFactory;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractBuildinBuilderFactory_ESTest extends AbstractBuildinBuilderFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BuildinGetOneBuilderFactory buildinGetOneBuilderFactory0 = new BuildinGetOneBuilderFactory();
      Class<Integer> class0 = Integer.class;
      LinkedList<Type> linkedList0 = new LinkedList<Type>();
      linkedList0.add((Type) class0);
      Class<Type> class1 = Type.class;
      // Undeclared exception!
      try { 
        buildinGetOneBuilderFactory0.doTryGetBuilder("getOne", class1, linkedList0, class1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // caused by: null
         //
         verifyException("org.jfaster.mango.util.bean.BeanUtil$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BuildinGetOneBuilderFactory buildinGetOneBuilderFactory0 = new BuildinGetOneBuilderFactory();
      Class<Integer> class0 = Integer.class;
      LinkedList<Type> linkedList0 = new LinkedList<Type>();
      // Undeclared exception!
      try { 
        buildinGetOneBuilderFactory0.doTryGetBuilder("getOne", class0, linkedList0, (Class<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.crud.buildin.factory.AbstractBuildinBuilderFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BuildinGetOneBuilderFactory buildinGetOneBuilderFactory0 = new BuildinGetOneBuilderFactory();
      Class<Integer> class0 = Integer.class;
      LinkedList<Type> linkedList0 = new LinkedList<Type>();
      linkedList0.add((Type) class0);
      // Undeclared exception!
      try { 
        buildinGetOneBuilderFactory0.doTryGetBuilder("getOne", class0, linkedList0, class0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // error column id [null]
         //
         verifyException("org.jfaster.mango.crud.buildin.builder.BuildinGetBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BuildinFindAllSortBuilderFactory buildinFindAllSortBuilderFactory0 = new BuildinFindAllSortBuilderFactory();
      BuildinAddBuilderFactory buildinAddBuilderFactory0 = new BuildinAddBuilderFactory();
      Class<Integer> class0 = Integer.class;
      List<Type> list0 = buildinAddBuilderFactory0.expectedParameterType(class0, class0);
      Builder builder0 = buildinFindAllSortBuilderFactory0.doTryGetBuilder("findAll", (Type) null, list0, class0, class0);
      assertNull(builder0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BuildinFindOneBuilderFactory buildinFindOneBuilderFactory0 = new BuildinFindOneBuilderFactory();
      BuildinDeleteBuilderFactory buildinDeleteBuilderFactory0 = new BuildinDeleteBuilderFactory();
      Class<Object> class0 = Object.class;
      List<Type> list0 = buildinDeleteBuilderFactory0.expectedParameterType(class0, class0);
      Builder builder0 = buildinFindOneBuilderFactory0.doTryGetBuilder("", class0, list0, class0, class0);
      assertNull(builder0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BuildinGetOneBuilderFactory buildinGetOneBuilderFactory0 = new BuildinGetOneBuilderFactory();
      Class<Integer> class0 = Integer.class;
      LinkedList<Type> linkedList0 = new LinkedList<Type>();
      Builder builder0 = buildinGetOneBuilderFactory0.doTryGetBuilder("getOne", class0, linkedList0, class0, class0);
      assertNull(builder0);
  }
}
