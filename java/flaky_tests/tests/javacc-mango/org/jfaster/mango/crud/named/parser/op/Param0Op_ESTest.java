/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:51:37 GMT 2022
 */

package org.jfaster.mango.crud.named.parser.op;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.crud.named.parser.op.FalseOp;
import org.jfaster.mango.crud.named.parser.op.IsNullOp;
import org.jfaster.mango.crud.named.parser.op.NotNullOp;
import org.jfaster.mango.crud.named.parser.op.TrueOp;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Param0Op_ESTest extends Param0Op_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NotNullOp notNullOp0 = new NotNullOp();
      assertEquals(0, notNullOp0.paramCount());
      assertEquals("NotNull", notNullOp0.keyword());
      assertNotNull(notNullOp0);
      
      // Undeclared exception!
      try { 
        notNullOp0.render("", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // params can't be null
         //
         verifyException("org.jfaster.mango.crud.named.parser.op.Param0Op", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FalseOp falseOp0 = new FalseOp();
      assertEquals(0, falseOp0.paramCount());
      assertEquals("False", falseOp0.keyword());
      assertNotNull(falseOp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = falseOp0.render((String) null);
      assertEquals("null = false", string0);
      assertEquals(0, falseOp0.paramCount());
      assertEquals("False", falseOp0.keyword());
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = falseOp0.render((String) null, stringArray0);
      assertEquals("null = false", string1);
      assertEquals(0, falseOp0.paramCount());
      assertEquals("False", falseOp0.keyword());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = falseOp0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0, falseOp0.paramCount());
      assertEquals("False", falseOp0.keyword());
      
      int int0 = falseOp0.paramCount();
      assertEquals(0, int0);
      assertEquals(0, falseOp0.paramCount());
      assertEquals("False", falseOp0.keyword());
      
      NotNullOp notNullOp0 = new NotNullOp();
      assertEquals(0, notNullOp0.paramCount());
      assertEquals("NotNull", notNullOp0.keyword());
      assertNotNull(notNullOp0);
      
      String string2 = notNullOp0.toString();
      assertEquals("NotNull", string2);
      assertEquals(0, notNullOp0.paramCount());
      assertEquals("NotNull", notNullOp0.keyword());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = notNullOp0.toString();
      assertEquals("NotNull", string3);
      assertEquals(0, notNullOp0.paramCount());
      assertEquals("NotNull", notNullOp0.keyword());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = notNullOp0.render("`JA;@,");
      assertEquals("`JA;@, not null", string4);
      assertEquals(0, notNullOp0.paramCount());
      assertEquals("NotNull", notNullOp0.keyword());
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = notNullOp0.render("null = false");
      assertEquals("null = false not null", string5);
      assertEquals(0, notNullOp0.paramCount());
      assertEquals("NotNull", notNullOp0.keyword());
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      IsNullOp isNullOp0 = new IsNullOp();
      assertEquals(0, isNullOp0.paramCount());
      assertEquals("IsNull", isNullOp0.keyword());
      assertNotNull(isNullOp0);
      
      String string6 = isNullOp0.render("null = false");
      assertEquals("null = false is null", string6);
      assertEquals(0, isNullOp0.paramCount());
      assertEquals("IsNull", isNullOp0.keyword());
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = notNullOp0.render("?{:#ptwTO9l4");
      assertEquals("?{:#ptwTO9l4 not null", string7);
      assertEquals(0, notNullOp0.paramCount());
      assertEquals("NotNull", notNullOp0.keyword());
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      
      boolean boolean1 = isNullOp0.equals(falseOp0);
      assertFalse(boolean1);
      assertEquals(0, falseOp0.paramCount());
      assertEquals("False", falseOp0.keyword());
      assertEquals(0, isNullOp0.paramCount());
      assertEquals("IsNull", isNullOp0.keyword());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = falseOp0.equals("`JA;@, not null");
      assertFalse(boolean2);
      assertEquals(0, falseOp0.paramCount());
      assertEquals("False", falseOp0.keyword());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string8 = falseOp0.toString();
      assertEquals("False", string8);
      assertEquals(0, falseOp0.paramCount());
      assertEquals("False", falseOp0.keyword());
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      
      String string9 = isNullOp0.render("null = false");
      assertEquals("null = false is null", string9);
      assertEquals(0, isNullOp0.paramCount());
      assertEquals("IsNull", isNullOp0.keyword());
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      
      String string10 = notNullOp0.render("null = false not null");
      assertEquals("null = false not null not null", string10);
      assertEquals(0, notNullOp0.paramCount());
      assertEquals("NotNull", notNullOp0.keyword());
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      
      String string11 = isNullOp0.render("params can't be null");
      assertEquals("params can't be null is null", string11);
      assertEquals(0, isNullOp0.paramCount());
      assertEquals("IsNull", isNullOp0.keyword());
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string3));
      
      TrueOp trueOp0 = new TrueOp();
      assertEquals("True", trueOp0.keyword());
      assertEquals(0, trueOp0.paramCount());
      assertNotNull(trueOp0);
      
      String string12 = trueOp0.render("", stringArray0);
      assertEquals(" = true", string12);
      assertEquals("True", trueOp0.keyword());
      assertEquals(0, trueOp0.paramCount());
      assertNotNull(string12);
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      
      String string13 = trueOp0.render("=ZGZF4r|/k");
      assertEquals("=ZGZF4r|/k = true", string13);
      assertEquals("True", trueOp0.keyword());
      assertEquals(0, trueOp0.paramCount());
      assertNotNull(string13);
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string6));
      
      String string14 = trueOp0.render("Cn?+jD&R@dyQ`");
      assertEquals("True", trueOp0.keyword());
      assertEquals(0, trueOp0.paramCount());
      assertNotNull(string14);
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string0));
      
      String string15 = trueOp0.render(" = true");
      assertEquals(" = true = true", string15);
      assertEquals("True", trueOp0.keyword());
      assertEquals(0, trueOp0.paramCount());
      assertNotNull(string15);
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string12));
      
      String string16 = falseOp0.render("");
      assertEquals(" = false", string16);
      assertEquals(0, falseOp0.paramCount());
      assertEquals("False", falseOp0.keyword());
      assertNotNull(string16);
      assertFalse(string16.equals((Object)string10));
      assertFalse(string16.equals((Object)string9));
      assertFalse(string16.equals((Object)string0));
      assertFalse(string16.equals((Object)string11));
      assertFalse(string16.equals((Object)string13));
      assertFalse(string16.equals((Object)string12));
      assertFalse(string16.equals((Object)string15));
      assertFalse(string16.equals((Object)string4));
      assertFalse(string16.equals((Object)string7));
      assertFalse(string16.equals((Object)string1));
      assertFalse(string16.equals((Object)string14));
      assertFalse(string16.equals((Object)string6));
      assertFalse(string16.equals((Object)string2));
      assertFalse(string16.equals((Object)string3));
      assertFalse(string16.equals((Object)string5));
      assertFalse(string16.equals((Object)string8));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FalseOp falseOp0 = new FalseOp();
      assertEquals(0, falseOp0.paramCount());
      assertEquals("False", falseOp0.keyword());
      assertNotNull(falseOp0);
      
      String string0 = "Mp{q$e;y#1,CPc&wQ00";
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        falseOp0.render("Mp{q$e;y#1,CPc&wQ00", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // params can't be null
         //
         verifyException("org.jfaster.mango.crud.named.parser.op.Param0Op", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IsNullOp isNullOp0 = new IsNullOp();
      assertEquals("IsNull", isNullOp0.keyword());
      assertEquals(0, isNullOp0.paramCount());
      assertNotNull(isNullOp0);
      
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        isNullOp0.render("zM58*cx w|wZgYt W", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length of params expected 0, but 1
         //
         verifyException("org.jfaster.mango.crud.named.parser.op.Param0Op", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NotNullOp notNullOp0 = new NotNullOp();
      assertEquals("NotNull", notNullOp0.keyword());
      assertEquals(0, notNullOp0.paramCount());
      assertNotNull(notNullOp0);
      
      FalseOp falseOp0 = new FalseOp();
      assertEquals(0, falseOp0.paramCount());
      assertEquals("False", falseOp0.keyword());
      assertNotNull(falseOp0);
      
      String string0 = notNullOp0.render("NotNull");
      assertEquals("NotNull not null", string0);
      assertEquals("NotNull", notNullOp0.keyword());
      assertEquals(0, notNullOp0.paramCount());
      assertNotNull(string0);
      
      String string1 = "gdGN8EvmkQ";
      String string2 = falseOp0.render("gdGN8EvmkQ");
      assertEquals("gdGN8EvmkQ = false", string2);
      assertEquals(0, falseOp0.paramCount());
      assertEquals("False", falseOp0.keyword());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = falseOp0.keyword();
      assertEquals("False", string3);
      assertEquals(0, falseOp0.paramCount());
      assertEquals("False", falseOp0.keyword());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = notNullOp0.paramCount();
      assertEquals(0, int0);
      assertEquals("NotNull", notNullOp0.keyword());
      assertEquals(0, notNullOp0.paramCount());
      
      TrueOp trueOp0 = new TrueOp();
      assertEquals("True", trueOp0.keyword());
      assertEquals(0, trueOp0.paramCount());
      assertNotNull(trueOp0);
      
      String string4 = trueOp0.render("False");
      assertEquals("False = true", string4);
      assertEquals("True", trueOp0.keyword());
      assertEquals(0, trueOp0.paramCount());
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = notNullOp0.keyword();
      assertEquals("NotNull", string5);
      assertEquals("NotNull", notNullOp0.keyword());
      assertEquals(0, notNullOp0.paramCount());
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = notNullOp0.render("False = true");
      assertEquals("False = true not null", string6);
      assertEquals("NotNull", notNullOp0.keyword());
      assertEquals(0, notNullOp0.paramCount());
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = null;
      String string8 = notNullOp0.render((String) null);
      assertEquals("null not null", string8);
      assertEquals("NotNull", notNullOp0.keyword());
      assertEquals(0, notNullOp0.paramCount());
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      
      String string9 = trueOp0.render("");
      assertEquals(" = true", string9);
      assertEquals("True", trueOp0.keyword());
      assertEquals(0, trueOp0.paramCount());
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      
      String string10 = notNullOp0.render("org.jfaster.mango.crud.named.parser.op.Param0Op");
      assertEquals("org.jfaster.mango.crud.named.parser.op.Param0Op not null", string10);
      assertEquals("NotNull", notNullOp0.keyword());
      assertEquals(0, notNullOp0.paramCount());
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "null not null";
      stringArray0[1] = "gdGN8EvmkQ";
      stringArray0[2] = "NotNull";
      stringArray0[3] = "gdGN8EvmkQ";
      stringArray0[4] = "gdGN8EvmkQ = false";
      stringArray0[5] = "NotNull";
      stringArray0[6] = "";
      stringArray0[7] = "False = true not null";
      // Undeclared exception!
      try { 
        falseOp0.render("", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length of params expected 0, but 8
         //
         verifyException("org.jfaster.mango.crud.named.parser.op.Param0Op", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IsNullOp isNullOp0 = new IsNullOp();
      assertEquals(0, isNullOp0.paramCount());
      assertEquals("IsNull", isNullOp0.keyword());
      assertNotNull(isNullOp0);
      
      int int0 = isNullOp0.paramCount();
      assertEquals(0, int0);
      assertEquals(0, isNullOp0.paramCount());
      assertEquals("IsNull", isNullOp0.keyword());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IsNullOp isNullOp0 = new IsNullOp();
      String[] stringArray0 = new String[0];
      String string0 = isNullOp0.render("zM58*cx w|wZgYt W", stringArray0);
      assertEquals("zM58*cx w|wZgYt W is null", string0);
  }
}
