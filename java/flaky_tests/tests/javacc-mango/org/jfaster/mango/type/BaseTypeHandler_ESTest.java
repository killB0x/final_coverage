/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:53:26 GMT 2022
 */

package org.jfaster.mango.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.sql.Clob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfaster.mango.type.BigDecimalTypeHandler;
import org.jfaster.mango.type.BlobByteObjectArrayTypeHandler;
import org.jfaster.mango.type.DateTypeHandler;
import org.jfaster.mango.type.IntegerTypeHandler;
import org.jfaster.mango.type.NClobTypeHandler;
import org.jfaster.mango.util.jdbc.JdbcType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseTypeHandler_ESTest extends BaseTypeHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NClobTypeHandler nClobTypeHandler0 = new NClobTypeHandler();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      nClobTypeHandler0.setParameter(preparedStatement0, 1502, "");
      assertEquals(JdbcType.NCLOB, nClobTypeHandler0.getJdbcType());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTypeHandler dateTypeHandler0 = new DateTypeHandler();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      dateTypeHandler0.setParameter(preparedStatement0, (-2126), (Date) null);
      assertEquals(JdbcType.TIMESTAMP, dateTypeHandler0.getJdbcType());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NClobTypeHandler nClobTypeHandler0 = new NClobTypeHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Clob) null).when(resultSet0).getClob(anyInt());
      doReturn(false).when(resultSet0).wasNull();
      String string0 = nClobTypeHandler0.getResult(resultSet0, (-3658));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IntegerTypeHandler integerTypeHandler0 = new IntegerTypeHandler();
      JdbcType jdbcType0 = integerTypeHandler0.getJdbcType();
      assertEquals(JdbcType.INTEGER, jdbcType0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IntegerTypeHandler integerTypeHandler0 = new IntegerTypeHandler();
      JdbcType jdbcType0 = JdbcType.TIMESTAMP;
      // Undeclared exception!
      try { 
        integerTypeHandler0.setNonNullParameter((PreparedStatement) null, 0, (Integer) null, jdbcType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.type.IntegerTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BlobByteObjectArrayTypeHandler blobByteObjectArrayTypeHandler0 = new BlobByteObjectArrayTypeHandler();
      // Undeclared exception!
      try { 
        blobByteObjectArrayTypeHandler0.getResult((ResultSet) null, (-1456));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error attempting to get column #-1456 from result set; caused by: null
         //
         verifyException("org.jfaster.mango.type.BaseTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IntegerTypeHandler integerTypeHandler0 = new IntegerTypeHandler();
      // Undeclared exception!
      try { 
        integerTypeHandler0.getNullableResult((ResultSet) null, 448);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.type.IntegerTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NClobTypeHandler nClobTypeHandler0 = new NClobTypeHandler();
      Clob clob0 = mock(Clob.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(clob0).getSubString(anyLong() , anyInt());
      doReturn(0L).when(clob0).length();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(clob0).when(resultSet0).getClob(anyInt());
      doReturn(true).when(resultSet0).wasNull();
      String string0 = nClobTypeHandler0.getResult(resultSet0, 1502);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BigDecimalTypeHandler bigDecimalTypeHandler0 = new BigDecimalTypeHandler();
      // Undeclared exception!
      try { 
        bigDecimalTypeHandler0.setParameter((PreparedStatement) null, 1, (BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.type.BaseTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BigDecimalTypeHandler bigDecimalTypeHandler0 = new BigDecimalTypeHandler();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        bigDecimalTypeHandler0.setParameter((PreparedStatement) null, (-32), bigDecimal0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error setting non null for parameter #-32 with JdbcType DECIMAL, try setting a different JdbcType for this parameter; caused by: null
         //
         verifyException("org.jfaster.mango.type.BaseTypeHandler", e);
      }
  }
}
