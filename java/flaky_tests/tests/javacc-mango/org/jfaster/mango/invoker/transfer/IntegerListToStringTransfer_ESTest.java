/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:09:17 GMT 2022
 */

package org.jfaster.mango.invoker.transfer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Type;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.invoker.transfer.IntegerListToStringTransfer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntegerListToStringTransfer_ESTest extends IntegerListToStringTransfer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IntegerListToStringTransfer integerListToStringTransfer0 = new IntegerListToStringTransfer();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      // Undeclared exception!
      try { 
        integerListToStringTransfer0.propertyToColumn((List<Integer>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.Joiner", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IntegerListToStringTransfer integerListToStringTransfer0 = new IntegerListToStringTransfer();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        integerListToStringTransfer0.columnToProperty("NOU-z#BR", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"NOU-z#BR\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IntegerListToStringTransfer integerListToStringTransfer0 = new IntegerListToStringTransfer();
      Class<Integer> class0 = Integer.TYPE;
      List<Integer> list0 = integerListToStringTransfer0.columnToProperty("", (Type) class0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IntegerListToStringTransfer integerListToStringTransfer0 = new IntegerListToStringTransfer();
      Class<Integer> class0 = Integer.TYPE;
      List<Integer> list0 = integerListToStringTransfer0.columnToProperty((String) null, (Type) class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IntegerListToStringTransfer integerListToStringTransfer0 = new IntegerListToStringTransfer();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = integerListToStringTransfer0.propertyToColumn((List<Integer>) linkedList0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IntegerListToStringTransfer integerListToStringTransfer0 = new IntegerListToStringTransfer();
      String string0 = integerListToStringTransfer0.propertyToColumn((List<Integer>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IntegerListToStringTransfer integerListToStringTransfer0 = new IntegerListToStringTransfer();
      Class<Integer> class0 = Integer.TYPE;
      List<Integer> list0 = integerListToStringTransfer0.columnToProperty("0", (Type) class0);
      String string0 = integerListToStringTransfer0.propertyToColumn(list0);
      assertNotNull(string0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }
}
