/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:40:37 GMT 2022
 */

package org.jfaster.mango.invoker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.invoker.TransferablePropertyInvoker;
import org.jfaster.mango.util.bean.PropertyMeta;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TransferablePropertyInvoker_ESTest extends TransferablePropertyInvoker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      PropertyMeta propertyMeta0 = new PropertyMeta("", (Type) null, (Method) null, (Method) null, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      // Undeclared exception!
      try { 
        TransferablePropertyInvoker.create(propertyMeta0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.invoker.TransferablePropertyInvoker", e);
      }
  }
}
