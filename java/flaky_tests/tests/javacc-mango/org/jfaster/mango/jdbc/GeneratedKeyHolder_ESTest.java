/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:57:30 GMT 2022
 */

package org.jfaster.mango.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.jdbc.GeneratedKeyHolder;
import org.jfaster.mango.type.IntegerTypeHandler;
import org.jfaster.mango.type.TypeHandler;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GeneratedKeyHolder_ESTest extends GeneratedKeyHolder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IntegerTypeHandler integerTypeHandler0 = new IntegerTypeHandler();
      GeneratedKeyHolder generatedKeyHolder0 = new GeneratedKeyHolder(integerTypeHandler0);
      TypeHandler<? extends Number> typeHandler0 = generatedKeyHolder0.getTypeHandler();
      assertSame(integerTypeHandler0, typeHandler0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IntegerTypeHandler integerTypeHandler0 = new IntegerTypeHandler();
      GeneratedKeyHolder generatedKeyHolder0 = new GeneratedKeyHolder(integerTypeHandler0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      generatedKeyHolder0.setKey(bigDecimal0);
      Number number0 = generatedKeyHolder0.getKey();
      assertEquals((byte)1, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IntegerTypeHandler integerTypeHandler0 = new IntegerTypeHandler();
      GeneratedKeyHolder generatedKeyHolder0 = new GeneratedKeyHolder(integerTypeHandler0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      generatedKeyHolder0.setKey(bigDecimal0);
      Number number0 = generatedKeyHolder0.getKey();
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GeneratedKeyHolder generatedKeyHolder0 = new GeneratedKeyHolder((TypeHandler<? extends Number>) null);
      BigDecimal bigDecimal0 = new BigDecimal((-1972L));
      generatedKeyHolder0.setKey(bigDecimal0);
      Number number0 = generatedKeyHolder0.getKey();
      assertEquals((byte)76, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GeneratedKeyHolder generatedKeyHolder0 = new GeneratedKeyHolder((TypeHandler<? extends Number>) null);
      Number number0 = generatedKeyHolder0.getKey();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GeneratedKeyHolder generatedKeyHolder0 = new GeneratedKeyHolder((TypeHandler<? extends Number>) null);
      TypeHandler<? extends Number> typeHandler0 = generatedKeyHolder0.getTypeHandler();
      assertNull(typeHandler0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GeneratedKeyHolder generatedKeyHolder0 = new GeneratedKeyHolder((TypeHandler<? extends Number>) null);
      BigDecimal bigDecimal0 = new BigDecimal((-5951.36775282));
      generatedKeyHolder0.setKey(bigDecimal0);
      Number number0 = generatedKeyHolder0.getKey();
      assertEquals((byte) (-63), number0.byteValue());
  }
}
