/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 12:43:01 GMT 2022
 */

package org.jfaster.mango.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.SQLException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.jdbc.SQLStateSQLExceptionTranslator;
import org.jfaster.mango.jdbc.exception.DataAccessException;
import org.jfaster.mango.jdbc.exception.UncategorizedSQLException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SQLStateSQLExceptionTranslator_ESTest extends SQLStateSQLExceptionTranslator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      // Undeclared exception!
      try { 
        sQLStateSQLExceptionTranslator0.doTranslate("", (SQLException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.jdbc.SQLStateSQLExceptionTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      SQLException sQLException0 = new SQLException("JW", "JW", (Throwable) null);
      SQLException sQLException1 = new SQLException((Throwable) null);
      sQLException1.setNextException(sQLException0);
      DataAccessException dataAccessException0 = sQLStateSQLExceptionTranslator0.translate("57", sQLException1);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      SQLException sQLException0 = new SQLException("61", "61");
      DataAccessException dataAccessException0 = sQLStateSQLExceptionTranslator0.translate("61", sQLException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      SQLException sQLException0 = new SQLException("JW", "JW", (Throwable) null);
      DataAccessException dataAccessException0 = sQLStateSQLExceptionTranslator0.doTranslate("57", sQLException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      SQLException sQLException0 = new SQLException("57", "57");
      DataAccessException dataAccessException0 = sQLStateSQLExceptionTranslator0.translate("57", sQLException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      SQLException sQLException0 = new SQLException("01", "01");
      DataAccessException dataAccessException0 = sQLStateSQLExceptionTranslator0.doTranslate("01", sQLException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      SQLException sQLException0 = new SQLException("27", "21");
      DataAccessException dataAccessException0 = sQLStateSQLExceptionTranslator0.doTranslate("iFK+E7", sQLException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      SQLException sQLException0 = new SQLException("g", "g");
      DataAccessException dataAccessException0 = sQLStateSQLExceptionTranslator0.doTranslate("g", sQLException0);
      assertNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      SQLException sQLException0 = new SQLException("vO7e)-ZmpVe=", "k/^]kAA:eZ");
      UncategorizedSQLException uncategorizedSQLException0 = (UncategorizedSQLException)sQLStateSQLExceptionTranslator0.translate("27", sQLException0);
      assertEquals("27", uncategorizedSQLException0.getSql());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      SQLException sQLException0 = new SQLException("vO7e)-ZmpVe=", "k/^]kAA:eZ");
      SQLException sQLException1 = new SQLException("k/^]kAA:eZ", sQLException0);
      UncategorizedSQLException uncategorizedSQLException0 = (UncategorizedSQLException)sQLStateSQLExceptionTranslator0.translate((String) null, sQLException1);
      assertNull(uncategorizedSQLException0.getSql());
  }
}
