/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:33:43 GMT 2022
 */

package org.jfaster.mango.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.jdbc.SQLErrorCodes;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SQLErrorCodes_ESTest extends SQLErrorCodes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.Derby;
      boolean boolean0 = sQLErrorCodes0.isUseSqlStateForTranslation();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.Derby;
      String[] stringArray0 = sQLErrorCodes0.getTransientDataAccessResourceCodes();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.Oracle;
      String[] stringArray0 = sQLErrorCodes0.getPermissionDeniedCodes();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.HSQL;
      String[] stringArray0 = sQLErrorCodes0.getPermissionDeniedCodes();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLErrorCodes.values();
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.PostgreSQL;
      sQLErrorCodes0.setBadSqlGrammarCodes((String[]) null);
      sQLErrorCodes0.getDatabaseProductName();
      sQLErrorCodes0.setUseSqlStateForTranslation(false);
      String[] stringArray0 = sQLErrorCodes0.getTransientDataAccessResourceCodes();
      String[] stringArray1 = sQLErrorCodes0.getDatabaseProductNames();
      sQLErrorCodes0.setDatabaseProductNames(stringArray0);
      sQLErrorCodes0.getInvalidResultSetAccessCodes();
      sQLErrorCodes0.getDuplicateKeyCodes();
      sQLErrorCodes0.getInvalidResultSetAccessCodes();
      String[] stringArray2 = new String[8];
      stringArray2[0] = "Sybase";
      stringArray2[1] = "Sybase";
      stringArray2[2] = "Sybase";
      stringArray2[3] = "";
      stringArray2[4] = "Sybase";
      stringArray2[5] = "Sybase";
      stringArray2[6] = "Sybase";
      sQLErrorCodes0.setDeadlockLoserCodes(stringArray1);
      stringArray2[7] = "Sybase";
      sQLErrorCodes0.setCannotSerializeTransactionCodes(stringArray2);
      sQLErrorCodes0.getCannotSerializeTransactionCodes();
      sQLErrorCodes0.getCannotSerializeTransactionCodes();
      sQLErrorCodes0.setUseSqlStateForTranslation(false);
      sQLErrorCodes0.getCannotAcquireLockCodes();
      SQLErrorCodes sQLErrorCodes1 = SQLErrorCodes.valueOf("Sybase");
      sQLErrorCodes1.setBadSqlGrammarCodes((String[]) null);
      SQLErrorCodes.values();
      sQLErrorCodes1.getInvalidResultSetAccessCodes();
      sQLErrorCodes0.getDuplicateKeyCodes();
      sQLErrorCodes1.getPermissionDeniedCodes();
      // Undeclared exception!
      try { 
        SQLErrorCodes.valueOf("bVN_Z|}?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jfaster.mango.jdbc.SQLErrorCodes.bVN_Z|}?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.MSSQL;
      String[] stringArray0 = sQLErrorCodes0.getInvalidResultSetAccessCodes();
      sQLErrorCodes0.setDuplicateKeyCodes(stringArray0);
      sQLErrorCodes0.getDatabaseProductName();
      String string0 = sQLErrorCodes0.getDatabaseProductName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.Oracle;
      String[] stringArray0 = sQLErrorCodes0.getDataIntegrityViolationCodes();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.Sybase;
      String[] stringArray0 = sQLErrorCodes0.getDataAccessResourceFailureCodes();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.PostgreSQL;
      String[] stringArray0 = sQLErrorCodes0.getBadSqlGrammarCodes();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.MSSQL;
      String[] stringArray0 = new String[0];
      sQLErrorCodes0.setDataIntegrityViolationCodes(stringArray0);
      String string0 = sQLErrorCodes0.getDatabaseProductName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.Informix;
      String[] stringArray0 = new String[4];
      sQLErrorCodes0.setTransientDataAccessResourceCodes(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.EMPTY;
      String[] stringArray0 = sQLErrorCodes0.getDeadlockLoserCodes();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.Oracle;
      boolean boolean0 = sQLErrorCodes0.isUseSqlStateForTranslation();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.EMPTY;
      String[] stringArray0 = new String[4];
      sQLErrorCodes0.setCannotAcquireLockCodes(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.Derby;
      String[] stringArray0 = new String[3];
      sQLErrorCodes0.setPermissionDeniedCodes(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.EMPTY;
      String[] stringArray0 = new String[3];
      sQLErrorCodes0.setInvalidResultSetAccessCodes(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.Hana;
      String[] stringArray0 = sQLErrorCodes0.getBadSqlGrammarCodes();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.EMPTY;
      String[] stringArray0 = sQLErrorCodes0.getDuplicateKeyCodes();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.EMPTY;
      String[] stringArray0 = new String[4];
      sQLErrorCodes0.setDataAccessResourceFailureCodes(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.EMPTY;
      String[] stringArray0 = sQLErrorCodes0.getDataAccessResourceFailureCodes();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.EMPTY;
      String[] stringArray0 = sQLErrorCodes0.getDataIntegrityViolationCodes();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLErrorCodes sQLErrorCodes0 = SQLErrorCodes.EMPTY;
      sQLErrorCodes0.setDatabaseProductName(";W'eG5 vH|86");
  }
}
