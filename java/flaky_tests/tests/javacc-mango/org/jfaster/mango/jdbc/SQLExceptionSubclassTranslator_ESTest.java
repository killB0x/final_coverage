/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:04:50 GMT 2022
 */

package org.jfaster.mango.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.jdbc.SQLExceptionSubclassTranslator;
import org.jfaster.mango.jdbc.exception.DataAccessException;
import org.jfaster.mango.jdbc.exception.UncategorizedSQLException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SQLExceptionSubclassTranslator_ESTest extends SQLExceptionSubclassTranslator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLExceptionSubclassTranslator sQLExceptionSubclassTranslator0 = new SQLExceptionSubclassTranslator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      DataAccessException dataAccessException0 = sQLExceptionSubclassTranslator0.doTranslate("_$T+6v!\"i0rBykT{H;U", sQLRecoverableException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLExceptionSubclassTranslator sQLExceptionSubclassTranslator0 = new SQLExceptionSubclassTranslator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("f$=4W708`r]0wJu");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("f$=4W708`r]0wJu", "=y7{JAb04Pi[+4*C", sQLNonTransientException0);
      DataAccessException dataAccessException0 = sQLExceptionSubclassTranslator0.doTranslate("f$=4W708`r]0wJu", sQLSyntaxErrorException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLExceptionSubclassTranslator sQLExceptionSubclassTranslator0 = new SQLExceptionSubclassTranslator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      DataAccessException dataAccessException0 = sQLExceptionSubclassTranslator0.doTranslate("qVqK", sQLNonTransientConnectionException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLExceptionSubclassTranslator sQLExceptionSubclassTranslator0 = new SQLExceptionSubclassTranslator();
      SQLDataException sQLDataException0 = new SQLDataException("1c/_9K!Y");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("_bRTkj$nSt{b", "1c/_9K!Y", 0, sQLDataException0);
      DataAccessException dataAccessException0 = sQLExceptionSubclassTranslator0.doTranslate("_bRTkj$nSt{b", sQLInvalidAuthorizationSpecException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLExceptionSubclassTranslator sQLExceptionSubclassTranslator0 = new SQLExceptionSubclassTranslator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("zOEvlTZS", "JZ;#?fz-,eqOe:g");
      DataAccessException dataAccessException0 = sQLExceptionSubclassTranslator0.translate("sJ}", sQLIntegrityConstraintViolationException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLExceptionSubclassTranslator sQLExceptionSubclassTranslator0 = new SQLExceptionSubclassTranslator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.jfaster.mango.jdbc.SQLExceptionSubclassTranslator");
      DataAccessException dataAccessException0 = sQLExceptionSubclassTranslator0.doTranslate("", sQLFeatureNotSupportedException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLExceptionSubclassTranslator sQLExceptionSubclassTranslator0 = new SQLExceptionSubclassTranslator();
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      DataAccessException dataAccessException0 = sQLExceptionSubclassTranslator0.doTranslate("}0iC#a;Tsh", sQLDataException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLExceptionSubclassTranslator sQLExceptionSubclassTranslator0 = new SQLExceptionSubclassTranslator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("f$=4W708`r]0wJu");
      UncategorizedSQLException uncategorizedSQLException0 = (UncategorizedSQLException)sQLExceptionSubclassTranslator0.translate("", sQLNonTransientException0);
      assertEquals("", uncategorizedSQLException0.getSql());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLExceptionSubclassTranslator sQLExceptionSubclassTranslator0 = new SQLExceptionSubclassTranslator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("f$=4W708`r]0wJu");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("f$=4W708`r]0wJu", "f$=4W708`r]0wJu", 1, sQLNonTransientException0);
      DataAccessException dataAccessException0 = sQLExceptionSubclassTranslator0.doTranslate("org.jfaster.mango.jdbc.exception.PessimisticLockingFailureException", sQLTimeoutException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLExceptionSubclassTranslator sQLExceptionSubclassTranslator0 = new SQLExceptionSubclassTranslator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 0, sQLNonTransientException0);
      DataAccessException dataAccessException0 = sQLExceptionSubclassTranslator0.doTranslate("", sQLTransientConnectionException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLExceptionSubclassTranslator sQLExceptionSubclassTranslator0 = new SQLExceptionSubclassTranslator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("uvFTM", "uncategorized SQLException for SQL [", 4);
      DataAccessException dataAccessException0 = sQLExceptionSubclassTranslator0.doTranslate("7BE^UcXwv*Iqnu@Nar", sQLTransactionRollbackException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLExceptionSubclassTranslator sQLExceptionSubclassTranslator0 = new SQLExceptionSubclassTranslator();
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null);
      DataAccessException dataAccessException0 = sQLExceptionSubclassTranslator0.doTranslate((String) null, sQLTransientException0);
      assertNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLExceptionSubclassTranslator sQLExceptionSubclassTranslator0 = new SQLExceptionSubclassTranslator();
      DataAccessException dataAccessException0 = sQLExceptionSubclassTranslator0.doTranslate("42", (SQLException) null);
      assertNull(dataAccessException0);
  }
}
