/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:30:46 GMT 2022
 */

package org.jfaster.mango.binding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Type;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfaster.mango.binding.BindingParameter;
import org.jfaster.mango.binding.TransferableBindingParameterInvoker;
import org.jfaster.mango.util.jdbc.JdbcType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TransferableBindingParameterInvoker_ESTest extends TransferableBindingParameterInvoker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      JdbcType jdbcType0 = JdbcType.FLOAT;
      BindingParameter bindingParameter0 = BindingParameter.create("", "", jdbcType0);
      TransferableBindingParameterInvoker transferableBindingParameterInvoker0 = TransferableBindingParameterInvoker.create(type0, bindingParameter0);
      Object object0 = transferableBindingParameterInvoker0.invoke((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(type0).toString();
      JdbcType jdbcType0 = JdbcType.DISTINCT;
      BindingParameter bindingParameter0 = BindingParameter.create("org.jfaster.mango.binding.TransferableBindingParameterInvoker", (String) null, jdbcType0);
      TransferableBindingParameterInvoker transferableBindingParameterInvoker0 = TransferableBindingParameterInvoker.create(type0, bindingParameter0);
      Type type1 = transferableBindingParameterInvoker0.getTargetType();
      assertSame(type1, type0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransferableBindingParameterInvoker.create((Type) null, (BindingParameter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.binding.TransferableBindingParameterInvoker", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JdbcType jdbcType0 = JdbcType.BINARY;
      BindingParameter bindingParameter0 = new BindingParameter("' can't be readable", "' can't be readable", jdbcType0);
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(type0).toString();
      // Undeclared exception!
      try { 
        TransferableBindingParameterInvoker.create(type0, bindingParameter0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Unknown type: null
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JdbcType jdbcType0 = JdbcType.NCHAR;
      BindingParameter bindingParameter0 = BindingParameter.create("", "", jdbcType0);
      TransferableBindingParameterInvoker transferableBindingParameterInvoker0 = TransferableBindingParameterInvoker.create((Type) null, bindingParameter0);
      Object object0 = new Object();
      Object object1 = transferableBindingParameterInvoker0.invoke(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JdbcType jdbcType0 = JdbcType.ARRAY;
      BindingParameter bindingParameter0 = BindingParameter.create("){;#Ad#nhCbwIxO7", "){;#Ad#nhCbwIxO7", jdbcType0);
      // Undeclared exception!
      try { 
        TransferableBindingParameterInvoker.create((Type) null, bindingParameter0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JdbcType jdbcType0 = JdbcType.NCHAR;
      BindingParameter bindingParameter0 = BindingParameter.create("", "", jdbcType0);
      TransferableBindingParameterInvoker transferableBindingParameterInvoker0 = TransferableBindingParameterInvoker.create((Type) null, bindingParameter0);
      BindingParameter bindingParameter1 = transferableBindingParameterInvoker0.getBindingParameter();
      assertEquals(JdbcType.NCHAR, bindingParameter1.getJdbcType());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JdbcType jdbcType0 = JdbcType.NCHAR;
      BindingParameter bindingParameter0 = BindingParameter.create("", "", jdbcType0);
      TransferableBindingParameterInvoker transferableBindingParameterInvoker0 = TransferableBindingParameterInvoker.create((Type) null, bindingParameter0);
      Type type0 = transferableBindingParameterInvoker0.getTargetType();
      assertNull(type0);
  }
}
