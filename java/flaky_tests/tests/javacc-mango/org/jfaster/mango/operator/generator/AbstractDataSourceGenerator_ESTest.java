/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:41:53 GMT 2022
 */

package org.jfaster.mango.operator.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Type;
import java.util.LinkedList;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.binding.BindingParameter;
import org.jfaster.mango.binding.BindingParameterInvoker;
import org.jfaster.mango.binding.DefaultInvocationContext;
import org.jfaster.mango.binding.InvocationContext;
import org.jfaster.mango.binding.TransferableBindingParameterInvoker;
import org.jfaster.mango.datasource.DataSourceFactory;
import org.jfaster.mango.datasource.DataSourceFactoryGroup;
import org.jfaster.mango.datasource.DataSourceType;
import org.jfaster.mango.datasource.DriverManagerDataSource;
import org.jfaster.mango.datasource.MasterSlaveDataSourceFactory;
import org.jfaster.mango.datasource.SimpleDataSourceFactory;
import org.jfaster.mango.operator.generator.ShardedDataSourceGenerator;
import org.jfaster.mango.operator.generator.SimpleDataSourceGenerator;
import org.jfaster.mango.sharding.NotUseDatabaseShardingStrategy;
import org.jfaster.mango.sharding.NotUseShardingStrategy;
import org.jfaster.mango.util.jdbc.JdbcType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractDataSourceGenerator_ESTest extends AbstractDataSourceGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataSourceFactoryGroup dataSourceFactoryGroup0 = new DataSourceFactoryGroup();
      DataSourceType dataSourceType0 = DataSourceType.SLAVE;
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      SimpleDataSourceGenerator simpleDataSourceGenerator0 = new SimpleDataSourceGenerator(dataSourceFactoryGroup0, dataSourceType0, (String) null);
      String string0 = simpleDataSourceGenerator0.getDataSourceFactoryName(defaultInvocationContext0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataSourceType dataSourceType0 = DataSourceType.MASTER;
      SimpleDataSourceGenerator simpleDataSourceGenerator0 = new SimpleDataSourceGenerator((DataSourceFactoryGroup) null, dataSourceType0, "]n+.$'t7#QI^w^");
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      String string0 = simpleDataSourceGenerator0.getDataSourceFactoryName(defaultInvocationContext0);
      assertEquals("]n+.$'t7#QI^w^", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataSourceFactoryGroup dataSourceFactoryGroup0 = new DataSourceFactoryGroup();
      DataSourceType dataSourceType0 = DataSourceType.SLAVE;
      SimpleDataSourceGenerator simpleDataSourceGenerator0 = new SimpleDataSourceGenerator(dataSourceFactoryGroup0, dataSourceType0, "");
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      String string0 = simpleDataSourceGenerator0.getDataSourceFactoryName(defaultInvocationContext0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataSourceFactoryGroup dataSourceFactoryGroup0 = new DataSourceFactoryGroup();
      DataSourceType dataSourceType0 = DataSourceType.MASTER;
      SimpleDataSourceGenerator simpleDataSourceGenerator0 = new SimpleDataSourceGenerator(dataSourceFactoryGroup0, dataSourceType0, "*+Nj7g");
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource();
      SimpleDataSourceFactory simpleDataSourceFactory0 = new SimpleDataSourceFactory("*+Nj7g", driverManagerDataSource0);
      dataSourceFactoryGroup0.addDataSourceFactory(simpleDataSourceFactory0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      Class<Object> class0 = Object.class;
      DriverManagerDataSource driverManagerDataSource1 = (DriverManagerDataSource)simpleDataSourceGenerator0.getDataSource(defaultInvocationContext0, class0);
      assertNull(driverManagerDataSource1.getUrl());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataSourceFactoryGroup dataSourceFactoryGroup0 = new DataSourceFactoryGroup();
      DataSourceType dataSourceType0 = DataSourceType.MASTER;
      JdbcType jdbcType0 = JdbcType.BOOLEAN;
      BindingParameter bindingParameter0 = BindingParameter.create("", "", jdbcType0);
      TransferableBindingParameterInvoker transferableBindingParameterInvoker0 = TransferableBindingParameterInvoker.create((Type) null, bindingParameter0);
      NotUseShardingStrategy notUseShardingStrategy0 = new NotUseShardingStrategy();
      ShardedDataSourceGenerator shardedDataSourceGenerator0 = new ShardedDataSourceGenerator(dataSourceFactoryGroup0, dataSourceType0, transferableBindingParameterInvoker0, notUseShardingStrategy0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        shardedDataSourceGenerator0.getDataSourceFactoryName(defaultInvocationContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Parameter ':' not found, available root parameters are []
         //
         verifyException("org.jfaster.mango.binding.DefaultInvocationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataSourceFactoryGroup dataSourceFactoryGroup0 = new DataSourceFactoryGroup();
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      Class<Object> class0 = Object.class;
      DataSourceType dataSourceType0 = DataSourceType.SLAVE;
      JdbcType jdbcType0 = JdbcType.ROWID;
      BindingParameter bindingParameter0 = new BindingParameter("org.jfaster.mango.operator.gnerator.AbstractDataSourceGenerator", "", jdbcType0);
      TransferableBindingParameterInvoker transferableBindingParameterInvoker0 = TransferableBindingParameterInvoker.create(class0, bindingParameter0);
      Object object0 = new Object();
      defaultInvocationContext0.setBindingValue(transferableBindingParameterInvoker0, object0);
      NotUseDatabaseShardingStrategy notUseDatabaseShardingStrategy0 = new NotUseDatabaseShardingStrategy();
      ShardedDataSourceGenerator shardedDataSourceGenerator0 = new ShardedDataSourceGenerator(dataSourceFactoryGroup0, dataSourceType0, transferableBindingParameterInvoker0, notUseDatabaseShardingStrategy0);
      // Undeclared exception!
      try { 
        shardedDataSourceGenerator0.getDataSourceFactoryName(defaultInvocationContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error, unreachable code
         //
         verifyException("org.jfaster.mango.sharding.NotUseDatabaseShardingStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataSourceType dataSourceType0 = DataSourceType.SLAVE;
      NotUseShardingStrategy notUseShardingStrategy0 = new NotUseShardingStrategy();
      ShardedDataSourceGenerator shardedDataSourceGenerator0 = new ShardedDataSourceGenerator((DataSourceFactoryGroup) null, dataSourceType0, (BindingParameterInvoker) null, notUseShardingStrategy0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        shardedDataSourceGenerator0.getDataSourceFactoryName(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.binding.DefaultInvocationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataSourceFactoryGroup dataSourceFactoryGroup0 = new DataSourceFactoryGroup();
      DataSourceType dataSourceType0 = DataSourceType.SLAVE;
      Class<Integer> class0 = Integer.TYPE;
      JdbcType jdbcType0 = JdbcType.TIME;
      BindingParameter bindingParameter0 = new BindingParameter("", "", jdbcType0);
      TransferableBindingParameterInvoker transferableBindingParameterInvoker0 = TransferableBindingParameterInvoker.create(class0, bindingParameter0);
      NotUseDatabaseShardingStrategy notUseDatabaseShardingStrategy0 = new NotUseDatabaseShardingStrategy();
      ShardedDataSourceGenerator shardedDataSourceGenerator0 = new ShardedDataSourceGenerator(dataSourceFactoryGroup0, dataSourceType0, transferableBindingParameterInvoker0, notUseDatabaseShardingStrategy0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        shardedDataSourceGenerator0.getDataSource(defaultInvocationContext0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Parameter ':' not found, available root parameters are []
         //
         verifyException("org.jfaster.mango.binding.DefaultInvocationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataSourceFactoryGroup dataSourceFactoryGroup0 = new DataSourceFactoryGroup();
      DataSourceType dataSourceType0 = DataSourceType.SLAVE;
      Class<Integer> class0 = Integer.TYPE;
      JdbcType jdbcType0 = JdbcType.TIME;
      BindingParameter bindingParameter0 = new BindingParameter("", "", jdbcType0);
      TransferableBindingParameterInvoker transferableBindingParameterInvoker0 = TransferableBindingParameterInvoker.create(class0, bindingParameter0);
      NotUseDatabaseShardingStrategy notUseDatabaseShardingStrategy0 = new NotUseDatabaseShardingStrategy();
      ShardedDataSourceGenerator shardedDataSourceGenerator0 = new ShardedDataSourceGenerator(dataSourceFactoryGroup0, dataSourceType0, transferableBindingParameterInvoker0, notUseDatabaseShardingStrategy0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      defaultInvocationContext0.setBindingValue(transferableBindingParameterInvoker0, transferableBindingParameterInvoker0);
      // Undeclared exception!
      try { 
        shardedDataSourceGenerator0.getDataSource(defaultInvocationContext0, class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error, unreachable code
         //
         verifyException("org.jfaster.mango.sharding.NotUseDatabaseShardingStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<DataSourceFactory> linkedList0 = new LinkedList<DataSourceFactory>();
      DataSourceFactoryGroup dataSourceFactoryGroup0 = new DataSourceFactoryGroup(linkedList0);
      DataSourceType dataSourceType0 = DataSourceType.MASTER;
      SimpleDataSourceGenerator simpleDataSourceGenerator0 = new SimpleDataSourceGenerator(dataSourceFactoryGroup0, dataSourceType0, "");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        simpleDataSourceGenerator0.getDataSource((InvocationContext) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not find the datasource factory by name [], available names is []
         //
         verifyException("org.jfaster.mango.datasource.DataSourceFactoryGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataSourceFactoryGroup dataSourceFactoryGroup0 = new DataSourceFactoryGroup();
      DataSourceType dataSourceType0 = DataSourceType.SLAVE;
      SimpleDataSourceGenerator simpleDataSourceGenerator0 = new SimpleDataSourceGenerator(dataSourceFactoryGroup0, dataSourceType0, "");
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      LinkedList<DataSource> linkedList0 = new LinkedList<DataSource>();
      MasterSlaveDataSourceFactory masterSlaveDataSourceFactory0 = new MasterSlaveDataSourceFactory("", (DataSource) null, linkedList0);
      dataSourceFactoryGroup0.addDataSourceFactory(masterSlaveDataSourceFactory0);
      Class<ShardedDataSourceGenerator> class0 = ShardedDataSourceGenerator.class;
      // Undeclared exception!
      try { 
        simpleDataSourceGenerator0.getDataSource(defaultInvocationContext0, class0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataSourceFactoryGroup dataSourceFactoryGroup0 = new DataSourceFactoryGroup();
      DataSourceType dataSourceType0 = DataSourceType.SLAVE;
      SimpleDataSourceGenerator simpleDataSourceGenerator0 = new SimpleDataSourceGenerator(dataSourceFactoryGroup0, dataSourceType0, "");
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      Class<ShardedDataSourceGenerator> class0 = ShardedDataSourceGenerator.class;
      // Undeclared exception!
      try { 
        simpleDataSourceGenerator0.getDataSource(defaultInvocationContext0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.datasource.DataSourceFactoryGroup", e);
      }
  }
}
