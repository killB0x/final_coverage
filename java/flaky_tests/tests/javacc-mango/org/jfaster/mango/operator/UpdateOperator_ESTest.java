/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:38:09 GMT 2022
 */

package org.jfaster.mango.operator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.descriptor.MethodDescriptor;
import org.jfaster.mango.descriptor.ParameterDescriptor;
import org.jfaster.mango.descriptor.ReturnDescriptor;
import org.jfaster.mango.operator.Config;
import org.jfaster.mango.operator.UpdateOperator;
import org.jfaster.mango.parser.ASTRootNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UpdateOperator_ESTest extends UpdateOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UpdateOperator.BooleanTransformer updateOperator_BooleanTransformer0 = UpdateOperator.BooleanTransformer.INSTANCE;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = updateOperator_BooleanTransformer0.transform(bigDecimal0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      UpdateOperator.BooleanTransformer updateOperator_BooleanTransformer0 = UpdateOperator.BooleanTransformer.INSTANCE;
      Object object0 = updateOperator_BooleanTransformer0.transform(bigInteger0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UpdateOperator.BooleanTransformer updateOperator_BooleanTransformer0 = UpdateOperator.BooleanTransformer.INSTANCE;
      BigDecimal bigDecimal0 = new BigDecimal((-1743));
      Object object0 = updateOperator_BooleanTransformer0.transform(bigDecimal0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UpdateOperator.IntegerTransformer updateOperator_IntegerTransformer0 = UpdateOperator.IntegerTransformer.INSTANCE;
      Class<? extends Number> class0 = updateOperator_IntegerTransformer0.getRawType();
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UpdateOperator.IntegerTransformer updateOperator_IntegerTransformer0 = UpdateOperator.IntegerTransformer.INSTANCE;
      // Undeclared exception!
      try { 
        updateOperator_IntegerTransformer0.transform((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.operator.UpdateOperator$IntegerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UpdateOperator.LongTransformer updateOperator_LongTransformer0 = UpdateOperator.LongTransformer.INSTANCE;
      BigInteger bigInteger0 = BigInteger.ONE;
      Long long0 = (Long)updateOperator_LongTransformer0.transform(bigInteger0);
      UpdateOperator.VoidTransformer updateOperator_VoidTransformer0 = UpdateOperator.VoidTransformer.INSTANCE;
      Object object0 = updateOperator_VoidTransformer0.transform(long0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UpdateOperator.LongTransformer updateOperator_LongTransformer0 = UpdateOperator.LongTransformer.INSTANCE;
      Class<? extends Number> class0 = updateOperator_LongTransformer0.getRawType();
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("toOD5G", class0, returnDescriptor0, linkedList1);
      Config config0 = new Config();
      UpdateOperator updateOperator0 = null;
      try {
        updateOperator0 = new UpdateOperator((ASTRootNode) null, methodDescriptor0, config0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.operator.UpdateOperator", e);
      }
  }
}
