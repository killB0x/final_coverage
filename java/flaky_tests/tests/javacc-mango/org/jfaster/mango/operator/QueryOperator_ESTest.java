/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 12:49:15 GMT 2022
 */

package org.jfaster.mango.operator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectInputStream;
import java.io.PushbackInputStream;
import java.lang.annotation.Annotation;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.binding.BindingParameter;
import org.jfaster.mango.binding.DefaultInvocationContext;
import org.jfaster.mango.binding.DefaultParameterContext;
import org.jfaster.mango.binding.InvocationContext;
import org.jfaster.mango.binding.InvocationContextFactory;
import org.jfaster.mango.binding.TransferableBindingParameterInvoker;
import org.jfaster.mango.descriptor.MethodDescriptor;
import org.jfaster.mango.descriptor.ParameterDescriptor;
import org.jfaster.mango.descriptor.ReturnDescriptor;
import org.jfaster.mango.jdbc.ArrayListSuppliter;
import org.jfaster.mango.mapper.SingleColumnRowMapper;
import org.jfaster.mango.operator.Config;
import org.jfaster.mango.operator.QueryOperator;
import org.jfaster.mango.operator.generator.ShardedTableGenerator;
import org.jfaster.mango.operator.generator.SimpleTableGenerator;
import org.jfaster.mango.page.InvocationPageHandler;
import org.jfaster.mango.page.OraclePageHandler;
import org.jfaster.mango.parser.ASTRootNode;
import org.jfaster.mango.sharding.NotUseShardingStrategy;
import org.jfaster.mango.util.bean.PropertyMeta;
import org.jfaster.mango.util.jdbc.JdbcType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QueryOperator_ESTest extends QueryOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      OraclePageHandler oraclePageHandler0 = new OraclePageHandler();
      InvocationPageHandler invocationPageHandler0 = new InvocationPageHandler(oraclePageHandler0, linkedList1);
      Config config0 = new Config();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("<PARAMETER>", class0, returnDescriptor0, linkedList1);
      QueryOperator queryOperator0 = new QueryOperator((ASTRootNode) null, methodDescriptor0, invocationPageHandler0, config0);
      DefaultParameterContext defaultParameterContext0 = DefaultParameterContext.create(linkedList1);
      InvocationContextFactory invocationContextFactory0 = InvocationContextFactory.create(defaultParameterContext0);
      queryOperator0.invocationContextFactory = invocationContextFactory0;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        queryOperator0.execute(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.operator.QueryOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<PropertyMeta> class0 = PropertyMeta.class;
      ArrayListSuppliter arrayListSuppliter0 = new ArrayListSuppliter();
      Class<Annotation> class1 = Annotation.class;
      List<Annotation> list0 = arrayListSuppliter0.get(class1);
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, list0);
      LinkedList<ParameterDescriptor> linkedList0 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("pVjcS9(jIj", class0, returnDescriptor0, linkedList0);
      OraclePageHandler oraclePageHandler0 = new OraclePageHandler();
      InvocationPageHandler invocationPageHandler0 = new InvocationPageHandler(oraclePageHandler0, linkedList0);
      Config config0 = new Config();
      QueryOperator queryOperator0 = new QueryOperator((ASTRootNode) null, methodDescriptor0, invocationPageHandler0, config0);
      SimpleTableGenerator simpleTableGenerator0 = new SimpleTableGenerator("pVjcS9(jIj");
      queryOperator0.setTableGenerator(simpleTableGenerator0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        queryOperator0.execute((InvocationContext) defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.operator.QueryOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      Config config0 = new Config();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("p@#dbX(N%8W", class0, returnDescriptor0, linkedList1);
      QueryOperator queryOperator0 = new QueryOperator((ASTRootNode) null, methodDescriptor0, (InvocationPageHandler) null, config0);
      Object[] objectArray0 = new Object[4];
      DefaultParameterContext defaultParameterContext0 = DefaultParameterContext.create(linkedList1);
      InvocationContextFactory invocationContextFactory0 = InvocationContextFactory.create(defaultParameterContext0);
      queryOperator0.setInvocationContextFactory(invocationContextFactory0);
      // Undeclared exception!
      try { 
        queryOperator0.execute(objectArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // parameter name can not be found by position [0]
         //
         verifyException("org.jfaster.mango.binding.DefaultParameterContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      OraclePageHandler oraclePageHandler0 = new OraclePageHandler();
      InvocationPageHandler invocationPageHandler0 = new InvocationPageHandler(oraclePageHandler0, linkedList1);
      Config config0 = new Config();
      Class<Annotation> class0 = Annotation.class;
      SingleColumnRowMapper<Annotation> singleColumnRowMapper0 = new SingleColumnRowMapper<Annotation>(class0);
      Class<Annotation> class1 = singleColumnRowMapper0.getMappedClass();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class1, linkedList0);
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("ORR", class0, returnDescriptor0, linkedList1);
      QueryOperator queryOperator0 = null;
      try {
        queryOperator0 = new QueryOperator((ASTRootNode) null, methodDescriptor0, invocationPageHandler0, config0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // caused by: null
         //
         verifyException("org.jfaster.mango.util.bean.BeanUtil$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      OraclePageHandler oraclePageHandler0 = new OraclePageHandler();
      InvocationPageHandler invocationPageHandler0 = new InvocationPageHandler(oraclePageHandler0, linkedList1);
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("@9xFX0-[9'/ykO#VZ", class0, returnDescriptor0, linkedList1);
      QueryOperator queryOperator0 = null;
      try {
        queryOperator0 = new QueryOperator((ASTRootNode) null, methodDescriptor0, invocationPageHandler0, (Config) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.operator.AbstractOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      OraclePageHandler oraclePageHandler0 = new OraclePageHandler();
      InvocationPageHandler invocationPageHandler0 = new InvocationPageHandler(oraclePageHandler0, linkedList1);
      Config config0 = new Config();
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("", class0, returnDescriptor0, linkedList1);
      QueryOperator queryOperator0 = new QueryOperator((ASTRootNode) null, methodDescriptor0, invocationPageHandler0, config0);
      JdbcType jdbcType0 = JdbcType.TINYINT;
      BindingParameter bindingParameter0 = new BindingParameter("", "", jdbcType0);
      TransferableBindingParameterInvoker transferableBindingParameterInvoker0 = TransferableBindingParameterInvoker.create(class0, bindingParameter0);
      NotUseShardingStrategy notUseShardingStrategy0 = new NotUseShardingStrategy();
      ShardedTableGenerator shardedTableGenerator0 = new ShardedTableGenerator("", transferableBindingParameterInvoker0, notUseShardingStrategy0);
      queryOperator0.setTableGenerator(shardedTableGenerator0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        queryOperator0.execute((InvocationContext) defaultInvocationContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Parameter ':' not found, available root parameters are []
         //
         verifyException("org.jfaster.mango.binding.DefaultInvocationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Character> class0 = Character.TYPE;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      OraclePageHandler oraclePageHandler0 = new OraclePageHandler();
      InvocationPageHandler invocationPageHandler0 = new InvocationPageHandler(oraclePageHandler0, linkedList1);
      Config config0 = new Config();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create(";", class0, returnDescriptor0, linkedList1);
      QueryOperator queryOperator0 = new QueryOperator((ASTRootNode) null, methodDescriptor0, invocationPageHandler0, config0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      OraclePageHandler oraclePageHandler0 = new OraclePageHandler();
      InvocationPageHandler invocationPageHandler0 = new InvocationPageHandler(oraclePageHandler0, linkedList1);
      Config config0 = new Config();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("<PARAMETER>", class0, returnDescriptor0, linkedList1);
      QueryOperator queryOperator0 = new QueryOperator((ASTRootNode) null, methodDescriptor0, invocationPageHandler0, config0);
      Object object0 = queryOperator0.EmptyObject();
      assertNull(object0);
  }
}
