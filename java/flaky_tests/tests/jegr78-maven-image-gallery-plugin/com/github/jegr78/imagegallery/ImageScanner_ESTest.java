/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 03:05:11 GMT 2022
 */

package com.github.jegr78.imagegallery;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.jegr78.imagegallery.ImageScanner;
import java.io.File;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ImageScanner_ESTest extends ImageScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ImageScanner imageScanner0 = new ImageScanner(mockFile0);
      Collection<File> collection0 = imageScanner0.listImageFiles(mockFile0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      ImageScanner imageScanner0 = new ImageScanner(mockFile1);
      String string0 = imageScanner0.getImageDirRelativePath(mockFile1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ImageScanner imageScanner0 = new ImageScanner(mockFile0);
      // Undeclared exception!
      try { 
        imageScanner0.listImageFiles((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jegr78.imagegallery.ImageScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ImageScanner imageScanner0 = new ImageScanner(mockFile0);
      // Undeclared exception!
      try { 
        imageScanner0.getImageDirRelativePath(mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jegr78.imagegallery.ImageScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ImageScanner imageScanner0 = null;
      try {
        imageScanner0 = new ImageScanner((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dir may not be null
         //
         verifyException("com.github.jegr78.imagegallery.ImageOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'4@t_~*p");
      MockFile.createTempFile("'4@t_~*p", "'4@t_~*p", (File) mockFile0);
      ImageScanner imageScanner0 = new ImageScanner(mockFile0);
      // Undeclared exception!
      try { 
        imageScanner0.scan();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jegr78.imagegallery.ImageScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ImageScanner imageScanner0 = new ImageScanner(mockFile0);
      MockFile mockFile1 = new MockFile(": ", "");
      String string0 = imageScanner0.getImageDirRelativePath(mockFile1);
      assertEquals("home/user/: ", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ImageScanner imageScanner0 = new ImageScanner(mockFile0);
      Map<String, List<File>> map0 = imageScanner0.scan();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'4@t_~*p", "'4@t_~*p");
      MockFile.createTempFile("'4@t_~*p", "'4@t_~*p", (File) mockFile0);
      ImageScanner imageScanner0 = new ImageScanner(mockFile0);
      Map<String, List<File>> map0 = imageScanner0.scan();
      assertTrue(map0.isEmpty());
  }
}
