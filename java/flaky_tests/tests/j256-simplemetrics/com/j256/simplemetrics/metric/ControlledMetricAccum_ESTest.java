/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 27 18:18:57 GMT 2022
 */

package com.j256.simplemetrics.metric;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplemetrics.metric.ControlledMetric;
import com.j256.simplemetrics.metric.ControlledMetricAccum;
import com.j256.simplemetrics.metric.MetricValueDetails;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ControlledMetricAccum_ESTest extends ControlledMetricAccum_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("w0", "w0", "w0", "w0", "w0");
      ControlledMetricAccum.AccumValue controlledMetricAccum_AccumValue0 = controlledMetricAccum0.createInitialValue();
      Long long0 = controlledMetricAccum0.makeValueFromLong(2147483647L);
      ControlledMetricAccum.AccumValue controlledMetricAccum_AccumValue1 = controlledMetricAccum_AccumValue0.makeAdjusted(long0);
      int int0 = controlledMetricAccum_AccumValue1.getNumSamples();
      assertEquals(0, controlledMetricAccum_AccumValue0.getNumSamples());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("com.j256.simplemetrics.metric.ControlledMetricAccum$AccumValue", "com.j256.simplemetrics.metric.ControlledMetricAccum$AccumValue", "com.j256.simplemetrics.metric.ControlledMetricAccum$AccumValue", ".Ckw<N]#UV>,:lu", "");
      controlledMetricAccum0.add((-1290L));
      MetricValueDetails metricValueDetails0 = controlledMetricAccum0.getValueDetails();
      assertEquals(0, metricValueDetails0.getNumSamples());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("5% l?gK>'#O-Z'", "5% l?gK>'#O-Z'", "5% l?gK>'#O-Z'", "5% l?gK>'#O-Z'", "");
      ControlledMetricAccum.AccumValue controlledMetricAccum_AccumValue0 = controlledMetricAccum0.createInitialValue();
      ControlledMetricAccum.AccumValue controlledMetricAccum_AccumValue1 = controlledMetricAccum_AccumValue0.makePersisted();
      assertEquals(0, controlledMetricAccum_AccumValue1.getNumSamples());
      assertEquals(0, controlledMetricAccum_AccumValue0.getNumSamples());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("com.j256.simplemetrics.metric.ControlledMetricAccum$AccumValue", "com.j256.simplemetrics.metric.ControlledMetricAccum$AccumValue", "com.j256.simplemetrics.metric.ControlledMetricAccum$AccumValue", ".Ckw<N]#UV>,:lu", "");
      ControlledMetricAccum.AccumValue controlledMetricAccum_AccumValue0 = controlledMetricAccum0.createInitialValue();
      Number number0 = controlledMetricAccum_AccumValue0.getValue();
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ControlledMetricAccum.AccumValue controlledMetricAccum_AccumValue0 = ControlledMetricAccum.AccumValue.createInitialValue();
      int int0 = controlledMetricAccum_AccumValue0.getNumSamples();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ControlledMetricAccum.AccumValue controlledMetricAccum_AccumValue0 = ControlledMetricAccum.AccumValue.createInitialValue();
      Number number0 = controlledMetricAccum_AccumValue0.getMin();
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("\"@rp", "\"@rp", ":U0sY,)=7f_", ":U0sY,)=7f_", "\"@rp");
      Long long0 = new Long(0L);
      Long long1 = controlledMetricAccum0.makeValueFromNumber(long0);
      assertTrue(long1.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("XQc", "xGcZs(\"BUl1JqR~FX(", "xGcZs(\"BUl1JqR~FX(", "XQc", "XQc");
      Long long0 = new Long(2516L);
      Long long1 = controlledMetricAccum0.makeValueFromNumber(long0);
      assertTrue(long1.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Long long0 = Long.valueOf((-1L));
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("d]3@UJsq9}TFkSgt0", "ZghE?Nz@eq~i9d[pn", "GZ5", "d]3@UJsq9}TFkSgt0", (String) null);
      Long long1 = controlledMetricAccum0.makeValueFromNumber(long0);
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("\"@rp", "\"@rp", ":U0sY,)=7f_", ":U0sY,)=7f_", "\"@rp");
      Long long0 = controlledMetricAccum0.makeValueFromLong(0L);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("com.j256.simplemetrics.metric.ControlledMetricAccum$AccumValue", "com.j256.simplemetrics.metric.ControlledMetricAccum$AccumValue", "com.j256.simplemetrics.metric.ControlledMetricAccum$AccumValue", ".Ckw<N]#UV>,:lu", "");
      Long long0 = controlledMetricAccum0.makeValueFromLong((-753L));
      assertEquals((-753L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("yQc", "yQc", "yQc", "", "yQc");
      controlledMetricAccum0.adjustValue((-1L));
      long long0 = controlledMetricAccum0.increment();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("u6?", "36@)]-A`un*V;", "e7,<SrsJ", "36@)]-A`un*V;", "e7,<SrsJ");
      Long long0 = new Long((-36L));
      controlledMetricAccum0.adjustValue((Number) long0);
      long long1 = controlledMetricAccum0.increment();
      assertEquals((-35L), long1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("com.j256.simplemetrics.metric.ControlledMetricAccum$AccumValue", "com.j256.simplemetrics.metric.ControlledMetricAccum$AccumValue", "com.j256.simplemetrics.metric.ControlledMetricAccum$AccumValue", ".Ckw<N]#UV>,:lu", "");
      Long long0 = new Long((-753L));
      ControlledMetricAccum.AccumValue controlledMetricAccum_AccumValue0 = controlledMetricAccum0.storeValue(long0);
      assertEquals((-753), controlledMetricAccum_AccumValue0.getNumSamples());
      
      MetricValueDetails metricValueDetails0 = controlledMetricAccum0.getValueDetailsToPersist();
      assertEquals((-753), metricValueDetails0.getNumSamples());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("com.j256.simplemetrics.metric.ControlledMetricAccum$AccumValue", "com.j256.simplemetrics.metric.ControlledMetricAccum$AccumValue", "com.j256.simplemetrics.metric.ControlledMetricAccum$AccumValue", ".Ckw<N]#UV>,:lu", "");
      Long long0 = new Long((-753L));
      controlledMetricAccum0.storeValue(long0);
      MetricValueDetails metricValueDetails0 = controlledMetricAccum0.getValueDetails();
      assertEquals((-753), metricValueDetails0.getNumSamples());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("\"@rp", "\"@rp", ":U0sY,)=7f_", ":U0sY,)=7f_", "\"@rp");
      long long0 = controlledMetricAccum0.add(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("yQc", "yQc", "yQc", "", "yQc");
      long long0 = controlledMetricAccum0.add(1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = null;
      try {
        controlledMetricAccum0 = new ControlledMetricAccum((String) null, "w0", "w0", "w0", "w0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Component cannot be null
         //
         verifyException("com.j256.simplemetrics.metric.BaseControlledMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = null;
      try {
        controlledMetricAccum0 = new ControlledMetricAccum("", "", "", "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name cannot be an empty or blank string
         //
         verifyException("com.j256.simplemetrics.metric.BaseControlledMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("w0", "w0", "w0", "w0", "w0");
      ControlledMetricAccum.AccumValue controlledMetricAccum_AccumValue0 = controlledMetricAccum0.createInitialValue();
      Long long0 = controlledMetricAccum0.makeValueFromLong(2147483647L);
      ControlledMetricAccum.AccumValue controlledMetricAccum_AccumValue1 = controlledMetricAccum_AccumValue0.makeAdjusted(long0);
      ControlledMetricAccum.AccumValue controlledMetricAccum_AccumValue2 = controlledMetricAccum_AccumValue1.makeAdjusted(long0);
      assertEquals(Integer.MAX_VALUE, controlledMetricAccum_AccumValue2.getNumSamples());
      assertEquals(0, controlledMetricAccum_AccumValue0.getNumSamples());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ControlledMetricAccum.AccumValue controlledMetricAccum_AccumValue0 = ControlledMetricAccum.AccumValue.createInitialValue();
      Number number0 = controlledMetricAccum_AccumValue0.getMax();
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("#z<^!w+=Y,#qtC", "#z<^!w+=Y,#qtC", "#z<^!w+=Y,#qtC", "#z<^!w+=Y,#qtC", "#z<^!w+=Y,#qtC");
      Long long0 = new Long(2147483648L);
      controlledMetricAccum0.storeValue(long0);
      controlledMetricAccum0.adjustValue(2147483648L);
      MetricValueDetails metricValueDetails0 = controlledMetricAccum0.getValueDetails();
      assertEquals(Integer.MAX_VALUE, metricValueDetails0.getNumSamples());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("@w_0", "@w_0", "@w_0", "@w_0", "@w_0");
      controlledMetricAccum0.increment();
      MetricValueDetails metricValueDetails0 = controlledMetricAccum0.getValueDetailsToPersist();
      assertEquals(1, metricValueDetails0.getNumSamples());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("w0", "w0", "w0", "w0", "w0");
      Number number0 = controlledMetricAccum0.getValue();
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("\";B}AHy3<", "\";B}AHy3<", "\";B}AHy3<", "\";B}AHy3<", "\";B}AHy3<");
      Number number0 = controlledMetricAccum0.getValueToPersist();
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("w0", "w0", "w0", "w0", "w0");
      MetricValueDetails metricValueDetails0 = controlledMetricAccum0.getValueDetailsToPersist();
      assertEquals(0, metricValueDetails0.getNumSamples());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("oY'\"}tiPIyi[@/", "oY'\"}tiPIyi[@/", "oY'\"}tiPIyi[@/", "oY'\"}tiPIyi[@/", "oY'\"}tiPIyi[@/");
      // Undeclared exception!
      try { 
        controlledMetricAccum0.adjustValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.metric.ControlledMetricAccum", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("\";BAHy3<", "\";BAHy3<", "\";BAHy3<", "\";BAHy3<", "\";BAHy3<");
      // Undeclared exception!
      try { 
        controlledMetricAccum0.makeValueFromNumber((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.metric.ControlledMetricAccum", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("w0", "w0", "w0", "w0", "w0");
      ControlledMetric.AggregationType controlledMetric_AggregationType0 = controlledMetricAccum0.getAggregationType();
      assertEquals(ControlledMetric.AggregationType.SUM, controlledMetric_AggregationType0);
  }
}
