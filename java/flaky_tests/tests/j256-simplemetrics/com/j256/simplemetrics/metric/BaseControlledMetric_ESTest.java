/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 27 18:09:16 GMT 2022
 */

package com.j256.simplemetrics.metric;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplemetrics.metric.ControlledMetricAccum;
import com.j256.simplemetrics.metric.ControlledMetricRatio;
import com.j256.simplemetrics.metric.ControlledMetricTimer;
import com.j256.simplemetrics.metric.ControlledMetricValue;
import com.j256.simplemetrics.metric.MetricValueDetails;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseControlledMetric_ESTest extends BaseControlledMetric_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ControlledMetricTimer controlledMetricTimer0 = new ControlledMetricTimer("w", "w", "w", "w");
      Double double0 = new Double((-1950.04477805674));
      ControlledMetricValue.ValueCount controlledMetricValue_ValueCount0 = controlledMetricTimer0.storeValue(double0);
      assertEquals(1, controlledMetricValue_ValueCount0.getNumSamples());
      
      Number number0 = controlledMetricTimer0.getValueToPersist();
      assertEquals((-1950.04477805674), number0);
      assertEquals("w", controlledMetricTimer0.getName());
      assertEquals("w", controlledMetricTimer0.getComponent());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ControlledMetricTimer controlledMetricTimer0 = new ControlledMetricTimer("^#_`NxisE0B", "com.j256.simplemetrics.metric.BaseControlledMetric", "com.j256.simplemetrics.metric.BaseControlledMetric", "com.j256.simplemetrics.metric.BaseControlledMetric");
      controlledMetricTimer0.getValue();
      assertEquals("^#_`NxisE0B", controlledMetricTimer0.getComponent());
      assertEquals("com.j256.simplemetrics.metric.BaseControlledMetric", controlledMetricTimer0.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ControlledMetricTimer controlledMetricTimer0 = new ControlledMetricTimer("w", "w", "w", "w");
      controlledMetricTimer0.adjustValue((-2412L));
      assertEquals("w", controlledMetricTimer0.getName());
      assertEquals("w", controlledMetricTimer0.getComponent());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("Pc!gKqin yng/6471da", "']/!5R$.", "ol+", "MetricValueDetails [value=", "']/!5R$.");
      Long long0 = new Long(0L);
      controlledMetricAccum0.storeValue(long0);
      assertEquals("Pc!gKqin yng/6471da", controlledMetricAccum0.getComponent());
      assertEquals("ol+", controlledMetricAccum0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ControlledMetricTimer controlledMetricTimer0 = new ControlledMetricTimer("w", "w", "w", "w");
      controlledMetricTimer0.stop((-1212L));
      MetricValueDetails metricValueDetails0 = controlledMetricTimer0.getValueDetailsToPersist();
      assertEquals("w", controlledMetricTimer0.getComponent());
      assertEquals(1, metricValueDetails0.getNumSamples());
      assertEquals("w", controlledMetricTimer0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ControlledMetricValue controlledMetricValue0 = new ControlledMetricValue("+RuZ", "Name cannot be an empty or blank string", "+RuZ", "+RuZ", "F}X`c[JgWeuyX=|__q(");
      controlledMetricValue0.getValueDetails();
      assertEquals("+RuZ", controlledMetricValue0.getComponent());
      assertEquals("+RuZ", controlledMetricValue0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ControlledMetricTimer controlledMetricTimer0 = new ControlledMetricTimer("w", "w", "w", "w");
      Double double0 = new Double((-1950.04477805674));
      ControlledMetricValue.ValueCount controlledMetricValue_ValueCount0 = controlledMetricTimer0.storeValue(double0);
      assertEquals(1, controlledMetricValue_ValueCount0.getNumSamples());
      
      MetricValueDetails metricValueDetails0 = controlledMetricTimer0.getValueDetails();
      assertEquals("w", controlledMetricTimer0.getComponent());
      assertEquals("w", controlledMetricTimer0.getName());
      assertEquals(1, metricValueDetails0.getNumSamples());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ControlledMetricRatio controlledMetricRatio0 = new ControlledMetricRatio("~5Y", "~5Y", "~5Y", "~5Y", "~5Y");
      ControlledMetricRatio.RatioValue controlledMetricRatio_RatioValue0 = controlledMetricRatio0.getMetricValue(false);
      assertEquals(0, controlledMetricRatio_RatioValue0.getNumSamples());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("Component cannot be null", "Component cannot be null", "Component cannot be null", "Component cannot be null", "");
      Float float0 = Float.valueOf(0.0F);
      Long long0 = controlledMetricAccum0.makeValueFromNumber(float0);
      ControlledMetricValue controlledMetricValue0 = new ControlledMetricValue("+RuZ", "Name cannot be an empty or blank string", "+RuZ", "+RuZ", "F}X`c[JgWeuyX=|__q(");
      controlledMetricValue0.adjustValue((Number) long0);
      ControlledMetricValue.ValueCount controlledMetricValue_ValueCount0 = controlledMetricValue0.getMetricValue(false);
      assertEquals("+RuZ", controlledMetricValue0.getName());
      assertEquals(1, controlledMetricValue_ValueCount0.getNumSamples());
      assertEquals("+RuZ", controlledMetricValue0.getComponent());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = new ControlledMetricAccum("AVERAGE", "AVERAGE", "AVERAGE", "AVERAGE", "AVERAGE");
      Long long0 = new Long((-1815L));
      ControlledMetricAccum.AccumValue controlledMetricAccum_AccumValue0 = controlledMetricAccum0.storeValue(long0);
      assertEquals((-1815), controlledMetricAccum_AccumValue0.getNumSamples());
      
      ControlledMetricAccum.AccumValue controlledMetricAccum_AccumValue1 = controlledMetricAccum0.getMetricValue(true);
      assertNotSame(controlledMetricAccum_AccumValue1, controlledMetricAccum_AccumValue0);
      assertEquals((-1815), controlledMetricAccum_AccumValue1.getNumSamples());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ControlledMetricTimer controlledMetricTimer0 = new ControlledMetricTimer("w", "w", "w", "w");
      // Undeclared exception!
      try { 
        controlledMetricTimer0.storeValue((Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ControlledMetricTimer controlledMetricTimer0 = new ControlledMetricTimer("n", "n", "n", "n");
      Number number0 = controlledMetricTimer0.getValueToPersist();
      assertEquals("n", controlledMetricTimer0.getName());
      assertEquals(0L, number0);
      assertEquals("n", controlledMetricTimer0.getComponent());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ControlledMetricTimer controlledMetricTimer0 = new ControlledMetricTimer("w", "w", "w", "w");
      Double double0 = new Double(1168.5329);
      ControlledMetricValue.ValueCount controlledMetricValue_ValueCount0 = controlledMetricTimer0.storeValue(double0);
      assertEquals(1, controlledMetricValue_ValueCount0.getNumSamples());
      
      Number number0 = controlledMetricTimer0.getValueToPersist();
      assertEquals(1168.5329, number0);
      assertEquals("w", controlledMetricTimer0.getComponent());
      assertEquals("w", controlledMetricTimer0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ControlledMetricTimer controlledMetricTimer0 = new ControlledMetricTimer("Component cannot be an empty or blank string", "", "Component cannot be an empty or blank string", "");
      assertEquals("Component cannot be an empty or blank string", controlledMetricTimer0.getComponent());
      assertEquals("Component cannot be an empty or blank string", controlledMetricTimer0.getName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ControlledMetricTimer controlledMetricTimer0 = null;
      try {
        controlledMetricTimer0 = new ControlledMetricTimer("", "AVERAGE", "AVERAGE", "AVERAGE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Component cannot be an empty or blank string
         //
         verifyException("com.j256.simplemetrics.metric.BaseControlledMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = null;
      try {
        controlledMetricAccum0 = new ControlledMetricAccum((String) null, (String) null, "#uJmgs", (String) null, "#uJmgs");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Component cannot be null
         //
         verifyException("com.j256.simplemetrics.metric.BaseControlledMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ControlledMetricTimer controlledMetricTimer0 = null;
      try {
        controlledMetricTimer0 = new ControlledMetricTimer("", "", "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name cannot be an empty or blank string
         //
         verifyException("com.j256.simplemetrics.metric.BaseControlledMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ControlledMetricAccum controlledMetricAccum0 = null;
      try {
        controlledMetricAccum0 = new ControlledMetricAccum((String) null, (String) null, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name cannot be null
         //
         verifyException("com.j256.simplemetrics.metric.BaseControlledMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ControlledMetricTimer controlledMetricTimer0 = new ControlledMetricTimer("w", "w", "w", "w");
      controlledMetricTimer0.getValueDetailsToPersist();
      assertEquals("w", controlledMetricTimer0.getName());
      assertEquals("w", controlledMetricTimer0.getComponent());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ControlledMetricTimer controlledMetricTimer0 = new ControlledMetricTimer("1", "1", "1", "1");
      // Undeclared exception!
      try { 
        controlledMetricTimer0.adjustValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.metric.ControlledMetricValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ControlledMetricTimer controlledMetricTimer0 = new ControlledMetricTimer("w", "w", "w", "w");
      controlledMetricTimer0.getAggregationTypeName();
      assertEquals("w", controlledMetricTimer0.getComponent());
      assertEquals("w", controlledMetricTimer0.getName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ControlledMetricTimer controlledMetricTimer0 = new ControlledMetricTimer("w", "w", "w", "w");
      String string0 = controlledMetricTimer0.toString();
      assertEquals("w.w.w", string0);
  }
}
