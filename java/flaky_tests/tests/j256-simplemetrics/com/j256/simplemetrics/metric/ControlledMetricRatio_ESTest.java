/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 27 18:22:00 GMT 2022
 */

package com.j256.simplemetrics.metric;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplemetrics.metric.ControlledMetric;
import com.j256.simplemetrics.metric.ControlledMetricRatio;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ControlledMetricRatio_ESTest extends ControlledMetricRatio_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ControlledMetricRatio controlledMetricRatio0 = new ControlledMetricRatio("J=ngp@yn>Hm", "J=ngp@yn>Hm", "J=ngp@yn>Hm", "J=ngp@yn>Hm", "J=ngp@yn>Hm");
      controlledMetricRatio0.adjustValue((-3148L));
      Number number0 = controlledMetricRatio0.getValue();
      assertEquals((-3148.0), number0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ControlledMetricRatio controlledMetricRatio0 = new ControlledMetricRatio("$)", "$)", "$)", "$)", "-(Dr1gJGH4");
      Number number0 = controlledMetricRatio0.getValueToPersist();
      ControlledMetricRatio.NumeratorDenominator controlledMetricRatio_NumeratorDenominator0 = new ControlledMetricRatio.NumeratorDenominator((-461.0), (-461.0));
      controlledMetricRatio0.storeValue(controlledMetricRatio_NumeratorDenominator0);
      Number number1 = controlledMetricRatio0.getValueToPersist();
      controlledMetricRatio0.storeValue(controlledMetricRatio_NumeratorDenominator0);
      controlledMetricRatio0.adjustValue(number0, number1);
      assertEquals("-(Dr1gJGH4", controlledMetricRatio0.getUnit());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ControlledMetricRatio.RatioValue controlledMetricRatio_RatioValue0 = ControlledMetricRatio.RatioValue.createInitialValue();
      ControlledMetricRatio controlledMetricRatio0 = new ControlledMetricRatio("oT?(r:g'~OT", "com.j256.simplemetrics.metric.ControlledMetricRatio$NumeratorDenominator", "com.j256.simplemetrics.metric.ControlledMetricRatio$NumeratorDenominator", "com.j256.simplemetrics.metric.ControlledMetricRatio$NumeratorDenominator", (String) null);
      Number number0 = controlledMetricRatio_RatioValue0.getMin();
      Number number1 = controlledMetricRatio_RatioValue0.getMin();
      assertEquals(0.0, number1);
      
      controlledMetricRatio0.adjustValue(number0, number1);
      assertEquals(0, controlledMetricRatio_RatioValue0.getNumSamples());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ControlledMetricRatio.RatioValue controlledMetricRatio_RatioValue0 = ControlledMetricRatio.RatioValue.createInitialValue();
      Number number0 = controlledMetricRatio_RatioValue0.getValue();
      assertEquals(0, controlledMetricRatio_RatioValue0.getNumSamples());
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ControlledMetricRatio controlledMetricRatio0 = new ControlledMetricRatio("$)", "$)", "$)", "$)", "-(Dr1gJGH4");
      ControlledMetric.AggregationType controlledMetric_AggregationType0 = controlledMetricRatio0.getAggregationType();
      assertEquals(ControlledMetric.AggregationType.AVERAGE, controlledMetric_AggregationType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ControlledMetricRatio controlledMetricRatio0 = new ControlledMetricRatio("3ieyX", "", "z", "DzMurVkzgpN?#;", "z");
      // Undeclared exception!
      try { 
        controlledMetricRatio0.makeValueFromNumber((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.metric.ControlledMetricRatio", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ControlledMetricRatio controlledMetricRatio0 = new ControlledMetricRatio("q8*pm@yEQpW", "q8*pm@yEQpW", "q8*pm@yEQpW", "q8*pm@yEQpW", "q8*pm@yEQpW");
      // Undeclared exception!
      try { 
        controlledMetricRatio0.adjustValue((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.metric.ControlledMetricRatio", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ControlledMetricRatio controlledMetricRatio0 = null;
      try {
        controlledMetricRatio0 = new ControlledMetricRatio((String) null, "q8*pm@yEQpW", (String) null, "q8*pm@yEQpW", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name cannot be null
         //
         verifyException("com.j256.simplemetrics.metric.BaseControlledMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ControlledMetricRatio controlledMetricRatio0 = null;
      try {
        controlledMetricRatio0 = new ControlledMetricRatio("", "", "", "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name cannot be an empty or blank string
         //
         verifyException("com.j256.simplemetrics.metric.BaseControlledMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ControlledMetricRatio controlledMetricRatio0 = new ControlledMetricRatio("$)", "$)", "$)", "$)", "-(Dr1gJGH4");
      Number number0 = controlledMetricRatio0.getValueToPersist();
      ControlledMetricRatio.NumeratorDenominator controlledMetricRatio_NumeratorDenominator0 = controlledMetricRatio0.makeValueFromLong((-112L));
      controlledMetricRatio0.storeValue(controlledMetricRatio_NumeratorDenominator0);
      controlledMetricRatio0.adjustValue(number0, number0);
      assertEquals("$)", controlledMetricRatio0.getComponent());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ControlledMetricRatio controlledMetricRatio0 = new ControlledMetricRatio("$)", "$)", "$)", "$)", "-(Dr1gJGH4");
      Number number0 = controlledMetricRatio0.getValueToPersist();
      ControlledMetricRatio.NumeratorDenominator controlledMetricRatio_NumeratorDenominator0 = new ControlledMetricRatio.NumeratorDenominator((-461.0), (-461.0));
      controlledMetricRatio0.storeValue(controlledMetricRatio_NumeratorDenominator0);
      controlledMetricRatio0.adjustValue(number0, number0);
      controlledMetricRatio0.adjustValue(number0, number0);
      assertEquals("$)", controlledMetricRatio0.getModule());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ControlledMetricRatio controlledMetricRatio0 = new ControlledMetricRatio("$)", "$)", "$)", "$)", "-(Dr1gJGH4");
      ControlledMetricRatio.NumeratorDenominator controlledMetricRatio_NumeratorDenominator0 = new ControlledMetricRatio.NumeratorDenominator((-461.0), (-461.0));
      controlledMetricRatio0.storeValue(controlledMetricRatio_NumeratorDenominator0);
      ControlledMetricRatio.RatioValue controlledMetricRatio_RatioValue0 = controlledMetricRatio0.storeValue(controlledMetricRatio_NumeratorDenominator0);
      assertEquals(2, controlledMetricRatio_RatioValue0.getNumSamples());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ControlledMetricRatio.RatioValue controlledMetricRatio_RatioValue0 = ControlledMetricRatio.RatioValue.createInitialValue();
      ControlledMetricRatio controlledMetricRatio0 = new ControlledMetricRatio("oT?(r:g'~OT", "com.j256.simplemetrics.metric.ControlledMetricRatio$NumeratorDenominator", "com.j256.simplemetrics.metric.ControlledMetricRatio$NumeratorDenominator", "com.j256.simplemetrics.metric.ControlledMetricRatio$NumeratorDenominator", (String) null);
      ControlledMetricRatio.NumeratorDenominator controlledMetricRatio_NumeratorDenominator0 = controlledMetricRatio0.makeValueFromLong((-2309L));
      ControlledMetricRatio.RatioValue controlledMetricRatio_RatioValue1 = controlledMetricRatio_RatioValue0.makeAdjusted(controlledMetricRatio_NumeratorDenominator0);
      assertEquals(0, controlledMetricRatio_RatioValue0.getNumSamples());
      assertEquals(1, controlledMetricRatio_RatioValue1.getNumSamples());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ControlledMetricRatio controlledMetricRatio0 = new ControlledMetricRatio("oT?(r:g'~OT", "com.j256.simplemetrics.metric.ControlledMetricRatio$NumeratorDenominator", "com.j256.simplemetrics.metric.ControlledMetricRatio$NumeratorDenominator", "com.j256.simplemetrics.metric.ControlledMetricRatio$NumeratorDenominator", (String) null);
      Number number0 = controlledMetricRatio0.getValueToPersist();
      ControlledMetricRatio.NumeratorDenominator controlledMetricRatio_NumeratorDenominator0 = controlledMetricRatio0.makeValueFromNumber(number0);
      assertNotNull(controlledMetricRatio_NumeratorDenominator0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ControlledMetricRatio.RatioValue controlledMetricRatio_RatioValue0 = ControlledMetricRatio.RatioValue.createInitialValue();
      ControlledMetricRatio.RatioValue controlledMetricRatio_RatioValue1 = controlledMetricRatio_RatioValue0.makePersisted();
      assertEquals(0, controlledMetricRatio_RatioValue1.getNumSamples());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ControlledMetricRatio.RatioValue controlledMetricRatio_RatioValue0 = ControlledMetricRatio.RatioValue.createInitialValue();
      int int0 = controlledMetricRatio_RatioValue0.getNumSamples();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ControlledMetricRatio controlledMetricRatio0 = new ControlledMetricRatio("3ieyX", "", "z", "DzMurVkzgpN?#;", "z");
      ControlledMetricRatio.RatioValue controlledMetricRatio_RatioValue0 = controlledMetricRatio0.createInitialValue();
      Number number0 = controlledMetricRatio_RatioValue0.getMax();
      assertEquals(0, controlledMetricRatio_RatioValue0.getNumSamples());
      assertEquals(0.0, number0);
  }
}
