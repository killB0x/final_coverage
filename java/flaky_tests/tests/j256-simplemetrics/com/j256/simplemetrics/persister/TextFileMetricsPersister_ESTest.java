/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 27 18:14:16 GMT 2022
 */

package com.j256.simplemetrics.persister;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplemetrics.persister.TextFileMetricsPersister;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TextFileMetricsPersister_ESTest extends TextFileMetricsPersister_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      MockFile mockFile0 = new MockFile("=", "=");
      MockFile.createTempFile("(h'S}w8,yT", "", (File) mockFile0);
      textFileMetricsPersister0.setOutputDirectory(mockFile0);
      textFileMetricsPersister0.setLogFileNamePrefix("");
      System.setCurrentTimeMillis(0L);
      textFileMetricsPersister0.cleanMetricFilesOlderThanMillis(0L);
      assertFalse(textFileMetricsPersister0.isShowDescription());
      assertEquals("", textFileMetricsPersister0.getLogFileNamePrefix());
      assertEquals(0L, textFileMetricsPersister0.getCleanupLogCount());
      assertEquals(0L, textFileMetricsPersister0.getDumpLogCount());
      assertTrue(textFileMetricsPersister0.isAppendSysTimeMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      assertFalse(textFileMetricsPersister0.isShowDescription());
      
      textFileMetricsPersister0.setShowDescription(true);
      boolean boolean0 = textFileMetricsPersister0.isShowDescription();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      MockFile mockFile0 = new MockFile((File) null, "FA3>6");
      textFileMetricsPersister0.setOutputDirectory(mockFile0);
      textFileMetricsPersister0.getOutputDirectory();
      assertEquals(0L, textFileMetricsPersister0.getCleanupLogCount());
      assertTrue(textFileMetricsPersister0.isAppendSysTimeMillis());
      assertEquals(0L, textFileMetricsPersister0.getDumpLogCount());
      assertFalse(textFileMetricsPersister0.isShowDescription());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis((-2736L));
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      MockFile mockFile0 = new MockFile("Can not write to OutputDirectory: ");
      textFileMetricsPersister0.setOutputDirectory(mockFile0);
      textFileMetricsPersister0.getOutputDirectory();
      assertTrue(textFileMetricsPersister0.isAppendSysTimeMillis());
      assertEquals(0L, textFileMetricsPersister0.getDumpLogCount());
      assertFalse(textFileMetricsPersister0.isShowDescription());
      assertEquals(0L, textFileMetricsPersister0.getCleanupLogCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      MockFile mockFile0 = new MockFile("=");
      textFileMetricsPersister0.setOutputDirectory(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("=");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      textFileMetricsPersister0.getOutputDirectory();
      assertTrue(textFileMetricsPersister0.isAppendSysTimeMillis());
      assertEquals(0L, textFileMetricsPersister0.getDumpLogCount());
      assertFalse(textFileMetricsPersister0.isShowDescription());
      assertEquals(0L, textFileMetricsPersister0.getCleanupLogCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      MockFile mockFile0 = new MockFile("=", "=");
      textFileMetricsPersister0.setOutputDirectory(mockFile0);
      mockFile0.setReadable(false, false);
      textFileMetricsPersister0.getOutputDirectory();
      assertFalse(textFileMetricsPersister0.isShowDescription());
      assertEquals(0L, textFileMetricsPersister0.getDumpLogCount());
      assertTrue(textFileMetricsPersister0.isAppendSysTimeMillis());
      assertEquals(0L, textFileMetricsPersister0.getCleanupLogCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      MockFile mockFile0 = new MockFile("=", "=");
      MockFile.createTempFile("(h'S}w8,yT", "(h'S}w8,yT", (File) mockFile0);
      mockFile0.setExecutable(false);
      textFileMetricsPersister0.setOutputDirectory(mockFile0);
      textFileMetricsPersister0.getOutputDirectory();
      assertFalse(textFileMetricsPersister0.isShowDescription());
      assertEquals(0L, textFileMetricsPersister0.getCleanupLogCount());
      assertEquals(0L, textFileMetricsPersister0.getDumpLogCount());
      assertTrue(textFileMetricsPersister0.isAppendSysTimeMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      textFileMetricsPersister0.setLogFileNamePrefix("O");
      String string0 = textFileMetricsPersister0.getLogFileNamePrefix();
      assertEquals(0L, textFileMetricsPersister0.getCleanupLogCount());
      assertTrue(textFileMetricsPersister0.isAppendSysTimeMillis());
      assertEquals("O", string0);
      assertEquals(0L, textFileMetricsPersister0.getDumpLogCount());
      assertFalse(textFileMetricsPersister0.isShowDescription());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      textFileMetricsPersister0.setLogFileNamePrefix("");
      String string0 = textFileMetricsPersister0.getLogFileNamePrefix();
      assertFalse(textFileMetricsPersister0.isShowDescription());
      assertEquals(0L, textFileMetricsPersister0.getCleanupLogCount());
      assertEquals(0L, textFileMetricsPersister0.getDumpLogCount());
      assertEquals("", string0);
      assertTrue(textFileMetricsPersister0.isAppendSysTimeMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      // Undeclared exception!
      try { 
        textFileMetricsPersister0.setOutputDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.persister.TextFileMetricsPersister", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      String string0 = textFileMetricsPersister0.getLastDumpTimeMillisString();
      assertEquals(0L, textFileMetricsPersister0.getCleanupLogCount());
      assertTrue(textFileMetricsPersister0.isAppendSysTimeMillis());
      assertEquals(0L, textFileMetricsPersister0.getDumpLogCount());
      assertEquals("never", string0);
      assertFalse(textFileMetricsPersister0.isShowDescription());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      MockFile mockFile0 = new MockFile("");
      mockFile0.setReadOnly();
      // Undeclared exception!
      try { 
        textFileMetricsPersister0.setOutputDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not write to OutputDirectory: 
         //
         verifyException("com.j256.simplemetrics.persister.TextFileMetricsPersister", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      File file0 = MockFile.createTempFile("never", "never", (File) null);
      // Undeclared exception!
      try { 
        textFileMetricsPersister0.setOutputDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OutputDirectory is not directory: /tmp/never0never
         //
         verifyException("com.j256.simplemetrics.persister.TextFileMetricsPersister", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      MockFile mockFile0 = new MockFile("O");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        textFileMetricsPersister0.setOutputDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OutputDirectory O does not exist
         //
         verifyException("com.j256.simplemetrics.persister.TextFileMetricsPersister", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      MockFile mockFile0 = new MockFile("=");
      File file0 = MockFile.createTempFile("(h'S}w8!Z,yT", "", (File) mockFile0);
      file0.delete();
      MockFile.createTempFile(")ZE?TUZEt6t<>6Ma9", ")ZE?TUZEt6t<>6Ma9", file0);
      textFileMetricsPersister0.setOutputDirectory(mockFile0);
      textFileMetricsPersister0.setLogFileNamePrefix("");
      textFileMetricsPersister0.cleanMetricFilesOlderThanMillis((-2538L));
      assertTrue(textFileMetricsPersister0.isAppendSysTimeMillis());
      assertEquals(0L, textFileMetricsPersister0.getCleanupLogCount());
      assertEquals(0L, textFileMetricsPersister0.getDumpLogCount());
      assertEquals("", textFileMetricsPersister0.getLogFileNamePrefix());
      assertFalse(textFileMetricsPersister0.isShowDescription());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      MockFile mockFile0 = new MockFile("=");
      MockFile.createTempFile("(h'S}w8!Z,yT", "(h'S}w8!Z,yT", (File) mockFile0);
      textFileMetricsPersister0.setOutputDirectory(mockFile0);
      textFileMetricsPersister0.setLogFileNamePrefix("(h'S}w8!Z,yT");
      textFileMetricsPersister0.cleanMetricFilesOlderThanMillis(0L);
      assertTrue(textFileMetricsPersister0.isAppendSysTimeMillis());
      assertEquals(0L, textFileMetricsPersister0.getCleanupLogCount());
      assertEquals(0L, textFileMetricsPersister0.getDumpLogCount());
      assertEquals("(h'S}w8!Z,yT", textFileMetricsPersister0.getLogFileNamePrefix());
      assertFalse(textFileMetricsPersister0.isShowDescription());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      MockFile mockFile0 = new MockFile("=", "=");
      MockFile.createTempFile("(h'S}w8,yT", "", (File) mockFile0);
      textFileMetricsPersister0.setOutputDirectory(mockFile0);
      textFileMetricsPersister0.setLogFileNamePrefix("");
      textFileMetricsPersister0.cleanMetricFilesOlderThanMillis((-28L));
      long long0 = textFileMetricsPersister0.getCleanupLogCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      MockFile mockFile0 = new MockFile("=", "=");
      textFileMetricsPersister0.setOutputDirectory(mockFile0);
      MockFile.createTempFile("(h'S}w8,yT", "(h'S}w8,yT0(h'S}w8,yT0", (File) mockFile0);
      textFileMetricsPersister0.setLogFileNamePrefix(")z");
      textFileMetricsPersister0.cleanMetricFilesOlderThanMillis((-3520L));
      assertTrue(textFileMetricsPersister0.isAppendSysTimeMillis());
      assertEquals(0L, textFileMetricsPersister0.getCleanupLogCount());
      assertEquals(0L, textFileMetricsPersister0.getDumpLogCount());
      assertFalse(textFileMetricsPersister0.isShowDescription());
      assertEquals(")z", textFileMetricsPersister0.getLogFileNamePrefix());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      MockFile mockFile0 = new MockFile("=", "=");
      textFileMetricsPersister0.setOutputDirectory(mockFile0);
      MockFile.createTempFile("(h'S}w8,yT", "(h'S}w8,yT0(h'S}w8,yT0", (File) mockFile0);
      // Undeclared exception!
      try { 
        textFileMetricsPersister0.cleanMetricFilesOlderThanMillis((-3520L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      textFileMetricsPersister0.setSeparatingString("d");
      assertEquals(0L, textFileMetricsPersister0.getCleanupLogCount());
      assertFalse(textFileMetricsPersister0.isShowDescription());
      assertTrue(textFileMetricsPersister0.isAppendSysTimeMillis());
      assertEquals(0L, textFileMetricsPersister0.getDumpLogCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      assertTrue(textFileMetricsPersister0.isAppendSysTimeMillis());
      
      textFileMetricsPersister0.setAppendSysTimeMillis(false);
      boolean boolean0 = textFileMetricsPersister0.isAppendSysTimeMillis();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      long long0 = textFileMetricsPersister0.getDumpLogCount();
      assertEquals(0L, long0);
      assertFalse(textFileMetricsPersister0.isShowDescription());
      assertEquals(0L, textFileMetricsPersister0.getCleanupLogCount());
      assertTrue(textFileMetricsPersister0.isAppendSysTimeMillis());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      boolean boolean0 = textFileMetricsPersister0.isAppendSysTimeMillis();
      assertTrue(boolean0);
      assertEquals(0L, textFileMetricsPersister0.getCleanupLogCount());
      assertFalse(textFileMetricsPersister0.isShowDescription());
      assertEquals(0L, textFileMetricsPersister0.getDumpLogCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      boolean boolean0 = textFileMetricsPersister0.isShowDescription();
      assertEquals(0L, textFileMetricsPersister0.getCleanupLogCount());
      assertEquals(0L, textFileMetricsPersister0.getDumpLogCount());
      assertFalse(boolean0);
      assertTrue(textFileMetricsPersister0.isAppendSysTimeMillis());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      long long0 = textFileMetricsPersister0.getCleanupLogCount();
      assertTrue(textFileMetricsPersister0.isAppendSysTimeMillis());
      assertEquals(0L, textFileMetricsPersister0.getDumpLogCount());
      assertFalse(textFileMetricsPersister0.isShowDescription());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      textFileMetricsPersister0.getOutputDirectory();
      assertEquals(0L, textFileMetricsPersister0.getCleanupLogCount());
      assertTrue(textFileMetricsPersister0.isAppendSysTimeMillis());
      assertFalse(textFileMetricsPersister0.isShowDescription());
      assertEquals(0L, textFileMetricsPersister0.getDumpLogCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextFileMetricsPersister textFileMetricsPersister0 = new TextFileMetricsPersister();
      String string0 = textFileMetricsPersister0.getLogFileNamePrefix();
      assertNull(string0);
      assertTrue(textFileMetricsPersister0.isAppendSysTimeMillis());
      assertEquals(0L, textFileMetricsPersister0.getDumpLogCount());
      assertFalse(textFileMetricsPersister0.isShowDescription());
      assertEquals(0L, textFileMetricsPersister0.getCleanupLogCount());
  }
}
