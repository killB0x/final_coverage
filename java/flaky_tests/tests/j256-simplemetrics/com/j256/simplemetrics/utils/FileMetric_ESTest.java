/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 27 18:07:11 GMT 2022
 */

package com.j256.simplemetrics.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplemetrics.metric.ControlledMetric;
import com.j256.simplemetrics.utils.FileMetric;
import java.io.File;
import java.io.IOException;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileMetric_ESTest extends FileMetric_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@H!");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      FileMetric fileMetric0 = new FileMetric("@H!", "@H!", "@H!", "@H!", mockFile0, fileMetric_FileMetricKind0, (-34), "", "@H!");
      fileMetric0.setAdjustmentValue(1L);
      FileMetric.FileMetricOperation fileMetric_FileMetricOperation0 = FileMetric.FileMetricOperation.DIVIDE;
      fileMetric0.setAdjustmentOperation(fileMetric_FileMetricOperation0);
      fileMetric0.setMetricFile("");
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setKind(fileMetric_FileMetricKind0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(";RGcnWS,7K@^#3=>u");
      FileSystemHandling.createFolder(evoSuiteFile0);
      fileMetric0.setAdjustmentValue(7L);
      FileMetric.FileMetricOperation fileMetric_FileMetricOperation0 = FileMetric.FileMetricOperation.DIVIDE;
      fileMetric0.setAdjustmentOperation(fileMetric_FileMetricOperation0);
      fileMetric0.setMetricFile("");
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setKind(fileMetric_FileMetricKind0);
      FileMetric.FileMetricOperation fileMetric_FileMetricOperation0 = FileMetric.FileMetricOperation.DIVIDE;
      fileMetric0.setAdjustmentOperation(fileMetric_FileMetricOperation0);
      fileMetric0.setAdjustmentValue((-1.0));
      fileMetric0.setMetricFile("");
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&X>]+BFJ *uo(");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      FileMetric fileMetric0 = new FileMetric("&X>]+BFJ *uo(", "&X>]+BFJ *uo(", "&X>]+BFJ *uo(", "&X>]+BFJ *uo(", mockFile0, fileMetric_FileMetricKind0, (-1), "", "&X>]+BFJ *uo(");
      FileMetric.FileMetricOperation fileMetric_FileMetricOperation0 = FileMetric.FileMetricOperation.MULTIPLY;
      fileMetric0.setAdjustmentValue((double) (-1));
      fileMetric0.setAdjustmentOperation(fileMetric_FileMetricOperation0);
      fileMetric0.setMetricFile("");
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.j256.simplemetrics.utils.FileMetric$1", "com.j256.simplemetrics.utils.FileMetric$1");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      FileMetric fileMetric0 = new FileMetric("com.j256.simplemetrics.utils.FileMetric$1", " ", "L{eHZ3SvVp](<", "xrU", mockFile0, fileMetric_FileMetricKind0, (-2315), " ", " ");
      fileMetric0.setKind(fileMetric_FileMetricKind0);
      FileMetric.FileMetricOperation fileMetric_FileMetricOperation0 = FileMetric.FileMetricOperation.MULTIPLY;
      fileMetric0.setAdjustmentOperation(fileMetric_FileMetricOperation0);
      fileMetric0.setAdjustmentValue((double) (-2315));
      fileMetric0.setMetricFile("");
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@H!");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      FileMetric fileMetric0 = new FileMetric("@H!", "@H!", "@H!", "@H!", mockFile0, fileMetric_FileMetricKind0, 12, "", "@H!");
      FileMetric.FileMetricOperation fileMetric_FileMetricOperation0 = FileMetric.FileMetricOperation.SUBTRACT;
      fileMetric0.setAdjustmentValue((-1L));
      fileMetric0.setAdjustmentOperation(fileMetric_FileMetricOperation0);
      fileMetric0.setMetricFile("");
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setKind(fileMetric_FileMetricKind0);
      FileMetric.FileMetricOperation fileMetric_FileMetricOperation0 = FileMetric.FileMetricOperation.SUBTRACT;
      fileMetric0.setAdjustmentOperation(fileMetric_FileMetricOperation0);
      fileMetric0.setMetricFile("");
      fileMetric0.setAdjustmentValue((-578L));
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@H!");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      FileMetric fileMetric0 = new FileMetric("@H!", "@H!", "@H!", "@H!", mockFile0, fileMetric_FileMetricKind0, (-1), "", "@H!");
      FileMetric.FileMetricOperation fileMetric_FileMetricOperation0 = FileMetric.FileMetricOperation.ADD;
      fileMetric0.setAdjustmentOperation(fileMetric_FileMetricOperation0);
      fileMetric0.setAdjustmentValue((double) (-1));
      fileMetric0.setMetricFile("");
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setKind(fileMetric_FileMetricKind0);
      FileMetric.FileMetricOperation fileMetric_FileMetricOperation0 = FileMetric.FileMetricOperation.ADD;
      fileMetric0.setAdjustmentOperation(fileMetric_FileMetricOperation0);
      fileMetric0.setAdjustmentValue((-1843.37830873));
      fileMetric0.setMetricFile("");
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("6>ySm+v");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "6>ySm+v");
      fileMetric0.setMetricFile("6>ySm+v");
      fileMetric0.setLineNumber((-1538));
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 1
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@H!");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      FileMetric fileMetric0 = new FileMetric("@H!", " ", "@H!", "@H!", mockFile0, fileMetric_FileMetricKind0, (-1), "", "@H!");
      fileMetric0.setMetricFile("");
      fileMetric0.initialize();
      fileMetric0.updateValue();
      assertTrue(fileMetric0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setLineSplit("WIU`^");
      assertFalse(fileMetric0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.FILE_ACCUM;
      FileMetric fileMetric0 = new FileMetric("Name cannot be an empty or blank string", "gK.W;9", "", "", mockFile0, fileMetric_FileMetricKind0, 2374, "sx", "");
      String string0 = fileMetric0.toString();
      assertEquals("gK.W;9.Name cannot be an empty or blank string", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.FILE_ACCUM;
      FileMetric fileMetric0 = new FileMetric("com.j256.simplemetrics.metric.ControlledMetricAccum", "com.j256.simplemetrics.metric.ControlledMetricAccum", "com.j256.simplemetrics.metric.ControlledMetricAccum", "", mockFile0, fileMetric_FileMetricKind0, 31, "", "");
      boolean boolean0 = fileMetric0.isInitialized();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@H!");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      FileMetric fileMetric0 = new FileMetric("@H!", " ", "", "", mockFile0, fileMetric_FileMetricKind0, (-1), "", "AVERAGE");
      fileMetric0.setMetricFile("");
      assertFalse(fileMetric0.isInitialized());
      
      fileMetric0.initialize();
      ControlledMetric<?, ?> controlledMetric0 = fileMetric0.getMetric();
      assertEquals("@H!", controlledMetric0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        fileMetric0.setMetricFiles(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      // Undeclared exception!
      try { 
        fileMetric0.setMetricFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      // Undeclared exception!
      try { 
        fileMetric0.setLineSplit("+*xQ");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '+' near index 0
         // +*xQ
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      // Undeclared exception!
      try { 
        fileMetric0.setLinePattern("$Bp*zV,p6f<xZ),");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 12
         // $Bp*zV,p6f<xZ),
         //             ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      // Undeclared exception!
      try { 
        fileMetric0.setLinePattern((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      File file0 = MockFile.createTempFile(" mo)eZthan line pattern column-count ", " mo)eZthan line pattern column-count ");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.FILE_ACCUM_DIFF;
      FileMetric fileMetric0 = null;
      try {
        fileMetric0 = new FileMetric(" mo)eZthan line pattern column-count ", " mo)eZthan line pattern column-count ", " mo)eZthan line pattern column-count ", " mo)eZthan line pattern column-count ", file0, fileMetric_FileMetricKind0, (-2147483646), " mo)eZthan line pattern column-count ", " mo)eZthan line pattern column-count ");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 2
         //  mo)eZthan line pattern column-count 
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      FileMetric fileMetric0 = null;
      try {
        fileMetric0 = new FileMetric((String) null, (String) null, (String) null, (String) null, (File) null, fileMetric_FileMetricKind0, (-1), (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("6>ySm+v");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      fileMetric0.setKind(fileMetric_FileMetricKind0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "6>ySm+v");
      fileMetric0.setMetricFile("6>ySm+v");
      try { 
        fileMetric0.initialize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // metricFile 6>ySm+v is not a directory for class com.j256.simplemetrics.utils.FileMetric name null
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@H!");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.FILE_VALUE;
      FileMetric fileMetric0 = new FileMetric("metric ", "@H!", "", "@H!", mockFile0, fileMetric_FileMetricKind0, (-1), " ", "");
      fileMetric0.setMetricFile("");
      try { 
        fileMetric0.initialize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // metric class com.j256.simplemetrics.utils.FileMetric name metric  did not specify column value
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@H!");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.FILE_VALUE_DIFF;
      FileMetric fileMetric0 = new FileMetric("/*4^ /?H_7~\"|u;", "o!", "EdHvxi|eQMo1?|y>:}", "~U5^i7&4QggM8u`", mockFile0, fileMetric_FileMetricKind0, 2, "Problems reading metric ", "o!");
      fileMetric0.setMetricFile("");
      fileMetric0.initialize();
      assertTrue(fileMetric0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.FILE_ACCUM_DIFF;
      FileMetric fileMetric0 = new FileMetric("E)&fP3lY9R", ">n_<Tv&", "E)&fP3lY9R", "' in metrics ", mockFile0, fileMetric_FileMetricKind0, 9, "", "");
      fileMetric0.initialize();
      assertTrue(fileMetric0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@H!");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.FILE_ACCUM;
      FileMetric fileMetric0 = new FileMetric("@H!", " ", "", "", mockFile0, fileMetric_FileMetricKind0, (-1), "", "o!");
      fileMetric0.setMetricFile("");
      try { 
        fileMetric0.initialize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // metric class com.j256.simplemetrics.utils.FileMetric name @H! did not specify column value
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@H!");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      FileMetric fileMetric0 = new FileMetric("@H!", "@H!", "@H!", "@H!", mockFile0, fileMetric_FileMetricKind0, (-1), "", "@H!");
      FileMetric.FileMetricOperation fileMetric_FileMetricOperation0 = FileMetric.FileMetricOperation.DIVIDE;
      fileMetric0.setAdjustmentOperation(fileMetric_FileMetricOperation0);
      fileMetric0.setAdjustmentValue((long) (-1));
      fileMetric0.setMetricFile("");
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      FileMetric fileMetric0 = new FileMetric();
      String[] stringArray0 = new String[5];
      stringArray0[0] = " did not specify column value";
      stringArray0[1] = "tq$@qDD3_|GS`6$";
      stringArray0[2] = ";RGcnWS,7K@^#3=>u";
      fileMetric0.setKind(fileMetric_FileMetricKind0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(";RGcnWS,7K@^#3=>u");
      FileSystemHandling.createFolder(evoSuiteFile0);
      fileMetric0.setMetricFiles(stringArray0);
      fileMetric0.setAdjustmentValue(7L);
      FileMetric.FileMetricOperation fileMetric_FileMetricOperation0 = FileMetric.FileMetricOperation.DIVIDE;
      fileMetric0.setAdjustmentOperation(fileMetric_FileMetricOperation0);
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@H!");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      FileMetric fileMetric0 = new FileMetric("@H!", " ", "@H!", "@H!", mockFile0, fileMetric_FileMetricKind0, (-1), "", "@H!");
      FileMetric.FileMetricOperation fileMetric_FileMetricOperation0 = FileMetric.FileMetricOperation.DIVIDE;
      fileMetric0.setAdjustmentOperation(fileMetric_FileMetricOperation0);
      fileMetric0.setMetricFile("");
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setKind(fileMetric_FileMetricKind0);
      FileMetric.FileMetricOperation fileMetric_FileMetricOperation0 = FileMetric.FileMetricOperation.MULTIPLY;
      fileMetric0.setAdjustmentOperation(fileMetric_FileMetricOperation0);
      fileMetric0.setMetricFile("");
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@H!");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      FileMetric fileMetric0 = new FileMetric("@H!", " ", "@H!", "@H!", mockFile0, fileMetric_FileMetricKind0, (-1), "", "@H!");
      FileMetric.FileMetricOperation fileMetric_FileMetricOperation0 = FileMetric.FileMetricOperation.MULTIPLY;
      fileMetric0.setAdjustmentOperation(fileMetric_FileMetricOperation0);
      fileMetric0.setMetricFile("");
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("6>ySm+v");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "6>ySm+v");
      fileMetric0.setColumn(0);
      fileMetric0.setMetricFile("6>ySm+v");
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid number '6>ySm+v' in metrics null in file 6>ySm+v column 0
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setColumn(2700);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("6>ySm+v");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "com.j256.simplemetrics.metric.ControlledMetricValue");
      fileMetric0.setLinePattern("com.j256.simplemetrics.metric.ControlledMetricValue");
      fileMetric0.setMetricFile("6>ySm+v");
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Column 2700 more than line pattern column-count 0 in metrics null in file 6>ySm+v
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setColumn(1431655765);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("6>ySm+v");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "6>ySm+v");
      fileMetric0.setMetricFile("6>ySm+v");
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Column 1431655765 more than split size 1 in metrics null in file 6>ySm+v
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("6>ySm+v");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "6>ySm+v");
      fileMetric0.setLinePattern("6>ySm+v");
      fileMetric0.setMetricFile("6>ySm+v");
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No line read for metric null from file 6>ySm+v
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("6>ySm+v");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "j\"'8G66/z,0A");
      fileMetric0.setLinePattern("j\"'8G66/z,0A");
      fileMetric0.setMetricFile("6>ySm+v");
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group -1
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("6>ySm+v");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "6>ySm+v");
      fileMetric0.setPrefix("K>ySm+v");
      fileMetric0.setMetricFile("6>ySm+v");
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Prefix K>ySm+v not found for metric null from file 6>ySm+v
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("6>ySm+v");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "6>ySm+v");
      fileMetric0.setPrefix("6>ySm+v");
      fileMetric0.setMetricFile("6>ySm+v");
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 1
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("6>ySm+v");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "6>ySm+v");
      fileMetric0.setMetricFile("6>ySm+v");
      fileMetric0.setLineNumber(31);
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No line read for metric null from file 6>ySm+v
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("6>ySm+v");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "6>ySm+v");
      fileMetric0.setLineNumber(1);
      fileMetric0.setMetricFile("6>ySm+v");
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 1
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.FILE_ACCUM;
      fileMetric0.setKind(fileMetric_FileMetricKind0);
      assertFalse(fileMetric0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      String[] stringArray0 = new String[5];
      stringArray0[0] = " did not specify column value";
      stringArray0[1] = "tq$@qDD3_|GS`6$";
      stringArray0[2] = ";RGcnWS,7K@^#3=>u";
      stringArray0[3] = "'9>M\u0006tq]rcn@/ j";
      stringArray0[4] = "le0.AAAa*I6d ";
      fileMetric0.setMetricFiles(stringArray0);
      assertFalse(fileMetric0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      FileMetric fileMetric0 = new FileMetric();
      String[] stringArray0 = new String[5];
      stringArray0[0] = " did not specify column value";
      stringArray0[1] = "tq$@qDD3_|GS`6$";
      stringArray0[2] = ";RGcnWS,7K@^#3=>u";
      fileMetric0.setKind(fileMetric_FileMetricKind0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(";RGcnWS,7K@^#3=>u");
      FileSystemHandling.createFolder(evoSuiteFile0);
      fileMetric0.setMetricFiles(stringArray0);
      FileMetric.FileMetricOperation fileMetric_FileMetricOperation0 = FileMetric.FileMetricOperation.DIVIDE;
      fileMetric0.setAdjustmentOperation(fileMetric_FileMetricOperation0);
      // Undeclared exception!
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.DIR;
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setKind(fileMetric_FileMetricKind0);
      fileMetric0.setMetricFile("");
      // Undeclared exception!
      try { 
        fileMetric0.initialize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name cannot be null
         //
         verifyException("com.j256.simplemetrics.metric.BaseControlledMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      File file0 = MockFile.createTempFile("mb]Jv6S>mVg", "mb]Jv6S>mVg");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.FILE_VALUE;
      FileMetric fileMetric0 = null;
      try {
        fileMetric0 = new FileMetric("mb]Jv6S>mVg", "mb]Jv6S>mVg", "mb]Jv6S>mVg", "mb]Jv6S>mVg", file0, fileMetric_FileMetricKind0, (-87), "mb]Jv6S>mVg", "mb]Jv6S>mVg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // metric class com.j256.simplemetrics.utils.FileMetric name mb]Jv6S>mVg did not specify column value
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.j256.simplemetrcs.metric.CntrolledMetric*ccum$AccumValue", "com.j256.simplemetrcs.metric.CntrolledMetric*ccum$AccumValue");
      FileMetric.FileMetricKind fileMetric_FileMetricKind0 = FileMetric.FileMetricKind.FILE_ACCUM;
      FileMetric fileMetric0 = null;
      try {
        fileMetric0 = new FileMetric((String) null, "com.j256.simplemetrcs.metric.CntrolledMetric*ccum$AccumValue", "com.j256.simplemetrcs.metric.CntrolledMetric*ccum$AccumValue", "com.j256.simplemetrcs.metric.CntrolledMetric*ccum$AccumValue", file0, fileMetric_FileMetricKind0, 0, "com.j256.simplemetrcs.metric.CntrolledMetric*ccum$AccumValue", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name cannot be null
         //
         verifyException("com.j256.simplemetrics.metric.BaseControlledMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setMetricFile("");
      try { 
        fileMetric0.initialize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // kind was not specified for class com.j256.simplemetrics.utils.FileMetric name null
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setRequired(true);
      fileMetric0.setMetricFile("com.j256.simplemetrics.utils.MiscUtils");
      try { 
        fileMetric0.initialize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // metricFile com.j256.simplemetrics.utils.MiscUtils does not exist for class com.j256.simplemetrics.utils.FileMetric name null
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setMetricFile("com.j256.simplemetrics.utils.MiscUtils");
      fileMetric0.initialize();
      assertFalse(fileMetric0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.initialize();
      assertFalse(fileMetric0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setMetricComponent((String) null);
      assertFalse(fileMetric0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setMetricFile("6>ySm+v");
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problems reading metric null from file 6>ySm+v
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setDescription("K>yYm+6>ySm+v");
      assertFalse(fileMetric0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setMetricModule("6>ySm+v");
      assertFalse(fileMetric0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      boolean boolean0 = fileMetric0.isInitialized();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.getMetric();
      assertFalse(fileMetric0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setMetricName("DR$^`");
      assertFalse(fileMetric0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setUnit("nZ;S");
      assertFalse(fileMetric0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      // Undeclared exception!
      try { 
        fileMetric0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemetrics.utils.MiscUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      // Undeclared exception!
      try { 
        fileMetric0.setLineSplit((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setRequired(true);
      try { 
        fileMetric0.initialize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // metricFile was not specified for class com.j256.simplemetrics.utils.FileMetric name null
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileMetric fileMetric0 = new FileMetric();
      fileMetric0.setDecimalNumber(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("6>ySm+v");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "6>ySm+v");
      fileMetric0.setColumn(0);
      fileMetric0.setMetricFile("6>ySm+v");
      try { 
        fileMetric0.updateValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid number '6>ySm+v' in metrics null in file 6>ySm+v column 0
         //
         verifyException("com.j256.simplemetrics.utils.FileMetric", e);
      }
  }
}
