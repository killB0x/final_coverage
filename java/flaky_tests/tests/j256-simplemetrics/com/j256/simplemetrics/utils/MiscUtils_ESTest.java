/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 27 18:15:43 GMT 2022
 */

package com.j256.simplemetrics.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplemetrics.utils.MiscUtils;
import java.io.Closeable;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.Socket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MiscUtils_ESTest extends MiscUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("I");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("I");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MiscUtils.closeQuietly((Closeable) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, (InputStream) null);
      // Undeclared exception!
      try { 
        MiscUtils.closeQuietly((Closeable) sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = MiscUtils.capitalize("com.j256.simplemetrics.metric.ControlledMetricTimer");
      assertEquals("Com.j256.simplemetrics.metric.ControlledMetricTimer", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = MiscUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = MiscUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = MiscUtils.capitalize("I");
      assertEquals("I", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = MiscUtils.isBlank(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = MiscUtils.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = MiscUtils.isBlank("I");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = MiscUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      MiscUtils.closeQuietly((Socket) mockSocket0);
      assertFalse(mockSocket0.isConnected());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MiscUtils.closeQuietly((Socket) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("I");
      MiscUtils.closeQuietly((Closeable) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MiscUtils.closeQuietly((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MiscUtils miscUtils0 = new MiscUtils();
  }
}
