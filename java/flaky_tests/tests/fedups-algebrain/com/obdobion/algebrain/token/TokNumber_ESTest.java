/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 07:03:13 GMT 2022
 */

package com.obdobion.algebrain.token;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.obdobion.algebrain.EquPart;
import com.obdobion.algebrain.ValueStack;
import com.obdobion.algebrain.token.TokNumber;
import com.obdobion.algebrain.token.TokOperator;
import com.obdobion.algebrain.token.Token;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokNumber_ESTest extends TokNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokNumber tokNumber0 = new TokNumber();
      tokNumber0.put('&');
      LinkedList<EquPart> linkedList0 = new LinkedList<EquPart>();
      tokNumber0.addTo(linkedList0);
      assertEquals(0, tokNumber0.getLevel());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokNumber tokNumber0 = new TokNumber();
      boolean boolean0 = tokNumber0.accepts('_');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokNumber tokNumber0 = new TokNumber();
      tokNumber0.put('5');
      ValueStack valueStack0 = new ValueStack();
      tokNumber0.resolve(valueStack0);
      assertEquals("[5]", valueStack0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokNumber tokNumber0 = new TokNumber();
      tokNumber0.setLevel(545);
      EquPart equPart0 = tokNumber0.morph();
      assertSame(equPart0, tokNumber0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokNumber tokNumber0 = new TokNumber();
      tokNumber0.setLevel((-722));
      EquPart equPart0 = tokNumber0.morph();
      assertEquals((-722), equPart0.getLevel());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokNumber tokNumber0 = new TokNumber();
      tokNumber0.value = null;
      // Undeclared exception!
      try { 
        tokNumber0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.token.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokNumber tokNumber0 = new TokNumber();
      tokNumber0.put('4');
      try { 
        tokNumber0.resolve((ValueStack) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.token.TokNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokNumber tokNumber0 = new TokNumber();
      tokNumber0.value = null;
      try { 
        tokNumber0.morph();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.token.TokNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokOperator tokOperator0 = (TokOperator)Token.instanceFor('\u0013');
      try { 
        tokOperator0.morph();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokOperator tokOperator0 = new TokOperator();
      // Undeclared exception!
      try { 
        tokOperator0.accepts('\u001D');
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokNumber tokNumber0 = new TokNumber();
      ValueStack valueStack0 = new ValueStack();
      try { 
        tokNumber0.resolve(valueStack0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokNumber tokNumber0 = new TokNumber();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "num()");
      stringBuffer0.append(0.0F);
      tokNumber0.value = stringBuffer0;
      ValueStack valueStack0 = new ValueStack();
      try { 
        tokNumber0.resolve(valueStack0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokNumber tokNumber0 = new TokNumber();
      tokNumber0.put('-');
      EquPart equPart0 = tokNumber0.morph();
      assertEquals("op(subtract)", equPart0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokNumber tokNumber0 = new TokNumber();
      tokNumber0.put('5');
      EquPart equPart0 = tokNumber0.morph();
      assertSame(equPart0, tokNumber0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokNumber tokNumber0 = new TokNumber();
      boolean boolean0 = tokNumber0.accepts('.');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokNumber tokNumber0 = new TokNumber();
      boolean boolean0 = tokNumber0.accepts(',');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokNumber tokNumber0 = new TokNumber();
      boolean boolean0 = tokNumber0.accepts('5');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokNumber tokNumber0 = new TokNumber();
      String string0 = tokNumber0.toString();
      assertEquals("num()", string0);
  }
}
