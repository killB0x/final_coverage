/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 07:39:27 GMT 2022
 */

package com.obdobion.algebrain.operator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.obdobion.algebrain.EquPart;
import com.obdobion.algebrain.ValueStack;
import com.obdobion.algebrain.function.FuncStringToFloat;
import com.obdobion.algebrain.operator.OpAnd;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpAnd_ESTest extends OpAnd_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ValueStack valueStack0 = new ValueStack();
      valueStack0.add((Object) valueStack0);
      Integer integer0 = new Integer(1);
      valueStack0.add((Object) integer0);
      OpAnd opAnd0 = new OpAnd();
      try { 
        opAnd0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // op(and); invalid type ValueStack
         //
         verifyException("com.obdobion.algebrain.operator.OpAnd", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OpAnd opAnd0 = new OpAnd();
      int int0 = opAnd0.precedence();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OpAnd opAnd0 = null;
      try {
        opAnd0 = new OpAnd((EquPart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.Operator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ValueStack valueStack0 = new ValueStack();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-26));
      valueStack0.add((Object) integer1);
      valueStack0.add((Object) integer0);
      OpAnd opAnd0 = new OpAnd();
      opAnd0.resolve(valueStack0);
      assertEquals("[false]", valueStack0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ValueStack valueStack0 = new ValueStack();
      Integer integer0 = new Integer(1);
      valueStack0.add((Object) integer0);
      valueStack0.add((Object) integer0);
      OpAnd opAnd0 = new OpAnd();
      opAnd0.resolve(valueStack0);
      assertEquals("[true]", valueStack0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ValueStack valueStack0 = new ValueStack();
      Integer integer0 = new Integer(0);
      valueStack0.add((Object) integer0);
      valueStack0.add((Object) integer0);
      OpAnd opAnd0 = new OpAnd();
      opAnd0.resolve(valueStack0);
      assertEquals("[false]", valueStack0.toString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OpAnd opAnd0 = new OpAnd();
      ValueStack valueStack0 = new ValueStack();
      try { 
        opAnd0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // missing operands for op(and)
         //
         verifyException("com.obdobion.algebrain.operator.OpAnd", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OpAnd opAnd0 = new OpAnd();
      ValueStack valueStack0 = new ValueStack();
      valueStack0.setSize(4177);
      try { 
        opAnd0.resolve(valueStack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.ValueStack", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FuncStringToFloat funcStringToFloat0 = new FuncStringToFloat();
      OpAnd opAnd0 = new OpAnd(funcStringToFloat0);
      boolean boolean0 = opAnd0.preceeds(funcStringToFloat0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      OpAnd opAnd0 = new OpAnd();
      String string0 = opAnd0.toString();
      assertEquals("op(and)", string0);
  }
}
