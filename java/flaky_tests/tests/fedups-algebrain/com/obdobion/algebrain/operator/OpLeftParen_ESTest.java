/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 08:25:59 GMT 2022
 */

package com.obdobion.algebrain.operator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.obdobion.algebrain.ValueStack;
import com.obdobion.algebrain.function.FuncTimeFmt;
import com.obdobion.algebrain.operator.OpLeftParen;
import com.obdobion.algebrain.token.TokVariable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpLeftParen_ESTest extends OpLeftParen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OpLeftParen opLeftParen0 = new OpLeftParen();
      int int0 = opLeftParen0.precedence();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TokVariable tokVariable0 = new TokVariable();
      FuncTimeFmt funcTimeFmt0 = new FuncTimeFmt(tokVariable0);
      OpLeftParen opLeftParen0 = new OpLeftParen(funcTimeFmt0);
      boolean boolean0 = funcTimeFmt0.preceeds(opLeftParen0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OpLeftParen opLeftParen0 = new OpLeftParen();
      ValueStack valueStack0 = new ValueStack();
      try { 
        opLeftParen0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // WHAT! op(openparen)
         //
         verifyException("com.obdobion.algebrain.operator.OpLeftParen", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OpLeftParen opLeftParen0 = new OpLeftParen();
      String string0 = opLeftParen0.toString();
      assertEquals("op(openparen)", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TokVariable tokVariable0 = new TokVariable();
      FuncTimeFmt funcTimeFmt0 = new FuncTimeFmt(tokVariable0);
      OpLeftParen opLeftParen0 = new OpLeftParen(funcTimeFmt0);
      boolean boolean0 = opLeftParen0.includeInRpn();
      assertFalse(boolean0);
  }
}
