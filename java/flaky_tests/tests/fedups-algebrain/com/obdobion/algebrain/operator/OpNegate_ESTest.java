/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 07:36:51 GMT 2022
 */

package com.obdobion.algebrain.operator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.obdobion.algebrain.EquPart;
import com.obdobion.algebrain.ValueStack;
import com.obdobion.algebrain.operator.OpNegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpNegate_ESTest extends OpNegate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OpNegate opNegate0 = new OpNegate();
      try { 
        opNegate0.resolve((ValueStack) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.operator.OpNegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OpNegate opNegate0 = null;
      try {
        opNegate0 = new OpNegate((EquPart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.Operator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OpNegate opNegate0 = new OpNegate();
      String string0 = opNegate0.toString();
      assertEquals("op(negate)", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OpNegate opNegate0 = new OpNegate();
      ValueStack valueStack0 = new ValueStack();
      Long long0 = new Long((-16L));
      valueStack0.add((Object) long0);
      opNegate0.resolve(valueStack0);
      assertEquals("[16]", valueStack0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OpNegate opNegate0 = new OpNegate();
      ValueStack valueStack0 = new ValueStack();
      valueStack0.add((Object) opNegate0);
      try { 
        opNegate0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // op(negate); invalid type: com.obdobion.algebrain.operator.OpNegate@0000000001
         //
         verifyException("com.obdobion.algebrain.operator.OpNegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OpNegate opNegate0 = new OpNegate();
      int int0 = opNegate0.precedence();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OpNegate opNegate0 = new OpNegate();
      OpNegate opNegate1 = new OpNegate(opNegate0);
      assertTrue(opNegate1.includeInRpn());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OpNegate opNegate0 = new OpNegate();
      ValueStack valueStack0 = new ValueStack();
      try { 
        opNegate0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // missing operands for op(negate)
         //
         verifyException("com.obdobion.algebrain.operator.OpNegate", e);
      }
  }
}
