/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 07:55:09 GMT 2022
 */

package com.obdobion.algebrain.operator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.obdobion.algebrain.EquPart;
import com.obdobion.algebrain.ValueStack;
import com.obdobion.algebrain.function.FuncAlpha;
import com.obdobion.algebrain.operator.OpAdd;
import com.obdobion.algebrain.token.TokVariable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpAdd_ESTest extends OpAdd_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OpAdd opAdd0 = new OpAdd();
      ValueStack valueStack0 = new ValueStack();
      Long long0 = new Long((-1155L));
      valueStack0.add((Object) long0);
      valueStack0.add((Object) long0);
      opAdd0.resolve(valueStack0);
      assertEquals("[-2310]", valueStack0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TokVariable tokVariable0 = new TokVariable();
      FuncAlpha funcAlpha0 = new FuncAlpha(tokVariable0);
      OpAdd opAdd0 = new OpAdd(funcAlpha0);
      ValueStack valueStack0 = new ValueStack();
      valueStack0.add((Object) opAdd0);
      Long long0 = new Long(0L);
      valueStack0.add((Object) long0);
      valueStack0.add((Object) long0);
      opAdd0.resolve(valueStack0);
      assertEquals("[op(add), 0]", valueStack0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TokVariable tokVariable0 = new TokVariable();
      FuncAlpha funcAlpha0 = new FuncAlpha(tokVariable0);
      OpAdd opAdd0 = new OpAdd(funcAlpha0);
      ValueStack valueStack0 = new ValueStack();
      valueStack0.add((Object) opAdd0);
      Long long0 = new Long(0L);
      valueStack0.add((Object) long0);
      try { 
        opAdd0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // op(add); invalid type OpAdd
         //
         verifyException("com.obdobion.algebrain.operator.OpAdd", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TokVariable tokVariable0 = new TokVariable();
      FuncAlpha funcAlpha0 = new FuncAlpha(tokVariable0);
      OpAdd opAdd0 = new OpAdd(funcAlpha0);
      int int0 = opAdd0.precedence();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OpAdd opAdd0 = new OpAdd();
      ValueStack valueStack0 = new ValueStack();
      Long long0 = Long.getLong("", 1L);
      valueStack0.add((Object) long0);
      valueStack0.add((Object) "");
      try { 
        opAdd0.resolve(valueStack0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OpAdd opAdd0 = new OpAdd();
      try { 
        opAdd0.resolve((ValueStack) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.operator.OpAdd", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OpAdd opAdd0 = null;
      try {
        opAdd0 = new OpAdd((EquPart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.Operator", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TokVariable tokVariable0 = new TokVariable();
      FuncAlpha funcAlpha0 = new FuncAlpha(tokVariable0);
      OpAdd opAdd0 = new OpAdd(funcAlpha0);
      String string0 = opAdd0.toString();
      assertEquals("op(add)", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OpAdd opAdd0 = new OpAdd();
      ValueStack valueStack0 = new ValueStack();
      valueStack0.add((Object) opAdd0);
      valueStack0.add((Object) opAdd0);
      try { 
        opAdd0.resolve(valueStack0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.obdobion.algebrain.operator.OpAdd cannot be cast to class java.lang.Double (com.obdobion.algebrain.operator.OpAdd is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @239a1577; java.lang.Double is in module java.base of loader 'bootstrap')
         //
         verifyException("com.obdobion.algebrain.operator.OpAdd", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TokVariable tokVariable0 = new TokVariable();
      FuncAlpha funcAlpha0 = new FuncAlpha(tokVariable0);
      OpAdd opAdd0 = new OpAdd(funcAlpha0);
      ValueStack valueStack0 = new ValueStack();
      try { 
        opAdd0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // missing operands for op(add)
         //
         verifyException("com.obdobion.algebrain.operator.OpAdd", e);
      }
  }
}
