/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 07:27:50 GMT 2022
 */

package com.obdobion.algebrain.operator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.obdobion.algebrain.EquPart;
import com.obdobion.algebrain.ValueStack;
import com.obdobion.algebrain.operator.OpNand;
import com.obdobion.algebrain.operator.OpSubtract;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpNand_ESTest extends OpNand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OpNand opNand0 = new OpNand();
      ValueStack valueStack0 = new ValueStack();
      valueStack0.add((Object) null);
      valueStack0.add((Object) opNand0);
      try { 
        opNand0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // op(nand); invalid type OpNand
         //
         verifyException("com.obdobion.algebrain.operator.OpNand", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OpNand opNand0 = new OpNand();
      ValueStack valueStack0 = new ValueStack();
      valueStack0.setSize(2);
      try { 
        opNand0.resolve(valueStack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.ValueStack", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OpNand opNand0 = null;
      try {
        opNand0 = new OpNand((EquPart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.Operator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OpNand opNand0 = new OpNand();
      ValueStack valueStack0 = new ValueStack();
      Integer integer0 = new Integer(171);
      valueStack0.add((Object) integer0);
      valueStack0.add((Object) integer0);
      valueStack0.add((Object) integer0);
      opNand0.resolve(valueStack0);
      opNand0.resolve(valueStack0);
      assertEquals("[true]", valueStack0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OpNand opNand0 = new OpNand();
      ValueStack valueStack0 = new ValueStack();
      Integer integer0 = new Integer(0);
      valueStack0.add((Object) integer0);
      valueStack0.add((Object) integer0);
      opNand0.resolve(valueStack0);
      assertEquals("[true]", valueStack0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OpNand opNand0 = new OpNand();
      ValueStack valueStack0 = new ValueStack();
      try { 
        opNand0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // missing operands for op(nand)
         //
         verifyException("com.obdobion.algebrain.operator.OpNand", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OpNand opNand0 = new OpNand();
      int int0 = opNand0.precedence();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OpSubtract opSubtract0 = new OpSubtract();
      OpNand opNand0 = new OpNand(opSubtract0);
      assertTrue(opNand0.includeInRpn());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OpNand opNand0 = new OpNand();
      String string0 = opNand0.toString();
      assertEquals("op(nand)", string0);
  }
}
