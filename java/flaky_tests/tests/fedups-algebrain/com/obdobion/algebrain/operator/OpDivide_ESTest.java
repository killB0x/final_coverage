/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 07:48:42 GMT 2022
 */

package com.obdobion.algebrain.operator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.obdobion.algebrain.EquPart;
import com.obdobion.algebrain.ValueStack;
import com.obdobion.algebrain.function.FuncStringReplace;
import com.obdobion.algebrain.operator.OpDivide;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpDivide_ESTest extends OpDivide_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OpDivide opDivide0 = new OpDivide();
      ValueStack valueStack0 = new ValueStack();
      Object object0 = new Object();
      valueStack0.add(object0);
      valueStack0.add(object0);
      valueStack0.add(object0);
      try { 
        opDivide0.resolve(valueStack0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.Double (java.lang.Object and java.lang.Double are in module java.base of loader 'bootstrap')
         //
         verifyException("com.obdobion.algebrain.operator.OpDivide", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FuncStringReplace funcStringReplace0 = new FuncStringReplace();
      OpDivide opDivide0 = new OpDivide(funcStringReplace0);
      ValueStack valueStack0 = new ValueStack();
      Object object0 = new Object();
      valueStack0.add((Object) opDivide0);
      valueStack0.add(object0);
      try { 
        opDivide0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // op(divide); invalid type: OpDivide
         //
         verifyException("com.obdobion.algebrain.operator.OpDivide", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OpDivide opDivide0 = new OpDivide();
      ValueStack valueStack0 = new ValueStack();
      Long long0 = new Long((-2493L));
      valueStack0.add((Object) long0);
      valueStack0.add((Object) "Ozj#tAK1A=i#");
      try { 
        opDivide0.resolve(valueStack0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ozj#tAK1A=i#\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OpDivide opDivide0 = new OpDivide();
      try { 
        opDivide0.resolve((ValueStack) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.operator.OpDivide", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OpDivide opDivide0 = null;
      try {
        opDivide0 = new OpDivide((EquPart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.Operator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OpDivide opDivide0 = new OpDivide();
      String string0 = opDivide0.toString();
      assertEquals("op(divide)", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OpDivide opDivide0 = new OpDivide();
      ValueStack valueStack0 = new ValueStack();
      Long long0 = new Long(847L);
      valueStack0.add((Object) long0);
      valueStack0.add((Object) long0);
      opDivide0.resolve(valueStack0);
      assertEquals("[1.0]", valueStack0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FuncStringReplace funcStringReplace0 = new FuncStringReplace();
      OpDivide opDivide0 = new OpDivide(funcStringReplace0);
      ValueStack valueStack0 = new ValueStack();
      try { 
        opDivide0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // missing operands for op(divide)
         //
         verifyException("com.obdobion.algebrain.operator.OpDivide", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OpDivide opDivide0 = new OpDivide();
      int int0 = opDivide0.precedence();
      assertEquals(4, int0);
  }
}
