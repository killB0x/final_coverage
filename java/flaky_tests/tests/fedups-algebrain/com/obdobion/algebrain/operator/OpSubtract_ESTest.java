/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 07:29:09 GMT 2022
 */

package com.obdobion.algebrain.operator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.obdobion.algebrain.EquPart;
import com.obdobion.algebrain.ValueStack;
import com.obdobion.algebrain.operator.OpSubtract;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpSubtract_ESTest extends OpSubtract_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OpSubtract opSubtract0 = new OpSubtract();
      ValueStack valueStack0 = new ValueStack();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      valueStack0.addElement(localDateTime0);
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1L);
      LocalDateTime localDateTime1 = MockLocalDateTime.of(localDate0, localTime0);
      valueStack0.add((Object) localDateTime1);
      opSubtract0.resolve(valueStack0);
      assertEquals("[0]", valueStack0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OpSubtract opSubtract0 = new OpSubtract();
      ValueStack valueStack0 = new ValueStack();
      Object object0 = new Object();
      valueStack0.add((Object) opSubtract0);
      valueStack0.add(object0);
      try { 
        opSubtract0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // op(subtract); invalid type: OpSubtract
         //
         verifyException("com.obdobion.algebrain.operator.OpSubtract", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OpSubtract opSubtract0 = new OpSubtract();
      try { 
        opSubtract0.resolve((ValueStack) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.operator.OpSubtract", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OpSubtract opSubtract0 = new OpSubtract();
      ValueStack valueStack0 = new ValueStack();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      valueStack0.addElement(localDateTime0);
      valueStack0.add((Object) localDateTime0);
      valueStack0.add((Object) localDateTime0);
      opSubtract0.resolve(valueStack0);
      // Undeclared exception!
      try { 
        opSubtract0.resolve(valueStack0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/obdobion/calendar/CalendarFactory
         //
         verifyException("com.obdobion.algebrain.ValueStack", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OpSubtract opSubtract0 = null;
      try {
        opSubtract0 = new OpSubtract((EquPart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.Operator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OpSubtract opSubtract0 = new OpSubtract();
      String string0 = opSubtract0.toString();
      assertEquals("op(subtract)", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OpSubtract opSubtract0 = new OpSubtract();
      ValueStack valueStack0 = new ValueStack();
      valueStack0.addElement(opSubtract0);
      valueStack0.add((Object) opSubtract0);
      try { 
        opSubtract0.resolve(valueStack0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.obdobion.algebrain.operator.OpSubtract cannot be cast to class java.lang.Double (com.obdobion.algebrain.operator.OpSubtract is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @4e16eb7; java.lang.Double is in module java.base of loader 'bootstrap')
         //
         verifyException("com.obdobion.algebrain.operator.OpSubtract", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OpSubtract opSubtract0 = new OpSubtract();
      int int0 = opSubtract0.precedence();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OpSubtract opSubtract0 = new OpSubtract();
      OpSubtract opSubtract1 = new OpSubtract(opSubtract0);
      assertTrue(opSubtract1.includeInRpn());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      OpSubtract opSubtract0 = new OpSubtract();
      ValueStack valueStack0 = new ValueStack();
      try { 
        opSubtract0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // missing operands for op(subtract)
         //
         verifyException("com.obdobion.algebrain.operator.OpSubtract", e);
      }
  }
}
