/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 07:42:01 GMT 2022
 */

package com.obdobion.algebrain.operator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.obdobion.algebrain.EquPart;
import com.obdobion.algebrain.ValueStack;
import com.obdobion.algebrain.function.FuncFlatRate;
import com.obdobion.algebrain.operator.OpCompareNotGreater;
import com.obdobion.algebrain.operator.OpLeftParen;
import com.obdobion.algebrain.operator.OpRightParen;
import com.obdobion.algebrain.token.TokVariable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpRightParen_ESTest extends OpRightParen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FuncFlatRate funcFlatRate0 = new FuncFlatRate();
      OpRightParen opRightParen0 = new OpRightParen(funcFlatRate0);
      assertEquals(0, opRightParen0.getLevel());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OpRightParen opRightParen0 = new OpRightParen();
      String string0 = opRightParen0.toString();
      assertEquals("op(closeparen)", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OpRightParen opRightParen0 = new OpRightParen();
      OpCompareNotGreater opCompareNotGreater0 = new OpCompareNotGreater(opRightParen0);
      boolean boolean0 = opRightParen0.multiplize(opCompareNotGreater0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OpRightParen opRightParen0 = new OpRightParen();
      TokVariable tokVariable0 = new TokVariable();
      boolean boolean0 = opRightParen0.multiplize(tokVariable0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FuncFlatRate funcFlatRate0 = new FuncFlatRate();
      OpRightParen opRightParen0 = new OpRightParen();
      boolean boolean0 = opRightParen0.multiplize(funcFlatRate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OpRightParen opRightParen0 = new OpRightParen();
      OpLeftParen opLeftParen0 = new OpLeftParen(opRightParen0);
      boolean boolean0 = opRightParen0.multiplize(opLeftParen0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OpRightParen opRightParen0 = new OpRightParen();
      int int0 = opRightParen0.precedence();
      assertEquals(999, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OpRightParen opRightParen0 = new OpRightParen();
      boolean boolean0 = opRightParen0.includeInRpn();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FuncFlatRate funcFlatRate0 = new FuncFlatRate();
      OpRightParen opRightParen0 = new OpRightParen();
      boolean boolean0 = opRightParen0.negatize(funcFlatRate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OpRightParen opRightParen0 = null;
      try {
        opRightParen0 = new OpRightParen((EquPart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.Operator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OpRightParen opRightParen0 = new OpRightParen();
      ValueStack valueStack0 = new ValueStack();
      try { 
        opRightParen0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // WHAT! op(closeparen)
         //
         verifyException("com.obdobion.algebrain.operator.OpRightParen", e);
      }
  }
}
