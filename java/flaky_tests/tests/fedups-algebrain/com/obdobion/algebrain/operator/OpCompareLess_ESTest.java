/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 06:53:23 GMT 2022
 */

package com.obdobion.algebrain.operator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.obdobion.algebrain.EquPart;
import com.obdobion.algebrain.ValueStack;
import com.obdobion.algebrain.function.FuncBytesToHex;
import com.obdobion.algebrain.function.FuncTimeFmt;
import com.obdobion.algebrain.operator.OpCompareLess;
import com.obdobion.algebrain.operator.OpCompareNotLess;
import com.obdobion.algebrain.token.TokVariable;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpCompareLess_ESTest extends OpCompareLess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OpCompareNotLess opCompareNotLess0 = new OpCompareNotLess();
      ValueStack valueStack0 = new ValueStack();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      valueStack0.addElement(localDateTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime1 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      valueStack0.add((Object) localDateTime1);
      opCompareNotLess0.resolve(valueStack0);
      assertEquals("[true]", valueStack0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OpCompareLess opCompareLess0 = new OpCompareLess();
      ValueStack valueStack0 = new ValueStack();
      valueStack0.setSize(8);
      try { 
        opCompareLess0.resolve(valueStack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.ValueStack", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TokVariable tokVariable0 = new TokVariable();
      FuncBytesToHex funcBytesToHex0 = new FuncBytesToHex(tokVariable0);
      OpCompareLess opCompareLess0 = new OpCompareLess(funcBytesToHex0);
      ValueStack valueStack0 = new ValueStack();
      valueStack0.add((Object) funcBytesToHex0);
      valueStack0.add((Object) tokVariable0);
      try { 
        opCompareLess0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // op(compare less); \"\" is unassigned
         //
         verifyException("com.obdobion.algebrain.operator.OpCompareLess", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OpCompareLess opCompareLess0 = null;
      try {
        opCompareLess0 = new OpCompareLess((EquPart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.Operator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OpCompareLess opCompareLess0 = new OpCompareLess();
      String string0 = opCompareLess0.toString();
      assertEquals("op(compare less)", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OpCompareNotLess opCompareNotLess0 = new OpCompareNotLess();
      ValueStack valueStack0 = new ValueStack();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1, 1, 1, 1, 1);
      valueStack0.addElement(localDateTime0);
      LocalDateTime localDateTime1 = MockLocalDateTime.now();
      valueStack0.add((Object) localDateTime1);
      opCompareNotLess0.resolve(valueStack0);
      assertEquals("[false]", valueStack0.toString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OpCompareNotLess opCompareNotLess0 = new OpCompareNotLess();
      ValueStack valueStack0 = new ValueStack();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1, 1, 1, 1, 1);
      valueStack0.addElement(localDateTime0);
      valueStack0.add((Object) localDateTime0);
      opCompareNotLess0.resolve(valueStack0);
      assertEquals("[true]", valueStack0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FuncTimeFmt funcTimeFmt0 = new FuncTimeFmt();
      OpCompareNotLess opCompareNotLess0 = new OpCompareNotLess(funcTimeFmt0);
      ValueStack valueStack0 = new ValueStack();
      valueStack0.add((Object) funcTimeFmt0);
      valueStack0.add((Object) funcTimeFmt0);
      try { 
        opCompareNotLess0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // op(compare not less); invalid type, found FuncTimeFmt
         //
         verifyException("com.obdobion.algebrain.operator.OpCompareLess", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OpCompareLess opCompareLess0 = new OpCompareLess();
      int int0 = opCompareLess0.precedence();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TokVariable tokVariable0 = new TokVariable();
      FuncBytesToHex funcBytesToHex0 = new FuncBytesToHex(tokVariable0);
      OpCompareLess opCompareLess0 = new OpCompareLess(funcBytesToHex0);
      ValueStack valueStack0 = new ValueStack();
      try { 
        opCompareLess0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // missing operands for op(compare less)
         //
         verifyException("com.obdobion.algebrain.operator.OpCompareLess", e);
      }
  }
}
