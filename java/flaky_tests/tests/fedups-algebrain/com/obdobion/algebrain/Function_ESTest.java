/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 07:10:04 GMT 2022
 */

package com.obdobion.algebrain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.obdobion.algebrain.EquPart;
import com.obdobion.algebrain.function.FuncAcotan;
import com.obdobion.algebrain.function.FuncFlatRate;
import com.obdobion.algebrain.function.FuncIf;
import com.obdobion.algebrain.function.FuncStringLowerCase;
import com.obdobion.algebrain.function.FuncStringReplace;
import com.obdobion.algebrain.function.FuncStringUpCase;
import com.obdobion.algebrain.function.FuncTan;
import com.obdobion.algebrain.operator.OpComma;
import com.obdobion.algebrain.token.TokVariable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Function_ESTest extends Function_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokVariable tokVariable0 = new TokVariable();
      FuncStringLowerCase funcStringLowerCase0 = new FuncStringLowerCase(tokVariable0);
      EquPart[] equPartArray0 = new EquPart[6];
      funcStringLowerCase0.setLevel(914);
      equPartArray0[5] = (EquPart) tokVariable0;
      funcStringLowerCase0.updateParameterCount(equPartArray0, 4);
      assertEquals(0, funcStringLowerCase0.getParameterCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EquPart[] equPartArray0 = new EquPart[4];
      TokVariable tokVariable0 = new TokVariable();
      FuncAcotan funcAcotan0 = new FuncAcotan(tokVariable0);
      funcAcotan0.updateParameterCount(equPartArray0, 95);
      assertEquals(0, funcAcotan0.getParameterCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FuncFlatRate funcFlatRate0 = new FuncFlatRate();
      funcFlatRate0.setParameterCount((-1801));
      int int0 = funcFlatRate0.getParameterCount();
      assertEquals((-1801), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FuncStringReplace funcStringReplace0 = new FuncStringReplace();
      EquPart[] equPartArray0 = new EquPart[13];
      // Undeclared exception!
      try { 
        funcStringReplace0.updateParameterCount(equPartArray0, (-152));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -151 out of bounds for length 13
         //
         verifyException("com.obdobion.algebrain.Function", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FuncStringUpCase funcStringUpCase0 = new FuncStringUpCase();
      int int0 = funcStringUpCase0.getParameterCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FuncStringUpCase funcStringUpCase0 = new FuncStringUpCase();
      funcStringUpCase0.setParameterCount(659);
      int int0 = funcStringUpCase0.getParameterCount();
      assertEquals(659, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FuncTan funcTan0 = new FuncTan();
      FuncTan funcTan1 = new FuncTan();
      EquPart[] equPartArray0 = new EquPart[7];
      funcTan1.setLevel((-1));
      equPartArray0[1] = (EquPart) funcTan0;
      // Undeclared exception!
      try { 
        funcTan1.updateParameterCount(equPartArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.Function", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FuncTan funcTan0 = new FuncTan();
      funcTan0.setLevel((-1));
      EquPart[] equPartArray0 = new EquPart[1];
      OpComma opComma0 = new OpComma();
      equPartArray0[0] = (EquPart) opComma0;
      funcTan0.updateParameterCount(equPartArray0, (-1));
      assertEquals(2, funcTan0.getParameterCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FuncStringReplace funcStringReplace0 = new FuncStringReplace();
      FuncTan funcTan0 = new FuncTan();
      funcTan0.setLevel((-5));
      EquPart[] equPartArray0 = new EquPart[1];
      equPartArray0[0] = (EquPart) funcStringReplace0;
      funcTan0.updateParameterCount(equPartArray0, (-1));
      assertEquals(0, funcTan0.getParameterCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FuncStringUpCase funcStringUpCase0 = new FuncStringUpCase();
      FuncIf funcIf0 = new FuncIf();
      boolean boolean0 = funcIf0.preceeds(funcStringUpCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FuncStringReplace funcStringReplace0 = new FuncStringReplace();
      FuncTan funcTan0 = new FuncTan();
      EquPart[] equPartArray0 = new EquPart[1];
      equPartArray0[0] = (EquPart) funcStringReplace0;
      funcTan0.updateParameterCount(equPartArray0, (-1));
      assertEquals(0, funcTan0.getParameterCount());
  }
}
