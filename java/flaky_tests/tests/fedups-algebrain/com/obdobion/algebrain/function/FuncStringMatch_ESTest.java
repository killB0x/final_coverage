/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 06:49:23 GMT 2022
 */

package com.obdobion.algebrain.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.obdobion.algebrain.ValueStack;
import com.obdobion.algebrain.function.FuncStringMatch;
import com.obdobion.algebrain.token.TokVariable;
import java.util.EmptyStackException;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FuncStringMatch_ESTest extends FuncStringMatch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FuncStringMatch funcStringMatch0 = new FuncStringMatch();
      ValueStack valueStack0 = new ValueStack();
      valueStack0.add((Object) funcStringMatch0);
      valueStack0.add((Object) funcStringMatch0);
      valueStack0.add((Object) funcStringMatch0);
      valueStack0.add((Object) funcStringMatch0);
      funcStringMatch0.setParameterCount(4);
      try { 
        funcStringMatch0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // function(match-4); Literal required, found FuncStringMatch
         //
         verifyException("com.obdobion.algebrain.function.FuncStringMatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FuncStringMatch funcStringMatch0 = new FuncStringMatch();
      ValueStack valueStack0 = new ValueStack();
      valueStack0.add((Object) "=Ge)=TPsXj");
      valueStack0.add((Object) "=Ge)=TPsXj");
      try { 
        funcStringMatch0.resolve(valueStack0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 2
         // =Ge)=TPsXj
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FuncStringMatch funcStringMatch0 = new FuncStringMatch();
      ValueStack valueStack0 = new ValueStack();
      try { 
        funcStringMatch0.resolve(valueStack0);
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FuncStringMatch funcStringMatch0 = new FuncStringMatch();
      try { 
        funcStringMatch0.resolve((ValueStack) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.function.FuncStringMatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FuncStringMatch funcStringMatch0 = null;
      try {
        funcStringMatch0 = new FuncStringMatch((TokVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.Function", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FuncStringMatch funcStringMatch0 = new FuncStringMatch();
      ValueStack valueStack0 = new ValueStack();
      valueStack0.add((Object) "MVunZ%");
      valueStack0.add((Object) "MVunZ%");
      funcStringMatch0.resolve(valueStack0);
      assertFalse(valueStack0.isEmpty());
      assertEquals("[MVunZ%]", valueStack0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FuncStringMatch funcStringMatch0 = new FuncStringMatch();
      ValueStack valueStack0 = new ValueStack();
      valueStack0.add((Object) "=Ge)=TPsXj");
      valueStack0.add((Object) "uMV$uiZ%");
      funcStringMatch0.resolve(valueStack0);
      assertFalse(valueStack0.isEmpty());
      assertFalse(valueStack0.empty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FuncStringMatch funcStringMatch0 = new FuncStringMatch();
      ValueStack valueStack0 = new ValueStack();
      valueStack0.add((Object) funcStringMatch0);
      valueStack0.add((Object) funcStringMatch0);
      funcStringMatch0.setParameterCount(3);
      valueStack0.add((Object) funcStringMatch0);
      try { 
        funcStringMatch0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // function(match-3); invalid type FuncStringMatch
         //
         verifyException("com.obdobion.algebrain.function.FuncStringMatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokVariable tokVariable0 = new TokVariable();
      FuncStringMatch funcStringMatch0 = new FuncStringMatch(tokVariable0);
      ValueStack valueStack0 = new ValueStack();
      valueStack0.add((Object) "var()");
      valueStack0.add((Object) "var()");
      funcStringMatch0.resolve(valueStack0);
      assertEquals("[]", valueStack0.toString());
      assertFalse(valueStack0.empty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokVariable tokVariable0 = new TokVariable();
      FuncStringMatch funcStringMatch0 = new FuncStringMatch(tokVariable0);
      String string0 = funcStringMatch0.toString();
      assertEquals("function(match-0)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FuncStringMatch funcStringMatch0 = new FuncStringMatch();
      funcStringMatch0.setParameterCount(1);
      ValueStack valueStack0 = new ValueStack();
      try { 
        funcStringMatch0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // missing operands for function(match-1)
         //
         verifyException("com.obdobion.algebrain.function.FuncStringMatch", e);
      }
  }
}
