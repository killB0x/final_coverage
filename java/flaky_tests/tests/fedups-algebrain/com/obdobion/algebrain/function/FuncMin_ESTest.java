/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 07:21:39 GMT 2022
 */

package com.obdobion.algebrain.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.obdobion.algebrain.ValueStack;
import com.obdobion.algebrain.function.FuncAcotan;
import com.obdobion.algebrain.function.FuncMin;
import com.obdobion.algebrain.token.TokVariable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FuncMin_ESTest extends FuncMin_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FuncMin funcMin0 = new FuncMin();
      Long long0 = new Long(1);
      ValueStack valueStack0 = new ValueStack();
      valueStack0.add((Object) long0);
      try { 
        funcMin0.resolve(valueStack0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.obdobion.algebrain.function.FuncMin", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FuncMin funcMin0 = new FuncMin();
      TokVariable tokVariable0 = new TokVariable();
      funcMin0.setParameterCount(1);
      ValueStack valueStack0 = new ValueStack();
      valueStack0.add((Object) tokVariable0);
      try { 
        funcMin0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // function(min-1); \"\" is unassigned
         //
         verifyException("com.obdobion.algebrain.function.FuncMin", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FuncMin funcMin0 = new FuncMin();
      try { 
        funcMin0.resolve((ValueStack) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.function.FuncMin", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FuncMin funcMin0 = null;
      try {
        funcMin0 = new FuncMin((TokVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.Function", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FuncMin funcMin0 = new FuncMin();
      String string0 = funcMin0.toString();
      assertEquals("function(min-0)", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FuncMin funcMin0 = new FuncMin();
      funcMin0.setParameterCount(1);
      Long long0 = new Long(1);
      ValueStack valueStack0 = new ValueStack();
      valueStack0.add((Object) long0);
      FuncAcotan funcAcotan0 = new FuncAcotan();
      funcAcotan0.resolve(valueStack0);
      funcMin0.resolve(valueStack0);
      assertEquals(0, funcMin0.getLevel());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FuncMin funcMin0 = new FuncMin();
      funcMin0.setParameterCount(1);
      Long long0 = new Long(1);
      ValueStack valueStack0 = new ValueStack();
      valueStack0.add((Object) long0);
      funcMin0.resolve(valueStack0);
      assertEquals("[1]", valueStack0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FuncMin funcMin0 = new FuncMin();
      funcMin0.setParameterCount(1);
      ValueStack valueStack0 = new ValueStack();
      Object object0 = new Object();
      valueStack0.add(object0);
      funcMin0.resolve(valueStack0);
      assertEquals(1, funcMin0.getParameterCount());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TokVariable tokVariable0 = new TokVariable();
      FuncMin funcMin0 = new FuncMin(tokVariable0);
      funcMin0.setParameterCount(376);
      ValueStack valueStack0 = new ValueStack();
      try { 
        funcMin0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // missing operands for function(min-376)
         //
         verifyException("com.obdobion.algebrain.function.FuncMin", e);
      }
  }
}
