/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 07:43:19 GMT 2022
 */

package com.obdobion.algebrain.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.obdobion.algebrain.ValueStack;
import com.obdobion.algebrain.function.FuncTimeFmt;
import com.obdobion.algebrain.operator.OpOr;
import com.obdobion.algebrain.token.TokVariable;
import java.time.format.DateTimeParseException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FuncTimeFmt_ESTest extends FuncTimeFmt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FuncTimeFmt funcTimeFmt0 = new FuncTimeFmt();
      ValueStack valueStack0 = new ValueStack();
      OpOr opOr0 = new OpOr(funcTimeFmt0);
      valueStack0.add((Object) opOr0);
      funcTimeFmt0.setParameterCount(256);
      valueStack0.add((Object) opOr0);
      try { 
        funcTimeFmt0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // function(timeFmt); Literal required, found OpOr
         //
         verifyException("com.obdobion.algebrain.function.FuncTimeFmt", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TokVariable tokVariable0 = new TokVariable();
      FuncTimeFmt funcTimeFmt0 = new FuncTimeFmt(tokVariable0);
      ValueStack valueStack0 = new ValueStack();
      OpOr opOr0 = new OpOr(tokVariable0);
      valueStack0.add((Object) opOr0);
      valueStack0.add((Object) tokVariable0);
      valueStack0.add((Object) tokVariable0);
      try { 
        funcTimeFmt0.resolve(valueStack0);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '' could not be parsed: Unable to obtain LocalTime from TemporalAccessor: {},ISO of type java.time.format.Parsed
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FuncTimeFmt funcTimeFmt0 = new FuncTimeFmt();
      try { 
        funcTimeFmt0.resolve((ValueStack) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.function.FuncTimeFmt", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TokVariable tokVariable0 = new TokVariable();
      FuncTimeFmt funcTimeFmt0 = new FuncTimeFmt(tokVariable0);
      ValueStack valueStack0 = new ValueStack();
      Object object0 = new Object();
      valueStack0.add(object0);
      valueStack0.add((Object) "function(timeFmt)");
      try { 
        funcTimeFmt0.resolve(valueStack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown pattern letter: f
         //
         verifyException("java.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FuncTimeFmt funcTimeFmt0 = null;
      try {
        funcTimeFmt0 = new FuncTimeFmt((TokVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.obdobion.algebrain.Function", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FuncTimeFmt funcTimeFmt0 = new FuncTimeFmt();
      ValueStack valueStack0 = new ValueStack();
      valueStack0.add((Object) funcTimeFmt0);
      funcTimeFmt0.setParameterCount(3);
      valueStack0.add((Object) funcTimeFmt0);
      try { 
        funcTimeFmt0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // function(timeFmt); Literal required, found FuncTimeFmt
         //
         verifyException("com.obdobion.algebrain.function.FuncTimeFmt", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TokVariable tokVariable0 = new TokVariable();
      FuncTimeFmt funcTimeFmt0 = new FuncTimeFmt(tokVariable0);
      String string0 = funcTimeFmt0.toString();
      assertEquals("function(timeFmt)", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FuncTimeFmt funcTimeFmt0 = new FuncTimeFmt();
      ValueStack valueStack0 = new ValueStack();
      try { 
        funcTimeFmt0.resolve(valueStack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // missing operands for function(timeFmt)
         //
         verifyException("com.obdobion.algebrain.function.FuncTimeFmt", e);
      }
  }
}
