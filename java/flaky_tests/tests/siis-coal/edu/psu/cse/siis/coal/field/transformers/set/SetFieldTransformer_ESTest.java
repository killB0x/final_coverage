/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 02:20:37 GMT 2022
 */

package edu.psu.cse.siis.coal.field.transformers.set;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.psu.cse.siis.coal.field.SequenceElement;
import edu.psu.cse.siis.coal.field.TransformerSequence;
import edu.psu.cse.siis.coal.field.transformers.FieldTransformer;
import edu.psu.cse.siis.coal.field.transformers.IdentityFieldTransformer;
import edu.psu.cse.siis.coal.field.transformers.NullFieldTransformer;
import edu.psu.cse.siis.coal.field.transformers.TopFieldTransformer;
import edu.psu.cse.siis.coal.field.transformers.set.SetFieldTransformer;
import edu.psu.cse.siis.coal.field.values.FieldValue;
import edu.psu.cse.siis.coal.field.values.IntermediateFieldValue;
import edu.psu.cse.siis.coal.field.values.NullFieldValue;
import edu.psu.cse.siis.coal.field.values.ScalarFieldValue;
import edu.psu.cse.siis.coal.field.values.SetFieldValue;
import edu.psu.cse.siis.coal.field.values.TopFieldValue;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SetFieldTransformer_ESTest extends SetFieldTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      setFieldTransformer0.add = (Set<Object>) linkedHashSet0;
      String string0 = setFieldTransformer0.toString();
      assertEquals("Add [], remove null, clear false, transformer sequence null", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      SetFieldTransformer setFieldTransformer1 = new SetFieldTransformer();
      FieldTransformer fieldTransformer0 = setFieldTransformer1.compose(setFieldTransformer0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      setFieldTransformer0.remove = (Set<Object>) linkedHashSet0;
      SetFieldTransformer setFieldTransformer2 = (SetFieldTransformer)setFieldTransformer1.makeNonComposedFieldTransformer();
      LinkedList<SequenceElement> linkedList0 = new LinkedList<SequenceElement>();
      TransformerSequence transformerSequence0 = new TransformerSequence(linkedList0);
      setFieldTransformer2.transformerSequence = transformerSequence0;
      // Undeclared exception!
      try { 
        fieldTransformer0.compose(setFieldTransformer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      FieldTransformer fieldTransformer0 = setFieldTransformer0.intern();
      LinkedList<SequenceElement> linkedList0 = new LinkedList<SequenceElement>();
      TransformerSequence transformerSequence0 = new TransformerSequence(linkedList0);
      setFieldTransformer0.transformerSequence = transformerSequence0;
      setFieldTransformer0.compose(fieldTransformer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      setFieldTransformer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      boolean boolean0 = setFieldTransformer0.equals(setFieldTransformer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      TransformerSequence transformerSequence0 = new TransformerSequence();
      setFieldTransformer0.transformerSequence = transformerSequence0;
      // Undeclared exception!
      try { 
        setFieldTransformer0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      setFieldTransformer0.remove = (Set<Object>) linkedHashSet0;
      linkedHashSet0.add(setFieldTransformer0.remove);
      // Undeclared exception!
      try { 
        setFieldTransformer0.makeNonComposedFieldTransformer();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      setFieldTransformer0.remove = (Set<Object>) linkedHashSet0;
      linkedHashSet0.add(setFieldTransformer0.remove);
      // Undeclared exception!
      try { 
        setFieldTransformer0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      TransformerSequence transformerSequence0 = new TransformerSequence();
      setFieldTransformer0.transformerSequence = transformerSequence0;
      // Undeclared exception!
      try { 
        setFieldTransformer0.compose(setFieldTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      SetFieldValue setFieldValue0 = new SetFieldValue();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(setFieldValue0);
      setFieldValue0.addAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        setFieldTransformer0.apply(setFieldValue0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      TopFieldValue topFieldValue0 = TopFieldValue.v();
      // Undeclared exception!
      try { 
        setFieldTransformer0.apply(topFieldValue0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot get value for top field value
         //
         verifyException("edu.psu.cse.siis.coal.field.values.TopFieldValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      // Undeclared exception!
      try { 
        setFieldTransformer0.apply((FieldValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.psu.cse.siis.coal.field.transformers.set.SetFieldTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      ScalarFieldValue scalarFieldValue0 = new ScalarFieldValue(setFieldTransformer0);
      // Undeclared exception!
      try { 
        setFieldTransformer0.apply(scalarFieldValue0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class edu.psu.cse.siis.coal.field.transformers.set.SetFieldTransformer cannot be cast to class java.util.Set (edu.psu.cse.siis.coal.field.transformers.set.SetFieldTransformer is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @60fe600f; java.util.Set is in module java.base of loader 'bootstrap')
         //
         verifyException("edu.psu.cse.siis.coal.field.transformers.set.SetFieldTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      Object object0 = new Object();
      boolean boolean0 = setFieldTransformer0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      FieldTransformer fieldTransformer0 = setFieldTransformer0.intern();
      LinkedList<SequenceElement> linkedList0 = new LinkedList<SequenceElement>();
      TransformerSequence transformerSequence0 = new TransformerSequence(linkedList0);
      setFieldTransformer0.transformerSequence = transformerSequence0;
      fieldTransformer0.compose(setFieldTransformer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      SetFieldTransformer setFieldTransformer1 = new SetFieldTransformer();
      assertTrue(setFieldTransformer1.equals((Object)setFieldTransformer0));
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      setFieldTransformer1.remove = (Set<Object>) linkedHashSet0;
      setFieldTransformer0.compose(setFieldTransformer1);
      assertFalse(setFieldTransformer1.equals((Object)setFieldTransformer0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      SetFieldTransformer setFieldTransformer1 = new SetFieldTransformer();
      assertTrue(setFieldTransformer1.equals((Object)setFieldTransformer0));
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      setFieldTransformer1.remove = (Set<Object>) linkedHashSet0;
      setFieldTransformer0.add = setFieldTransformer1.remove;
      FieldTransformer fieldTransformer0 = setFieldTransformer1.compose(setFieldTransformer0);
      setFieldTransformer1.compose(fieldTransformer0);
      assertFalse(setFieldTransformer1.equals((Object)setFieldTransformer0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      LinkedList<SequenceElement> linkedList0 = new LinkedList<SequenceElement>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      setFieldTransformer0.add = (Set<Object>) linkedHashSet0;
      TransformerSequence transformerSequence0 = new TransformerSequence(linkedList0);
      setFieldTransformer0.transformerSequence = transformerSequence0;
      // Undeclared exception!
      try { 
        setFieldTransformer0.compose(setFieldTransformer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      setFieldTransformer0.add = (Set<Object>) linkedHashSet0;
      FieldTransformer fieldTransformer0 = setFieldTransformer0.compose(setFieldTransformer0);
      assertNotSame(fieldTransformer0, setFieldTransformer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      setFieldTransformer0.clear = true;
      FieldTransformer fieldTransformer0 = setFieldTransformer0.compose(setFieldTransformer0);
      assertSame(fieldTransformer0, setFieldTransformer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      // Undeclared exception!
      try { 
        setFieldTransformer0.compose((FieldTransformer) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      TopFieldTransformer topFieldTransformer0 = TopFieldTransformer.v();
      FieldTransformer fieldTransformer0 = setFieldTransformer0.compose(topFieldTransformer0);
      assertSame(topFieldTransformer0, fieldTransformer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      IdentityFieldTransformer identityFieldTransformer0 = IdentityFieldTransformer.v();
      FieldTransformer fieldTransformer0 = setFieldTransformer0.compose(identityFieldTransformer0);
      assertSame(identityFieldTransformer0, fieldTransformer0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      NullFieldTransformer nullFieldTransformer0 = NullFieldTransformer.v();
      FieldTransformer fieldTransformer0 = setFieldTransformer0.compose(nullFieldTransformer0);
      assertSame(nullFieldTransformer0, fieldTransformer0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      setFieldTransformer0.add = (Set<Object>) linkedHashSet0;
      NullFieldValue nullFieldValue0 = NullFieldValue.v();
      FieldValue fieldValue0 = setFieldTransformer0.apply(nullFieldValue0);
      assertFalse(fieldValue0.hasTransformerSequence());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      setFieldTransformer0.remove = (Set<Object>) linkedHashSet0;
      SetFieldValue setFieldValue0 = new SetFieldValue();
      FieldValue fieldValue0 = setFieldTransformer0.apply(setFieldValue0);
      assertNotSame(fieldValue0, setFieldValue0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      setFieldTransformer0.clear = true;
      SetFieldValue setFieldValue0 = new SetFieldValue();
      FieldValue fieldValue0 = setFieldTransformer0.apply(setFieldValue0);
      assertFalse(fieldValue0.hasTransformerSequence());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SetFieldTransformer setFieldTransformer0 = new SetFieldTransformer();
      TransformerSequence transformerSequence0 = new TransformerSequence();
      setFieldTransformer0.transformerSequence = transformerSequence0;
      IntermediateFieldValue intermediateFieldValue0 = new IntermediateFieldValue();
      // Undeclared exception!
      try { 
        setFieldTransformer0.apply(intermediateFieldValue0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
