/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 02:30:47 GMT 2022
 */

package edu.psu.cse.siis.coal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.psu.cse.siis.coal.MethodDescription;
import edu.psu.cse.siis.coal.arguments.Argument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MethodDescription_ESTest extends MethodDescription_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Argument[] argumentArray0 = new Argument[0];
      MethodDescription methodDescription0 = new MethodDescription("PWg>F53]dQoK", argumentArray0);
      methodDescription0.setBaseClass("");
      String string0 = methodDescription0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Argument[] argumentArray0 = new Argument[9];
      MethodDescription methodDescription0 = new MethodDescription((String) null, argumentArray0);
      String string0 = methodDescription0.getBaseClass();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Argument[] argumentArray0 = new Argument[0];
      MethodDescription methodDescription0 = new MethodDescription("", argumentArray0);
      methodDescription0.setBaseClass("I\"A]LM3_lZ");
      String string0 = methodDescription0.getBaseClass();
      assertEquals("I\"A]LM3_lZ", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MethodDescription methodDescription0 = new MethodDescription(",", (Argument[]) null);
      Argument[] argumentArray0 = methodDescription0.getArguments();
      assertNull(argumentArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Argument[] argumentArray0 = new Argument[2];
      MethodDescription methodDescription0 = new MethodDescription("", argumentArray0);
      Argument[] argumentArray1 = methodDescription0.getArguments();
      assertEquals(2, argumentArray1.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Argument[] argumentArray0 = new Argument[4];
      MethodDescription methodDescription0 = new MethodDescription("N>(t", argumentArray0);
      // Undeclared exception!
      try { 
        methodDescription0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.psu.cse.siis.coal.MethodDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Argument[] argumentArray0 = new Argument[0];
      MethodDescription methodDescription0 = new MethodDescription("PWg>F53]dQoK", argumentArray0);
      String string0 = methodDescription0.toString();
      assertEquals("PWg>F53]dQoK", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Argument[] argumentArray0 = new Argument[0];
      MethodDescription methodDescription0 = new MethodDescription("PWg>F53]dQoK", argumentArray0);
      Argument[] argumentArray1 = methodDescription0.getArguments();
      assertSame(argumentArray0, argumentArray1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Argument[] argumentArray0 = new Argument[0];
      MethodDescription methodDescription0 = new MethodDescription("PWg>F53]dQoK", argumentArray0);
      methodDescription0.setArguments(argumentArray0);
      assertEquals("PWg>F53]dQoK", methodDescription0.getBaseClass());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Argument[] argumentArray0 = new Argument[0];
      MethodDescription methodDescription0 = new MethodDescription("", argumentArray0);
      String string0 = methodDescription0.getBaseClass();
      assertEquals("", string0);
  }
}
