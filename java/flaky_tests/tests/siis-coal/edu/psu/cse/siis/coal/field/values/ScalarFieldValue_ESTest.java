/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 02:26:45 GMT 2022
 */

package edu.psu.cse.siis.coal.field.values;

import org.junit.Test;
import static org.junit.Assert.*;
import edu.psu.cse.siis.coal.field.values.ScalarFieldValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScalarFieldValue_ESTest extends ScalarFieldValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ScalarFieldValue scalarFieldValue0 = new ScalarFieldValue((Object) null);
      Object object0 = scalarFieldValue0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      ScalarFieldValue scalarFieldValue0 = new ScalarFieldValue(object0);
      ScalarFieldValue scalarFieldValue1 = new ScalarFieldValue(scalarFieldValue0);
      boolean boolean0 = scalarFieldValue0.equals(scalarFieldValue1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      ScalarFieldValue scalarFieldValue0 = new ScalarFieldValue(object0);
      boolean boolean0 = scalarFieldValue0.equals(scalarFieldValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object object0 = new Object();
      ScalarFieldValue scalarFieldValue0 = new ScalarFieldValue(object0);
      boolean boolean0 = scalarFieldValue0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ScalarFieldValue scalarFieldValue0 = new ScalarFieldValue((Object) null);
      Class<Object> class0 = Object.class;
      Object object0 = scalarFieldValue0.getFieldValue(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object object0 = new Object();
      ScalarFieldValue scalarFieldValue0 = new ScalarFieldValue(object0);
      Class<Object> class0 = Object.class;
      Object object1 = scalarFieldValue0.getFieldValue(class0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object object0 = new Object();
      ScalarFieldValue scalarFieldValue0 = new ScalarFieldValue(object0);
      scalarFieldValue0.hashCode();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object object0 = new Object();
      ScalarFieldValue scalarFieldValue0 = new ScalarFieldValue(object0);
      String string0 = scalarFieldValue0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Object object0 = new Object();
      ScalarFieldValue scalarFieldValue0 = new ScalarFieldValue(object0);
      Object object1 = scalarFieldValue0.getValue();
      assertSame(object0, object1);
  }
}
