/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 22:55:06 GMT 2022
 */

package com.j256.simplelogging.backend;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplelogging.Level;
import com.j256.simplelogging.LogBackend;
import com.j256.simplelogging.backend.LogbackLogBackend;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.slf4j.Logger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LogbackLogBackend_ESTest extends LogbackLogBackend_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend((Logger) null);
      Level level0 = Level.TRACE;
      MockThrowable mockThrowable0 = new MockThrowable("DEBUG");
      // Undeclared exception!
      try { 
        logbackLogBackend0.log(level0, "DEBUG", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.backend.LogbackLogBackend", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Level level0 = Level.INFO;
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend((Logger) null);
      // Undeclared exception!
      try { 
        logbackLogBackend0.log(level0, "Xm{k8J");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.backend.LogbackLogBackend", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      Level level0 = Level.OFF;
      MockThrowable mockThrowable0 = new MockThrowable();
      logbackLogBackend0.log(level0, "Mkk", (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      MockThrowable mockThrowable0 = new MockThrowable();
      Level level0 = Level.INFO;
      logbackLogBackend0.log(level0, "", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      Level level0 = Level.FATAL;
      MockThrowable mockThrowable0 = new MockThrowable();
      logbackLogBackend0.log(level0, "", (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      Level level0 = Level.WARNING;
      MockThrowable mockThrowable0 = new MockThrowable();
      logbackLogBackend0.log(level0, "com.j256.simplelogging.backend.LogbackLogBackend$1", (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LogbackLogBackend.LogbackLogBackendFactory logbackLogBackend_LogbackLogBackendFactory0 = new LogbackLogBackend.LogbackLogBackendFactory();
      LogBackend logBackend0 = logbackLogBackend_LogbackLogBackendFactory0.createLogBackend("TRACE");
      Level level0 = Level.DEBUG;
      MockThrowable mockThrowable0 = new MockThrowable();
      logBackend0.log(level0, "", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      Level level0 = Level.ERROR;
      MockThrowable mockThrowable0 = new MockThrowable();
      logbackLogBackend0.log(level0, "DEBUG", (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LogbackLogBackend.LogbackLogBackendFactory logbackLogBackend_LogbackLogBackendFactory0 = new LogbackLogBackend.LogbackLogBackendFactory();
      LogBackend logBackend0 = logbackLogBackend_LogbackLogBackendFactory0.createLogBackend("oJK3=DI( hVK");
      Level level0 = Level.TRACE;
      MockThrowable mockThrowable0 = new MockThrowable("OFF");
      logBackend0.log(level0, "\"SonuTB4LUO=G#:za", (Throwable) mockThrowable0);
      assertEquals("OFF", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      Level level0 = Level.OFF;
      logbackLogBackend0.log(level0, "Mkk");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      Level level0 = Level.ERROR;
      logbackLogBackend0.log(level0, "com.j256.simplelogging.backend.LogbackLogBackend$1");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      Level level0 = Level.WARNING;
      logbackLogBackend0.log(level0, "");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      Level level0 = Level.DEBUG;
      logbackLogBackend0.log(level0, "WARNING");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LogbackLogBackend.LogbackLogBackendFactory logbackLogBackend_LogbackLogBackendFactory0 = new LogbackLogBackend.LogbackLogBackendFactory();
      LogBackend logBackend0 = logbackLogBackend_LogbackLogBackendFactory0.createLogBackend("oJK3=DI( hVK");
      Level level0 = Level.TRACE;
      logBackend0.log(level0, "OFF");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isInfoEnabled();
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      Level level0 = Level.OFF;
      boolean boolean0 = logbackLogBackend0.isLevelEnabled(level0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LogbackLogBackend.LogbackLogBackendFactory logbackLogBackend_LogbackLogBackendFactory0 = new LogbackLogBackend.LogbackLogBackendFactory();
      LogBackend logBackend0 = logbackLogBackend_LogbackLogBackendFactory0.createLogBackend("oJK3=DI( hVK");
      Level level0 = Level.INFO;
      boolean boolean0 = logBackend0.isLevelEnabled(level0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isErrorEnabled();
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      Level level0 = Level.FATAL;
      boolean boolean0 = logbackLogBackend0.isLevelEnabled(level0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isErrorEnabled();
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      Level level0 = Level.ERROR;
      boolean boolean0 = logbackLogBackend0.isLevelEnabled(level0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isDebugEnabled();
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      Level level0 = Level.DEBUG;
      boolean boolean0 = logbackLogBackend0.isLevelEnabled(level0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LogbackLogBackend.LogbackLogBackendFactory logbackLogBackend_LogbackLogBackendFactory0 = new LogbackLogBackend.LogbackLogBackendFactory();
      LogBackend logBackend0 = logbackLogBackend_LogbackLogBackendFactory0.createLogBackend("oJK3=DI( hVK");
      Level level0 = Level.TRACE;
      boolean boolean0 = logBackend0.isLevelEnabled(level0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LogbackLogBackend.LogbackLogBackendFactory logbackLogBackend_LogbackLogBackendFactory0 = new LogbackLogBackend.LogbackLogBackendFactory();
      LogBackend logBackend0 = logbackLogBackend_LogbackLogBackendFactory0.createLogBackend("");
      Level level0 = Level.FATAL;
      logBackend0.log(level0, "");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend((Logger) null);
      Level level0 = Level.WARNING;
      // Undeclared exception!
      try { 
        logbackLogBackend0.isLevelEnabled(level0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.backend.LogbackLogBackend", e);
      }
  }
}
