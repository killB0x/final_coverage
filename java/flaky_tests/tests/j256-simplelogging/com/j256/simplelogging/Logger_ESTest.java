/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 22:51:24 GMT 2022
 */

package com.j256.simplelogging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplelogging.Level;
import com.j256.simplelogging.LogBackend;
import com.j256.simplelogging.Logger;
import com.j256.simplelogging.backend.ConsoleLogBackend;
import com.j256.simplelogging.backend.JavaUtilLogBackend;
import com.j256.simplelogging.backend.LogbackLogBackend;
import com.j256.simplelogging.backend.NullLogBackend;
import com.j256.simplelogging.backend.Slf4jLoggingLogBackend;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Logger_ESTest extends Logger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isTraceEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Level level0 = Level.TRACE;
      logger1.log(level0, "", object1, (Object) null, object0, object0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      logger1.error("3s@VLE_YDD.[", object0, object0, object1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.debug((Throwable) mockThrowable0, "com.j256.simplelogging.backend.AndroidLogBackend", (Object) mockThrowable0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isDebugEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable("com.j256.simplelogging.Level");
      assertNotNull(mockThrowable0);
      
      logger1.debug("", (Object) mockThrowable0, (Object) slf4jLoggingLogBackend0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: com.j256.simplelogging.Level", mockThrowable0.toString());
      assertEquals("com.j256.simplelogging.Level", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      // Undeclared exception!
      try { 
        logger0.trace((Throwable) mockThrowable0, "~Jo.,$~k/E))<", object0, object1, object0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isWarnEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger1.warnArgs((Throwable) mockThrowable0, "5 Fo+tbn", (Object[]) null);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[1];
      logger0.warn((Throwable) mockThrowable0, "8;Z<JcqsWfdGx5", objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("null");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("[%w");
      assertNotNull(mockThrowable0);
      
      logger0.warn((Throwable) mockThrowable0, "lW>'ki=gU(DrP9Re1*", (Object) mockThrowable0, (Object) mockThrowable0, (Object) mockThrowable0, (Object) "[%w");
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: [%w", mockThrowable0.toString());
      assertEquals("[%w", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isWarnEnabled();
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      assertNotNull(logbackLogBackend0);
      
      Logger logger1 = new Logger(logbackLogBackend0);
      assertNotNull(logger1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger1.warn((Throwable) mockThrowable0, "L", object0, (Object) "com.j256.simplelogging.level", (Object) logbackLogBackend0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      logger0.warn((Throwable) mockThrowable0, "", (Object) null, object0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isWarnEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger1.warn((Throwable) mockThrowable0, "", (Object) slf4jLoggingLogBackend0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      logger0.warn((Throwable) null, "");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[2];
      logger0.warn("com.j256.simplelogging.backend.AndroidLogBackend$1", objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.warn("E5vO>ca9P&Py^nU6A", object0, (Object) null, object0, (Object) "com.j256.simplelogging.Logger");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isWarnEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger1.warn("S3", (Object) mockThrowable0, (Object) slf4jLoggingLogBackend0, (Object) slf4jLoggingLogBackend0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isWarnEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger1.warn("com.j256.simplelogging.file", object0, (Object) "com.j256.simplelogging.file");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isWarnEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      logger1.warn("", (Object) "SZ");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isWarnEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      logger1.warn("0sb3UJcY");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isTraceEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Object[] objectArray0 = new Object[1];
      logger1.traceArgs(">ddLEP/p#!BX}\u0005", objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isTraceEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger1.trace("", object0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.FATAL;
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      assertNotNull(mockThrowable0);
      
      logger0.logArgs(level0, (Throwable) mockThrowable0, "null", (Object[]) null);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.ERROR;
      Object[] objectArray0 = new Object[1];
      logger0.logArgs(level0, "com.j256.simplelogging.Logger", objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("] ");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Level level0 = Level.INFO;
      logger0.log(level0, (Throwable) mockThrowable0, (String) null, (Object[]) null);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.INFO;
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.log(level0, (Throwable) mockThrowable0, "com.j256.simplelogging.LoggerFactory", (Object) "com.j256.simplelogging.LoggerFactory", (Object) "com.j256.simplelogging.LoggerFactory", object0, (Object) "com.j256.simplelogging.LoggerFactory");
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Level level0 = Level.ERROR;
      logger1.log(level0, (Throwable) mockThrowable0, "UUw", (Object) null, object0, object0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isInfoEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Level level0 = Level.OFF;
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger1.log(level0, (Throwable) null, "", (Object) slf4jLoggingLogBackend0, object0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isInfoEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Level level0 = Level.OFF;
      logger1.log(level0, (Throwable) null, "");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("m\"R8(.d=X*c:]");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.DEBUG;
      Object[] objectArray0 = new Object[7];
      logger0.log(level0, "null", objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.TRACE;
      logger0.log(level0, "&{}", (Object) javaUtilLogBackend0, (Object) level0, (Object) level0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&A{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.TRACE;
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.log(level0, "&A{}", (Object) javaUtilLogBackend0, object0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.TRACE;
      logger0.log(level0, "", (Object) javaUtilLogBackend0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.ERROR;
      logger0.log(level0, "");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[9];
      logger0.infoArgs((Throwable) mockThrowable0, "g{\"I.'&Q", objectArray0);
      assertEquals(9, objectArray0.length);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      logger0.infoArgs("q\"mpwHr;E[!$g,1", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isInfoEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable("#&)rMjv");
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[6];
      logger1.info((Throwable) mockThrowable0, "", objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: #&)rMjv", mockThrowable0.toString());
      assertEquals("#&)rMjv", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isInfoEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockThrowable mockThrowable0 = new MockThrowable("0sb3UJcY");
      assertNotNull(mockThrowable0);
      
      logger1.info((Throwable) mockThrowable0, "null", object0, (Object) mockThrowable0, (Object) null, (Object) null);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 0sb3UJcY", mockThrowable0.toString());
      assertEquals("0sb3UJcY", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.info((Throwable) null, "", object0, (Object) "", (Object) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("] ");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.info((Throwable) mockThrowable0, "ME1o<|wx~Jm=a?u>AF", object0, (Object) "] ");
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("] ");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.info((Throwable) mockThrowable0, "] ", object0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isInfoEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger1.info((Throwable) mockThrowable0, "");
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isInfoEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Object[] objectArray0 = new Object[5];
      logger1.info("0sb3UJcY", objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isInfoEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      logger1.info("WARNING", (Object) logger0, (Object) logger1, (Object) slf4jLoggingLogBackend0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isInfoEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger1.info("com.j256.simplelogging.backend.AndroidLogBackend$1", object0, (Object) logger1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("] ");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      logger0.info("DEBUG", (Object) "] ");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      logger0.info("V5B63EDXNm71yL^74<");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("] ");
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[8];
      logger0.fatalArgs((Throwable) mockThrowable0, "] ", objectArray0);
      assertEquals(8, objectArray0.length);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ] ", mockThrowable0.toString());
      assertEquals("] ", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[3];
      logger1.fatal((Throwable) mockThrowable0, "{}", objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger1.fatal((Throwable) mockThrowable0, "-&xsyf", (Object) slf4jLoggingLogBackend0, object0, (Object) mockThrowable0, object0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.fatal((Throwable) mockThrowable0, "`d!#Vwp!?D", (Object) nullLogBackend0, object0, object0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("null");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("[%w");
      assertNotNull(mockThrowable0);
      
      logger0.fatal((Throwable) mockThrowable0, "com.j256.simplelogging.backend.ConsoleLogBackend", (Object) mockThrowable0, (Object) "com.j256.simplelogging.backend.ConsoleLogBackend");
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: [%w", mockThrowable0.toString());
      assertEquals("[%w", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger1.fatal((Throwable) mockThrowable0, "");
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      logger0.fatal("", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.fatal("q\"mpwHr;E[!$g,1", (Object) "q\"mpwHr;E[!$g,1", object0, (Object) null, object0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      logger1.fatal(".C~7m?;WDn,", object0, object0, object0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger0.fatal("V5B63EDXNm71yL^74<", (Object) nullLogBackend0, (Object) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger1.fatal("com.j256.simplelogging.file", object0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isErrorEnabled();
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      assertNotNull(logbackLogBackend0);
      
      Logger logger1 = new Logger(logbackLogBackend0);
      assertNotNull(logger1);
      
      logger1.fatal("|?{[{Wh");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable("~3+/");
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[2];
      logger1.errorArgs((Throwable) mockThrowable0, "", objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ~3+/", mockThrowable0.toString());
      assertEquals("~3+/", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Object[] objectArray0 = new Object[2];
      logger1.errorArgs("com.j256.simplelogging.Logger", objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger1.error((Throwable) mockThrowable0, (String) null, object0, object0, (Object) mockThrowable0, (Object) null);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger1.error((Throwable) mockThrowable0, "simplelogging", object0, object0, (Object) slf4jLoggingLogBackend0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isErrorEnabled();
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      assertNotNull(logbackLogBackend0);
      
      Logger logger1 = new Logger(logbackLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger1.error((Throwable) mockThrowable0, "/simpleLoggingLocalLog.properties", (Object) "com.j256.simplelogging.level", (Object) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger1.error((Throwable) mockThrowable0, "");
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[8];
      logger0.error("com.j256.simplelogging.Logger", objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.error("", (Object) nullLogBackend0, object0, (Object) nullLogBackend0, object0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("] ");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.error("/_=~Gk11'9m;]Z", object0, object0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      logger1.error((String) null, (Object) slf4jLoggingLogBackend0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("] ");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      logger0.error("'");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("IO exception reading the log properties file '/simpleLoggingLocalLog.properties': ");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.debug((Throwable) null, "2~oYHfLB", (Object) javaUtilLogBackend0, object0, (Object) "2~oYHfLB");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isDebugEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable("#&)rMjv");
      assertNotNull(mockThrowable0);
      
      logger1.debug((Throwable) mockThrowable0, " was not found");
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: #&)rMjv", mockThrowable0.toString());
      assertEquals("#&)rMjv", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("]A?@-");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.debug("]A?@-", object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(logger0).isInfoEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger1.info("", (Object) "", (Object) "", object0, object0);
      Level level0 = Level.INFO;
      boolean boolean0 = logger1.isLevelEnabled(level0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isInfoEnabled();
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      assertNotNull(logbackLogBackend0);
      
      Logger logger1 = new Logger(logbackLogBackend0);
      assertNotNull(logger1);
      
      Level level0 = Level.OFF;
      boolean boolean0 = logger1.isLevelEnabled(level0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      LogBackend logBackend0 = logger0.getLogBackend();
      assertNull(logBackend0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        logger0.warnArgs((Throwable) mockThrowable0, "5SHkB5o`w:nTO-e,", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.warnArgs("{}", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.warnArgs("{}", (Object[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) null, "uH2u", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, (String) null, (Object) null, object0, (Object) mockThrowable0, (Object) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, "$VALUES", object0, (Object) mockThrowable0, (Object) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, "", (Object) mockThrowable0, (Object) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, ", ", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, "&{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        logger0.warn("", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.warn("", (Object) "", object0, object0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.warn("_g_d^6dp3D?-Rw5B", (Object) null, (Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.warn("/|+[3j=Kq1^", (Object) null, (Object) "/|+[3j=Kq1^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.warn("", (Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.warn("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.traceArgs((Throwable) null, "|o@`V:)50ZO~_Dq|0S", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        logger0.trace((Throwable) mockThrowable0, "'", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.trace((Throwable) mockThrowable0, "", (Object) mockThrowable0, (Object) mockThrowable0, (Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable(", ");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.trace((Throwable) mockThrowable0, "]TYo", (Object) ", ", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("G");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.trace((Throwable) mockThrowable0, "G", (Object) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("p");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.trace((Throwable) mockThrowable0, ", ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.trace(", ", (Object) ", ", (Object) ", ", object0, (Object) ", ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.trace("", (Object) "", object0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.trace("(jFvd?G$uO%C@cV2", (Object) logger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.trace("b 1Lk&j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.OFF;
      MockThrowable mockThrowable0 = new MockThrowable("x");
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        logger0.logArgs(level0, (Throwable) mockThrowable0, "x", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.FATAL;
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        logger0.logArgs(level0, "=A/7~%V&<U}'qJ#~]<|", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.OFF;
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) mockThrowable0, "V#]j", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.INFO;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) null, "", object0, object0, object0, (Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.TRACE;
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) mockThrowable0, "8bV5&zyLZ", (Object) mockThrowable0, object0, (Object) "8bV5&zyLZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.OFF;
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) mockThrowable0, "", (Object) null, (Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("GRv{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Level level0 = Level.FATAL;
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) mockThrowable0, (String) null, (Object) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&.{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("&.{}");
      assertNotNull(mockThrowable0);
      
      Level level0 = Level.ERROR;
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) mockThrowable0, "&.{}", (Object) mockThrowable0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Level level0 = Level.FATAL;
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) mockThrowable0, "{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.FATAL;
      // Undeclared exception!
      try { 
        logger0.log(level0, "", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.ERROR;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, "com.j256.simplelogging.Logger", (Object) "com.j256.simplelogging.Logger", object0, (Object) "com.j256.simplelogging.Logger", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.ERROR;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, "", object0, (Object) level0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.TRACE;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, "I_M{}", (Object) "I_M{}", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.INFO;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, "{}", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.OFF;
      // Undeclared exception!
      try { 
        logger0.log(level0, "a3l0[.MSn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.infoArgs((Throwable) mockThrowable0, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&A{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.infoArgs("&A{}", (Object[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "com.j256.simplelogging.backend.CommonsLoggingLogBackend", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("?JeB<in*;]9Qh/@O");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "?JeB<in*;]9Qh/@O", (Object) mockThrowable0, (Object) null, (Object) "?JeB<in*;]9Qh/@O", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "-_Q>~2", (Object) "-_Q>~2", object0, (Object) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("com.j256.simplelogging.backend.JavaUtilLogBackend$1");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "com.j256.simplelogging.backend.JavaUtilLogBackend$1", (Object) mockThrowable0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "", (Object) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) null, "kGeA?<=^g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        logger0.info("oV*xO& u[$L'iE", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.info("{}", (Object) javaUtilLogBackend0, object0, (Object) "{}", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.info(", ", (Object) ", ", (Object) ", ", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.info(":V]+a'x*n", (Object) ":V]+a'x*n", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.info(" [", (Object) " [");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.info(" [");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.fatalArgs((Throwable) mockThrowable0, "=aZegQ{Aa_b;Z&", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.fatalArgs("", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.fatalArgs("{}", (Object[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) null, "90{}", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) mockThrowable0, "*", object0, (Object) mockThrowable0, (Object) null, (Object) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) mockThrowable0, "", (Object) mockThrowable0, object0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("[&.{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) mockThrowable0, (String) null, (Object) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable(".Ih['LX[|9IJVyn1z");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) mockThrowable0, ".Ih['LX[|9IJVyn1z", (Object) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("q");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) null, "q", object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) mockThrowable0, "}+ugK}6Z~9.<LGwE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        logger0.fatal("com.j256.simplelogging.level", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.fatal(":", (Object) ":", (Object) null, (Object) null, (Object) ":");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.fatal("", (Object) null, object0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.fatal("", (Object) "", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.fatal("com.j256.simplelogging.backend.AndroidLogBackend");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.errorArgs((Throwable) null, "com.j256.simplelogging.Logger", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.errorArgs("", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "uzK$J|^]<", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&A{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "&A{}", (Object[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "&{}", (Object) null, (Object) "&{}", (Object) mockThrowable0, (Object) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "", (Object) null, object0, (Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("W0ymY3_xM5)x");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "W0ymY3_xM5)x", (Object) null, (Object) "W0ymY3_xM5)x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "H", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "5V;=mO#cS_$:_ 0x~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        logger0.error("", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.error("yI x&0(2RQ (26 D", object0, (Object) null, (Object) "yI x&0(2RQ (26 D", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.error((String) null, (Object) null, (Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.error("com.j256.simplelogging.backend.Slf4jLoggingLogBackend", object0, (Object) "com.j256.simplelogging.backend.Slf4jLoggingLogBackend");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.error("null", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.error("}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("k~|NdMiw>  `A[`W");
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        logger0.debugArgs((Throwable) mockThrowable0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        logger0.debugArgs((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.debug((Throwable) mockThrowable0, "=F!IhCy", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.debug((Throwable) mockThrowable0, "zV@-l", object0, (Object) mockThrowable0, object0, (Object) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("*(fA\tN");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.debug((Throwable) mockThrowable0, "*(fA\tN", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isDebugEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        logger1.debug((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.debug("", object0, (Object) null, (Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.debug("{}", object0, object0, (Object) "{}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.debug(", ", (Object) ", ", (Object) ", ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.debug("z_9aRjK0qMxaHF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) mockThrowable0, "D]4~uo^c'{}A4?x", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("y]g?@Hg,");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "(Qz~%Wy<r%v{}'X", (Object) mockThrowable0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Level level0 = Level.FATAL;
      Logger.setGlobalLogLevel(level0);
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.error((Throwable) mockThrowable0, "&{}", object0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.INFO;
      Logger.setGlobalLogLevel(level0);
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "&{}", (Object) mockThrowable0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[0];
      logger0.trace("{}", objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("l{}");
      assertNotNull(javaUtilLogBackend0);
      
      MockThrowable mockThrowable0 = new MockThrowable("l{}");
      assertNotNull(mockThrowable0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.trace((Throwable) mockThrowable0, "l{}", object0, (Object) "l{}", (Object) "l{}");
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: l{}", mockThrowable0.toString());
      assertEquals("l{}", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("&{}");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "&{}", (Object) mockThrowable0, (Object) javaUtilLogBackend0, (Object) "&{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isWarnEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Level level0 = Level.WARNING;
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger1.log(level0, (Throwable) mockThrowable0, "{}", (Object) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&A{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.fatal("&A{}", (Object) "&A{}", (Object) javaUtilLogBackend0, (Object) "&A{}", object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("w[I-iQ'dIw]");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.getDefaultStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
      
      logger0.warnArgs("xd4y~fb){7_R", (Object[]) stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "{}", object0, object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("l{}");
      assertNotNull(javaUtilLogBackend0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "l{}", (Object) "l{}", (Object) mockThrowable0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("G{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      logger0.debugArgs("", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.fatalArgs((Throwable) null, "&{}", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, "&{}", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.fatal("{}", (Object) javaUtilLogBackend0, (Object) "{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("G{}");
      assertNotNull(javaUtilLogBackend0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[1];
      logger0.trace((Throwable) mockThrowable0, "G{}", objectArray0);
      assertEquals(1, objectArray0.length);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger0.debug((Throwable) mockThrowable0, "{}", (Object) nullLogBackend0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.ERROR;
      // Undeclared exception!
      try { 
        logger0.isLevelEnabled(level0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      logger0.trace((Throwable) mockThrowable0, "{}");
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      logger0.trace("{}");
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend(" {Q(");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable(" *{t(a");
      assertNotNull(mockThrowable0);
      
      logger0.trace((Throwable) mockThrowable0, " *{t(a", (Object) null);
      assertEquals(" *{t(a", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable:  *{t(a", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&{7");
      assertNotNull(javaUtilLogBackend0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.warn("&{7", (Object) mockThrowable0, object0, object0, (Object) javaUtilLogBackend0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("G{}");
      assertNotNull(javaUtilLogBackend0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      logger0.debug((Throwable) mockThrowable0, "G{}", (Object[]) null);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{8");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.fatal("{8");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.warn("&{}", (Object) mockThrowable0, (Object) "&{}", (Object) javaUtilLogBackend0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.INFO;
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        logger0.log(level0, "TC Tq?7wcm:/", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("DEBUG");
      assertNotNull(mockThrowable0);
      
      String string0 = "\\u(mrxT&3M[zRn";
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) mockThrowable0, string0, (Object) javaUtilLogBackend0, (Object) string0, (Object) "DEBUG", (Object) "");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.debug("{}", (Object) "{}", object0, object0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("G{}");
      assertNotNull(javaUtilLogBackend0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "G{}", (Object) "G{}", (Object) javaUtilLogBackend0, object0, object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("y]g?@Hg,");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("y]g?@Hg,");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.debug((Throwable) mockThrowable0, "y]g?@Hg,", object0, object0);
      assertEquals("y]g?@Hg,", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: y]g?@Hg,", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.warn("{}", object0, (Object) "{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("w[I-iQ'dIw]");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger0.trace("w[I-iQ'dIw]", (Object) null, (Object) logger0, (Object) null, (Object) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.traceArgs("6", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("G{}");
      assertNotNull(javaUtilLogBackend0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.FATAL;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) mockThrowable0, "g\"$y)3<n=&)P9)", (Object) mockThrowable0, (Object) javaUtilLogBackend0, object0, (Object) mockThrowable0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.error("&{}", (Object) "&{}", (Object) "&{}", (Object) "&{}", object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "{}", (Object) javaUtilLogBackend0, (Object) mockThrowable0, (Object) "{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.info("", (Object) javaUtilLogBackend0, (Object) "", (Object) javaUtilLogBackend0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&A{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.debug("&A{}", object0, (Object) "&A{}", object0, (Object) javaUtilLogBackend0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      MockThrowable mockThrowable0 = new MockThrowable("{}");
      assertNotNull(mockThrowable0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, "{}", object0, (Object) "{}", (Object) javaUtilLogBackend0, (Object) javaUtilLogBackend0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "&{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      LogBackend logBackend0 = logger1.getLogBackend();
      assertNotNull(logBackend0);
      assertSame(slf4jLoggingLogBackend0, logBackend0);
      assertSame(logBackend0, slf4jLoggingLogBackend0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.INFO;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, "{}", (Object) "{}", (Object) javaUtilLogBackend0, object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) null, "{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("{}");
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        logger0.warnArgs((Throwable) mockThrowable0, "", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("c");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.ERROR;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) null, "c", object0, object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.ERROR;
      MockThrowable mockThrowable0 = new MockThrowable("[`>sk-\"?N'34m-");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) mockThrowable0, "S|Uq0b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("w[I-iQ'dIw]");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      logger0.debug("");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.INFO;
      // Undeclared exception!
      try { 
        logger0.log(level0, "&{}", (Object) level0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("null");
      assertNotNull(javaUtilLogBackend0);
      
      Level level0 = Level.OFF;
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.fatal("null", (Object) level0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("G{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.ERROR;
      // Undeclared exception!
      try { 
        logger0.log(level0, "G{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.info("{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) null, "{}", (Object) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "{}", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.trace("", (Object) "", object0, (Object) "");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("A?BV");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.WARNING;
      // Undeclared exception!
      try { 
        logger0.log(level0, "A?BV", (Object) null, (Object) level0, (Object) null, (Object) level0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.info("{}", (Object) javaUtilLogBackend0, object0, (Object) "{}", object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[0];
      logger0.debugArgs((Throwable) mockThrowable0, "{}", objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.error("((OEow>Ood}N'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.error("{}", (Object) null, (Object) javaUtilLogBackend0, (Object) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("]#A)");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.infoArgs((Throwable) mockThrowable0, "(Qz~%Wy<r%v;[yB{}'X", (Object[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.error("NEhrt", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.debug("9Jg'2r", (Object) "9Jg'2r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&A{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger0.trace((Throwable) mockThrowable0, "&A{}", (Object) "&A{}", (Object) "&A{}", (Object) javaUtilLogBackend0, (Object) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.FATAL;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, "{}", (Object) javaUtilLogBackend0, object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("rPo%xxv!C)");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.fatal("", object0, (Object) "rPo%xxv!C)", (Object) javaUtilLogBackend0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.info("com.j256.simplelogging.Logger", (Object) javaUtilLogBackend0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("l{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.warn("l{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("]A?@-");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        logger0.infoArgs((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.OFF;
      MockThrowable mockThrowable0 = new MockThrowable("&{}");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) mockThrowable0, "&{}", (Object) mockThrowable0, object0, object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&{}");
      assertNotNull(javaUtilLogBackend0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) mockThrowable0, "", (Object) mockThrowable0, (Object) javaUtilLogBackend0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("D#I.");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, "F\"2Z|A_lV&8S2~{", (Object) "F\"2Z|A_lV&8S2~{", (Object) mockThrowable0, (Object) mockThrowable0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.error("&{}", (Object) "&{}", object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Object[] objectArray0 = new Object[3];
      logger1.fatalArgs("{}", objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Level level0 = Level.WARNING;
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger1.error((Throwable) mockThrowable0, (String) null, (Object) level0, (Object) logger0, object0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.ERROR;
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) mockThrowable0, "com.j256.simplelogging.Logger", (Object[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.debug((Throwable) mockThrowable0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) mockThrowable0, "{}", (Object) javaUtilLogBackend0, (Object) javaUtilLogBackend0, object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("G{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.OFF;
      // Undeclared exception!
      try { 
        logger0.logArgs(level0, "G{}", (Object[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.error("{}", (Object) "{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.info("{}", (Object[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.info("{}", (Object) "{}", (Object) javaUtilLogBackend0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        logger0.fatal("&", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("com.j256.simplelogging.backend.LogBackendUtil");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "com.j256.simplelogging.backend.LogBackendUtil");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("[&.{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, "[&.{}", (Object) "[&.{}", (Object) "[&.{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.trace((Throwable) mockThrowable0, "", (Object) "", object0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.trace("j( Q", (Object) "j( Q", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.debug((Throwable) mockThrowable0, "yna7/<%`0OPcE", (Object) "yna7/<%`0OPcE", (Object) null, (Object) "yna7/<%`0OPcE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("l{}");
      Logger logger0 = new Logger(javaUtilLogBackend0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        logger0.warn("", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("G{}");
      MockThrowable mockThrowable0 = new MockThrowable("G{}");
      Logger logger0 = new Logger(javaUtilLogBackend0);
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "G{}", (Object) "G{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("0y");
      Logger logger0 = new Logger(javaUtilLogBackend0);
      Object[] objectArray0 = new Object[1];
      logger0.debug("0y", objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("G{}");
      Logger logger0 = new Logger(javaUtilLogBackend0);
      // Undeclared exception!
      try { 
        logger0.warn("G{}", (Object) "G{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("G{}");
      Logger logger0 = new Logger(javaUtilLogBackend0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.errorArgs("G{}", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      MockThrowable mockThrowable0 = new MockThrowable();
      Object[] objectArray0 = new Object[3];
      logger1.error((Throwable) mockThrowable0, "{}", objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isTraceEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      logger1.traceArgs((Throwable) mockThrowable0, "{}", (Object[]) stackTraceElementArray0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, "^|'+zKB~[038cKc7eIU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplelogging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("&{}");
      Logger logger0 = new Logger(javaUtilLogBackend0);
      Object object0 = new Object();
      logger0.trace("&{}", object0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      Logger logger0 = new Logger(javaUtilLogBackend0);
      MockThrowable mockThrowable0 = new MockThrowable();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.errorArgs((Throwable) mockThrowable0, "{}", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      Logger logger0 = new Logger(javaUtilLogBackend0);
      Level level0 = Level.FATAL;
      MockThrowable mockThrowable0 = new MockThrowable();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.logArgs(level0, (Throwable) mockThrowable0, "{}", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      MockThrowable mockThrowable0 = new MockThrowable();
      Object object0 = new Object();
      logger1.fatal((Throwable) mockThrowable0, "{}", object0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      Logger logger0 = new Logger(nullLogBackend0);
      MockThrowable mockThrowable0 = new MockThrowable("null");
      Object object0 = new Object();
      logger0.debug((Throwable) mockThrowable0, "null", (Object) "null", (Object) nullLogBackend0, object0, (Object) "null");
      assertEquals("null", mockThrowable0.getMessage());
  }
}
