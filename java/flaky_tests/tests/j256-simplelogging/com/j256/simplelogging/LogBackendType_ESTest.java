/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 22:58:13 GMT 2022
 */

package com.j256.simplelogging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplelogging.LogBackend;
import com.j256.simplelogging.LogBackendType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LogBackendType_ESTest extends LogBackendType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LogBackendType[] logBackendTypeArray0 = LogBackendType.values();
      assertEquals(11, logBackendTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.valueOf("JAVA_UTIL");
      assertTrue(logBackendType0.isAvailable());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.valueOf("COMMONS_LOGGING");
      assertEquals(LogBackendType.COMMONS_LOGGING, logBackendType0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.NULL;
      LogBackend logBackend0 = logBackendType0.createLogBackend("");
      assertNotNull(logBackend0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.JAVA_UTIL;
      // Undeclared exception!
      try { 
        logBackendType0.createLogBackend((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.LOGBACK;
      // Undeclared exception!
      try { 
        logBackendType0.createLogBackend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name argument cannot be null
         //
         verifyException("ch.qos.logback.classic.LoggerContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.CONSOLE;
      boolean boolean0 = logBackendType0.isAvailable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.NULL;
      boolean boolean0 = logBackendType0.isAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.COMMONS_LOGGING;
      boolean boolean0 = logBackendType0.isAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.LOCAL;
      boolean boolean0 = logBackendType0.isAvailable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.COMMONS_LOGGING;
      // Undeclared exception!
      try { 
        logBackendType0.createLogBackend("C)84(gyJmY_Rmx");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.j256.simplelogging.backend.LocalLogBackend
         //
         verifyException("com.j256.simplelogging.backend.LocalLogBackend$LocalLogBackendFactory", e);
      }
  }
}
