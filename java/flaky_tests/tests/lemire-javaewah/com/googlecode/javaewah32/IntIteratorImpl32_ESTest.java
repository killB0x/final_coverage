/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 00:29:33 GMT 2022
 */

package com.googlecode.javaewah32;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.googlecode.javaewah32.EWAHCompressedBitmap32;
import com.googlecode.javaewah32.EWAHIterator32;
import com.googlecode.javaewah32.IntArray;
import com.googlecode.javaewah32.IntBufferWrapper;
import com.googlecode.javaewah32.IntIteratorImpl32;
import java.nio.IntBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntIteratorImpl32_ESTest extends IntIteratorImpl32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1048544;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      EWAHIterator32 eWAHIterator32_0 = EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_0);
      eWAHCompressedBitmap32_0.not();
      IntIteratorImpl32 intIteratorImpl32_0 = new IntIteratorImpl32(eWAHIterator32_0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1048544;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      EWAHIterator32 eWAHIterator32_0 = EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_0);
      IntIteratorImpl32 intIteratorImpl32_0 = new IntIteratorImpl32(eWAHIterator32_0);
      intIteratorImpl32_0.next();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntBuffer intBuffer0 = IntBuffer.allocate(37);
      IntBufferWrapper intBufferWrapper0 = new IntBufferWrapper(intBuffer0);
      EWAHIterator32 eWAHIterator32_0 = new EWAHIterator32(intBufferWrapper0);
      intBufferWrapper0.setLastWord(1131);
      IntIteratorImpl32 intIteratorImpl32_0 = new IntIteratorImpl32(eWAHIterator32_0);
      intIteratorImpl32_0.hasNext();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-4);
      intArray0[1] = 2;
      IntBuffer intBuffer0 = IntBuffer.wrap(intArray0);
      IntBufferWrapper intBufferWrapper0 = new IntBufferWrapper(intBuffer0);
      EWAHIterator32 eWAHIterator32_0 = new EWAHIterator32(intBufferWrapper0);
      IntIteratorImpl32 intIteratorImpl32_0 = new IntIteratorImpl32(eWAHIterator32_0);
      // Undeclared exception!
      try { 
        intIteratorImpl32_0.next();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntBuffer intBuffer0 = IntBuffer.allocate(5131);
      IntBufferWrapper intBufferWrapper0 = new IntBufferWrapper(intBuffer0, 5131);
      EWAHIterator32 eWAHIterator32_0 = new EWAHIterator32(intBufferWrapper0);
      IntIteratorImpl32 intIteratorImpl32_0 = new IntIteratorImpl32(eWAHIterator32_0);
      assertFalse(eWAHIterator32_0.hasNext());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntIteratorImpl32 intIteratorImpl32_0 = null;
      try {
        intIteratorImpl32_0 = new IntIteratorImpl32((EWAHIterator32) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.IntIteratorImpl32", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[0];
      IntBuffer intBuffer0 = IntBuffer.wrap(intArray0);
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32(intBuffer0);
      EWAHIterator32 eWAHIterator32_0 = EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_0);
      IntIteratorImpl32 intIteratorImpl32_0 = null;
      try {
        intIteratorImpl32_0 = new IntIteratorImpl32(eWAHIterator32_0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntBuffer intBuffer0 = IntBuffer.allocate(37);
      IntBufferWrapper intBufferWrapper0 = new IntBufferWrapper(intBuffer0);
      EWAHIterator32 eWAHIterator32_0 = new EWAHIterator32(intBufferWrapper0);
      intBufferWrapper0.setLastWord(37);
      IntIteratorImpl32 intIteratorImpl32_0 = new IntIteratorImpl32(eWAHIterator32_0);
      boolean boolean0 = intIteratorImpl32_0.moveToNext();
      assertFalse(eWAHIterator32_0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-4);
      intArray0[1] = 2;
      IntBuffer intBuffer0 = IntBuffer.wrap(intArray0);
      IntBufferWrapper intBufferWrapper0 = new IntBufferWrapper(intBuffer0);
      EWAHIterator32 eWAHIterator32_0 = new EWAHIterator32(intBufferWrapper0);
      IntIteratorImpl32 intIteratorImpl32_0 = new IntIteratorImpl32(eWAHIterator32_0);
      boolean boolean0 = intIteratorImpl32_0.moveToNext();
      assertFalse(eWAHIterator32_0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      EWAHIterator32 eWAHIterator32_0 = new EWAHIterator32(intArray0);
      IntIteratorImpl32 intIteratorImpl32_0 = new IntIteratorImpl32(eWAHIterator32_0);
      boolean boolean0 = intIteratorImpl32_0.moveToNext();
      assertFalse(eWAHIterator32_0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntBuffer intBuffer0 = IntBuffer.allocate(37);
      IntBufferWrapper intBufferWrapper0 = new IntBufferWrapper(intBuffer0);
      EWAHIterator32 eWAHIterator32_0 = new EWAHIterator32(intBufferWrapper0);
      intBufferWrapper0.setLastWord(1131);
      IntIteratorImpl32 intIteratorImpl32_0 = new IntIteratorImpl32(eWAHIterator32_0);
      int int0 = intIteratorImpl32_0.next();
      assertFalse(eWAHIterator32_0.hasNext());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      EWAHIterator32 eWAHIterator32_0 = new EWAHIterator32(intArray0);
      IntIteratorImpl32 intIteratorImpl32_0 = new IntIteratorImpl32(eWAHIterator32_0);
      int int0 = intIteratorImpl32_0.next();
      assertFalse(eWAHIterator32_0.hasNext());
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      EWAHIterator32 eWAHIterator32_0 = new EWAHIterator32(intArray0);
      IntIteratorImpl32 intIteratorImpl32_0 = new IntIteratorImpl32(eWAHIterator32_0);
      boolean boolean0 = intIteratorImpl32_0.hasNext();
      assertFalse(eWAHIterator32_0.hasNext());
      assertFalse(boolean0);
  }
}
