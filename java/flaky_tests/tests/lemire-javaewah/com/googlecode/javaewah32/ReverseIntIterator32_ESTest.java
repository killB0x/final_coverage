/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 00:14:02 GMT 2022
 */

package com.googlecode.javaewah32;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.googlecode.javaewah32.IntArray;
import com.googlecode.javaewah32.IntBufferWrapper;
import com.googlecode.javaewah32.ReverseEWAHIterator32;
import com.googlecode.javaewah32.ReverseIntIterator32;
import java.nio.IntBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReverseIntIterator32_ESTest extends ReverseIntIterator32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      IntBuffer intBuffer0 = IntBuffer.wrap(intArray0);
      IntBufferWrapper intBufferWrapper0 = new IntBufferWrapper(intBuffer0);
      ReverseEWAHIterator32 reverseEWAHIterator32_0 = new ReverseEWAHIterator32(intBufferWrapper0);
      ReverseIntIterator32 reverseIntIterator32_0 = new ReverseIntIterator32(reverseEWAHIterator32_0, 76);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntArray intArray0 = new IntArray(131078);
      intArray0.push_back(131078);
      intArray0.push_back(65543);
      ReverseEWAHIterator32 reverseEWAHIterator32_0 = new ReverseEWAHIterator32(intArray0);
      ReverseIntIterator32 reverseIntIterator32_0 = new ReverseIntIterator32(reverseEWAHIterator32_0, 131078);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[7];
      IntBuffer intBuffer0 = IntBuffer.wrap(intArray0);
      IntBufferWrapper intBufferWrapper0 = new IntBufferWrapper(intBuffer0);
      ReverseEWAHIterator32 reverseEWAHIterator32_0 = new ReverseEWAHIterator32(intBufferWrapper0);
      ReverseIntIterator32 reverseIntIterator32_0 = new ReverseIntIterator32(reverseEWAHIterator32_0, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntArray intArray0 = new IntArray(0);
      ReverseEWAHIterator32 reverseEWAHIterator32_0 = new ReverseEWAHIterator32(intArray0);
      reverseEWAHIterator32_0.previous();
      ReverseIntIterator32 reverseIntIterator32_0 = new ReverseIntIterator32(reverseEWAHIterator32_0, 0);
      reverseIntIterator32_0.next();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[2] = 2578;
      intArray0[5] = (-131071);
      IntBuffer intBuffer0 = IntBuffer.wrap(intArray0);
      IntBufferWrapper intBufferWrapper0 = new IntBufferWrapper(intBuffer0, 1751);
      ReverseEWAHIterator32 reverseEWAHIterator32_0 = new ReverseEWAHIterator32(intBufferWrapper0);
      reverseEWAHIterator32_0.previous();
      ReverseIntIterator32 reverseIntIterator32_0 = new ReverseIntIterator32(reverseEWAHIterator32_0, 1751);
      reverseIntIterator32_0.next();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReverseIntIterator32 reverseIntIterator32_0 = null;
      try {
        reverseIntIterator32_0 = new ReverseIntIterator32((ReverseEWAHIterator32) null, 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.ReverseIntIterator32", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[5] = (-131071);
      IntBuffer intBuffer0 = IntBuffer.wrap(intArray0);
      IntBufferWrapper intBufferWrapper0 = new IntBufferWrapper(intBuffer0, 1751);
      ReverseEWAHIterator32 reverseEWAHIterator32_0 = new ReverseEWAHIterator32(intBufferWrapper0);
      ReverseIntIterator32 reverseIntIterator32_0 = null;
      try {
        reverseIntIterator32_0 = new ReverseIntIterator32(reverseEWAHIterator32_0, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 32772
         //
         verifyException("java.nio.HeapIntBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      intArray0.push_back((-1168));
      ReverseEWAHIterator32 reverseEWAHIterator32_0 = new ReverseEWAHIterator32(intArray0);
      ReverseIntIterator32 reverseIntIterator32_0 = null;
      try {
        reverseIntIterator32_0 = new ReverseIntIterator32(reverseEWAHIterator32_0, (-1168));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 32768 out of bounds for length 4
         //
         verifyException("com.googlecode.javaewah32.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntArray intArray0 = new IntArray(131104);
      intArray0.push_back((-1168));
      ReverseEWAHIterator32 reverseEWAHIterator32_0 = new ReverseEWAHIterator32(intArray0);
      ReverseIntIterator32 reverseIntIterator32_0 = new ReverseIntIterator32(reverseEWAHIterator32_0, 3073);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntArray intArray0 = new IntArray(1);
      intArray0.push_back(1);
      ReverseEWAHIterator32 reverseEWAHIterator32_0 = new ReverseEWAHIterator32(intArray0);
      ReverseIntIterator32 reverseIntIterator32_0 = new ReverseIntIterator32(reverseEWAHIterator32_0, (-67489));
      assertEquals(0, reverseEWAHIterator32_0.position());
      assertFalse(reverseIntIterator32_0.hasNext());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 1751;
      intArray0[5] = (-131071);
      IntBuffer intBuffer0 = IntBuffer.wrap(intArray0);
      IntBufferWrapper intBufferWrapper0 = new IntBufferWrapper(intBuffer0, 1751);
      ReverseEWAHIterator32 reverseEWAHIterator32_0 = new ReverseEWAHIterator32(intBufferWrapper0);
      reverseEWAHIterator32_0.previous();
      ReverseIntIterator32 reverseIntIterator32_0 = new ReverseIntIterator32(reverseEWAHIterator32_0, 1751);
      boolean boolean0 = reverseIntIterator32_0.hasNext();
      assertEquals(1, reverseEWAHIterator32_0.position());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 131078;
      intArray0[1] = 131078;
      IntBuffer intBuffer0 = IntBuffer.wrap(intArray0);
      IntBufferWrapper intBufferWrapper0 = new IntBufferWrapper(intBuffer0);
      ReverseEWAHIterator32 reverseEWAHIterator32_0 = new ReverseEWAHIterator32(intBufferWrapper0);
      ReverseIntIterator32 reverseIntIterator32_0 = new ReverseIntIterator32(reverseEWAHIterator32_0, 131078);
      int int0 = reverseIntIterator32_0.next();
      assertEquals(0, reverseEWAHIterator32_0.position());
      assertEquals(131074, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[5] = (-131071);
      IntBuffer intBuffer0 = IntBuffer.wrap(intArray0);
      IntBufferWrapper intBufferWrapper0 = new IntBufferWrapper(intBuffer0, 1751);
      ReverseEWAHIterator32 reverseEWAHIterator32_0 = new ReverseEWAHIterator32(intBufferWrapper0);
      reverseEWAHIterator32_0.previous();
      ReverseIntIterator32 reverseIntIterator32_0 = new ReverseIntIterator32(reverseEWAHIterator32_0, 1751);
      boolean boolean0 = reverseIntIterator32_0.hasNext();
      assertEquals(0, reverseEWAHIterator32_0.position());
      assertFalse(boolean0);
  }
}
