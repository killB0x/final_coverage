/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 00:40:20 GMT 2022
 */

package com.googlecode.javaewah32;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.googlecode.javaewah32.BitmapStorage32;
import com.googlecode.javaewah32.EWAHCompressedBitmap32;
import com.googlecode.javaewah32.EWAHIterator32;
import com.googlecode.javaewah32.IteratingBufferedRunningLengthWord32;
import com.googlecode.javaewah32.IteratingRLW32;
import com.googlecode.javaewah32.XORIt;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XORIt_ESTest extends XORIt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<IteratingRLW32> linkedList0 = new LinkedList<IteratingRLW32>();
      XORIt xORIt0 = new XORIt(linkedList0, 655);
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = xORIt0.buffer;
      IteratingBufferedRunningLengthWord32 iteratingBufferedRunningLengthWord32_0 = new IteratingBufferedRunningLengthWord32(eWAHCompressedBitmap32_0);
      iteratingBufferedRunningLengthWord32_0.discharge((BitmapStorage32) eWAHCompressedBitmap32_0, (-1669));
      IteratingRLW32 iteratingRLW32_0 = eWAHCompressedBitmap32_0.getIteratingRLW();
      linkedList0.add(iteratingRLW32_0);
      linkedList0.add((IteratingRLW32) iteratingBufferedRunningLengthWord32_0);
      xORIt0.next();
      xORIt0.next();
      xORIt0.next();
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<IteratingRLW32> linkedList0 = new LinkedList<IteratingRLW32>();
      XORIt xORIt0 = new XORIt(linkedList0, 655);
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = xORIt0.buffer;
      IteratingBufferedRunningLengthWord32 iteratingBufferedRunningLengthWord32_0 = new IteratingBufferedRunningLengthWord32(eWAHCompressedBitmap32_0);
      iteratingBufferedRunningLengthWord32_0.discardLiteralWords(15);
      linkedList0.add((IteratingRLW32) iteratingBufferedRunningLengthWord32_0);
      xORIt0.next();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<IteratingRLW32> linkedList0 = new LinkedList<IteratingRLW32>();
      XORIt xORIt0 = new XORIt(linkedList0, 655);
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = xORIt0.buffer;
      IteratingBufferedRunningLengthWord32 iteratingBufferedRunningLengthWord32_0 = new IteratingBufferedRunningLengthWord32(eWAHCompressedBitmap32_0);
      iteratingBufferedRunningLengthWord32_0.discharge((BitmapStorage32) eWAHCompressedBitmap32_0, (-1679));
      IteratingRLW32 iteratingRLW32_0 = eWAHCompressedBitmap32_0.getIteratingRLW();
      linkedList0.add(iteratingRLW32_0);
      XORIt xORIt1 = new XORIt(linkedList0, 62815);
      // Undeclared exception!
      xORIt1.next();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<IteratingRLW32> linkedList0 = new LinkedList<IteratingRLW32>();
      linkedList0.add((IteratingRLW32) null);
      XORIt xORIt0 = new XORIt(linkedList0, 1);
      // Undeclared exception!
      try { 
        xORIt0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XORIt xORIt0 = new XORIt((LinkedList<IteratingRLW32>) null, 618);
      // Undeclared exception!
      try { 
        xORIt0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.XORIt", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XORIt xORIt0 = new XORIt((LinkedList<IteratingRLW32>) null, 268);
      // Undeclared exception!
      try { 
        xORIt0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.XORIt", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<IteratingRLW32> linkedList0 = new LinkedList<IteratingRLW32>();
      XORIt xORIt0 = null;
      try {
        xORIt0 = new XORIt(linkedList0, (-1669));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1669
         //
         verifyException("com.googlecode.javaewah32.XORIt", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<IteratingRLW32> linkedList0 = new LinkedList<IteratingRLW32>();
      XORIt xORIt0 = new XORIt(linkedList0, 1);
      EWAHIterator32 eWAHIterator32_0 = xORIt0.next();
      IteratingBufferedRunningLengthWord32 iteratingBufferedRunningLengthWord32_0 = new IteratingBufferedRunningLengthWord32(eWAHIterator32_0);
      linkedList0.add((IteratingRLW32) iteratingBufferedRunningLengthWord32_0);
      xORIt0.next();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<IteratingRLW32> linkedList0 = new LinkedList<IteratingRLW32>();
      XORIt xORIt0 = new XORIt(linkedList0, 1994);
      boolean boolean0 = xORIt0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<IteratingRLW32> linkedList0 = new LinkedList<IteratingRLW32>();
      XORIt xORIt0 = new XORIt(linkedList0, 655);
      XORIt xORIt1 = xORIt0.clone();
      assertNotSame(xORIt1, xORIt0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<IteratingRLW32> linkedList0 = new LinkedList<IteratingRLW32>();
      XORIt xORIt0 = new XORIt(linkedList0, 1);
      EWAHIterator32 eWAHIterator32_0 = xORIt0.next();
      IteratingBufferedRunningLengthWord32 iteratingBufferedRunningLengthWord32_0 = new IteratingBufferedRunningLengthWord32(eWAHIterator32_0);
      linkedList0.add((IteratingRLW32) iteratingBufferedRunningLengthWord32_0);
      assertEquals(0, iteratingBufferedRunningLengthWord32_0.size());
      
      boolean boolean0 = xORIt0.hasNext();
      assertTrue(boolean0);
  }
}
