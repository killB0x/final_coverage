/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 00:00:44 GMT 2022
 */

package com.googlecode.javaewah32;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.googlecode.javaewah32.BitmapStorage32;
import com.googlecode.javaewah32.EWAHCompressedBitmap32;
import com.googlecode.javaewah32.FastAggregation32;
import com.googlecode.javaewah32.IntArray;
import com.googlecode.javaewah32.IteratingRLW32;
import com.googlecode.javaewah32.NonEmptyVirtualStorage32;
import com.googlecode.javaewah32.ORIt;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.util.Iterator;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastAggregation32_ESTest extends FastAggregation32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[14];
      LinkedList<IteratingRLW32> linkedList0 = new LinkedList<IteratingRLW32>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ORIt oRIt0 = new ORIt(linkedList0, 0);
      assertEquals(0, linkedList0.size());
      assertNotNull(oRIt0);
      
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = oRIt0.buffer;
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = new EWAHCompressedBitmap32();
      assertEquals(16, eWAHCompressedBitmap32_1.serializedSizeInBytes());
      assertEquals(4, eWAHCompressedBitmap32_1.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_1.sizeInBits());
      assertNotNull(eWAHCompressedBitmap32_1);
      assertTrue(eWAHCompressedBitmap32_1.equals((Object)eWAHCompressedBitmap32_0));
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      boolean boolean0 = eWAHCompressedBitmap32_1.set(0);
      assertEquals(8, eWAHCompressedBitmap32_1.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap32_1.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap32_1.serializedSizeInBytes());
      assertFalse(eWAHCompressedBitmap32_1.equals((Object)eWAHCompressedBitmap32_0));
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertTrue(boolean0);
      assertNotSame(eWAHCompressedBitmap32_1, eWAHCompressedBitmap32_0);
      
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_1;
      // Undeclared exception!
      try { 
        EWAHCompressedBitmap32.xorWithContainer(eWAHCompressedBitmap32_0, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Iterator<EWAHCompressedBitmap32> iterator0 = (Iterator<EWAHCompressedBitmap32>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = FastAggregation32.xor(iterator0);
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      Iterator<EWAHCompressedBitmap32> iterator1 = (Iterator<EWAHCompressedBitmap32>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, false).when(iterator1).hasNext();
      doReturn(eWAHCompressedBitmap32_0, eWAHCompressedBitmap32_0, eWAHCompressedBitmap32_0).when(iterator1).next();
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = FastAggregation32.xor(iterator1);
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_1.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_1.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_1.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_1);
      assertTrue(eWAHCompressedBitmap32_1.equals((Object)eWAHCompressedBitmap32_0));
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertNotSame(eWAHCompressedBitmap32_0, eWAHCompressedBitmap32_1);
      assertNotSame(eWAHCompressedBitmap32_1, eWAHCompressedBitmap32_0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32((-1249));
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      boolean boolean0 = eWAHCompressedBitmap32_0.clear(32);
      assertEquals(33, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(boolean0);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[4];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[2] = eWAHCompressedBitmap32Array0[0];
      eWAHCompressedBitmap32Array0[3] = eWAHCompressedBitmap32_0;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = FastAggregation32.xor(eWAHCompressedBitmap32Array0);
      assertEquals(8, eWAHCompressedBitmap32_1.sizeInBytes());
      assertEquals(33, eWAHCompressedBitmap32_1.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap32_1.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_1);
      assertTrue(eWAHCompressedBitmap32_1.equals((Object)eWAHCompressedBitmap32_0));
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(4, eWAHCompressedBitmap32Array0.length);
      assertNotSame(eWAHCompressedBitmap32_1, eWAHCompressedBitmap32_0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Iterator<EWAHCompressedBitmap32> iterator0 = (Iterator<EWAHCompressedBitmap32>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = FastAggregation32.xor(iterator0);
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(32);
      assertEquals(32, byteBuffer0.remaining());
      assertEquals(32, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=32 cap=32]", byteBuffer0.toString());
      assertEquals(32, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertNotNull(byteBuffer0);
      
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = new EWAHCompressedBitmap32(byteBuffer0);
      assertEquals(32, byteBuffer0.remaining());
      assertEquals(32, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=32 cap=32]", byteBuffer0.toString());
      assertEquals(32, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(12, eWAHCompressedBitmap32_1.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_1.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_1.sizeInBits());
      assertNotNull(eWAHCompressedBitmap32_1);
      assertTrue(eWAHCompressedBitmap32_1.equals((Object)eWAHCompressedBitmap32_0));
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[3];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[2] = eWAHCompressedBitmap32_1;
      FastAggregation32.orToContainer(eWAHCompressedBitmap32_1, eWAHCompressedBitmap32Array0);
      assertEquals(32, byteBuffer0.remaining());
      assertEquals(32, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=32 cap=32]", byteBuffer0.toString());
      assertEquals(32, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(4, eWAHCompressedBitmap32_1.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_1.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_1.serializedSizeInBytes());
      assertTrue(eWAHCompressedBitmap32_1.equals((Object)eWAHCompressedBitmap32_0));
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(3, eWAHCompressedBitmap32Array0.length);
      assertNotSame(eWAHCompressedBitmap32_1, eWAHCompressedBitmap32_0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      boolean boolean0 = eWAHCompressedBitmap32_0.clear(416);
      assertEquals(417, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertTrue(boolean0);
      
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = FastAggregation32.xor(eWAHCompressedBitmap32Array0);
      assertEquals(417, eWAHCompressedBitmap32_1.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap32_1.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap32_1.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_1);
      assertTrue(eWAHCompressedBitmap32_1.equals((Object)eWAHCompressedBitmap32_0));
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(2, eWAHCompressedBitmap32Array0.length);
      assertNotSame(eWAHCompressedBitmap32_1, eWAHCompressedBitmap32_0);
      
      FastAggregation32.bufferedandWithContainer(eWAHCompressedBitmap32_0, 32, eWAHCompressedBitmap32Array0);
      assertEquals(865, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertTrue(eWAHCompressedBitmap32_0.equals((Object)eWAHCompressedBitmap32_1));
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(2, eWAHCompressedBitmap32Array0.length);
      assertNotSame(eWAHCompressedBitmap32_0, eWAHCompressedBitmap32_1);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array1 = new EWAHCompressedBitmap32[2];
      assertFalse(eWAHCompressedBitmap32Array1.equals((Object)eWAHCompressedBitmap32Array0));
      
      eWAHCompressedBitmap32Array1[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array1[1] = eWAHCompressedBitmap32_1;
      // Undeclared exception!
      try { 
        FastAggregation32.bufferedxorWithContainer(eWAHCompressedBitmap32_0, 32, eWAHCompressedBitmap32Array1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You can only reduce the size of the bitmap within the scope of the last word. To extend the bitmap, please call setSizeInbits(int,boolean): 865 1761
         //
         verifyException("com.googlecode.javaewah32.EWAHCompressedBitmap32", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[3];
      Iterator<EWAHCompressedBitmap32> iterator0 = (Iterator<EWAHCompressedBitmap32>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = FastAggregation32.or(iterator0);
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      // Undeclared exception!
      try { 
        FastAggregation32.bufferedxor(32, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.FastAggregation32$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      boolean boolean0 = eWAHCompressedBitmap32_0.set(47);
      assertEquals(20, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(48, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap32_0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(boolean0);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[8];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[2] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[3] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[4] = eWAHCompressedBitmap32_0;
      int[] intArray0 = new int[4];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      assertEquals(1, eWAHCompressedBitmap32_1.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap32_1.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap32_1.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_1);
      assertFalse(eWAHCompressedBitmap32_1.equals((Object)eWAHCompressedBitmap32_0));
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotSame(eWAHCompressedBitmap32_1, eWAHCompressedBitmap32_0);
      
      eWAHCompressedBitmap32Array0[5] = eWAHCompressedBitmap32_1;
      eWAHCompressedBitmap32Array0[6] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[7] = eWAHCompressedBitmap32_0;
      FastAggregation32.bufferedandWithContainer(eWAHCompressedBitmap32_0, 1, eWAHCompressedBitmap32Array0);
      assertEquals(80, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(12, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(24, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertFalse(eWAHCompressedBitmap32_0.equals((Object)eWAHCompressedBitmap32_1));
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertEquals(8, eWAHCompressedBitmap32Array0.length);
      assertNotSame(eWAHCompressedBitmap32_0, eWAHCompressedBitmap32_1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      eWAHCompressedBitmap32_0.addWord(1025, (-2301));
      assertEquals(8, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals((-2301), eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[1];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = FastAggregation32.xor(eWAHCompressedBitmap32Array0);
      assertEquals(8, eWAHCompressedBitmap32_1.sizeInBytes());
      assertEquals((-2301), eWAHCompressedBitmap32_1.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap32_1.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_1);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(1, eWAHCompressedBitmap32Array0.length);
      assertSame(eWAHCompressedBitmap32_1, eWAHCompressedBitmap32_0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Iterator<EWAHCompressedBitmap32> iterator0 = (Iterator<EWAHCompressedBitmap32>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = FastAggregation32.xor(iterator0);
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      eWAHCompressedBitmap32_0.setSizeInBitsWithinLastWord(3523);
      assertEquals(20, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(3523, eWAHCompressedBitmap32_0.sizeInBits());
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      Iterator<EWAHCompressedBitmap32> iterator1 = (Iterator<EWAHCompressedBitmap32>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(iterator1).hasNext();
      doReturn(eWAHCompressedBitmap32_0, eWAHCompressedBitmap32_0).when(iterator1).next();
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = FastAggregation32.xor(iterator1);
      assertEquals(20, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(3523, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap32_1.sizeInBytes());
      assertEquals(3523, eWAHCompressedBitmap32_1.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap32_1.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_1);
      assertTrue(eWAHCompressedBitmap32_1.equals((Object)eWAHCompressedBitmap32_0));
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertNotSame(eWAHCompressedBitmap32_0, eWAHCompressedBitmap32_1);
      assertNotSame(eWAHCompressedBitmap32_1, eWAHCompressedBitmap32_0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32((-1249));
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      boolean boolean0 = eWAHCompressedBitmap32_0.clear(32);
      assertEquals(33, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertTrue(boolean0);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[4];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[2] = eWAHCompressedBitmap32Array0[1];
      eWAHCompressedBitmap32Array0[3] = eWAHCompressedBitmap32_0;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = FastAggregation32.or(eWAHCompressedBitmap32Array0);
      assertEquals(33, eWAHCompressedBitmap32_1.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap32_1.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap32_1.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_1);
      assertTrue(eWAHCompressedBitmap32_1.equals((Object)eWAHCompressedBitmap32_0));
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(4, eWAHCompressedBitmap32Array0.length);
      assertNotSame(eWAHCompressedBitmap32_1, eWAHCompressedBitmap32_0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      eWAHCompressedBitmap32_0.addStreamOfEmptyWords(true, (-331));
      assertEquals((-10592), eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[1];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = FastAggregation32.or(eWAHCompressedBitmap32Array0);
      assertEquals(4, eWAHCompressedBitmap32_1.sizeInBytes());
      assertEquals((-10592), eWAHCompressedBitmap32_1.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_1.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_1);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap32Array0.length);
      assertSame(eWAHCompressedBitmap32_1, eWAHCompressedBitmap32_0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[1];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = FastAggregation32.or(eWAHCompressedBitmap32Array0);
      assertEquals(16, eWAHCompressedBitmap32_1.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_1.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_1.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_1);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(1, eWAHCompressedBitmap32Array0.length);
      assertSame(eWAHCompressedBitmap32_1, eWAHCompressedBitmap32_0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[1];
      eWAHCompressedBitmap32_0.addWord((-2052));
      assertEquals(8, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(32, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = FastAggregation32.bufferedxor(32, eWAHCompressedBitmap32Array0);
      assertEquals(8, eWAHCompressedBitmap32_1.sizeInBytes());
      assertEquals(32, eWAHCompressedBitmap32_1.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap32_1.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_1);
      assertTrue(eWAHCompressedBitmap32_1.equals((Object)eWAHCompressedBitmap32_0));
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap32Array0.length);
      assertNotSame(eWAHCompressedBitmap32_1, eWAHCompressedBitmap32_0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[0];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = FastAggregation32.bufferedxor(0, eWAHCompressedBitmap32Array0);
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertEquals(0, eWAHCompressedBitmap32Array0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[0];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = FastAggregation32.bufferedor(0, eWAHCompressedBitmap32Array0);
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertEquals(0, eWAHCompressedBitmap32Array0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      boolean boolean0 = eWAHCompressedBitmap32_0.set(32);
      assertEquals(20, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(33, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap32_0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(boolean0);
      
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = FastAggregation32.bufferedand(32, eWAHCompressedBitmap32Array0);
      assertEquals(64, eWAHCompressedBitmap32_1.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap32_1.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap32_1.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_1);
      assertTrue(eWAHCompressedBitmap32_1.equals((Object)eWAHCompressedBitmap32_0));
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertEquals(2, eWAHCompressedBitmap32Array0.length);
      assertNotSame(eWAHCompressedBitmap32_1, eWAHCompressedBitmap32_0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[0];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = FastAggregation32.bufferedand(127, eWAHCompressedBitmap32Array0);
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(0, eWAHCompressedBitmap32Array0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32_0.addStreamOfEmptyWords(true, (-93));
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals((-2976), eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      // Undeclared exception!
      try { 
        FastAggregation32.xor(eWAHCompressedBitmap32Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You can only reduce the size of the bitmap within the scope of the last word. To extend the bitmap, please call setSizeInbits(int,boolean): -2976 2094176
         //
         verifyException("com.googlecode.javaewah32.EWAHCompressedBitmap32", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[3];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      int[] intArray0 = new int[0];
      IntBuffer intBuffer0 = IntBuffer.wrap(intArray0);
      assertEquals(0, intBuffer0.capacity());
      assertEquals(0, intBuffer0.remaining());
      assertFalse(intBuffer0.isReadOnly());
      assertTrue(intBuffer0.hasArray());
      assertFalse(intBuffer0.isDirect());
      assertEquals("java.nio.HeapIntBuffer[pos=0 lim=0 cap=0]", intBuffer0.toString());
      assertEquals(0, intBuffer0.position());
      assertEquals(0, intBuffer0.arrayOffset());
      assertFalse(intBuffer0.hasRemaining());
      assertEquals(0, intBuffer0.limit());
      assertNotNull(intBuffer0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = new EWAHCompressedBitmap32(intBuffer0);
      assertEquals(0, intBuffer0.capacity());
      assertEquals(0, intBuffer0.remaining());
      assertFalse(intBuffer0.isReadOnly());
      assertTrue(intBuffer0.hasArray());
      assertFalse(intBuffer0.isDirect());
      assertEquals("java.nio.HeapIntBuffer[pos=0 lim=0 cap=0]", intBuffer0.toString());
      assertEquals(0, intBuffer0.position());
      assertEquals(0, intBuffer0.arrayOffset());
      assertFalse(intBuffer0.hasRemaining());
      assertEquals(0, intBuffer0.limit());
      assertEquals(4, eWAHCompressedBitmap32_1.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_1.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_1.sizeInBits());
      assertNotNull(eWAHCompressedBitmap32_1);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      eWAHCompressedBitmap32Array0[2] = eWAHCompressedBitmap32_1;
      // Undeclared exception!
      try { 
        FastAggregation32.xor(eWAHCompressedBitmap32Array0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.HeapIntBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[0];
      // Undeclared exception!
      try { 
        FastAggregation32.xor(eWAHCompressedBitmap32Array0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      Iterator<EWAHCompressedBitmap32> iterator0 = (Iterator<EWAHCompressedBitmap32>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(iterator0).hasNext();
      doReturn(eWAHCompressedBitmap32_0, eWAHCompressedBitmap32_0, eWAHCompressedBitmap32_0, eWAHCompressedBitmap32_0, eWAHCompressedBitmap32_0).when(iterator0).next();
      // Undeclared exception!
      FastAggregation32.xor(iterator0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastAggregation32.xor((Iterator<EWAHCompressedBitmap32>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.FastAggregation32", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NonEmptyVirtualStorage32 nonEmptyVirtualStorage32_0 = new NonEmptyVirtualStorage32();
      assertNotNull(nonEmptyVirtualStorage32_0);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      IntArray intArray0 = (IntArray)eWAHCompressedBitmap32_0.buffer;
      assertEquals(0, intArray0.getLastWord());
      assertEquals(1, intArray0.sizeInWords());
      assertNotNull(intArray0);
      
      eWAHCompressedBitmap32_0.addStreamOfNegatedLiteralWords(intArray0, 21, 21);
      assertEquals(672, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(100, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(88, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals((-1), intArray0.getLastWord());
      assertEquals(22, intArray0.sizeInWords());
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      // Undeclared exception!
      try { 
        FastAggregation32.orToContainer(nonEmptyVirtualStorage32_0, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      eWAHCompressedBitmap32_0.addStreamOfEmptyWords(true, (-93));
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals((-2976), eWAHCompressedBitmap32_0.sizeInBits());
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[8];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[2] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[3] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[4] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[5] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[6] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[7] = eWAHCompressedBitmap32_0;
      // Undeclared exception!
      try { 
        FastAggregation32.orToContainer(eWAHCompressedBitmap32_0, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You can only reduce the size of the bitmap within the scope of the last word. To extend the bitmap, please call setSizeInbits(int,boolean): -2976 2094176
         //
         verifyException("com.googlecode.javaewah32.EWAHCompressedBitmap32", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32_0.addStreamOfEmptyWords(true, (-1));
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals((-32), eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      // Undeclared exception!
      try { 
        FastAggregation32.or(eWAHCompressedBitmap32Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You can only reduce the size of the bitmap within the scope of the last word. To extend the bitmap, please call setSizeInbits(int,boolean): -32 2097120
         //
         verifyException("com.googlecode.javaewah32.EWAHCompressedBitmap32", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[6];
      // Undeclared exception!
      try { 
        FastAggregation32.or(eWAHCompressedBitmap32Array0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[4];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1, byteBuffer0.remaining());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals(1, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertNotNull(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      IntBuffer intBuffer0 = byteBuffer0.asIntBuffer();
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1, byteBuffer0.remaining());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals(1, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(intBuffer0.hasRemaining());
      assertEquals(0, intBuffer0.position());
      assertEquals(0, intBuffer0.capacity());
      assertEquals("java.nio.ByteBufferAsIntBufferB[pos=0 lim=0 cap=0]", intBuffer0.toString());
      assertEquals(0, intBuffer0.limit());
      assertFalse(intBuffer0.isDirect());
      assertFalse(intBuffer0.hasArray());
      assertFalse(intBuffer0.isReadOnly());
      assertEquals(0, intBuffer0.remaining());
      assertNotNull(intBuffer0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = new EWAHCompressedBitmap32(intBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1, byteBuffer0.remaining());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals(1, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(intBuffer0.hasRemaining());
      assertEquals(0, intBuffer0.position());
      assertEquals(0, intBuffer0.capacity());
      assertEquals("java.nio.ByteBufferAsIntBufferB[pos=0 lim=0 cap=0]", intBuffer0.toString());
      assertEquals(0, intBuffer0.limit());
      assertFalse(intBuffer0.isDirect());
      assertFalse(intBuffer0.hasArray());
      assertFalse(intBuffer0.isReadOnly());
      assertEquals(0, intBuffer0.remaining());
      assertEquals(16, eWAHCompressedBitmap32_1.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_1.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_1.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_1);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_1;
      eWAHCompressedBitmap32Array0[2] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[3] = eWAHCompressedBitmap32_0;
      // Undeclared exception!
      try { 
        FastAggregation32.or(eWAHCompressedBitmap32Array0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[0];
      // Undeclared exception!
      try { 
        FastAggregation32.or(eWAHCompressedBitmap32Array0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      Iterator<EWAHCompressedBitmap32> iterator0 = (Iterator<EWAHCompressedBitmap32>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(iterator0).hasNext();
      doReturn(eWAHCompressedBitmap32_0, eWAHCompressedBitmap32_0, eWAHCompressedBitmap32_0, eWAHCompressedBitmap32_0, eWAHCompressedBitmap32_0).when(iterator0).next();
      // Undeclared exception!
      FastAggregation32.or(iterator0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      eWAHCompressedBitmap32_0.addWord((-555), (-555));
      assertEquals((-555), eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      Iterator<EWAHCompressedBitmap32> iterator0 = (Iterator<EWAHCompressedBitmap32>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(iterator0).hasNext();
      doReturn(eWAHCompressedBitmap32_0, eWAHCompressedBitmap32_0).when(iterator0).next();
      // Undeclared exception!
      try { 
        FastAggregation32.or(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You can only reduce the size of the bitmap within the scope of the last word. To extend the bitmap, please call setSizeInbits(int,boolean): -555 32
         //
         verifyException("com.googlecode.javaewah32.EWAHCompressedBitmap32", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastAggregation32.or((Iterator<EWAHCompressedBitmap32>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.FastAggregation32", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      // Undeclared exception!
      try { 
        FastAggregation32.bufferedxorWithContainer(eWAHCompressedBitmap32Array0[0], 32, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.FastAggregation32$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[1];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      // Undeclared exception!
      try { 
        FastAggregation32.bufferedxorWithContainer(eWAHCompressedBitmap32_0, (-3566), eWAHCompressedBitmap32Array0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3566
         //
         verifyException("com.googlecode.javaewah32.FastAggregation32", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      boolean boolean0 = eWAHCompressedBitmap32_0.set(131071);
      assertEquals(131072, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(boolean0);
      
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      FastAggregation32.bufferedandWithContainer(eWAHCompressedBitmap32_0, 32, eWAHCompressedBitmap32Array0);
      assertEquals(262144, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertEquals(2, eWAHCompressedBitmap32Array0.length);
      
      // Undeclared exception!
      FastAggregation32.bufferedxor(131071, eWAHCompressedBitmap32Array0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[1];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32_0.addWord(0, 0);
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      // Undeclared exception!
      try { 
        FastAggregation32.bufferedxor(32, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You can only reduce the size of the bitmap within the scope of the last word. To extend the bitmap, please call setSizeInbits(int,boolean): 0 32
         //
         verifyException("com.googlecode.javaewah32.EWAHCompressedBitmap32", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[0];
      // Undeclared exception!
      try { 
        FastAggregation32.bufferedxor((-809), eWAHCompressedBitmap32Array0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -809
         //
         verifyException("com.googlecode.javaewah32.FastAggregation32", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[1];
      // Undeclared exception!
      try { 
        FastAggregation32.bufferedorWithContainer(eWAHCompressedBitmap32Array0[0], 32, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.FastAggregation32", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[0];
      // Undeclared exception!
      try { 
        FastAggregation32.bufferedorWithContainer((BitmapStorage32) null, (-1), eWAHCompressedBitmap32Array0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("com.googlecode.javaewah32.FastAggregation32", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-3626);
      IntBuffer intBuffer0 = IntBuffer.wrap(intArray0);
      assertTrue(intBuffer0.hasArray());
      assertEquals(1, intBuffer0.remaining());
      assertFalse(intBuffer0.isDirect());
      assertEquals(1, intBuffer0.capacity());
      assertEquals("java.nio.HeapIntBuffer[pos=0 lim=1 cap=1]", intBuffer0.toString());
      assertEquals(0, intBuffer0.position());
      assertEquals(1, intBuffer0.limit());
      assertEquals(0, intBuffer0.arrayOffset());
      assertFalse(intBuffer0.isReadOnly());
      assertTrue(intBuffer0.hasRemaining());
      assertNotNull(intBuffer0);
      assertArrayEquals(new int[] {(-3626)}, intArray0);
      assertEquals(1, intArray0.length);
      
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32(intBuffer0);
      assertTrue(intBuffer0.hasArray());
      assertEquals(1, intBuffer0.remaining());
      assertFalse(intBuffer0.isDirect());
      assertEquals(1, intBuffer0.capacity());
      assertEquals("java.nio.HeapIntBuffer[pos=0 lim=1 cap=1]", intBuffer0.toString());
      assertEquals(0, intBuffer0.position());
      assertEquals(1, intBuffer0.limit());
      assertEquals(0, intBuffer0.arrayOffset());
      assertFalse(intBuffer0.isReadOnly());
      assertTrue(intBuffer0.hasRemaining());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertArrayEquals(new int[] {(-3626)}, intArray0);
      assertEquals(1, intArray0.length);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[6];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[2] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[3] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[4] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[5] = eWAHCompressedBitmap32_0;
      // Undeclared exception!
      try { 
        FastAggregation32.bufferedorWithContainer(eWAHCompressedBitmap32_0, 46, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32_0.addStreamOfEmptyWords(true, (-93));
      assertEquals((-2976), eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      // Undeclared exception!
      FastAggregation32.bufferedor(704, eWAHCompressedBitmap32Array0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[0];
      // Undeclared exception!
      try { 
        FastAggregation32.bufferedor((-809), eWAHCompressedBitmap32Array0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -809
         //
         verifyException("com.googlecode.javaewah32.FastAggregation32", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      boolean boolean0 = eWAHCompressedBitmap32_0.set(131071);
      assertEquals(131072, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertTrue(boolean0);
      
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      FastAggregation32.bufferedandWithContainer(eWAHCompressedBitmap32_0, 131071, eWAHCompressedBitmap32Array0);
      assertEquals(16, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(262144, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(2, eWAHCompressedBitmap32Array0.length);
      
      // Undeclared exception!
      FastAggregation32.bufferedandWithContainer(eWAHCompressedBitmap32_0, 32, eWAHCompressedBitmap32Array0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      // Undeclared exception!
      try { 
        FastAggregation32.bufferedandWithContainer(eWAHCompressedBitmap32_0, 32, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.EWAHIterator32", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[1];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      // Undeclared exception!
      try { 
        FastAggregation32.bufferedandWithContainer(eWAHCompressedBitmap32_0, (-1640531535), eWAHCompressedBitmap32Array0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1640531535
         //
         verifyException("com.googlecode.javaewah32.FastAggregation32", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IntBuffer intBuffer0 = IntBuffer.allocate(0);
      assertFalse(intBuffer0.isDirect());
      assertEquals(0, intBuffer0.capacity());
      assertEquals(0, intBuffer0.arrayOffset());
      assertEquals(0, intBuffer0.limit());
      assertFalse(intBuffer0.hasRemaining());
      assertEquals(0, intBuffer0.position());
      assertFalse(intBuffer0.isReadOnly());
      assertTrue(intBuffer0.hasArray());
      assertEquals(0, intBuffer0.remaining());
      assertEquals("java.nio.HeapIntBuffer[pos=0 lim=0 cap=0]", intBuffer0.toString());
      assertNotNull(intBuffer0);
      
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32(intBuffer0);
      assertFalse(intBuffer0.isDirect());
      assertEquals(0, intBuffer0.capacity());
      assertEquals(0, intBuffer0.arrayOffset());
      assertEquals(0, intBuffer0.limit());
      assertFalse(intBuffer0.hasRemaining());
      assertEquals(0, intBuffer0.position());
      assertFalse(intBuffer0.isReadOnly());
      assertTrue(intBuffer0.hasArray());
      assertEquals(0, intBuffer0.remaining());
      assertEquals("java.nio.HeapIntBuffer[pos=0 lim=0 cap=0]", intBuffer0.toString());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[5];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      // Undeclared exception!
      try { 
        FastAggregation32.bufferedandWithContainer(eWAHCompressedBitmap32_0, 1322, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.HeapIntBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      boolean boolean0 = eWAHCompressedBitmap32_0.set(131071);
      assertEquals(8, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(131072, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertTrue(boolean0);
      
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      FastAggregation32.bufferedandWithContainer(eWAHCompressedBitmap32_0, 32, eWAHCompressedBitmap32Array0);
      assertEquals(28, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(262144, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(2, eWAHCompressedBitmap32Array0.length);
      
      // Undeclared exception!
      FastAggregation32.bufferedand(219, eWAHCompressedBitmap32Array0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[1];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      // Undeclared exception!
      try { 
        FastAggregation32.bufferedand((-1239), eWAHCompressedBitmap32Array0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1239
         //
         verifyException("com.googlecode.javaewah32.FastAggregation32", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      boolean boolean0 = eWAHCompressedBitmap32_0.set(32);
      assertEquals(8, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(33, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(boolean0);
      
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      NonEmptyVirtualStorage32 nonEmptyVirtualStorage32_0 = new NonEmptyVirtualStorage32();
      assertNotNull(nonEmptyVirtualStorage32_0);
      
      // Undeclared exception!
      try { 
        FastAggregation32.bufferedorWithContainer(nonEmptyVirtualStorage32_0, 39, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[8];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[2] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[3] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[4] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[5] = eWAHCompressedBitmap32Array0[4];
      eWAHCompressedBitmap32Array0[6] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[7] = eWAHCompressedBitmap32_0;
      FastAggregation32.xorToContainer(eWAHCompressedBitmap32_0, eWAHCompressedBitmap32Array0);
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertEquals(8, eWAHCompressedBitmap32Array0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[1];
      // Undeclared exception!
      try { 
        FastAggregation32.xorToContainer(eWAHCompressedBitmap32Array0[0], eWAHCompressedBitmap32Array0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // We need at least two bitmaps
         //
         verifyException("com.googlecode.javaewah32.FastAggregation32", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Iterator<EWAHCompressedBitmap32> iterator0 = (Iterator<EWAHCompressedBitmap32>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = FastAggregation32.or(iterator0);
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[4];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      // Undeclared exception!
      try { 
        FastAggregation32.bufferedor(32, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.FastAggregation32$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[1];
      // Undeclared exception!
      try { 
        FastAggregation32.orToContainer(eWAHCompressedBitmap32_0, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // We need at least two bitmaps
         //
         verifyException("com.googlecode.javaewah32.FastAggregation32", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap32_0);
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      FastAggregation32.bufferedxorWithContainer(eWAHCompressedBitmap32_0, 32, eWAHCompressedBitmap32Array0);
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap32_0.sizeInBits());
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap32.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
      assertEquals(2, eWAHCompressedBitmap32Array0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32_0.addStreamOfEmptyWords(true, 32);
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = FastAggregation32.bufferedor(704, eWAHCompressedBitmap32Array0);
      assertEquals(1024, eWAHCompressedBitmap32_1.sizeInBits());
      assertTrue(eWAHCompressedBitmap32_1.equals((Object)eWAHCompressedBitmap32_0));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[1];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32_0.set(131071);
      // Undeclared exception!
      try { 
        FastAggregation32.bufferedorWithContainer(eWAHCompressedBitmap32_0, 32, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You can only reduce the size of the bitmap within the scope of the last word. To extend the bitmap, please call setSizeInbits(int,boolean): 131072 262144
         //
         verifyException("com.googlecode.javaewah32.EWAHCompressedBitmap32", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[1];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      FastAggregation32.bufferedorWithContainer(eWAHCompressedBitmap32_0, 32, eWAHCompressedBitmap32Array0);
      assertEquals(4, eWAHCompressedBitmap32_0.sizeInBytes());
      assertEquals(16, eWAHCompressedBitmap32_0.serializedSizeInBytes());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[1];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32_0.set(131071);
      FastAggregation32.bufferedandWithContainer(eWAHCompressedBitmap32_0, 32, eWAHCompressedBitmap32Array0);
      // Undeclared exception!
      FastAggregation32.bufferedorWithContainer(eWAHCompressedBitmap32_0, 32, eWAHCompressedBitmap32Array0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[1];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      FastAggregation32.bufferedandWithContainer(eWAHCompressedBitmap32_0, 32, eWAHCompressedBitmap32Array0);
      assertEquals(32, EWAHCompressedBitmap32.WORD_IN_BITS);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      FastAggregation32.xorToContainer(eWAHCompressedBitmap32Array0[0], eWAHCompressedBitmap32Array0);
      assertEquals(2, eWAHCompressedBitmap32Array0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      // Undeclared exception!
      try { 
        FastAggregation32.xorToContainer(eWAHCompressedBitmap32Array0[1], eWAHCompressedBitmap32Array0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      Iterator<EWAHCompressedBitmap32> iterator0 = (Iterator<EWAHCompressedBitmap32>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(iterator0).hasNext();
      doReturn(eWAHCompressedBitmap32_0, eWAHCompressedBitmap32_0).when(iterator0).next();
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = FastAggregation32.or(iterator0);
      assertNotSame(eWAHCompressedBitmap32_1, eWAHCompressedBitmap32_0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Iterator<EWAHCompressedBitmap32> iterator0 = (Iterator<EWAHCompressedBitmap32>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = FastAggregation32.xor(iterator0);
      eWAHCompressedBitmap32_0.addStreamOfEmptyWords(true, (-2187));
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[6];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[2] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[3] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[4] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[5] = eWAHCompressedBitmap32_0;
      // Undeclared exception!
      try { 
        FastAggregation32.xorToContainer(eWAHCompressedBitmap32_0, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You can only reduce the size of the bitmap within the scope of the last word. To extend the bitmap, please call setSizeInbits(int,boolean): -69984 2027168
         //
         verifyException("com.googlecode.javaewah32.EWAHCompressedBitmap32", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = FastAggregation32.xor(eWAHCompressedBitmap32Array0);
      assertNotSame(eWAHCompressedBitmap32_1, eWAHCompressedBitmap32_0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      // Undeclared exception!
      try { 
        FastAggregation32.xor(eWAHCompressedBitmap32Array0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      // Undeclared exception!
      try { 
        FastAggregation32.orToContainer(eWAHCompressedBitmap32_0, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[2];
      // Undeclared exception!
      try { 
        FastAggregation32.bufferedand(32, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.EWAHIterator32", e);
      }
  }
}
