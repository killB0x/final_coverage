/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 00:04:26 GMT 2022
 */

package com.googlecode.javaewah32;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.googlecode.javaewah32.ChunkIteratorImpl32;
import com.googlecode.javaewah32.EWAHCompressedBitmap32;
import com.googlecode.javaewah32.EWAHIterator32;
import com.googlecode.javaewah32.IntArray;
import com.googlecode.javaewah32.IntBufferWrapper;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChunkIteratorImpl32_ESTest extends ChunkIteratorImpl32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[3];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32(128);
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[3] = 128;
      intArray0[4] = 32;
      intArray0[5] = 0;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      eWAHCompressedBitmap32Array0[2] = eWAHCompressedBitmap32_1;
      eWAHCompressedBitmap32_1.toDebugString();
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_2 = EWAHCompressedBitmap32.and(eWAHCompressedBitmap32Array0);
      eWAHCompressedBitmap32_2.trim();
      eWAHCompressedBitmap32_2.addStreamOfEmptyWords(true, 32);
      EWAHIterator32 eWAHIterator32_0 = EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_2);
      eWAHIterator32_0.clone();
      EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_0);
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, 2293);
      chunkIteratorImpl32_0.move(469);
      chunkIteratorImpl32_0.move(0);
      chunkIteratorImpl32_0.nextBit();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[0];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 32;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 32;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = EWAHCompressedBitmap32.bitmapOf(intArray1);
      eWAHCompressedBitmap32_0.toDebugString();
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[9];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32_0.shift(32);
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_1;
      eWAHCompressedBitmap32Array0[2] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[3] = eWAHCompressedBitmap32_1;
      eWAHCompressedBitmap32Array0[4] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[5] = eWAHCompressedBitmap32_1;
      eWAHCompressedBitmap32Array0[6] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[7] = eWAHCompressedBitmap32_1;
      eWAHCompressedBitmap32Array0[8] = eWAHCompressedBitmap32_0;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_2 = EWAHCompressedBitmap32.and(eWAHCompressedBitmap32Array0);
      EWAHIterator32 eWAHIterator32_0 = EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_2);
      eWAHIterator32_0.clone();
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, 0);
      ChunkIteratorImpl32 chunkIteratorImpl32_1 = new ChunkIteratorImpl32(eWAHIterator32_0, 113);
      chunkIteratorImpl32_1.move(0);
      // Undeclared exception!
      try { 
        chunkIteratorImpl32_0.nextBit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.ChunkIteratorImpl32", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(389);
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32(byteBuffer0);
      EWAHIterator32 eWAHIterator32_0 = EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_0);
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, 1585);
      int int0 = 2086;
      chunkIteratorImpl32_0.move(int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      EWAHIterator32 eWAHIterator32_0 = eWAHCompressedBitmap32_0.getEWAHIterator();
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, 32);
      chunkIteratorImpl32_0.move(430);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[3];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32(128);
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[3] = 128;
      intArray0[4] = 32;
      intArray0[5] = 0;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      eWAHCompressedBitmap32Array0[2] = eWAHCompressedBitmap32_1;
      eWAHCompressedBitmap32_1.toDebugString();
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_2 = EWAHCompressedBitmap32.and(eWAHCompressedBitmap32Array0);
      eWAHCompressedBitmap32_2.trim();
      eWAHCompressedBitmap32_2.addStreamOfEmptyWords(true, 32);
      EWAHIterator32 eWAHIterator32_0 = EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_2);
      eWAHIterator32_0.clone();
      EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_0);
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, 2293);
      chunkIteratorImpl32_0.nextBit();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32(1);
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[5];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[2] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32_0.set(1);
      eWAHCompressedBitmap32Array0[3] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[4] = eWAHCompressedBitmap32_0;
      EWAHCompressedBitmap32.and(eWAHCompressedBitmap32Array0);
      EWAHIterator32 eWAHIterator32_0 = EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_0);
      EWAHIterator32 eWAHIterator32_1 = EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_0);
      EWAHIterator32 eWAHIterator32_2 = eWAHIterator32_0.clone();
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_2, 32);
      chunkIteratorImpl32_0.move();
      chunkIteratorImpl32_0.move((-1));
      eWAHIterator32_0.clone();
      chunkIteratorImpl32_0.hasNext();
      int[] intArray0 = new int[2];
      intArray0[0] = 32;
      intArray0[1] = 1;
      EWAHCompressedBitmap32.bitmapOf(intArray0);
      eWAHCompressedBitmap32_0.toDebugString();
      EWAHCompressedBitmap32.and(eWAHCompressedBitmap32Array0);
      EWAHIterator32 eWAHIterator32_3 = EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_0);
      eWAHIterator32_0.clone();
      ChunkIteratorImpl32 chunkIteratorImpl32_1 = new ChunkIteratorImpl32(eWAHIterator32_3, 32);
      chunkIteratorImpl32_1.move(32);
      ChunkIteratorImpl32 chunkIteratorImpl32_2 = new ChunkIteratorImpl32(eWAHIterator32_1, 182);
      chunkIteratorImpl32_2.nextBit();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      EWAHIterator32 eWAHIterator32_0 = EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_0);
      eWAHIterator32_0.next();
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, 32);
      chunkIteratorImpl32_0.move();
      chunkIteratorImpl32_0.hasNext();
      chunkIteratorImpl32_0.move((-157));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[0];
      EWAHCompressedBitmap32.bitmapOf(intArray0);
      IntBuffer intBuffer0 = IntBuffer.wrap(intArray0);
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32(intBuffer0);
      EWAHIterator32 eWAHIterator32_0 = eWAHCompressedBitmap32_0.getEWAHIterator();
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = null;
      try {
        chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.HeapIntBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntBuffer intBuffer0 = IntBuffer.allocate(0);
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32(intBuffer0);
      EWAHIterator32 eWAHIterator32_0 = EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_0);
      int int0 = 32;
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = null;
      try {
        chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.HeapIntBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      EWAHIterator32 eWAHIterator32_0 = new EWAHIterator32(intArray0);
      eWAHIterator32_0.next();
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, (-1171));
      chunkIteratorImpl32_0.move(16);
      chunkIteratorImpl32_0.move();
      eWAHIterator32_0.literalWords();
      chunkIteratorImpl32_0.move(0);
      chunkIteratorImpl32_0.move(1);
      chunkIteratorImpl32_0.nextLength();
      chunkIteratorImpl32_0.nextLength();
      chunkIteratorImpl32_0.move();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntBuffer intBuffer0 = null;
      IntBufferWrapper intBufferWrapper0 = new IntBufferWrapper((IntBuffer) null, (-2807));
      EWAHIterator32 eWAHIterator32_0 = new EWAHIterator32(intBufferWrapper0);
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, 980);
      chunkIteratorImpl32_0.nextLength();
      // Undeclared exception!
      try { 
        intBufferWrapper0.getWord((-2807));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.IntBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[3];
      int int0 = 128;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32(128);
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      int[] intArray0 = new int[1];
      intArray0[0] = 32;
      EWAHIterator32 eWAHIterator32_0 = eWAHCompressedBitmap32_0.getEWAHIterator();
      EWAHIterator32 eWAHIterator32_1 = eWAHIterator32_0.clone();
      int int1 = 1847;
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_1, int1);
      int int2 = 620;
      chunkIteratorImpl32_0.move(int2);
      chunkIteratorImpl32_0.move();
      chunkIteratorImpl32_0.nextBit();
      int int3 = 609;
      chunkIteratorImpl32_0.move(int3);
      chunkIteratorImpl32_0.move(int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 128;
      intArray0[1] = 128;
      intArray0[2] = 128;
      intArray0[3] = 128;
      intArray0[4] = 128;
      intArray0[5] = 128;
      intArray0[6] = 128;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      EWAHIterator32 eWAHIterator32_0 = eWAHCompressedBitmap32_0.getEWAHIterator();
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, 128);
      chunkIteratorImpl32_0.nextBit();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[0];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      EWAHIterator32 eWAHIterator32_0 = eWAHCompressedBitmap32_0.getEWAHIterator();
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, 32);
      chunkIteratorImpl32_0.move();
      // Undeclared exception!
      try { 
        chunkIteratorImpl32_0.nextBit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.ChunkIteratorImpl32", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      EWAHIterator32 eWAHIterator32_0 = new EWAHIterator32(intArray0);
      eWAHIterator32_0.literalWords();
      eWAHIterator32_0.literalWords();
      eWAHIterator32_0.next();
      eWAHIterator32_0.clone();
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, 1);
      // Undeclared exception!
      try { 
        chunkIteratorImpl32_0.nextBit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.ChunkIteratorImpl32", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      EWAHIterator32 eWAHIterator32_0 = eWAHCompressedBitmap32_0.getEWAHIterator();
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, 32);
      chunkIteratorImpl32_0.nextBit();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32(451);
      EWAHIterator32 eWAHIterator32_0 = eWAHCompressedBitmap32_0.getEWAHIterator();
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, 0);
      chunkIteratorImpl32_0.move();
      chunkIteratorImpl32_0.hasNext();
      chunkIteratorImpl32_0.hasNext();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[1];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32(0);
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = EWAHCompressedBitmap32.threshold(0, eWAHCompressedBitmap32Array0);
      EWAHIterator32 eWAHIterator32_0 = EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_1);
      EWAHIterator32 eWAHIterator32_1 = eWAHIterator32_0.clone();
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_1, (-1638));
      chunkIteratorImpl32_0.hasNext();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      EWAHIterator32 eWAHIterator32_0 = eWAHCompressedBitmap32_0.getEWAHIterator();
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, 32);
      chunkIteratorImpl32_0.hasNext();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      EWAHIterator32 eWAHIterator32_0 = eWAHCompressedBitmap32_0.getEWAHIterator();
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, 32);
      chunkIteratorImpl32_0.nextBit();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[0];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      EWAHIterator32 eWAHIterator32_0 = eWAHCompressedBitmap32_0.getEWAHIterator();
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, 32);
      chunkIteratorImpl32_0.nextBit();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32(1);
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[5];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[2] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32_0.set(1);
      eWAHCompressedBitmap32Array0[3] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[4] = eWAHCompressedBitmap32_0;
      EWAHCompressedBitmap32.and(eWAHCompressedBitmap32Array0);
      EWAHIterator32 eWAHIterator32_0 = EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_0);
      EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_0);
      EWAHIterator32 eWAHIterator32_1 = eWAHIterator32_0.clone();
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_1, 32);
      chunkIteratorImpl32_0.move();
      chunkIteratorImpl32_0.move((-1));
      eWAHIterator32_0.clone();
      chunkIteratorImpl32_0.hasNext();
      chunkIteratorImpl32_0.move(0);
      eWAHCompressedBitmap32_0.orToContainer(eWAHCompressedBitmap32_0, eWAHCompressedBitmap32_0);
      chunkIteratorImpl32_0.move();
      eWAHIterator32_1.clone();
      chunkIteratorImpl32_0.move((-24));
      chunkIteratorImpl32_0.nextLength();
      chunkIteratorImpl32_0.move(0);
      EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_0);
      chunkIteratorImpl32_0.nextBit();
      chunkIteratorImpl32_0.nextBit();
      chunkIteratorImpl32_0.move((-1));
      chunkIteratorImpl32_0.move();
      chunkIteratorImpl32_0.hasNext();
      chunkIteratorImpl32_0.hasNext();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[3];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32(128);
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[3] = 128;
      intArray0[4] = 32;
      intArray0[5] = 0;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      eWAHCompressedBitmap32Array0[2] = eWAHCompressedBitmap32_1;
      eWAHCompressedBitmap32_1.toDebugString();
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_2 = EWAHCompressedBitmap32.and(eWAHCompressedBitmap32Array0);
      eWAHCompressedBitmap32_2.trim();
      eWAHCompressedBitmap32_2.addStreamOfEmptyWords(true, 32);
      EWAHIterator32 eWAHIterator32_0 = EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_2);
      eWAHIterator32_0.clone();
      EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_0);
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, 2293);
      chunkIteratorImpl32_0.move(0);
      chunkIteratorImpl32_0.nextBit();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[3];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32(128);
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = new EWAHCompressedBitmap32(32);
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_1;
      int[] intArray0 = new int[6];
      intArray0[0] = 32;
      intArray0[1] = 0;
      intArray0[2] = 32;
      intArray0[3] = 128;
      intArray0[4] = 32;
      int int0 = 0;
      intArray0[5] = 0;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_2 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      eWAHCompressedBitmap32Array0[2] = eWAHCompressedBitmap32_2;
      eWAHCompressedBitmap32_2.toDebugString();
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_3 = EWAHCompressedBitmap32.and(eWAHCompressedBitmap32Array0);
      EWAHIterator32 eWAHIterator32_0 = EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_3);
      eWAHIterator32_0.clone();
      int int1 = 2293;
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, int1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      EWAHIterator32 eWAHIterator32_0 = new EWAHIterator32(intArray0);
      EWAHIterator32 eWAHIterator32_1 = eWAHIterator32_0.clone();
      eWAHIterator32_1.clone();
      int int0 = 0;
      intArray0.clone();
      eWAHIterator32_0.clone();
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_1, 0);
      int int1 = 32;
      // Undeclared exception!
      try { 
        intArray0.collapse(0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = null;
      try {
        chunkIteratorImpl32_0 = new ChunkIteratorImpl32((EWAHIterator32) null, (-1855));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.ChunkIteratorImpl32", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      EWAHIterator32 eWAHIterator32_0 = eWAHCompressedBitmap32_0.getEWAHIterator();
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = new ChunkIteratorImpl32(eWAHIterator32_0, 32);
      chunkIteratorImpl32_0.move();
      assertFalse(eWAHIterator32_0.hasNext());
      assertEquals(0, chunkIteratorImpl32_0.nextLength());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = (-328);
      ChunkIteratorImpl32 chunkIteratorImpl32_0 = null;
      try {
        chunkIteratorImpl32_0 = new ChunkIteratorImpl32((EWAHIterator32) null, (-328));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.ChunkIteratorImpl32", e);
      }
  }
}
