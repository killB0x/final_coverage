/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 00:36:37 GMT 2022
 */

package com.googlecode.javaewah32.symmetric;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.googlecode.javaewah32.EWAHCompressedBitmap32;
import com.googlecode.javaewah32.NonEmptyVirtualStorage32;
import com.googlecode.javaewah32.symmetric.RunningBitmapMerge32;
import com.googlecode.javaewah32.symmetric.ThresholdFuncBitmap32;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RunningBitmapMerge32_ESTest extends RunningBitmapMerge32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RunningBitmapMerge32 runningBitmapMerge32_0 = new RunningBitmapMerge32();
      int[] intArray0 = new int[6];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[1];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      ThresholdFuncBitmap32 thresholdFuncBitmap32_0 = new ThresholdFuncBitmap32((-430));
      NonEmptyVirtualStorage32 nonEmptyVirtualStorage32_0 = new NonEmptyVirtualStorage32();
      // Undeclared exception!
      try { 
        runningBitmapMerge32_0.symmetric(thresholdFuncBitmap32_0, nonEmptyVirtualStorage32_0, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RunningBitmapMerge32 runningBitmapMerge32_0 = new RunningBitmapMerge32();
      ThresholdFuncBitmap32 thresholdFuncBitmap32_0 = new ThresholdFuncBitmap32((-2390));
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      IntBuffer intBuffer0 = byteBuffer0.asIntBuffer();
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32(intBuffer0);
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[1];
      // Undeclared exception!
      try { 
        runningBitmapMerge32_0.symmetric(thresholdFuncBitmap32_0, eWAHCompressedBitmap32_0, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.ByteBufferAsIntBufferB", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RunningBitmapMerge32 runningBitmapMerge32_0 = new RunningBitmapMerge32();
      int[] intArray0 = new int[12];
      ThresholdFuncBitmap32 thresholdFuncBitmap32_0 = new ThresholdFuncBitmap32(14);
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[3];
      IntBuffer intBuffer0 = IntBuffer.wrap(intArray0);
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32(intBuffer0);
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(32);
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = new EWAHCompressedBitmap32(byteBuffer0);
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_1;
      eWAHCompressedBitmap32Array0[2] = eWAHCompressedBitmap32Array0[0];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_2 = EWAHCompressedBitmap32.threshold((-1270), eWAHCompressedBitmap32Array0);
      eWAHCompressedBitmap32_2.swap(eWAHCompressedBitmap32_1);
      // Undeclared exception!
      try { 
        runningBitmapMerge32_0.symmetric(thresholdFuncBitmap32_0, eWAHCompressedBitmap32_2, eWAHCompressedBitmap32Array0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.googlecode.javaewah32.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RunningBitmapMerge32 runningBitmapMerge32_0 = new RunningBitmapMerge32();
      int[] intArray0 = new int[1];
      intArray0[0] = 601;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      ThresholdFuncBitmap32 thresholdFuncBitmap32_0 = new ThresholdFuncBitmap32(601);
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[6];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[1] = eWAHCompressedBitmap32_0;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_1 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      eWAHCompressedBitmap32Array0[2] = eWAHCompressedBitmap32_1;
      eWAHCompressedBitmap32Array0[3] = eWAHCompressedBitmap32_1;
      eWAHCompressedBitmap32Array0[4] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[5] = eWAHCompressedBitmap32_0;
      runningBitmapMerge32_0.symmetric(thresholdFuncBitmap32_0, eWAHCompressedBitmap32Array0[2], eWAHCompressedBitmap32Array0);
      assertEquals(6, eWAHCompressedBitmap32Array0.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RunningBitmapMerge32 runningBitmapMerge32_0 = new RunningBitmapMerge32();
      int[] intArray0 = new int[1];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      ThresholdFuncBitmap32 thresholdFuncBitmap32_0 = new ThresholdFuncBitmap32(601);
      EWAHCompressedBitmap32[] eWAHCompressedBitmap32Array0 = new EWAHCompressedBitmap32[6];
      eWAHCompressedBitmap32Array0[0] = eWAHCompressedBitmap32_0;
      eWAHCompressedBitmap32Array0[5] = eWAHCompressedBitmap32_0;
      // Undeclared exception!
      try { 
        runningBitmapMerge32_0.symmetric(thresholdFuncBitmap32_0, eWAHCompressedBitmap32Array0[5], eWAHCompressedBitmap32Array0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.EWAHIterator32", e);
      }
  }
}
