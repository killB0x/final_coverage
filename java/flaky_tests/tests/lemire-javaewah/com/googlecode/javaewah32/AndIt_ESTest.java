/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 00:37:32 GMT 2022
 */

package com.googlecode.javaewah32;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.googlecode.javaewah32.AndIt;
import com.googlecode.javaewah32.BufferedIterator32;
import com.googlecode.javaewah32.EWAHCompressedBitmap32;
import com.googlecode.javaewah32.IteratingBufferedRunningLengthWord32;
import com.googlecode.javaewah32.IteratingRLW32;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AndIt_ESTest extends AndIt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<IteratingRLW32> linkedList0 = new LinkedList<IteratingRLW32>();
      int[] intArray0 = new int[1];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      IteratingRLW32 iteratingRLW32_0 = eWAHCompressedBitmap32_0.getIteratingRLW();
      linkedList0.add(iteratingRLW32_0);
      linkedList0.add(iteratingRLW32_0);
      AndIt andIt0 = new AndIt(linkedList0, (-39));
      BufferedIterator32 bufferedIterator32_0 = new BufferedIterator32(andIt0);
      bufferedIterator32_0.discardLiteralWords(1);
      linkedList0.add((IteratingRLW32) bufferedIterator32_0);
      andIt0.next();
      assertEquals(3, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<IteratingRLW32> linkedList0 = new LinkedList<IteratingRLW32>();
      linkedList0.add((IteratingRLW32) null);
      AndIt andIt0 = new AndIt(linkedList0, 0);
      boolean boolean0 = andIt0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AndIt andIt0 = new AndIt((LinkedList<IteratingRLW32>) null, (-1223));
      // Undeclared exception!
      try { 
        andIt0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.AndIt", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<IteratingRLW32> linkedList0 = new LinkedList<IteratingRLW32>();
      AndIt andIt0 = new AndIt(linkedList0, 65535);
      // Undeclared exception!
      try { 
        andIt0.next();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<IteratingRLW32> linkedList0 = new LinkedList<IteratingRLW32>();
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      IteratingBufferedRunningLengthWord32 iteratingBufferedRunningLengthWord32_0 = new IteratingBufferedRunningLengthWord32(eWAHCompressedBitmap32_0);
      iteratingBufferedRunningLengthWord32_0.discardLiteralWords((-3205));
      linkedList0.add((IteratingRLW32) iteratingBufferedRunningLengthWord32_0);
      linkedList0.add((IteratingRLW32) iteratingBufferedRunningLengthWord32_0);
      AndIt andIt0 = new AndIt(linkedList0, 32);
      // Undeclared exception!
      try { 
        andIt0.next();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3204 out of bounds for length 4
         //
         verifyException("com.googlecode.javaewah32.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AndIt andIt0 = new AndIt((LinkedList<IteratingRLW32>) null, 1839);
      // Undeclared exception!
      try { 
        andIt0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.AndIt", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AndIt andIt0 = new AndIt((LinkedList<IteratingRLW32>) null, 879);
      // Undeclared exception!
      try { 
        andIt0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.AndIt", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<IteratingRLW32> linkedList0 = new LinkedList<IteratingRLW32>();
      int[] intArray0 = new int[1];
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      IteratingRLW32 iteratingRLW32_0 = eWAHCompressedBitmap32_0.getIteratingRLW();
      linkedList0.add(iteratingRLW32_0);
      linkedList0.add(iteratingRLW32_0);
      AndIt andIt0 = new AndIt(linkedList0, (-39));
      BufferedIterator32 bufferedIterator32_0 = new BufferedIterator32(andIt0);
      linkedList0.add((IteratingRLW32) bufferedIterator32_0);
      andIt0.next();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedList<IteratingRLW32> linkedList0 = new LinkedList<IteratingRLW32>();
      AndIt andIt0 = new AndIt(linkedList0, (-4226));
      boolean boolean0 = andIt0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LinkedList<IteratingRLW32> linkedList0 = new LinkedList<IteratingRLW32>();
      AndIt andIt0 = new AndIt(linkedList0, (-39));
      AndIt andIt1 = andIt0.clone();
      assertNotSame(andIt1, andIt0);
  }
}
