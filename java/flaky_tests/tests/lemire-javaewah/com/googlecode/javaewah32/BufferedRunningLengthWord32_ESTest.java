/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 00:44:24 GMT 2022
 */

package com.googlecode.javaewah32;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.googlecode.javaewah32.Buffer32;
import com.googlecode.javaewah32.BufferedRunningLengthWord32;
import com.googlecode.javaewah32.IntArray;
import com.googlecode.javaewah32.IntBufferWrapper;
import com.googlecode.javaewah32.RunningLengthWord32;
import java.nio.IntBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BufferedRunningLengthWord32_ESTest extends BufferedRunningLengthWord32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      assertFalse(bufferedRunningLengthWord32_0.RunningBit);
      
      bufferedRunningLengthWord32_0.setRunningBit(true);
      assertTrue(bufferedRunningLengthWord32_0.RunningBit);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      bufferedRunningLengthWord32_0.discardFirstWords(4170);
      bufferedRunningLengthWord32_0.discardFirstWords(4170);
      assertEquals(8340, bufferedRunningLengthWord32_0.literalWordOffset);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      bufferedRunningLengthWord32_0.discardFirstWords((-1));
      assertEquals(1, bufferedRunningLengthWord32_0.RunningLength);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32((-310));
      bufferedRunningLengthWord32_0.discardFirstWords(0);
      assertEquals(98148, bufferedRunningLengthWord32_0.size());
      assertFalse(bufferedRunningLengthWord32_0.RunningBit);
      assertEquals(0, bufferedRunningLengthWord32_0.literalWordOffset);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      IntArray intArray0 = new IntArray();
      RunningLengthWord32 runningLengthWord32_0 = new RunningLengthWord32(intArray0, 0);
      bufferedRunningLengthWord32_0.reset(runningLengthWord32_0);
      assertFalse(bufferedRunningLengthWord32_0.RunningBit);
      assertEquals(0, bufferedRunningLengthWord32_0.literalWordOffset);
      assertEquals(0, bufferedRunningLengthWord32_0.RunningLength);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      int int0 = bufferedRunningLengthWord32_0.size();
      assertEquals(0, int0);
      assertEquals(0, bufferedRunningLengthWord32_0.literalWordOffset);
      assertFalse(bufferedRunningLengthWord32_0.RunningBit);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      bufferedRunningLengthWord32_0.discardFirstWords(4170);
      int int0 = bufferedRunningLengthWord32_0.size();
      assertEquals(4170, bufferedRunningLengthWord32_0.literalWordOffset);
      assertEquals((-4170), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      int int0 = bufferedRunningLengthWord32_0.getRunningLength();
      assertEquals(0, bufferedRunningLengthWord32_0.literalWordOffset);
      assertFalse(bufferedRunningLengthWord32_0.RunningBit);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      bufferedRunningLengthWord32_0.setRunningLength((-1));
      int int0 = bufferedRunningLengthWord32_0.getRunningLength();
      assertEquals((-1), bufferedRunningLengthWord32_0.RunningLength);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(2349);
      boolean boolean0 = bufferedRunningLengthWord32_0.getRunningBit();
      assertTrue(boolean0);
      assertEquals(0, bufferedRunningLengthWord32_0.literalWordOffset);
      assertEquals(1174, bufferedRunningLengthWord32_0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      int int0 = bufferedRunningLengthWord32_0.getNumberOfLiteralWords();
      assertEquals(0, bufferedRunningLengthWord32_0.literalWordOffset);
      assertFalse(bufferedRunningLengthWord32_0.RunningBit);
      assertEquals(0, int0);
      assertEquals(0, bufferedRunningLengthWord32_0.RunningLength);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      bufferedRunningLengthWord32_0.discardFirstWords(4170);
      int int0 = bufferedRunningLengthWord32_0.getNumberOfLiteralWords();
      assertEquals((-4170), bufferedRunningLengthWord32_0.size());
      assertEquals((-4170), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      bufferedRunningLengthWord32_0.RunningLength = (-108);
      bufferedRunningLengthWord32_0.clone();
      assertEquals((-108), bufferedRunningLengthWord32_0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(65535);
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_1 = bufferedRunningLengthWord32_0.clone();
      assertTrue(bufferedRunningLengthWord32_1.RunningBit);
      assertNotSame(bufferedRunningLengthWord32_1, bufferedRunningLengthWord32_0);
      assertEquals(32767, bufferedRunningLengthWord32_1.size());
      assertEquals(0, bufferedRunningLengthWord32_1.literalWordOffset);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      bufferedRunningLengthWord32_0.reset((-682));
      bufferedRunningLengthWord32_0.clone();
      assertEquals(65195, bufferedRunningLengthWord32_0.RunningLength);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      bufferedRunningLengthWord32_0.discardFirstWords(4170);
      bufferedRunningLengthWord32_0.clone();
      assertEquals(4170, bufferedRunningLengthWord32_0.literalWordOffset);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      RunningLengthWord32 runningLengthWord32_0 = new RunningLengthWord32((Buffer32) null, 0);
      // Undeclared exception!
      try { 
        bufferedRunningLengthWord32_0.reset(runningLengthWord32_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.BufferedRunningLengthWord32", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32((-46));
      IntBuffer intBuffer0 = IntBuffer.allocate(0);
      IntBufferWrapper intBufferWrapper0 = new IntBufferWrapper(intBuffer0, (-46));
      RunningLengthWord32 runningLengthWord32_0 = new RunningLengthWord32(intBufferWrapper0, 3690);
      // Undeclared exception!
      try { 
        bufferedRunningLengthWord32_0.reset(runningLengthWord32_0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 3690
         //
         verifyException("java.nio.HeapIntBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = null;
      try {
        bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32((RunningLengthWord32) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.BufferedRunningLengthWord32", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntBuffer intBuffer0 = IntBuffer.allocate(0);
      IntBufferWrapper intBufferWrapper0 = new IntBufferWrapper(intBuffer0, 308);
      RunningLengthWord32 runningLengthWord32_0 = new RunningLengthWord32(intBufferWrapper0, 154);
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = null;
      try {
        bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(runningLengthWord32_0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 154
         //
         verifyException("java.nio.HeapIntBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IntArray intArray0 = new IntArray(273);
      RunningLengthWord32 runningLengthWord32_0 = new RunningLengthWord32(intArray0, 546);
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = null;
      try {
        bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(runningLengthWord32_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 546 out of bounds for length 273
         //
         verifyException("com.googlecode.javaewah32.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32((-310));
      int int0 = bufferedRunningLengthWord32_0.getNumberOfLiteralWords();
      assertEquals(98148, bufferedRunningLengthWord32_0.size());
      assertEquals(32767, int0);
      assertFalse(bufferedRunningLengthWord32_0.RunningBit);
      assertEquals(0, bufferedRunningLengthWord32_0.literalWordOffset);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32((-310));
      int int0 = bufferedRunningLengthWord32_0.getRunningLength();
      assertFalse(bufferedRunningLengthWord32_0.RunningBit);
      assertEquals(0, bufferedRunningLengthWord32_0.literalWordOffset);
      assertEquals(65381, int0);
      assertEquals(98148, bufferedRunningLengthWord32_0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      boolean boolean0 = bufferedRunningLengthWord32_0.getRunningBit();
      assertEquals(0, bufferedRunningLengthWord32_0.literalWordOffset);
      assertEquals(0, bufferedRunningLengthWord32_0.RunningLength);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      bufferedRunningLengthWord32_0.reset(65535);
      assertEquals(32767, bufferedRunningLengthWord32_0.RunningLength);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      bufferedRunningLengthWord32_0.discardFirstWords(0);
      assertFalse(bufferedRunningLengthWord32_0.RunningBit);
      assertEquals(0, bufferedRunningLengthWord32_0.literalWordOffset);
      assertEquals(0, bufferedRunningLengthWord32_0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      IntArray intArray0 = new IntArray(1587);
      RunningLengthWord32 runningLengthWord32_0 = new RunningLengthWord32(intArray0, 1587);
      // Undeclared exception!
      try { 
        bufferedRunningLengthWord32_0.reset(runningLengthWord32_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1587 out of bounds for length 1587
         //
         verifyException("com.googlecode.javaewah32.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IntArray intArray0 = new IntArray();
      RunningLengthWord32 runningLengthWord32_0 = new RunningLengthWord32(intArray0, 1);
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(runningLengthWord32_0);
      bufferedRunningLengthWord32_0.reset(16);
      assertEquals(8, bufferedRunningLengthWord32_0.RunningLength);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_1 = bufferedRunningLengthWord32_0.clone();
      assertFalse(bufferedRunningLengthWord32_1.RunningBit);
      assertEquals(0, bufferedRunningLengthWord32_1.size());
      assertEquals(0, bufferedRunningLengthWord32_1.literalWordOffset);
      assertNotSame(bufferedRunningLengthWord32_1, bufferedRunningLengthWord32_0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      bufferedRunningLengthWord32_0.setNumberOfLiteralWords(65535);
      bufferedRunningLengthWord32_0.discardFirstWords(3585);
      assertEquals(61950, bufferedRunningLengthWord32_0.getNumberOfLiteralWords());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32((-14));
      int int0 = bufferedRunningLengthWord32_0.size();
      assertEquals(98296, int0);
      assertEquals(0, bufferedRunningLengthWord32_0.literalWordOffset);
      assertFalse(bufferedRunningLengthWord32_0.RunningBit);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(0);
      bufferedRunningLengthWord32_0.setRunningLength(16);
      bufferedRunningLengthWord32_0.discardFirstWords(3585);
      assertEquals((-3569), bufferedRunningLengthWord32_0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BufferedRunningLengthWord32 bufferedRunningLengthWord32_0 = new BufferedRunningLengthWord32(100);
      String string0 = bufferedRunningLengthWord32_0.toString();
      assertEquals(0, bufferedRunningLengthWord32_0.literalWordOffset);
      assertEquals("running bit = false running length = 50 number of lit. words 0", string0);
  }
}
