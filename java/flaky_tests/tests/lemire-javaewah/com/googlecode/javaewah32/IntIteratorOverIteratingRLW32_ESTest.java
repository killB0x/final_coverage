/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 00:25:10 GMT 2022
 */

package com.googlecode.javaewah32;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.googlecode.javaewah32.EWAHCompressedBitmap32;
import com.googlecode.javaewah32.EWAHIterator32;
import com.googlecode.javaewah32.IntBufferWrapper;
import com.googlecode.javaewah32.IntIteratorOverIteratingRLW32;
import com.googlecode.javaewah32.IteratingBufferedRunningLengthWord32;
import com.googlecode.javaewah32.IteratingRLW32;
import java.nio.IntBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntIteratorOverIteratingRLW32_ESTest extends IntIteratorOverIteratingRLW32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      IteratingBufferedRunningLengthWord32 iteratingBufferedRunningLengthWord32_0 = new IteratingBufferedRunningLengthWord32(eWAHCompressedBitmap32_0);
      iteratingBufferedRunningLengthWord32_0.discardLiteralWords(32);
      IntIteratorOverIteratingRLW32 intIteratorOverIteratingRLW32_0 = new IntIteratorOverIteratingRLW32(iteratingBufferedRunningLengthWord32_0);
      assertEquals(0, iteratingBufferedRunningLengthWord32_0.getNumberOfLiteralWords());
      assertEquals(0, iteratingBufferedRunningLengthWord32_0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 64;
      intArray0[1] = 483;
      intArray0[2] = 65536;
      intArray0[3] = 1740;
      intArray0[4] = 64;
      intArray0[5] = 63;
      intArray0[6] = 768;
      intArray0[7] = 574;
      intArray0[8] = 2614;
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = EWAHCompressedBitmap32.bitmapOf(intArray0);
      IteratingRLW32 iteratingRLW32_0 = eWAHCompressedBitmap32_0.getIteratingRLW();
      IntIteratorOverIteratingRLW32 intIteratorOverIteratingRLW32_0 = new IntIteratorOverIteratingRLW32(iteratingRLW32_0);
      assertTrue(intIteratorOverIteratingRLW32_0.hasNext());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      eWAHCompressedBitmap32_0.addWord(0, 1792);
      eWAHCompressedBitmap32_0.addStreamOfEmptyWords(true, 1792);
      IteratingRLW32 iteratingRLW32_0 = eWAHCompressedBitmap32_0.getIteratingRLW();
      IntIteratorOverIteratingRLW32 intIteratorOverIteratingRLW32_0 = new IntIteratorOverIteratingRLW32(iteratingRLW32_0);
      assertTrue(iteratingRLW32_0.getRunningBit());
      assertEquals(1792, iteratingRLW32_0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      eWAHCompressedBitmap32_0.addStreamOfEmptyWords(true, 1792);
      IteratingRLW32 iteratingRLW32_0 = eWAHCompressedBitmap32_0.getIteratingRLW();
      IntIteratorOverIteratingRLW32 intIteratorOverIteratingRLW32_0 = new IntIteratorOverIteratingRLW32(iteratingRLW32_0);
      boolean boolean0 = intIteratorOverIteratingRLW32_0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntIteratorOverIteratingRLW32 intIteratorOverIteratingRLW32_0 = null;
      try {
        intIteratorOverIteratingRLW32_0 = new IntIteratorOverIteratingRLW32((IteratingRLW32) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah32.IntIteratorOverIteratingRLW32", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      IteratingBufferedRunningLengthWord32 iteratingBufferedRunningLengthWord32_0 = new IteratingBufferedRunningLengthWord32(eWAHCompressedBitmap32_0);
      iteratingBufferedRunningLengthWord32_0.discardLiteralWords((-1219));
      IntIteratorOverIteratingRLW32 intIteratorOverIteratingRLW32_0 = null;
      try {
        intIteratorOverIteratingRLW32_0 = new IntIteratorOverIteratingRLW32(iteratingBufferedRunningLengthWord32_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1218 out of bounds for length 4
         //
         verifyException("com.googlecode.javaewah32.IntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[4];
      IntBuffer intBuffer0 = IntBuffer.wrap(intArray0);
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32(intBuffer0);
      EWAHIterator32 eWAHIterator32_0 = EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_0);
      IteratingBufferedRunningLengthWord32 iteratingBufferedRunningLengthWord32_0 = new IteratingBufferedRunningLengthWord32(eWAHIterator32_0);
      IntIteratorOverIteratingRLW32 intIteratorOverIteratingRLW32_0 = new IntIteratorOverIteratingRLW32(iteratingBufferedRunningLengthWord32_0);
      int int0 = intIteratorOverIteratingRLW32_0.next();
      assertEquals(32, int0);
      assertFalse(intIteratorOverIteratingRLW32_0.hasNext());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntBuffer intBuffer0 = IntBuffer.allocate(39);
      IntBufferWrapper intBufferWrapper0 = new IntBufferWrapper(intBuffer0, 66);
      EWAHIterator32 eWAHIterator32_0 = new EWAHIterator32(intBufferWrapper0);
      IteratingBufferedRunningLengthWord32 iteratingBufferedRunningLengthWord32_0 = new IteratingBufferedRunningLengthWord32(eWAHIterator32_0);
      IntIteratorOverIteratingRLW32 intIteratorOverIteratingRLW32_0 = null;
      try {
        intIteratorOverIteratingRLW32_0 = new IntIteratorOverIteratingRLW32(iteratingBufferedRunningLengthWord32_0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2);
      intArray0[1] = 256;
      IntBuffer intBuffer0 = IntBuffer.wrap(intArray0);
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32(intBuffer0);
      EWAHIterator32 eWAHIterator32_0 = EWAHIterator32.getEWAHIterator(eWAHCompressedBitmap32_0);
      IteratingBufferedRunningLengthWord32 iteratingBufferedRunningLengthWord32_0 = new IteratingBufferedRunningLengthWord32(eWAHIterator32_0);
      IntIteratorOverIteratingRLW32 intIteratorOverIteratingRLW32_0 = new IntIteratorOverIteratingRLW32(iteratingBufferedRunningLengthWord32_0);
      // Undeclared exception!
      try { 
        intIteratorOverIteratingRLW32_0.next();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      eWAHCompressedBitmap32_0.addStreamOfEmptyWords(true, 1792);
      IteratingRLW32 iteratingRLW32_0 = eWAHCompressedBitmap32_0.getIteratingRLW();
      IntIteratorOverIteratingRLW32 intIteratorOverIteratingRLW32_0 = new IntIteratorOverIteratingRLW32(iteratingRLW32_0);
      int int0 = intIteratorOverIteratingRLW32_0.next();
      assertTrue(intIteratorOverIteratingRLW32_0.hasNext());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EWAHCompressedBitmap32 eWAHCompressedBitmap32_0 = new EWAHCompressedBitmap32();
      IteratingRLW32 iteratingRLW32_0 = eWAHCompressedBitmap32_0.getIteratingRLW();
      IntIteratorOverIteratingRLW32 intIteratorOverIteratingRLW32_0 = new IntIteratorOverIteratingRLW32(iteratingRLW32_0);
      boolean boolean0 = intIteratorOverIteratingRLW32_0.hasNext();
      assertFalse(boolean0);
  }
}
