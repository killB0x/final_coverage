/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 00:39:25 GMT 2022
 */

package com.googlecode.javaewah;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.googlecode.javaewah.BufferedAndIterator;
import com.googlecode.javaewah.EWAHCompressedBitmap;
import com.googlecode.javaewah.IteratingBufferedRunningLengthWord;
import com.googlecode.javaewah.IteratingRLW;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BufferedAndIterator_ESTest extends BufferedAndIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<IteratingRLW> linkedList0 = new LinkedList<IteratingRLW>();
      BufferedAndIterator bufferedAndIterator0 = new BufferedAndIterator(linkedList0, 0);
      EWAHCompressedBitmap eWAHCompressedBitmap0 = bufferedAndIterator0.buffer;
      eWAHCompressedBitmap0.addWord((long) 0, 0);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      linkedList0.add((IteratingRLW) iteratingBufferedRunningLengthWord0);
      linkedList0.offerLast(iteratingBufferedRunningLengthWord0);
      bufferedAndIterator0.next();
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BufferedAndIterator bufferedAndIterator0 = new BufferedAndIterator((LinkedList<IteratingRLW>) null, (-15));
      // Undeclared exception!
      try { 
        bufferedAndIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.BufferedAndIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<IteratingRLW> linkedList0 = new LinkedList<IteratingRLW>();
      BufferedAndIterator bufferedAndIterator0 = new BufferedAndIterator(linkedList0, 1);
      // Undeclared exception!
      try { 
        bufferedAndIterator0.next();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BufferedAndIterator bufferedAndIterator0 = new BufferedAndIterator((LinkedList<IteratingRLW>) null, (-17));
      // Undeclared exception!
      try { 
        bufferedAndIterator0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.BufferedAndIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BufferedAndIterator bufferedAndIterator0 = new BufferedAndIterator((LinkedList<IteratingRLW>) null, 0);
      // Undeclared exception!
      try { 
        bufferedAndIterator0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.BufferedAndIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<IteratingRLW> linkedList0 = new LinkedList<IteratingRLW>();
      BufferedAndIterator bufferedAndIterator0 = new BufferedAndIterator(linkedList0, 0);
      EWAHCompressedBitmap eWAHCompressedBitmap0 = bufferedAndIterator0.buffer;
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      iteratingBufferedRunningLengthWord0.discardLiteralWords(64);
      linkedList0.add((IteratingRLW) iteratingBufferedRunningLengthWord0);
      linkedList0.offerLast(iteratingBufferedRunningLengthWord0);
      bufferedAndIterator0.next();
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<IteratingRLW> linkedList0 = new LinkedList<IteratingRLW>();
      BufferedAndIterator bufferedAndIterator0 = new BufferedAndIterator(linkedList0, 0);
      EWAHCompressedBitmap eWAHCompressedBitmap0 = bufferedAndIterator0.buffer;
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      linkedList0.add((IteratingRLW) iteratingBufferedRunningLengthWord0);
      linkedList0.offerLast(iteratingBufferedRunningLengthWord0);
      linkedList0.add((IteratingRLW) iteratingBufferedRunningLengthWord0);
      bufferedAndIterator0.next();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<IteratingRLW> linkedList0 = new LinkedList<IteratingRLW>();
      linkedList0.add((IteratingRLW) null);
      BufferedAndIterator bufferedAndIterator0 = new BufferedAndIterator(linkedList0, 1001);
      boolean boolean0 = bufferedAndIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedList<IteratingRLW> linkedList0 = new LinkedList<IteratingRLW>();
      BufferedAndIterator bufferedAndIterator0 = new BufferedAndIterator(linkedList0, 610);
      boolean boolean0 = bufferedAndIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LinkedList<IteratingRLW> linkedList0 = new LinkedList<IteratingRLW>();
      BufferedAndIterator bufferedAndIterator0 = new BufferedAndIterator(linkedList0, 2382);
      BufferedAndIterator bufferedAndIterator1 = bufferedAndIterator0.clone();
      assertNotSame(bufferedAndIterator1, bufferedAndIterator0);
  }
}
