/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 23:58:38 GMT 2022
 */

package com.googlecode.javaewah;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.googlecode.javaewah.BufferedAndIterator;
import com.googlecode.javaewah.BufferedORIterator;
import com.googlecode.javaewah.EWAHCompressedBitmap;
import com.googlecode.javaewah.FastAggregation;
import com.googlecode.javaewah.IteratingRLW;
import com.googlecode.javaewah.NonEmptyVirtualStorage;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.LongBuffer;
import java.nio.charset.Charset;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastAggregation_ESTest extends FastAggregation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[7];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[4] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[5] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[6] = eWAHCompressedBitmap0;
      EWAHCompressedBitmap eWAHCompressedBitmap1 = EWAHCompressedBitmap.xor(eWAHCompressedBitmapArray0);
      assertEquals(7, eWAHCompressedBitmapArray0.length);
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertTrue(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotNull(eWAHCompressedBitmap1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<EWAHCompressedBitmap> linkedList0 = new LinkedList<EWAHCompressedBitmap>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      
      boolean boolean0 = linkedList0.add(eWAHCompressedBitmap0);
      assertTrue(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(boolean0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(64);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(64, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(64, charBuffer0.limit());
      assertEquals(64, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(64, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(64, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(64, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertEquals(64, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(64, byteBuffer0.remaining());
      assertEquals(64, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=64 cap=64]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(64, byteBuffer0.limit());
      assertNotNull(byteBuffer0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap1 = new EWAHCompressedBitmap(byteBuffer0);
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(64, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(64, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertEquals(64, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(64, byteBuffer0.remaining());
      assertEquals(64, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=64 cap=64]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(64, byteBuffer0.limit());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(12, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertTrue(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotNull(eWAHCompressedBitmap1);
      
      boolean boolean1 = linkedList0.add(eWAHCompressedBitmap1);
      assertTrue(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(2, linkedList0.size());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(64, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(64, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertEquals(64, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(64, byteBuffer0.remaining());
      assertEquals(64, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=64 cap=64]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(64, byteBuffer0.limit());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(12, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertTrue(boolean1);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertTrue(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      
      Iterator<EWAHCompressedBitmap> iterator0 = linkedList0.iterator();
      assertTrue(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(2, linkedList0.size());
      assertNotNull(iterator0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap2 = FastAggregation.xor(iterator0);
      assertTrue(linkedList0.contains(eWAHCompressedBitmap2));
      assertEquals(2, linkedList0.size());
      assertEquals(0, eWAHCompressedBitmap2.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap2.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap2.sizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotSame(eWAHCompressedBitmap2, eWAHCompressedBitmap0);
      assertNotSame(eWAHCompressedBitmap2, eWAHCompressedBitmap1);
      assertTrue(eWAHCompressedBitmap2.equals((Object)eWAHCompressedBitmap1));
      assertTrue(eWAHCompressedBitmap2.equals((Object)eWAHCompressedBitmap0));
      assertNotNull(eWAHCompressedBitmap2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      
      LinkedList<EWAHCompressedBitmap> linkedList0 = new LinkedList<EWAHCompressedBitmap>();
      assertFalse(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(eWAHCompressedBitmap0);
      assertTrue(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      int[] intArray0 = new int[3];
      EWAHCompressedBitmap eWAHCompressedBitmap1 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(1, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertFalse(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotNull(eWAHCompressedBitmap1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap1;
      boolean boolean1 = linkedList0.add(eWAHCompressedBitmapArray0[0]);
      assertEquals(2, eWAHCompressedBitmapArray0.length);
      assertTrue(linkedList0.contains(eWAHCompressedBitmap1));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      
      Iterator<EWAHCompressedBitmap> iterator0 = linkedList0.iterator();
      assertTrue(linkedList0.contains(eWAHCompressedBitmap1));
      assertEquals(2, linkedList0.size());
      assertNotNull(iterator0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap2 = FastAggregation.or(iterator0);
      assertTrue(linkedList0.contains(eWAHCompressedBitmap2));
      assertEquals(2, linkedList0.size());
      assertEquals(28, eWAHCompressedBitmap2.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap2.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap2.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotSame(eWAHCompressedBitmap2, eWAHCompressedBitmap0);
      assertNotSame(eWAHCompressedBitmap2, eWAHCompressedBitmap1);
      assertFalse(eWAHCompressedBitmap2.equals((Object)eWAHCompressedBitmap0));
      assertTrue(eWAHCompressedBitmap2.equals((Object)eWAHCompressedBitmap1));
      assertNotNull(eWAHCompressedBitmap2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      
      LinkedList<EWAHCompressedBitmap> linkedList0 = new LinkedList<EWAHCompressedBitmap>();
      assertFalse(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(eWAHCompressedBitmap0);
      assertTrue(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      boolean boolean1 = linkedList0.offerFirst(eWAHCompressedBitmap0);
      assertTrue(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      boolean boolean2 = linkedList0.add(eWAHCompressedBitmap0);
      assertTrue(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(3, linkedList0.size());
      assertTrue(boolean2);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      Iterator<EWAHCompressedBitmap> iterator0 = linkedList0.iterator();
      assertTrue(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(3, linkedList0.size());
      assertNotNull(iterator0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap1 = FastAggregation.or(iterator0);
      assertTrue(linkedList0.contains(eWAHCompressedBitmap1));
      assertEquals(3, linkedList0.size());
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertTrue(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotNull(eWAHCompressedBitmap1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2, byteBuffer0.limit());
      assertEquals(2, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2 cap=2]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(2, byteBuffer0.capacity());
      assertNotNull(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      LongBuffer longBuffer0 = byteBuffer0.asLongBuffer();
      assertEquals(2, byteArray0.length);
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2, byteBuffer0.limit());
      assertEquals(2, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2 cap=2]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(2, byteBuffer0.capacity());
      assertEquals("java.nio.ByteBufferAsLongBufferB[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.limit());
      assertFalse(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.remaining());
      assertEquals(0, longBuffer0.capacity());
      assertFalse(longBuffer0.isDirect());
      assertNotNull(longBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertEquals(2, byteArray0.length);
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2, byteBuffer0.limit());
      assertEquals(2, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2 cap=2]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(2, byteBuffer0.capacity());
      assertEquals("java.nio.ByteBufferAsLongBufferB[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.limit());
      assertFalse(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.remaining());
      assertEquals(0, longBuffer0.capacity());
      assertFalse(longBuffer0.isDirect());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      int[] intArray0 = new int[1];
      EWAHCompressedBitmap eWAHCompressedBitmap1 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertNotNull(eWAHCompressedBitmap1);
      assertArrayEquals(new int[] {0}, intArray0);
      
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap1;
      // Undeclared exception!
      try { 
        FastAggregation.xor(eWAHCompressedBitmapArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.ByteBufferAsLongBufferB", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      int[] intArray0 = new int[3];
      EWAHCompressedBitmap eWAHCompressedBitmap1 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(28, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap1.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertFalse(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotNull(eWAHCompressedBitmap1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap1;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      EWAHCompressedBitmap eWAHCompressedBitmap2 = FastAggregation.or(eWAHCompressedBitmapArray0);
      assertEquals(2, eWAHCompressedBitmapArray0.length);
      assertEquals(28, eWAHCompressedBitmap2.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap2.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap2.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotSame(eWAHCompressedBitmap2, eWAHCompressedBitmap0);
      assertNotSame(eWAHCompressedBitmap2, eWAHCompressedBitmap1);
      assertFalse(eWAHCompressedBitmap2.equals((Object)eWAHCompressedBitmap0));
      assertTrue(eWAHCompressedBitmap2.equals((Object)eWAHCompressedBitmap1));
      assertNotNull(eWAHCompressedBitmap2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      // Undeclared exception!
      try { 
        FastAggregation.orToContainer(eWAHCompressedBitmapArray0[0], eWAHCompressedBitmapArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      
      eWAHCompressedBitmap0.addStreamOfEmptyWords(true, 64);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(4096, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[9];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[4] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[5] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[6] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[7] = eWAHCompressedBitmap0;
      int[] intArray0 = new int[9];
      EWAHCompressedBitmap eWAHCompressedBitmap1 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(16, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertFalse(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotNull(eWAHCompressedBitmap1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      eWAHCompressedBitmapArray0[8] = eWAHCompressedBitmap1;
      // Undeclared exception!
      try { 
        FastAggregation.bufferedxorWithContainer(eWAHCompressedBitmap0, 64, eWAHCompressedBitmapArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You can only reduce the size of the bitmap within the scope of the last word. To extend the bitmap, please call setSizeInBits(int,boolean).
         //
         verifyException("com.googlecode.javaewah.EWAHCompressedBitmap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      
      eWAHCompressedBitmap0.addStreamOfEmptyWords(false, (-1284L));
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals((-82176), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[6];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[4] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[5] = eWAHCompressedBitmap0;
      FastAggregation.bufferedxorWithContainer(eWAHCompressedBitmap0, 64, eWAHCompressedBitmapArray0);
      assertEquals(6, eWAHCompressedBitmapArray0.length);
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[3];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      eWAHCompressedBitmap0.addStreamOfEmptyWords(true, 15L);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(960, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap0;
      EWAHCompressedBitmap eWAHCompressedBitmap1 = FastAggregation.bufferedor(64, eWAHCompressedBitmapArray0);
      assertEquals(3, eWAHCompressedBitmapArray0.length);
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(960, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertTrue(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotNull(eWAHCompressedBitmap1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      
      eWAHCompressedBitmap0.addStreamOfEmptyWords(false, (-1640531535L));
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals((-1914803136), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      FastAggregation.bufferedorWithContainer(eWAHCompressedBitmap0, 0, eWAHCompressedBitmapArray0);
      assertEquals(1, eWAHCompressedBitmapArray0.length);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      
      eWAHCompressedBitmap0.addStreamOfEmptyWords(true, (-1L));
      assertEquals((-64), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap1 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(16, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertFalse(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotNull(eWAHCompressedBitmap1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap1;
      FastAggregation.bufferedandWithContainer(eWAHCompressedBitmap0, 64, eWAHCompressedBitmapArray0);
      assertEquals(2, eWAHCompressedBitmapArray0.length);
      assertEquals((-64), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotSame(eWAHCompressedBitmap0, eWAHCompressedBitmap1);
      assertFalse(eWAHCompressedBitmap0.equals((Object)eWAHCompressedBitmap1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[5];
      LinkedList<EWAHCompressedBitmap> linkedList0 = new LinkedList<EWAHCompressedBitmap>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<EWAHCompressedBitmap> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = FastAggregation.or(iterator0);
      assertFalse(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(0, linkedList0.size());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmapArray0[0];
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmapArray0[1];
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap1 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertFalse(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotNull(eWAHCompressedBitmap1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      eWAHCompressedBitmapArray0[4] = eWAHCompressedBitmap1;
      EWAHCompressedBitmap eWAHCompressedBitmap2 = FastAggregation.xor(eWAHCompressedBitmapArray0);
      assertEquals(5, eWAHCompressedBitmapArray0.length);
      assertEquals(16, eWAHCompressedBitmap2.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap2.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap2.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotSame(eWAHCompressedBitmap2, eWAHCompressedBitmap0);
      assertNotSame(eWAHCompressedBitmap2, eWAHCompressedBitmap1);
      assertFalse(eWAHCompressedBitmap2.equals((Object)eWAHCompressedBitmap0));
      assertTrue(eWAHCompressedBitmap2.equals((Object)eWAHCompressedBitmap1));
      assertNotNull(eWAHCompressedBitmap2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmap0.addStreamOfEmptyWords(true, (-1054));
      assertEquals((-67456), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      EWAHCompressedBitmap eWAHCompressedBitmap1 = FastAggregation.xor(eWAHCompressedBitmapArray0);
      assertEquals(2, eWAHCompressedBitmapArray0.length);
      assertEquals((-67456), eWAHCompressedBitmap1.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertTrue(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotNull(eWAHCompressedBitmap1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1192);
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1192, byteBuffer0.remaining());
      assertEquals(1192, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1192, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1192 cap=1192]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertNotNull(byteBuffer0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(byteBuffer0);
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1192, byteBuffer0.remaining());
      assertEquals(1192, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1192, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1192 cap=1192]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(12, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      EWAHCompressedBitmap eWAHCompressedBitmap1 = FastAggregation.xor(eWAHCompressedBitmapArray0);
      assertEquals(1, eWAHCompressedBitmapArray0.length);
      assertEquals(12, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertNotNull(eWAHCompressedBitmap1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[3];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      eWAHCompressedBitmap0.addStreamOfEmptyWords(true, 15L);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(960, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap0;
      EWAHCompressedBitmap eWAHCompressedBitmap1 = FastAggregation.xor(eWAHCompressedBitmapArray0);
      assertEquals(3, eWAHCompressedBitmapArray0.length);
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(960, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertTrue(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotNull(eWAHCompressedBitmap1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      
      eWAHCompressedBitmap0.addStreamOfEmptyWords(false, (-1284L));
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals((-82176), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[6];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[4] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[5] = eWAHCompressedBitmap0;
      EWAHCompressedBitmap eWAHCompressedBitmap1 = FastAggregation.xor(eWAHCompressedBitmapArray0);
      assertEquals(6, eWAHCompressedBitmapArray0.length);
      assertEquals((-82176), eWAHCompressedBitmap1.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertTrue(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotNull(eWAHCompressedBitmap1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<EWAHCompressedBitmap> linkedList0 = new LinkedList<EWAHCompressedBitmap>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<IteratingRLW> linkedList1 = new LinkedList<IteratingRLW>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      BufferedORIterator bufferedORIterator0 = new BufferedORIterator(linkedList1, 2);
      assertEquals(0, linkedList1.size());
      assertNotNull(bufferedORIterator0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = bufferedORIterator0.buffer;
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      
      boolean boolean0 = eWAHCompressedBitmap0.set(16);
      assertEquals(0, linkedList1.size());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(17, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(boolean0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      boolean boolean1 = linkedList0.add(eWAHCompressedBitmap0);
      assertTrue(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(17, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(boolean1);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(boolean1 == boolean0);
      
      Iterator<EWAHCompressedBitmap> iterator0 = linkedList0.iterator();
      assertTrue(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(1, linkedList0.size());
      assertNotNull(iterator0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap1 = FastAggregation.xor(iterator0);
      assertTrue(linkedList0.contains(eWAHCompressedBitmap1));
      assertEquals(1, linkedList0.size());
      assertEquals(16, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(17, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertNotNull(eWAHCompressedBitmap1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(64);
      assertEquals(64, byteBuffer0.remaining());
      assertEquals(64, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=64 cap=64]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(64, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertNotNull(byteBuffer0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(byteBuffer0);
      assertEquals(64, byteBuffer0.remaining());
      assertEquals(64, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=64 cap=64]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(64, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(12, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      EWAHCompressedBitmap eWAHCompressedBitmap1 = FastAggregation.or(eWAHCompressedBitmapArray0);
      assertEquals(1, eWAHCompressedBitmapArray0.length);
      assertEquals(12, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertNotNull(eWAHCompressedBitmap1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[5];
      LinkedList<EWAHCompressedBitmap> linkedList0 = new LinkedList<EWAHCompressedBitmap>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<EWAHCompressedBitmap> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = FastAggregation.or(iterator0);
      assertFalse(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmapArray0[1];
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmap0;
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap1 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(28, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap1.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertFalse(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotNull(eWAHCompressedBitmap1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      eWAHCompressedBitmapArray0[4] = eWAHCompressedBitmap1;
      EWAHCompressedBitmap eWAHCompressedBitmap2 = FastAggregation.or(eWAHCompressedBitmapArray0);
      assertEquals(5, eWAHCompressedBitmapArray0.length);
      assertEquals(28, eWAHCompressedBitmap2.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap2.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap2.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotSame(eWAHCompressedBitmap2, eWAHCompressedBitmap1);
      assertNotSame(eWAHCompressedBitmap2, eWAHCompressedBitmap0);
      assertTrue(eWAHCompressedBitmap2.equals((Object)eWAHCompressedBitmap1));
      assertFalse(eWAHCompressedBitmap2.equals((Object)eWAHCompressedBitmap0));
      assertNotNull(eWAHCompressedBitmap2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      
      eWAHCompressedBitmap0.addStreamOfEmptyWords(true, (-4957L));
      assertEquals((-317248), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      EWAHCompressedBitmap eWAHCompressedBitmap1 = FastAggregation.or(eWAHCompressedBitmapArray0);
      assertEquals(1, eWAHCompressedBitmapArray0.length);
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals((-317248), eWAHCompressedBitmap1.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertNotNull(eWAHCompressedBitmap1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[5];
      LinkedList<EWAHCompressedBitmap> linkedList0 = new LinkedList<EWAHCompressedBitmap>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<EWAHCompressedBitmap> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = FastAggregation.or(iterator0);
      assertFalse(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(0, linkedList0.size());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmapArray0[0];
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmapArray0[0];
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmap0;
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap1 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(28, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap1.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertFalse(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotNull(eWAHCompressedBitmap1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      eWAHCompressedBitmapArray0[4] = eWAHCompressedBitmap1;
      EWAHCompressedBitmap eWAHCompressedBitmap2 = FastAggregation.bufferedxor(128, eWAHCompressedBitmapArray0);
      assertEquals(5, eWAHCompressedBitmapArray0.length);
      assertEquals(1, eWAHCompressedBitmap2.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap2.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap2.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotSame(eWAHCompressedBitmap2, eWAHCompressedBitmap1);
      assertNotSame(eWAHCompressedBitmap2, eWAHCompressedBitmap0);
      assertFalse(eWAHCompressedBitmap2.equals((Object)eWAHCompressedBitmap0));
      assertTrue(eWAHCompressedBitmap2.equals((Object)eWAHCompressedBitmap1));
      assertNotNull(eWAHCompressedBitmap2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[0];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = FastAggregation.bufferedxor(851, eWAHCompressedBitmapArray0);
      assertEquals(0, eWAHCompressedBitmapArray0.length);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      long[] longArray0 = new long[2];
      longArray0[0] = 160L;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertEquals(0, longBuffer0.arrayOffset());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals(2, longBuffer0.limit());
      assertEquals(2, longBuffer0.remaining());
      assertEquals(2, longBuffer0.capacity());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {160L, 0L}, longArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertEquals(2, longArray0.length);
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertEquals(0, longBuffer0.arrayOffset());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals(2, longBuffer0.limit());
      assertEquals(2, longBuffer0.remaining());
      assertEquals(2, longBuffer0.capacity());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new long[] {160L, 0L}, longArray0);
      
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      EWAHCompressedBitmap eWAHCompressedBitmap1 = FastAggregation.bufferedand(64, eWAHCompressedBitmapArray0);
      assertEquals(1, eWAHCompressedBitmapArray0.length);
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(5120, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertTrue(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotNull(eWAHCompressedBitmap1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NonEmptyVirtualStorage nonEmptyVirtualStorage0 = new NonEmptyVirtualStorage();
      assertNotNull(nonEmptyVirtualStorage0);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[3];
      LinkedList<IteratingRLW> linkedList0 = new LinkedList<IteratingRLW>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      BufferedORIterator bufferedORIterator0 = new BufferedORIterator(linkedList0, 1);
      assertEquals(0, linkedList0.size());
      assertNotNull(bufferedORIterator0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = bufferedORIterator0.buffer;
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      int[] intArray0 = new int[6];
      EWAHCompressedBitmap eWAHCompressedBitmap1 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(1, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertFalse(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotNull(eWAHCompressedBitmap1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap1;
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap0;
      // Undeclared exception!
      try { 
        FastAggregation.xorToContainer(nonEmptyVirtualStorage0, eWAHCompressedBitmapArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[3];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap0;
      eWAHCompressedBitmap0.addWord((-3255L), (-1431655764));
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals((-1431655764), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      // Undeclared exception!
      try { 
        FastAggregation.xorToContainer(eWAHCompressedBitmap0, eWAHCompressedBitmapArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You can only reduce the size of the bitmap within the scope of the last word. To extend the bitmap, please call setSizeInBits(int,boolean).
         //
         verifyException("com.googlecode.javaewah.EWAHCompressedBitmap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[3];
      // Undeclared exception!
      try { 
        FastAggregation.xorToContainer(eWAHCompressedBitmapArray0[0], eWAHCompressedBitmapArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long[] longArray0 = new long[0];
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.limit());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {}, longArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertEquals(0, longArray0.length);
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.limit());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new long[] {}, longArray0);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[9];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[4] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[5] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[6] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[7] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[8] = eWAHCompressedBitmap0;
      // Undeclared exception!
      try { 
        FastAggregation.xorToContainer(eWAHCompressedBitmap0, eWAHCompressedBitmapArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.HeapLongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[10];
      // Undeclared exception!
      try { 
        FastAggregation.xor(eWAHCompressedBitmapArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[4];
      LinkedList<IteratingRLW> linkedList0 = new LinkedList<IteratingRLW>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      BufferedAndIterator bufferedAndIterator0 = new BufferedAndIterator(linkedList0, 0);
      assertEquals(0, linkedList0.size());
      assertNotNull(bufferedAndIterator0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = bufferedAndIterator0.buffer;
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmapArray0[0];
      LongBuffer longBuffer0 = LongBuffer.allocate(0);
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.remaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertNotNull(longBuffer0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap1 = new EWAHCompressedBitmap(longBuffer0);
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.remaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap1);
      
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap1;
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmapArray0[1];
      // Undeclared exception!
      try { 
        FastAggregation.xor(eWAHCompressedBitmapArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.HeapLongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[0];
      // Undeclared exception!
      try { 
        FastAggregation.xor(eWAHCompressedBitmapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 160L;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(4, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertEquals(4, longBuffer0.limit());
      assertEquals(4, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {160L, 0L, 0L, 0L}, longArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertEquals(4, longArray0.length);
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(4, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertEquals(4, longBuffer0.limit());
      assertEquals(4, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new long[] {160L, 0L, 0L, 0L}, longArray0);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      // Undeclared exception!
      try { 
        FastAggregation.xor(eWAHCompressedBitmapArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You can only reduce the size of the bitmap within the scope of the last word. To extend the bitmap, please call setSizeInBits(int,boolean).
         //
         verifyException("com.googlecode.javaewah.EWAHCompressedBitmap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[0];
      // Undeclared exception!
      try { 
        FastAggregation.xor(eWAHCompressedBitmapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<EWAHCompressedBitmap> linkedList0 = new LinkedList<EWAHCompressedBitmap>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<EWAHCompressedBitmap> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = FastAggregation.or(iterator0);
      assertFalse(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(0, linkedList0.size());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      
      boolean boolean0 = linkedList0.add(eWAHCompressedBitmap0);
      assertTrue(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(1, linkedList0.size());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(boolean0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      // Undeclared exception!
      try { 
        FastAggregation.xor(iterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      
      LinkedList<EWAHCompressedBitmap> linkedList0 = new LinkedList<EWAHCompressedBitmap>();
      assertFalse(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(eWAHCompressedBitmap0);
      assertTrue(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      eWAHCompressedBitmap0.addWord((-1094L), (-872));
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals((-872), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      boolean boolean1 = linkedList0.add(eWAHCompressedBitmap0);
      assertTrue(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals((-872), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      Iterator<EWAHCompressedBitmap> iterator0 = linkedList0.iterator();
      assertTrue(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(2, linkedList0.size());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        FastAggregation.xor(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You can only reduce the size of the bitmap within the scope of the last word. To extend the bitmap, please call setSizeInBits(int,boolean).
         //
         verifyException("com.googlecode.javaewah.EWAHCompressedBitmap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastAggregation.xor((Iterator<EWAHCompressedBitmap>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.FastAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<EWAHCompressedBitmap> linkedList0 = new LinkedList<EWAHCompressedBitmap>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertEquals(4, longArray0.length);
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(4, longBuffer0.remaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertTrue(longBuffer0.hasArray());
      assertEquals(4, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertEquals(4, longBuffer0.capacity());
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L}, longArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertEquals(4, longArray0.length);
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(4, longBuffer0.remaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertTrue(longBuffer0.hasArray());
      assertEquals(4, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertEquals(4, longBuffer0.capacity());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L}, longArray0);
      
      boolean boolean0 = linkedList0.add(eWAHCompressedBitmap0);
      assertEquals(4, longArray0.length);
      assertEquals(1, linkedList0.size());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(4, longBuffer0.remaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertTrue(longBuffer0.hasArray());
      assertEquals(4, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertEquals(4, longBuffer0.capacity());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(boolean0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L}, longArray0);
      
      boolean boolean1 = linkedList0.add(eWAHCompressedBitmap0);
      assertEquals(4, longArray0.length);
      assertEquals(2, linkedList0.size());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(4, longBuffer0.remaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertTrue(longBuffer0.hasArray());
      assertEquals(4, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertEquals(4, longBuffer0.capacity());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(boolean1);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L}, longArray0);
      
      Iterator<EWAHCompressedBitmap> iterator0 = linkedList0.iterator();
      assertEquals(2, linkedList0.size());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        FastAggregation.xor(iterator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("java.nio.HeapLongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[5];
      LinkedList<EWAHCompressedBitmap> linkedList0 = new LinkedList<EWAHCompressedBitmap>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<EWAHCompressedBitmap> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = FastAggregation.or(iterator0);
      assertFalse(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(0, linkedList0.size());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap1 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(16, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertFalse(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotNull(eWAHCompressedBitmap1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray1 = new EWAHCompressedBitmap[4];
      assertFalse(eWAHCompressedBitmapArray1.equals((Object)eWAHCompressedBitmapArray0));
      
      eWAHCompressedBitmapArray1[0] = eWAHCompressedBitmap1;
      eWAHCompressedBitmapArray1[1] = eWAHCompressedBitmap1;
      eWAHCompressedBitmapArray1[2] = eWAHCompressedBitmapArray0[1];
      eWAHCompressedBitmapArray1[3] = eWAHCompressedBitmap0;
      NonEmptyVirtualStorage nonEmptyVirtualStorage0 = new NonEmptyVirtualStorage();
      assertNotNull(nonEmptyVirtualStorage0);
      
      // Undeclared exception!
      try { 
        FastAggregation.orToContainer(nonEmptyVirtualStorage0, eWAHCompressedBitmapArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 970L;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longBuffer0.remaining());
      assertEquals(8, longBuffer0.capacity());
      assertTrue(longBuffer0.hasRemaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=8 cap=8]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(8, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {970L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longBuffer0.remaining());
      assertEquals(8, longBuffer0.capacity());
      assertTrue(longBuffer0.hasRemaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=8 cap=8]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(8, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new long[] {970L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[7];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[4] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[5] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[6] = eWAHCompressedBitmapArray0[4];
      // Undeclared exception!
      try { 
        FastAggregation.orToContainer(eWAHCompressedBitmap0, eWAHCompressedBitmapArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You can only reduce the size of the bitmap within the scope of the last word. To extend the bitmap, please call setSizeInBits(int,boolean).
         //
         verifyException("com.googlecode.javaewah.EWAHCompressedBitmap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long[] longArray0 = new long[0];
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.capacity());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.limit());
      assertFalse(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {}, longArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertEquals(0, longArray0.length);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.capacity());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.limit());
      assertFalse(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new long[] {}, longArray0);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[4];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmap0;
      // Undeclared exception!
      try { 
        FastAggregation.orToContainer(eWAHCompressedBitmap0, eWAHCompressedBitmapArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.HeapLongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-6L);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(4, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(4, longBuffer0.limit());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals(4, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {(-6L), 0L, 0L, 0L}, longArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertEquals(4, longArray0.length);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(4, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(4, longBuffer0.limit());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals(4, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new long[] {(-6L), 0L, 0L, 0L}, longArray0);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[4];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(64);
      assertTrue(byteBuffer0.hasArray());
      assertEquals(64, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=64 cap=64]", byteBuffer0.toString());
      assertEquals(64, byteBuffer0.capacity());
      assertEquals(64, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertNotNull(byteBuffer0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap1 = new EWAHCompressedBitmap(byteBuffer0);
      assertTrue(byteBuffer0.hasArray());
      assertEquals(64, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=64 cap=64]", byteBuffer0.toString());
      assertEquals(64, byteBuffer0.capacity());
      assertEquals(64, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(12, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap1);
      
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap1;
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmap1;
      // Undeclared exception!
      try { 
        FastAggregation.orToContainer(eWAHCompressedBitmap0, eWAHCompressedBitmapArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("com.googlecode.javaewah.LongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      // Undeclared exception!
      try { 
        FastAggregation.or(eWAHCompressedBitmapArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[0];
      // Undeclared exception!
      try { 
        FastAggregation.or(eWAHCompressedBitmapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[4];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertNotNull(byteBuffer0);
      
      LongBuffer longBuffer0 = byteBuffer0.asLongBuffer();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.remaining());
      assertEquals(0, longBuffer0.capacity());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.ByteBufferAsLongBufferB[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.limit());
      assertFalse(longBuffer0.hasArray());
      assertNotNull(longBuffer0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap1 = new EWAHCompressedBitmap(longBuffer0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.remaining());
      assertEquals(0, longBuffer0.capacity());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.ByteBufferAsLongBufferB[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.limit());
      assertFalse(longBuffer0.hasArray());
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap1);
      
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap1;
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmap0;
      // Undeclared exception!
      try { 
        FastAggregation.or(eWAHCompressedBitmapArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.ByteBufferAsLongBufferB", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[0];
      // Undeclared exception!
      try { 
        FastAggregation.or(eWAHCompressedBitmapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      
      LinkedList<EWAHCompressedBitmap> linkedList0 = new LinkedList<EWAHCompressedBitmap>();
      assertFalse(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<EWAHCompressedBitmap> iterator0 = linkedList0.iterator();
      assertFalse(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      linkedList0.addFirst(eWAHCompressedBitmap0);
      assertTrue(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(1, linkedList0.size());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      // Undeclared exception!
      try { 
        FastAggregation.or(iterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 160L;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(2, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(2, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertEquals(2, longBuffer0.capacity());
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {160L, 0L}, longArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertEquals(2, longArray0.length);
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(2, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(2, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertEquals(2, longBuffer0.capacity());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new long[] {160L, 0L}, longArray0);
      
      LinkedList<EWAHCompressedBitmap> linkedList0 = new LinkedList<EWAHCompressedBitmap>();
      assertFalse(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(eWAHCompressedBitmap0);
      assertEquals(2, longArray0.length);
      assertTrue(linkedList0.contains(eWAHCompressedBitmap0));
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(2, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(2, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertEquals(2, longBuffer0.capacity());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertArrayEquals(new long[] {160L, 0L}, longArray0);
      
      boolean boolean1 = linkedList0.add(eWAHCompressedBitmap0);
      assertEquals(2, longArray0.length);
      assertTrue(linkedList0.contains(eWAHCompressedBitmap0));
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(2, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(2, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertEquals(2, longBuffer0.capacity());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertArrayEquals(new long[] {160L, 0L}, longArray0);
      
      Iterator<EWAHCompressedBitmap> iterator0 = linkedList0.iterator();
      assertTrue(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(2, linkedList0.size());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        FastAggregation.or(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You can only reduce the size of the bitmap within the scope of the last word. To extend the bitmap, please call setSizeInBits(int,boolean).
         //
         verifyException("com.googlecode.javaewah.EWAHCompressedBitmap", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastAggregation.or((Iterator<EWAHCompressedBitmap>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.FastAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      
      eWAHCompressedBitmap0.addStreamOfEmptyWords(false, 2147483647L);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals((-64), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      // Undeclared exception!
      FastAggregation.bufferedxorWithContainer(eWAHCompressedBitmap0, 325, eWAHCompressedBitmapArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      
      // Undeclared exception!
      try { 
        FastAggregation.bufferedxorWithContainer(eWAHCompressedBitmap0, 64, eWAHCompressedBitmapArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.FastAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[0];
      // Undeclared exception!
      try { 
        FastAggregation.bufferedxorWithContainer(eWAHCompressedBitmap0, (-252), eWAHCompressedBitmapArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -252
         //
         verifyException("com.googlecode.javaewah.FastAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      
      eWAHCompressedBitmap0.addStreamOfEmptyWords(true, 64);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(4096, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      // Undeclared exception!
      FastAggregation.bufferedxor(0, eWAHCompressedBitmapArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      long[] longArray0 = new long[2];
      longArray0[0] = 160L;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(2, longBuffer0.capacity());
      assertEquals(2, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(2, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasRemaining());
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {160L, 0L}, longArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertEquals(2, longArray0.length);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(2, longBuffer0.capacity());
      assertEquals(2, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(2, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new long[] {160L, 0L}, longArray0);
      
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      // Undeclared exception!
      try { 
        FastAggregation.bufferedxor(64, eWAHCompressedBitmapArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You can only reduce the size of the bitmap within the scope of the last word. To extend the bitmap, please call setSizeInBits(int,boolean).
         //
         verifyException("com.googlecode.javaewah.EWAHCompressedBitmap", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[0];
      // Undeclared exception!
      try { 
        FastAggregation.bufferedxor((-2040109464), eWAHCompressedBitmapArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2040109464
         //
         verifyException("com.googlecode.javaewah.FastAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[5];
      LinkedList<EWAHCompressedBitmap> linkedList0 = new LinkedList<EWAHCompressedBitmap>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<EWAHCompressedBitmap> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = FastAggregation.or(iterator0);
      assertFalse(linkedList0.contains(eWAHCompressedBitmap0));
      assertEquals(0, linkedList0.size());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap0);
      
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray1 = new EWAHCompressedBitmap[7];
      assertFalse(eWAHCompressedBitmapArray1.equals((Object)eWAHCompressedBitmapArray0));
      
      eWAHCompressedBitmapArray1[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray1[1] = eWAHCompressedBitmapArray0[0];
      eWAHCompressedBitmapArray1[2] = eWAHCompressedBitmapArray0[1];
      eWAHCompressedBitmapArray1[3] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray1[4] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray1[5] = eWAHCompressedBitmapArray0[0];
      LongBuffer longBuffer0 = LongBuffer.allocate(0);
      assertEquals(0, longBuffer0.arrayOffset());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.hasRemaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.limit());
      assertEquals(0, longBuffer0.remaining());
      assertNotNull(longBuffer0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap1 = new EWAHCompressedBitmap(longBuffer0);
      assertEquals(0, longBuffer0.arrayOffset());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.hasRemaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.limit());
      assertEquals(0, longBuffer0.remaining());
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertNotNull(eWAHCompressedBitmap1);
      
      eWAHCompressedBitmapArray1[6] = eWAHCompressedBitmap1;
      // Undeclared exception!
      try { 
        FastAggregation.bufferedxor(64, eWAHCompressedBitmapArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.HeapLongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmap0.clear(3403);
      // Undeclared exception!
      FastAggregation.bufferedorWithContainer(eWAHCompressedBitmap0, 0, eWAHCompressedBitmapArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      // Undeclared exception!
      try { 
        FastAggregation.bufferedorWithContainer(eWAHCompressedBitmapArray0[0], 28, eWAHCompressedBitmapArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.FastAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[0];
      // Undeclared exception!
      try { 
        FastAggregation.bufferedorWithContainer(eWAHCompressedBitmap0, (-384), eWAHCompressedBitmapArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -384
         //
         verifyException("com.googlecode.javaewah.FastAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      long[] longArray0 = new long[2];
      longArray0[0] = (-36L);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      // Undeclared exception!
      try { 
        FastAggregation.bufferedorWithContainer(eWAHCompressedBitmapArray0[0], 8, eWAHCompressedBitmapArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[0];
      // Undeclared exception!
      try { 
        FastAggregation.bufferedor((-499), eWAHCompressedBitmapArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -499
         //
         verifyException("com.googlecode.javaewah.FastAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      LinkedList<IteratingRLW> linkedList0 = new LinkedList<IteratingRLW>();
      BufferedORIterator bufferedORIterator0 = new BufferedORIterator(linkedList0, 18);
      EWAHCompressedBitmap eWAHCompressedBitmap0 = bufferedORIterator0.buffer;
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      long[] longArray0 = new long[0];
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      EWAHCompressedBitmap eWAHCompressedBitmap1 = new EWAHCompressedBitmap(longBuffer0);
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap1;
      // Undeclared exception!
      try { 
        FastAggregation.bufferedor((-1816), eWAHCompressedBitmapArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.HeapLongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[3];
      // Undeclared exception!
      try { 
        FastAggregation.bufferedandWithContainer(eWAHCompressedBitmap0, 64, eWAHCompressedBitmapArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.EWAHIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      // Undeclared exception!
      try { 
        FastAggregation.bufferedandWithContainer(eWAHCompressedBitmap0, (-1717986917), eWAHCompressedBitmapArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1717986917
         //
         verifyException("com.googlecode.javaewah.FastAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[6];
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      LongBuffer longBuffer0 = byteBuffer0.asLongBuffer();
      EWAHCompressedBitmap eWAHCompressedBitmap1 = new EWAHCompressedBitmap(longBuffer0);
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap1;
      // Undeclared exception!
      try { 
        FastAggregation.bufferedandWithContainer(eWAHCompressedBitmap0, (-2073432486), eWAHCompressedBitmapArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.ByteBufferAsLongBufferB", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      long[] longArray0 = new long[2];
      longArray0[0] = (-36L);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      // Undeclared exception!
      try { 
        FastAggregation.bufferedandWithContainer(eWAHCompressedBitmap0, 64, eWAHCompressedBitmapArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      // Undeclared exception!
      try { 
        FastAggregation.bufferedand((-266), eWAHCompressedBitmapArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -266
         //
         verifyException("com.googlecode.javaewah.FastAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      eWAHCompressedBitmap0.addStreamOfEmptyWords(true, (-1L));
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmapArray0[0];
      // Undeclared exception!
      FastAggregation.bufferedandWithContainer(eWAHCompressedBitmap0, 64, eWAHCompressedBitmapArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      FastAggregation.bufferedandWithContainer(eWAHCompressedBitmap0, 64, eWAHCompressedBitmapArray0);
      assertEquals(1, eWAHCompressedBitmapArray0.length);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[3];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap0;
      FastAggregation.xorToContainer(eWAHCompressedBitmap0, eWAHCompressedBitmapArray0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      // Undeclared exception!
      try { 
        FastAggregation.xorToContainer(eWAHCompressedBitmapArray0[0], eWAHCompressedBitmapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // We need at least two bitmaps
         //
         verifyException("com.googlecode.javaewah.FastAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[6];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[4] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[5] = eWAHCompressedBitmap0;
      FastAggregation.orToContainer(eWAHCompressedBitmap0, eWAHCompressedBitmapArray0);
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      // Undeclared exception!
      try { 
        FastAggregation.orToContainer(eWAHCompressedBitmapArray0[0], eWAHCompressedBitmapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // We need at least two bitmaps
         //
         verifyException("com.googlecode.javaewah.FastAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      eWAHCompressedBitmap0.addStreamOfEmptyWords(true, 64);
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      // Undeclared exception!
      try { 
        FastAggregation.bufferedorWithContainer(eWAHCompressedBitmap0, 32, eWAHCompressedBitmapArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You can only reduce the size of the bitmap within the scope of the last word. To extend the bitmap, please call setSizeInBits(int,boolean).
         //
         verifyException("com.googlecode.javaewah.EWAHCompressedBitmap", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      eWAHCompressedBitmap0.setSizeInBitsWithinLastWord(2130836487);
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      // Undeclared exception!
      FastAggregation.bufferedor(64, eWAHCompressedBitmapArray0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      EWAHCompressedBitmap eWAHCompressedBitmap1 = FastAggregation.bufferedor(64, eWAHCompressedBitmapArray0);
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[3];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      eWAHCompressedBitmap0.addStreamOfEmptyWords(true, 15L);
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap0;
      FastAggregation.bufferedandWithContainer(eWAHCompressedBitmap0, 64, eWAHCompressedBitmapArray0);
      assertEquals(1920, eWAHCompressedBitmap0.sizeInBits());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      eWAHCompressedBitmap0.addStreamOfEmptyWords(false, 2147483647L);
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[6];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[4] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[5] = eWAHCompressedBitmap0;
      // Undeclared exception!
      FastAggregation.bufferedand(64, eWAHCompressedBitmapArray0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[6];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[4] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[5] = eWAHCompressedBitmap0;
      EWAHCompressedBitmap eWAHCompressedBitmap1 = FastAggregation.bufferedand(64, eWAHCompressedBitmapArray0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LinkedList<EWAHCompressedBitmap> linkedList0 = new LinkedList<EWAHCompressedBitmap>();
      Iterator<EWAHCompressedBitmap> iterator0 = linkedList0.iterator();
      EWAHCompressedBitmap eWAHCompressedBitmap0 = FastAggregation.xor(iterator0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      EWAHCompressedBitmap eWAHCompressedBitmap1 = FastAggregation.xor(eWAHCompressedBitmapArray0);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[3];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      // Undeclared exception!
      try { 
        FastAggregation.xor(eWAHCompressedBitmapArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      EWAHCompressedBitmap eWAHCompressedBitmap1 = FastAggregation.or(eWAHCompressedBitmapArray0);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      // Undeclared exception!
      try { 
        FastAggregation.or(eWAHCompressedBitmapArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      FastAggregation.xorToContainer(eWAHCompressedBitmap0, eWAHCompressedBitmapArray0);
      assertEquals(2, eWAHCompressedBitmapArray0.length);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      // Undeclared exception!
      try { 
        FastAggregation.bufferedor((-1816), eWAHCompressedBitmapArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.FastAggregation$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      // Undeclared exception!
      try { 
        FastAggregation.bufferedxor(0, eWAHCompressedBitmapArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.FastAggregation$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[6];
      // Undeclared exception!
      try { 
        FastAggregation.bufferedand(64, eWAHCompressedBitmapArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.EWAHIterator", e);
      }
  }
}
