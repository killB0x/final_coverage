/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 23:52:52 GMT 2022
 */

package com.googlecode.javaewah;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.googlecode.javaewah.BitCounter;
import com.googlecode.javaewah.BitmapStorage;
import com.googlecode.javaewah.BufferedXORIterator;
import com.googlecode.javaewah.EWAHCompressedBitmap;
import com.googlecode.javaewah.EWAHIterator;
import com.googlecode.javaewah.IteratingBufferedRunningLengthWord;
import com.googlecode.javaewah.IteratingRLW;
import com.googlecode.javaewah.IteratorAggregation;
import com.googlecode.javaewah.LongBufferWrapper;
import com.googlecode.javaewah.NonEmptyVirtualStorage;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.nio.charset.Charset;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorAggregation_ESTest extends IteratorAggregation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[4];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords(64);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals((-63), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      long[] longArray0 = new long[4];
      int int0 = IteratorAggregation.inplaceand(longArray0, iteratingBufferedRunningLengthWord0);
      assertEquals(0, int0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals((-63), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, longArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[3];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      EWAHIterator eWAHIterator0 = eWAHCompressedBitmap0.getEWAHIterator();
      assertNotNull(eWAHIterator0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = iteratingBufferedRunningLengthWord0.clone();
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertNotSame(iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingRLW iteratingRLW0 = IteratorAggregation.not(iteratingBufferedRunningLengthWord0);
      assertNotNull(iteratingRLW0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertFalse(iteratingBufferedRunningLengthWord0.equals((Object)iteratingBufferedRunningLengthWord1));
      assertNotSame(iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingRLW iteratingRLW1 = IteratorAggregation.not(iteratingBufferedRunningLengthWord1);
      assertNotNull(iteratingRLW1);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertFalse(iteratingBufferedRunningLengthWord0.equals((Object)iteratingBufferedRunningLengthWord1));
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertFalse(iteratingRLW1.equals((Object)iteratingRLW0));
      assertNotSame(iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertNotSame(iteratingRLW1, iteratingRLW0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[4];
      iteratingRLWArray0[0] = iteratingRLW0;
      iteratingRLWArray0[1] = iteratingRLW1;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedxor(iteratingRLWArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.BufferedXORIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long[] longArray0 = new long[9];
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords(2251L);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals((-2250), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      int int0 = IteratorAggregation.inplacexor(longArray0, iteratingBufferedRunningLengthWord0);
      assertEquals(0, int0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals((-2250), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, longArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      EWAHIterator eWAHIterator0 = eWAHCompressedBitmap0.getEWAHIterator();
      assertNotNull(eWAHIterator0);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      boolean boolean0 = eWAHCompressedBitmap0.set(1400);
      assertTrue(boolean0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1401, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1401, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(21L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1401, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertEquals(21L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[4];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[1] = (IteratingRLW) iteratingBufferedRunningLengthWord1;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedor(64, iteratingRLWArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.BufferedORIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[17];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(17, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      EWAHIterator eWAHIterator0 = eWAHCompressedBitmap0.getEWAHIterator();
      assertNotNull(eWAHIterator0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(17, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(17, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratorAggregation.xorToContainer(eWAHCompressedBitmap0, 0, iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(17, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(1, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratorAggregation.dischargeAsEmpty(eWAHCompressedBitmap0, iteratingBufferedRunningLengthWord1);
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratorAggregation.xorToContainer(eWAHCompressedBitmap0, 64, iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertFalse(iteratingBufferedRunningLengthWord0.equals((Object)iteratingBufferedRunningLengthWord1));
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertNotSame(iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords(601L);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals((-600), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratorAggregation.xorToContainer(eWAHCompressedBitmap0, 262, iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals((-600), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[16];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(16, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords(64);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals((-63), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(16, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertEquals(16, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratorAggregation.andToContainer(eWAHCompressedBitmap0, iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals((-63), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertFalse(iteratingBufferedRunningLengthWord0.equals((Object)iteratingBufferedRunningLengthWord1));
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertNotSame(iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertEquals(16, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BitCounter bitCounter0 = new BitCounter();
      assertNotNull(bitCounter0);
      assertEquals(0, bitCounter0.getCount());
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1206L;
      longArray0[1] = 1206L;
      longArray0[3] = (long) 15;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(6, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=6 cap=6]", longBuffer0.toString());
      assertEquals(6, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(6, longBuffer0.limit());
      assertArrayEquals(new long[] {1206L, 1206L, 0L, 15L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 15);
      assertNotNull(longBufferWrapper0);
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(6, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=6 cap=6]", longBuffer0.toString());
      assertEquals(6, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(6, longBuffer0.limit());
      assertEquals(15, longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {1206L, 1206L, 0L, 15L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(6, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=6 cap=6]", longBuffer0.toString());
      assertEquals(6, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(6, longBuffer0.limit());
      assertEquals(15, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {1206L, 1206L, 0L, 15L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(6, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=6 cap=6]", longBuffer0.toString());
      assertEquals(6, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(6, longBuffer0.limit());
      assertEquals(15, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(603L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new long[] {1206L, 1206L, 0L, 15L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(6, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=6 cap=6]", longBuffer0.toString());
      assertEquals(6, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(6, longBuffer0.limit());
      assertEquals(15, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(603L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertArrayEquals(new long[] {1206L, 1206L, 0L, 15L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      IteratorAggregation.andToContainer(bitCounter0, 15, iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertEquals(0, bitCounter0.getCount());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(6, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=6 cap=6]", longBuffer0.toString());
      assertEquals(6, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(6, longBuffer0.limit());
      assertEquals(15, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.equals((Object)iteratingBufferedRunningLengthWord1));
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertNotSame(iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new long[] {1206L, 1206L, 0L, 15L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-3329L);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(2, longBuffer0.capacity());
      assertEquals(2, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals(2, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertArrayEquals(new long[] {(-3329L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 553);
      assertNotNull(longBufferWrapper0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(2, longBuffer0.capacity());
      assertEquals(2, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals(2, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(553, longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {(-3329L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(2, longBuffer0.capacity());
      assertEquals(2, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals(2, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(553, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {(-3329L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(2, longBuffer0.capacity());
      assertEquals(2, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals(2, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(553, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(Integer.MAX_VALUE, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals((-1665L), iteratingBufferedRunningLengthWord0.getRunningLength());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new long[] {(-3329L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[8];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[1] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedand(553, iteratingRLWArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[6];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[4];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[1] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedand(0, iteratingRLWArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.BufferedAndIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(1, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[3];
      iteratingBufferedRunningLengthWord1.discardLiteralWords(64);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals((-63), iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[1] = (IteratingRLW) iteratingBufferedRunningLengthWord1;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedand(64, iteratingRLWArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.BufferedAndIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(5);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      EWAHIterator eWAHIterator0 = eWAHCompressedBitmap0.getEWAHIterator();
      assertNotNull(eWAHIterator0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords(31157684L);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals((-31157684), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[6];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedand(0, iteratingRLWArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.BufferedAndIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1750;
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1751, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertArrayEquals(new int[] {1750}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(1751, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(27L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {1750}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      long long0 = IteratorAggregation.dischargeNegated(eWAHCompressedBitmap0, iteratingBufferedRunningLengthWord0, 1750);
      assertEquals(28L, long0);
      assertEquals(44, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(3543, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(32, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {1750}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      long long0 = IteratorAggregation.dischargeNegated(eWAHCompressedBitmap0, iteratingBufferedRunningLengthWord0, (-2066L));
      assertEquals(0L, long0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[10];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords(2147483646L);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals((-2147483645), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      long long0 = IteratorAggregation.dischargeNegated(eWAHCompressedBitmap0, iteratingBufferedRunningLengthWord0, 64);
      assertEquals(0L, long0);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals((-2147483645), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BitCounter bitCounter0 = new BitCounter();
      assertNotNull(bitCounter0);
      assertEquals(0, bitCounter0.getCount());
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1206L;
      longArray0[1] = 1206L;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=6 cap=6]", longBuffer0.toString());
      assertEquals(6, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(6, longBuffer0.limit());
      assertEquals(6, longBuffer0.capacity());
      assertArrayEquals(new long[] {1206L, 1206L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 15);
      assertNotNull(longBufferWrapper0);
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=6 cap=6]", longBuffer0.toString());
      assertEquals(6, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(6, longBuffer0.limit());
      assertEquals(6, longBuffer0.capacity());
      assertEquals(15, longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {1206L, 1206L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=6 cap=6]", longBuffer0.toString());
      assertEquals(6, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(6, longBuffer0.limit());
      assertEquals(6, longBuffer0.capacity());
      assertEquals(15, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {1206L, 1206L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=6 cap=6]", longBuffer0.toString());
      assertEquals(6, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(6, longBuffer0.limit());
      assertEquals(6, longBuffer0.capacity());
      assertEquals(15, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(603L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new long[] {1206L, 1206L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      long long0 = iteratingBufferedRunningLengthWord0.discharge((BitmapStorage) bitCounter0, (-1L));
      assertEquals((-1L), long0);
      assertEquals(0, bitCounter0.getCount());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=6 cap=6]", longBuffer0.toString());
      assertEquals(6, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(6, longBuffer0.limit());
      assertEquals(6, longBuffer0.capacity());
      assertEquals(15, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(604L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new long[] {1206L, 1206L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      EWAHIterator eWAHIterator1 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator1);
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=6 cap=6]", longBuffer0.toString());
      assertEquals(6, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(6, longBuffer0.limit());
      assertEquals(6, longBuffer0.capacity());
      assertEquals(15, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator1.hasNext());
      assertFalse(eWAHIterator1.equals((Object)eWAHIterator0));
      assertArrayEquals(new long[] {1206L, 1206L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHIterator1);
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=6 cap=6]", longBuffer0.toString());
      assertEquals(6, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(6, longBuffer0.limit());
      assertEquals(6, longBuffer0.capacity());
      assertEquals(15, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator1.hasNext());
      assertEquals(603L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertFalse(eWAHIterator1.equals((Object)eWAHIterator0));
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertArrayEquals(new long[] {1206L, 1206L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      IteratorAggregation.xorToContainer(bitCounter0, 1, iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertEquals(0, bitCounter0.getCount());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=6 cap=6]", longBuffer0.toString());
      assertEquals(6, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(6, longBuffer0.limit());
      assertEquals(6, longBuffer0.capacity());
      assertEquals(15, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertTrue(eWAHIterator1.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(eWAHIterator0.equals((Object)eWAHIterator1));
      assertFalse(iteratingBufferedRunningLengthWord0.equals((Object)iteratingBufferedRunningLengthWord1));
      assertFalse(eWAHIterator1.equals((Object)eWAHIterator0));
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertNotSame(eWAHIterator0, eWAHIterator1);
      assertNotSame(iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertNotSame(eWAHIterator1, eWAHIterator0);
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new long[] {1206L, 1206L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-508);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals(0, longBuffer0.position());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(9, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals(9, longBuffer0.limit());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(9, longBuffer0.capacity());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=9 cap=9]", longBuffer0.toString());
      assertArrayEquals(new long[] {(-508L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0);
      assertNotNull(longBufferWrapper0);
      assertEquals(0, longBuffer0.position());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(9, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals(9, longBuffer0.limit());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(9, longBuffer0.capacity());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=9 cap=9]", longBuffer0.toString());
      assertEquals(1, longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {(-508L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertEquals(0, longBuffer0.position());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(9, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals(9, longBuffer0.limit());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(9, longBuffer0.capacity());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=9 cap=9]", longBuffer0.toString());
      assertEquals(1, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {(-508L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(0, longBuffer0.position());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(9, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals(9, longBuffer0.limit());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(9, longBuffer0.capacity());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=9 cap=9]", longBuffer0.toString());
      assertEquals(1, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(Integer.MAX_VALUE, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals((-254L), iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new long[] {(-508L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      long long0 = IteratorAggregation.discharge((BitmapStorage) null, iteratingBufferedRunningLengthWord0, (-508L));
      assertEquals(0L, long0);
      assertEquals(0, longBuffer0.position());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(9, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals(9, longBuffer0.limit());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(9, longBuffer0.capacity());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=9 cap=9]", longBuffer0.toString());
      assertEquals(1, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(Integer.MAX_VALUE, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals((-254L), iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new long[] {(-508L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[10];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords(2147483646L);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals((-2147483645), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      long long0 = IteratorAggregation.discharge(eWAHCompressedBitmap0, iteratingBufferedRunningLengthWord0, (-1640531535L));
      assertEquals(0L, long0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals((-2147483645), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords(64);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals((-63), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratorAggregation.dischargeAsEmpty(eWAHCompressedBitmap0, iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals((-63), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      long long0 = iteratingBufferedRunningLengthWord0.discharge((BitmapStorage) eWAHCompressedBitmap0, (-137L));
      assertEquals((-137L), long0);
      assertEquals((-8768), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(137L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[1];
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertEquals((-8768), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertEquals((-137L), iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord1;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedxor(iteratingRLWArray0);
      assertNotNull(iteratingRLW0);
      assertEquals((-137L), iteratingRLW0.getRunningLength());
      assertEquals(0, iteratingRLW0.getNumberOfLiteralWords());
      assertFalse(iteratingRLW0.getRunningBit());
      assertFalse(iteratingRLW0.equals((Object)iteratingBufferedRunningLengthWord0));
      assertSame(iteratingRLW0, iteratingBufferedRunningLengthWord1);
      assertNotSame(iteratingRLW0, iteratingBufferedRunningLengthWord0);
      assertEquals(1, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[3];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingRLW iteratingRLW0 = IteratorAggregation.not(iteratingBufferedRunningLengthWord1);
      assertNotNull(iteratingRLW0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord2 = iteratingBufferedRunningLengthWord1.clone();
      assertNotNull(iteratingBufferedRunningLengthWord2);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord2.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord2.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord2.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertFalse(iteratingBufferedRunningLengthWord2.equals((Object)iteratingBufferedRunningLengthWord1));
      assertFalse(iteratingBufferedRunningLengthWord2.equals((Object)iteratingBufferedRunningLengthWord0));
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord2);
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertNotSame(iteratingBufferedRunningLengthWord2, iteratingBufferedRunningLengthWord1);
      assertNotSame(iteratingBufferedRunningLengthWord2, iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratorAggregation.xorToContainer(eWAHCompressedBitmap0, 2147483639, iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord0);
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertFalse(iteratingBufferedRunningLengthWord0.equals((Object)iteratingBufferedRunningLengthWord1));
      assertFalse(iteratingBufferedRunningLengthWord0.equals((Object)iteratingBufferedRunningLengthWord2));
      assertNotSame(iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertNotSame(iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord2);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[6];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[1] = iteratingRLW0;
      iteratingRLWArray0[2] = iteratingRLW0;
      iteratingRLWArray0[3] = (IteratingRLW) iteratingBufferedRunningLengthWord2;
      iteratingRLWArray0[4] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[5] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      IteratingRLW iteratingRLW1 = IteratorAggregation.bufferedxor(iteratingRLWArray0);
      assertNotNull(iteratingRLW1);
      assertEquals(0, iteratingRLW1.getNumberOfLiteralWords());
      assertEquals(1L, iteratingRLW1.getRunningLength());
      assertTrue(iteratingRLW1.getRunningBit());
      assertEquals(6, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[1];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedxor(iteratingRLWArray0);
      assertNotNull(iteratingRLW0);
      assertEquals(0, iteratingRLW0.getNumberOfLiteralWords());
      assertFalse(iteratingRLW0.getRunningBit());
      assertEquals(0L, iteratingRLW0.getRunningLength());
      assertSame(iteratingRLW0, iteratingBufferedRunningLengthWord0);
      assertEquals(1, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      EWAHIterator eWAHIterator0 = eWAHCompressedBitmap0.getEWAHIterator();
      assertNotNull(eWAHIterator0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      boolean boolean0 = eWAHCompressedBitmap0.set(1400);
      assertTrue(boolean0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1401, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1401, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(21L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[1];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedxor(iteratingRLWArray0);
      assertNotNull(iteratingRLW0);
      assertEquals(1, iteratingRLW0.getNumberOfLiteralWords());
      assertEquals(21L, iteratingRLW0.getRunningLength());
      assertFalse(iteratingRLW0.getRunningBit());
      assertSame(iteratingRLW0, iteratingBufferedRunningLengthWord0);
      assertEquals(1, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[12];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(12, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(12, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[1];
      iteratingBufferedRunningLengthWord0.discardLiteralWords(64);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals((-63), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(12, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedxor(iteratingRLWArray0);
      assertNotNull(iteratingRLW0);
      assertEquals(0L, iteratingRLW0.getRunningLength());
      assertFalse(iteratingRLW0.getRunningBit());
      assertEquals((-63), iteratingRLW0.getNumberOfLiteralWords());
      assertSame(iteratingRLW0, iteratingBufferedRunningLengthWord0);
      assertEquals(1, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(5);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      EWAHIterator eWAHIterator0 = eWAHCompressedBitmap0.getEWAHIterator();
      assertNotNull(eWAHIterator0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      eWAHCompressedBitmap0.addWord(997045979L, 5);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(5, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[2];
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(5, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord1;
      iteratingRLWArray0[1] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedxor(5, iteratingRLWArray0);
      assertNotNull(iteratingRLW0);
      assertEquals(1, iteratingRLW0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingRLW0.getRunningLength());
      assertFalse(iteratingRLW0.getRunningBit());
      assertEquals(2, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(1, longBuffer0.limit());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(1, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasRemaining());
      assertArrayEquals(new long[] {15L}, longArray0);
      assertEquals(1, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 15);
      assertNotNull(longBufferWrapper0);
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(1, longBuffer0.limit());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(1, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(15, longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {15L}, longArray0);
      assertEquals(1, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(1, longBuffer0.limit());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(1, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(15, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {15L}, longArray0);
      assertEquals(1, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(1, longBuffer0.limit());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(1, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(15, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(7L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new long[] {15L}, longArray0);
      assertEquals(1, longArray0.length);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[1];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedor(iteratingRLWArray0);
      assertNotNull(iteratingRLW0);
      assertEquals(0, iteratingRLW0.getNumberOfLiteralWords());
      assertEquals(7L, iteratingRLW0.getRunningLength());
      assertTrue(iteratingRLW0.getRunningBit());
      assertSame(iteratingRLW0, iteratingBufferedRunningLengthWord0);
      assertEquals(1, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long[] longArray0 = new long[1];
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(1, longBuffer0.remaining());
      assertEquals(1, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 15);
      assertNotNull(longBufferWrapper0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(1, longBuffer0.remaining());
      assertEquals(1, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(15, longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(1, longBuffer0.remaining());
      assertEquals(1, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(15, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(1, longBuffer0.remaining());
      assertEquals(1, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(15, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[1];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedor(iteratingRLWArray0);
      assertNotNull(iteratingRLW0);
      assertEquals(0L, iteratingRLW0.getRunningLength());
      assertFalse(iteratingRLW0.getRunningBit());
      assertEquals(0, iteratingRLW0.getNumberOfLiteralWords());
      assertSame(iteratingRLW0, iteratingBufferedRunningLengthWord0);
      assertEquals(1, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[3];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      EWAHIterator eWAHIterator0 = eWAHCompressedBitmap0.getEWAHIterator();
      assertNotNull(eWAHIterator0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[4];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[1] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[2] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[3] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedor(iteratingRLWArray0);
      assertNotNull(iteratingRLW0);
      assertEquals(1, iteratingRLW0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingRLW0.getRunningLength());
      assertFalse(iteratingRLW0.getRunningBit());
      assertEquals(4, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords(64);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals((-63), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[1];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedor(iteratingRLWArray0);
      assertNotNull(iteratingRLW0);
      assertEquals((-63), iteratingRLW0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingRLW0.getRunningLength());
      assertFalse(iteratingRLW0.getRunningBit());
      assertSame(iteratingRLW0, iteratingBufferedRunningLengthWord0);
      assertEquals(1, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 3;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals(7, longBuffer0.limit());
      assertEquals(7, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 3);
      assertNotNull(longBufferWrapper0);
      assertEquals(7, longBuffer0.limit());
      assertEquals(7, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(3, longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertEquals(7, longBuffer0.limit());
      assertEquals(7, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(3, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(7, longBuffer0.limit());
      assertEquals(7, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(3, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = iteratingBufferedRunningLengthWord0.clone();
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertEquals(7, longBuffer0.limit());
      assertEquals(7, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(3, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertTrue(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertNotSame(iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      int int0 = IteratorAggregation.inplacexor(longArray0, iteratingBufferedRunningLengthWord1);
      assertEquals(1, int0);
      assertEquals(7, longBuffer0.limit());
      assertEquals(7, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(3, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.equals((Object)iteratingBufferedRunningLengthWord1));
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertNotSame(iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new long[] {(-4L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[4];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord1;
      IteratingRLW[] iteratingRLWArray1 = new IteratingRLW[6];
      assertFalse(iteratingRLWArray1.equals((Object)iteratingRLWArray0));
      
      iteratingRLWArray1[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray1[1] = (IteratingRLW) iteratingBufferedRunningLengthWord1;
      iteratingRLWArray1[2] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray1[3] = (IteratingRLW) iteratingBufferedRunningLengthWord1;
      iteratingRLWArray1[4] = (IteratingRLW) iteratingBufferedRunningLengthWord1;
      iteratingRLWArray1[5] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedxor(1, iteratingRLWArray1);
      assertNotNull(iteratingRLW0);
      assertTrue(iteratingRLW0.getRunningBit());
      assertEquals(1L, iteratingRLW0.getRunningLength());
      assertEquals(0, iteratingRLW0.getNumberOfLiteralWords());
      assertFalse(iteratingRLWArray1.equals((Object)iteratingRLWArray0));
      assertNotSame(iteratingRLWArray1, iteratingRLWArray0);
      assertEquals(6, iteratingRLWArray1.length);
      
      iteratingRLWArray0[1] = iteratingRLW0;
      iteratingRLWArray0[2] = (IteratingRLW) iteratingBufferedRunningLengthWord1;
      iteratingRLWArray0[3] = (IteratingRLW) iteratingBufferedRunningLengthWord1;
      IteratingRLW iteratingRLW1 = IteratorAggregation.bufferedor(1, iteratingRLWArray0);
      assertNotNull(iteratingRLW1);
      assertEquals(0, iteratingRLW1.getNumberOfLiteralWords());
      assertTrue(iteratingRLW1.getRunningBit());
      assertEquals(1L, iteratingRLW1.getRunningLength());
      assertFalse(iteratingRLW1.equals((Object)iteratingRLW0));
      assertFalse(iteratingRLWArray0.equals((Object)iteratingRLWArray1));
      assertNotSame(iteratingRLW1, iteratingRLW0);
      assertNotSame(iteratingRLWArray0, iteratingRLWArray1);
      assertEquals(4, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[1];
      LinkedList<IteratingRLW> linkedList0 = new LinkedList<IteratingRLW>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BufferedXORIterator bufferedXORIterator0 = new BufferedXORIterator(linkedList0, 8);
      assertNotNull(bufferedXORIterator0);
      assertEquals(0, linkedList0.size());
      
      EWAHIterator eWAHIterator0 = bufferedXORIterator0.next();
      assertNotNull(eWAHIterator0);
      assertEquals(0, linkedList0.size());
      assertTrue(eWAHIterator0.hasNext());
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(0, linkedList0.size());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedor(8, iteratingRLWArray0);
      assertNotNull(iteratingRLW0);
      assertEquals(0L, iteratingRLW0.getRunningLength());
      assertFalse(iteratingRLW0.getRunningBit());
      assertEquals(0, iteratingRLW0.getNumberOfLiteralWords());
      assertSame(iteratingRLW0, iteratingBufferedRunningLengthWord0);
      assertEquals(1, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      EWAHIterator eWAHIterator0 = eWAHCompressedBitmap0.getEWAHIterator();
      assertNotNull(eWAHIterator0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      boolean boolean0 = eWAHCompressedBitmap0.set(1400);
      assertTrue(boolean0);
      assertEquals(1401, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(1401, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(21L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[4];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[1] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[2] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[3] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedor(64, iteratingRLWArray0);
      assertNotNull(iteratingRLW0);
      assertEquals(21L, iteratingRLW0.getRunningLength());
      assertFalse(iteratingRLW0.getRunningBit());
      assertEquals(1, iteratingRLW0.getNumberOfLiteralWords());
      assertEquals(4, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      long long0 = iteratingBufferedRunningLengthWord0.discharge((BitmapStorage) eWAHCompressedBitmap0, (-137L));
      assertEquals((-137L), long0);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals((-8768), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(137L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[1];
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals((-8768), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertEquals((-137L), iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord1;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedand(iteratingRLWArray0);
      assertNotNull(iteratingRLW0);
      assertFalse(iteratingRLW0.getRunningBit());
      assertEquals((-137L), iteratingRLW0.getRunningLength());
      assertEquals(0, iteratingRLW0.getNumberOfLiteralWords());
      assertFalse(iteratingRLW0.equals((Object)iteratingBufferedRunningLengthWord0));
      assertNotSame(iteratingRLW0, iteratingBufferedRunningLengthWord0);
      assertSame(iteratingRLW0, iteratingBufferedRunningLengthWord1);
      assertEquals(1, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long[] longArray0 = new long[14];
      longArray0[0] = (long) 19;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(14, longBuffer0.limit());
      assertEquals(0, longBuffer0.position());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(14, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0);
      assertNotNull(longBufferWrapper0);
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(14, longBuffer0.limit());
      assertEquals(0, longBuffer0.position());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(1, longBufferWrapper0.sizeInWords());
      assertEquals(14, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(14, longBuffer0.limit());
      assertEquals(0, longBuffer0.position());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(1, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(14, longArray0.length);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[1];
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(14, longBuffer0.limit());
      assertEquals(0, longBuffer0.position());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(1, longBufferWrapper0.sizeInWords());
      assertFalse(eWAHIterator0.hasNext());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(9L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(14, longArray0.length);
      
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedand(iteratingRLWArray0);
      assertNotNull(iteratingRLW0);
      assertEquals(0, iteratingRLW0.getNumberOfLiteralWords());
      assertTrue(iteratingRLW0.getRunningBit());
      assertEquals(9L, iteratingRLW0.getRunningLength());
      assertSame(iteratingRLW0, iteratingBufferedRunningLengthWord0);
      assertEquals(1, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[14];
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(14, longBuffer0.limit());
      assertEquals(14, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0);
      assertNotNull(longBufferWrapper0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(14, longBuffer0.limit());
      assertEquals(1, longBufferWrapper0.sizeInWords());
      assertEquals(14, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(14, longBuffer0.limit());
      assertEquals(1, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(14, longArray0.length);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[1];
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(14, longBuffer0.limit());
      assertEquals(1, longBufferWrapper0.sizeInWords());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(14, longArray0.length);
      
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedand(iteratingRLWArray0);
      assertNotNull(iteratingRLW0);
      assertEquals(0L, iteratingRLW0.getRunningLength());
      assertFalse(iteratingRLW0.getRunningBit());
      assertEquals(0, iteratingRLW0.getNumberOfLiteralWords());
      assertSame(iteratingRLW0, iteratingBufferedRunningLengthWord0);
      assertEquals(1, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[3];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = iteratingBufferedRunningLengthWord0.clone();
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertNotSame(iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[3];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[1] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[2] = (IteratingRLW) iteratingBufferedRunningLengthWord1;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedand(iteratingRLWArray0);
      assertNotNull(iteratingRLW0);
      assertEquals(0L, iteratingRLW0.getRunningLength());
      assertFalse(iteratingRLW0.getRunningBit());
      assertEquals(1, iteratingRLW0.getNumberOfLiteralWords());
      assertEquals(3, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[8];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords(308L);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals((-307), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[1];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedand(iteratingRLWArray0);
      assertNotNull(iteratingRLW0);
      assertEquals((-307), iteratingRLW0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingRLW0.getRunningLength());
      assertFalse(iteratingRLW0.getRunningBit());
      assertSame(iteratingRLW0, iteratingBufferedRunningLengthWord0);
      assertEquals(1, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      EWAHIterator eWAHIterator0 = eWAHCompressedBitmap0.getEWAHIterator();
      assertNotNull(eWAHIterator0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[2];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedand(3, iteratingRLWArray0);
      assertNotNull(iteratingRLW0);
      assertFalse(iteratingRLW0.getRunningBit());
      assertEquals(0, iteratingRLW0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingRLW0.getRunningLength());
      assertEquals(2, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      EWAHIterator eWAHIterator0 = eWAHCompressedBitmap0.getEWAHIterator();
      assertNotNull(eWAHIterator0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      boolean boolean0 = eWAHCompressedBitmap0.set(1400);
      assertTrue(boolean0);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1401, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1401, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(21L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[1];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedand((-1169), iteratingRLWArray0);
      assertNotNull(iteratingRLW0);
      assertFalse(iteratingRLW0.getRunningBit());
      assertEquals(1, iteratingRLW0.getNumberOfLiteralWords());
      assertEquals(21L, iteratingRLW0.getRunningLength());
      assertSame(iteratingRLW0, iteratingBufferedRunningLengthWord0);
      assertEquals(1, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.xorToContainer(eWAHCompressedBitmap0, (-134), (IteratingRLW) null, (IteratingRLW) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.IteratorAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 3;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals(2, longBuffer0.capacity());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(2, longBuffer0.remaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(2, longBuffer0.limit());
      assertArrayEquals(new long[] {3L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(2, longBuffer0.capacity());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(2, longBuffer0.remaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(2, longBuffer0.limit());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertArrayEquals(new long[] {3L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingRLW iteratingRLW0 = eWAHCompressedBitmap0.getIteratingRLW();
      assertNotNull(iteratingRLW0);
      assertEquals(2, longBuffer0.capacity());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(2, longBuffer0.remaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(2, longBuffer0.limit());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1L, iteratingRLW0.getRunningLength());
      assertTrue(iteratingRLW0.getRunningBit());
      assertEquals(0, iteratingRLW0.getNumberOfLiteralWords());
      assertArrayEquals(new long[] {3L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.xorToContainer(eWAHCompressedBitmap0, 64, iteratingRLW0, iteratingRLW0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("java.nio.HeapLongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[12];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(12, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(12, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords((-4364L));
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(4365, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(12, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.xorToContainer(eWAHCompressedBitmap0, 64, iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorAggregation.inplacexor((long[]) null, (IteratingRLW) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.IteratorAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 3;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(1, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(1, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertArrayEquals(new long[] {3L}, longArray0);
      assertEquals(1, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 3);
      assertNotNull(longBufferWrapper0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(1, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(1, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(3, longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {3L}, longArray0);
      assertEquals(1, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(1, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(1, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(3, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {3L}, longArray0);
      assertEquals(1, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(1, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(1, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(3, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new long[] {3L}, longArray0);
      assertEquals(1, longArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.inplacexor(longArray0, iteratingBufferedRunningLengthWord0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-2);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertFalse(longBuffer0.isDirect());
      assertEquals(4, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(4, longBuffer0.limit());
      assertEquals(4, longBuffer0.capacity());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertArrayEquals(new long[] {(-2L), 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, (-2));
      assertNotNull(longBufferWrapper0);
      assertFalse(longBuffer0.isDirect());
      assertEquals(4, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(4, longBuffer0.limit());
      assertEquals(4, longBuffer0.capacity());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertEquals((-2), longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {(-2L), 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertFalse(longBuffer0.isDirect());
      assertEquals(4, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(4, longBuffer0.limit());
      assertEquals(4, longBuffer0.capacity());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertEquals((-2), longBufferWrapper0.sizeInWords());
      assertFalse(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {(-2L), 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertFalse(longBuffer0.isDirect());
      assertEquals(4, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(4, longBuffer0.limit());
      assertEquals(4, longBuffer0.capacity());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertEquals((-2), longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals((-1L), iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(Integer.MAX_VALUE, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new long[] {(-2L), 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.inplacexor(longArray0, iteratingBufferedRunningLengthWord0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 4
         //
         verifyException("com.googlecode.javaewah.IteratorAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorAggregation.inplaceor((long[]) null, (IteratingRLW) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.IteratorAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long[] longArray0 = new long[14];
      longArray0[0] = (long) 19;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(14, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertEquals(14, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 19);
      assertNotNull(longBufferWrapper0);
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(14, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertEquals(14, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(14, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(14, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(14, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(9L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(14, longArray0.length);
      
      int int0 = IteratorAggregation.inplacexor(longArray0, iteratingBufferedRunningLengthWord0);
      assertEquals(14, int0);
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(14, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(2147483641, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(14, longArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.inplaceor(longArray0, iteratingBufferedRunningLengthWord0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-2147081797);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(1, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertEquals(1, longBuffer0.remaining());
      assertArrayEquals(new long[] {(-2147081797L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(1, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertEquals(1, longBuffer0.remaining());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertArrayEquals(new long[] {(-2147081797L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingRLW iteratingRLW0 = eWAHCompressedBitmap0.getIteratingRLW();
      assertNotNull(iteratingRLW0);
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(1, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertEquals(1, longBuffer0.remaining());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(iteratingRLW0.getRunningBit());
      assertEquals(Integer.MAX_VALUE, iteratingRLW0.getNumberOfLiteralWords());
      assertEquals((-1073540899L), iteratingRLW0.getRunningLength());
      assertArrayEquals(new long[] {(-2147081797L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.inplaceor(longArray0, iteratingRLW0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-1073540899)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      long[] longArray0 = new long[1];
      iteratingBufferedRunningLengthWord0.discardLiteralWords((-782L));
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(783, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.inplaceor(longArray0, iteratingBufferedRunningLengthWord0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorAggregation.inplaceand((long[]) null, (IteratingRLW) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.IteratorAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords((-3349L));
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(3350, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      long[] longArray0 = new long[4];
      // Undeclared exception!
      try { 
        IteratorAggregation.inplaceand(longArray0, iteratingBufferedRunningLengthWord0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[4];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      NonEmptyVirtualStorage nonEmptyVirtualStorage0 = new NonEmptyVirtualStorage();
      assertNotNull(nonEmptyVirtualStorage0);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.dischargeNegated(nonEmptyVirtualStorage0, iteratingBufferedRunningLengthWord0, 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorAggregation.dischargeNegated((BitmapStorage) null, (IteratingRLW) null, (-2147081797));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.IteratorAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1640531535L);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(2, longBuffer0.capacity());
      assertEquals(2, longBuffer0.remaining());
      assertEquals(2, longBuffer0.limit());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertArrayEquals(new long[] {(-1640531535L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertNotNull(eWAHCompressedBitmap0);
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(2, longBuffer0.capacity());
      assertEquals(2, longBuffer0.remaining());
      assertEquals(2, longBuffer0.limit());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertArrayEquals(new long[] {(-1640531535L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(2, longBuffer0.capacity());
      assertEquals(2, longBuffer0.remaining());
      assertEquals(2, longBuffer0.limit());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals((-820265768L), iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(Integer.MAX_VALUE, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new long[] {(-1640531535L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.dischargeNegated(eWAHCompressedBitmap0, iteratingBufferedRunningLengthWord0, 64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[8];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords((-3462L));
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(3463, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.dischargeNegated(eWAHCompressedBitmap0, iteratingBufferedRunningLengthWord0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[0];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.dischargeAsEmpty(eWAHCompressedBitmap0, (IteratingRLW) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.IteratorAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      NonEmptyVirtualStorage nonEmptyVirtualStorage0 = new NonEmptyVirtualStorage();
      assertNotNull(nonEmptyVirtualStorage0);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.discharge(nonEmptyVirtualStorage0, iteratingBufferedRunningLengthWord0, 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[3];
      // Undeclared exception!
      try { 
        IteratorAggregation.discharge(eWAHCompressedBitmap0, iteratingRLWArray0[2], 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.IteratorAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-5);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals(4, longBuffer0.capacity());
      assertEquals(4, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(4, longBuffer0.limit());
      assertArrayEquals(new long[] {(-5L), 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals(4, longBuffer0.capacity());
      assertEquals(4, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(4, longBuffer0.limit());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertArrayEquals(new long[] {(-5L), 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals(4, longBuffer0.capacity());
      assertEquals(4, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(4, longBuffer0.limit());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals((-3L), iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(Integer.MAX_VALUE, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new long[] {(-5L), 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.discharge(eWAHCompressedBitmap0, iteratingBufferedRunningLengthWord0, 2147483647L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[19];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(19, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(19, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords(2147483655L);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(2147483642, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(19, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.discharge(eWAHCompressedBitmap0, iteratingBufferedRunningLengthWord0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 5;
      longArray0[1] = 997045979L;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals(7, longBuffer0.remaining());
      assertEquals(7, longBuffer0.capacity());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(7, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertArrayEquals(new long[] {5L, 997045979L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 64);
      assertNotNull(longBufferWrapper0);
      assertEquals(7, longBuffer0.remaining());
      assertEquals(7, longBuffer0.capacity());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(7, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(64, longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {5L, 997045979L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertEquals(7, longBuffer0.remaining());
      assertEquals(7, longBuffer0.capacity());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(7, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(64, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {5L, 997045979L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(7, longBuffer0.remaining());
      assertEquals(7, longBuffer0.capacity());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(7, longBuffer0.limit());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(64, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(2L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new long[] {5L, 997045979L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[3];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      // Undeclared exception!
      IteratorAggregation.bufferedxor(iteratingRLWArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long[] longArray0 = new long[14];
      longArray0[0] = (long) 19;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(14, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(14, longBuffer0.limit());
      assertEquals(14, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 19);
      assertNotNull(longBufferWrapper0);
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(14, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(14, longBuffer0.limit());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertEquals(14, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(14, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(14, longBuffer0.limit());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(14, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(14, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(14, longBuffer0.limit());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(9L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(14, longArray0.length);
      
      int int0 = IteratorAggregation.inplacexor(longArray0, iteratingBufferedRunningLengthWord0);
      assertEquals(14, int0);
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(14, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(14, longBuffer0.limit());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(2147483641, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(14, longArray0.length);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[4];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedxor(iteratingRLWArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-508);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals(9, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(9, longBuffer0.limit());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(9, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=9 cap=9]", longBuffer0.toString());
      assertArrayEquals(new long[] {(-508L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, (-508));
      assertNotNull(longBufferWrapper0);
      assertEquals(9, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(9, longBuffer0.limit());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(9, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=9 cap=9]", longBuffer0.toString());
      assertEquals((-508), longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {(-508L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertEquals(9, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(9, longBuffer0.limit());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(9, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=9 cap=9]", longBuffer0.toString());
      assertEquals((-508), longBufferWrapper0.sizeInWords());
      assertFalse(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {(-508L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(9, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(9, longBuffer0.limit());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(9, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=9 cap=9]", longBuffer0.toString());
      assertEquals((-508), longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals((-254L), iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(Integer.MAX_VALUE, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new long[] {(-508L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[4];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedxor(iteratingRLWArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -254 out of bounds for length 65536
         //
         verifyException("com.googlecode.javaewah.IteratorAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[3];
      // Undeclared exception!
      IteratorAggregation.bufferedxor(1073741824, iteratingRLWArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[2];
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedxor((-12), iteratingRLWArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -12
         //
         verifyException("com.googlecode.javaewah.BufferedXORIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long[] longArray0 = new long[24];
      longArray0[0] = (long) 19;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals(24, longBuffer0.limit());
      assertEquals(24, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=24 cap=24]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(24, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(24, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 19);
      assertNotNull(longBufferWrapper0);
      assertEquals(24, longBuffer0.limit());
      assertEquals(24, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=24 cap=24]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(24, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertEquals(24, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertEquals(24, longBuffer0.limit());
      assertEquals(24, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=24 cap=24]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(24, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(24, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(24, longBuffer0.limit());
      assertEquals(24, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=24 cap=24]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(24, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(9L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(24, longArray0.length);
      
      int int0 = IteratorAggregation.inplacexor(longArray0, iteratingBufferedRunningLengthWord0);
      assertEquals(24, int0);
      assertEquals(24, longBuffer0.limit());
      assertEquals(24, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=24 cap=24]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(24, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(2147483631, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(24, longArray0.length);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[7];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[1] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedxor(4, iteratingRLWArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(5);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      EWAHIterator eWAHIterator0 = eWAHCompressedBitmap0.getEWAHIterator();
      assertNotNull(eWAHIterator0);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      eWAHCompressedBitmap0.addWord(997045979L, 5);
      assertEquals(5, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[2];
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertEquals(5, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(498522989L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertTrue(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord1;
      iteratingRLWArray0[1] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      // Undeclared exception!
      IteratorAggregation.bufferedor(iteratingRLWArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(3, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertEquals(3, longBuffer0.limit());
      assertEquals(3, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertArrayEquals(new long[] {(-1L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 1610612736);
      assertNotNull(longBufferWrapper0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(3, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertEquals(3, longBuffer0.limit());
      assertEquals(3, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertEquals(1610612736, longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {(-1L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(3, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertEquals(3, longBuffer0.limit());
      assertEquals(3, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertEquals(1610612736, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {(-1L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(3, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertEquals(3, longBuffer0.limit());
      assertEquals(3, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertEquals(1610612736, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals((-1L), iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(Integer.MAX_VALUE, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new long[] {(-1L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[5];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedor(iteratingRLWArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-1)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[0];
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedor(iteratingRLWArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Need at least one iterator
         //
         verifyException("com.googlecode.javaewah.IteratorAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[5];
      // Undeclared exception!
      IteratorAggregation.bufferedor(1840700269, iteratingRLWArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[6];
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedor((-1394), iteratingRLWArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1394
         //
         verifyException("com.googlecode.javaewah.BufferedORIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2001L;
      longArray0[1] = 1053L;
      longArray0[2] = (-2430L);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals(3, longBuffer0.capacity());
      assertEquals(3, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(3, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertArrayEquals(new long[] {2001L, 1053L, (-2430L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 301);
      assertNotNull(longBufferWrapper0);
      assertEquals(3, longBuffer0.capacity());
      assertEquals(3, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(3, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(301, longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {2001L, 1053L, (-2430L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertEquals(3, longBuffer0.capacity());
      assertEquals(3, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(3, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(301, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {2001L, 1053L, (-2430L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(3, longBuffer0.capacity());
      assertEquals(3, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(3, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(301, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(1000L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new long[] {2001L, 1053L, (-2430L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[3];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedor(1942, iteratingRLWArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-4859L);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(3, longBuffer0.limit());
      assertEquals(3, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", longBuffer0.toString());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(3, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertArrayEquals(new long[] {(-4859L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 0);
      assertNotNull(longBufferWrapper0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(3, longBuffer0.limit());
      assertEquals(3, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", longBuffer0.toString());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(3, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {(-4859L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(3, longBuffer0.limit());
      assertEquals(3, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", longBuffer0.toString());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(3, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBufferWrapper0.sizeInWords());
      assertFalse(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {(-4859L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(3, longBuffer0.limit());
      assertEquals(3, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", longBuffer0.toString());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(3, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(Integer.MAX_VALUE, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals((-2430L), iteratingBufferedRunningLengthWord0.getRunningLength());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new long[] {(-4859L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[4];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedor(31, iteratingRLWArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-2430)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long[] longArray0 = new long[14];
      longArray0[0] = (long) 19;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals(14, longBuffer0.capacity());
      assertFalse(longBuffer0.isDirect());
      assertEquals(14, longBuffer0.limit());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 19);
      assertNotNull(longBufferWrapper0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals(14, longBuffer0.capacity());
      assertFalse(longBuffer0.isDirect());
      assertEquals(14, longBuffer0.limit());
      assertEquals(0, longBuffer0.position());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertEquals(14, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals(14, longBuffer0.capacity());
      assertFalse(longBuffer0.isDirect());
      assertEquals(14, longBuffer0.limit());
      assertEquals(0, longBuffer0.position());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(14, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals(14, longBuffer0.capacity());
      assertFalse(longBuffer0.isDirect());
      assertEquals(14, longBuffer0.limit());
      assertEquals(0, longBuffer0.position());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(9L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(14, longArray0.length);
      
      int int0 = IteratorAggregation.inplacexor(longArray0, iteratingBufferedRunningLengthWord0);
      assertEquals(14, int0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals(14, longBuffer0.capacity());
      assertFalse(longBuffer0.isDirect());
      assertEquals(14, longBuffer0.limit());
      assertEquals(0, longBuffer0.position());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(2147483641, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(14, longArray0.length);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[6];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[1] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedand(iteratingRLWArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords((-721L));
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(722, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[3];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[1] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedand(64, iteratingRLWArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[8];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      NonEmptyVirtualStorage nonEmptyVirtualStorage0 = new NonEmptyVirtualStorage();
      assertNotNull(nonEmptyVirtualStorage0);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.andToContainer(nonEmptyVirtualStorage0, iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BitCounter bitCounter0 = new BitCounter();
      assertNotNull(bitCounter0);
      assertEquals(0, bitCounter0.getCount());
      
      // Undeclared exception!
      try { 
        IteratorAggregation.andToContainer(bitCounter0, (IteratingRLW) null, (IteratingRLW) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.IteratorAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long[] longArray0 = new long[14];
      longArray0[0] = (long) 19;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertEquals(14, longBuffer0.capacity());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(14, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 19);
      assertNotNull(longBufferWrapper0);
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertEquals(14, longBuffer0.capacity());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertEquals(14, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertEquals(14, longBuffer0.capacity());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(14, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertEquals(14, longBuffer0.capacity());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(9L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(14, longArray0.length);
      
      int int0 = IteratorAggregation.inplacexor(longArray0, iteratingBufferedRunningLengthWord0);
      assertEquals(14, int0);
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertEquals(14, longBuffer0.capacity());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(2147483641, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(14, longArray0.length);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap((-1168));
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.andToContainer(eWAHCompressedBitmap0, iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords((-2L));
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(3, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.andToContainer(eWAHCompressedBitmap0, iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      NonEmptyVirtualStorage nonEmptyVirtualStorage0 = new NonEmptyVirtualStorage();
      assertNotNull(nonEmptyVirtualStorage0);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.andToContainer(nonEmptyVirtualStorage0, 64, iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BitCounter bitCounter0 = new BitCounter();
      assertNotNull(bitCounter0);
      assertEquals(0, bitCounter0.getCount());
      
      // Undeclared exception!
      try { 
        IteratorAggregation.andToContainer(bitCounter0, 0, (IteratingRLW) null, (IteratingRLW) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.IteratorAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[4];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      ByteBuffer byteBuffer0 = charset0.encode("C8S!arYEq&R");
      assertNotNull(byteBuffer0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(11, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=11 cap=11]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(11, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(11, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      
      LongBuffer longBuffer0 = byteBuffer0.asLongBuffer();
      assertNotNull(longBuffer0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(11, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=11 cap=11]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(11, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(11, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, longBuffer0.position());
      assertEquals("java.nio.ByteBufferAsLongBufferB[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertFalse(longBuffer0.hasArray());
      assertEquals(1, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(1, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasRemaining());
      
      EWAHCompressedBitmap eWAHCompressedBitmap1 = new EWAHCompressedBitmap(longBuffer0);
      assertNotNull(eWAHCompressedBitmap1);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(11, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=11 cap=11]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(11, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(11, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, longBuffer0.position());
      assertEquals("java.nio.ByteBufferAsLongBufferB[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertFalse(longBuffer0.hasArray());
      assertEquals(1, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(1, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertFalse(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.andToContainer(eWAHCompressedBitmap1, 64, iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[6];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords((-3578L));
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(3579, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.andToContainer(eWAHCompressedBitmap0, 64, iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[10];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      long[] longArray0 = new long[2];
      int int0 = IteratorAggregation.inplaceor(longArray0, iteratingBufferedRunningLengthWord0);
      assertEquals(1, int0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {1L, 0L}, longArray0);
      assertEquals(10, intArray0.length);
      assertEquals(2, longArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      EWAHCompressedBitmap eWAHCompressedBitmap1 = new EWAHCompressedBitmap(64);
      assertNotNull(eWAHCompressedBitmap1);
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBits());
      assertFalse(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap1);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBits());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertFalse(eWAHCompressedBitmap0.equals((Object)eWAHCompressedBitmap1));
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratorAggregation.andToContainer(eWAHCompressedBitmap1, iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBits());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertFalse(eWAHCompressedBitmap0.equals((Object)eWAHCompressedBitmap1));
      assertFalse(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertFalse(iteratingBufferedRunningLengthWord0.equals((Object)iteratingBufferedRunningLengthWord1));
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertNotSame(eWAHCompressedBitmap0, eWAHCompressedBitmap1);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertNotSame(iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[1];
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedxor(7, iteratingRLWArray0);
      assertNull(iteratingRLW0);
      assertEquals(1, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[0];
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedxor(2759, iteratingRLWArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Need at least one iterator
         //
         verifyException("com.googlecode.javaewah.IteratorAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[1];
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedor(3, iteratingRLWArray0);
      assertNull(iteratingRLW0);
      assertEquals(1, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[1];
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedand(3, iteratingRLWArray0);
      assertNull(iteratingRLW0);
      assertEquals(1, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[0];
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedand(2147483646, iteratingRLWArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Need at least one iterator
         //
         verifyException("com.googlecode.javaewah.IteratorAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      long long0 = iteratingBufferedRunningLengthWord0.discharge((BitmapStorage) eWAHCompressedBitmap0, (-2676L));
      assertEquals((-2676L), long0);
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals((-171263), eWAHCompressedBitmap0.sizeInBits());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(2676L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      long[] longArray0 = new long[4];
      int int0 = IteratorAggregation.inplaceand(longArray0, iteratingBufferedRunningLengthWord0);
      assertEquals(4, int0);
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals((-171263), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(2672L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, longArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 3;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(2, longBuffer0.limit());
      assertEquals(2, longBuffer0.capacity());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(2, longBuffer0.remaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertArrayEquals(new long[] {3L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0);
      assertNotNull(longBufferWrapper0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(2, longBuffer0.limit());
      assertEquals(2, longBuffer0.capacity());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(2, longBuffer0.remaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertEquals(1, longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {3L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(2, longBuffer0.limit());
      assertEquals(2, longBuffer0.capacity());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(2, longBuffer0.remaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertEquals(1, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {3L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(2, longBuffer0.limit());
      assertEquals(2, longBuffer0.capacity());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(2, longBuffer0.remaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertEquals(1, longBufferWrapper0.sizeInWords());
      assertFalse(eWAHIterator0.hasNext());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {3L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int int0 = IteratorAggregation.inplaceand(longArray1, iteratingBufferedRunningLengthWord0);
      assertEquals(0, int0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(2, longBuffer0.limit());
      assertEquals(2, longBuffer0.capacity());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(2, longBuffer0.remaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertEquals(1, longBufferWrapper0.sizeInWords());
      assertFalse(eWAHIterator0.hasNext());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {3L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      boolean boolean0 = eWAHCompressedBitmap0.setSizeInBits(198, false);
      assertTrue(boolean0);
      assertEquals(44, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(198, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(32, eWAHCompressedBitmap0.sizeInBytes());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(44, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(198, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(32, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      long[] longArray0 = new long[4];
      int int0 = IteratorAggregation.inplaceand(longArray0, iteratingBufferedRunningLengthWord0);
      assertEquals(4, int0);
      assertEquals(44, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(198, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(32, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, longArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long[] longArray0 = new long[14];
      longArray0[0] = (long) 19;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(14, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertEquals(14, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 19);
      assertNotNull(longBufferWrapper0);
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(14, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertEquals(14, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(14, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(14, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(14, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(9L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(14, longArray0.length);
      
      int int0 = IteratorAggregation.inplacexor(longArray0, iteratingBufferedRunningLengthWord0);
      assertEquals(14, int0);
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(14, longBuffer0.capacity());
      assertEquals(14, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(2147483641, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(14, longArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.inplaceand(longArray0, iteratingBufferedRunningLengthWord0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long[] longArray0 = new long[7];
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals(7, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertEquals(7, longBuffer0.capacity());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 3);
      assertNotNull(longBufferWrapper0);
      assertEquals(7, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertEquals(7, longBuffer0.capacity());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(3, longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertEquals(7, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertEquals(7, longBuffer0.capacity());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(3, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(7, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertEquals(7, longBuffer0.capacity());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(3, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      int int0 = IteratorAggregation.inplaceand(longArray0, iteratingBufferedRunningLengthWord0);
      assertEquals(0, int0);
      assertEquals(7, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertEquals(7, longBuffer0.capacity());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(3, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 3;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals(7, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertEquals(7, longBuffer0.capacity());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 3);
      assertNotNull(longBufferWrapper0);
      assertEquals(7, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertEquals(7, longBuffer0.capacity());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(3, longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertEquals(7, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertEquals(7, longBuffer0.capacity());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(3, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(7, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertEquals(7, longBuffer0.capacity());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(3, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[6];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedxor(1, iteratingRLWArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.BufferedXORIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 13;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals(4, longBuffer0.capacity());
      assertEquals(4, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(4, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertArrayEquals(new long[] {13L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 13);
      assertNotNull(longBufferWrapper0);
      assertEquals(4, longBuffer0.capacity());
      assertEquals(4, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(4, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(13, longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {13L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertEquals(4, longBuffer0.capacity());
      assertEquals(4, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(4, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(13, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {13L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(4, longBuffer0.capacity());
      assertEquals(4, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(4, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(13, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(6L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new long[] {13L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      int int0 = IteratorAggregation.inplacexor(longArray0, iteratingBufferedRunningLengthWord0);
      assertEquals(4, int0);
      assertEquals(4, longBuffer0.capacity());
      assertEquals(4, longBuffer0.remaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(4, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=4 cap=4]", longBuffer0.toString());
      assertEquals(0, longBuffer0.position());
      assertEquals(13, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(2L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new long[] {(-14L), (-1L), (-1L), (-1L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      // Undeclared exception!
      try { 
        IteratorAggregation.dischargeAsEmpty(eWAHCompressedBitmap0, iteratingBufferedRunningLengthWord0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[12];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(12, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      eWAHCompressedBitmap0.setSizeInBitsWithinLastWord(2147483583);
      assertEquals(2147483583, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(44, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(32, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(12, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(2147483583, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(44, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(32, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(12, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      
      long[] longArray0 = new long[2];
      int int0 = IteratorAggregation.inplacexor(longArray0, iteratingBufferedRunningLengthWord0);
      assertEquals(2, int0);
      assertEquals(2147483583, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(44, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(32, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(33554428L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new long[] {1L, 0L}, longArray0);
      assertEquals(12, intArray0.length);
      assertEquals(2, longArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long[] longArray0 = new long[14];
      longArray0[0] = (long) 19;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(14, longBuffer0.capacity());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertEquals(14, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 19);
      assertNotNull(longBufferWrapper0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(14, longBuffer0.capacity());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertEquals(14, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(14, longBuffer0.capacity());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(14, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(14, longBuffer0.capacity());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(9L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(14, longArray0.length);
      
      int int0 = IteratorAggregation.inplacexor(longArray0, iteratingBufferedRunningLengthWord0);
      assertEquals(14, int0);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=14 cap=14]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(14, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(14, longBuffer0.capacity());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertEquals(14, longBuffer0.limit());
      assertEquals(19, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(2147483641, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(14, longArray0.length);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[6];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedor(iteratingRLWArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(5);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      EWAHIterator eWAHIterator0 = eWAHCompressedBitmap0.getEWAHIterator();
      assertNotNull(eWAHIterator0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      eWAHCompressedBitmap0.addWord(997045979L, 5);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(5, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[2];
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(5, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(eWAHIterator0.hasNext());
      assertTrue(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertEquals(498522989L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord1;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedor(iteratingRLWArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.BufferedORIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      long long0 = iteratingBufferedRunningLengthWord0.discharge((BitmapStorage) eWAHCompressedBitmap0, (-137L));
      assertEquals((-137L), long0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals((-8768), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(137L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      long[] longArray0 = new long[6];
      int int0 = IteratorAggregation.inplaceor(longArray0, iteratingBufferedRunningLengthWord0);
      assertEquals(6, int0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals((-8768), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(131L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2001L;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(3, longBuffer0.limit());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(3, longBuffer0.remaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(3, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertArrayEquals(new long[] {2001L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 301);
      assertNotNull(longBufferWrapper0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(3, longBuffer0.limit());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(3, longBuffer0.remaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(3, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals(301, longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {2001L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(3, longBuffer0.limit());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(3, longBuffer0.remaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(3, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals(301, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {2001L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(3, longBuffer0.limit());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(3, longBuffer0.remaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(3, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals(301, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(1000L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new long[] {2001L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[3];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedor(1942, iteratingRLWArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.BufferedORIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 3;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertEquals(7, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(7, longBuffer0.limit());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 3);
      assertNotNull(longBufferWrapper0);
      assertEquals(7, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(7, longBuffer0.limit());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals(3, longBufferWrapper0.sizeInWords());
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertNotNull(eWAHIterator0);
      assertEquals(7, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(7, longBuffer0.limit());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals(3, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(7, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(7, longBuffer0.limit());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals(3, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = iteratingBufferedRunningLengthWord0.clone();
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertEquals(7, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=7 cap=7]", longBuffer0.toString());
      assertEquals(7, longBuffer0.limit());
      assertEquals(7, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isDirect());
      assertEquals(3, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertTrue(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(1L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertNotSame(iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[3];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[1] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[2] = (IteratingRLW) iteratingBufferedRunningLengthWord1;
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedand(5344, iteratingRLWArray0);
      assertNotNull(iteratingRLW0);
      assertTrue(iteratingRLW0.getRunningBit());
      assertEquals(0, iteratingRLW0.getNumberOfLiteralWords());
      assertEquals(1L, iteratingRLW0.getRunningLength());
      assertEquals(3, iteratingRLWArray0.length);
      
      int int0 = IteratorAggregation.inplaceor(longArray0, iteratingRLW0);
      assertEquals(1, int0);
      assertTrue(iteratingRLW0.getRunningBit());
      assertEquals(0, iteratingRLW0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingRLW0.getRunningLength());
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(3, iteratingRLWArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[16];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertNotNull(eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(16, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords(64);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals((-63), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(16, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      
      long[] longArray0 = new long[6];
      int int0 = IteratorAggregation.inplaceor(longArray0, iteratingBufferedRunningLengthWord0);
      assertEquals(0, int0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals((-63), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(16, intArray0.length);
      assertEquals(6, longArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BitCounter bitCounter0 = new BitCounter();
      long[] longArray0 = new long[6];
      longArray0[0] = 1206L;
      longArray0[1] = 1206L;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 15);
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      EWAHIterator eWAHIterator1 = new EWAHIterator(longBufferWrapper0);
      eWAHIterator0.next();
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHIterator1);
      IteratorAggregation.xorToContainer(bitCounter0, 1, iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      IteratorAggregation.xorToContainer(eWAHCompressedBitmap0, (-1), iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord0);
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = iteratingBufferedRunningLengthWord0.clone();
      iteratingBufferedRunningLengthWord1.discardLiteralWords(64);
      IteratorAggregation.xorToContainer(eWAHCompressedBitmap0, 64, iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1994091958;
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = iteratingBufferedRunningLengthWord0.clone();
      IteratingRLW iteratingRLW0 = IteratorAggregation.not(iteratingBufferedRunningLengthWord0);
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[4];
      iteratingRLWArray0[0] = iteratingRLW0;
      iteratingRLWArray0[1] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[2] = (IteratingRLW) iteratingBufferedRunningLengthWord1;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedand(1184, iteratingRLWArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.IteratorAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long[] longArray0 = new long[14];
      longArray0[0] = (long) 19;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 19);
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = iteratingBufferedRunningLengthWord0.clone();
      IteratorAggregation.inplacexor(longArray0, iteratingBufferedRunningLengthWord0);
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[8];
      iteratingRLWArray0[0] = (IteratingRLW) iteratingBufferedRunningLengthWord0;
      iteratingRLWArray0[1] = (IteratingRLW) iteratingBufferedRunningLengthWord1;
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedand(14, iteratingRLWArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      IteratorAggregation.andToContainer(eWAHCompressedBitmap0, (-2978), iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord0);
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      IteratorAggregation.andToContainer(eWAHCompressedBitmap0, iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord0);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      
      IteratorAggregation.andToContainer(eWAHCompressedBitmap0, 64, iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertEquals(2, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      eWAHCompressedBitmap0.clear(65536);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      long long0 = IteratorAggregation.dischargeNegated(eWAHCompressedBitmap0, iteratingBufferedRunningLengthWord0, 64);
      assertEquals(961L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(64L, long0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[12];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      eWAHCompressedBitmap0.setSizeInBits(518, true);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      IteratorAggregation.xorToContainer(eWAHCompressedBitmap0, 64, iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord0);
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(40, eWAHCompressedBitmap0.sizeInBytes());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[3];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      eWAHCompressedBitmap0.setSizeInBits(4503, true);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      long long0 = IteratorAggregation.discharge(eWAHCompressedBitmap0, iteratingBufferedRunningLengthWord0, 64);
      assertEquals(8599, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(64L, long0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[19];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      long long0 = IteratorAggregation.discharge(eWAHCompressedBitmap0, iteratingBufferedRunningLengthWord0, 64);
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[12];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      eWAHCompressedBitmap0.setSizeInBits(661, true);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      IteratorAggregation.andToContainer(eWAHCompressedBitmap0, iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord0);
      assertEquals(40, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(52, eWAHCompressedBitmap0.serializedSizeInBytes());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[1];
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedxor(iteratingRLWArray0);
      assertNull(iteratingRLW0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[0];
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedxor(iteratingRLWArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Need at least one iterator
         //
         verifyException("com.googlecode.javaewah.IteratorAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[1];
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedor(iteratingRLWArray0);
      assertNull(iteratingRLW0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[0];
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedor(0, iteratingRLWArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Need at least one iterator
         //
         verifyException("com.googlecode.javaewah.IteratorAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[1];
      IteratingRLW iteratingRLW0 = IteratorAggregation.bufferedand(iteratingRLWArray0);
      assertNull(iteratingRLW0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[0];
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedand(iteratingRLWArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Need at least one iterator
         //
         verifyException("com.googlecode.javaewah.IteratorAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 3;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      IteratingRLW iteratingRLW0 = IteratorAggregation.not(iteratingBufferedRunningLengthWord0);
      int int0 = IteratorAggregation.inplaceand(longArray0, iteratingRLW0);
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      IteratingRLW[] iteratingRLWArray0 = new IteratingRLW[6];
      // Undeclared exception!
      try { 
        IteratorAggregation.bufferedand(iteratingRLWArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.IteratorAggregation", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      long[] longArray0 = new long[5];
      IteratingRLW iteratingRLW0 = IteratorAggregation.not(iteratingBufferedRunningLengthWord0);
      int int0 = IteratorAggregation.inplaceand(longArray0, iteratingRLW0);
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(1, int0);
  }
}
