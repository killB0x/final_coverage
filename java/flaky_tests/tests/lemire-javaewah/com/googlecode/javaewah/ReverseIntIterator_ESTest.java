/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 00:11:42 GMT 2022
 */

package com.googlecode.javaewah;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.googlecode.javaewah.LongArray;
import com.googlecode.javaewah.LongBufferWrapper;
import com.googlecode.javaewah.ReverseEWAHIterator;
import com.googlecode.javaewah.ReverseIntIterator;
import com.googlecode.javaewah.RunningLengthWord;
import java.nio.LongBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReverseIntIterator_ESTest extends ReverseIntIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LongArray longArray0 = new LongArray();
      ReverseEWAHIterator reverseEWAHIterator0 = new ReverseEWAHIterator(longArray0);
      RunningLengthWord runningLengthWord0 = reverseEWAHIterator0.rlw;
      longArray0.push_back((-8589934591L));
      longArray0.ensureCapacity(32);
      runningLengthWord0.setNumberOfLiteralWords(32);
      ReverseIntIterator reverseIntIterator0 = new ReverseIntIterator(reverseEWAHIterator0, 1155);
      assertEquals(0, reverseEWAHIterator0.position());
      assertTrue(reverseIntIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LongArray longArray0 = new LongArray();
      ReverseEWAHIterator reverseEWAHIterator0 = new ReverseEWAHIterator(longArray0);
      RunningLengthWord runningLengthWord0 = reverseEWAHIterator0.rlw;
      runningLengthWord0.setRunningBit(true);
      ReverseIntIterator reverseIntIterator0 = new ReverseIntIterator(reverseEWAHIterator0, 0);
      assertEquals(0, reverseEWAHIterator0.position());
      assertFalse(reverseIntIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = 64L;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 4);
      ReverseEWAHIterator reverseEWAHIterator0 = new ReverseEWAHIterator(longBufferWrapper0);
      ReverseIntIterator reverseIntIterator0 = new ReverseIntIterator(reverseEWAHIterator0, (-1821));
      assertEquals(0, reverseEWAHIterator0.position());
      assertFalse(reverseIntIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LongArray longArray0 = new LongArray();
      ReverseEWAHIterator reverseEWAHIterator0 = new ReverseEWAHIterator(longArray0);
      RunningLengthWord runningLengthWord0 = reverseEWAHIterator0.rlw;
      longArray0.push_back((-8589934591L));
      runningLengthWord0.setNumberOfLiteralWords((-8589934591L));
      ReverseIntIterator reverseIntIterator0 = new ReverseIntIterator(reverseEWAHIterator0, 1155);
      int int0 = reverseIntIterator0.next();
      assertEquals(0, reverseEWAHIterator0.position());
      assertEquals(1152, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LongArray longArray0 = new LongArray();
      ReverseEWAHIterator reverseEWAHIterator0 = new ReverseEWAHIterator(longArray0);
      ReverseIntIterator reverseIntIterator0 = new ReverseIntIterator(reverseEWAHIterator0, 1155);
      ReverseIntIterator reverseIntIterator1 = new ReverseIntIterator(reverseEWAHIterator0, 1155);
      int int0 = reverseIntIterator1.next();
      assertEquals(0, reverseEWAHIterator0.position());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LongArray longArray0 = new LongArray();
      longArray0.push_back(805L);
      ReverseEWAHIterator reverseEWAHIterator0 = new ReverseEWAHIterator(longArray0);
      ReverseIntIterator reverseIntIterator0 = new ReverseIntIterator(reverseEWAHIterator0, 0);
      boolean boolean0 = reverseIntIterator0.hasNext();
      assertEquals(1, reverseEWAHIterator0.position());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReverseIntIterator reverseIntIterator0 = null;
      try {
        reverseIntIterator0 = new ReverseIntIterator((ReverseEWAHIterator) null, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.ReverseIntIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 4611686019501129727L;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0);
      ReverseEWAHIterator reverseEWAHIterator0 = new ReverseEWAHIterator(longBufferWrapper0);
      ReverseIntIterator reverseIntIterator0 = null;
      try {
        reverseIntIterator0 = new ReverseIntIterator(reverseEWAHIterator0, 33);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 536870912
         //
         verifyException("java.nio.HeapLongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LongArray longArray0 = new LongArray();
      longArray0.push_back(4611686019501129726L);
      ReverseEWAHIterator reverseEWAHIterator0 = new ReverseEWAHIterator(longArray0);
      ReverseIntIterator reverseIntIterator0 = null;
      try {
        reverseIntIterator0 = new ReverseIntIterator(reverseEWAHIterator0, (-955));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LongArray longArray0 = new LongArray();
      ReverseEWAHIterator reverseEWAHIterator0 = new ReverseEWAHIterator(longArray0);
      RunningLengthWord runningLengthWord0 = reverseEWAHIterator0.rlw;
      longArray0.ensureCapacity(32);
      runningLengthWord0.setNumberOfLiteralWords(32);
      ReverseIntIterator reverseIntIterator0 = new ReverseIntIterator(reverseEWAHIterator0, 1155);
      int int0 = reverseIntIterator0.next();
      assertEquals(0, reverseEWAHIterator0.position());
      assertEquals((-833), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LongArray longArray0 = new LongArray();
      longArray0.push_back((long) 1);
      ReverseEWAHIterator reverseEWAHIterator0 = new ReverseEWAHIterator(longArray0);
      ReverseIntIterator reverseIntIterator0 = new ReverseIntIterator(reverseEWAHIterator0, 1);
      assertEquals(0, reverseEWAHIterator0.position());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LongArray longArray0 = new LongArray();
      ReverseEWAHIterator reverseEWAHIterator0 = new ReverseEWAHIterator(longArray0);
      ReverseIntIterator reverseIntIterator0 = new ReverseIntIterator(reverseEWAHIterator0, 32);
      boolean boolean0 = reverseIntIterator0.hasNext();
      assertEquals(0, reverseEWAHIterator0.position());
      assertFalse(boolean0);
  }
}
