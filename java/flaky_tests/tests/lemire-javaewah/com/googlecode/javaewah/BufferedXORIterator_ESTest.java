/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 00:42:03 GMT 2022
 */

package com.googlecode.javaewah;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.googlecode.javaewah.BufferedXORIterator;
import com.googlecode.javaewah.EWAHCompressedBitmap;
import com.googlecode.javaewah.IteratingBufferedRunningLengthWord;
import com.googlecode.javaewah.IteratingRLW;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BufferedXORIterator_ESTest extends BufferedXORIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<IteratingRLW> linkedList0 = new LinkedList<IteratingRLW>();
      BufferedXORIterator bufferedXORIterator0 = new BufferedXORIterator(linkedList0, 2935);
      EWAHCompressedBitmap eWAHCompressedBitmap0 = bufferedXORIterator0.buffer;
      IteratingRLW iteratingRLW0 = eWAHCompressedBitmap0.getIteratingRLW();
      iteratingRLW0.discardLiteralWords(64);
      linkedList0.add(iteratingRLW0);
      bufferedXORIterator0.next();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BufferedXORIterator bufferedXORIterator0 = new BufferedXORIterator((LinkedList<IteratingRLW>) null, 2952);
      // Undeclared exception!
      try { 
        bufferedXORIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.BufferedXORIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BufferedXORIterator bufferedXORIterator0 = new BufferedXORIterator((LinkedList<IteratingRLW>) null, 0);
      // Undeclared exception!
      try { 
        bufferedXORIterator0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.BufferedXORIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BufferedXORIterator bufferedXORIterator0 = new BufferedXORIterator((LinkedList<IteratingRLW>) null, 528);
      // Undeclared exception!
      try { 
        bufferedXORIterator0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.BufferedXORIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<IteratingRLW> linkedList0 = new LinkedList<IteratingRLW>();
      BufferedXORIterator bufferedXORIterator0 = null;
      try {
        bufferedXORIterator0 = new BufferedXORIterator(linkedList0, (-20));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -20
         //
         verifyException("com.googlecode.javaewah.BufferedXORIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<IteratingRLW> linkedList0 = new LinkedList<IteratingRLW>();
      BufferedXORIterator bufferedXORIterator0 = new BufferedXORIterator(linkedList0, 2935);
      long[] longArray0 = new long[0];
      bufferedXORIterator0.hardbitmap = longArray0;
      EWAHCompressedBitmap eWAHCompressedBitmap0 = bufferedXORIterator0.buffer;
      eWAHCompressedBitmap0.setSizeInBits(2935, true);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      linkedList0.add((IteratingRLW) iteratingBufferedRunningLengthWord0);
      bufferedXORIterator0.next();
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<IteratingRLW> linkedList0 = new LinkedList<IteratingRLW>();
      BufferedXORIterator bufferedXORIterator0 = new BufferedXORIterator(linkedList0, 2935);
      EWAHCompressedBitmap eWAHCompressedBitmap0 = bufferedXORIterator0.buffer;
      eWAHCompressedBitmap0.setSizeInBits(2935, true);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      linkedList0.add((IteratingRLW) iteratingBufferedRunningLengthWord0);
      bufferedXORIterator0.next();
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<IteratingRLW> linkedList0 = new LinkedList<IteratingRLW>();
      BufferedXORIterator bufferedXORIterator0 = new BufferedXORIterator(linkedList0, 2935);
      EWAHCompressedBitmap eWAHCompressedBitmap0 = bufferedXORIterator0.buffer;
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      linkedList0.add((IteratingRLW) iteratingBufferedRunningLengthWord0);
      bufferedXORIterator0.next();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<IteratingRLW> linkedList0 = new LinkedList<IteratingRLW>();
      BufferedXORIterator bufferedXORIterator0 = new BufferedXORIterator(linkedList0, 0);
      EWAHCompressedBitmap eWAHCompressedBitmap0 = bufferedXORIterator0.buffer;
      IteratingRLW iteratingRLW0 = eWAHCompressedBitmap0.getIteratingRLW();
      linkedList0.add(iteratingRLW0);
      boolean boolean0 = bufferedXORIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<IteratingRLW> linkedList0 = new LinkedList<IteratingRLW>();
      BufferedXORIterator bufferedXORIterator0 = new BufferedXORIterator(linkedList0, 0);
      boolean boolean0 = bufferedXORIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<IteratingRLW> linkedList0 = new LinkedList<IteratingRLW>();
      BufferedXORIterator bufferedXORIterator0 = new BufferedXORIterator(linkedList0, 2935);
      BufferedXORIterator bufferedXORIterator1 = bufferedXORIterator0.clone();
      assertNotSame(bufferedXORIterator1, bufferedXORIterator0);
  }
}
