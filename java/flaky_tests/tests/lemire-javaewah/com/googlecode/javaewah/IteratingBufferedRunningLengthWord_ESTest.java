/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 00:08:57 GMT 2022
 */

package com.googlecode.javaewah;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.googlecode.javaewah.BitCounter;
import com.googlecode.javaewah.BitmapStorage;
import com.googlecode.javaewah.EWAHCompressedBitmap;
import com.googlecode.javaewah.EWAHIterator;
import com.googlecode.javaewah.IteratingBufferedRunningLengthWord;
import com.googlecode.javaewah.LongArray;
import com.googlecode.javaewah.LongBufferWrapper;
import com.googlecode.javaewah.NonEmptyVirtualStorage;
import com.googlecode.javaewah.RunningLengthWord;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratingBufferedRunningLengthWord_ESTest extends IteratingBufferedRunningLengthWord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[3];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      assertEquals(3, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(3, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      long long0 = iteratingBufferedRunningLengthWord0.discharge((BitmapStorage) eWAHCompressedBitmap0, (-2217L));
      assertEquals(3, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals((-2217L), long0);
      assertEquals((-141887), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(2217L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(2218L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(3, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertEquals((-141887), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1L, iteratingBufferedRunningLengthWord1.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      iteratingBufferedRunningLengthWord1.dischargeAsEmpty(eWAHCompressedBitmap0);
      assertEquals(3, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertEquals((-141823), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals((-2216L), iteratingBufferedRunningLengthWord1.getRunningLength());
      assertEquals((-2216L), iteratingBufferedRunningLengthWord1.size());
      assertEquals(0, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[9];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean0 = eWAHCompressedBitmap0.clear(2114445438);
      assertEquals(9, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertTrue(boolean0);
      assertEquals(2114445439, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(9, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(2114445439, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      long long0 = iteratingBufferedRunningLengthWord0.dischargeNegated(eWAHCompressedBitmap0, 64);
      assertEquals(9, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64L, long0);
      assertEquals(2114449535, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(40, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(52, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(33038146L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(33038147L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 64;
      longArray0[1] = (long) 64;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(5, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(5, longBuffer0.limit());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=5 cap=5]", longBuffer0.toString());
      assertEquals(5, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {64L, 64L, 0L, 0L, 0L}, longArray0);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 2137495351);
      assertEquals(5, longArray0.length);
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(5, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(5, longBuffer0.limit());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=5 cap=5]", longBuffer0.toString());
      assertEquals(5, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(2137495351, longBufferWrapper0.sizeInWords());
      assertNotNull(longBufferWrapper0);
      assertArrayEquals(new long[] {64L, 64L, 0L, 0L, 0L}, longArray0);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertEquals(5, longArray0.length);
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(5, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(5, longBuffer0.limit());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=5 cap=5]", longBuffer0.toString());
      assertEquals(5, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(2137495351, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      assertArrayEquals(new long[] {64L, 64L, 0L, 0L, 0L}, longArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(5, longArray0.length);
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(5, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(5, longBuffer0.limit());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=5 cap=5]", longBuffer0.toString());
      assertEquals(5, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(2137495351, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(32L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(32L, iteratingBufferedRunningLengthWord0.size());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new long[] {64L, 64L, 0L, 0L, 0L}, longArray0);
      
      long long0 = iteratingBufferedRunningLengthWord0.dischargeNegated(eWAHCompressedBitmap0, 64);
      assertEquals(5, longArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64L, long0);
      assertEquals(4096, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(5, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(5, longBuffer0.limit());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=5 cap=5]", longBuffer0.toString());
      assertEquals(5, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(2137495351, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertArrayEquals(new long[] {64L, 64L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      long long0 = iteratingBufferedRunningLengthWord0.dischargeNegated(eWAHCompressedBitmap0, 64);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(1L, long0);
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords(1L);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals((-1), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals((-1L), iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      long long1 = iteratingBufferedRunningLengthWord0.dischargeNegated(eWAHCompressedBitmap0, 5561L);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals((-1), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals((-1L), iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 1753;
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(32, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(44, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1754, eWAHCompressedBitmap0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 1753, 0}, intArray0);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      EWAHCompressedBitmap eWAHCompressedBitmap1 = EWAHCompressedBitmap.xor(eWAHCompressedBitmapArray0);
      assertEquals(2, eWAHCompressedBitmapArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertFalse(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertEquals(1754, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap1.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      long long0 = iteratingBufferedRunningLengthWord0.dischargeNegated(eWAHCompressedBitmap0, 64);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1L, long0);
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords(1L);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals((-1), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals((-1L), iteratingBufferedRunningLengthWord0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      iteratingBufferedRunningLengthWord0.discardRunningWords();
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals((-1), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals((-1L), iteratingBufferedRunningLengthWord0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      iteratingBufferedRunningLengthWord0.discardRunningWords();
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LongArray longArray0 = new LongArray();
      assertEquals(0L, longArray0.getLastWord());
      assertEquals(1, longArray0.sizeInWords());
      assertNotNull(longArray0);
      
      longArray0.push_back(441L);
      assertEquals(2, longArray0.sizeInWords());
      assertEquals(441L, longArray0.getLastWord());
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longArray0);
      assertEquals(2, longArray0.sizeInWords());
      assertEquals(441L, longArray0.getLastWord());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(2, longArray0.sizeInWords());
      assertEquals(441L, longArray0.getLastWord());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      BitCounter bitCounter0 = new BitCounter();
      assertEquals(0, bitCounter0.getCount());
      assertNotNull(bitCounter0);
      
      iteratingBufferedRunningLengthWord0.discharge((BitmapStorage) bitCounter0);
      assertEquals(2, longArray0.sizeInWords());
      assertEquals(441L, longArray0.getLastWord());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(14080, bitCounter0.getCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LongArray longArray0 = new LongArray();
      assertEquals(1, longArray0.sizeInWords());
      assertEquals(0L, longArray0.getLastWord());
      assertNotNull(longArray0);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longArray0);
      assertEquals(1, longArray0.sizeInWords());
      assertEquals(0L, longArray0.getLastWord());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(1, longArray0.sizeInWords());
      assertEquals(0L, longArray0.getLastWord());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      long long0 = iteratingBufferedRunningLengthWord0.size();
      assertEquals(0L, long0);
      assertEquals(1, longArray0.sizeInWords());
      assertEquals(0L, longArray0.getLastWord());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      long long0 = iteratingBufferedRunningLengthWord0.size();
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(1L, long0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords(1753L);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals((-1752), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals((-1752L), iteratingBufferedRunningLengthWord0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      long long0 = iteratingBufferedRunningLengthWord0.size();
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals((-1752L), long0);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals((-1752), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals((-1752L), iteratingBufferedRunningLengthWord0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[2] = 1753;
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(32, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1754, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(44, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 1753, 0, 0}, intArray0);
      
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(32, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1754, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(44, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      assertArrayEquals(new int[] {0, 0, 1753, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(32, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1754, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(44, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 1753, 0, 0}, intArray0);
      
      boolean boolean0 = iteratingBufferedRunningLengthWord0.next();
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(boolean0);
      assertEquals(32, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1754, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(44, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(27L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(26L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {0, 0, 1753, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(2557);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap0);
      
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      long long0 = iteratingBufferedRunningLengthWord0.discharge((BitmapStorage) eWAHCompressedBitmapArray0[0], (-1779L));
      assertEquals(2, eWAHCompressedBitmapArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals((-1779L), long0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals((-113856), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(1779L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1779L, iteratingBufferedRunningLengthWord0.size());
      
      long long1 = iteratingBufferedRunningLengthWord0.getRunningLength();
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertFalse(long1 == long0);
      assertEquals(1779L, long1);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals((-113856), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(1779L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1779L, iteratingBufferedRunningLengthWord0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      eWAHCompressedBitmap0.addStreamOfEmptyWords(true, (-1L));
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals((-63), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals((-63), eWAHCompressedBitmap0.sizeInBits());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      long long0 = iteratingBufferedRunningLengthWord0.dischargeNegated(eWAHCompressedBitmap0, 64);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(1L, long0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(32, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(44, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertEquals((-1L), iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      long long1 = iteratingBufferedRunningLengthWord0.getRunningLength();
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(32, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(44, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertEquals((-1L), iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      eWAHCompressedBitmap0.not();
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      boolean boolean0 = iteratingBufferedRunningLengthWord0.getRunningBit();
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(boolean0);
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      boolean boolean0 = iteratingBufferedRunningLengthWord0.getRunningBit();
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertFalse(boolean0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap((-736));
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      LongArray longArray0 = (LongArray)eWAHCompressedBitmap0.buffer;
      assertEquals(0L, longArray0.getLastWord());
      assertEquals(1, longArray0.sizeInWords());
      assertNotNull(longArray0);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longArray0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0L, longArray0.getLastWord());
      assertEquals(1, longArray0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0L, longArray0.getLastWord());
      assertEquals(1, longArray0.sizeInWords());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      int int0 = iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords();
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(0, int0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0L, longArray0.getLastWord());
      assertEquals(1, longArray0.sizeInWords());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      int int0 = iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords();
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1, int0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[3];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      assertEquals(3, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(3, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords(32);
      assertEquals(3, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals((-31), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals((-31L), iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      int int0 = iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords();
      assertEquals(3, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals((-31), int0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals((-31), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals((-31L), iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      iteratingBufferedRunningLengthWord0.writeNegatedLiteralWords(64, eWAHCompressedBitmap0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(532, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(520, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(4096, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      
      long long0 = iteratingBufferedRunningLengthWord0.getLiteralWordAt(64);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(0L, long0);
      assertEquals(532, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(520, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(4096, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      EWAHIterator eWAHIterator0 = eWAHCompressedBitmap0.getEWAHIterator();
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      long long0 = iteratingBufferedRunningLengthWord0.getLiteralWordAt(0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(1L, long0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      iteratingBufferedRunningLengthWord0.writeNegatedLiteralWords(64, eWAHCompressedBitmap0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(520, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(4096, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(532, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      
      long long0 = iteratingBufferedRunningLengthWord0.getLiteralWordAt(0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals((-1L), long0);
      assertEquals(520, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(4096, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(532, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      long long0 = iteratingBufferedRunningLengthWord0.dischargeNegated(eWAHCompressedBitmap0, (-1L));
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(0L, long0);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      long long0 = iteratingBufferedRunningLengthWord0.discharge((BitmapStorage) eWAHCompressedBitmap0, 1921L);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(0L, long0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-3196L);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longBuffer0.position());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=5 cap=5]", longBuffer0.toString());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(5, longBuffer0.capacity());
      assertFalse(longBuffer0.isDirect());
      assertEquals(5, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(5, longBuffer0.remaining());
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {(-3196L), 0L, 0L, 0L, 0L}, longArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertEquals(5, longArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(0, longBuffer0.position());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=5 cap=5]", longBuffer0.toString());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(5, longBuffer0.capacity());
      assertFalse(longBuffer0.isDirect());
      assertEquals(5, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(5, longBuffer0.remaining());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new long[] {(-3196L), 0L, 0L, 0L, 0L}, longArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(5, longArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(0, longBuffer0.position());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=5 cap=5]", longBuffer0.toString());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(5, longBuffer0.capacity());
      assertFalse(longBuffer0.isDirect());
      assertEquals(5, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(5, longBuffer0.remaining());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(Integer.MAX_VALUE, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals((-1598L), iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(2147482049L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new long[] {(-3196L), 0L, 0L, 0L, 0L}, longArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = iteratingBufferedRunningLengthWord0.clone();
      assertEquals(5, longArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertNotSame(iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertEquals(0, longBuffer0.position());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=5 cap=5]", longBuffer0.toString());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(5, longBuffer0.capacity());
      assertFalse(longBuffer0.isDirect());
      assertEquals(5, longBuffer0.limit());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(5, longBuffer0.remaining());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(Integer.MAX_VALUE, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals((-1598L), iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(2147482049L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(Integer.MAX_VALUE, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(2147482049L, iteratingBufferedRunningLengthWord1.size());
      assertEquals((-1598L), iteratingBufferedRunningLengthWord1.getRunningLength());
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertArrayEquals(new long[] {(-3196L), 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[4];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmap0;
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      iteratingBufferedRunningLengthWord0.writeNegatedLiteralWords(64, eWAHCompressedBitmap0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(532, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(520, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(4096, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      
      EWAHCompressedBitmap eWAHCompressedBitmap1 = EWAHCompressedBitmap.and(eWAHCompressedBitmapArray0);
      assertEquals(4, eWAHCompressedBitmapArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertFalse(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(4096, eWAHCompressedBitmap1.sizeInBits());
      assertNotNull(eWAHCompressedBitmap1);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap1);
      assertEquals(4, eWAHCompressedBitmapArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertFalse(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(4096, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(0, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertEquals(64L, iteratingBufferedRunningLengthWord1.size());
      assertEquals(64L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertTrue(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertNotNull(iteratingBufferedRunningLengthWord1);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord2 = iteratingBufferedRunningLengthWord1.clone();
      assertEquals(4, eWAHCompressedBitmapArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertFalse(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertFalse(iteratingBufferedRunningLengthWord2.equals((Object)iteratingBufferedRunningLengthWord0));
      assertFalse(iteratingBufferedRunningLengthWord2.equals((Object)iteratingBufferedRunningLengthWord1));
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord2);
      assertNotSame(iteratingBufferedRunningLengthWord2, iteratingBufferedRunningLengthWord0);
      assertNotSame(iteratingBufferedRunningLengthWord2, iteratingBufferedRunningLengthWord1);
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(4096, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(0, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertEquals(64L, iteratingBufferedRunningLengthWord1.size());
      assertEquals(64L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertTrue(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(64L, iteratingBufferedRunningLengthWord2.size());
      assertEquals(64L, iteratingBufferedRunningLengthWord2.getRunningLength());
      assertTrue(iteratingBufferedRunningLengthWord2.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord2.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[17];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(17, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(17, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = iteratingBufferedRunningLengthWord0.clone();
      assertEquals(17, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertNotSame(iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1L, iteratingBufferedRunningLengthWord1.size());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords(64);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals((-64L), iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals((-64), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = iteratingBufferedRunningLengthWord0.clone();
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertNotSame(iteratingBufferedRunningLengthWord0, iteratingBufferedRunningLengthWord1);
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals((-64L), iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals((-64), iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals((-64L), iteratingBufferedRunningLengthWord1.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord1.getRunningLength());
      assertEquals((-64), iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(1, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      NonEmptyVirtualStorage nonEmptyVirtualStorage0 = new NonEmptyVirtualStorage();
      assertNotNull(nonEmptyVirtualStorage0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.writeNegatedLiteralWords(64, nonEmptyVirtualStorage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[9];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(9, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      iteratingBufferedRunningLengthWord0.writeNegatedLiteralWords(32768, eWAHCompressedBitmap0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(1, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap1 = new EWAHCompressedBitmap((LongBuffer) null);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(0, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap1);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.writeNegatedLiteralWords(32768, eWAHCompressedBitmap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.LongBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LongBuffer longBuffer0 = LongBuffer.allocate(64);
      assertEquals(64, longBuffer0.limit());
      assertEquals(64, longBuffer0.capacity());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=64 cap=64]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(64, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertNotNull(longBuffer0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(64, longBuffer0.limit());
      assertEquals(64, longBuffer0.capacity());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=64 cap=64]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(64, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      EWAHIterator eWAHIterator0 = eWAHCompressedBitmap0.getEWAHIterator();
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(64, longBuffer0.limit());
      assertEquals(64, longBuffer0.capacity());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=64 cap=64]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(64, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(64, longBuffer0.limit());
      assertEquals(64, longBuffer0.capacity());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=64 cap=64]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(64, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.writeNegatedLiteralWords(64, eWAHCompressedBitmap0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("java.nio.HeapLongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[6];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap1 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertEquals(28, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap1.sizeInBits());
      assertNotNull(eWAHCompressedBitmap1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(6, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertTrue(eWAHCompressedBitmap0.equals((Object)eWAHCompressedBitmap1));
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.writeNegatedLiteralWords(64, eWAHCompressedBitmap1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap0);
      
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      // Undeclared exception!
      iteratingBufferedRunningLengthWord0.writeLiteralWords(2146397963, eWAHCompressedBitmap0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.writeLiteralWords((-2145904614), (BitmapStorage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.IteratingBufferedRunningLengthWord", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long[] longArray0 = new long[8];
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=8 cap=8]", longBuffer0.toString());
      assertEquals(8, longBuffer0.limit());
      assertEquals(8, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertEquals(8, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertEquals(8, longArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=8 cap=8]", longBuffer0.toString());
      assertEquals(8, longBuffer0.limit());
      assertEquals(8, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertEquals(8, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      assertEquals(8, longArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=8 cap=8]", longBuffer0.toString());
      assertEquals(8, longBuffer0.limit());
      assertEquals(8, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertEquals(8, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(8, longArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=8 cap=8]", longBuffer0.toString());
      assertEquals(8, longBuffer0.limit());
      assertEquals(8, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertEquals(8, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.writeLiteralWords(2679, eWAHCompressedBitmap0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("java.nio.HeapLongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap1 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertEquals(16, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap1.sizeInBits());
      assertNotNull(eWAHCompressedBitmap1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(eWAHCompressedBitmap0.equals((Object)eWAHCompressedBitmap1));
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.writeLiteralWords(64, eWAHCompressedBitmap1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-8589934592L);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(longBuffer0.hasArray());
      assertEquals(1, longBuffer0.limit());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertEquals(1, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(1, longBuffer0.capacity());
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {(-8589934592L)}, longArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertEquals(1, longArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertTrue(longBuffer0.hasArray());
      assertEquals(1, longBuffer0.limit());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertEquals(1, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new long[] {(-8589934592L)}, longArray0);
      
      EWAHIterator eWAHIterator0 = eWAHCompressedBitmap0.getEWAHIterator();
      assertEquals(1, longArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertTrue(longBuffer0.hasArray());
      assertEquals(1, longBuffer0.limit());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertEquals(1, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      assertArrayEquals(new long[] {(-8589934592L)}, longArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(1, longArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertTrue(longBuffer0.hasArray());
      assertEquals(1, longBuffer0.limit());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertEquals(1, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(2147483647L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(Integer.MAX_VALUE, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new long[] {(-8589934592L)}, longArray0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.next();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("java.nio.HeapLongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long[] longArray0 = new long[8];
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(0, longBuffer0.position());
      assertEquals(8, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=8 cap=8]", longBuffer0.toString());
      assertEquals(8, longBuffer0.limit());
      assertEquals(8, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longBuffer0.position());
      assertEquals(8, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=8 cap=8]", longBuffer0.toString());
      assertEquals(8, longBuffer0.limit());
      assertEquals(8, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(1, longBufferWrapper0.sizeInWords());
      assertNotNull(longBufferWrapper0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertEquals(8, longArray0.length);
      assertEquals(0, longBuffer0.position());
      assertEquals(8, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=8 cap=8]", longBuffer0.toString());
      assertEquals(8, longBuffer0.limit());
      assertEquals(8, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(1, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(8, longArray0.length);
      assertEquals(0, longBuffer0.position());
      assertEquals(8, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=8 cap=8]", longBuffer0.toString());
      assertEquals(8, longBuffer0.limit());
      assertEquals(8, longBuffer0.remaining());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(1, longBufferWrapper0.sizeInWords());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.getLiteralWordAt(64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 65
         //
         verifyException("java.nio.HeapLongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      NonEmptyVirtualStorage nonEmptyVirtualStorage0 = new NonEmptyVirtualStorage();
      assertNotNull(nonEmptyVirtualStorage0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.dischargeNegated(nonEmptyVirtualStorage0, 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[6];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      assertEquals(6, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(6, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      long long0 = iteratingBufferedRunningLengthWord0.dischargeNegated(eWAHCompressedBitmap0, 2147483647L);
      assertEquals(6, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1L, long0);
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(6, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals((-1L), iteratingBufferedRunningLengthWord1.getRunningLength());
      assertEquals(Integer.MAX_VALUE, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(2147483646L, iteratingBufferedRunningLengthWord1.size());
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      iteratingBufferedRunningLengthWord1.dischargeNegated(eWAHCompressedBitmap0, 33038181L);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.dischargeNegated((BitmapStorage) null, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.IteratingBufferedRunningLengthWord", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1152L;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longBuffer0.position());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals(1, longBuffer0.remaining());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(1, longBuffer0.limit());
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {1152L}, longArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertEquals(1, longArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(0, longBuffer0.position());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals(1, longBuffer0.remaining());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(1, longBuffer0.limit());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new long[] {1152L}, longArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(1, longArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(0, longBuffer0.position());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals(1, longBuffer0.remaining());
      assertEquals(1, longBuffer0.capacity());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(1, longBuffer0.limit());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(576L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(576L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new long[] {1152L}, longArray0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.dischargeNegated(eWAHCompressedBitmap0, 1152L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.nio.HeapLongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(1, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      iteratingBufferedRunningLengthWord0.discardLiteralWords((-1507L));
      assertEquals(1, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1508L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1508, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertArrayEquals(new int[] {0}, intArray0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.dischargeNegated(eWAHCompressedBitmap0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[2];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(2, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap1 = new EWAHCompressedBitmap((LongBuffer) null);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap1);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.dischargeAsEmpty(eWAHCompressedBitmap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.LongBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1640531535L);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longBuffer0.capacity());
      assertEquals(2, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(2, longBuffer0.limit());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {(-1640531535L), 0L}, longArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertEquals(2, longArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(2, longBuffer0.capacity());
      assertEquals(2, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(2, longBuffer0.limit());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new long[] {(-1640531535L), 0L}, longArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(2, longArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(2, longBuffer0.capacity());
      assertEquals(2, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(2, longBuffer0.limit());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=2 cap=2]", longBuffer0.toString());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1327217879L, iteratingBufferedRunningLengthWord0.size());
      assertTrue(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals((-820265768L), iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(Integer.MAX_VALUE, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new long[] {(-1640531535L), 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.dischargeAsEmpty(eWAHCompressedBitmap0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("java.nio.HeapLongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      long long0 = iteratingBufferedRunningLengthWord0.dischargeNegated(eWAHCompressedBitmap0, 1L);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(1L, long0);
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(2147483646L, iteratingBufferedRunningLengthWord1.size());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals((-1L), iteratingBufferedRunningLengthWord1.getRunningLength());
      assertEquals(Integer.MAX_VALUE, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord1.dischargeAsEmpty(eWAHCompressedBitmap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[6];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(6, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      NonEmptyVirtualStorage nonEmptyVirtualStorage0 = new NonEmptyVirtualStorage();
      assertNotNull(nonEmptyVirtualStorage0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.discharge((BitmapStorage) nonEmptyVirtualStorage0, 4294967295L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.discharge((BitmapStorage) null, (-8589934591L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.IteratingBufferedRunningLengthWord", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(1, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      NonEmptyVirtualStorage nonEmptyVirtualStorage0 = new NonEmptyVirtualStorage();
      assertNotNull(nonEmptyVirtualStorage0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.discharge((BitmapStorage) nonEmptyVirtualStorage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.discharge((BitmapStorage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.IteratingBufferedRunningLengthWord", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      iteratingBufferedRunningLengthWord0.writeNegatedLiteralWords(64, eWAHCompressedBitmap0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(520, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(4096, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(532, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      
      RunningLengthWord runningLengthWord0 = eWAHIterator0.next();
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(4294967295L, RunningLengthWord.LARGEST_RUNNING_LENGTH_COUNT);
      assertEquals(Integer.MAX_VALUE, RunningLengthWord.LARGEST_LITERAL_COUNT);
      assertEquals(32, RunningLengthWord.RUNNING_LENGTH_BITS);
      assertEquals(520, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(4096, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(532, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertTrue(runningLengthWord0.getRunningBit());
      assertEquals(4294967295L, runningLengthWord0.getRunningLength());
      assertNotNull(runningLengthWord0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.discharge((BitmapStorage) eWAHCompressedBitmap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LongBuffer longBuffer0 = LongBuffer.allocate(64);
      assertTrue(longBuffer0.hasArray());
      assertEquals(64, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(64, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=64 cap=64]", longBuffer0.toString());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(64, longBuffer0.remaining());
      assertNotNull(longBuffer0);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 296);
      assertTrue(longBuffer0.hasArray());
      assertEquals(64, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(64, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=64 cap=64]", longBuffer0.toString());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(64, longBuffer0.remaining());
      assertEquals(296, longBufferWrapper0.sizeInWords());
      assertNotNull(longBufferWrapper0);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(64, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(64, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=64 cap=64]", longBuffer0.toString());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(64, longBuffer0.remaining());
      assertEquals(296, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertTrue(longBuffer0.hasArray());
      assertEquals(64, longBuffer0.limit());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(64, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=64 cap=64]", longBuffer0.toString());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(64, longBuffer0.remaining());
      assertEquals(296, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.discardFirstWords(64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("java.nio.HeapLongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      long long0 = iteratingBufferedRunningLengthWord0.dischargeNegated(eWAHCompressedBitmap0, 1275L);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(1L, long0);
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(5, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(2147483646L, iteratingBufferedRunningLengthWord1.size());
      assertEquals((-1L), iteratingBufferedRunningLengthWord1.getRunningLength());
      assertEquals(Integer.MAX_VALUE, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.discardFirstWords(1L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = null;
      try {
        iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord((EWAHIterator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.IteratingBufferedRunningLengthWord", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LongBuffer longBuffer0 = LongBuffer.allocate(0);
      assertEquals(0, longBuffer0.arrayOffset());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.remaining());
      assertFalse(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.limit());
      assertEquals(0, longBuffer0.capacity());
      assertNotNull(longBuffer0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(0, longBuffer0.arrayOffset());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.remaining());
      assertFalse(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.limit());
      assertEquals(0, longBuffer0.capacity());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(0, longBuffer0.arrayOffset());
      assertFalse(longBuffer0.isDirect());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.remaining());
      assertFalse(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.limit());
      assertEquals(0, longBuffer0.capacity());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = null;
      try {
        iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.HeapLongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap((-736));
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      LongArray longArray0 = (LongArray)eWAHCompressedBitmap0.buffer;
      assertEquals(1, longArray0.sizeInWords());
      assertEquals(0L, longArray0.getLastWord());
      assertNotNull(longArray0);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longArray0);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, longArray0.sizeInWords());
      assertEquals(0L, longArray0.getLastWord());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      
      RunningLengthWord runningLengthWord0 = eWAHIterator0.next();
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(Integer.MAX_VALUE, RunningLengthWord.LARGEST_LITERAL_COUNT);
      assertEquals(4294967295L, RunningLengthWord.LARGEST_RUNNING_LENGTH_COUNT);
      assertEquals(32, RunningLengthWord.RUNNING_LENGTH_BITS);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, longArray0.sizeInWords());
      assertEquals(0L, longArray0.getLastWord());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(runningLengthWord0.getRunningBit());
      assertEquals(0L, runningLengthWord0.getRunningLength());
      assertNotNull(runningLengthWord0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = null;
      try {
        iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap((LongBuffer) null);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = null;
      try {
        iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.LongBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      long[] longArray0 = new long[0];
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(0, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.capacity());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.limit());
      assertFalse(longBuffer0.hasRemaining());
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {}, longArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertEquals(0, longArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(0, longBuffer0.remaining());
      assertFalse(longBuffer0.isDirect());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertEquals(0, longBuffer0.capacity());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.limit());
      assertFalse(longBuffer0.hasRemaining());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new long[] {}, longArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = null;
      try {
        iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.HeapLongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(924);
      assertEquals(924, byteBuffer0.capacity());
      assertEquals(924, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(924, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=924 cap=924]", byteBuffer0.toString());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertNotNull(byteBuffer0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap1 = new EWAHCompressedBitmap(byteBuffer0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertTrue(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertEquals(924, byteBuffer0.capacity());
      assertEquals(924, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(924, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=924 cap=924]", byteBuffer0.toString());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBytes());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(12, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap1);
      
      eWAHCompressedBitmap0.swap(eWAHCompressedBitmap1);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertNotSame(eWAHCompressedBitmap0, eWAHCompressedBitmap1);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertEquals(0, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(12, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(924, byteBuffer0.capacity());
      assertEquals(924, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(924, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=924 cap=924]", byteBuffer0.toString());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap1.sizeInBytes());
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = null;
      try {
        iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean0 = iteratingBufferedRunningLengthWord0.next();
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertFalse(boolean0);
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      long long0 = iteratingBufferedRunningLengthWord0.dischargeNegated(eWAHCompressedBitmap0, 1L);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1L, long0);
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertFalse(iteratingBufferedRunningLengthWord1.equals((Object)iteratingBufferedRunningLengthWord0));
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals((-1L), iteratingBufferedRunningLengthWord1.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord1.getRunningBit());
      assertEquals(2147483646L, iteratingBufferedRunningLengthWord1.size());
      assertEquals(Integer.MAX_VALUE, iteratingBufferedRunningLengthWord1.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord1.next();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(28, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      iteratingBufferedRunningLengthWord0.dischargeAsEmpty(eWAHCompressedBitmap0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertFalse(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap1 = eWAHCompressedBitmap0.and(eWAHCompressedBitmap0);
      assertEquals(5, intArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(eWAHCompressedBitmap1.equals((Object)eWAHCompressedBitmap0));
      assertNotSame(eWAHCompressedBitmap0, eWAHCompressedBitmap1);
      assertNotSame(eWAHCompressedBitmap1, eWAHCompressedBitmap0);
      assertEquals(65, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(36, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(44, eWAHCompressedBitmap1.serializedSizeInBytes());
      assertEquals(65, eWAHCompressedBitmap1.sizeInBits());
      assertEquals(32, eWAHCompressedBitmap1.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[17];
      intArray0[2] = 2114445438;
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      assertEquals(17, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(44, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(2114445439, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(32, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(17, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(44, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(2114445439, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(32, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      iteratingBufferedRunningLengthWord0.discardFirstWords(33038181L);
      assertEquals(17, intArray0.length);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(44, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(2114445439, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(32, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(28L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(29L, iteratingBufferedRunningLengthWord0.size());
      assertEquals(1, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      
      // Undeclared exception!
      iteratingBufferedRunningLengthWord0.writeNegatedLiteralWords(1982292598, eWAHCompressedBitmap0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long[] longArray0 = new long[1];
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(longBuffer0.hasArray());
      assertEquals(1, longBuffer0.limit());
      assertEquals(1, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertEquals(1, longBuffer0.capacity());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      LongBufferWrapper longBufferWrapper0 = new LongBufferWrapper(longBuffer0, 881);
      assertEquals(1, longArray0.length);
      assertTrue(longBuffer0.hasArray());
      assertEquals(1, longBuffer0.limit());
      assertEquals(1, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertEquals(1, longBuffer0.capacity());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertEquals(881, longBufferWrapper0.sizeInWords());
      assertNotNull(longBufferWrapper0);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      EWAHIterator eWAHIterator0 = new EWAHIterator(longBufferWrapper0);
      assertEquals(1, longArray0.length);
      assertTrue(longBuffer0.hasArray());
      assertEquals(1, longBuffer0.limit());
      assertEquals(1, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertEquals(1, longBuffer0.capacity());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertEquals(881, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertNotNull(eWAHIterator0);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      assertEquals(1, longArray0.length);
      assertTrue(longBuffer0.hasArray());
      assertEquals(1, longBuffer0.limit());
      assertEquals(1, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertEquals(1, longBuffer0.capacity());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertEquals(881, longBufferWrapper0.sizeInWords());
      assertTrue(eWAHIterator0.hasNext());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
      assertFalse(iteratingBufferedRunningLengthWord0.getRunningBit());
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(0L, iteratingBufferedRunningLengthWord0.getRunningLength());
      assertNotNull(iteratingBufferedRunningLengthWord0);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      assertEquals(1, longArray0.length);
      assertTrue(EWAHCompressedBitmap.ADJUST_CONTAINER_SIZE_WHEN_AGGREGATING);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
      assertTrue(longBuffer0.hasArray());
      assertEquals(1, longBuffer0.limit());
      assertEquals(1, longBuffer0.remaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertTrue(longBuffer0.hasRemaining());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", longBuffer0.toString());
      assertEquals(1, longBuffer0.capacity());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(20, eWAHCompressedBitmap0.serializedSizeInBytes());
      assertEquals(8, eWAHCompressedBitmap0.sizeInBytes());
      assertNotNull(eWAHCompressedBitmap0);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.discharge((BitmapStorage) eWAHCompressedBitmap0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.nio.HeapLongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int[] intArray0 = new int[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      eWAHCompressedBitmap0.not();
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      long long0 = iteratingBufferedRunningLengthWord0.dischargeNegated(eWAHCompressedBitmap0, 64);
      assertEquals(0, iteratingBufferedRunningLengthWord0.getNumberOfLiteralWords());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int[] intArray0 = new int[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[4];
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      iteratingBufferedRunningLengthWord0.dischargeAsEmpty(eWAHCompressedBitmap0);
      assertEquals(24, eWAHCompressedBitmap0.sizeInBytes());
      
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmap0;
      EWAHCompressedBitmap eWAHCompressedBitmap1 = EWAHCompressedBitmap.xor(eWAHCompressedBitmapArray0);
      assertEquals(28, eWAHCompressedBitmap1.serializedSizeInBytes());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      iteratingBufferedRunningLengthWord0.discardLiteralWords((-3630L));
      iteratingBufferedRunningLengthWord0.discardFirstWords(621L);
      assertEquals(3009L, iteratingBufferedRunningLengthWord0.size());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      iteratingBufferedRunningLengthWord0.discardFirstWords((-1L));
      assertEquals(0L, iteratingBufferedRunningLengthWord0.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      iteratingBufferedRunningLengthWord0.dischargeNegated(eWAHCompressedBitmap0, 64);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      long long0 = iteratingBufferedRunningLengthWord1.discharge((BitmapStorage) eWAHCompressedBitmap0, 1L);
      assertEquals(32, eWAHCompressedBitmap0.sizeInBytes());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      long long0 = iteratingBufferedRunningLengthWord0.getRunningLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord1 = iteratingBufferedRunningLengthWord0.clone();
      assertNotSame(iteratingBufferedRunningLengthWord1, iteratingBufferedRunningLengthWord0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int[] intArray0 = new int[5];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = EWAHCompressedBitmap.bitmapOf(intArray0);
      EWAHIterator eWAHIterator0 = EWAHIterator.getEWAHIterator(eWAHCompressedBitmap0);
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHIterator0);
      iteratingBufferedRunningLengthWord0.writeLiteralWords((-1270), eWAHCompressedBitmap0);
      assertEquals(1, eWAHCompressedBitmap0.sizeInBits());
      assertEquals(16, eWAHCompressedBitmap0.sizeInBytes());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      IteratingBufferedRunningLengthWord iteratingBufferedRunningLengthWord0 = new IteratingBufferedRunningLengthWord(eWAHCompressedBitmap0);
      // Undeclared exception!
      try { 
        iteratingBufferedRunningLengthWord0.getLiteralWordAt(64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
