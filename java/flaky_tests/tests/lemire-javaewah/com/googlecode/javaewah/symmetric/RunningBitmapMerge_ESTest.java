/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 00:34:38 GMT 2022
 */

package com.googlecode.javaewah.symmetric;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.googlecode.javaewah.BitCounter;
import com.googlecode.javaewah.EWAHCompressedBitmap;
import com.googlecode.javaewah.NonEmptyVirtualStorage;
import com.googlecode.javaewah.symmetric.RunningBitmapMerge;
import com.googlecode.javaewah.symmetric.ThresholdFuncBitmap;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RunningBitmapMerge_ESTest extends RunningBitmapMerge_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RunningBitmapMerge runningBitmapMerge0 = new RunningBitmapMerge();
      ThresholdFuncBitmap thresholdFuncBitmap0 = new ThresholdFuncBitmap(19);
      BitCounter bitCounter0 = new BitCounter();
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[4];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      LongBuffer longBuffer0 = byteBuffer0.asLongBuffer();
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      int[] intArray0 = new int[1];
      EWAHCompressedBitmap eWAHCompressedBitmap1 = EWAHCompressedBitmap.bitmapOf(intArray0);
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap1;
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmap0;
      runningBitmapMerge0.symmetric(thresholdFuncBitmap0, bitCounter0, eWAHCompressedBitmapArray0);
      assertEquals(4, eWAHCompressedBitmapArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RunningBitmapMerge runningBitmapMerge0 = new RunningBitmapMerge();
      ThresholdFuncBitmap thresholdFuncBitmap0 = new ThresholdFuncBitmap((-682));
      NonEmptyVirtualStorage nonEmptyVirtualStorage0 = new NonEmptyVirtualStorage();
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[4];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-682);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      EWAHCompressedBitmap eWAHCompressedBitmap1 = new EWAHCompressedBitmap(longBuffer0);
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap1;
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmapArray0[1];
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmapArray0[1];
      // Undeclared exception!
      try { 
        runningBitmapMerge0.symmetric(thresholdFuncBitmap0, nonEmptyVirtualStorage0, eWAHCompressedBitmapArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RunningBitmapMerge runningBitmapMerge0 = new RunningBitmapMerge();
      ThresholdFuncBitmap thresholdFuncBitmap0 = new ThresholdFuncBitmap(0);
      long[] longArray0 = new long[2];
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0, 0, 0);
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[2];
      // Undeclared exception!
      try { 
        runningBitmapMerge0.symmetric(thresholdFuncBitmap0, eWAHCompressedBitmap0, eWAHCompressedBitmapArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RunningBitmapMerge runningBitmapMerge0 = new RunningBitmapMerge();
      ThresholdFuncBitmap thresholdFuncBitmap0 = new ThresholdFuncBitmap(19);
      BitCounter bitCounter0 = new BitCounter();
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[4];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[4] = (byte) (-106);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      LongBuffer longBuffer0 = byteBuffer0.asLongBuffer();
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[1] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[2] = eWAHCompressedBitmap0;
      eWAHCompressedBitmapArray0[3] = eWAHCompressedBitmapArray0[0];
      runningBitmapMerge0.symmetric(thresholdFuncBitmap0, bitCounter0, eWAHCompressedBitmapArray0);
      assertEquals(0, bitCounter0.getCount());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[1];
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap();
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      EWAHCompressedBitmap eWAHCompressedBitmap1 = EWAHCompressedBitmap.threshold(64, eWAHCompressedBitmapArray0);
      assertEquals(64, EWAHCompressedBitmap.WORD_IN_BITS);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RunningBitmapMerge runningBitmapMerge0 = new RunningBitmapMerge();
      ThresholdFuncBitmap thresholdFuncBitmap0 = new ThresholdFuncBitmap(19);
      BitCounter bitCounter0 = new BitCounter();
      EWAHCompressedBitmap[] eWAHCompressedBitmapArray0 = new EWAHCompressedBitmap[4];
      byte[] byteArray0 = new byte[8];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      LongBuffer longBuffer0 = byteBuffer0.asLongBuffer();
      EWAHCompressedBitmap eWAHCompressedBitmap0 = new EWAHCompressedBitmap(longBuffer0);
      eWAHCompressedBitmapArray0[0] = eWAHCompressedBitmap0;
      // Undeclared exception!
      try { 
        runningBitmapMerge0.symmetric(thresholdFuncBitmap0, bitCounter0, eWAHCompressedBitmapArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.googlecode.javaewah.EWAHIterator", e);
      }
  }
}
