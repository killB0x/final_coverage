/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 00:27:22 GMT 2022
 */

package com.googlecode.javaewah.datastructure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.googlecode.javaewah.datastructure.PriorityQ;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PriorityQ_ESTest extends PriorityQ_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Integer> comparator0 = null;
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(16, (Comparator<Integer>) null);
      priorityQ0.lastIndex = 16;
      // Undeclared exception!
      try { 
        priorityQ0.percolateDown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-526), (-526), 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(481, comparator0);
      priorityQ0.percolateDown();
      priorityQ0.poll();
      Integer integer0 = new Integer(481);
      Integer integer1 = new Integer(481);
      priorityQ0.toss(integer1);
      priorityQ0.buildHeap();
      Integer integer2 = new Integer((-526));
      priorityQ0.toss(integer2);
      Integer integer3 = new Integer((-526));
      priorityQ0.toss(integer1);
      priorityQ0.toss((Integer) null);
      Integer integer4 = new Integer((-1239));
      priorityQ0.toss((Integer) null);
      priorityQ0.percolateDown();
      Integer integer5 = new Integer((-412));
      priorityQ0.toss(integer5);
      Integer integer6 = new Integer((-516));
      Integer integer7 = new Integer((-516));
      priorityQ0.toss(integer7);
      priorityQ0.buildHeap();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-533), 4, (-1391), (-1), 0).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(481, comparator0);
      priorityQ0.percolateDown();
      priorityQ0.poll();
      priorityQ0.percolateDown();
      Integer integer0 = new Integer((-1585));
      Integer integer1 = new Integer(481);
      priorityQ0.toss(integer1);
      Integer integer2 = new Integer((-1585));
      priorityQ0.toss(integer1);
      priorityQ0.toss(integer0);
      Integer integer3 = new Integer(481);
      priorityQ0.toss(integer0);
      priorityQ0.percolateDown();
      priorityQ0.toss(integer1);
      Integer integer4 = new Integer((-468));
      priorityQ0.toss(integer2);
      priorityQ0.buildHeap();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-533), (-5), 483, (-1), (-5)).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(483, comparator0);
      priorityQ0.percolateDown();
      priorityQ0.poll();
      priorityQ0.percolateDown();
      Integer integer0 = new Integer((-1585));
      Integer integer1 = new Integer(483);
      priorityQ0.toss(integer1);
      priorityQ0.buildHeap();
      Integer integer2 = new Integer((-1585));
      priorityQ0.poll();
      priorityQ0.toss(integer1);
      priorityQ0.toss((Integer) null);
      Integer integer3 = new Integer(483);
      priorityQ0.toss(integer0);
      priorityQ0.poll();
      priorityQ0.toss((Integer) null);
      priorityQ0.toss(integer1);
      Integer integer4 = new Integer(483);
      priorityQ0.toss((Integer) null);
      priorityQ0.percolateDown();
      Integer integer5 = new Integer((-1585));
      priorityQ0.toss(integer5);
      Integer integer6 = new Integer((-1));
      priorityQ0.toss((Integer) null);
      priorityQ0.poll();
      priorityQ0.size();
      priorityQ0.percolateDown();
      priorityQ0.poll();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-533), 4, 481, (-1), 4).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(481, comparator0);
      priorityQ0.percolateDown();
      priorityQ0.poll();
      priorityQ0.percolateDown();
      Integer integer0 = new Integer((-1585));
      Integer integer1 = new Integer(481);
      priorityQ0.toss(integer1);
      priorityQ0.buildHeap();
      Integer integer2 = new Integer((-1585));
      priorityQ0.poll();
      priorityQ0.toss(integer1);
      priorityQ0.toss((Integer) null);
      priorityQ0.toss(integer0);
      Integer integer3 = new Integer(481);
      priorityQ0.toss(integer0);
      priorityQ0.percolateDown();
      priorityQ0.toss(integer1);
      Integer integer4 = new Integer((-468));
      priorityQ0.toss(integer2);
      priorityQ0.poll();
      priorityQ0.size();
      priorityQ0.percolateDown();
      int int0 = (-1250);
      priorityQ0.lastIndex = 6;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQ<Integer> priorityQ1 = null;
      try {
        priorityQ1 = new PriorityQ<Integer>((-1250), comparator1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1249
         //
         verifyException("com.googlecode.javaewah.datastructure.PriorityQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-533), 4, (-93), (-93), (-93)).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(481, comparator0);
      priorityQ0.percolateDown();
      priorityQ0.poll();
      priorityQ0.percolateDown();
      Integer integer0 = new Integer(28);
      Integer integer1 = new Integer(481);
      priorityQ0.toss(integer1);
      priorityQ0.buildHeap();
      Integer integer2 = new Integer(28);
      priorityQ0.poll();
      priorityQ0.toss(integer1);
      priorityQ0.toss((Integer) null);
      Integer integer3 = new Integer(481);
      priorityQ0.toss(integer0);
      priorityQ0.percolateDown();
      priorityQ0.toss(integer1);
      Integer integer4 = new Integer((-468));
      priorityQ0.toss(integer2);
      priorityQ0.poll();
      priorityQ0.size();
      priorityQ0.percolateDown();
      int int0 = (-1250);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQ<Integer> priorityQ1 = null;
      try {
        priorityQ1 = new PriorityQ<Integer>((-1250), comparator1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1249
         //
         verifyException("com.googlecode.javaewah.datastructure.PriorityQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-533), 4, (-533)).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(501, comparator0);
      priorityQ0.percolateDown();
      Integer integer0 = new Integer(4);
      priorityQ0.percolateDown();
      Integer integer1 = new Integer(501);
      priorityQ0.toss(integer1);
      priorityQ0.toss(integer0);
      Integer integer2 = new Integer(501);
      priorityQ0.toss(integer0);
      priorityQ0.toss(integer0);
      priorityQ0.buildHeap();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-533), 4, (-4807), 438, 1).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(481, comparator0);
      priorityQ0.percolateDown();
      Integer integer0 = new Integer((-1585));
      Integer integer1 = new Integer(481);
      priorityQ0.toss(integer1);
      priorityQ0.buildHeap();
      Integer integer2 = new Integer((-1585));
      Integer integer3 = priorityQ0.poll();
      priorityQ0.toss(integer1);
      priorityQ0.toss(integer3);
      priorityQ0.poll();
      priorityQ0.toss(integer0);
      priorityQ0.percolateDown();
      priorityQ0.toss(integer1);
      Integer integer4 = new Integer((-468));
      priorityQ0.toss(integer2);
      priorityQ0.poll();
      priorityQ0.size();
      priorityQ0.percolateDown();
      int int0 = (-1250);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQ<Integer> priorityQ1 = null;
      try {
        priorityQ1 = new PriorityQ<Integer>((-1250), comparator1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1249
         //
         verifyException("com.googlecode.javaewah.datastructure.PriorityQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-533), 4).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(501, comparator0);
      priorityQ0.percolateDown();
      Integer integer0 = new Integer(4);
      priorityQ0.percolateDown();
      Integer integer1 = new Integer(501);
      priorityQ0.toss(integer0);
      priorityQ0.toss(integer1);
      Integer integer2 = new Integer(501);
      priorityQ0.toss(integer2);
      priorityQ0.buildHeap();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-533), 4, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(481, comparator0);
      priorityQ0.percolateDown();
      priorityQ0.poll();
      priorityQ0.percolateDown();
      Integer integer0 = new Integer((-1585));
      Integer integer1 = new Integer(481);
      priorityQ0.toss(integer1);
      priorityQ0.buildHeap();
      Integer integer2 = new Integer((-1585));
      priorityQ0.poll();
      priorityQ0.toss(integer1);
      priorityQ0.toss((Integer) null);
      Integer integer3 = new Integer(481);
      priorityQ0.toss(integer0);
      priorityQ0.percolateDown();
      priorityQ0.toss(integer1);
      Integer integer4 = new Integer((-468));
      priorityQ0.toss(integer2);
      priorityQ0.poll();
      priorityQ0.size();
      priorityQ0.percolateDown();
      int int0 = (-1250);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQ<Integer> priorityQ1 = null;
      try {
        priorityQ1 = new PriorityQ<Integer>((-1250), comparator1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1249
         //
         verifyException("com.googlecode.javaewah.datastructure.PriorityQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-533), (-533)).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(457, comparator0);
      Integer integer0 = new Integer(457);
      Integer integer1 = new Integer(457);
      priorityQ0.toss(integer0);
      priorityQ0.percolateDown();
      Integer integer2 = new Integer((-533));
      priorityQ0.toss(integer0);
      priorityQ0.toss(integer2);
      priorityQ0.buildHeap();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1317, 1317, 1317, 1317, 1317).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(1317, comparator0);
      priorityQ0.lastIndex = 1317;
      priorityQ0.buildHeap();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-533), 4).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(481, comparator0);
      priorityQ0.percolateDown();
      priorityQ0.poll();
      priorityQ0.percolateDown();
      Integer integer0 = new Integer((-1585));
      Integer integer1 = new Integer(481);
      priorityQ0.toss(integer1);
      priorityQ0.buildHeap();
      Integer integer2 = new Integer((-1585));
      priorityQ0.poll();
      priorityQ0.toss(integer1);
      priorityQ0.toss((Integer) null);
      priorityQ0.poll();
      priorityQ0.toss(integer0);
      priorityQ0.percolateDown();
      priorityQ0.toss(integer1);
      Integer integer3 = new Integer((-468));
      priorityQ0.toss(integer2);
      priorityQ0.poll();
      priorityQ0.size();
      priorityQ0.percolateDown();
      int int0 = (-1250);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQ<Integer> priorityQ1 = null;
      try {
        priorityQ1 = new PriorityQ<Integer>((-1250), comparator1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1249
         //
         verifyException("com.googlecode.javaewah.datastructure.PriorityQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-533)).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(457, comparator0);
      Integer integer0 = new Integer(457);
      Integer integer1 = new Integer(457);
      priorityQ0.toss(integer1);
      priorityQ0.toss(integer0);
      priorityQ0.buildHeap();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      PriorityQ<Object> priorityQ0 = new PriorityQ<Object>(2, (Comparator<Object>) null);
      priorityQ0.poll();
      Object object0 = new Object();
      priorityQ0.toss(object0);
      priorityQ0.percolateDown();
      priorityQ0.poll();
      priorityQ0.lastIndex = 2;
      priorityQ0.size();
      priorityQ0.lastIndex = 0;
      priorityQ0.percolateDown();
      priorityQ0.buildHeap();
      priorityQ0.buildHeap();
      priorityQ0.buildHeap();
      priorityQ0.size();
      priorityQ0.poll();
      priorityQ0.buildHeap();
      // Undeclared exception!
      try { 
        priorityQ0.poll();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 3
         //
         verifyException("com.googlecode.javaewah.datastructure.PriorityQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1415, 1415, 1415, (-216), 462).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(1415, comparator0);
      priorityQ0.lastIndex = 1415;
      priorityQ0.percolateDown();
      priorityQ0.lastIndex = 1415;
      priorityQ0.percolateDown();
      priorityQ0.buildHeap();
      priorityQ0.peek();
      priorityQ0.buildHeap();
      priorityQ0.lastIndex = 1;
      priorityQ0.percolateDown();
      priorityQ0.percolateDown();
      priorityQ0.buildHeap();
      Integer integer0 = new Integer(1);
      priorityQ0.toss(integer0);
      priorityQ0.percolateDown();
      priorityQ0.toss((Integer) null);
      Integer integer1 = new Integer(2);
      priorityQ0.toss(integer1);
      Integer integer2 = new Integer(1);
      priorityQ0.toss((Integer) null);
      priorityQ0.poll();
      priorityQ0.size();
      priorityQ0.percolateDown();
      priorityQ0.buildHeap();
      Integer integer3 = new Integer(4);
      priorityQ0.toss(integer3);
      priorityQ0.percolateDown();
      priorityQ0.percolateDown();
      priorityQ0.buildHeap();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(1288, comparator1);
      priorityQ0.lastIndex = 1312;
      // Undeclared exception!
      try { 
        priorityQ0.buildHeap();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1312 out of bounds for length 1289
         //
         verifyException("com.googlecode.javaewah.datastructure.PriorityQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1415, 1415, 1415, (-216), 460).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(1415, comparator0);
      priorityQ0.lastIndex = 1415;
      priorityQ0.percolateDown();
      priorityQ0.lastIndex = 1415;
      priorityQ0.poll();
      priorityQ0.percolateDown();
      priorityQ0.buildHeap();
      priorityQ0.peek();
      priorityQ0.buildHeap();
      priorityQ0.lastIndex = 1;
      priorityQ0.percolateDown();
      priorityQ0.percolateDown();
      priorityQ0.buildHeap();
      Integer integer0 = new Integer(1);
      priorityQ0.toss(integer0);
      priorityQ0.percolateDown();
      Integer integer1 = new Integer(2);
      priorityQ0.toss(integer1);
      Integer integer2 = new Integer(1);
      priorityQ0.toss((Integer) null);
      priorityQ0.poll();
      priorityQ0.size();
      priorityQ0.percolateDown();
      priorityQ0.buildHeap();
      priorityQ0.buildHeap();
      Integer integer3 = new Integer(3);
      priorityQ0.toss(integer3);
      priorityQ0.percolateDown();
      priorityQ0.percolateDown();
      priorityQ0.buildHeap();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(481, comparator0);
      priorityQ0.percolateDown();
      priorityQ0.poll();
      priorityQ0.percolateDown();
      Integer integer0 = new Integer((-1585));
      Integer integer1 = new Integer(481);
      priorityQ0.toss(integer1);
      priorityQ0.buildHeap();
      Integer integer2 = new Integer((-1585));
      priorityQ0.poll();
      priorityQ0.toss(integer1);
      priorityQ0.toss((Integer) null);
      priorityQ0.poll();
      priorityQ0.toss(integer0);
      priorityQ0.percolateDown();
      priorityQ0.toss(integer1);
      Integer integer3 = new Integer((-468));
      priorityQ0.toss(integer2);
      priorityQ0.poll();
      priorityQ0.size();
      priorityQ0.percolateDown();
      int int0 = (-1250);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQ<Integer> priorityQ1 = null;
      try {
        priorityQ1 = new PriorityQ<Integer>((-1250), comparator1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1249
         //
         verifyException("com.googlecode.javaewah.datastructure.PriorityQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(14, 9, 9, 30).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(1415, comparator0);
      priorityQ0.lastIndex = 1415;
      priorityQ0.percolateDown();
      priorityQ0.lastIndex = 1415;
      priorityQ0.poll();
      priorityQ0.lastIndex = (-132);
      priorityQ0.percolateDown();
      priorityQ0.buildHeap();
      priorityQ0.peek();
      priorityQ0.buildHeap();
      priorityQ0.lastIndex = 1;
      priorityQ0.percolateDown();
      priorityQ0.percolateDown();
      priorityQ0.buildHeap();
      priorityQ0.percolateDown();
      priorityQ0.poll();
      Integer integer0 = new Integer(9);
      Integer integer1 = new Integer(1415);
      Integer integer2 = new Integer(0);
      priorityQ0.toss(integer2);
      priorityQ0.percolateDown();
      priorityQ0.buildHeap();
      priorityQ0.poll();
      priorityQ0.poll();
      priorityQ0.size();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 28, 1, 2393, 2393).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(1359, comparator0);
      priorityQ0.lastIndex = 1359;
      priorityQ0.poll();
      Integer integer0 = new Integer(1);
      priorityQ0.toss(integer0);
      priorityQ0.poll();
      priorityQ0.percolateDown();
      priorityQ0.buildHeap();
      priorityQ0.peek();
      priorityQ0.peek();
      priorityQ0.buildHeap();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(3011, comparator0);
      priorityQ0.buildHeap();
      priorityQ0.poll();
      priorityQ0.size();
      priorityQ0.percolateDown();
      Integer integer0 = new Integer(1249);
      priorityQ0.lastIndex = 0;
      priorityQ0.toss(integer0);
      priorityQ0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(80, comparator0);
      priorityQ0.buildHeap();
      priorityQ0.percolateDown();
      Integer integer0 = new Integer(80);
      priorityQ0.toss(integer0);
      priorityQ0.poll();
      priorityQ0.percolateDown();
      priorityQ0.percolateDown();
      PriorityQ<Object> priorityQ1 = new PriorityQ<Object>(1, (Comparator<Object>) null);
      Integer integer1 = new Integer(80);
      priorityQ1.toss(integer1);
      priorityQ1.percolateDown();
      Object object0 = priorityQ1.poll();
      priorityQ1.buildHeap();
      priorityQ1.poll();
      priorityQ0.percolateDown();
      priorityQ1.isEmpty();
      priorityQ0.percolateDown();
      priorityQ1.toss(object0);
      priorityQ1.percolateDown();
      priorityQ1.buildHeap();
      priorityQ1.lastIndex = 0;
      priorityQ1.toss(integer0);
      priorityQ0.peek();
      priorityQ0.peek();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        priorityQ1.toss(object1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("com.googlecode.javaewah.datastructure.PriorityQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PriorityQ<Object> priorityQ0 = new PriorityQ<Object>(0, (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        priorityQ0.peek();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.googlecode.javaewah.datastructure.PriorityQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQ<Object> priorityQ0 = new PriorityQ<Object>(0, comparator0);
      Comparator<Object> comparator1 = priorityQ0.comp;
      PriorityQ<Object> priorityQ1 = new PriorityQ<Object>(367, comparator1);
      priorityQ0.size();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PriorityQ<Object> priorityQ0 = new PriorityQ<Object>(3022, (Comparator<Object>) null);
      Comparator<Object> comparator0 = priorityQ0.comp;
      PriorityQ<Object> priorityQ1 = new PriorityQ<Object>(3022, (Comparator<Object>) null);
      priorityQ0.percolateDown();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQ<Integer> priorityQ2 = new PriorityQ<Integer>(3022, comparator1);
      priorityQ2.percolateDown();
      priorityQ2.buildHeap();
      priorityQ2.poll();
      Integer integer0 = new Integer(790);
      priorityQ2.toss(integer0);
      priorityQ2.size();
      priorityQ2.poll();
      priorityQ0.isEmpty();
      Integer integer1 = new Integer(1);
      priorityQ2.toss(integer1);
      PriorityQ<Object> priorityQ3 = new PriorityQ<Object>(0, (Comparator<Object>) null);
      int int0 = 719;
      // Undeclared exception!
      try { 
        priorityQ3.poll();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.googlecode.javaewah.datastructure.PriorityQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = (-1);
      int int1 = 16;
      Comparator<Integer> comparator0 = null;
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>((-1), (Comparator<Integer>) null);
      // Undeclared exception!
      try { 
        priorityQ0.percolateDown();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("com.googlecode.javaewah.datastructure.PriorityQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(1, (Comparator<Integer>) null);
      priorityQ0.peek();
      PriorityQ<Object> priorityQ1 = new PriorityQ<Object>((-1), (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        priorityQ1.poll();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("com.googlecode.javaewah.datastructure.PriorityQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PriorityQ<Integer> priorityQ0 = null;
      try {
        priorityQ0 = new PriorityQ<Integer>((-1875), (Comparator<Integer>) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1874
         //
         verifyException("com.googlecode.javaewah.datastructure.PriorityQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(55, comparator0);
      priorityQ0.lastIndex = 55;
      priorityQ0.poll();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(3011, comparator0);
      priorityQ0.buildHeap();
      priorityQ0.size();
      priorityQ0.percolateDown();
      Integer integer0 = new Integer(1249);
      priorityQ0.lastIndex = 0;
      priorityQ0.toss(integer0);
      priorityQ0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(3011, comparator0);
      priorityQ0.buildHeap();
      priorityQ0.poll();
      priorityQ0.size();
      priorityQ0.percolateDown();
      Integer integer0 = new Integer(1249);
      priorityQ0.toss(integer0);
      priorityQ0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1324, 1324, 1324, 1324, 1324).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(1324, comparator0);
      priorityQ0.lastIndex = 1324;
      priorityQ0.buildHeap();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(457, (Comparator<Integer>) null);
      priorityQ0.percolateDown();
      priorityQ0.percolateDown();
      Integer integer0 = new Integer(457);
      Integer integer1 = new Integer(457);
      priorityQ0.toss(integer0);
      Integer integer2 = new Integer(457);
      priorityQ0.toss(integer2);
      // Undeclared exception!
      try { 
        priorityQ0.buildHeap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(17, (Comparator<Integer>) null);
      priorityQ0.lastIndex = 17;
      // Undeclared exception!
      try { 
        priorityQ0.poll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(1415, comparator0);
      priorityQ0.lastIndex = 1415;
      priorityQ0.percolateDown();
      priorityQ0.lastIndex = 1415;
      priorityQ0.poll();
      priorityQ0.percolateDown();
      priorityQ0.buildHeap();
      priorityQ0.peek();
      priorityQ0.buildHeap();
      priorityQ0.lastIndex = 1;
      priorityQ0.percolateDown();
      priorityQ0.percolateDown();
      priorityQ0.buildHeap();
      priorityQ0.percolateDown();
      priorityQ0.poll();
      priorityQ0.percolateDown();
      priorityQ0.percolateDown();
      priorityQ0.buildHeap();
      priorityQ0.percolateDown();
      priorityQ0.isEmpty();
      priorityQ0.toss((Integer) null);
      priorityQ0.lastIndex = 0;
      priorityQ0.percolateDown();
      Integer integer0 = new Integer(1415);
      priorityQ0.toss(integer0);
      priorityQ0.peek();
      priorityQ0.peek();
      priorityQ0.isEmpty();
      boolean boolean0 = priorityQ0.isEmpty();
      assertEquals(1, priorityQ0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(1324, (Comparator<Integer>) null);
      priorityQ0.percolateDown();
      priorityQ0.buildHeap();
      assertTrue(priorityQ0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(2710, (Comparator<Integer>) null);
      priorityQ0.poll();
      assertFalse(priorityQ0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(837, comparator0);
      priorityQ0.percolateDown();
      priorityQ0.buildHeap();
      priorityQ0.percolateDown();
      Integer integer0 = new Integer(0);
      priorityQ0.toss(integer0);
      priorityQ0.percolateDown();
      priorityQ0.poll();
      priorityQ0.toss((Integer) null);
      priorityQ0.percolateDown();
      priorityQ0.poll();
      priorityQ0.poll();
      assertEquals((-1), priorityQ0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(2231, (Comparator<Integer>) null);
      priorityQ0.peek();
      assertEquals(0, priorityQ0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 0;
      PriorityQ<Object> priorityQ0 = new PriorityQ<Object>(0, (Comparator<Object>) null);
      PriorityQ<Object> priorityQ1 = new PriorityQ<Object>(3011, (Comparator<Object>) null);
      priorityQ1.peek();
      priorityQ0.buildHeap();
      // Undeclared exception!
      try { 
        priorityQ0.toss((Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.googlecode.javaewah.datastructure.PriorityQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(67, (Comparator<Integer>) null);
      priorityQ0.buildHeap();
      assertEquals(0, priorityQ0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>((-1), comparator0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        priorityQ0.toss(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("com.googlecode.javaewah.datastructure.PriorityQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(0, (Comparator<Integer>) null);
      Integer integer0 = new Integer(0);
      priorityQ0.lastIndex = 0;
      priorityQ0.lastIndex = 1;
      // Undeclared exception!
      try { 
        priorityQ0.toss(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 1
         //
         verifyException("com.googlecode.javaewah.datastructure.PriorityQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(0, comparator0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        priorityQ0.toss(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.googlecode.javaewah.datastructure.PriorityQ", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(2710, (Comparator<Integer>) null);
      Integer integer0 = new Integer(2710);
      priorityQ0.toss(integer0);
      priorityQ0.peek();
      assertEquals(1, priorityQ0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PriorityQ<Integer> priorityQ0 = new PriorityQ<Integer>(2090, (Comparator<Integer>) null);
      assertEquals(0, priorityQ0.size());
  }
}
