/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 11:26:19 GMT 2022
 */

package com.stoyanr.evictor.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.stoyanr.evictor.EvictionQueue;
import com.stoyanr.evictor.map.EvictibleEntry;
import com.stoyanr.evictor.queue.NavigableMapEvictionQueue;
import com.stoyanr.evictor.queue.PriorityEvictionQueue;
import com.stoyanr.evictor.scheduler.DelayedTaskEvictionScheduler;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.Delayed;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DelayedTaskEvictionScheduler_ESTest extends DelayedTaskEvictionScheduler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DelayedTaskEvictionScheduler<Integer, Delayed> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Integer, Delayed>();
      delayedTaskEvictionScheduler0.onEvictEntries();
      EvictibleEntry<Integer, Delayed> evictibleEntry0 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry0);
      delayedTaskEvictionScheduler0.evictEntries();
      EvictibleEntry<Integer, Delayed> evictibleEntry1 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry1);
      EvictibleEntry<Integer, Delayed> evictibleEntry2 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((long)1).when(evictibleEntry2).getEvictionTime();
      doReturn(true).when(evictibleEntry2).isEvictible();
      delayedTaskEvictionScheduler0.scheduleEviction(evictibleEntry2);
      delayedTaskEvictionScheduler0.onEvictEntries();
      EvictibleEntry<Integer, Delayed> evictibleEntry3 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry3);
      delayedTaskEvictionScheduler0.onEvictEntries();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2457, threadFactory0);
      DelayedTaskEvictionScheduler<Integer, Integer> delayedTaskEvictionScheduler1 = new DelayedTaskEvictionScheduler<Integer, Integer>(scheduledThreadPoolExecutor0);
      EvictibleEntry<Integer, Integer> evictibleEntry4 = (EvictibleEntry<Integer, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      scheduledThreadPoolExecutor0.getCorePoolSize();
      delayedTaskEvictionScheduler1.onCancelEviction(evictibleEntry4);
      delayedTaskEvictionScheduler1.onCancelEviction((EvictibleEntry<Integer, Integer>) null);
      delayedTaskEvictionScheduler1.onCancelEviction((EvictibleEntry<Integer, Integer>) null);
      delayedTaskEvictionScheduler1.onCancelEviction((EvictibleEntry<Integer, Integer>) null);
      NavigableMapEvictionQueue<Delayed, Integer> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Delayed, Integer>();
      EvictibleEntry<Delayed, Integer> evictibleEntry5 = (EvictibleEntry<Delayed, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((-1521L)).when(evictibleEntry5).getEvictionTime();
      navigableMapEvictionQueue0.putEntry(evictibleEntry5);
      DelayedTaskEvictionScheduler<Delayed, Integer> delayedTaskEvictionScheduler2 = new DelayedTaskEvictionScheduler<Delayed, Integer>(navigableMapEvictionQueue0, scheduledThreadPoolExecutor0);
      delayedTaskEvictionScheduler2.onEvictEntries();
      DelayedTaskEvictionScheduler<Callable<Delayed>, Delayed> delayedTaskEvictionScheduler3 = new DelayedTaskEvictionScheduler<Callable<Delayed>, Delayed>();
      delayedTaskEvictionScheduler3.onEvictEntries();
      System.setCurrentTimeMillis(0L);
      LinkedBlockingDeque<EvictibleEntry<Delayed, Delayed>> linkedBlockingDeque0 = new LinkedBlockingDeque<EvictibleEntry<Delayed, Delayed>>();
      PriorityEvictionQueue<Delayed, Delayed> priorityEvictionQueue0 = new PriorityEvictionQueue<Delayed, Delayed>(linkedBlockingDeque0);
      DelayedTaskEvictionScheduler<Delayed, Delayed> delayedTaskEvictionScheduler4 = new DelayedTaskEvictionScheduler<Delayed, Delayed>(priorityEvictionQueue0);
      EvictibleEntry<Delayed, Delayed> evictibleEntry6 = (EvictibleEntry<Delayed, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler4.onCancelEviction(evictibleEntry6);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DelayedTaskEvictionScheduler<Integer, Delayed> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Integer, Delayed>();
      delayedTaskEvictionScheduler0.onEvictEntries();
      EvictibleEntry<Integer, Delayed> evictibleEntry0 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry0);
      delayedTaskEvictionScheduler0.evictEntries();
      EvictibleEntry<Integer, Delayed> evictibleEntry1 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry1);
      EvictibleEntry<Integer, Delayed> evictibleEntry2 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((-115L)).when(evictibleEntry2).getEvictionTime();
      doReturn(true).when(evictibleEntry2).isEvictible();
      delayedTaskEvictionScheduler0.scheduleEviction(evictibleEntry2);
      delayedTaskEvictionScheduler0.onEvictEntries();
      EvictibleEntry<Integer, Delayed> evictibleEntry3 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry3);
      delayedTaskEvictionScheduler0.onEvictEntries();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2457, threadFactory0);
      DelayedTaskEvictionScheduler<Integer, Integer> delayedTaskEvictionScheduler1 = new DelayedTaskEvictionScheduler<Integer, Integer>(scheduledThreadPoolExecutor0);
      EvictibleEntry<Integer, Integer> evictibleEntry4 = (EvictibleEntry<Integer, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      scheduledThreadPoolExecutor0.getCorePoolSize();
      delayedTaskEvictionScheduler1.onCancelEviction(evictibleEntry4);
      delayedTaskEvictionScheduler1.onCancelEviction((EvictibleEntry<Integer, Integer>) null);
      delayedTaskEvictionScheduler1.onCancelEviction((EvictibleEntry<Integer, Integer>) null);
      delayedTaskEvictionScheduler1.onCancelEviction((EvictibleEntry<Integer, Integer>) null);
      NavigableMapEvictionQueue<Delayed, Integer> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Delayed, Integer>();
      EvictibleEntry<Delayed, Integer> evictibleEntry5 = (EvictibleEntry<Delayed, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((-1521L)).when(evictibleEntry5).getEvictionTime();
      navigableMapEvictionQueue0.putEntry(evictibleEntry5);
      DelayedTaskEvictionScheduler<Delayed, Integer> delayedTaskEvictionScheduler2 = new DelayedTaskEvictionScheduler<Delayed, Integer>(navigableMapEvictionQueue0, scheduledThreadPoolExecutor0);
      delayedTaskEvictionScheduler2.onEvictEntries();
      DelayedTaskEvictionScheduler<Callable<Delayed>, Delayed> delayedTaskEvictionScheduler3 = new DelayedTaskEvictionScheduler<Callable<Delayed>, Delayed>();
      delayedTaskEvictionScheduler3.onEvictEntries();
      System.setCurrentTimeMillis(0L);
      LinkedBlockingDeque<EvictibleEntry<Delayed, Delayed>> linkedBlockingDeque0 = new LinkedBlockingDeque<EvictibleEntry<Delayed, Delayed>>();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DelayedTaskEvictionScheduler<Integer, Delayed> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Integer, Delayed>();
      delayedTaskEvictionScheduler0.onEvictEntries();
      EvictibleEntry<Integer, Delayed> evictibleEntry0 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry0);
      delayedTaskEvictionScheduler0.evictEntries();
      EvictibleEntry<Integer, Delayed> evictibleEntry1 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry1);
      EvictibleEntry<Integer, Delayed> evictibleEntry2 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((-115L)).when(evictibleEntry2).getEvictionTime();
      doReturn(true).when(evictibleEntry2).isEvictible();
      delayedTaskEvictionScheduler0.scheduleEviction(evictibleEntry2);
      delayedTaskEvictionScheduler0.onEvictEntries();
      delayedTaskEvictionScheduler0.onEvictEntries();
      ConcurrentSkipListMap<Long, EvictibleEntry<Callable<Integer>, Integer>> concurrentSkipListMap0 = new ConcurrentSkipListMap<Long, EvictibleEntry<Callable<Integer>, Integer>>();
      NavigableMapEvictionQueue<Callable<Integer>, Integer> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Callable<Integer>, Integer>(concurrentSkipListMap0);
      DelayedTaskEvictionScheduler<Callable<Integer>, Integer> delayedTaskEvictionScheduler1 = new DelayedTaskEvictionScheduler<Callable<Integer>, Integer>(navigableMapEvictionQueue0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcurrentSkipListMap<Long, EvictibleEntry<Integer, Integer>> concurrentSkipListMap0 = new ConcurrentSkipListMap<Long, EvictibleEntry<Integer, Integer>>();
      NavigableMapEvictionQueue<Integer, Delayed> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Integer, Delayed>();
      DelayedTaskEvictionScheduler<Integer, Delayed> delayedTaskEvictionScheduler0 = null;
      try {
        delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Integer, Delayed>(navigableMapEvictionQueue0, (ScheduledExecutorService) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ScheduledExecutorService instance cannot be null
         //
         verifyException("com.stoyanr.evictor.scheduler.DelayedTaskEvictionScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DelayedTaskEvictionScheduler<Integer, Callable<Integer>> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Integer, Callable<Integer>>();
      assertNotNull(delayedTaskEvictionScheduler0);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      LinkedBlockingDeque<EvictibleEntry<Integer, EvictibleEntry<Delayed, Delayed>>> linkedBlockingDeque0 = new LinkedBlockingDeque<EvictibleEntry<Integer, EvictibleEntry<Delayed, Delayed>>>();
      PriorityEvictionQueue<Integer, EvictibleEntry<Delayed, Delayed>> priorityEvictionQueue0 = new PriorityEvictionQueue<Integer, EvictibleEntry<Delayed, Delayed>>(linkedBlockingDeque0);
      DelayedTaskEvictionScheduler<Integer, EvictibleEntry<Delayed, Delayed>> delayedTaskEvictionScheduler1 = null;
      try {
        delayedTaskEvictionScheduler1 = new DelayedTaskEvictionScheduler<Integer, EvictibleEntry<Delayed, Delayed>>(priorityEvictionQueue0, (ScheduledExecutorService) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ScheduledExecutorService instance cannot be null
         //
         verifyException("com.stoyanr.evictor.scheduler.DelayedTaskEvictionScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DelayedTaskEvictionScheduler<Integer, Delayed> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Integer, Delayed>();
      delayedTaskEvictionScheduler0.onEvictEntries();
      EvictibleEntry<Integer, Delayed> evictibleEntry0 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry0);
      delayedTaskEvictionScheduler0.evictEntries();
      EvictibleEntry<Integer, Delayed> evictibleEntry1 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry1);
      EvictibleEntry<Integer, Delayed> evictibleEntry2 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(evictibleEntry2).getEvictionTime();
      doReturn(true).when(evictibleEntry2).isEvictible();
      delayedTaskEvictionScheduler0.scheduleEviction(evictibleEntry2);
      delayedTaskEvictionScheduler0.onEvictEntries();
      EvictibleEntry<Integer, Delayed> evictibleEntry3 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry3);
      delayedTaskEvictionScheduler0.onEvictEntries();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2457, threadFactory0);
      DelayedTaskEvictionScheduler<Integer, Integer> delayedTaskEvictionScheduler1 = new DelayedTaskEvictionScheduler<Integer, Integer>(scheduledThreadPoolExecutor0);
      EvictibleEntry<Integer, Integer> evictibleEntry4 = (EvictibleEntry<Integer, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      scheduledThreadPoolExecutor0.getCorePoolSize();
      delayedTaskEvictionScheduler1.onCancelEviction(evictibleEntry4);
      delayedTaskEvictionScheduler1.onCancelEviction((EvictibleEntry<Integer, Integer>) null);
      delayedTaskEvictionScheduler1.onCancelEviction((EvictibleEntry<Integer, Integer>) null);
      delayedTaskEvictionScheduler1.onCancelEviction((EvictibleEntry<Integer, Integer>) null);
      NavigableMapEvictionQueue<Delayed, Integer> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Delayed, Integer>();
      EvictibleEntry<Delayed, Integer> evictibleEntry5 = (EvictibleEntry<Delayed, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((-1521L)).when(evictibleEntry5).getEvictionTime();
      navigableMapEvictionQueue0.putEntry(evictibleEntry5);
      DelayedTaskEvictionScheduler<Delayed, Integer> delayedTaskEvictionScheduler2 = new DelayedTaskEvictionScheduler<Delayed, Integer>(navigableMapEvictionQueue0, scheduledThreadPoolExecutor0);
      delayedTaskEvictionScheduler2.onEvictEntries();
      DelayedTaskEvictionScheduler<Callable<Delayed>, Delayed> delayedTaskEvictionScheduler3 = new DelayedTaskEvictionScheduler<Callable<Delayed>, Delayed>();
      delayedTaskEvictionScheduler3.onEvictEntries();
      System.setCurrentTimeMillis(0L);
      LinkedBlockingDeque<EvictibleEntry<Delayed, Delayed>> linkedBlockingDeque0 = new LinkedBlockingDeque<EvictibleEntry<Delayed, Delayed>>();
      PriorityEvictionQueue<Delayed, Delayed> priorityEvictionQueue0 = new PriorityEvictionQueue<Delayed, Delayed>(linkedBlockingDeque0);
      DelayedTaskEvictionScheduler<Delayed, Delayed> delayedTaskEvictionScheduler4 = new DelayedTaskEvictionScheduler<Delayed, Delayed>(priorityEvictionQueue0);
      EvictibleEntry<Delayed, Delayed> evictibleEntry6 = (EvictibleEntry<Delayed, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler4.onCancelEviction(evictibleEntry6);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DelayedTaskEvictionScheduler<Integer, Callable<Integer>> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Integer, Callable<Integer>>();
      EvictibleEntry<Integer, Integer> evictibleEntry0 = null;
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadPoolExecutor_AbortPolicy0);
      DelayedTaskEvictionScheduler<Integer, Integer> delayedTaskEvictionScheduler1 = null;
      try {
        delayedTaskEvictionScheduler1 = new DelayedTaskEvictionScheduler<Integer, Integer>((EvictionQueue<Integer, Integer>) null, scheduledThreadPoolExecutor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Queue cannot be null
         //
         verifyException("com.stoyanr.evictor.scheduler.AbstractQueueEvictionScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DelayedTaskEvictionScheduler<Integer, Delayed> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Integer, Delayed>();
      delayedTaskEvictionScheduler0.onEvictEntries();
      EvictibleEntry<Integer, Delayed> evictibleEntry0 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry0);
      delayedTaskEvictionScheduler0.evictEntries();
      EvictibleEntry<Integer, Delayed> evictibleEntry1 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry1);
      EvictibleEntry<Integer, Delayed> evictibleEntry2 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(evictibleEntry2).isEvictible();
      delayedTaskEvictionScheduler0.scheduleEviction(evictibleEntry2);
      delayedTaskEvictionScheduler0.onEvictEntries();
      EvictibleEntry<Integer, Delayed> evictibleEntry3 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry3);
      delayedTaskEvictionScheduler0.onEvictEntries();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2457, threadFactory0);
      DelayedTaskEvictionScheduler<Integer, Integer> delayedTaskEvictionScheduler1 = new DelayedTaskEvictionScheduler<Integer, Integer>(scheduledThreadPoolExecutor0);
      EvictibleEntry<Integer, Integer> evictibleEntry4 = (EvictibleEntry<Integer, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler1.onCancelEviction(evictibleEntry4);
      delayedTaskEvictionScheduler1.onCancelEviction((EvictibleEntry<Integer, Integer>) null);
      delayedTaskEvictionScheduler1.onCancelEviction((EvictibleEntry<Integer, Integer>) null);
      delayedTaskEvictionScheduler1.onCancelEviction((EvictibleEntry<Integer, Integer>) null);
      NavigableMapEvictionQueue<Delayed, Integer> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Delayed, Integer>();
      EvictibleEntry<Delayed, Integer> evictibleEntry5 = (EvictibleEntry<Delayed, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((long)1).when(evictibleEntry5).getEvictionTime();
      navigableMapEvictionQueue0.putEntry(evictibleEntry5);
      DelayedTaskEvictionScheduler<Delayed, Integer> delayedTaskEvictionScheduler2 = new DelayedTaskEvictionScheduler<Delayed, Integer>(navigableMapEvictionQueue0, scheduledThreadPoolExecutor0);
      delayedTaskEvictionScheduler2.onEvictEntries();
      DelayedTaskEvictionScheduler<Callable<Delayed>, Delayed> delayedTaskEvictionScheduler3 = new DelayedTaskEvictionScheduler<Callable<Delayed>, Delayed>();
      delayedTaskEvictionScheduler3.onEvictEntries();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DelayedTaskEvictionScheduler<Integer, Delayed> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Integer, Delayed>();
      assertNotNull(delayedTaskEvictionScheduler0);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      delayedTaskEvictionScheduler0.onEvictEntries();
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      EvictibleEntry<Integer, Delayed> evictibleEntry0 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry0);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      delayedTaskEvictionScheduler0.evictEntries();
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      EvictibleEntry<Integer, Delayed> evictibleEntry1 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry1);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      EvictibleEntry<Integer, Delayed> evictibleEntry2 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((long)1).when(evictibleEntry2).getEvictionTime();
      doReturn(true).when(evictibleEntry2).isEvictible();
      delayedTaskEvictionScheduler0.scheduleEviction(evictibleEntry2);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      delayedTaskEvictionScheduler0.onEvictEntries();
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      EvictibleEntry<Integer, Delayed> evictibleEntry3 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry3);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      EvictibleEntry<Integer, Delayed> evictibleEntry4 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry4);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      EvictibleEntry<Integer, Delayed> evictibleEntry5 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(evictibleEntry5).isEvictible();
      delayedTaskEvictionScheduler0.scheduleEviction(evictibleEntry5);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      delayedTaskEvictionScheduler0.onEvictEntries();
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      EvictibleEntry<Integer, Delayed> evictibleEntry6 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry6);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      delayedTaskEvictionScheduler0.onEvictEntries();
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      ConcurrentSkipListMap<Long, EvictibleEntry<Callable<Integer>, Integer>> concurrentSkipListMap0 = new ConcurrentSkipListMap<Long, EvictibleEntry<Callable<Integer>, Integer>>();
      assertNotNull(concurrentSkipListMap0);
      
      NavigableMapEvictionQueue<Callable<Integer>, Integer> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Callable<Integer>, Integer>(concurrentSkipListMap0);
      assertNotNull(navigableMapEvictionQueue0);
      
      DelayedTaskEvictionScheduler<Callable<Integer>, Integer> delayedTaskEvictionScheduler1 = new DelayedTaskEvictionScheduler<Callable<Integer>, Integer>(navigableMapEvictionQueue0);
      assertNotNull(delayedTaskEvictionScheduler1);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DelayedTaskEvictionScheduler<Delayed, Callable<Integer>> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Delayed, Callable<Integer>>();
      assertNotNull(delayedTaskEvictionScheduler0);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      long long0 = delayedTaskEvictionScheduler0.getNextEvictionTime();
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      assertEquals(0L, long0);
      
      delayedTaskEvictionScheduler0.evictEntries();
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      delayedTaskEvictionScheduler0.shutdown();
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      DelayedTaskEvictionScheduler<Delayed, Delayed> delayedTaskEvictionScheduler1 = null;
      try {
        delayedTaskEvictionScheduler1 = new DelayedTaskEvictionScheduler<Delayed, Delayed>((EvictionQueue<Delayed, Delayed>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Queue cannot be null
         //
         verifyException("com.stoyanr.evictor.scheduler.AbstractQueueEvictionScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DelayedTaskEvictionScheduler<Integer, Delayed> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Integer, Delayed>();
      assertNotNull(delayedTaskEvictionScheduler0);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      delayedTaskEvictionScheduler0.onEvictEntries();
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      EvictibleEntry<Integer, Delayed> evictibleEntry0 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry0);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      delayedTaskEvictionScheduler0.evictEntries();
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      EvictibleEntry<Integer, Delayed> evictibleEntry1 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry1);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      EvictibleEntry<Integer, Delayed> evictibleEntry2 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(evictibleEntry2).isEvictible();
      delayedTaskEvictionScheduler0.scheduleEviction(evictibleEntry2);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      delayedTaskEvictionScheduler0.onEvictEntries();
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      EvictibleEntry<Integer, Delayed> evictibleEntry3 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry3);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      delayedTaskEvictionScheduler0.onEvictEntries();
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2457, threadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      DelayedTaskEvictionScheduler<Integer, Integer> delayedTaskEvictionScheduler1 = new DelayedTaskEvictionScheduler<Integer, Integer>(scheduledThreadPoolExecutor0);
      assertNotNull(delayedTaskEvictionScheduler1);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      EvictibleEntry<Integer, Integer> evictibleEntry4 = (EvictibleEntry<Integer, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler1.onCancelEviction(evictibleEntry4);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      delayedTaskEvictionScheduler1.onCancelEviction((EvictibleEntry<Integer, Integer>) null);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      delayedTaskEvictionScheduler1.onCancelEviction((EvictibleEntry<Integer, Integer>) null);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      delayedTaskEvictionScheduler1.onCancelEviction((EvictibleEntry<Integer, Integer>) null);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      NavigableMapEvictionQueue<Delayed, Integer> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Delayed, Integer>();
      assertNotNull(navigableMapEvictionQueue0);
      
      EvictibleEntry<Delayed, Integer> evictibleEntry5 = (EvictibleEntry<Delayed, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(evictibleEntry5).getEvictionTime();
      navigableMapEvictionQueue0.putEntry(evictibleEntry5);
      DelayedTaskEvictionScheduler<Delayed, Integer> delayedTaskEvictionScheduler2 = new DelayedTaskEvictionScheduler<Delayed, Integer>(navigableMapEvictionQueue0, scheduledThreadPoolExecutor0);
      assertNotNull(delayedTaskEvictionScheduler2);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      delayedTaskEvictionScheduler2.onEvictEntries();
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      DelayedTaskEvictionScheduler<Callable<Delayed>, Delayed> delayedTaskEvictionScheduler3 = new DelayedTaskEvictionScheduler<Callable<Delayed>, Delayed>();
      assertNotNull(delayedTaskEvictionScheduler3);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      delayedTaskEvictionScheduler3.onEvictEntries();
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PriorityEvictionQueue<Integer, Integer> priorityEvictionQueue0 = new PriorityEvictionQueue<Integer, Integer>(1280);
      assertNotNull(priorityEvictionQueue0);
      
      DelayedTaskEvictionScheduler<Integer, Integer> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Integer, Integer>();
      assertNotNull(delayedTaskEvictionScheduler0);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
      
      ScheduledExecutorService scheduledExecutorService0 = null;
      DelayedTaskEvictionScheduler<Callable<Integer>, Callable<Integer>> delayedTaskEvictionScheduler1 = null;
      try {
        delayedTaskEvictionScheduler1 = new DelayedTaskEvictionScheduler<Callable<Integer>, Callable<Integer>>((ScheduledExecutorService) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ScheduledExecutorService instance cannot be null
         //
         verifyException("com.stoyanr.evictor.scheduler.DelayedTaskEvictionScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConcurrentSkipListMap<Long, EvictibleEntry<Integer, Integer>> concurrentSkipListMap0 = new ConcurrentSkipListMap<Long, EvictibleEntry<Integer, Integer>>();
      assertNotNull(concurrentSkipListMap0);
      
      NavigableMapEvictionQueue<Integer, Integer> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Integer, Integer>(concurrentSkipListMap0);
      assertNotNull(navigableMapEvictionQueue0);
      
      DelayedTaskEvictionScheduler<Integer, Integer> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Integer, Integer>(navigableMapEvictionQueue0);
      assertNotNull(delayedTaskEvictionScheduler0);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DelayedTaskEvictionScheduler<EvictibleEntry<Integer, Integer>, Integer> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<EvictibleEntry<Integer, Integer>, Integer>();
      delayedTaskEvictionScheduler0.onEvictEntries();
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DelayedTaskEvictionScheduler<Integer, Integer> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Integer, Integer>();
      delayedTaskEvictionScheduler0.onEvictEntries();
      delayedTaskEvictionScheduler0.shutdown();
      delayedTaskEvictionScheduler0.evictEntries();
      EvictibleEntry<Integer, Integer> evictibleEntry0 = (EvictibleEntry<Integer, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.shutdown();
      EvictibleEntry<Integer, Integer> evictibleEntry1 = (EvictibleEntry<Integer, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(evictibleEntry1).isEvictible();
      delayedTaskEvictionScheduler0.cancelEviction(evictibleEntry1);
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry0);
      delayedTaskEvictionScheduler0.shutdown();
      delayedTaskEvictionScheduler0.shutdown();
      EvictibleEntry<Integer, Integer> evictibleEntry2 = (EvictibleEntry<Integer, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onScheduleEviction(evictibleEntry2);
      // Undeclared exception!
      try { 
        delayedTaskEvictionScheduler0.scheduleEviction((EvictibleEntry<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.stoyanr.evictor.scheduler.AbstractQueueEvictionScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DelayedTaskEvictionScheduler<EvictibleEntry<Integer, Integer>, Integer> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<EvictibleEntry<Integer, Integer>, Integer>();
      SynchronousQueue<EvictibleEntry<Integer, Delayed>> synchronousQueue0 = new SynchronousQueue<EvictibleEntry<Integer, Delayed>>();
      PriorityEvictionQueue<Integer, Delayed> priorityEvictionQueue0 = new PriorityEvictionQueue<Integer, Delayed>(synchronousQueue0);
      DelayedTaskEvictionScheduler<Integer, Delayed> delayedTaskEvictionScheduler1 = new DelayedTaskEvictionScheduler<Integer, Delayed>(priorityEvictionQueue0);
      delayedTaskEvictionScheduler1.onScheduleEviction((EvictibleEntry<Integer, Delayed>) null);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PriorityEvictionQueue<Integer, Integer> priorityEvictionQueue0 = new PriorityEvictionQueue<Integer, Integer>(1280);
      DelayedTaskEvictionScheduler<Integer, Integer> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Integer, Integer>(priorityEvictionQueue0);
      delayedTaskEvictionScheduler0.shutdown();
      delayedTaskEvictionScheduler0.onCancelEviction((EvictibleEntry<Integer, Integer>) null);
      delayedTaskEvictionScheduler0.onScheduleEviction((EvictibleEntry<Integer, Integer>) null);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NavigableMapEvictionQueue<Callable<Integer>, Integer> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Callable<Integer>, Integer>();
      DelayedTaskEvictionScheduler<Callable<Integer>, Integer> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Callable<Integer>, Integer>(navigableMapEvictionQueue0);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DelayedTaskEvictionScheduler<Integer, Callable<Integer>> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Integer, Callable<Integer>>();
      PriorityEvictionQueue<Callable<Delayed>, Delayed> priorityEvictionQueue0 = new PriorityEvictionQueue<Callable<Delayed>, Delayed>(1);
      DelayedTaskEvictionScheduler<Callable<Delayed>, Delayed> delayedTaskEvictionScheduler1 = new DelayedTaskEvictionScheduler<Callable<Delayed>, Delayed>(priorityEvictionQueue0);
      delayedTaskEvictionScheduler1.onCancelEviction((EvictibleEntry<Callable<Delayed>, Delayed>) null);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConcurrentSkipListMap<Long, EvictibleEntry<Integer, Integer>> concurrentSkipListMap0 = new ConcurrentSkipListMap<Long, EvictibleEntry<Integer, Integer>>();
      NavigableMapEvictionQueue<Integer, Integer> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Integer, Integer>(concurrentSkipListMap0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      DelayedTaskEvictionScheduler<Integer, Integer> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Integer, Integer>(navigableMapEvictionQueue0, scheduledThreadPoolExecutor0);
      EvictibleEntry<Integer, Integer> evictibleEntry0 = (EvictibleEntry<Integer, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      EvictibleEntry<Integer, Integer> evictibleEntry1 = (EvictibleEntry<Integer, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(evictibleEntry1).getEvictionTime();
      navigableMapEvictionQueue0.putEntry(evictibleEntry1);
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry0);
      delayedTaskEvictionScheduler0.shutdown();
      EvictibleEntry<Integer, Integer> evictibleEntry2 = (EvictibleEntry<Integer, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      delayedTaskEvictionScheduler0.onCancelEviction(evictibleEntry2);
      assertEquals(1, DelayedTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
  }
}
