/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 11:21:56 GMT 2022
 */

package com.stoyanr.evictor.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.stoyanr.evictor.EvictionQueue;
import com.stoyanr.evictor.map.EvictibleEntry;
import com.stoyanr.evictor.queue.NavigableMapEvictionQueue;
import com.stoyanr.evictor.queue.PriorityEvictionQueue;
import com.stoyanr.evictor.scheduler.RegularTaskEvictionScheduler;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.Delayed;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RegularTaskEvictionScheduler_ESTest extends RegularTaskEvictionScheduler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegularTaskEvictionScheduler<Integer, Callable<Integer>> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Integer, Callable<Integer>>();
      assertEquals(1L, RegularTaskEvictionScheduler.DEFAULT_DELAY);
      
      EvictibleEntry<Integer, Callable<Integer>> evictibleEntry0 = (EvictibleEntry<Integer, Callable<Integer>>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((long)1).when(evictibleEntry0).getEvictionTime();
      doReturn(true).when(evictibleEntry0).isEvictible();
      regularTaskEvictionScheduler0.scheduleEviction(evictibleEntry0);
      RegularTaskEvictionScheduler<Integer, Integer> regularTaskEvictionScheduler1 = new RegularTaskEvictionScheduler<Integer, Integer>();
      regularTaskEvictionScheduler1.onEvictEntries();
      ConcurrentSkipListMap<Long, EvictibleEntry<Long, Long>> concurrentSkipListMap0 = new ConcurrentSkipListMap<Long, EvictibleEntry<Long, Long>>();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      RegularTaskEvictionScheduler<Long, Long> regularTaskEvictionScheduler2 = new RegularTaskEvictionScheduler<Long, Long>(scheduledThreadPoolExecutor0, 1, regularTaskEvictionScheduler0.DEFAULT_TIME_UNIT);
      EvictibleEntry<Long, Long> evictibleEntry1 = (EvictibleEntry<Long, Long>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegularTaskEvictionScheduler<Integer, Callable<Integer>> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Integer, Callable<Integer>>();
      EvictibleEntry<Integer, Callable<Integer>> evictibleEntry0 = (EvictibleEntry<Integer, Callable<Integer>>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((long)1).when(evictibleEntry0).getEvictionTime();
      doReturn(true).when(evictibleEntry0).isEvictible();
      regularTaskEvictionScheduler0.scheduleEviction(evictibleEntry0);
      EvictibleEntry<Integer, Callable<Integer>> evictibleEntry1 = (EvictibleEntry<Integer, Callable<Integer>>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler0.onCancelEviction(evictibleEntry1);
      RegularTaskEvictionScheduler<Integer, Integer> regularTaskEvictionScheduler1 = new RegularTaskEvictionScheduler<Integer, Integer>();
      regularTaskEvictionScheduler1.onEvictEntries();
      ConcurrentSkipListMap<Long, EvictibleEntry<Long, Long>> concurrentSkipListMap0 = new ConcurrentSkipListMap<Long, EvictibleEntry<Long, Long>>();
      NavigableMapEvictionQueue<Long, Long> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Long, Long>();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      RegularTaskEvictionScheduler<Long, Long> regularTaskEvictionScheduler2 = new RegularTaskEvictionScheduler<Long, Long>();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedTransferQueue<EvictibleEntry<Integer, Callable<Delayed>>> linkedTransferQueue0 = new LinkedTransferQueue<EvictibleEntry<Integer, Callable<Delayed>>>();
      PriorityEvictionQueue<Integer, Callable<Delayed>> priorityEvictionQueue0 = new PriorityEvictionQueue<Integer, Callable<Delayed>>(linkedTransferQueue0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      EvictibleEntry<Integer, Callable<Delayed>> evictibleEntry0 = (EvictibleEntry<Integer, Callable<Delayed>>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      priorityEvictionQueue0.putEntry(evictibleEntry0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      EvictibleEntry<Integer, Callable<Delayed>> evictibleEntry1 = (EvictibleEntry<Integer, Callable<Delayed>>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      priorityEvictionQueue0.putEntry(evictibleEntry1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "eZ|+HKD;Gth)'vAJ)");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "", 498L);
      MockThread mockThread2 = new MockThread(mockThread1);
      threadPoolExecutor_DiscardOldestPolicy0.rejectedExecution(mockThread2, scheduledThreadPoolExecutor0);
      RegularTaskEvictionScheduler<Integer, Callable<Delayed>> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Integer, Callable<Delayed>>(priorityEvictionQueue0, scheduledThreadPoolExecutor0, 498L, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      scheduledThreadPoolExecutor0.purge();
      RegularTaskEvictionScheduler<Integer, Integer> regularTaskEvictionScheduler1 = null;
      try {
        regularTaskEvictionScheduler1 = new RegularTaskEvictionScheduler<Integer, Integer>(scheduledThreadPoolExecutor0, 0, timeUnit1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Delay cannot be less than or equal to zero
         //
         verifyException("com.stoyanr.evictor.scheduler.RegularTaskEvictionScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      RegularTaskEvictionScheduler<Integer, Integer> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Integer, Integer>(8L, timeUnit0);
      EvictibleEntry<Integer, Integer> evictibleEntry0 = (EvictibleEntry<Integer, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler0.onCancelEviction(evictibleEntry0);
      regularTaskEvictionScheduler0.hasScheduledEvictions();
      regularTaskEvictionScheduler0.shutdown();
      RegularTaskEvictionScheduler<Integer, Callable<Integer>> regularTaskEvictionScheduler1 = new RegularTaskEvictionScheduler<Integer, Callable<Integer>>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(517, threadFactory0);
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      RegularTaskEvictionScheduler<Callable<Integer>, Integer> regularTaskEvictionScheduler2 = null;
      try {
        regularTaskEvictionScheduler2 = new RegularTaskEvictionScheduler<Callable<Integer>, Integer>(scheduledThreadPoolExecutor0, 0L, timeUnit1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Delay cannot be less than or equal to zero
         //
         verifyException("com.stoyanr.evictor.scheduler.RegularTaskEvictionScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcurrentSkipListMap<Long, EvictibleEntry<EvictibleEntry<Integer, Integer>, EvictibleEntry<Integer, Integer>>> concurrentSkipListMap0 = new ConcurrentSkipListMap<Long, EvictibleEntry<EvictibleEntry<Integer, Integer>, EvictibleEntry<Integer, Integer>>>();
      NavigableMapEvictionQueue<EvictibleEntry<Integer, Integer>, EvictibleEntry<Integer, Integer>> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<EvictibleEntry<Integer, Integer>, EvictibleEntry<Integer, Integer>>(concurrentSkipListMap0);
      RegularTaskEvictionScheduler<EvictibleEntry<Integer, Integer>, EvictibleEntry<Integer, Integer>> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<EvictibleEntry<Integer, Integer>, EvictibleEntry<Integer, Integer>>(navigableMapEvictionQueue0);
      regularTaskEvictionScheduler0.hasScheduledEvictions();
      EvictibleEntry<EvictibleEntry<Integer, Integer>, EvictibleEntry<Integer, Integer>> evictibleEntry0 = (EvictibleEntry<EvictibleEntry<Integer, Integer>, EvictibleEntry<Integer, Integer>>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler0.onScheduleEviction(evictibleEntry0);
      navigableMapEvictionQueue0.getNextEvictionTime();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadPoolExecutor_DiscardOldestPolicy0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      RegularTaskEvictionScheduler<Delayed, Integer> regularTaskEvictionScheduler1 = new RegularTaskEvictionScheduler<Delayed, Integer>(scheduledThreadPoolExecutor0, 1L, timeUnit0);
      regularTaskEvictionScheduler1.onEvictEntries();
      EvictibleEntry<Delayed, Integer> evictibleEntry1 = (EvictibleEntry<Delayed, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler1.onScheduleEviction(evictibleEntry1);
      EvictibleEntry<Delayed, Integer> evictibleEntry2 = (EvictibleEntry<Delayed, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler1.onCancelEviction(evictibleEntry2);
      RegularTaskEvictionScheduler<Integer, Integer> regularTaskEvictionScheduler2 = new RegularTaskEvictionScheduler<Integer, Integer>();
      regularTaskEvictionScheduler2.shutdown();
      RegularTaskEvictionScheduler<Callable<Delayed>, Callable<Integer>> regularTaskEvictionScheduler3 = new RegularTaskEvictionScheduler<Callable<Delayed>, Callable<Integer>>();
      EvictibleEntry<EvictibleEntry<Integer, Integer>, EvictibleEntry<Integer, Integer>> evictibleEntry3 = (EvictibleEntry<EvictibleEntry<Integer, Integer>, EvictibleEntry<Integer, Integer>>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler0.onScheduleEviction(evictibleEntry3);
      EvictibleEntry<Callable<Delayed>, Callable<Integer>> evictibleEntry4 = (EvictibleEntry<Callable<Delayed>, Callable<Integer>>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      EvictibleEntry<Integer, Integer> evictibleEntry5 = (EvictibleEntry<Integer, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler2.onScheduleEviction(evictibleEntry5);
      regularTaskEvictionScheduler3.onCancelEviction(evictibleEntry4);
      regularTaskEvictionScheduler2.onCancelEviction((EvictibleEntry<Integer, Integer>) null);
      RegularTaskEvictionScheduler<Delayed, Callable<Integer>> regularTaskEvictionScheduler4 = new RegularTaskEvictionScheduler<Delayed, Callable<Integer>>(scheduledThreadPoolExecutor0, 1, regularTaskEvictionScheduler2.DEFAULT_TIME_UNIT);
      regularTaskEvictionScheduler4.shutdown();
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      RegularTaskEvictionScheduler<Integer, EvictibleEntry<Delayed, Delayed>> regularTaskEvictionScheduler5 = null;
      try {
        regularTaskEvictionScheduler5 = new RegularTaskEvictionScheduler<Integer, EvictibleEntry<Delayed, Delayed>>(scheduledThreadPoolExecutor0, 0L, timeUnit1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Delay cannot be less than or equal to zero
         //
         verifyException("com.stoyanr.evictor.scheduler.RegularTaskEvictionScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NavigableMapEvictionQueue<Delayed, Delayed> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Delayed, Delayed>();
      RegularTaskEvictionScheduler<Delayed, Delayed> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Delayed, Delayed>(navigableMapEvictionQueue0);
      EvictibleEntry<Delayed, Delayed> evictibleEntry0 = (EvictibleEntry<Delayed, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      navigableMapEvictionQueue0.evictEntries();
      regularTaskEvictionScheduler0.onScheduleEviction(evictibleEntry0);
      regularTaskEvictionScheduler0.onEvictEntries();
      RegularTaskEvictionScheduler<Delayed, Integer> regularTaskEvictionScheduler1 = new RegularTaskEvictionScheduler<Delayed, Integer>(1, regularTaskEvictionScheduler0.DEFAULT_TIME_UNIT);
      EvictibleEntry<Delayed, Integer> evictibleEntry1 = (EvictibleEntry<Delayed, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(evictibleEntry1).isEvictible();
      regularTaskEvictionScheduler1.shutdown();
      regularTaskEvictionScheduler1.scheduleEviction(evictibleEntry1);
      EvictibleEntry<Delayed, Integer> evictibleEntry2 = (EvictibleEntry<Delayed, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler1.onCancelEviction(evictibleEntry2);
      RegularTaskEvictionScheduler<Integer, Integer> regularTaskEvictionScheduler2 = new RegularTaskEvictionScheduler<Integer, Integer>();
      regularTaskEvictionScheduler2.shutdown();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ConcurrentSkipListMap<Long, EvictibleEntry<Callable<Integer>, Integer>> concurrentSkipListMap0 = new ConcurrentSkipListMap<Long, EvictibleEntry<Callable<Integer>, Integer>>(comparator0);
      NavigableMapEvictionQueue<Callable<Integer>, Integer> navigableMapEvictionQueue1 = new NavigableMapEvictionQueue<Callable<Integer>, Integer>(concurrentSkipListMap0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      scheduledThreadPoolExecutor0.allowsCoreThreadTimeOut();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      RegularTaskEvictionScheduler<Callable<Integer>, Integer> regularTaskEvictionScheduler3 = new RegularTaskEvictionScheduler<Callable<Integer>, Integer>(navigableMapEvictionQueue1, scheduledThreadPoolExecutor0, 1, timeUnit0);
      EvictibleEntry<Callable<Integer>, Integer> evictibleEntry3 = (EvictibleEntry<Callable<Integer>, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler3.onCancelEviction(evictibleEntry3);
      RegularTaskEvictionScheduler<Object, Integer> regularTaskEvictionScheduler4 = null;
      try {
        regularTaskEvictionScheduler4 = new RegularTaskEvictionScheduler<Object, Integer>((-343L), regularTaskEvictionScheduler3.DEFAULT_TIME_UNIT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Delay cannot be less than or equal to zero
         //
         verifyException("com.stoyanr.evictor.scheduler.RegularTaskEvictionScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      RegularTaskEvictionScheduler<Integer, Callable<Integer>> regularTaskEvictionScheduler0 = null;
      try {
        regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Integer, Callable<Integer>>((-2788L), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Delay cannot be less than or equal to zero
         //
         verifyException("com.stoyanr.evictor.scheduler.RegularTaskEvictionScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(656, threadPoolExecutor_DiscardPolicy0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      RegularTaskEvictionScheduler<Integer, Integer> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Integer, Integer>(scheduledThreadPoolExecutor0, 656, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      RegularTaskEvictionScheduler<Integer, Delayed> regularTaskEvictionScheduler1 = new RegularTaskEvictionScheduler<Integer, Delayed>(scheduledThreadPoolExecutor0, 1, timeUnit1);
      EvictibleEntry<Integer, Delayed> evictibleEntry0 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler1.onCancelEviction(evictibleEntry0);
      LinkedBlockingQueue<EvictibleEntry<Callable<Integer>, Delayed>> linkedBlockingQueue0 = new LinkedBlockingQueue<EvictibleEntry<Callable<Integer>, Delayed>>();
      PriorityEvictionQueue<Callable<Integer>, Delayed> priorityEvictionQueue0 = new PriorityEvictionQueue<Callable<Integer>, Delayed>(linkedBlockingQueue0);
      TimeUnit timeUnit2 = TimeUnit.MILLISECONDS;
      RegularTaskEvictionScheduler<Callable<Integer>, Delayed> regularTaskEvictionScheduler2 = null;
      try {
        regularTaskEvictionScheduler2 = new RegularTaskEvictionScheduler<Callable<Integer>, Delayed>(priorityEvictionQueue0, scheduledThreadPoolExecutor0, (-2108L), timeUnit2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Delay cannot be less than or equal to zero
         //
         verifyException("com.stoyanr.evictor.scheduler.RegularTaskEvictionScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      RegularTaskEvictionScheduler<Callable<Integer>, Delayed> regularTaskEvictionScheduler0 = null;
      try {
        regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Callable<Integer>, Delayed>((ScheduledExecutorService) null, 1L, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ScheduledExecutorService instance cannot be null
         //
         verifyException("com.stoyanr.evictor.scheduler.RegularTaskEvictionScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScheduledExecutorService scheduledExecutorService0 = null;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      RegularTaskEvictionScheduler<EvictibleEntry<Integer, Delayed>, EvictibleEntry<Integer, Integer>> regularTaskEvictionScheduler0 = null;
      try {
        regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<EvictibleEntry<Integer, Delayed>, EvictibleEntry<Integer, Integer>>((ScheduledExecutorService) null, 449L, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ScheduledExecutorService instance cannot be null
         //
         verifyException("com.stoyanr.evictor.scheduler.RegularTaskEvictionScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegularTaskEvictionScheduler<Integer, Integer> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Integer, Integer>();
      regularTaskEvictionScheduler0.shutdown();
      EvictibleEntry<Integer, Integer> evictibleEntry0 = (EvictibleEntry<Integer, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler0.onScheduleEviction(evictibleEntry0);
      EvictibleEntry<Integer, Integer> evictibleEntry1 = (EvictibleEntry<Integer, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(evictibleEntry1).getEvictionTime();
      doReturn(true).when(evictibleEntry1).isEvictible();
      regularTaskEvictionScheduler0.cancelEviction(evictibleEntry1);
      RegularTaskEvictionScheduler<Callable<Delayed>, Delayed> regularTaskEvictionScheduler1 = null;
      try {
        regularTaskEvictionScheduler1 = new RegularTaskEvictionScheduler<Callable<Delayed>, Delayed>((EvictionQueue<Callable<Delayed>, Delayed>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Queue cannot be null
         //
         verifyException("com.stoyanr.evictor.scheduler.AbstractQueueEvictionScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegularTaskEvictionScheduler<Callable<Integer>, Integer> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Callable<Integer>, Integer>();
      RegularTaskEvictionScheduler<Delayed, Callable<Integer>> regularTaskEvictionScheduler1 = new RegularTaskEvictionScheduler<Delayed, Callable<Integer>>();
      regularTaskEvictionScheduler1.onEvictEntries();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread((ThreadGroup) null, thread0);
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, "o&Iun{O?MC(TDO1Y");
      scheduledThreadPoolExecutor0.schedule((Runnable) mockThread1, 3176L, timeUnit0);
      RegularTaskEvictionScheduler<Integer, Integer> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Integer, Integer>(scheduledThreadPoolExecutor0, 3263L, timeUnit0);
      EvictibleEntry<Integer, Integer> evictibleEntry0 = (EvictibleEntry<Integer, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler0.onScheduleEviction(evictibleEntry0);
      RegularTaskEvictionScheduler<Delayed, Delayed> regularTaskEvictionScheduler1 = new RegularTaskEvictionScheduler<Delayed, Delayed>();
      regularTaskEvictionScheduler1.onEvictEntries();
      RegularTaskEvictionScheduler<Callable<Integer>, Integer> regularTaskEvictionScheduler2 = new RegularTaskEvictionScheduler<Callable<Integer>, Integer>();
      regularTaskEvictionScheduler2.onEvictEntries();
      regularTaskEvictionScheduler1.onScheduleEviction((EvictibleEntry<Delayed, Delayed>) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegularTaskEvictionScheduler<EvictibleEntry<Integer, Integer>, Delayed> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<EvictibleEntry<Integer, Integer>, Delayed>();
      regularTaskEvictionScheduler0.shutdown();
      regularTaskEvictionScheduler0.shutdown();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      RegularTaskEvictionScheduler<Integer, Callable<Integer>> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Integer, Callable<Integer>>(449L, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegularTaskEvictionScheduler<EvictibleEntry<Integer, Delayed>, EvictibleEntry<Integer, Integer>> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<EvictibleEntry<Integer, Delayed>, EvictibleEntry<Integer, Integer>>();
      EvictibleEntry<EvictibleEntry<Integer, Delayed>, EvictibleEntry<Integer, Integer>> evictibleEntry0 = (EvictibleEntry<EvictibleEntry<Integer, Delayed>, EvictibleEntry<Integer, Integer>>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler0.onScheduleEviction(evictibleEntry0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      RegularTaskEvictionScheduler<Integer, Integer> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Integer, Integer>(1L, timeUnit0);
      EvictibleEntry<Integer, Integer> evictibleEntry0 = (EvictibleEntry<Integer, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler0.onCancelEviction(evictibleEntry0);
      regularTaskEvictionScheduler0.hasScheduledEvictions();
      regularTaskEvictionScheduler0.shutdown();
      RegularTaskEvictionScheduler<Integer, Callable<Integer>> regularTaskEvictionScheduler1 = new RegularTaskEvictionScheduler<Integer, Callable<Integer>>();
      EvictibleEntry<Integer, Callable<Integer>> evictibleEntry1 = (EvictibleEntry<Integer, Callable<Integer>>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler1.onScheduleEviction(evictibleEntry1);
      // Undeclared exception!
      try { 
        regularTaskEvictionScheduler1.cancelEviction((EvictibleEntry<Integer, Callable<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.stoyanr.evictor.scheduler.AbstractQueueEvictionScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConcurrentSkipListMap<Long, EvictibleEntry<Integer, Delayed>> concurrentSkipListMap0 = new ConcurrentSkipListMap<Long, EvictibleEntry<Integer, Delayed>>();
      NavigableMapEvictionQueue<Integer, Delayed> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Integer, Delayed>(concurrentSkipListMap0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      RegularTaskEvictionScheduler<Integer, Delayed> regularTaskEvictionScheduler0 = null;
      try {
        regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Integer, Delayed>(navigableMapEvictionQueue0, scheduledThreadPoolExecutor0, 0, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Delay cannot be less than or equal to zero
         //
         verifyException("com.stoyanr.evictor.scheduler.RegularTaskEvictionScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegularTaskEvictionScheduler<Integer, Callable<Integer>> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Integer, Callable<Integer>>();
      EvictibleEntry<Integer, Callable<Integer>> evictibleEntry0 = (EvictibleEntry<Integer, Callable<Integer>>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(evictibleEntry0).getEvictionTime();
      doReturn(true).when(evictibleEntry0).isEvictible();
      regularTaskEvictionScheduler0.scheduleEviction(evictibleEntry0);
      EvictibleEntry<Integer, Callable<Integer>> evictibleEntry1 = (EvictibleEntry<Integer, Callable<Integer>>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler0.onCancelEviction(evictibleEntry1);
      RegularTaskEvictionScheduler<Integer, Integer> regularTaskEvictionScheduler1 = new RegularTaskEvictionScheduler<Integer, Integer>();
      regularTaskEvictionScheduler1.onEvictEntries();
      ConcurrentSkipListMap<Long, EvictibleEntry<Long, Long>> concurrentSkipListMap0 = new ConcurrentSkipListMap<Long, EvictibleEntry<Long, Long>>();
      NavigableMapEvictionQueue<Long, Long> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Long, Long>(concurrentSkipListMap0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      RegularTaskEvictionScheduler<Long, Long> regularTaskEvictionScheduler2 = new RegularTaskEvictionScheduler<Long, Long>(navigableMapEvictionQueue0, scheduledThreadPoolExecutor0, 1L, timeUnit0);
      assertEquals(1L, RegularTaskEvictionScheduler.DEFAULT_DELAY);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      RegularTaskEvictionScheduler<Integer, Callable<Integer>> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Integer, Callable<Integer>>(1073741824, timeUnit0);
      ArrayDeque<EvictibleEntry<Callable<Object>, Callable<Integer>>> arrayDeque0 = new ArrayDeque<EvictibleEntry<Callable<Object>, Callable<Integer>>>();
      PriorityEvictionQueue<Callable<Object>, Callable<Integer>> priorityEvictionQueue0 = new PriorityEvictionQueue<Callable<Object>, Callable<Integer>>(arrayDeque0);
      priorityEvictionQueue0.getNextEvictionTime();
      RegularTaskEvictionScheduler<Callable<Object>, Callable<Integer>> regularTaskEvictionScheduler1 = new RegularTaskEvictionScheduler<Callable<Object>, Callable<Integer>>(priorityEvictionQueue0);
      regularTaskEvictionScheduler1.onEvictEntries();
      assertEquals(1, RegularTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NavigableMapEvictionQueue<Callable<Integer>, Callable<Integer>> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Callable<Integer>, Callable<Integer>>();
      navigableMapEvictionQueue0.getNextEvictionTime();
      navigableMapEvictionQueue0.evictEntries();
      navigableMapEvictionQueue0.getNextEvictionTime();
      navigableMapEvictionQueue0.getNextEvictionTime();
      RegularTaskEvictionScheduler<Callable<Integer>, Callable<Integer>> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Callable<Integer>, Callable<Integer>>(navigableMapEvictionQueue0);
      RegularTaskEvictionScheduler<Callable<Integer>, Integer> regularTaskEvictionScheduler1 = new RegularTaskEvictionScheduler<Callable<Integer>, Integer>();
      EvictibleEntry<Callable<Integer>, Integer> evictibleEntry0 = (EvictibleEntry<Callable<Integer>, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler1.onCancelEviction(evictibleEntry0);
      RegularTaskEvictionScheduler<Integer, Delayed> regularTaskEvictionScheduler2 = new RegularTaskEvictionScheduler<Integer, Delayed>();
      EvictibleEntry<Integer, Delayed> evictibleEntry1 = (EvictibleEntry<Integer, Delayed>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler2.onCancelEviction(evictibleEntry1);
      RegularTaskEvictionScheduler<Delayed, Integer> regularTaskEvictionScheduler3 = new RegularTaskEvictionScheduler<Delayed, Integer>();
      EvictibleEntry<Delayed, Integer> evictibleEntry2 = (EvictibleEntry<Delayed, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler3.onCancelEviction(evictibleEntry2);
      ConcurrentSkipListMap<Long, EvictibleEntry<Integer, Integer>> concurrentSkipListMap0 = new ConcurrentSkipListMap<Long, EvictibleEntry<Integer, Integer>>();
      NavigableMapEvictionQueue<Integer, Integer> navigableMapEvictionQueue1 = new NavigableMapEvictionQueue<Integer, Integer>(concurrentSkipListMap0);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      navigableMapEvictionQueue1.hasEntries();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, (ThreadFactory) null, threadPoolExecutor_DiscardOldestPolicy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(681);
      LinkedList<EvictibleEntry<Long, Long>> linkedList0 = new LinkedList<EvictibleEntry<Long, Long>>();
      PriorityEvictionQueue<Long, Long> priorityEvictionQueue0 = new PriorityEvictionQueue<Long, Long>(linkedList0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      RegularTaskEvictionScheduler<Long, Long> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Long, Long>(priorityEvictionQueue0, scheduledThreadPoolExecutor0, 681, timeUnit0);
      EvictibleEntry<Long, Long> evictibleEntry0 = (EvictibleEntry<Long, Long>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      regularTaskEvictionScheduler0.onCancelEviction(evictibleEntry0);
      assertEquals(1, RegularTaskEvictionScheduler.DEFAULT_THREAD_POOL_SIZE);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3669, threadFactory0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      RegularTaskEvictionScheduler<Integer, Integer> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Integer, Integer>(scheduledThreadPoolExecutor0, 1L, timeUnit0);
      assertEquals(1L, RegularTaskEvictionScheduler.DEFAULT_DELAY);
  }
}
