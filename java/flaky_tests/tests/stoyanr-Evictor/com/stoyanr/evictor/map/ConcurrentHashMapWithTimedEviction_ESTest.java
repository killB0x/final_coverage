/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 11:32:30 GMT 2022
 */

package com.stoyanr.evictor.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.stoyanr.evictor.map.ConcurrentHashMapWithTimedEviction;
import com.stoyanr.evictor.map.EvictibleEntry;
import com.stoyanr.evictor.scheduler.DelayedTaskEvictionScheduler;
import com.stoyanr.evictor.scheduler.ExecutorServiceEvictionScheduler;
import com.stoyanr.evictor.scheduler.RegularTaskEvictionScheduler;
import java.util.concurrent.Delayed;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConcurrentHashMapWithTimedEviction_ESTest extends ConcurrentHashMapWithTimedEviction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExecutorServiceEvictionScheduler<Integer, Integer> executorServiceEvictionScheduler0 = new ExecutorServiceEvictionScheduler<Integer, Integer>();
      ConcurrentHashMapWithTimedEviction<Integer, Integer> concurrentHashMapWithTimedEviction0 = new ConcurrentHashMapWithTimedEviction<Integer, Integer>(0, 560, executorServiceEvictionScheduler0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      ExecutorServiceEvictionScheduler<EvictibleEntry<Integer, Integer>, EvictibleEntry<Integer, Integer>> executorServiceEvictionScheduler0 = new ExecutorServiceEvictionScheduler<EvictibleEntry<Integer, Integer>, EvictibleEntry<Integer, Integer>>(scheduledThreadPoolExecutor0);
      ConcurrentHashMapWithTimedEviction<EvictibleEntry<Integer, Integer>, EvictibleEntry<Integer, Integer>> concurrentHashMapWithTimedEviction0 = new ConcurrentHashMapWithTimedEviction<EvictibleEntry<Integer, Integer>, EvictibleEntry<Integer, Integer>>(1, 2293.441F, 1, executorServiceEvictionScheduler0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExecutorServiceEvictionScheduler<Integer, EvictibleEntry<Delayed, Integer>> executorServiceEvictionScheduler0 = new ExecutorServiceEvictionScheduler<Integer, EvictibleEntry<Delayed, Integer>>();
      ConcurrentHashMapWithTimedEviction<Integer, EvictibleEntry<Delayed, Integer>> concurrentHashMapWithTimedEviction0 = new ConcurrentHashMapWithTimedEviction<Integer, EvictibleEntry<Delayed, Integer>>(0, executorServiceEvictionScheduler0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_CallerRunsPolicy0);
      DelayedTaskEvictionScheduler<Integer, Integer> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Integer, Integer>(scheduledThreadPoolExecutor0);
      ConcurrentHashMapWithTimedEviction<Integer, Integer> concurrentHashMapWithTimedEviction0 = null;
      try {
        concurrentHashMapWithTimedEviction0 = new ConcurrentHashMapWithTimedEviction<Integer, Integer>(0, 1640, (-668), delayedTaskEvictionScheduler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcurrentHashMapWithTimedEviction<Integer, Integer> concurrentHashMapWithTimedEviction0 = null;
      try {
        concurrentHashMapWithTimedEviction0 = new ConcurrentHashMapWithTimedEviction<Integer, Integer>(772, (-1.0F), (-988));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConcurrentHashMapWithTimedEviction<Integer, Delayed> concurrentHashMapWithTimedEviction0 = null;
      try {
        concurrentHashMapWithTimedEviction0 = new ConcurrentHashMapWithTimedEviction<Integer, Delayed>((-333), 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConcurrentHashMapWithTimedEviction<Integer, Integer> concurrentHashMapWithTimedEviction0 = null;
      try {
        concurrentHashMapWithTimedEviction0 = new ConcurrentHashMapWithTimedEviction<Integer, Integer>((-1559));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConcurrentHashMapWithTimedEviction<EvictibleEntry<Integer, Delayed>, Delayed> concurrentHashMapWithTimedEviction0 = new ConcurrentHashMapWithTimedEviction<EvictibleEntry<Integer, Delayed>, Delayed>();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_CallerRunsPolicy0);
      DelayedTaskEvictionScheduler<Integer, Integer> delayedTaskEvictionScheduler0 = new DelayedTaskEvictionScheduler<Integer, Integer>(scheduledThreadPoolExecutor0);
      ConcurrentHashMapWithTimedEviction<Integer, Integer> concurrentHashMapWithTimedEviction0 = new ConcurrentHashMapWithTimedEviction<Integer, Integer>(delayedTaskEvictionScheduler0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConcurrentHashMapWithTimedEviction<Integer, Integer> concurrentHashMapWithTimedEviction0 = new ConcurrentHashMapWithTimedEviction<Integer, Integer>(0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcurrentHashMapWithTimedEviction<EvictibleEntry<Integer, Delayed>, Integer> concurrentHashMapWithTimedEviction0 = new ConcurrentHashMapWithTimedEviction<EvictibleEntry<Integer, Delayed>, Integer>(1985, 1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_CallerRunsPolicy0);
      RegularTaskEvictionScheduler<Integer, Integer> regularTaskEvictionScheduler0 = new RegularTaskEvictionScheduler<Integer, Integer>();
      RegularTaskEvictionScheduler<Delayed, Delayed> regularTaskEvictionScheduler1 = new RegularTaskEvictionScheduler<Delayed, Delayed>(scheduledThreadPoolExecutor0, 1, regularTaskEvictionScheduler0.DEFAULT_TIME_UNIT);
      ConcurrentHashMapWithTimedEviction<Delayed, Delayed> concurrentHashMapWithTimedEviction0 = null;
      try {
        concurrentHashMapWithTimedEviction0 = new ConcurrentHashMapWithTimedEviction<Delayed, Delayed>((-413), 0.0F, regularTaskEvictionScheduler1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConcurrentHashMapWithTimedEviction<Delayed, Delayed> concurrentHashMapWithTimedEviction0 = new ConcurrentHashMapWithTimedEviction<Delayed, Delayed>(3578, 3578, 3578);
  }
}
