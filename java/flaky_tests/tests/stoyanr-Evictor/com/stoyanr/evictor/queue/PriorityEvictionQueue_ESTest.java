/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 11:23:14 GMT 2022
 */

package com.stoyanr.evictor.queue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.stoyanr.evictor.map.EvictibleEntry;
import com.stoyanr.evictor.queue.PriorityEvictionQueue;
import java.util.ArrayDeque;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PriorityEvictionQueue_ESTest extends PriorityEvictionQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PriorityEvictionQueue<EvictibleEntry<Integer, Integer>, Integer> priorityEvictionQueue0 = new PriorityEvictionQueue<EvictibleEntry<Integer, Integer>, Integer>(1796);
      EvictibleEntry<EvictibleEntry<Integer, Integer>, Integer> evictibleEntry0 = (EvictibleEntry<EvictibleEntry<Integer, Integer>, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn(1392409281320021L).when(evictibleEntry0).getEvictionTime();
      priorityEvictionQueue0.putEntry(evictibleEntry0);
      boolean boolean0 = priorityEvictionQueue0.evictEntries();
      assertEquals(1392409281320021L, priorityEvictionQueue0.getNextEvictionTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<EvictibleEntry<Integer, Integer>> linkedList0 = new LinkedList<EvictibleEntry<Integer, Integer>>();
      linkedList0.add((EvictibleEntry<Integer, Integer>) null);
      PriorityEvictionQueue<Integer, Integer> priorityEvictionQueue0 = new PriorityEvictionQueue<Integer, Integer>(linkedList0);
      long long0 = priorityEvictionQueue0.getNextEvictionTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<EvictibleEntry<Integer, Integer>> linkedList0 = new LinkedList<EvictibleEntry<Integer, Integer>>();
      PriorityEvictionQueue<Integer, Integer> priorityEvictionQueue0 = new PriorityEvictionQueue<Integer, Integer>(linkedList0);
      priorityEvictionQueue0.putEntry((EvictibleEntry<Integer, Integer>) null);
      boolean boolean0 = priorityEvictionQueue0.evictEntries();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PriorityEvictionQueue<Integer, Object> priorityEvictionQueue0 = new PriorityEvictionQueue<Integer, Object>(4877);
      EvictibleEntry<Integer, Object> evictibleEntry0 = (EvictibleEntry<Integer, Object>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((long)4877).when(evictibleEntry0).getEvictionTime();
      priorityEvictionQueue0.putEntry(evictibleEntry0);
      long long0 = priorityEvictionQueue0.getNextEvictionTime();
      assertEquals(4877L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PriorityQueue<EvictibleEntry<Integer, Integer>> priorityQueue0 = new PriorityQueue<EvictibleEntry<Integer, Integer>>();
      PriorityEvictionQueue<Integer, Integer> priorityEvictionQueue0 = new PriorityEvictionQueue<Integer, Integer>(priorityQueue0);
      // Undeclared exception!
      try { 
        priorityEvictionQueue0.putEntry((EvictibleEntry<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PriorityQueue<EvictibleEntry<Integer, Object>> priorityQueue0 = new PriorityQueue<EvictibleEntry<Integer, Object>>();
      PriorityEvictionQueue<Integer, Object> priorityEvictionQueue0 = new PriorityEvictionQueue<Integer, Object>(priorityQueue0);
      EvictibleEntry<Integer, Object> evictibleEntry0 = (EvictibleEntry<Integer, Object>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        priorityEvictionQueue0.putEntry(evictibleEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.stoyanr.evictor.map.EvictibleEntry$MockitoMock$1335242269 cannot be cast to class java.lang.Comparable (com.stoyanr.evictor.map.EvictibleEntry$MockitoMock$1335242269 is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @167f77f0; java.lang.Comparable is in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PriorityEvictionQueue<Integer, Comparable<Integer>> priorityEvictionQueue0 = new PriorityEvictionQueue<Integer, Comparable<Integer>>(2146459573);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PriorityEvictionQueue<Integer, Integer> priorityEvictionQueue0 = null;
      try {
        priorityEvictionQueue0 = new PriorityEvictionQueue<Integer, Integer>(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.PriorityBlockingQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PriorityEvictionQueue<Integer, Object> priorityEvictionQueue0 = new PriorityEvictionQueue<Integer, Object>(4876);
      EvictibleEntry<Integer, Object> evictibleEntry0 = (EvictibleEntry<Integer, Object>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((long)4876).when(evictibleEntry0).getEvictionTime();
      priorityEvictionQueue0.putEntry(evictibleEntry0);
      EvictibleEntry<Integer, Object> evictibleEntry1 = (EvictibleEntry<Integer, Object>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(evictibleEntry1).getEvictionTime();
      priorityEvictionQueue0.putEntry(evictibleEntry1);
      assertEquals(0L, priorityEvictionQueue0.getNextEvictionTime());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PriorityEvictionQueue.EvictibleEntryComparator<Comparable<Object>, Object> priorityEvictionQueue_EvictibleEntryComparator0 = new PriorityEvictionQueue.EvictibleEntryComparator<Comparable<Object>, Object>();
      EvictibleEntry<Comparable<Object>, Object> evictibleEntry0 = (EvictibleEntry<Comparable<Object>, Object>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((long)4877, (-1L)).when(evictibleEntry0).getEvictionTime();
      int int0 = priorityEvictionQueue_EvictibleEntryComparator0.compare(evictibleEntry0, evictibleEntry0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PriorityEvictionQueue.EvictibleEntryComparator<Integer, EvictibleEntry<Integer, Integer>> priorityEvictionQueue_EvictibleEntryComparator0 = new PriorityEvictionQueue.EvictibleEntryComparator<Integer, EvictibleEntry<Integer, Integer>>();
      EvictibleEntry<Integer, EvictibleEntry<Integer, Integer>> evictibleEntry0 = (EvictibleEntry<Integer, EvictibleEntry<Integer, Integer>>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(evictibleEntry0).getEvictionTime();
      int int0 = priorityEvictionQueue_EvictibleEntryComparator0.compare(evictibleEntry0, evictibleEntry0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PriorityEvictionQueue<EvictibleEntry<Integer, Integer>, Integer> priorityEvictionQueue0 = new PriorityEvictionQueue<EvictibleEntry<Integer, Integer>, Integer>(1796);
      EvictibleEntry<EvictibleEntry<Integer, Integer>, Integer> evictibleEntry0 = (EvictibleEntry<EvictibleEntry<Integer, Integer>, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn(1392409281320000L).when(evictibleEntry0).getEvictionTime();
      priorityEvictionQueue0.putEntry(evictibleEntry0);
      boolean boolean0 = priorityEvictionQueue0.evictEntries();
      assertEquals(1392409281320000L, priorityEvictionQueue0.getNextEvictionTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayDeque<EvictibleEntry<Integer, Integer>> arrayDeque0 = new ArrayDeque<EvictibleEntry<Integer, Integer>>();
      EvictibleEntry<Integer, Integer> evictibleEntry0 = (EvictibleEntry<Integer, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((-847L)).when(evictibleEntry0).getEvictionTime();
      arrayDeque0.add(evictibleEntry0);
      PriorityEvictionQueue<Integer, Integer> priorityEvictionQueue0 = new PriorityEvictionQueue<Integer, Integer>(arrayDeque0);
      boolean boolean0 = priorityEvictionQueue0.evictEntries();
      assertFalse(arrayDeque0.contains(evictibleEntry0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PriorityEvictionQueue<EvictibleEntry<Integer, Integer>, Integer> priorityEvictionQueue0 = new PriorityEvictionQueue<EvictibleEntry<Integer, Integer>, Integer>(1796);
      long long0 = priorityEvictionQueue0.getNextEvictionTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayDeque<EvictibleEntry<Integer, Integer>> arrayDeque0 = new ArrayDeque<EvictibleEntry<Integer, Integer>>();
      EvictibleEntry<Integer, Integer> evictibleEntry0 = (EvictibleEntry<Integer, Integer>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((-847L)).when(evictibleEntry0).getEvictionTime();
      arrayDeque0.add(evictibleEntry0);
      PriorityEvictionQueue<Integer, Integer> priorityEvictionQueue0 = new PriorityEvictionQueue<Integer, Integer>(arrayDeque0);
      long long0 = priorityEvictionQueue0.getNextEvictionTime();
      assertEquals((-847L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PriorityQueue<EvictibleEntry<Object, EvictibleEntry<Object, Integer>>> priorityQueue0 = new PriorityQueue<EvictibleEntry<Object, EvictibleEntry<Object, Integer>>>();
      PriorityEvictionQueue<Object, EvictibleEntry<Object, Integer>> priorityEvictionQueue0 = new PriorityEvictionQueue<Object, EvictibleEntry<Object, Integer>>(priorityQueue0);
      boolean boolean0 = priorityEvictionQueue0.hasEntries();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PriorityEvictionQueue<Integer, Object> priorityEvictionQueue0 = new PriorityEvictionQueue<Integer, Object>(4877);
      assertFalse(priorityEvictionQueue0.hasEntries());
      
      EvictibleEntry<Integer, Object> evictibleEntry0 = (EvictibleEntry<Integer, Object>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      priorityEvictionQueue0.putEntry(evictibleEntry0);
      boolean boolean0 = priorityEvictionQueue0.hasEntries();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PriorityEvictionQueue<EvictibleEntry<Integer, Integer>, Integer> priorityEvictionQueue0 = null;
      try {
        priorityEvictionQueue0 = new PriorityEvictionQueue<EvictibleEntry<Integer, Integer>, Integer>((Queue<EvictibleEntry<EvictibleEntry<Integer, Integer>, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Queue instance cannot be null
         //
         verifyException("com.stoyanr.evictor.queue.PriorityEvictionQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PriorityEvictionQueue<Integer, Comparable<Object>> priorityEvictionQueue0 = new PriorityEvictionQueue<Integer, Comparable<Object>>(2474);
      priorityEvictionQueue0.removeEntry((EvictibleEntry<Integer, Comparable<Object>>) null);
      assertEquals(0L, priorityEvictionQueue0.getNextEvictionTime());
  }
}
