/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 11:27:25 GMT 2022
 */

package com.stoyanr.evictor.queue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.stoyanr.evictor.map.EvictibleEntry;
import com.stoyanr.evictor.queue.NavigableMapEvictionQueue;
import java.util.concurrent.ConcurrentNavigableMap;
import java.util.concurrent.ConcurrentSkipListMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NavigableMapEvictionQueue_ESTest extends NavigableMapEvictionQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConcurrentSkipListMap<Long, EvictibleEntry<EvictibleEntry<Long, Long>, EvictibleEntry<Long, Long>>> concurrentSkipListMap0 = new ConcurrentSkipListMap<Long, EvictibleEntry<EvictibleEntry<Long, Long>, EvictibleEntry<Long, Long>>>();
      Long long0 = Long.getLong("", 771L);
      EvictibleEntry<EvictibleEntry<Long, Long>, EvictibleEntry<Long, Long>> evictibleEntry0 = (EvictibleEntry<EvictibleEntry<Long, Long>, EvictibleEntry<Long, Long>>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      concurrentSkipListMap0.put(long0, evictibleEntry0);
      NavigableMapEvictionQueue<EvictibleEntry<Long, Long>, EvictibleEntry<Long, Long>> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<EvictibleEntry<Long, Long>, EvictibleEntry<Long, Long>>(concurrentSkipListMap0);
      long long1 = navigableMapEvictionQueue0.getNextEvictionTime();
      assertEquals(771L, long1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NavigableMapEvictionQueue<EvictibleEntry<Long, Long>, Long> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<EvictibleEntry<Long, Long>, Long>();
      // Undeclared exception!
      try { 
        navigableMapEvictionQueue0.removeEntry((EvictibleEntry<EvictibleEntry<Long, Long>, Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.stoyanr.evictor.queue.NavigableMapEvictionQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NavigableMapEvictionQueue<EvictibleEntry<Long, Long>, Long> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<EvictibleEntry<Long, Long>, Long>();
      // Undeclared exception!
      try { 
        navigableMapEvictionQueue0.putEntry((EvictibleEntry<EvictibleEntry<Long, Long>, Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.stoyanr.evictor.queue.NavigableMapEvictionQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcurrentSkipListMap<Long, EvictibleEntry<Long, Long>> concurrentSkipListMap0 = new ConcurrentSkipListMap<Long, EvictibleEntry<Long, Long>>();
      Long long0 = new Long((-2354L));
      ConcurrentNavigableMap<Long, EvictibleEntry<Long, Long>> concurrentNavigableMap0 = concurrentSkipListMap0.headMap(long0);
      NavigableMapEvictionQueue<Long, Long> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Long, Long>(concurrentNavigableMap0);
      EvictibleEntry<Long, Long> evictibleEntry0 = (EvictibleEntry<Long, Long>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(evictibleEntry0).getEvictionTime();
      // Undeclared exception!
      try { 
        navigableMapEvictionQueue0.putEntry(evictibleEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key out of range
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap$SubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcurrentSkipListMap<Long, EvictibleEntry<Long, Long>> concurrentSkipListMap0 = new ConcurrentSkipListMap<Long, EvictibleEntry<Long, Long>>();
      Long long0 = new Long(12L);
      ConcurrentNavigableMap<Long, EvictibleEntry<Long, Long>> concurrentNavigableMap0 = concurrentSkipListMap0.headMap(long0);
      NavigableMapEvictionQueue<Long, Long> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Long, Long>(concurrentNavigableMap0);
      // Undeclared exception!
      try { 
        navigableMapEvictionQueue0.evictEntries();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key out of range
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap$SubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NavigableMapEvictionQueue<Long, EvictibleEntry<Long, Long>> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Long, EvictibleEntry<Long, Long>>();
      EvictibleEntry<Long, EvictibleEntry<Long, Long>> evictibleEntry0 = (EvictibleEntry<Long, EvictibleEntry<Long, Long>>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((-2515L)).when(evictibleEntry0).getEvictionTime();
      navigableMapEvictionQueue0.putEntry(evictibleEntry0);
      boolean boolean0 = navigableMapEvictionQueue0.evictEntries();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NavigableMapEvictionQueue<Long, EvictibleEntry<Long, Long>> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Long, EvictibleEntry<Long, Long>>();
      boolean boolean0 = navigableMapEvictionQueue0.evictEntries();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NavigableMapEvictionQueue<Long, Long> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Long, Long>();
      EvictibleEntry<Long, Long> evictibleEntry0 = (EvictibleEntry<Long, Long>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((-2515L)).when(evictibleEntry0).getEvictionTime();
      navigableMapEvictionQueue0.putEntry(evictibleEntry0);
      long long0 = navigableMapEvictionQueue0.getNextEvictionTime();
      assertEquals((-2515L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NavigableMapEvictionQueue<EvictibleEntry<Long, Long>, EvictibleEntry<Long, Long>> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<EvictibleEntry<Long, Long>, EvictibleEntry<Long, Long>>();
      long long0 = navigableMapEvictionQueue0.getNextEvictionTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NavigableMapEvictionQueue<Long, Long> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Long, Long>();
      boolean boolean0 = navigableMapEvictionQueue0.hasEntries();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NavigableMapEvictionQueue<Long, Long> navigableMapEvictionQueue0 = null;
      try {
        navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Long, Long>((ConcurrentNavigableMap<Long, EvictibleEntry<Long, Long>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map instnace cannot be null
         //
         verifyException("com.stoyanr.evictor.queue.NavigableMapEvictionQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NavigableMapEvictionQueue<EvictibleEntry<Long, Long>, EvictibleEntry<Long, Long>> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<EvictibleEntry<Long, Long>, EvictibleEntry<Long, Long>>();
      EvictibleEntry<EvictibleEntry<Long, Long>, EvictibleEntry<Long, Long>> evictibleEntry0 = (EvictibleEntry<EvictibleEntry<Long, Long>, EvictibleEntry<Long, Long>>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((-2758L)).when(evictibleEntry0).getEvictionTime();
      navigableMapEvictionQueue0.removeEntry(evictibleEntry0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NavigableMapEvictionQueue<Long, Long> navigableMapEvictionQueue0 = new NavigableMapEvictionQueue<Long, Long>();
      EvictibleEntry<Long, Long> evictibleEntry0 = (EvictibleEntry<Long, Long>) mock(EvictibleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((-2515L)).when(evictibleEntry0).getEvictionTime();
      navigableMapEvictionQueue0.putEntry(evictibleEntry0);
      boolean boolean0 = navigableMapEvictionQueue0.hasEntries();
      assertTrue(boolean0);
  }
}
