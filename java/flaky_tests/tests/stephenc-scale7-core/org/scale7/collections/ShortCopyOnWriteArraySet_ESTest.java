/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 11:09:26 GMT 2022
 */

package org.scale7.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.scale7.collections.ShortCopyOnWriteArraySet;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShortCopyOnWriteArraySet_ESTest extends ShortCopyOnWriteArraySet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      short[] shortArray0 = new short[4];
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet(shortArray0);
      short[] shortArray1 = shortCopyOnWriteArraySet0.toArray();
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet();
      // Undeclared exception!
      try { 
        shortCopyOnWriteArraySet0.set((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scale7.collections.ShortCopyOnWriteArraySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      short[] shortArray0 = new short[7];
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet(shortArray0);
      // Undeclared exception!
      try { 
        shortCopyOnWriteArraySet0.remove((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scale7.collections.ShortCopyOnWriteArraySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      short[] shortArray0 = new short[8];
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet(shortArray0);
      short[] shortArray1 = new short[4];
      shortCopyOnWriteArraySet0.set(shortArray1);
      // Undeclared exception!
      try { 
        shortCopyOnWriteArraySet0.remove(shortArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -4
         //
         verifyException("org.scale7.collections.ShortCopyOnWriteArraySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = new short[2];
      shortArray1[1] = (short)1941;
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet(shortArray1);
      // Undeclared exception!
      try { 
        shortCopyOnWriteArraySet0.remove(shortArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.scale7.collections.ShortCopyOnWriteArraySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet();
      // Undeclared exception!
      try { 
        shortCopyOnWriteArraySet0.add((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scale7.collections.ShortCopyOnWriteArraySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = null;
      try {
        shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scale7.collections.ShortCopyOnWriteArraySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      short[] shortArray0 = new short[3];
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet(shortArray0);
      assertEquals(3, shortCopyOnWriteArraySet0.size());
      
      shortCopyOnWriteArraySet0.clear();
      short[] shortArray1 = shortCopyOnWriteArraySet0.toArray(false);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet();
      short[] shortArray0 = new short[6];
      shortCopyOnWriteArraySet0.set(shortArray0);
      shortCopyOnWriteArraySet0.contains((short) (-2423));
      assertEquals(6, shortCopyOnWriteArraySet0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      short[] shortArray0 = new short[8];
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet(shortArray0);
      boolean boolean0 = shortCopyOnWriteArraySet0.contains((short)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet();
      short[] shortArray0 = new short[6];
      shortCopyOnWriteArraySet0.set(shortArray0);
      shortCopyOnWriteArraySet0.toArray(false);
      assertEquals(6, shortCopyOnWriteArraySet0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      short[] shortArray0 = new short[8];
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet(shortArray0);
      short[] shortArray1 = shortCopyOnWriteArraySet0.toArray(true);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet();
      int int0 = shortCopyOnWriteArraySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      short[] shortArray0 = new short[8];
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet(shortArray0);
      int int0 = shortCopyOnWriteArraySet0.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet();
      boolean boolean0 = shortCopyOnWriteArraySet0.contains((short)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet();
      short[] shortArray0 = new short[2];
      short[] shortArray1 = new short[6];
      shortArray1[1] = (short)1;
      shortCopyOnWriteArraySet0.add(shortArray1);
      boolean boolean0 = shortCopyOnWriteArraySet0.remove(shortArray0);
      assertEquals(4, shortCopyOnWriteArraySet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      short[] shortArray0 = new short[8];
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet(shortArray0);
      boolean boolean0 = shortCopyOnWriteArraySet0.remove(shortArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = shortCopyOnWriteArraySet0.remove(shortArray0);
      assertEquals(0, shortCopyOnWriteArraySet0.size());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet();
      short[] shortArray0 = new short[6];
      boolean boolean0 = shortCopyOnWriteArraySet0.remove(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2454);
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet(shortArray0);
      short[] shortArray1 = new short[4];
      shortCopyOnWriteArraySet0.set(shortArray1);
      boolean boolean0 = shortCopyOnWriteArraySet0.add(shortArray0);
      assertEquals(5, shortCopyOnWriteArraySet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet();
      short[] shortArray0 = shortCopyOnWriteArraySet0.toArray();
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      short[] shortArray0 = new short[8];
      ShortCopyOnWriteArraySet shortCopyOnWriteArraySet0 = new ShortCopyOnWriteArraySet(shortArray0);
      boolean boolean0 = shortCopyOnWriteArraySet0.add(shortArray0);
      assertFalse(boolean0);
  }
}
