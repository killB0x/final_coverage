/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 09:05:10 GMT 2022
 */

package com.github.jrgen.settings;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.jrgen.settings.Settings;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Settings_ESTest extends Settings_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertFalse(settings0.isNotNull());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(1900, settings0.getMinYear());
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(2014, settings0.getMaxYear());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
      
      settings0.setMaxContainerSize(20);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(20, settings0.getMaxContainerSize());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertFalse(settings0.isNotNull());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(1900, settings0.getMinYear());
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(2014, settings0.getMaxYear());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      assertNotNull(settings0);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertFalse(settings0.isNotNull());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0, settings0.getMinContainerSize());
      
      settings0.setSpecialsUsed(true);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertFalse(settings0.isNotNull());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(1900, settings0.getMinYear());
      assertTrue(settings0.isSpecialsUsed());
      assertEquals(0, settings0.getMinContainerSize());
      
      boolean boolean0 = settings0.isSpecialsUsed();
      assertTrue(boolean0);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertFalse(settings0.isNotNull());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(1900, settings0.getMinYear());
      assertTrue(settings0.isSpecialsUsed());
      assertEquals(0, settings0.getMinContainerSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isRandomContainerSize());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertFalse(settings0.isNotNull());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      
      settings0.setRandomContainerSize(false);
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertFalse(settings0.isRandomContainerSize());
      assertFalse(settings0.isNotNull());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      
      boolean boolean0 = settings0.isRandomContainerSize();
      assertFalse(boolean0);
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertFalse(settings0.isRandomContainerSize());
      assertFalse(settings0.isNotNull());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0, settings0.getMinContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(10, settings0.getDefaultContainerSize());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isNotNull());
      assertEquals((short)0, settings0.getMinShortValue());
      
      settings0.setNullOnEmptySet(true);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0L, settings0.getMinLongValue());
      assertTrue(settings0.isNullOnEmptySet());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(10, settings0.getDefaultContainerSize());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isNotNull());
      assertEquals((short)0, settings0.getMinShortValue());
      
      boolean boolean0 = settings0.isNullOnEmptySet();
      assertTrue(boolean0);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0L, settings0.getMinLongValue());
      assertTrue(settings0.isNullOnEmptySet());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(10, settings0.getDefaultContainerSize());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isNotNull());
      assertEquals((short)0, settings0.getMinShortValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertFalse(settings0.isNotNull());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0, settings0.getMinContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      
      settings0.setNotNull(true);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isNotNull());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0, settings0.getMinContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      
      boolean boolean0 = settings0.isNotNull();
      assertTrue(boolean0);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isNotNull());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0, settings0.getMinContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertTrue(settings0.isAlphaUsed());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((short)0, settings0.getMinShortValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals((byte)127, settings0.getMaxByteValue());
      
      settings0.setGenerateUndefined(false);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertFalse(settings0.isGenerateUndefined());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertTrue(settings0.isAlphaUsed());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((short)0, settings0.getMinShortValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals((byte)127, settings0.getMaxByteValue());
      
      boolean boolean0 = settings0.isGenerateUndefined();
      assertFalse(boolean0);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertFalse(settings0.isGenerateUndefined());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertTrue(settings0.isAlphaUsed());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((short)0, settings0.getMinShortValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals((byte)127, settings0.getMaxByteValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(1900, settings0.getMinYear());
      assertFalse(settings0.isNotNull());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(2014, settings0.getMaxYear());
      assertTrue(settings0.isRandomContainerSize());
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      
      settings0.setAlphaUsed(false);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(1900, settings0.getMinYear());
      assertFalse(settings0.isNotNull());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(20, settings0.getDefaultStringLength());
      assertFalse(settings0.isAlphaUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(2014, settings0.getMaxYear());
      assertTrue(settings0.isRandomContainerSize());
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      
      boolean boolean0 = settings0.isAlphaUsed();
      assertFalse(boolean0);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(1900, settings0.getMinYear());
      assertFalse(settings0.isNotNull());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(20, settings0.getDefaultStringLength());
      assertFalse(settings0.isAlphaUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(2014, settings0.getMaxYear());
      assertTrue(settings0.isRandomContainerSize());
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(1900, settings0.getMinYear());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isAlphaUsed());
      assertFalse(settings0.isNotNull());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      
      settings0.setMinYear((-286));
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((-286), settings0.getMinYear());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isAlphaUsed());
      assertFalse(settings0.isNotNull());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      
      int int0 = settings0.getMinYear();
      assertEquals((-286), int0);
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((-286), settings0.getMinYear());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isAlphaUsed());
      assertFalse(settings0.isNotNull());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isAlphaUsed());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(1900, settings0.getMinYear());
      
      settings0.setMinShortValue((short)2603);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals((short)2603, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isAlphaUsed());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isDigitsUsed());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(1900, settings0.getMinYear());
      
      short short0 = settings0.getMinShortValue();
      assertEquals((short)2603, short0);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals((short)2603, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isAlphaUsed());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isDigitsUsed());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(1900, settings0.getMinYear());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      assertNotNull(settings0);
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(10000, settings0.getMaxIntValue());
      assertFalse(settings0.isNotNull());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      
      settings0.setMinShortValue((short) (-2677));
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((short) (-2677), settings0.getMinShortValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(10000, settings0.getMaxIntValue());
      assertFalse(settings0.isNotNull());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      
      short short0 = settings0.getMinShortValue();
      assertEquals((short) (-2677), short0);
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((short) (-2677), settings0.getMinShortValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(10000, settings0.getMaxIntValue());
      assertFalse(settings0.isNotNull());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      assertNotNull(settings0);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNotNull());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
      
      settings0.setMinLongValue(1351);
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNotNull());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(1351L, settings0.getMinLongValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
      
      long long0 = settings0.getMinLongValue();
      assertEquals(1351L, long0);
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNotNull());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(1351L, settings0.getMinLongValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNotNull());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isAlphaUsed());
      
      settings0.setMinLongValue((-154));
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNotNull());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals((-154L), settings0.getMinLongValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isAlphaUsed());
      
      long long0 = settings0.getMinLongValue();
      assertEquals((-154L), long0);
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNotNull());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals((-154L), settings0.getMinLongValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isAlphaUsed());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      assertNotNull(settings0);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertTrue(settings0.isAlphaUsed());
      assertFalse(settings0.isNotNull());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinContainerSize());
      
      settings0.setMinIntValue(2922);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertTrue(settings0.isAlphaUsed());
      assertFalse(settings0.isNotNull());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(2922, settings0.getMinIntValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinContainerSize());
      
      int int0 = settings0.getMinIntValue();
      assertEquals(2922, int0);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertTrue(settings0.isAlphaUsed());
      assertFalse(settings0.isNotNull());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(2922, settings0.getMinIntValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinContainerSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertTrue(settings0.isDigitsUsed());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(1900, settings0.getMinYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(10, settings0.getDefaultContainerSize());
      assertTrue(settings0.isRandomContainerSize());
      
      settings0.setMinIntValue((-400));
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals((-400), settings0.getMinIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(1900, settings0.getMinYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(10, settings0.getDefaultContainerSize());
      assertTrue(settings0.isRandomContainerSize());
      
      int int0 = settings0.getMinIntValue();
      assertEquals((-400), int0);
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals((-400), settings0.getMinIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(1900, settings0.getMinYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(10, settings0.getDefaultContainerSize());
      assertTrue(settings0.isRandomContainerSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      assertNotNull(settings0);
      assertFalse(settings0.isSpecialsUsed());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertTrue(settings0.isAlphaUsed());
      assertFalse(settings0.isNotNull());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(1900, settings0.getMinYear());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      
      settings0.setMinFloatValue(10000.0F);
      assertFalse(settings0.isSpecialsUsed());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertTrue(settings0.isAlphaUsed());
      assertFalse(settings0.isNotNull());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(10000.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(1900, settings0.getMinYear());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isRandomContainerSize());
      
      float float0 = settings0.getMinFloatValue();
      assertEquals(10000.0F, float0, 0.01F);
      assertFalse(settings0.isSpecialsUsed());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertTrue(settings0.isAlphaUsed());
      assertFalse(settings0.isNotNull());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(10000.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(1900, settings0.getMinYear());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isRandomContainerSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      assertNotNull(settings0);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertFalse(settings0.isNotNull());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isAlphaUsed());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isNullOnEmptySet());
      
      settings0.setMinFloatValue((-1042.8143F));
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((-1042.8143F), settings0.getMinFloatValue(), 0.01F);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertFalse(settings0.isNotNull());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isAlphaUsed());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isNullOnEmptySet());
      
      float float0 = settings0.getMinFloatValue();
      assertEquals((-1042.8143F), float0, 0.01F);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((-1042.8143F), settings0.getMinFloatValue(), 0.01F);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertFalse(settings0.isNotNull());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isAlphaUsed());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isNullOnEmptySet());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      assertNotNull(settings0);
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isGenerateUndefined());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(1900, settings0.getMinYear());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      
      settings0.setMinDoubleValue(183.76);
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isGenerateUndefined());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(183.76, settings0.getMinDoubleValue(), 0.01);
      assertTrue(settings0.isAlphaUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(1900, settings0.getMinYear());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      
      double double0 = settings0.getMinDoubleValue();
      assertEquals(183.76, double0, 0.01);
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isGenerateUndefined());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(183.76, settings0.getMinDoubleValue(), 0.01);
      assertTrue(settings0.isAlphaUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(1900, settings0.getMinYear());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      assertNotNull(settings0);
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertFalse(settings0.isNotNull());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(1900, settings0.getMinYear());
      
      settings0.setMinDoubleValue((-737L));
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertFalse(settings0.isNotNull());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((-737.0), settings0.getMinDoubleValue(), 0.01);
      assertTrue(settings0.isGenerateUndefined());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(1900, settings0.getMinYear());
      
      double double0 = settings0.getMinDoubleValue();
      assertEquals((-737.0), double0, 0.01);
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertFalse(settings0.isNotNull());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((-737.0), settings0.getMinDoubleValue(), 0.01);
      assertTrue(settings0.isGenerateUndefined());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(1900, settings0.getMinYear());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      assertNotNull(settings0);
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertFalse(settings0.isNotNull());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isGenerateUndefined());
      
      settings0.setMinContainerSize(1191);
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(1191, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertFalse(settings0.isNotNull());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isGenerateUndefined());
      
      int int0 = settings0.getMinContainerSize();
      assertEquals(1191, int0);
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(1191, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertFalse(settings0.isNotNull());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isGenerateUndefined());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      
      settings0.setMinByteValue((byte)20);
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals((byte)20, settings0.getMinByteValue());
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      
      byte byte0 = settings0.getMinByteValue();
      assertEquals((byte)20, byte0);
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals((byte)20, settings0.getMinByteValue());
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      assertNotNull(settings0);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      
      settings0.setMinByteValue((byte) (-45));
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals((byte) (-45), settings0.getMinByteValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(10, settings0.getMaxContainerSize());
      
      byte byte0 = settings0.getMinByteValue();
      assertEquals((byte) (-45), byte0);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals((byte) (-45), settings0.getMinByteValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(10, settings0.getMaxContainerSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      assertNotNull(settings0);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals((short)0, settings0.getMinShortValue());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isNullOnEmptySet());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0, settings0.getMinContainerSize());
      
      settings0.setMaxYear(0);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals((short)0, settings0.getMinShortValue());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(0, settings0.getMaxYear());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isNullOnEmptySet());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0, settings0.getMinContainerSize());
      
      int int0 = settings0.getMaxYear();
      assertEquals(0, int0);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals((short)0, settings0.getMinShortValue());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(0, settings0.getMaxYear());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isNullOnEmptySet());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0, settings0.getMinContainerSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertFalse(settings0.isNotNull());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(1900, settings0.getMinYear());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isDigitsUsed());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      
      settings0.setMaxShortValue((short)0);
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertFalse(settings0.isNotNull());
      assertEquals((short)0, settings0.getMaxShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(1900, settings0.getMinYear());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isDigitsUsed());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      
      short short0 = settings0.getMaxShortValue();
      assertEquals((short)0, short0);
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertFalse(settings0.isNotNull());
      assertEquals((short)0, settings0.getMaxShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(1900, settings0.getMinYear());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isDigitsUsed());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      assertNotNull(settings0);
      assertEquals(0, settings0.getMinContainerSize());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(1900, settings0.getMinYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10000, settings0.getMaxIntValue());
      assertFalse(settings0.isNotNull());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      
      settings0.setMaxShortValue((short) (-1293));
      assertEquals(0, settings0.getMinContainerSize());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(1900, settings0.getMinYear());
      assertEquals((short) (-1293), settings0.getMaxShortValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10000, settings0.getMaxIntValue());
      assertFalse(settings0.isNotNull());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      
      short short0 = settings0.getMaxShortValue();
      assertEquals((short) (-1293), short0);
      assertEquals(0, settings0.getMinContainerSize());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(1900, settings0.getMinYear());
      assertEquals((short) (-1293), settings0.getMaxShortValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10000, settings0.getMaxIntValue());
      assertFalse(settings0.isNotNull());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertFalse(settings0.isNotNull());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isAlphaUsed());
      assertTrue(settings0.isGenerateUndefined());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      
      settings0.setMaxLongValue((-301));
      assertFalse(settings0.isNotNull());
      assertEquals((-301L), settings0.getMaxLongValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isAlphaUsed());
      assertTrue(settings0.isGenerateUndefined());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      
      long long0 = settings0.getMaxLongValue();
      assertEquals((-301L), long0);
      assertFalse(settings0.isNotNull());
      assertEquals((-301L), settings0.getMaxLongValue());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isAlphaUsed());
      assertTrue(settings0.isGenerateUndefined());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10000, settings0.getMaxIntValue());
      assertFalse(settings0.isNotNull());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertTrue(settings0.isAlphaUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0L, settings0.getMinLongValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(0, settings0.getMinContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(10, settings0.getDefaultContainerSize());
      
      settings0.setMaxIntValue(0);
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isNotNull());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertTrue(settings0.isAlphaUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMaxIntValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(0, settings0.getMinContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(10, settings0.getDefaultContainerSize());
      
      int int0 = settings0.getMaxIntValue();
      assertEquals(0, int0);
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isNotNull());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertTrue(settings0.isAlphaUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMaxIntValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(0, settings0.getMinContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(10, settings0.getDefaultContainerSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(1900, settings0.getMinYear());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertFalse(settings0.isNotNull());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      
      settings0.setMaxIntValue((-3592));
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals((-3592), settings0.getMaxIntValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(1900, settings0.getMinYear());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertFalse(settings0.isNotNull());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      
      int int0 = settings0.getMaxIntValue();
      assertEquals((-3592), int0);
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals((-3592), settings0.getMaxIntValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(1900, settings0.getMinYear());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertFalse(settings0.isNotNull());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      assertNotNull(settings0);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(2014, settings0.getMaxYear());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(0, settings0.getMinIntValue());
      
      settings0.setMaxFloatValue(0.0F);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(0.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(2014, settings0.getMaxYear());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(0, settings0.getMinIntValue());
      
      float float0 = settings0.getMaxFloatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(0.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(2014, settings0.getMaxYear());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(0, settings0.getMinIntValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isAlphaUsed());
      assertFalse(settings0.isNotNull());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(1900, settings0.getMinYear());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0L, settings0.getMinLongValue());
      
      settings0.setMaxFloatValue((-1.0F));
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isAlphaUsed());
      assertFalse(settings0.isNotNull());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((-1.0F), settings0.getMaxFloatValue(), 0.01F);
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(1900, settings0.getMinYear());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0L, settings0.getMinLongValue());
      
      float float0 = settings0.getMaxFloatValue();
      assertEquals((-1.0F), float0, 0.01F);
      assertTrue(settings0.isGenerateUndefined());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isAlphaUsed());
      assertFalse(settings0.isNotNull());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals((-1.0F), settings0.getMaxFloatValue(), 0.01F);
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(1900, settings0.getMinYear());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0L, settings0.getMinLongValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      assertNotNull(settings0);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNotNull());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(0L, settings0.getMinLongValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(2014, settings0.getMaxYear());
      
      settings0.setMaxDoubleValue(0.0);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0.0, settings0.getMaxDoubleValue(), 0.01);
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNotNull());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(0L, settings0.getMinLongValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(2014, settings0.getMaxYear());
      
      double double0 = settings0.getMaxDoubleValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0.0, settings0.getMaxDoubleValue(), 0.01);
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNotNull());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(0L, settings0.getMinLongValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(2014, settings0.getMaxYear());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      assertNotNull(settings0);
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(2014, settings0.getMaxYear());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isAlphaUsed());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(10, settings0.getMaxContainerSize());
      
      settings0.setMaxDoubleValue((-2521.9817741427123));
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals((-2521.9817741427123), settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(2014, settings0.getMaxYear());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isAlphaUsed());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(10, settings0.getMaxContainerSize());
      
      double double0 = settings0.getMaxDoubleValue();
      assertEquals((-2521.9817741427123), double0, 0.01);
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals((-2521.9817741427123), settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(2014, settings0.getMaxYear());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isAlphaUsed());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(10, settings0.getMaxContainerSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      assertNotNull(settings0);
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isRandomContainerSize());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      
      settings0.setMaxByteValue((byte)0);
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isRandomContainerSize());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals((byte)0, settings0.getMaxByteValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      
      byte byte0 = settings0.getMaxByteValue();
      assertEquals((byte)0, byte0);
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isRandomContainerSize());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals((byte)0, settings0.getMaxByteValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(0, settings0.getMinContainerSize());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(1900, settings0.getMinYear());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
      
      settings0.setMaxByteValue((byte) (-53));
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals((byte) (-53), settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(1900, settings0.getMinYear());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
      
      byte byte0 = settings0.getMaxByteValue();
      assertEquals((byte) (-53), byte0);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals((byte) (-53), settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(1900, settings0.getMinYear());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(0, settings0.getMinIntValue());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(10, settings0.getMaxContainerSize());
      
      settings0.setDefaultStringLength(0);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(0, settings0.getMinIntValue());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(0, settings0.getDefaultStringLength());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(10, settings0.getMaxContainerSize());
      
      int int0 = settings0.getDefaultStringLength();
      assertEquals(0, int0);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(0, settings0.getMinIntValue());
      assertFalse(settings0.isNotNull());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(0, settings0.getDefaultStringLength());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(10, settings0.getMaxContainerSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(1900, settings0.getMinYear());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isAlphaUsed());
      assertFalse(settings0.isNotNull());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isDigitsUsed());
      
      settings0.setDefaultContainerSize((-1));
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(1900, settings0.getMinYear());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isAlphaUsed());
      assertFalse(settings0.isNotNull());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals((-1), settings0.getDefaultContainerSize());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isDigitsUsed());
      
      int int0 = settings0.getDefaultContainerSize();
      assertEquals((-1), int0);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(1900, settings0.getMinYear());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isAlphaUsed());
      assertFalse(settings0.isNotNull());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals((-1), settings0.getDefaultContainerSize());
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isDigitsUsed());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      assertNotNull(settings0);
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertFalse(settings0.isNotNull());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals((byte)127, settings0.getMaxByteValue());
      
      // Undeclared exception!
      try { 
        settings0.setDefaultStringLength((-3591));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // settings.illegal.stringLength
         //
         verifyException("com.github.jrgen.settings.Settings", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      assertNotNull(settings0);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(2014, settings0.getMaxYear());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals((short)0, settings0.getMinShortValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(10, settings0.getDefaultContainerSize());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertFalse(settings0.isNotNull());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      
      settings0.setDefaultStringLength(1191);
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(2014, settings0.getMaxYear());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals((short)0, settings0.getMinShortValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(1191, settings0.getDefaultStringLength());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isNullOnEmptySet());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(10, settings0.getDefaultContainerSize());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertFalse(settings0.isNotNull());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertNotNull(settings0);
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isGenerateUndefined());
      assertEquals(10, settings0.getDefaultContainerSize());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((byte)0, settings0.getMinByteValue());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinContainerSize());
      assertFalse(settings0.isNullOnEmptySet());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(1900, settings0.getMinYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(0.0F, settings0.getMinFloatValue(), 0.01F);
      assertEquals(0.0, settings0.getMinDoubleValue(), 0.01);
      assertEquals(Settings.FileType.JSON, settings0.getExtension());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertFalse(settings0.isNotNull());
      
      // Undeclared exception!
      try { 
        settings0.setMinContainerSize((-973));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // settings.illegal.containerSize
         //
         verifyException("com.github.jrgen.settings.Settings", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      settings0.setMinContainerSize(0);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(0, settings0.getMinContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0, settings0.getMinIntValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      // Undeclared exception!
      try { 
        settings0.setMaxContainerSize((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // settings.illegal.containerSize
         //
         verifyException("com.github.jrgen.settings.Settings", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertEquals(10, settings0.getMaxContainerSize());
      
      settings0.setMaxContainerSize(0);
      int int0 = settings0.getMaxContainerSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      byte byte0 = settings0.getMaxByteValue();
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((byte)127, byte0);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isAlphaUsed());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getMaxContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(2014, settings0.getMaxYear());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.setDefaultContainerSize((short)0);
      int int0 = settings0.getDefaultContainerSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      assertTrue(settings0.isDigitsUsed());
      
      settings0.setDigitsUsed(false);
      boolean boolean0 = settings0.isDigitsUsed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      boolean boolean0 = settings0.isRandomContainerSize();
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertTrue(boolean0);
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0L, settings0.getMinLongValue());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      boolean boolean0 = settings0.isSpecialsUsed();
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(20, settings0.getDefaultStringLength());
      assertFalse(boolean0);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      long long0 = settings0.getMinLongValue();
      assertTrue(settings0.isAlphaUsed());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0L, long0);
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(0, settings0.getMinIntValue());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      short short0 = settings0.getMinShortValue();
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(2014, settings0.getMaxYear());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)0, short0);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      int int0 = settings0.getMaxYear();
      assertEquals(10, settings0.getMaxContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(2014, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      float float0 = settings0.getMaxFloatValue();
      assertEquals(10000.0F, float0, 0.01F);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinIntValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10, settings0.getMaxContainerSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      settings0.isNotNull();
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0L, settings0.getMinLongValue());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      int int0 = settings0.getMinYear();
      assertEquals(1900, int0);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals((short)0, settings0.getMinShortValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(2014, settings0.getMaxYear());
      assertTrue(settings0.isAlphaUsed());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      settings0.isGenerateUndefined();
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals((short)0, settings0.getMinShortValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000L, settings0.getMaxLongValue());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.toString();
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinIntValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((short)0, settings0.getMinShortValue());
      assertTrue(settings0.isDigitsUsed());
      assertTrue(settings0.isAlphaUsed());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(2014, settings0.getMaxYear());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      short short0 = settings0.getMaxShortValue();
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isAlphaUsed());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(2014, settings0.getMaxYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((short)1000, short0);
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals((byte)127, settings0.getMaxByteValue());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.getMinByteValue();
      assertTrue(settings0.isAlphaUsed());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(2014, settings0.getMaxYear());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals((short)1000, settings0.getMaxShortValue());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.setMaxYear((-1871));
      int int0 = settings0.getMaxYear();
      assertEquals((-1871), int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.setMinYear(0);
      int int0 = settings0.getMinYear();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      settings0.isNullOnEmptySet();
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(10, settings0.getMaxContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isAlphaUsed());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      Settings.FileType settings_FileType0 = settings0.getExtension();
      settings_FileType0.toString();
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isRandomContainerSize());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      int int0 = settings0.getMaxIntValue();
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(10000, int0);
      assertEquals(2014, settings0.getMaxYear());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(20, settings0.getDefaultStringLength());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      int int0 = settings0.getDefaultContainerSize();
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10, int0);
      assertTrue(settings0.isAlphaUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(10, settings0.getMaxContainerSize());
      assertFalse(settings0.isSpecialsUsed());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      boolean boolean0 = settings0.isAlphaUsed();
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals((short)0, settings0.getMinShortValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      double double0 = settings0.getMaxDoubleValue();
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals((short)0, settings0.getMinShortValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(100000.0, double0, 0.01);
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10, settings0.getMaxContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(100000L, settings0.getMaxLongValue());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      assertEquals(100000L, settings0.getMaxLongValue());
      
      settings0.setMaxLongValue(0L);
      settings0.getMaxLongValue();
      assertEquals(20, settings0.getDefaultStringLength());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      int int0 = settings0.getMinIntValue();
      assertTrue(settings0.isAlphaUsed());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(0, int0);
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0L, settings0.getMinLongValue());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      double double0 = settings0.getMinDoubleValue();
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals((short)0, settings0.getMinShortValue());
      assertTrue(settings0.isDigitsUsed());
      assertTrue(settings0.isAlphaUsed());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      float float0 = settings0.getMinFloatValue();
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(20, settings0.getDefaultStringLength());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.getResources();
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(2014, settings0.getMaxYear());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isAlphaUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      int int0 = settings0.getDefaultStringLength();
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(10, settings0.getMaxContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(20, int0);
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals((short)0, settings0.getMinShortValue());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      long long0 = settings0.getMaxLongValue();
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(100000L, long0);
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(2014, settings0.getMaxYear());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      int int0 = settings0.getMinContainerSize();
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(20, settings0.getDefaultStringLength());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertTrue(settings0.isDigitsUsed());
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(0, settings0.getMinIntValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(0, int0);
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(10, settings0.getMaxContainerSize());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      boolean boolean0 = settings0.isDigitsUsed();
      assertTrue(settings0.isAlphaUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10, settings0.getMaxContainerSize());
      assertEquals((short)0, settings0.getMinShortValue());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(boolean0);
      assertEquals(100000L, settings0.getMaxLongValue());
      assertTrue(settings0.isRandomContainerSize());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertEquals(0, settings0.getMinIntValue());
      assertEquals((byte)127, settings0.getMaxByteValue());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      int int0 = settings0.getMaxContainerSize();
      assertEquals(100000L, settings0.getMaxLongValue());
      assertEquals(2014, settings0.getMaxYear());
      assertEquals(20, settings0.getDefaultStringLength());
      assertTrue(settings0.isRandomContainerSize());
      assertFalse(settings0.isSpecialsUsed());
      assertEquals(100000.0, settings0.getMaxDoubleValue(), 0.01);
      assertEquals((short)0, settings0.getMinShortValue());
      assertEquals(10, int0);
      assertEquals((byte)127, settings0.getMaxByteValue());
      assertTrue(settings0.isAlphaUsed());
      assertEquals(0L, settings0.getMinLongValue());
      assertEquals(0, settings0.getMinIntValue());
      assertEquals(10000, settings0.getMaxIntValue());
      assertEquals((short)1000, settings0.getMaxShortValue());
      assertEquals(10000.0F, settings0.getMaxFloatValue(), 0.01F);
      assertTrue(settings0.isDigitsUsed());
  }
}
