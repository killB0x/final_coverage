/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 09:02:12 GMT 2022
 */

package com.github.jrgen.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.jrgen.generator.DefaultGenerator;
import com.github.jrgen.settings.Settings;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultGenerator_ESTest extends DefaultGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultGenerator defaultGenerator0 = new DefaultGenerator((Settings) null);
      Settings settings0 = defaultGenerator0.getSettings();
      assertNull(settings0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      settings0.setSpecialsUsed(true);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(10, settings1.getMaxContainerSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.setRandomContainerSize(false);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertFalse(settings1.isNotNull());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.setNullOnEmptySet(true);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(10, settings1.getDefaultContainerSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.setNotNull(true);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(0, settings1.getMinContainerSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      settings0.setGenerateUndefined(false);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(0, settings1.getMinContainerSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.setDigitsUsed(false);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(0, settings1.getMinContainerSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      settings0.setAlphaUsed(false);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(2014, settings1.getMaxYear());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.setMinYear((-1));
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(10000, settings1.getMaxIntValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.setMinShortValue((short)18);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(2014, settings1.getMaxYear());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      settings0.setMinShortValue((short) (-17));
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(0L, settings1.getMinLongValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      settings0.setMinLongValue(2364L);
      Settings settings1 = defaultGenerator0.getSettings();
      assertFalse(settings1.isNotNull());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      settings0.setMinLongValue((-1060L));
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(20, settings1.getDefaultStringLength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      settings0.setMinIntValue(2010);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(10000.0F, settings1.getMaxFloatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      settings0.setMinIntValue((-13));
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(0.0F, settings1.getMinFloatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      settings0.setMinFloatValue(1259.3961F);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(100000.0, settings1.getMaxDoubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      settings0.setMinFloatValue((-1480.0F));
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(100000L, settings1.getMaxLongValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.setMinDoubleValue(100000.0);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertTrue(settings1.isGenerateUndefined());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      settings0.setMinDoubleValue((-687.8));
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertTrue(settings1.isRandomContainerSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      settings0.setMinContainerSize(1000);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(10000, settings1.getMaxIntValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.setMinByteValue((byte)14);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertTrue(settings1.isGenerateUndefined());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      settings0.setMinByteValue((byte) (-102));
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertTrue(settings1.isGenerateUndefined());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      settings0.setMaxYear((-1615));
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(10, settings1.getDefaultContainerSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      settings0.setMaxShortValue((short) (-2));
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(0.0F, settings1.getMinFloatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      settings0.setMaxLongValue(0L);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(0.0F, settings1.getMinFloatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.setMaxLongValue((-607L));
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertTrue(settings1.isDigitsUsed());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.setMaxIntValue((-428));
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(0, settings1.getMinContainerSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      settings0.setMaxFloatValue(0.0F);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(100000.0, settings1.getMaxDoubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.setMaxFloatValue((-607L));
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals((short)0, settings1.getMinShortValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.setMaxDoubleValue(0.0);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(1900, settings1.getMinYear());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      settings0.setMaxDoubleValue((-671));
      Settings settings1 = defaultGenerator0.getSettings();
      assertFalse(settings1.isNotNull());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      settings0.setMaxContainerSize(0);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals((byte)127, settings1.getMaxByteValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      settings0.setMaxByteValue((byte) (-49));
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(10, settings1.getDefaultContainerSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.setDefaultStringLength(0);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals((short)1000, settings1.getMaxShortValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      settings0.setDefaultContainerSize((-2382));
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Settings settings1 = defaultGenerator0.getSettings();
      assertEquals(0L, settings1.getMinLongValue());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.setDefaultStringLength(0);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      String string0 = defaultGenerator0.createString();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Random.setNextRandom((-1510));
      Character character0 = defaultGenerator0.createCharacter();
      assertEquals('8', (char)character0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultGenerator defaultGenerator0 = new DefaultGenerator((Settings) null);
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        defaultGenerator0.createValue(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jrgen.generator.DefaultGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      settings0.setDefaultStringLength(10000);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      // Undeclared exception!
      defaultGenerator0.createString();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultGenerator defaultGenerator0 = new DefaultGenerator((Settings) null);
      // Undeclared exception!
      try { 
        defaultGenerator0.createString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jrgen.generator.DefaultGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultGenerator defaultGenerator0 = new DefaultGenerator((Settings) null);
      // Undeclared exception!
      try { 
        defaultGenerator0.createShort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jrgen.generator.DefaultGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultGenerator defaultGenerator0 = new DefaultGenerator((Settings) null);
      // Undeclared exception!
      try { 
        defaultGenerator0.createLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jrgen.generator.DefaultGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultGenerator defaultGenerator0 = new DefaultGenerator((Settings) null);
      // Undeclared exception!
      try { 
        defaultGenerator0.createInteger();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jrgen.generator.DefaultGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      // Undeclared exception!
      try { 
        defaultGenerator0.createFloat();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/configuration/ConfigurationException
         //
         verifyException("com.github.jrgen.generator.DefaultGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultGenerator defaultGenerator0 = new DefaultGenerator((Settings) null);
      // Undeclared exception!
      try { 
        defaultGenerator0.createDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jrgen.generator.DefaultGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      // Undeclared exception!
      try { 
        defaultGenerator0.createDate();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/configuration/ConfigurationException
         //
         verifyException("com.github.jrgen.generator.DefaultGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      // Undeclared exception!
      try { 
        defaultGenerator0.createByte();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/configuration/ConfigurationException
         //
         verifyException("com.github.jrgen.generator.DefaultGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultGenerator defaultGenerator0 = new DefaultGenerator((Settings) null);
      // Undeclared exception!
      try { 
        defaultGenerator0.createDate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jrgen.generator.DefaultGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultGenerator defaultGenerator0 = new DefaultGenerator((Settings) null);
      Settings settings0 = Settings.getInstanceCE();
      defaultGenerator0.setSettings(settings0);
      assertEquals(10000, settings0.getMaxIntValue());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      // Undeclared exception!
      try { 
        defaultGenerator0.createValue((Class<Date>) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/configuration/ConfigurationException
         //
         verifyException("com.github.jrgen.generator.DefaultGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.setDigitsUsed(false);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      settings0.setAlphaUsed(false);
      String string0 = defaultGenerator0.createString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      settings0.setSpecialsUsed(true);
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      String string0 = defaultGenerator0.createString();
      assertEquals("AAAAAAAAAAAAAAAAAAAA", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      settings0.setAlphaUsed(false);
      String string0 = defaultGenerator0.createString();
      assertEquals("00000000000000000000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Settings settings0 = Settings.getInstance();
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      // Undeclared exception!
      try { 
        defaultGenerator0.createDouble();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/configuration/ConfigurationException
         //
         verifyException("com.github.jrgen.generator.DefaultGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      // Undeclared exception!
      try { 
        defaultGenerator0.createLong();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/configuration/ConfigurationException
         //
         verifyException("com.github.jrgen.generator.DefaultGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultGenerator defaultGenerator0 = new DefaultGenerator((Settings) null);
      // Undeclared exception!
      try { 
        defaultGenerator0.createFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jrgen.generator.DefaultGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      // Undeclared exception!
      try { 
        defaultGenerator0.createInteger();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/configuration/ConfigurationException
         //
         verifyException("com.github.jrgen.generator.DefaultGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      Character character0 = defaultGenerator0.createCharacter();
      assertEquals('a', (char)character0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Settings settings0 = Settings.getInstanceCE();
      DefaultGenerator defaultGenerator0 = new DefaultGenerator(settings0);
      // Undeclared exception!
      try { 
        defaultGenerator0.createShort();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/configuration/ConfigurationException
         //
         verifyException("com.github.jrgen.generator.DefaultGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultGenerator defaultGenerator0 = new DefaultGenerator((Settings) null);
      // Undeclared exception!
      try { 
        defaultGenerator0.createByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jrgen.generator.DefaultGenerator", e);
      }
  }
}
