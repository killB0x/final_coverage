/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 02:29:42 GMT 2022
 */

package com.cookingfox.util.uid;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cookingfox.util.uid.Uid;
import com.cookingfox.util.uid.UidKeyTranslator;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UidKeyTranslator_ESTest extends UidKeyTranslator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Uid uid0 = Uid.create();
      HashMap<Uid, Object> hashMap0 = new HashMap<Uid, Object>();
      hashMap0.putIfAbsent(uid0, "Uid{1}");
      UidKeyTranslator<Object> uidKeyTranslator0 = new UidKeyTranslator<Object>(hashMap0);
      try { 
        uidKeyTranslator0.addToDictionary(hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The following Uid is already present in the dictionary: Uid{1}
         //
         verifyException("com.cookingfox.util.uid.UidKeyTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Uid, Uid> hashMap0 = new HashMap<Uid, Uid>();
      Uid uid0 = Uid.create();
      hashMap0.put(uid0, uid0);
      UidKeyTranslator<Uid> uidKeyTranslator0 = new UidKeyTranslator<Uid>(hashMap0);
      HashMap<Uid, Object> hashMap1 = new HashMap<Uid, Object>(hashMap0);
      Map<Uid, ?> map0 = uidKeyTranslator0.toUidMap(hashMap1);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Uid, Object> hashMap0 = new HashMap<Uid, Object>();
      UidKeyTranslator<Object> uidKeyTranslator0 = new UidKeyTranslator<Object>(hashMap0);
      Map<Object, ?> map0 = uidKeyTranslator0.fromUidMap(hashMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UidKeyTranslator<Object> uidKeyTranslator0 = new UidKeyTranslator<Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Uid uid0 = Uid.create();
      AbstractMap.SimpleImmutableEntry<Uid, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Uid, Object>(uid0, hashMap0);
      AbstractMap.SimpleEntry<Uid, Uid> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Uid, Uid>(uid0, uid0);
      AbstractMap.SimpleImmutableEntry<Uid, Uid> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Uid, Uid>(abstractMap_SimpleEntry0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      // Undeclared exception!
      try { 
        uidKeyTranslator0.toUidMap(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UidKeyTranslator<UidKeyTranslator<Uid>> uidKeyTranslator0 = new UidKeyTranslator<UidKeyTranslator<Uid>>();
      // Undeclared exception!
      try { 
        uidKeyTranslator0.toUidMap((Map<UidKeyTranslator<Uid>, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cookingfox.util.uid.UidKeyTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Uid, Object> hashMap0 = new HashMap<Uid, Object>();
      Uid uid0 = Uid.create();
      HashMap<Uid, Comparable<Object>> hashMap1 = new HashMap<Uid, Comparable<Object>>();
      hashMap0.putIfAbsent(uid0, hashMap1);
      UidKeyTranslator<Object> uidKeyTranslator0 = new UidKeyTranslator<Object>();
      uidKeyTranslator0.addToDictionary(hashMap0);
      // Undeclared exception!
      try { 
        uidKeyTranslator0.toUid((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cookingfox.util.uid.UidKeyTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Uid, Uid> hashMap0 = new HashMap<Uid, Uid>();
      Uid uid0 = Uid.create();
      hashMap0.put(uid0, uid0);
      UidKeyTranslator<Uid> uidKeyTranslator0 = new UidKeyTranslator<Uid>();
      try { 
        uidKeyTranslator0.fromUidMap(hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Provided Uid is not in the dictionary: Uid{1}
         //
         verifyException("com.cookingfox.util.uid.UidKeyTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Uid uid0 = Uid.create();
      HashMap<Uid, AbstractMap.SimpleImmutableEntry<Uid, Object>> hashMap0 = new HashMap<Uid, AbstractMap.SimpleImmutableEntry<Uid, Object>>();
      AbstractMap.SimpleImmutableEntry<Uid, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Uid, Object>(uid0, hashMap0);
      hashMap0.put(uid0, abstractMap_SimpleImmutableEntry0);
      UidKeyTranslator<AbstractMap.SimpleImmutableEntry<Uid, Object>> uidKeyTranslator0 = new UidKeyTranslator<AbstractMap.SimpleImmutableEntry<Uid, Object>>(hashMap0);
      // Undeclared exception!
      try { 
        uidKeyTranslator0.fromUidMap(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UidKeyTranslator<AbstractMap.SimpleImmutableEntry<Uid, Object>> uidKeyTranslator0 = new UidKeyTranslator<AbstractMap.SimpleImmutableEntry<Uid, Object>>();
      // Undeclared exception!
      try { 
        uidKeyTranslator0.fromUidMap((Map<Uid, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cookingfox.util.uid.UidKeyTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UidKeyTranslator<Object> uidKeyTranslator0 = new UidKeyTranslator<Object>();
      // Undeclared exception!
      try { 
        uidKeyTranslator0.addToDictionary((Map<Uid, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cookingfox.util.uid.UidKeyTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UidKeyTranslator<Uid> uidKeyTranslator0 = null;
      try {
        uidKeyTranslator0 = new UidKeyTranslator<Uid>((Map<Uid, Uid>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cookingfox.util.uid.UidKeyTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Uid, Object> hashMap0 = new HashMap<Uid, Object>();
      Uid uid0 = Uid.create();
      HashMap<Uid, Comparable<Object>> hashMap1 = new HashMap<Uid, Comparable<Object>>();
      hashMap0.putIfAbsent(uid0, hashMap1);
      UidKeyTranslator<Object> uidKeyTranslator0 = new UidKeyTranslator<Object>();
      uidKeyTranslator0.addToDictionary(hashMap0);
      HashMap hashMap2 = (HashMap)uidKeyTranslator0.fromUid(uid0);
      assertTrue(hashMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Uid uid0 = Uid.create();
      HashMap<Uid, Uid> hashMap0 = new HashMap<Uid, Uid>();
      hashMap0.put(uid0, (Uid) null);
      UidKeyTranslator<Uid> uidKeyTranslator0 = new UidKeyTranslator<Uid>();
      try { 
        uidKeyTranslator0.addToDictionary(hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The map cannot contain `null` values (error for Uid{1})
         //
         verifyException("com.cookingfox.util.uid.UidKeyTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UidKeyTranslator<Object> uidKeyTranslator0 = new UidKeyTranslator<Object>();
      HashMap<Uid, Object> hashMap0 = new HashMap<Uid, Object>();
      Uid uid0 = Uid.create();
      hashMap0.putIfAbsent((Uid) null, uid0);
      try { 
        uidKeyTranslator0.addToDictionary(hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The map can only contain keys that are Uid instances (null)
         //
         verifyException("com.cookingfox.util.uid.UidKeyTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UidKeyTranslator<UidKeyTranslator<Uid>> uidKeyTranslator0 = new UidKeyTranslator<UidKeyTranslator<Uid>>();
      HashMap<UidKeyTranslator<Uid>, Object> hashMap0 = new HashMap<UidKeyTranslator<Uid>, Object>();
      UidKeyTranslator<Uid> uidKeyTranslator1 = new UidKeyTranslator<Uid>();
      hashMap0.put(uidKeyTranslator1, uidKeyTranslator0);
      try { 
        uidKeyTranslator0.toUidMap(hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Provided key is not in the dictionary: java.util.LinkedHashMap@0000000003
         //
         verifyException("com.cookingfox.util.uid.UidKeyTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UidKeyTranslator<AbstractMap.SimpleImmutableEntry<Uid, Object>> uidKeyTranslator0 = new UidKeyTranslator<AbstractMap.SimpleImmutableEntry<Uid, Object>>();
      HashMap<AbstractMap.SimpleImmutableEntry<Uid, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Uid, Object>, Object>();
      Map<Uid, ?> map0 = uidKeyTranslator0.toUidMap(hashMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UidKeyTranslator<Uid> uidKeyTranslator0 = new UidKeyTranslator<Uid>();
      HashMap<Uid, Uid> hashMap0 = new HashMap<Uid, Uid>();
      Uid uid0 = Uid.create();
      BiFunction<Uid, Uid, Uid> biFunction0 = (BiFunction<Uid, Uid, Uid>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(uid0, uid0, biFunction0);
      Uid uid1 = Uid.create("");
      uidKeyTranslator0.addToDictionary(hashMap0);
      try { 
        uidKeyTranslator0.toUid(uid1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Provided key is not in the dictionary: Uid{''}
         //
         verifyException("com.cookingfox.util.uid.UidKeyTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Uid uid0 = Uid.create();
      UidKeyTranslator<AbstractMap.SimpleImmutableEntry<Uid, Uid>> uidKeyTranslator0 = new UidKeyTranslator<AbstractMap.SimpleImmutableEntry<Uid, Uid>>();
      try { 
        uidKeyTranslator0.fromUid(uid0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Provided Uid is not in the dictionary: Uid{1}
         //
         verifyException("com.cookingfox.util.uid.UidKeyTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Uid, Uid> hashMap0 = new HashMap<Uid, Uid>();
      Uid uid0 = Uid.create();
      hashMap0.put(uid0, uid0);
      UidKeyTranslator<Uid> uidKeyTranslator0 = new UidKeyTranslator<Uid>(hashMap0);
      Map<Uid, ?> map0 = uidKeyTranslator0.fromUidMap(hashMap0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Uid, Uid> hashMap0 = new HashMap<Uid, Uid>();
      Uid uid0 = Uid.create();
      hashMap0.put(uid0, (Uid) null);
      UidKeyTranslator<Uid> uidKeyTranslator0 = null;
      try {
        uidKeyTranslator0 = new UidKeyTranslator<Uid>(hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // The map cannot contain `null` values (error for Uid{1})
         //
         verifyException("com.cookingfox.util.uid.UidKeyTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UidKeyTranslator<Object> uidKeyTranslator0 = new UidKeyTranslator<Object>();
      String string0 = uidKeyTranslator0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UidKeyTranslator<Uid> uidKeyTranslator0 = new UidKeyTranslator<Uid>();
      HashMap<Uid, Uid> hashMap0 = new HashMap<Uid, Uid>();
      Uid uid0 = Uid.create();
      BiFunction<Uid, Uid, Uid> biFunction0 = (BiFunction<Uid, Uid, Uid>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Uid uid1 = hashMap0.merge(uid0, uid0, biFunction0);
      uidKeyTranslator0.addToDictionary(hashMap0);
      Uid uid2 = uidKeyTranslator0.toUid(uid1);
      assertSame(uid1, uid2);
  }
}
