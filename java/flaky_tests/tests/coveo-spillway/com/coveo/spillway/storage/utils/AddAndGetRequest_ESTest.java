/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 20:22:42 GMT 2022
 */

package com.coveo.spillway.storage.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import com.coveo.spillway.storage.utils.AddAndGetRequest;
import java.time.Duration;
import java.time.Instant;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AddAndGetRequest_ESTest extends AddAndGetRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis(431L);
      Instant instant0 = MockInstant.ofEpochMilli(431L);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withExpiration(duration0);
      addAndGetRequest_Builder1.withEventTimestamp(instant0);
      addAndGetRequest_Builder1.withLimit(1718);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      addAndGetRequest0.hashCode();
      assertEquals(1718, addAndGetRequest0.getLimit());
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis(1);
      Instant instant0 = MockInstant.now();
      addAndGetRequest_Builder0.withExpiration(duration0);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withEventTimestamp(instant0);
      addAndGetRequest_Builder1.withProperty(", limit=");
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      addAndGetRequest0.hashCode();
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Instant instant0 = MockInstant.now();
      Duration duration0 = Duration.ofSeconds((long) 1);
      addAndGetRequest_Builder0.withExpiration(duration0);
      addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withLimitName("aL");
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      addAndGetRequest0.hashCode();
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Instant instant0 = MockInstant.ofEpochMilli(413L);
      Duration duration0 = Duration.ofDays(413L);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withExpiration(duration0);
      AddAndGetRequest.Builder addAndGetRequest_Builder2 = addAndGetRequest_Builder1.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      addAndGetRequest_Builder2.withLimit((-873));
      AddAndGetRequest addAndGetRequest1 = addAndGetRequest_Builder2.build();
      boolean boolean0 = addAndGetRequest1.equals(addAndGetRequest0);
      assertFalse(boolean0);
      assertEquals((-873), addAndGetRequest1.getLimit());
      assertFalse(addAndGetRequest0.equals((Object)addAndGetRequest1));
      assertEquals(1, addAndGetRequest1.getCost());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis(431L);
      Instant instant0 = MockInstant.ofEpochMilli(431L);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withExpiration(duration0);
      addAndGetRequest_Builder1.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      addAndGetRequest_Builder1.withCost(1718);
      AddAndGetRequest addAndGetRequest1 = addAndGetRequest_Builder1.build();
      boolean boolean0 = addAndGetRequest1.equals(addAndGetRequest0);
      assertFalse(boolean0);
      assertEquals(1, addAndGetRequest0.getCost());
      assertEquals(1718, addAndGetRequest1.getCost());
      assertFalse(addAndGetRequest0.equals((Object)addAndGetRequest1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      addAndGetRequest_Builder0.withDistributed(true);
      Duration duration0 = Duration.ofMillis(1);
      Instant instant0 = MockInstant.now();
      addAndGetRequest_Builder0.withExpiration(duration0);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      boolean boolean0 = addAndGetRequest0.isDistributed();
      assertEquals(1, addAndGetRequest0.getCost());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withResource("XG$/pZ>^DnZTHo2");
      Duration duration0 = Duration.ofSeconds(2L, (-1L));
      addAndGetRequest_Builder1.withExpiration(duration0);
      Instant instant0 = MockInstant.ofEpochMilli(0);
      AddAndGetRequest.Builder addAndGetRequest_Builder2 = addAndGetRequest_Builder1.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder2.build();
      addAndGetRequest0.getResource();
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withResource("");
      Duration duration0 = Duration.ofSeconds((-1L), 479L);
      addAndGetRequest_Builder0.withExpiration(duration0);
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      addAndGetRequest_Builder1.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder0.build();
      addAndGetRequest0.getResource();
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMinutes((-8L));
      Instant instant0 = MockInstant.ofEpochSecond((-8L));
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withExpiration(duration0);
      addAndGetRequest_Builder1.withProperty("X2rIBIj3Gc;QC[7{CA");
      addAndGetRequest_Builder1.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder0.build();
      addAndGetRequest0.getProperty();
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withProperty("");
      Duration duration0 = Duration.ofMillis(1);
      addAndGetRequest_Builder0.withExpiration(duration0);
      Instant instant0 = MockInstant.ofEpochMilli((-1L));
      addAndGetRequest_Builder1.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      addAndGetRequest0.getProperty();
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis((-3L));
      Instant instant0 = MockInstant.ofEpochSecond((-3L), (-3L));
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withExpiration(duration0);
      addAndGetRequest_Builder0.withLimitName("Nd06+<ZLAI#<e8\"B(");
      addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      addAndGetRequest0.getLimitName();
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMinutes(1482L);
      addAndGetRequest_Builder0.withLimitName("");
      Instant instant0 = MockInstant.ofEpochSecond(1482L, 1482L);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withExpiration(duration0);
      addAndGetRequest_Builder1.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder0.build();
      addAndGetRequest0.getLimitName();
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofSeconds((-1L), 479L);
      addAndGetRequest_Builder0.withExpiration(duration0);
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      addAndGetRequest_Builder0.withLimit((-3002));
      addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder0.build();
      int int0 = addAndGetRequest0.getLimit();
      assertEquals(1, addAndGetRequest0.getCost());
      assertEquals((-3002), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis(1L);
      Instant instant0 = MockInstant.ofEpochSecond(1L);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withExpiration(duration0);
      addAndGetRequest_Builder1.withCost(0);
      AddAndGetRequest.Builder addAndGetRequest_Builder2 = addAndGetRequest_Builder1.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder2.build();
      int int0 = addAndGetRequest0.getCost();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofSeconds((-3L), (-2992L));
      Instant instant0 = MockInstant.ofEpochSecond((-3L));
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withCost((-211));
      AddAndGetRequest.Builder addAndGetRequest_Builder2 = addAndGetRequest_Builder1.withExpiration(duration0);
      addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder2.build();
      int int0 = addAndGetRequest0.getCost();
      assertEquals((-211), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofSeconds(431L, 431L);
      Instant instant0 = MockInstant.ofEpochSecond(431L);
      addAndGetRequest_Builder0.withExpiration(duration0);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      Instant instant1 = MockInstant.ofEpochMilli(431L);
      addAndGetRequest_Builder0.withEventTimestamp(instant1);
      AddAndGetRequest addAndGetRequest1 = addAndGetRequest_Builder1.build();
      boolean boolean0 = addAndGetRequest1.equals(addAndGetRequest0);
      assertEquals(1, addAndGetRequest1.getCost());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Instant instant0 = MockInstant.now();
      Duration duration0 = Duration.ofSeconds(2864L);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withExpiration(duration0);
      Duration duration1 = duration0.minusMinutes((-1100L));
      AddAndGetRequest.Builder addAndGetRequest_Builder2 = addAndGetRequest_Builder1.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder2.build();
      addAndGetRequest_Builder2.withExpiration(duration1);
      AddAndGetRequest addAndGetRequest1 = addAndGetRequest_Builder0.build();
      boolean boolean0 = addAndGetRequest0.equals(addAndGetRequest1);
      assertFalse(boolean0);
      assertEquals(1, addAndGetRequest1.getCost());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Instant instant0 = MockInstant.ofEpochMilli(413L);
      Duration duration0 = Duration.ofDays(413L);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withExpiration(duration0);
      addAndGetRequest_Builder1.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      AddAndGetRequest.Builder addAndGetRequest_Builder2 = addAndGetRequest_Builder0.withProperty(")Pc5Z:16S$W(");
      AddAndGetRequest addAndGetRequest1 = addAndGetRequest_Builder2.build();
      boolean boolean0 = addAndGetRequest0.equals(addAndGetRequest1);
      assertFalse(boolean0);
      assertEquals(1, addAndGetRequest1.getCost());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Instant instant0 = MockInstant.now();
      Duration duration0 = Duration.ofMinutes(726L);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withExpiration(duration0);
      AddAndGetRequest.Builder addAndGetRequest_Builder2 = addAndGetRequest_Builder1.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder2.build();
      addAndGetRequest_Builder2.withProperty("@V");
      AddAndGetRequest addAndGetRequest1 = addAndGetRequest_Builder1.build();
      boolean boolean0 = addAndGetRequest1.equals(addAndGetRequest0);
      assertFalse(boolean0);
      assertEquals(1, addAndGetRequest1.getCost());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis(431L);
      Instant instant0 = MockInstant.ofEpochMilli(431L);
      addAndGetRequest_Builder0.withExpiration(duration0);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withEventTimestamp(instant0);
      addAndGetRequest_Builder1.withProperty("&(n2drl$})~`Z");
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      AddAndGetRequest addAndGetRequest1 = addAndGetRequest_Builder1.build();
      boolean boolean0 = addAndGetRequest0.equals(addAndGetRequest1);
      assertTrue(boolean0);
      assertEquals(1, addAndGetRequest1.getCost());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofSeconds(425L);
      Instant instant0 = MockInstant.now();
      addAndGetRequest_Builder0.withExpiration(duration0);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      addAndGetRequest_Builder1.withLimitName("g!F`EUSv{1X(kg@E");
      AddAndGetRequest addAndGetRequest1 = addAndGetRequest_Builder1.build();
      boolean boolean0 = addAndGetRequest0.equals(addAndGetRequest1);
      assertEquals(1, addAndGetRequest1.getCost());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis(418L);
      Instant instant0 = MockInstant.ofEpochSecond(418L, 418L);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withLimitName("");
      AddAndGetRequest.Builder addAndGetRequest_Builder2 = addAndGetRequest_Builder0.withExpiration(duration0);
      addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      AddAndGetRequest addAndGetRequest1 = addAndGetRequest_Builder2.build();
      boolean boolean0 = addAndGetRequest1.equals(addAndGetRequest0);
      assertTrue(boolean0);
      assertEquals(1, addAndGetRequest1.getCost());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofSeconds(431L, 431L);
      Instant instant0 = MockInstant.ofEpochSecond(431L, 431L);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withExpiration(duration0);
      AddAndGetRequest.Builder addAndGetRequest_Builder2 = addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      addAndGetRequest_Builder2.withLimitName(", limit=");
      AddAndGetRequest addAndGetRequest1 = addAndGetRequest_Builder2.build();
      boolean boolean0 = addAndGetRequest1.equals(addAndGetRequest0);
      assertEquals(1, addAndGetRequest1.getCost());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Instant instant0 = MockInstant.ofEpochSecond(1L, 1L);
      Duration duration0 = Duration.ofMinutes(1L);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withExpiration(duration0);
      addAndGetRequest_Builder1.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      AddAndGetRequest.Builder addAndGetRequest_Builder2 = addAndGetRequest_Builder1.withResource("g!`ESv{1X(kg@E");
      AddAndGetRequest addAndGetRequest1 = addAndGetRequest_Builder2.build();
      boolean boolean0 = addAndGetRequest0.equals(addAndGetRequest1);
      assertEquals(1, addAndGetRequest1.getCost());
      assertFalse(boolean0);
      assertFalse(addAndGetRequest1.equals((Object)addAndGetRequest0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis(431L);
      Instant instant0 = MockInstant.ofEpochMilli(431L);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withExpiration(duration0);
      addAndGetRequest_Builder1.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      addAndGetRequest_Builder1.withResource("com.coveo.spillway.storage.utils.AddAndGetRequest");
      AddAndGetRequest addAndGetRequest1 = addAndGetRequest_Builder1.build();
      boolean boolean0 = addAndGetRequest1.equals(addAndGetRequest0);
      assertEquals(1, addAndGetRequest1.getCost());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      addAndGetRequest_Builder0.withResource("com.coveo.spillway.limit.utils.LimitUtils");
      Duration duration0 = Duration.ofSeconds(431L, 431L);
      Instant instant0 = MockInstant.ofEpochSecond(431L, 431L);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withExpiration(duration0);
      AddAndGetRequest.Builder addAndGetRequest_Builder2 = addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      AddAndGetRequest addAndGetRequest1 = addAndGetRequest_Builder2.build();
      boolean boolean0 = addAndGetRequest1.equals(addAndGetRequest0);
      assertTrue(boolean0);
      assertEquals(1, addAndGetRequest1.getCost());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofSeconds(425L);
      Instant instant0 = MockInstant.now();
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withExpiration(duration0);
      addAndGetRequest_Builder1.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      addAndGetRequest_Builder1.withLimit((-1747660544));
      AddAndGetRequest addAndGetRequest1 = addAndGetRequest_Builder1.build();
      boolean boolean0 = addAndGetRequest0.equals(addAndGetRequest1);
      assertFalse(boolean0);
      assertFalse(addAndGetRequest1.equals((Object)addAndGetRequest0));
      assertEquals(1, addAndGetRequest1.getCost());
      assertEquals((-1747660544), addAndGetRequest1.getLimit());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofHours((-23L));
      Instant instant0 = MockInstant.ofEpochSecond((-23L), (-23L));
      addAndGetRequest_Builder0.withExpiration(duration0);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      addAndGetRequest_Builder1.withCost((-2457));
      AddAndGetRequest addAndGetRequest1 = addAndGetRequest_Builder0.build();
      boolean boolean0 = addAndGetRequest1.equals(addAndGetRequest0);
      assertFalse(boolean0);
      assertFalse(addAndGetRequest0.equals((Object)addAndGetRequest1));
      assertEquals(1, addAndGetRequest0.getCost());
      assertEquals((-2457), addAndGetRequest1.getCost());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis(1);
      addAndGetRequest_Builder0.withExpiration(duration0);
      Instant instant0 = MockInstant.ofEpochMilli((-1L));
      addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder0.build();
      boolean boolean0 = addAndGetRequest0.equals((Object) null);
      assertEquals(1, addAndGetRequest0.getCost());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis(40);
      Instant instant0 = MockInstant.now();
      addAndGetRequest_Builder0.withExpiration(duration0);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      boolean boolean0 = addAndGetRequest0.equals(addAndGetRequest0);
      assertTrue(boolean0);
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis(1);
      addAndGetRequest_Builder0.withExpiration(duration0);
      Instant instant0 = MockInstant.ofEpochMilli((-1L));
      addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder0.build();
      boolean boolean0 = addAndGetRequest0.equals(instant0);
      assertEquals(1, addAndGetRequest0.getCost());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withResource("[wWE-<iijSg};{");
      Duration duration0 = Duration.ofMillis((-222L));
      AddAndGetRequest.Builder addAndGetRequest_Builder2 = addAndGetRequest_Builder1.withExpiration(duration0);
      Instant instant0 = MockInstant.ofEpochMilli((-855L));
      addAndGetRequest_Builder2.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      addAndGetRequest0.hashCode();
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withLimit(174);
      Duration duration0 = Duration.ofMillis(1);
      addAndGetRequest_Builder1.withExpiration(duration0);
      Instant instant0 = MockInstant.ofEpochMilli((-1L));
      addAndGetRequest_Builder1.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder0.build();
      int int0 = addAndGetRequest0.getLimit();
      assertEquals(1, addAndGetRequest0.getCost());
      assertEquals(174, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis(1L);
      Instant instant0 = MockInstant.ofEpochSecond(1L);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withExpiration(duration0);
      addAndGetRequest_Builder1.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder0.build();
      AddAndGetRequest.Builder addAndGetRequest_Builder2 = new AddAndGetRequest.Builder(addAndGetRequest0);
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis(1);
      addAndGetRequest_Builder0.withExpiration(duration0);
      Instant instant0 = MockInstant.ofEpochMilli((-1L));
      addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder0.build();
      addAndGetRequest0.getEventTimestamp();
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofSeconds(431L, 431L);
      Instant instant0 = MockInstant.ofEpochSecond(431L, 431L);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withExpiration(duration0);
      addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      addAndGetRequest0.getExpiration();
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis(1);
      addAndGetRequest_Builder0.withExpiration(duration0);
      Instant instant0 = MockInstant.ofEpochMilli((-1L));
      addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder0.build();
      addAndGetRequest0.isDistributed();
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis((-3L));
      Instant instant0 = MockInstant.ofEpochSecond((-3L), (-3L));
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withExpiration(duration0);
      addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      addAndGetRequest0.getLimitName();
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis(431L);
      Instant instant0 = MockInstant.ofEpochMilli(431L);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withExpiration(duration0);
      AddAndGetRequest.Builder addAndGetRequest_Builder2 = addAndGetRequest_Builder1.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder2.build();
      String string0 = addAndGetRequest0.toString();
      assertEquals("AddAndGetRequest{resource='null', limitName='null', property='null', expiration=PT0.431S, eventTimestamp=1970-01-01T00:00:00.431Z, cost=1, bucket=1970-01-01T00:00:00.431Z, limit=0}", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis(1);
      addAndGetRequest_Builder0.withExpiration(duration0);
      Instant instant0 = MockInstant.ofEpochMilli((-1L));
      addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder0.build();
      addAndGetRequest0.getProperty();
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis((-222L));
      addAndGetRequest_Builder0.withExpiration(duration0);
      Instant instant0 = MockInstant.ofEpochMilli((-855L));
      addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder0.build();
      int int0 = addAndGetRequest0.getLimit();
      assertEquals(0, int0);
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis(40);
      Instant instant0 = MockInstant.now();
      addAndGetRequest_Builder0.withExpiration(duration0);
      AddAndGetRequest.Builder addAndGetRequest_Builder1 = addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder1.build();
      addAndGetRequest0.getBucket();
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofSeconds((-1L), (-1L));
      addAndGetRequest_Builder0.withExpiration(duration0);
      Instant instant0 = MockInstant.ofEpochSecond((-1L));
      addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder0.build();
      addAndGetRequest0.getResource();
      assertEquals(1, addAndGetRequest0.getCost());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AddAndGetRequest.Builder addAndGetRequest_Builder0 = new AddAndGetRequest.Builder();
      Duration duration0 = Duration.ofMillis(1);
      addAndGetRequest_Builder0.withExpiration(duration0);
      Instant instant0 = MockInstant.ofEpochMilli((-1L));
      addAndGetRequest_Builder0.withEventTimestamp(instant0);
      AddAndGetRequest addAndGetRequest0 = addAndGetRequest_Builder0.build();
      int int0 = addAndGetRequest0.getCost();
      assertEquals(1, int0);
  }
}
