/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 20:40:39 GMT 2022
 */

package com.coveo.spillway.storage.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.coveo.spillway.limit.LimitKey;
import com.coveo.spillway.storage.utils.AddAndGetRequest;
import com.coveo.spillway.storage.utils.OverrideKeyRequest;
import java.time.Duration;
import java.time.Instant;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OverrideKeyRequest_ESTest extends OverrideKeyRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(456L);
      Duration duration0 = Duration.ofHours(456L);
      LimitKey limitKey0 = new LimitKey(":K{Z-", "I@;OrkPpGe.", "", true, instant0, duration0);
      OverrideKeyRequest overrideKeyRequest0 = new OverrideKeyRequest(limitKey0, 0);
      int int0 = overrideKeyRequest0.getNewValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AddAndGetRequest addAndGetRequest0 = mock(AddAndGetRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Instant) null).when(addAndGetRequest0).getBucket();
      doReturn((Duration) null).when(addAndGetRequest0).getExpiration();
      doReturn((String) null).when(addAndGetRequest0).getLimitName();
      doReturn((String) null).when(addAndGetRequest0).getProperty();
      doReturn((String) null).when(addAndGetRequest0).getResource();
      doReturn(false).when(addAndGetRequest0).isDistributed();
      LimitKey limitKey0 = LimitKey.fromRequest(addAndGetRequest0);
      OverrideKeyRequest overrideKeyRequest0 = new OverrideKeyRequest(limitKey0, 2668);
      int int0 = overrideKeyRequest0.getNewValue();
      assertEquals(2668, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(456L);
      Duration duration0 = Duration.ofHours(456L);
      LimitKey limitKey0 = new LimitKey(":K{Z-", "I@;OrkPpGe.", "", true, instant0, duration0);
      OverrideKeyRequest overrideKeyRequest0 = new OverrideKeyRequest(limitKey0, 0);
      overrideKeyRequest0.getLimitKey();
      assertEquals(0, overrideKeyRequest0.getNewValue());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AddAndGetRequest addAndGetRequest0 = mock(AddAndGetRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Instant) null).when(addAndGetRequest0).getBucket();
      doReturn((Duration) null).when(addAndGetRequest0).getExpiration();
      doReturn((String) null).when(addAndGetRequest0).getLimitName();
      doReturn((String) null).when(addAndGetRequest0).getProperty();
      doReturn((String) null).when(addAndGetRequest0).getResource();
      doReturn(false).when(addAndGetRequest0).isDistributed();
      LimitKey limitKey0 = LimitKey.fromRequest(addAndGetRequest0);
      OverrideKeyRequest overrideKeyRequest0 = new OverrideKeyRequest(limitKey0, 2668);
      overrideKeyRequest0.getLimitKey();
      assertEquals(2668, overrideKeyRequest0.getNewValue());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OverrideKeyRequest overrideKeyRequest0 = new OverrideKeyRequest((LimitKey) null, (-1));
      overrideKeyRequest0.getLimitKey();
      assertEquals((-1), overrideKeyRequest0.getNewValue());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OverrideKeyRequest overrideKeyRequest0 = new OverrideKeyRequest((LimitKey) null, (-1));
      int int0 = overrideKeyRequest0.getNewValue();
      assertEquals((-1), int0);
  }
}
