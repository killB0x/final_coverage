/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 20:34:25 GMT 2022
 */

package com.coveo.spillway.storage.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import com.coveo.spillway.storage.utils.Capacity;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Capacity_ESTest extends Capacity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Capacity capacity0 = new Capacity();
      capacity0.addAndGet((-1));
      capacity0.setTotal((-4570));
      capacity0.substractAndGet((-4570));
      assertEquals((-1), (int)capacity0.get());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Capacity capacity0 = new Capacity();
      capacity0.addAndGetWithLimit(1486, 1887);
      capacity0.getDelta();
      assertEquals(1486, (int)capacity0.getDelta());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Capacity capacity0 = new Capacity(1283);
      capacity0.substractAndGet(1283);
      capacity0.getDelta();
      assertEquals(0, (int)capacity0.get());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Capacity capacity0 = new Capacity((-1));
      capacity0.substractAndGet((-3018));
      capacity0.get();
      assertEquals(3018, (int)capacity0.getDelta());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Capacity capacity0 = new Capacity();
      capacity0.addAndGet((-1));
      capacity0.get();
      assertEquals((-1), (int)capacity0.getDelta());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Capacity capacity0 = new Capacity(1283);
      capacity0.setTotal(0);
      capacity0.addAndGetWithLimit(0, 0);
      assertEquals(0, (int)capacity0.get());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Capacity capacity0 = new Capacity();
      capacity0.addAndGetWithLimit((-4570), 0);
      assertEquals((-4570), (int)capacity0.getDelta());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Capacity capacity0 = new Capacity((-1));
      capacity0.substractAndGet((-1));
      capacity0.addAndGet((-1));
      capacity0.setTotal(0);
      capacity0.addAndGet(0);
      assertEquals(0, (int)capacity0.get());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Capacity capacity0 = new Capacity();
      capacity0.addAndGetWithLimit(1486, 1887);
      capacity0.addAndGetWithLimit((-4570), 0);
      assertEquals(1486, (int)capacity0.getDelta());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Capacity capacity0 = new Capacity(1283);
      Integer integer0 = capacity0.addAndGetWithLimit(0, 0);
      assertEquals(1283, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Capacity capacity0 = new Capacity(1);
      capacity0.setTotal(658);
      capacity0.addAndGet((-487));
      assertEquals((-487), (int)capacity0.getDelta());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Capacity capacity0 = new Capacity(1);
      capacity0.getDelta();
      assertEquals(1, (int)capacity0.get());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Capacity capacity0 = new Capacity();
      Integer integer0 = capacity0.get();
      assertEquals(0, (int)integer0);
  }
}
