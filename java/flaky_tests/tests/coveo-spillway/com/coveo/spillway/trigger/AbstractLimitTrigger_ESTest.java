/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 20:32:09 GMT 2022
 */

package com.coveo.spillway.trigger;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.coveo.spillway.limit.LimitDefinition;
import com.coveo.spillway.trigger.LimitTriggerCallback;
import com.coveo.spillway.trigger.ValueThresholdTrigger;
import java.time.Duration;
import java.time.Instant;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractLimitTrigger_ESTest extends AbstractLimitTrigger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LimitTriggerCallback limitTriggerCallback0 = LimitTriggerCallback.DO_NOTHING;
      ValueThresholdTrigger valueThresholdTrigger0 = new ValueThresholdTrigger((-1), limitTriggerCallback0);
      Instant instant0 = MockInstant.ofEpochMilli((-1));
      Duration duration0 = Duration.ZERO;
      LimitDefinition limitDefinition0 = new LimitDefinition("aP hXC8'RRQV\"k", (-1), duration0);
      // Undeclared exception!
      try { 
        valueThresholdTrigger0.callbackIfRequired((Object) limitTriggerCallback0, (-1), instant0, (-1), limitDefinition0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.coveo.spillway.limit.utils.LimitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LimitTriggerCallback limitTriggerCallback0 = LimitTriggerCallback.doNothing();
      ValueThresholdTrigger valueThresholdTrigger0 = new ValueThresholdTrigger(6, limitTriggerCallback0);
      Integer integer0 = new Integer(6);
      Instant instant0 = MockInstant.ofEpochMilli(6);
      Duration duration0 = Duration.ofDays(2722);
      LimitDefinition limitDefinition0 = new LimitDefinition("yKVy>I", 6, duration0);
      valueThresholdTrigger0.callbackIfRequired((Object) integer0, 6, instant0, 2722, limitDefinition0);
      assertEquals(6, valueThresholdTrigger0.getTriggerValue());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LimitTriggerCallback limitTriggerCallback0 = LimitTriggerCallback.doNothing();
      ValueThresholdTrigger valueThresholdTrigger0 = new ValueThresholdTrigger(6, limitTriggerCallback0);
      Integer integer0 = new Integer(6);
      Instant instant0 = MockInstant.now();
      Duration duration0 = Duration.ofDays(2722);
      LimitDefinition limitDefinition0 = new LimitDefinition("yKVy>I", 6, duration0);
      valueThresholdTrigger0.callbackIfRequired((Object) integer0, 6, instant0, 2722, limitDefinition0);
      assertEquals(6, valueThresholdTrigger0.getTriggerValue());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LimitTriggerCallback limitTriggerCallback0 = LimitTriggerCallback.doNothing();
      ValueThresholdTrigger valueThresholdTrigger0 = new ValueThresholdTrigger((-1), limitTriggerCallback0);
      Instant instant0 = MockInstant.ofEpochMilli((-1));
      Duration duration0 = Duration.ofHours((-1));
      LimitDefinition limitDefinition0 = new LimitDefinition(",;8auuxil{b%p?{xE", (-1), duration0);
      valueThresholdTrigger0.callbackIfRequired((Object) limitTriggerCallback0, (-1), instant0, (-1), limitDefinition0);
      assertEquals((-1), valueThresholdTrigger0.getTriggerValue());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LimitTriggerCallback limitTriggerCallback0 = LimitTriggerCallback.DO_NOTHING;
      ValueThresholdTrigger valueThresholdTrigger0 = new ValueThresholdTrigger(0, limitTriggerCallback0);
      // Undeclared exception!
      try { 
        valueThresholdTrigger0.callbackIfRequired((Object) limitTriggerCallback0, 0, (Instant) null, 0, (LimitDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.coveo.spillway.trigger.AbstractLimitTrigger", e);
      }
  }
}
