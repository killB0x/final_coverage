/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 20:31:08 GMT 2022
 */

package com.coveo.spillway.trigger;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.coveo.spillway.limit.LimitDefinition;
import com.coveo.spillway.trigger.LimitTriggerCallback;
import com.coveo.spillway.trigger.PercentageThresholdTrigger;
import java.time.Duration;
import java.time.chrono.ChronoLocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PercentageThresholdTrigger_ESTest extends PercentageThresholdTrigger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LimitTriggerCallback limitTriggerCallback0 = LimitTriggerCallback.doNothing();
      PercentageThresholdTrigger percentageThresholdTrigger0 = null;
      try {
        percentageThresholdTrigger0 = new PercentageThresholdTrigger(882.3004076, limitTriggerCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trigger Percentage must be between 0 and 1
         //
         verifyException("com.coveo.spillway.trigger.PercentageThresholdTrigger", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LimitTriggerCallback limitTriggerCallback0 = LimitTriggerCallback.doNothing();
      PercentageThresholdTrigger percentageThresholdTrigger0 = null;
      try {
        percentageThresholdTrigger0 = new PercentageThresholdTrigger(0.0, limitTriggerCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trigger Percentage must be between 0 and 1
         //
         verifyException("com.coveo.spillway.trigger.PercentageThresholdTrigger", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LimitTriggerCallback limitTriggerCallback0 = LimitTriggerCallback.DO_NOTHING;
      PercentageThresholdTrigger percentageThresholdTrigger0 = new PercentageThresholdTrigger(0.9757727976087126, limitTriggerCallback0);
      Duration duration0 = Duration.ofSeconds((long) 1054, (-1L));
      LimitDefinition limitDefinition0 = new LimitDefinition("", (-1), duration0);
      boolean boolean0 = percentageThresholdTrigger0.triggered((ChronoLocalDate) null, 1920, limitDefinition0);
      assertFalse(boolean0);
      assertEquals(0.9757727976087126, percentageThresholdTrigger0.getTriggerPercentage(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LimitTriggerCallback limitTriggerCallback0 = LimitTriggerCallback.DO_NOTHING;
      PercentageThresholdTrigger percentageThresholdTrigger0 = new PercentageThresholdTrigger(0.26154545351396397, limitTriggerCallback0);
      // Undeclared exception!
      try { 
        percentageThresholdTrigger0.triggered((Object) limitTriggerCallback0, (-393), (LimitDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.coveo.spillway.trigger.PercentageThresholdTrigger", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LimitTriggerCallback limitTriggerCallback0 = LimitTriggerCallback.DO_NOTHING;
      PercentageThresholdTrigger percentageThresholdTrigger0 = new PercentageThresholdTrigger(0.9757727976087126, limitTriggerCallback0);
      Duration duration0 = Duration.ZERO;
      LimitDefinition limitDefinition0 = new LimitDefinition((String) null, (-2138962433), duration0);
      boolean boolean0 = percentageThresholdTrigger0.triggered((Object) duration0, (-2138962433), limitDefinition0);
      assertTrue(boolean0);
      assertEquals(0.9757727976087126, percentageThresholdTrigger0.getTriggerPercentage(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LimitTriggerCallback limitTriggerCallback0 = LimitTriggerCallback.DO_NOTHING;
      PercentageThresholdTrigger percentageThresholdTrigger0 = null;
      try {
        percentageThresholdTrigger0 = new PercentageThresholdTrigger(1.0, limitTriggerCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trigger Percentage must be between 0 and 1
         //
         verifyException("com.coveo.spillway.trigger.PercentageThresholdTrigger", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LimitTriggerCallback limitTriggerCallback0 = LimitTriggerCallback.DO_NOTHING;
      PercentageThresholdTrigger percentageThresholdTrigger0 = null;
      try {
        percentageThresholdTrigger0 = new PercentageThresholdTrigger((-1172L), limitTriggerCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trigger Percentage must be between 0 and 1
         //
         verifyException("com.coveo.spillway.trigger.PercentageThresholdTrigger", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LimitTriggerCallback limitTriggerCallback0 = LimitTriggerCallback.DO_NOTHING;
      PercentageThresholdTrigger percentageThresholdTrigger0 = new PercentageThresholdTrigger(0.9757727976087126, limitTriggerCallback0);
      double double0 = percentageThresholdTrigger0.getTriggerPercentage();
      assertEquals(0.9757727976087126, double0, 0.01);
  }
}
