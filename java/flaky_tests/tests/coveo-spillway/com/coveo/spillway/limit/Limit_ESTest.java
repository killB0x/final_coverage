/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 20:40:23 GMT 2022
 */

package com.coveo.spillway.limit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.coveo.spillway.limit.Limit;
import com.coveo.spillway.limit.LimitDefinition;
import com.coveo.spillway.limit.override.LimitOverride;
import com.coveo.spillway.trigger.LimitTrigger;
import com.coveo.spillway.trigger.LimitTriggerCallback;
import com.coveo.spillway.trigger.PercentageThresholdTrigger;
import com.coveo.spillway.trigger.ValueThresholdTrigger;
import java.time.Duration;
import java.time.chrono.ChronoLocalDate;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Limit_ESTest extends Limit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = Duration.ofDays(0L);
      LimitDefinition limitDefinition0 = new LimitDefinition("}J", 1, duration0);
      LinkedList<LimitTrigger> linkedList0 = new LinkedList<LimitTrigger>();
      Limit<Object> limit0 = new Limit<Object>(limitDefinition0, false, (Function<Object, String>) null, (Set<LimitOverride>) null, linkedList0);
      limit0.toString();
      assertFalse(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Limit<LimitOverride> limit0 = new Limit<LimitOverride>((LimitDefinition) null, true, (Function<LimitOverride, String>) null, (Set<LimitOverride>) null, (List<LimitTrigger>) null);
      boolean boolean0 = limit0.isDistributed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = Duration.ofDays(0L);
      LimitDefinition limitDefinition0 = new LimitDefinition("}J", 1, duration0);
      LinkedList<LimitTrigger> linkedList0 = new LinkedList<LimitTrigger>();
      Limit<Object> limit0 = new Limit<Object>(limitDefinition0, false, (Function<Object, String>) null, (Set<LimitOverride>) null, linkedList0);
      limit0.getName();
      assertFalse(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.ofHours(0L);
      LimitDefinition limitDefinition0 = new LimitDefinition("", (-986), duration0);
      LinkedHashSet<LimitOverride> linkedHashSet0 = new LinkedHashSet<LimitOverride>();
      LinkedList<LimitTrigger> linkedList0 = new LinkedList<LimitTrigger>();
      Limit<LimitOverride> limit0 = new Limit<LimitOverride>(limitDefinition0, false, (Function<LimitOverride, String>) null, linkedHashSet0, linkedList0);
      limit0.getName();
      assertFalse(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Limit<LimitOverride> limit0 = new Limit<LimitOverride>((LimitDefinition) null, true, (Function<LimitOverride, String>) null, (Set<LimitOverride>) null, (List<LimitTrigger>) null);
      limit0.getLimitTriggers();
      assertTrue(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<LimitOverride> linkedHashSet0 = new LinkedHashSet<LimitOverride>();
      LinkedList<LimitTrigger> linkedList0 = new LinkedList<LimitTrigger>();
      LimitTriggerCallback limitTriggerCallback0 = LimitTriggerCallback.doNothing();
      ValueThresholdTrigger valueThresholdTrigger0 = new ValueThresholdTrigger(134, limitTriggerCallback0);
      linkedList0.add((LimitTrigger) valueThresholdTrigger0);
      Limit<LimitOverride> limit0 = new Limit<LimitOverride>((LimitDefinition) null, false, (Function<LimitOverride, String>) null, linkedHashSet0, linkedList0);
      limit0.getLimitTriggers();
      assertFalse(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Limit<LimitOverride> limit0 = new Limit<LimitOverride>((LimitDefinition) null, false, (Function<LimitOverride, String>) null, (Set<LimitOverride>) null, (List<LimitTrigger>) null);
      limit0.getLimitOverrides();
      assertFalse(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = Duration.ofNanos(936);
      LimitDefinition limitDefinition0 = new LimitDefinition("", 936, duration0);
      LinkedHashSet<LimitOverride> linkedHashSet0 = new LinkedHashSet<LimitOverride>();
      LimitOverride limitOverride0 = mock(LimitOverride.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(limitOverride0).toString();
      linkedHashSet0.add(limitOverride0);
      LinkedList<LimitTrigger> linkedList0 = new LinkedList<LimitTrigger>();
      Limit<Object> limit0 = new Limit<Object>(limitDefinition0, false, (Function<Object, String>) null, linkedHashSet0, linkedList0);
      limit0.getLimitOverrides();
      assertFalse(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = Duration.ofMillis(4274L);
      LimitDefinition limitDefinition0 = new LimitDefinition("com.coveo.spillway.limit.override.LimitOverride", (-890), duration0);
      LinkedHashSet<LimitOverride> linkedHashSet0 = new LinkedHashSet<LimitOverride>();
      LinkedList<LimitTrigger> linkedList0 = new LinkedList<LimitTrigger>();
      Limit<LimitOverride> limit0 = new Limit<LimitOverride>(limitDefinition0, false, (Function<LimitOverride, String>) null, linkedHashSet0, linkedList0);
      limit0.getExpiration();
      assertFalse(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Limit<LimitOverride> limit0 = new Limit<LimitOverride>((LimitDefinition) null, true, (Function<LimitOverride, String>) null, (Set<LimitOverride>) null, (List<LimitTrigger>) null);
      limit0.getDefinition();
      assertTrue(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.ofDays(0L);
      LimitDefinition limitDefinition0 = new LimitDefinition("}J", 1, duration0);
      LinkedList<LimitTrigger> linkedList0 = new LinkedList<LimitTrigger>();
      Limit<Object> limit0 = new Limit<Object>(limitDefinition0, false, (Function<Object, String>) null, (Set<LimitOverride>) null, linkedList0);
      limit0.getDefinition();
      assertFalse(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.ofHours((-1465L));
      LimitDefinition limitDefinition0 = new LimitDefinition("", (-631), duration0);
      LinkedHashSet<LimitOverride> linkedHashSet0 = new LinkedHashSet<LimitOverride>();
      LinkedList<LimitTrigger> linkedList0 = new LinkedList<LimitTrigger>();
      Limit<LimitOverride> limit0 = new Limit<LimitOverride>(limitDefinition0, true, (Function<LimitOverride, String>) null, linkedHashSet0, linkedList0);
      limit0.getDefinition();
      assertTrue(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = Duration.ofDays(0L);
      LimitDefinition limitDefinition0 = new LimitDefinition("}J", 1, duration0);
      LinkedList<LimitTrigger> linkedList0 = new LinkedList<LimitTrigger>();
      Limit<ChronoLocalDate> limit0 = new Limit<ChronoLocalDate>(limitDefinition0, false, (Function<ChronoLocalDate, String>) null, (Set<LimitOverride>) null, linkedList0);
      limit0.getCapacity();
      assertFalse(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = Duration.ofHours(0L);
      LimitDefinition limitDefinition0 = new LimitDefinition("", (-986), duration0);
      LinkedHashSet<LimitOverride> linkedHashSet0 = new LinkedHashSet<LimitOverride>();
      LinkedList<LimitTrigger> linkedList0 = new LinkedList<LimitTrigger>();
      Limit<LimitOverride> limit0 = new Limit<LimitOverride>(limitDefinition0, false, (Function<LimitOverride, String>) null, linkedHashSet0, linkedList0);
      limit0.getCapacity();
      assertFalse(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Limit<LimitOverride> limit0 = new Limit<LimitOverride>((LimitDefinition) null, false, (Function<LimitOverride, String>) null, (Set<LimitOverride>) null, (List<LimitTrigger>) null);
      // Undeclared exception!
      try { 
        limit0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.coveo.spillway.limit.Limit", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Limit<LimitOverride> limit0 = new Limit<LimitOverride>((LimitDefinition) null, false, (Function<LimitOverride, String>) null, (Set<LimitOverride>) null, (List<LimitTrigger>) null);
      // Undeclared exception!
      try { 
        limit0.getExpiration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.coveo.spillway.limit.Limit", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Limit<LimitOverride> limit0 = new Limit<LimitOverride>((LimitDefinition) null, false, (Function<LimitOverride, String>) null, (Set<LimitOverride>) null, (List<LimitTrigger>) null);
      // Undeclared exception!
      try { 
        limit0.getCapacity();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.coveo.spillway.limit.Limit", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashSet<LimitOverride> linkedHashSet0 = new LinkedHashSet<LimitOverride>();
      LinkedList<LimitTrigger> linkedList0 = new LinkedList<LimitTrigger>();
      Limit<LimitOverride> limit0 = new Limit<LimitOverride>((LimitDefinition) null, true, (Function<LimitOverride, String>) null, linkedHashSet0, linkedList0);
      // Undeclared exception!
      try { 
        limit0.getProperty((LimitOverride) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.coveo.spillway.limit.Limit", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.ofNanos(936);
      LimitDefinition limitDefinition0 = new LimitDefinition("", 936, duration0);
      LinkedHashSet<LimitOverride> linkedHashSet0 = new LinkedHashSet<LimitOverride>();
      LinkedList<LimitTrigger> linkedList0 = new LinkedList<LimitTrigger>();
      Limit<Object> limit0 = new Limit<Object>(limitDefinition0, false, (Function<Object, String>) null, linkedHashSet0, linkedList0);
      limit0.getLimitOverrides();
      assertFalse(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Limit<LimitOverride> limit0 = new Limit<LimitOverride>((LimitDefinition) null, false, (Function<LimitOverride, String>) null, (Set<LimitOverride>) null, (List<LimitTrigger>) null);
      // Undeclared exception!
      try { 
        limit0.getDefinition((LimitOverride) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.coveo.spillway.limit.Limit", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(0L);
      LimitDefinition limitDefinition0 = new LimitDefinition(")B^8V#[C,{", 1005, duration0);
      LinkedHashSet<LimitOverride> linkedHashSet0 = new LinkedHashSet<LimitOverride>();
      LinkedList<LimitTrigger> linkedList0 = new LinkedList<LimitTrigger>();
      Limit<PercentageThresholdTrigger> limit0 = new Limit<PercentageThresholdTrigger>(limitDefinition0, false, (Function<PercentageThresholdTrigger, String>) null, linkedHashSet0, linkedList0);
      limit0.getLimitTriggers();
      assertFalse(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Limit<Object> limit0 = new Limit<Object>((LimitDefinition) null, true, (Function<Object, String>) null, (Set<LimitOverride>) null, (List<LimitTrigger>) null);
      // Undeclared exception!
      try { 
        limit0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.coveo.spillway.limit.Limit", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<LimitOverride> linkedHashSet0 = new LinkedHashSet<LimitOverride>();
      LinkedList<LimitTrigger> linkedList0 = new LinkedList<LimitTrigger>();
      Limit<LimitOverride> limit0 = new Limit<LimitOverride>((LimitDefinition) null, false, (Function<LimitOverride, String>) null, linkedHashSet0, linkedList0);
      // Undeclared exception!
      try { 
        limit0.getLimitTriggers((LimitOverride) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.coveo.spillway.limit.Limit", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LimitDefinition limitDefinition0 = new LimitDefinition("iInai&=pZ)!Zp2#T", 0, (Duration) null);
      LinkedHashSet<LimitOverride> linkedHashSet0 = new LinkedHashSet<LimitOverride>();
      LinkedList<LimitTrigger> linkedList0 = new LinkedList<LimitTrigger>();
      Limit<Object> limit0 = new Limit<Object>(limitDefinition0, true, (Function<Object, String>) null, linkedHashSet0, linkedList0);
      limit0.getDefinition();
      assertTrue(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LimitDefinition limitDefinition0 = new LimitDefinition("4/3=CbDG:SQ a|}", 0, (Duration) null);
      LinkedHashSet<LimitOverride> linkedHashSet0 = new LinkedHashSet<LimitOverride>();
      LinkedList<LimitTrigger> linkedList0 = new LinkedList<LimitTrigger>();
      Limit<Object> limit0 = new Limit<Object>(limitDefinition0, true, (Function<Object, String>) null, linkedHashSet0, linkedList0);
      limit0.getCapacity();
      assertTrue(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(0L);
      LimitDefinition limitDefinition0 = new LimitDefinition(")B^8V#[C,{", 1005, duration0);
      LinkedHashSet<LimitOverride> linkedHashSet0 = new LinkedHashSet<LimitOverride>();
      LinkedList<LimitTrigger> linkedList0 = new LinkedList<LimitTrigger>();
      Limit<LimitOverride> limit0 = new Limit<LimitOverride>(limitDefinition0, false, (Function<LimitOverride, String>) null, linkedHashSet0, linkedList0);
      LimitOverride limitOverride0 = mock(LimitOverride.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        limit0.getCapacity(limitOverride0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.coveo.spillway.limit.Limit", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LimitDefinition limitDefinition0 = new LimitDefinition("4/3=CbDG:SQ a|}", 0, (Duration) null);
      LinkedHashSet<LimitOverride> linkedHashSet0 = new LinkedHashSet<LimitOverride>();
      LinkedList<LimitTrigger> linkedList0 = new LinkedList<LimitTrigger>();
      Limit<Object> limit0 = new Limit<Object>(limitDefinition0, true, (Function<Object, String>) null, linkedHashSet0, linkedList0);
      limit0.getExpiration();
      assertTrue(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Duration duration0 = Duration.ofNanos((-3204L));
      LimitDefinition limitDefinition0 = new LimitDefinition((String) null, (-2768), duration0);
      LinkedHashSet<LimitOverride> linkedHashSet0 = new LinkedHashSet<LimitOverride>();
      LinkedList<LimitTrigger> linkedList0 = new LinkedList<LimitTrigger>();
      Limit<Object> limit0 = new Limit<Object>(limitDefinition0, false, (Function<Object, String>) null, linkedHashSet0, linkedList0);
      limit0.getName();
      assertFalse(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Limit<LimitOverride> limit0 = new Limit<LimitOverride>((LimitDefinition) null, false, (Function<LimitOverride, String>) null, (Set<LimitOverride>) null, (List<LimitTrigger>) null);
      // Undeclared exception!
      try { 
        limit0.getExpiration((LimitOverride) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.coveo.spillway.limit.Limit", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Limit<LimitOverride> limit0 = new Limit<LimitOverride>((LimitDefinition) null, false, (Function<LimitOverride, String>) null, (Set<LimitOverride>) null, (List<LimitTrigger>) null);
      boolean boolean0 = limit0.isDistributed();
      assertFalse(boolean0);
  }
}
