/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 20:37:04 GMT 2022
 */

package com.coveo.spillway.limit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.coveo.spillway.limit.Limit;
import com.coveo.spillway.limit.LimitBuilder;
import com.coveo.spillway.limit.override.LimitOverride;
import com.coveo.spillway.trigger.LimitTrigger;
import com.coveo.spillway.trigger.LimitTriggerCallback;
import java.time.Duration;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LimitBuilder_ESTest extends LimitBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      LimitBuilder<String> limitBuilder0 = LimitBuilder.of("RKc=g,L2Ws|c%M}d:B", function0);
      LimitBuilder<String> limitBuilder1 = limitBuilder0.withDistributed(false);
      Limit<String> limit0 = limitBuilder1.build();
      assertEquals(0, limit0.getCapacity());
      assertFalse(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LimitBuilder<Object> limitBuilder0 = LimitBuilder.of("", (Function<Object, String>) null);
      limitBuilder0.to(1736);
      Limit<Object> limit0 = limitBuilder0.build();
      assertEquals(1736, limit0.getCapacity());
      assertTrue(limit0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LimitBuilder<Object> limitBuilder0 = LimitBuilder.of("gb}", (Function<Object, String>) null);
      Duration duration0 = Duration.ofMinutes((-3702));
      LimitBuilder<Object> limitBuilder1 = limitBuilder0.per(duration0);
      assertSame(limitBuilder0, limitBuilder1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LimitBuilder<String> limitBuilder0 = LimitBuilder.of("gb}");
      LimitBuilder<String> limitBuilder1 = limitBuilder0.withExceededCallback((LimitTriggerCallback) null);
      assertSame(limitBuilder0, limitBuilder1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LimitBuilder<Object> limitBuilder0 = LimitBuilder.of("gb}", (Function<Object, String>) null);
      LimitOverride limitOverride0 = mock(LimitOverride.class, new ViolatedAssumptionAnswer());
      LimitBuilder<Object> limitBuilder1 = limitBuilder0.withLimitOverride(limitOverride0);
      assertSame(limitBuilder1, limitBuilder0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LimitBuilder<Object> limitBuilder0 = LimitBuilder.of("gb}", (Function<Object, String>) null);
      LimitBuilder<Object> limitBuilder1 = limitBuilder0.to((-3702));
      Limit<Object> limit0 = limitBuilder1.build();
      assertTrue(limit0.isDistributed());
      assertEquals((-3702), limit0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LimitBuilder<String> limitBuilder0 = LimitBuilder.of("S:KGV");
      LimitBuilder<String> limitBuilder1 = limitBuilder0.withLimitTrigger((LimitTrigger) null);
      assertSame(limitBuilder0, limitBuilder1);
  }
}
