/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 20:28:03 GMT 2022
 */

package com.coveo.spillway.limit.override;

import org.junit.Test;
import static org.junit.Assert.*;
import com.coveo.spillway.limit.override.LimitOverrideDefinition;
import java.time.Duration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LimitOverrideDefinition_ESTest extends LimitOverrideDefinition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      LimitOverrideDefinition limitOverrideDefinition0 = new LimitOverrideDefinition("Gf?>keMF.q", (-2659), duration0);
      limitOverrideDefinition0.hashCode();
      assertEquals((-2659), limitOverrideDefinition0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = Duration.ofDays((-2999));
      LimitOverrideDefinition limitOverrideDefinition0 = new LimitOverrideDefinition((String) null, 0, duration0);
      limitOverrideDefinition0.getProperty();
      assertEquals(0, limitOverrideDefinition0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      LimitOverrideDefinition limitOverrideDefinition0 = new LimitOverrideDefinition("Gf?>keMF.q", (-2659), duration0);
      limitOverrideDefinition0.getProperty();
      assertEquals((-2659), limitOverrideDefinition0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LimitOverrideDefinition limitOverrideDefinition0 = new LimitOverrideDefinition("", (-1562), (Duration) null);
      limitOverrideDefinition0.getExpiration();
      assertEquals((-1562), limitOverrideDefinition0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(0L);
      LimitOverrideDefinition limitOverrideDefinition0 = new LimitOverrideDefinition("", 0, duration0);
      int int0 = limitOverrideDefinition0.getCapacity();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = Duration.ofMillis(1292);
      LimitOverrideDefinition limitOverrideDefinition0 = new LimitOverrideDefinition("", 1292, duration0);
      int int0 = limitOverrideDefinition0.getCapacity();
      assertEquals(1292, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      LimitOverrideDefinition limitOverrideDefinition0 = new LimitOverrideDefinition("Gf?>keMF.q", (-2659), duration0);
      LimitOverrideDefinition limitOverrideDefinition1 = new LimitOverrideDefinition("Gf?>keMF.q[-2659 calls/PT0S]", (-1), duration0);
      boolean boolean0 = limitOverrideDefinition0.equals(limitOverrideDefinition1);
      assertEquals((-1), limitOverrideDefinition1.getCapacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = Duration.ofDays((-2999));
      LimitOverrideDefinition limitOverrideDefinition0 = new LimitOverrideDefinition((String) null, 0, duration0);
      LimitOverrideDefinition limitOverrideDefinition1 = new LimitOverrideDefinition((String) null, 2147483645, (Duration) null);
      boolean boolean0 = limitOverrideDefinition1.equals(limitOverrideDefinition0);
      assertTrue(boolean0);
      assertEquals(2147483645, limitOverrideDefinition1.getCapacity());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = Duration.ofDays((-2999));
      LimitOverrideDefinition limitOverrideDefinition0 = new LimitOverrideDefinition("f&%'S3$X", 0, duration0);
      LimitOverrideDefinition limitOverrideDefinition1 = new LimitOverrideDefinition((String) null, 2147483645, (Duration) null);
      boolean boolean0 = limitOverrideDefinition1.equals(limitOverrideDefinition0);
      assertFalse(boolean0);
      assertEquals(2147483645, limitOverrideDefinition1.getCapacity());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = Duration.ofDays((-2999));
      LimitOverrideDefinition limitOverrideDefinition0 = new LimitOverrideDefinition("f&%'S3$X", 0, duration0);
      Object object0 = new Object();
      boolean boolean0 = limitOverrideDefinition0.equals(object0);
      assertEquals(0, limitOverrideDefinition0.getCapacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      LimitOverrideDefinition limitOverrideDefinition0 = new LimitOverrideDefinition("AU5x", 3148, duration0);
      boolean boolean0 = limitOverrideDefinition0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(3148, limitOverrideDefinition0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.ofMinutes((-1468));
      LimitOverrideDefinition limitOverrideDefinition0 = new LimitOverrideDefinition(";b.Z[bp", (-1468), duration0);
      boolean boolean0 = limitOverrideDefinition0.equals(limitOverrideDefinition0);
      assertTrue(boolean0);
      assertEquals((-1468), limitOverrideDefinition0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(0L);
      LimitOverrideDefinition limitOverrideDefinition0 = new LimitOverrideDefinition("", (-1), duration0);
      LimitOverrideDefinition limitOverrideDefinition1 = new LimitOverrideDefinition("", 0, duration0);
      boolean boolean0 = limitOverrideDefinition0.equals(limitOverrideDefinition1);
      assertEquals((-1), limitOverrideDefinition0.getCapacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = Duration.ofMillis(1L);
      LimitOverrideDefinition limitOverrideDefinition0 = new LimitOverrideDefinition((String) null, 0, duration0);
      limitOverrideDefinition0.hashCode();
      assertEquals(0, limitOverrideDefinition0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(0L);
      LimitOverrideDefinition limitOverrideDefinition0 = new LimitOverrideDefinition("", (-1), duration0);
      limitOverrideDefinition0.getExpiration();
      assertEquals((-1), limitOverrideDefinition0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(0L);
      LimitOverrideDefinition limitOverrideDefinition0 = new LimitOverrideDefinition("", (-1), duration0);
      int int0 = limitOverrideDefinition0.getCapacity();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(0L);
      LimitOverrideDefinition limitOverrideDefinition0 = new LimitOverrideDefinition("", (-1), duration0);
      limitOverrideDefinition0.getProperty();
      assertEquals((-1), limitOverrideDefinition0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(0L);
      LimitOverrideDefinition limitOverrideDefinition0 = new LimitOverrideDefinition("", (-1), duration0);
      String string0 = limitOverrideDefinition0.toString();
      assertEquals("[-1 calls/PT0S]", string0);
  }
}
