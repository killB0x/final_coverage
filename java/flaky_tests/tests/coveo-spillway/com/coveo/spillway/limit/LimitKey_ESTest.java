/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 20:26:22 GMT 2022
 */

package com.coveo.spillway.limit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.coveo.spillway.limit.LimitKey;
import com.coveo.spillway.storage.utils.AddAndGetRequest;
import java.time.Duration;
import java.time.Instant;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LimitKey_ESTest extends LimitKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Duration duration0 = Duration.ofNanos(0L);
      LimitKey limitKey0 = new LimitKey("", "", "", true, instant0, duration0);
      assertTrue(limitKey0.isDistributed());
      
      limitKey0.setDistributed(false);
      boolean boolean0 = limitKey0.isDistributed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Duration duration0 = Duration.ofNanos(3488L);
      AddAndGetRequest addAndGetRequest0 = mock(AddAndGetRequest.class, new ViolatedAssumptionAnswer());
      doReturn(instant0).when(addAndGetRequest0).getBucket();
      doReturn(duration0).when(addAndGetRequest0).getExpiration();
      doReturn(":x30W@-&-4m31").when(addAndGetRequest0).getLimitName();
      doReturn(":x30W@-&-4m31").when(addAndGetRequest0).getProperty();
      doReturn(":x30W@-&-4m31").when(addAndGetRequest0).getResource();
      doReturn(true).when(addAndGetRequest0).isDistributed();
      LimitKey limitKey0 = LimitKey.fromRequest(addAndGetRequest0);
      limitKey0.getResource();
      assertTrue(limitKey0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Duration duration0 = Duration.ofNanos(0L);
      LimitKey limitKey0 = new LimitKey("", "", "", true, instant0, duration0);
      limitKey0.getResource();
      assertTrue(limitKey0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AddAndGetRequest addAndGetRequest0 = mock(AddAndGetRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Instant) null).when(addAndGetRequest0).getBucket();
      doReturn((Duration) null).when(addAndGetRequest0).getExpiration();
      doReturn((String) null).when(addAndGetRequest0).getLimitName();
      doReturn((String) null).when(addAndGetRequest0).getProperty();
      doReturn((String) null).when(addAndGetRequest0).getResource();
      doReturn(false).when(addAndGetRequest0).isDistributed();
      LimitKey limitKey0 = LimitKey.fromRequest(addAndGetRequest0);
      limitKey0.getProperty();
      assertFalse(limitKey0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-252L), (-252L));
      LimitKey limitKey0 = new LimitKey("", (String) null, "", true, instant0, (Duration) null);
      String string0 = limitKey0.getProperty();
      assertTrue(limitKey0.isDistributed());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AddAndGetRequest addAndGetRequest0 = mock(AddAndGetRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Instant) null).when(addAndGetRequest0).getBucket();
      doReturn((Duration) null).when(addAndGetRequest0).getExpiration();
      doReturn((String) null).when(addAndGetRequest0).getLimitName();
      doReturn((String) null).when(addAndGetRequest0).getProperty();
      doReturn((String) null).when(addAndGetRequest0).getResource();
      doReturn(false).when(addAndGetRequest0).isDistributed();
      LimitKey limitKey0 = LimitKey.fromRequest(addAndGetRequest0);
      limitKey0.getLimitName();
      assertFalse(limitKey0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(682L);
      Duration duration0 = Duration.ofSeconds((-1532L));
      LimitKey limitKey0 = new LimitKey((String) null, "", (String) null, true, instant0, duration0);
      limitKey0.setLimitName(", property='");
      limitKey0.getLimitName();
      assertTrue(limitKey0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AddAndGetRequest addAndGetRequest0 = mock(AddAndGetRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Instant) null).when(addAndGetRequest0).getBucket();
      doReturn((Duration) null).when(addAndGetRequest0).getExpiration();
      doReturn((String) null).when(addAndGetRequest0).getLimitName();
      doReturn((String) null).when(addAndGetRequest0).getProperty();
      doReturn((String) null).when(addAndGetRequest0).getResource();
      doReturn(false).when(addAndGetRequest0).isDistributed();
      LimitKey limitKey0 = LimitKey.fromRequest(addAndGetRequest0);
      limitKey0.getExpiration();
      assertFalse(limitKey0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AddAndGetRequest addAndGetRequest0 = mock(AddAndGetRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Instant) null).when(addAndGetRequest0).getBucket();
      doReturn((Duration) null).when(addAndGetRequest0).getExpiration();
      doReturn((String) null).when(addAndGetRequest0).getLimitName();
      doReturn((String) null).when(addAndGetRequest0).getProperty();
      doReturn((String) null).when(addAndGetRequest0).getResource();
      doReturn(false).when(addAndGetRequest0).isDistributed();
      LimitKey limitKey0 = LimitKey.fromRequest(addAndGetRequest0);
      limitKey0.getBucket();
      assertFalse(limitKey0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        LimitKey.fromRequest((AddAndGetRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.coveo.spillway.limit.LimitKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Duration duration0 = Duration.ofNanos(3488L);
      AddAndGetRequest addAndGetRequest0 = mock(AddAndGetRequest.class, new ViolatedAssumptionAnswer());
      doReturn(instant0).when(addAndGetRequest0).getBucket();
      doReturn(duration0).when(addAndGetRequest0).getExpiration();
      doReturn(":x30W@-&-4m31").when(addAndGetRequest0).getLimitName();
      doReturn(":x30W@-&-4m31").when(addAndGetRequest0).getProperty();
      doReturn(":x30W@-&-4m31").when(addAndGetRequest0).getResource();
      doReturn(true).when(addAndGetRequest0).isDistributed();
      LimitKey limitKey0 = LimitKey.fromRequest(addAndGetRequest0);
      limitKey0.hashCode();
      assertTrue(limitKey0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AddAndGetRequest addAndGetRequest0 = mock(AddAndGetRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Instant) null).when(addAndGetRequest0).getBucket();
      doReturn((Duration) null).when(addAndGetRequest0).getExpiration();
      doReturn((String) null).when(addAndGetRequest0).getLimitName();
      doReturn((String) null).when(addAndGetRequest0).getProperty();
      doReturn((String) null).when(addAndGetRequest0).getResource();
      doReturn(false).when(addAndGetRequest0).isDistributed();
      LimitKey limitKey0 = LimitKey.fromRequest(addAndGetRequest0);
      limitKey0.hashCode();
      assertFalse(limitKey0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Duration duration0 = Duration.ofDays(0L);
      AddAndGetRequest addAndGetRequest0 = mock(AddAndGetRequest.class, new ViolatedAssumptionAnswer());
      doReturn(instant0).when(addAndGetRequest0).getBucket();
      doReturn(duration0).when(addAndGetRequest0).getExpiration();
      doReturn("gU").when(addAndGetRequest0).getLimitName();
      doReturn((String) null).when(addAndGetRequest0).getProperty();
      doReturn("x_^-DOZd").when(addAndGetRequest0).getResource();
      doReturn(false).when(addAndGetRequest0).isDistributed();
      LimitKey limitKey0 = LimitKey.fromRequest(addAndGetRequest0);
      limitKey0.hashCode();
      assertFalse(limitKey0.isDistributed());
      assertEquals("x_^-DOZd", limitKey0.getResource());
      assertEquals("gU", limitKey0.getLimitName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AddAndGetRequest addAndGetRequest0 = mock(AddAndGetRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Instant) null).when(addAndGetRequest0).getBucket();
      doReturn((Duration) null).when(addAndGetRequest0).getExpiration();
      doReturn((String) null).when(addAndGetRequest0).getLimitName();
      doReturn((String) null).when(addAndGetRequest0).getProperty();
      doReturn((String) null).when(addAndGetRequest0).getResource();
      doReturn(false).when(addAndGetRequest0).isDistributed();
      LimitKey limitKey0 = LimitKey.fromRequest(addAndGetRequest0);
      AddAndGetRequest addAndGetRequest1 = mock(AddAndGetRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Instant) null).when(addAndGetRequest1).getBucket();
      doReturn((Duration) null).when(addAndGetRequest1).getExpiration();
      doReturn((String) null).when(addAndGetRequest1).getLimitName();
      doReturn((String) null).when(addAndGetRequest1).getProperty();
      doReturn((String) null).when(addAndGetRequest1).getResource();
      doReturn(false).when(addAndGetRequest1).isDistributed();
      Instant instant0 = MockInstant.ofEpochMilli((-838L));
      limitKey0.setBucket(instant0);
      LimitKey limitKey1 = LimitKey.fromRequest(addAndGetRequest1);
      boolean boolean0 = limitKey1.equals(limitKey0);
      assertFalse(limitKey1.isDistributed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AddAndGetRequest addAndGetRequest0 = mock(AddAndGetRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Instant) null).when(addAndGetRequest0).getBucket();
      doReturn((Duration) null).when(addAndGetRequest0).getExpiration();
      doReturn((String) null).when(addAndGetRequest0).getLimitName();
      doReturn((String) null).when(addAndGetRequest0).getProperty();
      doReturn((String) null).when(addAndGetRequest0).getResource();
      doReturn(false).when(addAndGetRequest0).isDistributed();
      LimitKey limitKey0 = LimitKey.fromRequest(addAndGetRequest0);
      AddAndGetRequest addAndGetRequest1 = mock(AddAndGetRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Instant) null).when(addAndGetRequest1).getBucket();
      doReturn((Duration) null).when(addAndGetRequest1).getExpiration();
      doReturn((String) null).when(addAndGetRequest1).getLimitName();
      doReturn((String) null).when(addAndGetRequest1).getProperty();
      doReturn((String) null).when(addAndGetRequest1).getResource();
      doReturn(false).when(addAndGetRequest1).isDistributed();
      LimitKey limitKey1 = LimitKey.fromRequest(addAndGetRequest1);
      boolean boolean0 = limitKey1.equals(limitKey0);
      assertTrue(boolean0);
      assertFalse(limitKey1.isDistributed());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Duration duration0 = Duration.ZERO;
      LimitKey limitKey0 = new LimitKey("K", "K", "K", true, instant0, duration0);
      LimitKey limitKey1 = new LimitKey("K", "K", (String) null, true, instant0, duration0);
      boolean boolean0 = limitKey1.equals(limitKey0);
      assertTrue(limitKey1.isDistributed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-1L));
      Duration duration0 = Duration.ofNanos((-1L));
      LimitKey limitKey0 = new LimitKey("K", (String) null, "K", false, instant0, duration0);
      limitKey0.setResource((String) null);
      LimitKey limitKey1 = new LimitKey((String) null, "K", "K", false, instant0, duration0);
      assertFalse(limitKey1.equals((Object)limitKey0));
      
      limitKey1.setLimitName((String) null);
      boolean boolean0 = limitKey0.equals(limitKey1);
      assertTrue(limitKey1.equals((Object)limitKey0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Duration duration0 = Duration.ZERO;
      LimitKey limitKey0 = new LimitKey("K", "K", "K", false, instant0, duration0);
      LimitKey limitKey1 = new LimitKey("K", "com.coveo.spillway.storage.utils.AddAndGetRequest$1", "K", false, instant0, duration0);
      boolean boolean0 = limitKey0.equals(limitKey1);
      assertEquals("K", limitKey1.getProperty());
      assertFalse(boolean0);
      assertFalse(limitKey1.isDistributed());
      assertEquals("K", limitKey1.getResource());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-1479L));
      Duration duration0 = Duration.ofNanos((-1479L));
      LimitKey limitKey0 = new LimitKey((String) null, "K", (String) null, false, instant0, duration0);
      LimitKey limitKey1 = new LimitKey("K", (String) null, "K", false, instant0, duration0);
      boolean boolean0 = limitKey0.equals(limitKey1);
      assertFalse(limitKey1.isDistributed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Duration duration0 = Duration.ZERO;
      LimitKey limitKey0 = new LimitKey("K", "K", "K", false, instant0, duration0);
      LimitKey limitKey1 = new LimitKey("J", "K", "J", false, instant0, duration0);
      boolean boolean0 = limitKey1.equals(limitKey0);
      assertEquals("J", limitKey1.getProperty());
      assertEquals("K", limitKey1.getLimitName());
      assertEquals("J", limitKey1.getResource());
      assertFalse(boolean0);
      assertFalse(limitKey1.isDistributed());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-1L));
      Duration duration0 = Duration.ofNanos((-1L));
      LimitKey limitKey0 = new LimitKey("K", (String) null, "K", false, instant0, duration0);
      limitKey0.setResource((String) null);
      LimitKey limitKey1 = new LimitKey((String) null, "K", "K", false, instant0, duration0);
      boolean boolean0 = limitKey0.equals(limitKey1);
      assertFalse(limitKey1.equals((Object)limitKey0));
      assertFalse(boolean0);
      assertFalse(limitKey1.isDistributed());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Duration duration0 = Duration.ZERO;
      LimitKey limitKey0 = new LimitKey("K", "K", "K", false, instant0, duration0);
      boolean boolean0 = limitKey0.equals(duration0);
      assertFalse(limitKey0.isDistributed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LimitKey limitKey0 = new LimitKey("MeOIr?\"mZII", "MeOIr?\"mZII", "-[MJFRw|yVwf:Pv", false, (Instant) null, (Duration) null);
      boolean boolean0 = limitKey0.equals((Object) null);
      assertEquals("MeOIr?\"mZII", limitKey0.getResource());
      assertFalse(limitKey0.isDistributed());
      assertFalse(boolean0);
      assertEquals("-[MJFRw|yVwf:Pv", limitKey0.getProperty());
      assertEquals("MeOIr?\"mZII", limitKey0.getLimitName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Duration duration0 = Duration.ZERO;
      LimitKey limitKey0 = new LimitKey("K", "K", "K", false, instant0, duration0);
      boolean boolean0 = limitKey0.equals(limitKey0);
      assertFalse(limitKey0.isDistributed());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Duration duration0 = Duration.ZERO;
      LimitKey limitKey0 = new LimitKey("K", "K", "K", false, instant0, duration0);
      LimitKey limitKey1 = new LimitKey("K", "K", "J", false, instant0, duration0);
      boolean boolean0 = limitKey1.equals(limitKey0);
      assertEquals("K", limitKey1.getLimitName());
      assertFalse(limitKey1.isDistributed());
      assertEquals("K", limitKey1.getResource());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(682L);
      Duration duration0 = Duration.ofSeconds((-1532L));
      LimitKey limitKey0 = new LimitKey((String) null, "", (String) null, true, instant0, duration0);
      limitKey0.getBucket();
      assertTrue(limitKey0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(682L);
      Duration duration0 = Duration.ofSeconds((-1532L));
      LimitKey limitKey0 = new LimitKey((String) null, "", (String) null, true, instant0, duration0);
      String string0 = limitKey0.getResource();
      assertTrue(limitKey0.isDistributed());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AddAndGetRequest addAndGetRequest0 = mock(AddAndGetRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Instant) null).when(addAndGetRequest0).getBucket();
      doReturn((Duration) null).when(addAndGetRequest0).getExpiration();
      doReturn((String) null).when(addAndGetRequest0).getLimitName();
      doReturn((String) null).when(addAndGetRequest0).getProperty();
      doReturn((String) null).when(addAndGetRequest0).getResource();
      doReturn(false).when(addAndGetRequest0).isDistributed();
      LimitKey limitKey0 = LimitKey.fromRequest(addAndGetRequest0);
      String string0 = limitKey0.toString();
      assertEquals("LimitKey{resource='null', limitName='null', property='null', bucket=null', expiration=null}", string0);
      assertFalse(limitKey0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Duration duration0 = Duration.ofDays(0L);
      AddAndGetRequest addAndGetRequest0 = mock(AddAndGetRequest.class, new ViolatedAssumptionAnswer());
      doReturn(instant0).when(addAndGetRequest0).getBucket();
      doReturn(duration0).when(addAndGetRequest0).getExpiration();
      doReturn("gU").when(addAndGetRequest0).getLimitName();
      doReturn((String) null).when(addAndGetRequest0).getProperty();
      doReturn("x_^-DOZd").when(addAndGetRequest0).getResource();
      doReturn(false).when(addAndGetRequest0).isDistributed();
      LimitKey limitKey0 = LimitKey.fromRequest(addAndGetRequest0);
      limitKey0.getExpiration();
      assertEquals("gU", limitKey0.getLimitName());
      assertEquals("x_^-DOZd", limitKey0.getResource());
      assertFalse(limitKey0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Duration duration0 = Duration.ofNanos(3488L);
      AddAndGetRequest addAndGetRequest0 = mock(AddAndGetRequest.class, new ViolatedAssumptionAnswer());
      doReturn(instant0).when(addAndGetRequest0).getBucket();
      doReturn(duration0).when(addAndGetRequest0).getExpiration();
      doReturn(":x30W@-&-4m31").when(addAndGetRequest0).getLimitName();
      doReturn(":x30W@-&-4m31").when(addAndGetRequest0).getProperty();
      doReturn(":x30W@-&-4m31").when(addAndGetRequest0).getResource();
      doReturn(true).when(addAndGetRequest0).isDistributed();
      LimitKey limitKey0 = LimitKey.fromRequest(addAndGetRequest0);
      limitKey0.getProperty();
      assertTrue(limitKey0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Duration duration0 = Duration.ZERO;
      LimitKey limitKey0 = new LimitKey("K", "K", "K", true, instant0, duration0);
      limitKey0.setExpiration(duration0);
      assertTrue(limitKey0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(682L);
      Duration duration0 = Duration.ofSeconds((-1532L));
      LimitKey limitKey0 = new LimitKey((String) null, "", (String) null, true, instant0, duration0);
      String string0 = limitKey0.getLimitName();
      assertTrue(limitKey0.isDistributed());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AddAndGetRequest addAndGetRequest0 = mock(AddAndGetRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Instant) null).when(addAndGetRequest0).getBucket();
      doReturn((Duration) null).when(addAndGetRequest0).getExpiration();
      doReturn((String) null).when(addAndGetRequest0).getLimitName();
      doReturn((String) null).when(addAndGetRequest0).getProperty();
      doReturn((String) null).when(addAndGetRequest0).getResource();
      doReturn(false).when(addAndGetRequest0).isDistributed();
      LimitKey limitKey0 = LimitKey.fromRequest(addAndGetRequest0);
      limitKey0.setProperty("");
      assertFalse(limitKey0.isDistributed());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-269L), (-269L));
      LimitKey limitKey0 = new LimitKey("", "", "", true, instant0, (Duration) null);
      boolean boolean0 = limitKey0.isDistributed();
      assertTrue(boolean0);
  }
}
