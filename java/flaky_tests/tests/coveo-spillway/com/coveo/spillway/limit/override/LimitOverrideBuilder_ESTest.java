/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 20:35:44 GMT 2022
 */

package com.coveo.spillway.limit.override;

import org.junit.Test;
import static org.junit.Assert.*;
import com.coveo.spillway.limit.override.LimitOverride;
import com.coveo.spillway.limit.override.LimitOverrideBuilder;
import com.coveo.spillway.trigger.LimitTrigger;
import com.coveo.spillway.trigger.LimitTriggerCallback;
import java.time.Duration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LimitOverrideBuilder_ESTest extends LimitOverrideBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LimitOverrideBuilder limitOverrideBuilder0 = LimitOverrideBuilder.of("[");
      LimitOverrideBuilder limitOverrideBuilder1 = limitOverrideBuilder0.to(614);
      LimitOverride limitOverride0 = limitOverrideBuilder1.build();
      assertEquals(614, limitOverride0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LimitOverrideBuilder limitOverrideBuilder0 = LimitOverrideBuilder.of("2'");
      LimitOverride limitOverride0 = limitOverrideBuilder0.build();
      assertEquals(0, limitOverride0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LimitOverrideBuilder limitOverrideBuilder0 = LimitOverrideBuilder.of("2'");
      LimitOverrideBuilder limitOverrideBuilder1 = limitOverrideBuilder0.withLimitTrigger((LimitTrigger) null);
      assertSame(limitOverrideBuilder0, limitOverrideBuilder1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LimitOverrideBuilder limitOverrideBuilder0 = LimitOverrideBuilder.of("2'");
      limitOverrideBuilder0.to((-915));
      LimitOverride limitOverride0 = limitOverrideBuilder0.build();
      assertEquals((-915), limitOverride0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LimitOverrideBuilder limitOverrideBuilder0 = LimitOverrideBuilder.of("2'");
      Duration duration0 = Duration.ZERO;
      LimitOverrideBuilder limitOverrideBuilder1 = limitOverrideBuilder0.per(duration0);
      assertSame(limitOverrideBuilder0, limitOverrideBuilder1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LimitOverrideBuilder limitOverrideBuilder0 = LimitOverrideBuilder.of("");
      LimitTriggerCallback limitTriggerCallback0 = LimitTriggerCallback.doNothing();
      LimitOverrideBuilder limitOverrideBuilder1 = limitOverrideBuilder0.withExceededCallback(limitTriggerCallback0);
      assertSame(limitOverrideBuilder1, limitOverrideBuilder0);
  }
}
