/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 05:25:19 GMT 2022
 */

package io.appulse.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.appulse.utils.BytesExtendableArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BytesExtendableArray_ESTest extends BytesExtendableArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      // Undeclared exception!
      bytesExtendableArray0.writerIndex(2147483638);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray(3117);
      bytesExtendableArray0.checkWriteBounds(3117, 3117);
      assertEquals(6234, bytesExtendableArray0.capacity());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      bytesExtendableArray0.writerIndex(1558);
      bytesExtendableArray0.writerIndex(1558);
      assertEquals(1558, bytesExtendableArray0.writerIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray(0);
      bytesExtendableArray0.writerIndex(0);
      assertEquals(1, bytesExtendableArray0.capacity());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      bytesExtendableArray0.checkWriteBounds((-90), (-90));
      assertEquals(16, bytesExtendableArray0.capacity());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      boolean boolean0 = bytesExtendableArray0.canEqual(bytesExtendableArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      // Undeclared exception!
      bytesExtendableArray0.checkWriteBounds(Integer.MAX_VALUE, 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray(2147483639);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = null;
      try {
        bytesExtendableArray0 = new BytesExtendableArray((-772));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -772
         //
         verifyException("io.appulse.utils.BytesFixedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray(270);
      bytesExtendableArray0.writerIndex(444);
      assertEquals(444, bytesExtendableArray0.writerIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      // Undeclared exception!
      try { 
        bytesExtendableArray0.writerIndex((-1264));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.appulse.utils.BytesExtendableArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      BytesExtendableArray bytesExtendableArray1 = new BytesExtendableArray();
      boolean boolean0 = bytesExtendableArray1.equals(bytesExtendableArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      boolean boolean0 = bytesExtendableArray0.equals(bytesExtendableArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      Object object0 = new Object();
      boolean boolean0 = bytesExtendableArray0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      Object object0 = new Object();
      boolean boolean0 = bytesExtendableArray0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      boolean boolean0 = bytesExtendableArray0.isAutoResizable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      bytesExtendableArray0.hashCode();
  }
}
