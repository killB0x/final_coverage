/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 05:27:36 GMT 2022
 */

package io.appulse.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.appulse.utils.ReflectionUtils;
import java.lang.reflect.InvocationTargetException;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReflectionUtils_ESTest extends ReflectionUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      Object object1 = ReflectionUtils.invokeMethodOf(object0, "getClass", objectArray0);
      assertEquals("class java.lang.Object", object1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        ReflectionUtils.invokeMethodOf(object0, "notify", objectArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ReflectionUtils.invokeMethodOf(object0, "finalize", (Object[]) null);
        fail("Expecting exception: IllegalAccessException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[4] = object0;
      // Undeclared exception!
      try { 
        ReflectionUtils.invokeMethodOf(objectArray0[4], "getClass", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ReflectionUtils.invokeMethodOf(object0, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name is marked non-null but is null
         //
         verifyException("io.appulse.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        ReflectionUtils.invokeMethodOf((Object) null, "#xws;r ,=v#of ", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj is marked non-null but is null
         //
         verifyException("io.appulse.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      Object object1 = ReflectionUtils.invokeMethodOf(object0, "#xws;r ,=v#of ", objectArray0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      Optional<Object> optional0 = ReflectionUtils.getFieldValueFrom(object0, "getClass");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ReflectionUtils.getFieldValueFrom(object0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name is marked non-null but is null
         //
         verifyException("io.appulse.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtils.getFieldValueFrom((Object) null, "r0&K0;`k8\"'d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj is marked non-null but is null
         //
         verifyException("io.appulse.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Optional<Object> optional0 = ReflectionUtils.getFieldValueFrom("value", "value");
      assertNotNull(optional0);
  }
}
