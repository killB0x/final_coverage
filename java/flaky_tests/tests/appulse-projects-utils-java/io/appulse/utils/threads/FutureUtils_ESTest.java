/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 05:36:24 GMT 2022
 */

package io.appulse.utils.threads;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.appulse.utils.threads.FutureUtils;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.Future;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FutureUtils_ESTest extends FutureUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CompletionStage<Integer>[] completionStageArray0 = (CompletionStage<Integer>[]) Array.newInstance(CompletionStage.class, 1);
      // Undeclared exception!
      try { 
        FutureUtils.firstCompletedWithoutException((CompletionStage<? extends Integer>[]) completionStageArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.appulse.utils.threads.FutureUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        FutureUtils.completedExceptionally((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.CompletableFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        FutureUtils.toCompletableFuture((Future<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // future is marked non-null but is null
         //
         verifyException("io.appulse.utils.threads.FutureUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CompletableFuture<Integer> completableFuture0 = new CompletableFuture<Integer>();
      CompletableFuture<Integer> completableFuture1 = FutureUtils.toCompletableFuture((Future<Integer>) completableFuture0);
      assertFalse(completableFuture1.equals((Object)completableFuture0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        FutureUtils.firstCompletedWithoutException((List<? extends CompletionStage<?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // futures is marked non-null but is null
         //
         verifyException("io.appulse.utils.threads.FutureUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<CompletionStage<Integer>> linkedList0 = new LinkedList<CompletionStage<Integer>>();
      CompletableFuture<Integer> completableFuture0 = FutureUtils.firstCompletedWithoutException((List<? extends CompletionStage<? extends Integer>>) linkedList0);
      assertNotNull(completableFuture0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        FutureUtils.firstCompletedWithoutException((CompletionStage<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // futures is marked non-null but is null
         //
         verifyException("io.appulse.utils.threads.FutureUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CompletionStage<Integer>[] completionStageArray0 = (CompletionStage<Integer>[]) Array.newInstance(CompletionStage.class, 0);
      CompletableFuture<Integer> completableFuture0 = FutureUtils.firstCompletedWithoutException((CompletionStage<? extends Integer>[]) completionStageArray0);
      assertNotNull(completableFuture0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      CompletableFuture<Integer> completableFuture0 = FutureUtils.completedExceptionally((Throwable) mockThrowable0);
      assertNotNull(completableFuture0);
  }
}
