/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 05:11:35 GMT 2022
 */

package io.appulse.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.appulse.utils.Bytes;
import io.appulse.utils.BytesByteBuffer;
import io.appulse.utils.BytesExtendableArray;
import io.appulse.utils.BytesFixedArray;
import io.appulse.utils.BytesPool;
import io.appulse.utils.HexUtil;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HexUtil_ESTest extends HexUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = HexUtil.toByteArray("0f");
      assertArrayEquals(new byte[] {(byte)15}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)127;
      String string0 = HexUtil.prettyHexDump(byteArray0);
      assertEquals("         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 00 00 00 00 00 00 7F                         |........        |\n+--------+-------------------------------------------------+----------------+", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)31;
      String string0 = HexUtil.prettyHexDump(byteArray0);
      assertEquals("         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 00 00 1F                                     |....            |\n+--------+-------------------------------------------------+----------------+", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      String string0 = HexUtil.toHexString(byteArray0);
      assertEquals("BA000000", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = HexUtil.toHexString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = HexUtil.toByteArray("");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = HexUtil.prettyHexDump(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char char0 = HexUtil.byteToChar((byte)65);
      assertEquals('A', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      // Undeclared exception!
      HexUtil.prettyHexDump((Bytes) bytesExtendableArray0, 70, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BytesFixedArray bytesFixedArray0 = new BytesFixedArray();
      // Undeclared exception!
      try { 
        HexUtil.prettyHexDump((Bytes) bytesFixedArray0, 48, 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.appulse.utils.BytesFixedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire((-2));
      bytesPool_PooledBytes0.close();
      // Undeclared exception!
      try { 
        HexUtil.prettyHexDump((Bytes) bytesPool_PooledBytes0, (-2659), (-2659));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pooled bytes buffer already released
         //
         verifyException("io.appulse.utils.BytesPool$PooledBytes", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(5207);
      BytesByteBuffer bytesByteBuffer0 = BytesByteBuffer.copy(byteBuffer0);
      Bytes bytes0 = bytesByteBuffer0.writerIndex(5207);
      HexUtil.prettyHexDump(bytes0);
      // Undeclared exception!
      HexUtil.prettyHexDump(bytes0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BytesFixedArray bytesFixedArray0 = new BytesFixedArray();
      // Undeclared exception!
      try { 
        HexUtil.prettyHexDump((Bytes) bytesFixedArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.appulse.utils.BytesFixedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.new PooledBytes((Bytes) null);
      // Undeclared exception!
      try { 
        HexUtil.prettyHexDump((Bytes) bytesPool_PooledBytes0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pooled bytes buffer already released
         //
         verifyException("io.appulse.utils.BytesPool$PooledBytes", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      bytesExtendableArray0.write4B(0.0);
      String string0 = HexUtil.prettyHexDump((Bytes) bytesExtendableArray0, (int) (byte)0, 2);
      assertEquals("         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 00 00 00                                     |....            |\n+--------+-------------------------------------------------+----------------+", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      String string0 = HexUtil.prettyHexDump((Bytes) bytesExtendableArray0, 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BytesFixedArray bytesFixedArray0 = new BytesFixedArray(24);
      // Undeclared exception!
      try { 
        HexUtil.prettyHexDump((Bytes) bytesFixedArray0, 24, (-20));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // expected: 0 <= offset(24) <= offset+length(-20) <= buffer.capacity(24)
         //
         verifyException("io.appulse.utils.HexUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char char0 = HexUtil.byteToChar(48);
      assertEquals('0', char0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char char0 = HexUtil.byteToChar(977);
      assertEquals('.', char0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      String string0 = HexUtil.prettyHexDump((Bytes) bytesExtendableArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Bytes bytes0 = Bytes.resizableArray();
      // Undeclared exception!
      try { 
        HexUtil.prettyHexDump(bytes0, 680, 680);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // expected: 0 <= offset(680) <= offset+length(680) <= buffer.capacity(16)
         //
         verifyException("io.appulse.utils.HexUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      bytesExtendableArray0.readerIndex = 2249;
      // Undeclared exception!
      try { 
        HexUtil.prettyHexDump((Bytes) bytesExtendableArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // expected: 0 <= offset(2249) <= offset+length(-2249) <= buffer.capacity(16)
         //
         verifyException("io.appulse.utils.HexUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        HexUtil.prettyHexDump((Bytes) null, 7, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // buffer is marked non-null but is null
         //
         verifyException("io.appulse.utils.HexUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        HexUtil.prettyHexDump((Bytes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // buffer is marked non-null but is null
         //
         verifyException("io.appulse.utils.HexUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        HexUtil.prettyHexDump((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bytes is marked non-null but is null
         //
         verifyException("io.appulse.utils.HexUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char char0 = HexUtil.byteToChar(0);
      assertEquals('.', char0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        HexUtil.toByteArray("4\"Dm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // contains illegal character for hexBinary: 4\"Dm
         //
         verifyException("io.appulse.utils.HexUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        HexUtil.toByteArray("value is marked non-nul$ but is null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // contains illegal character for hexBinary: value is marked non-nul$ but is null
         //
         verifyException("io.appulse.utils.HexUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        HexUtil.toByteArray("         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 11 03 41 11 10 03 9A 7F                         |..A.....        |\n+--------+-------------------------------------------------+----------------+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hexBinary needs to be even-length:          +-------------------------------------------------+
         //          |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |
         // +--------+-------------------------------------------------+----------------+
         // |00000000| 11 03 41 11 10 03 9A 7F                         |..A.....        |
         // +--------+-------------------------------------------------+----------------+
         //
         verifyException("io.appulse.utils.HexUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        HexUtil.toByteArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // string is marked non-null but is null
         //
         verifyException("io.appulse.utils.HexUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        HexUtil.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bytes is marked non-null but is null
         //
         verifyException("io.appulse.utils.HexUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = HexUtil.byteToHex(48);
      assertEquals("30", string0);
  }
}
