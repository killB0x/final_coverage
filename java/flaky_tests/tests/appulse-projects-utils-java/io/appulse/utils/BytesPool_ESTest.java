/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 05:23:52 GMT 2022
 */

package io.appulse.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.appulse.utils.Bytes;
import io.appulse.utils.BytesByteBuffer;
import io.appulse.utils.BytesExtendableArray;
import io.appulse.utils.BytesFixedArray;
import io.appulse.utils.BytesPool;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BytesPool_ESTest extends BytesPool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      bytesPool0.getFreeCount();
      Integer integer0 = new Integer(2791);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      BytesPool bytesPool1 = new BytesPool(integer0, integer1, integer1, (Function<Integer, Bytes>) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = new BytesPool.BytesPoolBuilder();
      Integer integer0 = new Integer(2734);
      Integer integer1 = Integer.getInteger("2[i6G~N)C)`", integer0);
      Integer integer2 = Integer.getInteger("Kc!PD", integer1);
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder1 = bytesPool_BytesPoolBuilder0.initialBufferSizeBytes(integer2);
      bytesPool_BytesPoolBuilder0.toString();
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder2 = bytesPool_BytesPoolBuilder1.initialBuffersCount(integer2);
      BytesPool bytesPool0 = bytesPool_BytesPoolBuilder2.build();
      bytesPool0.getAcquiredCount();
      bytesPool0.acquire(2734);
      BytesPool bytesPool1 = bytesPool_BytesPoolBuilder2.build();
      bytesPool0.acquire(601);
      bytesPool0.getTotalCount();
      bytesPool1.getTotalCount();
      bytesPool1.acquire();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      BytesByteBuffer bytesByteBuffer0 = new BytesByteBuffer(byteBuffer0);
      BytesPool bytesPool1 = new BytesPool();
      bytesPool1.close();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool1.acquire();
      // Undeclared exception!
      try { 
        bytesPool0.release(bytesPool_PooledBytes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The buffer not from this pool
         //
         verifyException("io.appulse.utils.BytesPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1);
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      BytesByteBuffer.copy(byteBuffer0);
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = BytesPool.builder();
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer((-921));
      bytesPool_BytesPoolBuilder0.initialBuffersCount(integer2);
      BytesPool bytesPool0 = bytesPool_BytesPoolBuilder0.build();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire(1);
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.writeNB(byteArray0, (-921), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      BytesPool bytesPool0 = new BytesPool(integer0, integer1, (Integer) null, (Function<Integer, Bytes>) null);
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      byteBuffer0.asDoubleBuffer();
      BytesByteBuffer.copy(byteBuffer0);
      bytesPool0.getTotalCount();
      BytesPool.builder();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire((-2915));
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.getLong(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(0) < 0 || index(0)+length(8) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = new BytesPool.BytesPoolBuilder();
      Integer integer0 = new Integer((-3770));
      bytesPool_BytesPoolBuilder0.initialBuffersCount(integer0);
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire((-3770));
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.getInt((-1869));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(-1869) < 0 || index(-1869)+length(4) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      BytesPool bytesPool0 = new BytesPool(integer0, integer1, (Integer) null, (Function<Integer, Bytes>) null);
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      BytesByteBuffer bytesByteBuffer0 = BytesByteBuffer.copy(byteBuffer0);
      // Undeclared exception!
      try { 
        bytesByteBuffer0.write2B((short)2785);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Writer index error. index(0) < readerIndex(0) || index(0)+length(2) > capacity(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire(0);
      bytesPool0.release(bytesPool_PooledBytes0);
      bytesPool0.getTotalCount();
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = BytesPool.builder();
      Integer integer0 = new Integer((-247));
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder1 = bytesPool_BytesPoolBuilder0.maximumBuffersCount(integer0);
      bytesPool_BytesPoolBuilder1.initialBuffersCount(integer0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-247));
      BytesPool bytesPool1 = new BytesPool(integer0, integer1, integer2, (Function<Integer, Bytes>) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-6);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      BytesByteBuffer.copy(byteBuffer0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      BytesPool bytesPool0 = new BytesPool(integer0, integer1, (Integer) null, (Function<Integer, Bytes>) null);
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      BytesByteBuffer.copy(byteBuffer0);
      BytesPool.builder();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire((-2915));
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.getLong(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(0) < 0 || index(0)+length(8) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = new BytesPool.BytesPoolBuilder();
      Integer integer0 = new Integer((-2330));
      bytesPool_BytesPoolBuilder0.maximumBuffersCount(integer0);
      bytesPool_BytesPoolBuilder0.toString();
      Integer integer1 = new Integer(1276);
      bytesPool_BytesPoolBuilder0.maximumBuffersCount(integer1);
      bytesPool_BytesPoolBuilder0.initialBufferSizeBytes(integer1);
      BytesPool.builder();
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire(653);
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.readShort();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(0) < 0 || index(0)+length(2) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      bytesPool0.getFreeCount();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire();
      bytesPool_PooledBytes0.isAutoResizable();
      bytesPool0.release(bytesPool_PooledBytes0);
      bytesPool0.getTotalCount();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = BytesPool.builder();
      BytesPool bytesPool0 = bytesPool_BytesPoolBuilder0.build();
      int int0 = 5492;
      Integer integer0 = new Integer(5492);
      bytesPool_BytesPoolBuilder0.maximumBuffersCount(integer0);
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire();
      bytesPool_PooledBytes0.write8B(2L);
      bytesPool_PooledBytes0.isAutoResizable();
      bytesPool_BytesPoolBuilder0.maximumBuffersCount((Integer) null);
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.checkReaderBounds(5492, 956);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(5492) < 0 || index(5492)+length(956) > writerIndex(8)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      int int0 = (-2915);
      bytesPool0.acquire((-2915));
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire();
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.readFloat();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(0) < 0 || index(0)+length(4) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      BytesByteBuffer bytesByteBuffer0 = new BytesByteBuffer(byteBuffer0);
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.new PooledBytes(bytesByteBuffer0);
      bytesPool0.release(bytesPool_PooledBytes0);
      // Undeclared exception!
      try { 
        bytesPool0.release(bytesPool_PooledBytes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.LinkedBlockingQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire();
      bytesPool_PooledBytes0.array();
      bytesPool0.release(bytesPool_PooledBytes0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      int int0 = 937;
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire(937);
      bytesPool0.getAcquiredCount();
      BytesPool.builder();
      bytesPool0.getAcquiredCount();
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.readChar();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(0) < 0 || index(0)+length(2) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire((-2116));
      bytesPool0.getAcquiredCount();
      bytesPool_PooledBytes0.capacity(1110);
      bytesPool_PooledBytes0.write4B((-2116));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-52);
      // Undeclared exception!
      bytesPool_PooledBytes0.setNB(2147483639, byteArray0, (-2444), (-1781));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = new BytesPool.BytesPoolBuilder();
      Integer integer0 = new Integer((-3770));
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire();
      bytesPool_PooledBytes0.writerIndex(34);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      // Undeclared exception!
      bytesPool0.acquire(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = new BytesPool.BytesPoolBuilder();
      BytesPool bytesPool0 = bytesPool_BytesPoolBuilder0.build();
      bytesPool0.getTotalCount();
      bytesPool0.getFreeCount();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.new PooledBytes((Bytes) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)0;
      Bytes.readOnly(byteArray0);
      bytesPool_BytesPoolBuilder0.toString();
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.capacity(1246);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pooled bytes buffer already released
         //
         verifyException("io.appulse.utils.BytesPool$PooledBytes", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire();
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.readByte();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(0) < 0 || index(0)+length(1) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      BytesByteBuffer bytesByteBuffer0 = new BytesByteBuffer(byteBuffer0);
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.new PooledBytes(bytesByteBuffer0);
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.set2B((-2245), (short)2213);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Writer index error. index(-2245) < readerIndex(0) || index(-2245)+length(2) > capacity(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = BytesPool.builder();
      bytesPool_BytesPoolBuilder0.toString();
      BytesPool bytesPool0 = bytesPool_BytesPoolBuilder0.build();
      Integer integer0 = new Integer(0);
      bytesPool_BytesPoolBuilder0.initialBuffersCount(integer0);
      bytesPool_BytesPoolBuilder0.toString();
      Integer integer1 = new Integer(0);
      bytesPool_BytesPoolBuilder0.initialBuffersCount(integer1);
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire();
      bytesPool_PooledBytes0.array();
      bytesPool_PooledBytes0.set2B(0, (short) (-1));
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.readDouble();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(0) < 0 || index(0)+length(8) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = BytesPool.builder();
      bytesPool_BytesPoolBuilder0.toString();
      bytesPool_BytesPoolBuilder0.build();
      Integer integer0 = new Integer(0);
      bytesPool_BytesPoolBuilder0.initialBuffersCount(integer0);
      bytesPool_BytesPoolBuilder0.toString();
      Integer integer1 = new Integer(0);
      bytesPool_BytesPoolBuilder0.initialBuffersCount(integer1);
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire();
      bytesPool_PooledBytes0.getBytes(0, 0);
      bytesPool_PooledBytes0.set2B(0, (short) (-1));
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.readDouble();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(0) < 0 || index(0)+length(8) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = BytesPool.builder();
      Integer integer0 = new Integer(0);
      bytesPool_BytesPoolBuilder0.initialBufferSizeBytes(integer0);
      BytesPool bytesPool0 = new BytesPool();
      bytesPool0.getFreeCount();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire((-1));
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.readerIndex((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error: newIndex(-1) < 0 || newIndex(-1) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesFixedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      BytesPool bytesPool0 = new BytesPool(integer0, integer1, (Integer) null, (Function<Integer, Bytes>) null);
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      BytesByteBuffer bytesByteBuffer0 = BytesByteBuffer.copy(byteBuffer0);
      // Undeclared exception!
      try { 
        bytesByteBuffer0.write2B((short)2785);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Writer index error. index(0) < readerIndex(0) || index(0)+length(2) > capacity(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = BytesPool.builder();
      Integer integer0 = new Integer((-2542));
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder1 = bytesPool_BytesPoolBuilder0.maximumBuffersCount(integer0);
      bytesPool_BytesPoolBuilder0.bufferCreateFunction((Function<Integer, Bytes>) null);
      bytesPool_BytesPoolBuilder0.bufferCreateFunction((Function<Integer, Bytes>) null);
      Integer integer1 = new Integer(0);
      bytesPool_BytesPoolBuilder1.initialBuffersCount(integer1);
      BytesPool bytesPool0 = bytesPool_BytesPoolBuilder1.build();
      BytesFixedArray bytesFixedArray0 = new BytesFixedArray(1300);
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.new PooledBytes(bytesFixedArray0);
      bytesPool_PooledBytes0.readerIndex();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.readBytes(byteArray0, (-1052), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = new BytesPool.BytesPoolBuilder();
      BytesPool bytesPool0 = bytesPool_BytesPoolBuilder0.build();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire(168);
      Integer integer0 = new Integer(168);
      bytesPool_BytesPoolBuilder0.maximumBuffersCount(integer0);
      bytesPool_PooledBytes0.readerIndex();
      int int0 = (-1901);
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.getByte((-1901));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(-1901) < 0 || index(-1901)+length(1) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = BytesPool.builder();
      Integer integer0 = new Integer(0);
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder1 = bytesPool_BytesPoolBuilder0.initialBufferSizeBytes(integer0);
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder2 = bytesPool_BytesPoolBuilder1.initialBuffersCount(integer0);
      BytesPool bytesPool0 = bytesPool_BytesPoolBuilder2.build();
      bytesPool_BytesPoolBuilder2.initialBufferSizeBytes((Integer) null);
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire((-3742));
      bytesPool0.getAcquiredCount();
      short short0 = (short)44;
      bytesPool_PooledBytes0.release();
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.write2B((short)44);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pooled bytes buffer already released
         //
         verifyException("io.appulse.utils.BytesPool$PooledBytes", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = BytesPool.builder();
      BytesPool bytesPool0 = bytesPool_BytesPoolBuilder0.build();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire(0);
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.getChar(2304);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(2304) < 0 || index(2304)+length(2) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer((-19));
      Integer integer1 = new Integer(1);
      BytesPool bytesPool0 = new BytesPool(integer0, integer1, (Integer) null, (Function<Integer, Bytes>) null);
      bytesPool0.acquire();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire(0);
      bytesPool0.release(bytesPool_PooledBytes0);
      bytesPool0.getTotalCount();
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = BytesPool.builder();
      Integer integer0 = new Integer((-247));
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder1 = bytesPool_BytesPoolBuilder0.initialBufferSizeBytes(integer0);
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder2 = bytesPool_BytesPoolBuilder1.initialBuffersCount(integer0);
      bytesPool_BytesPoolBuilder2.maximumBuffersCount(integer0);
      bytesPool_BytesPoolBuilder1.maximumBuffersCount(integer0);
      bytesPool_BytesPoolBuilder0.build();
      Integer integer1 = new Integer(0);
      bytesPool_BytesPoolBuilder0.initialBuffersCount(integer1);
      int int0 = 6;
      Integer integer2 = new Integer(6);
      bytesPool_BytesPoolBuilder0.maximumBuffersCount(integer1);
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder3 = bytesPool_BytesPoolBuilder2.maximumBuffersCount(integer2);
      bytesPool_BytesPoolBuilder3.maximumBuffersCount(integer2);
      Integer integer3 = new Integer((-1059));
      bytesPool_BytesPoolBuilder3.initialBuffersCount(integer3);
      bytesPool_BytesPoolBuilder3.initialBufferSizeBytes((Integer) null);
      BytesPool bytesPool1 = bytesPool_BytesPoolBuilder0.build();
      BytesPool.PooledBytes bytesPool_PooledBytes1 = bytesPool1.acquire(0);
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes1.readInt();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(0) < 0 || index(0)+length(4) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      bytesPool0.getAcquiredCount();
      // Undeclared exception!
      try { 
        bytesPool0.release((BytesPool.PooledBytes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // buffer is marked non-null but is null
         //
         verifyException("io.appulse.utils.BytesPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      bytesPool0.acquire();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire((-39));
      bytesPool0.acquire((-39));
      byte[] byteArray0 = new byte[3];
      bytesPool0.getTotalCount();
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-16);
      bytesPool_PooledBytes0.getBytes((int) (byte)0, (int) (byte)0);
      BytesPool.PooledBytes bytesPool_PooledBytes1 = bytesPool0.new PooledBytes(bytesPool_PooledBytes0);
      // Undeclared exception!
      try { 
        bytesPool0.release((BytesPool.PooledBytes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // buffer is marked non-null but is null
         //
         verifyException("io.appulse.utils.BytesPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = new BytesPool.BytesPoolBuilder();
      int int0 = 1;
      Integer integer0 = new Integer(1);
      bytesPool_BytesPoolBuilder0.initialBuffersCount(integer0);
      BytesPool bytesPool0 = bytesPool_BytesPoolBuilder0.build();
      bytesPool0.getAcquiredCount();
      int int1 = 0;
      bytesPool_BytesPoolBuilder0.build();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      BytesByteBuffer.copy(byteBuffer0);
      int int2 = (-1991);
      String string0 = ")";
      // Undeclared exception!
      try { 
        Charset.forName(" @.ba>'g<ue");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  @.ba>'g<ue
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      bytesPool0.getFreeCount();
      bytesPool0.acquire(0);
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)0;
      Bytes.wrap(byteArray0);
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.getFloat(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(0) < 0 || index(0)+length(4) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      bytesPool0.acquire();
      Integer integer0 = new Integer((-93));
      Integer integer1 = new Integer((-93));
      BytesPool bytesPool1 = new BytesPool(integer0, integer1, integer1, (Function<Integer, Bytes>) null);
      bytesPool0.acquire();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = BytesPool.builder();
      Integer integer0 = new Integer((-1265));
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder1 = bytesPool_BytesPoolBuilder0.maximumBuffersCount(integer0);
      BytesPool bytesPool0 = bytesPool_BytesPoolBuilder1.build();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      BytesByteBuffer bytesByteBuffer0 = new BytesByteBuffer(byteBuffer0);
      Bytes bytes0 = bytesByteBuffer0.write4B((int) (byte)0);
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.new PooledBytes(bytes0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = new BytesPool.BytesPoolBuilder();
      Integer integer0 = new Integer(2802);
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder1 = bytesPool_BytesPoolBuilder0.initialBufferSizeBytes(integer0);
      BytesPool bytesPool0 = bytesPool_BytesPoolBuilder1.build();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire();
      bytesPool0.release(bytesPool_PooledBytes0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = new BytesPool.BytesPoolBuilder();
      Integer integer0 = new Integer(0);
      bytesPool_BytesPoolBuilder0.initialBufferSizeBytes(integer0);
      Integer integer1 = new Integer(231);
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder1 = bytesPool_BytesPoolBuilder0.initialBufferSizeBytes(integer1);
      BytesPool bytesPool0 = bytesPool_BytesPoolBuilder1.build();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire();
      bytesPool_PooledBytes0.write8B(1400L);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      bytesPool0.getFreeCount();
      bytesPool0.close();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire(2);
      BytesPool.builder();
      Integer integer0 = new Integer(2);
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.set1B((-616), (byte) (-98));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -616 out of bounds for length 8192
         //
         verifyException("io.appulse.utils.BytesFixedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      int int0 = (-3024);
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire((-3024));
      bytesPool0.release(bytesPool_PooledBytes0);
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.set1B((-3024), (byte) (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pooled bytes buffer already released
         //
         verifyException("io.appulse.utils.BytesPool$PooledBytes", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.getString(3380, 1, charset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(3380) < 0 || index(3380)+length(1) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = BytesPool.builder();
      BytesPool bytesPool0 = bytesPool_BytesPoolBuilder0.build();
      bytesPool0.getTotalCount();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire(277);
      bytesPool0.getAcquiredCount();
      BytesPool.PooledBytes bytesPool_PooledBytes1 = bytesPool0.acquire();
      bytesPool_PooledBytes0.writerIndex();
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes1.getShort(2119);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(2119) < 0 || index(2119)+length(2) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = BytesPool.builder();
      BytesPool bytesPool0 = bytesPool_BytesPoolBuilder0.build();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire(4);
      bytesPool_PooledBytes0.writerIndex();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = new BytesPool.BytesPoolBuilder();
      Integer integer0 = new Integer(8);
      bytesPool_BytesPoolBuilder0.initialBufferSizeBytes(integer0);
      Integer integer1 = new Integer((-3770));
      bytesPool_BytesPoolBuilder0.initialBuffersCount(integer1);
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire();
      bytesPool_PooledBytes0.close();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = new BytesPool.BytesPoolBuilder();
      Integer integer0 = new Integer(683);
      bytesPool_BytesPoolBuilder0.initialBuffersCount(integer0);
      bytesPool_BytesPoolBuilder0.toString();
      BytesPool bytesPool0 = bytesPool_BytesPoolBuilder0.build();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      BytesByteBuffer bytesByteBuffer0 = BytesByteBuffer.copy(byteBuffer0);
      Bytes bytes0 = bytesByteBuffer0.set1B((int) (byte)2, (byte)1);
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.new PooledBytes(bytes0);
      bytesPool_PooledBytes0.release();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer(0);
      BytesPool bytesPool0 = new BytesPool(integer0, integer0, integer0, (Function<Integer, Bytes>) null);
      Integer integer1 = new Integer(1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = new BytesPool.BytesPoolBuilder();
      Integer integer0 = new Integer(1354);
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder1 = bytesPool_BytesPoolBuilder0.initialBuffersCount(integer0);
      BytesPool bytesPool0 = bytesPool_BytesPoolBuilder1.build();
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      long long0 = 0L;
      Bytes bytes0 = bytesExtendableArray0.write8B(0L);
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.new PooledBytes(bytes0);
      // Undeclared exception!
      try { 
        bytes0.readString(1354);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(0) < 0 || index(0)+length(1354) > writerIndex(8)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire(0);
      bytesPool_PooledBytes0.capacity();
      bytesPool0.acquire();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(8192);
      Bytes.wrap(byteBuffer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      Bytes.copy(byteArray0);
      bytesPool_PooledBytes0.write1B((byte)93);
      byte byte0 = (byte)108;
      bytesPool_PooledBytes0.write1B((byte)108);
      int int0 = 3;
      // Undeclared exception!
      try { 
        Charset.forName("2B7(s5t;Jn6dUeF");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 2B7(s5t;Jn6dUeF
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire();
      bytesPool0.release(bytesPool_PooledBytes0);
      bytesPool0.acquire();
      bytesPool0.acquire((-39));
      BytesPool.PooledBytes bytesPool_PooledBytes1 = bytesPool0.acquire((-39));
      byte[] byteArray0 = new byte[3];
      bytesPool0.getTotalCount();
      bytesPool_PooledBytes1.writerIndex();
      byteArray0[1] = (byte) (-16);
      bytesPool_PooledBytes1.write2B((short) (byte) (-16));
      byte byte0 = (byte)2;
      byteArray0[2] = (byte)2;
      Bytes.copy(byteArray0);
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes1.getShort((-39));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(-39) < 0 || index(-39)+length(2) > writerIndex(2)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire();
      bytesPool_PooledBytes0.write8B((-9223372036854775808L));
      bytesPool0.getTotalCount();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire((-1869));
      bytesPool_PooledBytes0.set4B(2277, 2208);
      bytesPool0.release(bytesPool_PooledBytes0);
      BytesPool.PooledBytes bytesPool_PooledBytes1 = bytesPool0.acquire(0);
      bytesPool0.getFreeCount();
      bytesPool_PooledBytes1.write2B((short) (-2914));
      bytesPool_PooledBytes1.set4B(1, 1642);
      bytesPool_PooledBytes1.write8B(0L);
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = new BytesPool.BytesPoolBuilder();
      Integer integer0 = Integer.getInteger("", 2147483646);
      bytesPool0.getAcquiredCount();
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder1 = bytesPool_BytesPoolBuilder0.initialBuffersCount(integer0);
      bytesPool_BytesPoolBuilder1.initialBufferSizeBytes(integer0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire();
      bytesPool0.acquire(48);
      bytesPool0.acquire(2114);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2114);
      BytesByteBuffer bytesByteBuffer0 = new BytesByteBuffer(byteBuffer0);
      BytesPool.PooledBytes bytesPool_PooledBytes1 = bytesPool0.new PooledBytes((Bytes) null);
      BytesPool bytesPool1 = new BytesPool();
      // Undeclared exception!
      try { 
        bytesPool1.release(bytesPool_PooledBytes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The buffer not from this pool
         //
         verifyException("io.appulse.utils.BytesPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      int int0 = 1;
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire(1);
      BytesPool.builder();
      bytesPool0.release(bytesPool_PooledBytes0);
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.write1B((byte)1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pooled bytes buffer already released
         //
         verifyException("io.appulse.utils.BytesPool$PooledBytes", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      BytesPool bytesPool0 = new BytesPool(integer0, integer1, (Integer) null, (Function<Integer, Bytes>) null);
      Bytes bytes0 = null;
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.new PooledBytes((Bytes) null);
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.readChar();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pooled bytes buffer already released
         //
         verifyException("io.appulse.utils.BytesPool$PooledBytes", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      bytesPool0.getFreeCount();
      bytesPool0.close();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire(2);
      BytesPool.builder();
      bytesPool0.release(bytesPool_PooledBytes0);
      byte byte0 = (byte)1;
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.write1B((byte)1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pooled bytes buffer already released
         //
         verifyException("io.appulse.utils.BytesPool$PooledBytes", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      int int0 = 5;
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire(5);
      int int1 = (-2721);
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.getDouble((-2721));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(-2721) < 0 || index(-2721)+length(8) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = BytesPool.builder();
      Integer integer0 = new Integer((-56));
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder1 = bytesPool_BytesPoolBuilder0.maximumBuffersCount(integer0);
      BytesPool bytesPool0 = bytesPool_BytesPoolBuilder1.build();
      bytesPool0.acquire(2116);
      bytesPool0.acquire();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = new BytesPool.BytesPoolBuilder();
      BytesPool bytesPool0 = bytesPool_BytesPoolBuilder0.build();
      bytesPool0.getTotalCount();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire();
      bytesPool_PooledBytes0.set8B(1283, (long) 1283);
      bytesPool0.getTotalCount();
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder1 = BytesPool.builder();
      bytesPool_BytesPoolBuilder1.toString();
      bytesPool_PooledBytes0.writerIndex(1270);
      Integer integer0 = new Integer(1283);
      bytesPool_BytesPoolBuilder0.initialBuffersCount(integer0);
      bytesPool0.release(bytesPool_PooledBytes0);
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pooled bytes buffer already released
         //
         verifyException("io.appulse.utils.BytesPool$PooledBytes", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = new BytesPool.BytesPoolBuilder();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      bytesPool_BytesPoolBuilder0.initialBufferSizeBytes(integer0);
      bytesPool_BytesPoolBuilder0.initialBufferSizeBytes(integer0);
      bytesPool_BytesPoolBuilder0.toString();
      bytesPool_BytesPoolBuilder0.maximumBuffersCount(integer0);
      Integer integer1 = new Integer(0);
      bytesPool_BytesPoolBuilder0.initialBuffersCount(integer1);
      BytesPool bytesPool0 = new BytesPool();
      int int1 = (-1);
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire((-1));
      int int2 = 44;
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.readLong();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(0) < 0 || index(0)+length(8) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BytesPool.BytesPoolBuilder bytesPool_BytesPoolBuilder0 = new BytesPool.BytesPoolBuilder();
      bytesPool_BytesPoolBuilder0.toString();
      BytesPool.builder();
      BytesPool.builder();
      BytesPool.builder();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BytesPool.builder();
      try { 
        Integer.decode("*N\"!G*[OCrlEQ}$bk");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"*N\"!G*[OCrlEQ}$bk\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BytesPool.builder();
      BytesPool bytesPool0 = new BytesPool();
      bytesPool0.getAcquiredCount();
      // Undeclared exception!
      bytesPool0.acquire(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      bytesPool0.getFreeCount();
      bytesPool0.close();
      bytesPool0.acquire();
      int int0 = new Integer(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      bytesPool0.getTotalCount();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire();
      BytesPool.PooledBytes bytesPool_PooledBytes1 = bytesPool0.new PooledBytes(bytesPool_PooledBytes0);
      int int0 = 279;
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes1.getShort(279);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(279) < 0 || index(279)+length(2) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      bytesPool0.acquire((-2596));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire();
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.readInt();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(0) < 0 || index(0)+length(4) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire(937);
      bytesPool0.getAcquiredCount();
      bytesPool0.getAcquiredCount();
      bytesPool0.getTotalCount();
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes0.getBytes((int) (byte)0, (int) (byte) (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 > -3
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      bytesPool0.acquire();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire((-39));
      BytesPool.PooledBytes bytesPool_PooledBytes1 = bytesPool0.acquire((-39));
      byte[] byteArray0 = new byte[3];
      bytesPool0.getTotalCount();
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-16);
      byte byte0 = (byte)2;
      bytesPool_PooledBytes0.getBytes((int) (byte)0, (int) (byte)0);
      byteArray0[2] = (byte)2;
      Bytes.copy(byteArray0);
      // Undeclared exception!
      try { 
        bytesPool_PooledBytes1.getShort((-39));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Reader index error. index(-39) < 0 || index(-39)+length(2) > writerIndex(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }
}
