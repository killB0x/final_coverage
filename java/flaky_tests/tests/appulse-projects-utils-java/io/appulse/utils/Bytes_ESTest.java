/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 05:50:23 GMT 2022
 */

package io.appulse.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.appulse.utils.Bytes;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Bytes_ESTest extends Bytes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Bytes bytes0 = Bytes.allocate(0);
      assertEquals(0, bytes0.capacity());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Bytes.wrap((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // buffer is marked non-null but is null
         //
         verifyException("io.appulse.utils.BytesByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      Bytes.resizableArray(2147483639);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Bytes.resizableArray((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("io.appulse.utils.BytesFixedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Bytes.readOnly((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bytes is marked non-null but is null
         //
         verifyException("io.appulse.utils.BytesFixedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Bytes.copy((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bytes is marked non-null but is null
         //
         verifyException("io.appulse.utils.BytesFixedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Bytes.copy((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // buffer is marked non-null but is null
         //
         verifyException("io.appulse.utils.BytesByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      Bytes.allocate(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Bytes bytes0 = Bytes.wrap(byteArray0);
      Bytes bytes1 = Bytes.readOnly(bytes0);
      assertFalse(bytes1.isAutoResizable());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Bytes.wrap((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bytes is marked non-null but is null
         //
         verifyException("io.appulse.utils.BytesFixedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Bytes bytes0 = Bytes.wrap(byteBuffer0);
      assertEquals(0, bytes0.readerIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Bytes bytes0 = Bytes.copy(byteArray0);
      assertEquals(5, bytes0.capacity());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Bytes bytes0 = Bytes.resizableArray();
      assertEquals(16, bytes0.capacity());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Bytes.allocate((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("io.appulse.utils.BytesFixedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Bytes bytes0 = Bytes.readOnly(byteArray0);
      assertEquals(0, bytes0.readerIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Bytes bytes0 = Bytes.readOnly(byteBuffer0);
      assertFalse(bytes0.isAutoResizable());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Bytes bytes0 = Bytes.resizableArray(0);
      assertEquals(0, bytes0.capacity());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Bytes bytes0 = Bytes.copy(byteBuffer0);
      assertEquals(0, bytes0.writerIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Bytes.readOnly((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // buffer is marked non-null but is null
         //
         verifyException("io.appulse.utils.BytesByteBuffer", e);
      }
  }
}
