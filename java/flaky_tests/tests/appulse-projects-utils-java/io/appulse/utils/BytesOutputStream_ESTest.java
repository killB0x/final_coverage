/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 05:41:08 GMT 2022
 */

package io.appulse.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.appulse.utils.Bytes;
import io.appulse.utils.BytesFixedArray;
import io.appulse.utils.BytesOutputStream;
import io.appulse.utils.BytesPool;
import io.appulse.utils.BytesReadOnly;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BytesOutputStream_ESTest extends BytesOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream(0);
      byte[] byteArray0 = new byte[1];
      bytesOutputStream0.write(byteArray0, (int) (byte)0, 0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream();
      bytesOutputStream0.write(32);
      byte[] byteArray0 = bytesOutputStream0.toByteArray();
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream(0);
      int int0 = bytesOutputStream0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream();
      bytesOutputStream0.write(32);
      int int0 = bytesOutputStream0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream();
      byte[] byteArray0 = bytesOutputStream0.array();
      assertEquals(32, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream(0);
      byte[] byteArray0 = bytesOutputStream0.array();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Bytes bytes0 = Bytes.resizableArray(1);
      BytesReadOnly bytesReadOnly0 = new BytesReadOnly(bytes0);
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream(bytesReadOnly0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        bytesOutputStream0.write(byteArray0, (int) (byte)32, 1560);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The operation doesn't support in BytesReadOnly wrapper
         //
         verifyException("io.appulse.utils.BytesReadOnly", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream(32);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      bytesOutputStream0.write(byteArray0, 32, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream((Bytes) null);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        bytesOutputStream0.write(byteArray0, (int) (byte) (-59), (int) (byte) (-59));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.appulse.utils.BytesOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream();
      // Undeclared exception!
      try { 
        bytesOutputStream0.write((byte[]) null, 1608, 1608);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bytes is marked non-null but is null
         //
         verifyException("io.appulse.utils.BytesFixedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Bytes bytes0 = Bytes.allocate(0);
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream(bytes0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        bytesOutputStream0.write(byteArray0, (int) (byte)0, 1978);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Writer index error. index(0) < readerIndex(0) || index(0)+length(1978) > capacity(0)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.acquire();
      bytesPool0.release(bytesPool_PooledBytes0);
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream(bytesPool_PooledBytes0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        bytesOutputStream0.write(byteArray0, 2213, 2213);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pooled bytes buffer already released
         //
         verifyException("io.appulse.utils.BytesPool$PooledBytes", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream(0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        bytesOutputStream0.write(byteArray0, 125, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Bytes bytes0 = Bytes.readOnly((Bytes) null);
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream(bytes0);
      // Undeclared exception!
      try { 
        bytesOutputStream0.write(177);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The operation doesn't support in BytesReadOnly wrapper
         //
         verifyException("io.appulse.utils.BytesReadOnly", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream((Bytes) null);
      // Undeclared exception!
      try { 
        bytesOutputStream0.write((-669));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.appulse.utils.BytesOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BytesFixedArray bytesFixedArray0 = new BytesFixedArray(1);
      bytesFixedArray0.write1B((double) 1);
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream(bytesFixedArray0);
      // Undeclared exception!
      try { 
        bytesOutputStream0.write(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Writer index error. index(1) < readerIndex(0) || index(1)+length(1) > capacity(1)
         //
         verifyException("io.appulse.utils.BytesAbstract", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1643);
      Bytes bytes0 = Bytes.readOnly(byteBuffer0);
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream(bytes0);
      // Undeclared exception!
      try { 
        bytesOutputStream0.toByteArray();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BytesFixedArray bytesFixedArray0 = new BytesFixedArray();
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream(bytesFixedArray0);
      // Undeclared exception!
      try { 
        bytesOutputStream0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.new PooledBytes((Bytes) null);
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream(bytesPool_PooledBytes0);
      // Undeclared exception!
      try { 
        bytesOutputStream0.toByteArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pooled bytes buffer already released
         //
         verifyException("io.appulse.utils.BytesPool$PooledBytes", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.new PooledBytes((Bytes) null);
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream(bytesPool_PooledBytes0);
      // Undeclared exception!
      try { 
        bytesOutputStream0.size();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pooled bytes buffer already released
         //
         verifyException("io.appulse.utils.BytesPool$PooledBytes", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1643);
      Bytes bytes0 = Bytes.readOnly(byteBuffer0);
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream(bytes0);
      // Undeclared exception!
      try { 
        bytesOutputStream0.reset();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The operation doesn't support in BytesReadOnly wrapper
         //
         verifyException("io.appulse.utils.BytesReadOnly", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream((Bytes) null);
      // Undeclared exception!
      try { 
        bytesOutputStream0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.appulse.utils.BytesOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream((Bytes) null);
      // Undeclared exception!
      try { 
        bytesOutputStream0.array();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.appulse.utils.BytesOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BytesOutputStream bytesOutputStream0 = null;
      try {
        bytesOutputStream0 = new BytesOutputStream((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -2
         //
         verifyException("io.appulse.utils.BytesOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream(2035);
      bytesOutputStream0.close();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BytesFixedArray bytesFixedArray0 = new BytesFixedArray();
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream(bytesFixedArray0);
      byte[] byteArray0 = bytesOutputStream0.array();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream();
      byte[] byteArray0 = bytesOutputStream0.toByteArray();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream((Bytes) null);
      // Undeclared exception!
      try { 
        bytesOutputStream0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.appulse.utils.BytesOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BytesOutputStream bytesOutputStream0 = new BytesOutputStream();
      bytesOutputStream0.reset();
  }
}
