/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 05:29:54 GMT 2022
 */

package io.appulse.utils.exception;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.appulse.utils.exception.CantReadFromArrayException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CantReadFromArrayException_ESTest extends CantReadFromArrayException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      CantReadFromArrayException cantReadFromArrayException0 = new CantReadFromArrayException(byteArray0, (byte) (-18), (byte) (-18));
      String string0 = cantReadFromArrayException0.getMessage();
      assertEquals("Can't read from an array between -18 and -37 indexes, because actual array's length is 6", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      CantReadFromArrayException cantReadFromArrayException0 = new CantReadFromArrayException(byteArray0, (byte) (-14), 3);
      cantReadFromArrayException0.hashCode();
      assertEquals((-14), cantReadFromArrayException0.getFrom());
      assertEquals(3, cantReadFromArrayException0.getLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      CantReadFromArrayException cantReadFromArrayException0 = new CantReadFromArrayException(byteArray0, 0, 383);
      int int0 = cantReadFromArrayException0.getLength();
      assertEquals(383, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      CantReadFromArrayException cantReadFromArrayException0 = new CantReadFromArrayException(byteArray0, 1, (-1096));
      int int0 = cantReadFromArrayException0.getLength();
      assertEquals((-1096), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      CantReadFromArrayException cantReadFromArrayException0 = new CantReadFromArrayException(byteArray0, (byte)93, (byte)0);
      int int0 = cantReadFromArrayException0.getFrom();
      assertEquals(93, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      CantReadFromArrayException cantReadFromArrayException0 = new CantReadFromArrayException(byteArray0, (-1388), 956);
      int int0 = cantReadFromArrayException0.getFrom();
      assertEquals((-1388), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      CantReadFromArrayException cantReadFromArrayException0 = new CantReadFromArrayException(byteArray0, 0, 0);
      byte[] byteArray1 = cantReadFromArrayException0.getArray();
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      CantReadFromArrayException cantReadFromArrayException0 = new CantReadFromArrayException(byteArray0, (byte) (-14), 3);
      boolean boolean0 = cantReadFromArrayException0.canEqual(cantReadFromArrayException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      CantReadFromArrayException cantReadFromArrayException0 = new CantReadFromArrayException(byteArray0, (byte)93, (byte)0);
      Object object0 = new Object();
      boolean boolean0 = cantReadFromArrayException0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      CantReadFromArrayException cantReadFromArrayException0 = new CantReadFromArrayException(byteArray0, 0, 383);
      byte[] byteArray1 = cantReadFromArrayException0.getArray();
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      CantReadFromArrayException cantReadFromArrayException0 = new CantReadFromArrayException(byteArray0, 0, 0);
      int int0 = cantReadFromArrayException0.getLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      CantReadFromArrayException cantReadFromArrayException0 = new CantReadFromArrayException(byteArray0, 0, 0);
      int int0 = cantReadFromArrayException0.getFrom();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      CantReadFromArrayException cantReadFromArrayException0 = new CantReadFromArrayException(byteArray0, (-552), (-552));
      Object object0 = new Object();
      boolean boolean0 = cantReadFromArrayException0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      CantReadFromArrayException cantReadFromArrayException0 = new CantReadFromArrayException(byteArray0, (-552), (-552));
      boolean boolean0 = cantReadFromArrayException0.equals(cantReadFromArrayException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CantReadFromArrayException cantReadFromArrayException0 = null;
      try {
        cantReadFromArrayException0 = new CantReadFromArrayException((byte[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array is marked non-null but is null
         //
         verifyException("io.appulse.utils.exception.CantReadFromArrayException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      CantReadFromArrayException cantReadFromArrayException0 = new CantReadFromArrayException(byteArray0, (-552), (-552));
      CantReadFromArrayException cantReadFromArrayException1 = new CantReadFromArrayException(byteArray0, (-552), (-552));
      boolean boolean0 = cantReadFromArrayException1.equals(cantReadFromArrayException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      CantReadFromArrayException cantReadFromArrayException0 = new CantReadFromArrayException(byteArray0, (byte) (-18), (byte) (-18));
      String string0 = cantReadFromArrayException0.toString();
      assertEquals("CantReadFromArrayException(array=[0, 0, 0, 0, 0, 0], from=-18, length=-18)", string0);
  }
}
