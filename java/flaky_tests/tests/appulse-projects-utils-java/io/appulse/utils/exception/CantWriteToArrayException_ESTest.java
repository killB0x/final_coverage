/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 05:28:46 GMT 2022
 */

package io.appulse.utils.exception;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.appulse.utils.exception.CantWriteToArrayException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CantWriteToArrayException_ESTest extends CantWriteToArrayException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      CantWriteToArrayException cantWriteToArrayException0 = new CantWriteToArrayException(byteArray0, (byte)53, 1);
      String string0 = cantWriteToArrayException0.getMessage();
      assertEquals("Can't write to an array from 53 to 53 indexes, because actual array's length is 1", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      CantWriteToArrayException cantWriteToArrayException0 = new CantWriteToArrayException(byteArray0, 84, 84);
      cantWriteToArrayException0.hashCode();
      assertEquals(84, cantWriteToArrayException0.getFrom());
      assertEquals(84, cantWriteToArrayException0.getLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      CantWriteToArrayException cantWriteToArrayException0 = new CantWriteToArrayException(byteArray0, 0, (byte)0);
      int int0 = cantWriteToArrayException0.getLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      CantWriteToArrayException cantWriteToArrayException0 = new CantWriteToArrayException(byteArray0, (byte)0, (-1463));
      int int0 = cantWriteToArrayException0.getLength();
      assertEquals((-1463), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      CantWriteToArrayException cantWriteToArrayException0 = new CantWriteToArrayException(byteArray0, (byte)53, 1);
      int int0 = cantWriteToArrayException0.getFrom();
      assertEquals(53, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      CantWriteToArrayException cantWriteToArrayException0 = new CantWriteToArrayException(byteArray0, (-708), 0);
      int int0 = cantWriteToArrayException0.getFrom();
      assertEquals((-708), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      CantWriteToArrayException cantWriteToArrayException0 = new CantWriteToArrayException(byteArray0, 3, 1);
      byte[] byteArray1 = cantWriteToArrayException0.getArray();
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      CantWriteToArrayException cantWriteToArrayException0 = new CantWriteToArrayException(byteArray0, 1925, (-1));
      boolean boolean0 = cantWriteToArrayException0.canEqual(cantWriteToArrayException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      CantWriteToArrayException cantWriteToArrayException0 = new CantWriteToArrayException(byteArray0, (byte)0, (-1463));
      Object object0 = new Object();
      boolean boolean0 = cantWriteToArrayException0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      CantWriteToArrayException cantWriteToArrayException0 = new CantWriteToArrayException(byteArray0, (byte)53, 1);
      int int0 = cantWriteToArrayException0.getLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      CantWriteToArrayException cantWriteToArrayException0 = new CantWriteToArrayException(byteArray0, 505, 2);
      byte[] byteArray1 = cantWriteToArrayException0.getArray();
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      CantWriteToArrayException cantWriteToArrayException0 = new CantWriteToArrayException(byteArray0, (byte)0, (byte)0);
      int int0 = cantWriteToArrayException0.getFrom();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      CantWriteToArrayException cantWriteToArrayException0 = new CantWriteToArrayException(byteArray0, (byte)0, (byte)0);
      Object object0 = new Object();
      boolean boolean0 = cantWriteToArrayException0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      CantWriteToArrayException cantWriteToArrayException0 = new CantWriteToArrayException(byteArray0, 1, 1);
      boolean boolean0 = cantWriteToArrayException0.equals(cantWriteToArrayException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CantWriteToArrayException cantWriteToArrayException0 = null;
      try {
        cantWriteToArrayException0 = new CantWriteToArrayException((byte[]) null, 7, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array is marked non-null but is null
         //
         verifyException("io.appulse.utils.exception.CantWriteToArrayException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      CantWriteToArrayException cantWriteToArrayException0 = new CantWriteToArrayException(byteArray0, 0, 0);
      CantWriteToArrayException cantWriteToArrayException1 = new CantWriteToArrayException(byteArray0, 0, 0);
      boolean boolean0 = cantWriteToArrayException0.equals(cantWriteToArrayException1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      CantWriteToArrayException cantWriteToArrayException0 = new CantWriteToArrayException(byteArray0, (byte)0, (byte)0);
      String string0 = cantWriteToArrayException0.toString();
      assertEquals("CantWriteToArrayException(array=[0, 0, 0, 0, 0], from=0, length=0)", string0);
  }
}
