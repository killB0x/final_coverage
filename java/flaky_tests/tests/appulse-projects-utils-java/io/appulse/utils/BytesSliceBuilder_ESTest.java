/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 05:35:16 GMT 2022
 */

package io.appulse.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.appulse.utils.Bytes;
import io.appulse.utils.BytesByteBuffer;
import io.appulse.utils.BytesExtendableArray;
import io.appulse.utils.BytesFixedArray;
import io.appulse.utils.BytesPool;
import io.appulse.utils.BytesSlice;
import io.appulse.utils.BytesSliceBuilder;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BytesSliceBuilder_ESTest extends BytesSliceBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      Integer integer0 = new Integer(0);
      BytesSlice bytesSlice0 = new BytesSlice(bytesExtendableArray0, integer0, integer0);
      BytesSliceBuilder bytesSliceBuilder0 = bytesSlice0.slice();
      byte[] byteArray0 = bytesSliceBuilder0.toByteArray();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(46);
      Bytes bytes0 = Bytes.copy(byteBuffer0);
      BytesSliceBuilder bytesSliceBuilder0 = bytes0.slice();
      // Undeclared exception!
      try { 
        bytesSliceBuilder0.toReadOnlyBytes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray(0);
      BytesSliceBuilder bytesSliceBuilder0 = bytesExtendableArray0.slice();
      bytesExtendableArray0.buffer = null;
      // Undeclared exception!
      try { 
        bytesSliceBuilder0.toReadOnlyBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.appulse.utils.BytesFixedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(46);
      Bytes bytes0 = Bytes.copy(byteBuffer0);
      BytesSliceBuilder bytesSliceBuilder0 = bytes0.slice();
      // Undeclared exception!
      try { 
        bytesSliceBuilder0.toNewBytes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BytesFixedArray bytesFixedArray0 = new BytesFixedArray();
      Integer integer0 = Integer.getInteger("di_*V=8$~2", 768);
      BytesSlice bytesSlice0 = new BytesSlice(bytesFixedArray0, integer0, integer0);
      BytesSliceBuilder bytesSliceBuilder0 = bytesSlice0.slice();
      // Undeclared exception!
      try { 
        bytesSliceBuilder0.toNewBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      BytesSliceBuilder bytesSliceBuilder0 = new BytesSliceBuilder(bytesExtendableArray0);
      bytesSliceBuilder0.from(793);
      // Undeclared exception!
      try { 
        bytesSliceBuilder0.toNewBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value 'from' (793) must be less or equal 'to' (16)
         //
         verifyException("io.appulse.utils.BytesSliceBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1224);
      BytesByteBuffer bytesByteBuffer0 = new BytesByteBuffer(byteBuffer0);
      BytesSliceBuilder bytesSliceBuilder0 = bytesByteBuffer0.slice();
      // Undeclared exception!
      try { 
        bytesSliceBuilder0.toMutableBytes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      BytesSliceBuilder bytesSliceBuilder0 = bytesExtendableArray0.slice();
      bytesSliceBuilder0.length(255);
      // Undeclared exception!
      try { 
        bytesSliceBuilder0.toMutableBytes();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // byte array has length 16, but 'to' index was set to 255
         //
         verifyException("io.appulse.utils.BytesSliceBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      BytesSliceBuilder bytesSliceBuilder0 = bytesExtendableArray0.slice();
      bytesSliceBuilder0.length((-924));
      // Undeclared exception!
      try { 
        bytesSliceBuilder0.toMutableBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value 'from' (0) must be less or equal 'to' (-924)
         //
         verifyException("io.appulse.utils.BytesSliceBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1596);
      Bytes bytes0 = Bytes.wrap(byteBuffer0);
      BytesSliceBuilder bytesSliceBuilder0 = new BytesSliceBuilder(bytes0);
      // Undeclared exception!
      try { 
        bytesSliceBuilder0.toByteArray();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BytesFixedArray bytesFixedArray0 = new BytesFixedArray();
      Integer integer0 = new Integer(8);
      BytesSlice bytesSlice0 = new BytesSlice(bytesFixedArray0, integer0, integer0);
      BytesSliceBuilder bytesSliceBuilder0 = bytesSlice0.slice();
      // Undeclared exception!
      try { 
        bytesSliceBuilder0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      BytesSliceBuilder bytesSliceBuilder0 = bytesExtendableArray0.slice();
      bytesSliceBuilder0.from((-845));
      // Undeclared exception!
      try { 
        bytesSliceBuilder0.toByteArray();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 'from' index must be greater or equal to 0
         //
         verifyException("io.appulse.utils.BytesSliceBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BytesPool bytesPool0 = new BytesPool();
      BytesPool.PooledBytes bytesPool_PooledBytes0 = bytesPool0.new PooledBytes((Bytes) null);
      BytesSliceBuilder bytesSliceBuilder0 = null;
      try {
        bytesSliceBuilder0 = new BytesSliceBuilder(bytesPool_PooledBytes0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pooled bytes buffer already released
         //
         verifyException("io.appulse.utils.BytesPool$PooledBytes", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BytesFixedArray bytesFixedArray0 = new BytesFixedArray(1785);
      BytesSliceBuilder bytesSliceBuilder0 = new BytesSliceBuilder(bytesFixedArray0);
      Bytes bytes0 = bytesSliceBuilder0.toMutableBytes();
      assertEquals(1785, bytes0.capacity());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BytesFixedArray bytesFixedArray0 = new BytesFixedArray(1785);
      BytesSliceBuilder bytesSliceBuilder0 = new BytesSliceBuilder(bytesFixedArray0);
      BytesSliceBuilder bytesSliceBuilder1 = bytesSliceBuilder0.length((-1));
      // Undeclared exception!
      try { 
        bytesSliceBuilder1.toByteArray();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value 'from' (0) must be less or equal 'to' (-1)
         //
         verifyException("io.appulse.utils.BytesSliceBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      BytesSliceBuilder bytesSliceBuilder0 = new BytesSliceBuilder(bytesExtendableArray0);
      bytesSliceBuilder0.length(768);
      // Undeclared exception!
      try { 
        bytesSliceBuilder0.toNewBytes();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // byte array has length 16, but 'to' index was set to 768
         //
         verifyException("io.appulse.utils.BytesSliceBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      Integer integer0 = new Integer(0);
      BytesSlice bytesSlice0 = new BytesSlice(bytesExtendableArray0, integer0, integer0);
      BytesSliceBuilder bytesSliceBuilder0 = bytesSlice0.slice();
      bytesSliceBuilder0.from((-1));
      // Undeclared exception!
      try { 
        bytesSliceBuilder0.toReadOnlyBytes();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 'from' index must be greater or equal to 0
         //
         verifyException("io.appulse.utils.BytesSliceBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BytesFixedArray bytesFixedArray0 = new BytesFixedArray(1785);
      BytesSliceBuilder bytesSliceBuilder0 = new BytesSliceBuilder(bytesFixedArray0);
      Bytes bytes0 = bytesSliceBuilder0.toNewBytes();
      assertEquals(1785, bytes0.capacity());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      BytesSliceBuilder bytesSliceBuilder0 = bytesExtendableArray0.slice();
      byte[] byteArray0 = bytesSliceBuilder0.toByteArray();
      assertEquals(16, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      BytesSliceBuilder bytesSliceBuilder0 = bytesExtendableArray0.slice();
      BytesSliceBuilder bytesSliceBuilder1 = bytesSliceBuilder0.to((-3222));
      // Undeclared exception!
      try { 
        bytesSliceBuilder1.toReadOnlyBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value 'from' (0) must be less or equal 'to' (-3222)
         //
         verifyException("io.appulse.utils.BytesSliceBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BytesExtendableArray bytesExtendableArray0 = new BytesExtendableArray();
      BytesSliceBuilder bytesSliceBuilder0 = bytesExtendableArray0.slice();
      Bytes bytes0 = bytesSliceBuilder0.toReadOnlyBytes();
      assertEquals(0, bytes0.readerIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BytesSliceBuilder bytesSliceBuilder0 = null;
      try {
        bytesSliceBuilder0 = new BytesSliceBuilder((Bytes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.appulse.utils.BytesSliceBuilder", e);
      }
  }
}
