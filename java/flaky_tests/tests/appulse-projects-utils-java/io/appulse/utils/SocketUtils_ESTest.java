/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 05:32:21 GMT 2022
 */

package io.appulse.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.appulse.utils.Bytes;
import io.appulse.utils.SocketUtils;
import java.net.Socket;
import java.net.SocketException;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SocketUtils_ESTest extends SocketUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 65535);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Optional<Integer> optional0 = SocketUtils.findFreePort();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 893);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      boolean boolean0 = SocketUtils.isPortAvailable(893);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      // Undeclared exception!
      try { 
        SocketUtils.readBytes((Socket) mockSocket0, 65515);
        fail("Expecting exception: SocketException");
      
      } catch(Throwable e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        SocketUtils.isPortAvailable((-107));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-107
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        SocketUtils.findFreePort((-34), (-34));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-34
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Optional<Integer> optional0 = SocketUtils.findFreePort(1, 1);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = SocketUtils.isPortAvailable(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        SocketUtils.readBytes((Socket) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // socket is marked non-null but is null
         //
         verifyException("io.appulse.utils.SocketUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 65535);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      MockSocket mockSocket0 = new MockSocket("A\"c+V~;=_P", 65535, false);
      Bytes bytes0 = SocketUtils.readBytes((Socket) mockSocket0, 65535);
      assertEquals(65535, bytes0.capacity());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        SocketUtils.readBytes((Socket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // socket is marked non-null but is null
         //
         verifyException("io.appulse.utils.SocketUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      // Undeclared exception!
      try { 
        SocketUtils.readBytes((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(Throwable e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        SocketUtils.read((Socket) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // socket is marked non-null but is null
         //
         verifyException("io.appulse.utils.SocketUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      // Undeclared exception!
      try { 
        SocketUtils.read((Socket) mockSocket0, (-1461));
        fail("Expecting exception: SocketException");
      
      } catch(Throwable e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        SocketUtils.read((Socket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // socket is marked non-null but is null
         //
         verifyException("io.appulse.utils.SocketUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      // Undeclared exception!
      try { 
        SocketUtils.read((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(Throwable e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 893);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Optional<Integer> optional0 = SocketUtils.findFreePort(893, 893);
      assertNotNull(optional0);
  }
}
