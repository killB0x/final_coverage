/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 05:43:39 GMT 2022
 */

package io.appulse.utils.cache;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.appulse.utils.cache.LruCache;
import java.util.AbstractMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LruCache_ESTest extends LruCache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LruCache<Integer, Integer> lruCache0 = new LruCache<Integer, Integer>(229);
      Integer integer0 = new Integer((-3464));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      boolean boolean0 = lruCache0.removeEldestEntry(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LruCache<Integer, Integer> lruCache0 = new LruCache<Integer, Integer>((-1));
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      boolean boolean0 = lruCache0.removeEldestEntry(abstractMap_SimpleImmutableEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LruCache<Integer, Integer> lruCache0 = null;
      try {
        lruCache0 = new LruCache<Integer, Integer>((-643));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -642
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LruCache<Integer, Integer> lruCache0 = new LruCache<Integer, Integer>(0);
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      boolean boolean0 = lruCache0.removeEldestEntry(abstractMap_SimpleEntry0);
      assertFalse(boolean0);
  }
}
