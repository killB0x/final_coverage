/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 20:39:07 GMT 2022
 */

package org.iban4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.iban4j.CountryCode;
import org.iban4j.Iban;
import org.iban4j.IbanFormat;
import org.iban4j.IbanUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IbanUtil_ESTest extends IbanUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom((-129));
      Iban iban0 = Iban.random();
      assertEquals("80", iban0.getCheckDigit());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        IbanUtil.validate("CZ79 0000 0000 0000 0000 0000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // [ 0000 0000 0000 0000 0000] length is 25, expected BBAN length is: 20
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IbanFormat ibanFormat0 = IbanFormat.None;
      try { 
        IbanUtil.validate("NPL", ibanFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Country code is not supported.
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = IbanUtil.calculateCheckDigit("Iceland");
      assertEquals("09", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = IbanUtil.toFormattedString("KKDo");
      assertEquals("KKDo", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = IbanUtil.toFormattedString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = IbanUtil.replaceCheckDigit("7+__xOP`)hs@^KWP(?", "+B^i~P+8;:_nB");
      assertEquals("7++B^i~P+8;:_nBxOP`)hs@^KWP(?", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = IbanUtil.getOwnerAccountType("AD66  000 0 00 00 0 000  0000  000 0");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = IbanUtil.getNationalCheckDigit("AD66 0000 0000 0000 0000 0000");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = IbanUtil.getCountryCode("uK:mF5>");
      assertEquals("uK", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = IbanUtil.getCheckDigit("dRkhEorLlF*v<n_[");
      assertEquals("kh", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = IbanUtil.getBranchCode("SK77 0000 0000 0000 0000 0000");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = IbanUtil.getBban("MC?qG");
      assertEquals("G", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = IbanUtil.getBban("9OcS");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = IbanUtil.getAccountType("British Indian Ocean Territory");
      assertNotNull(string0);
      assertEquals("o", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = IbanUtil.getAccountNumber("SK77 0000 0000 0000 0000 0000");
      assertEquals("0 0000 0000 0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IbanFormat ibanFormat0 = IbanFormat.Default;
      // Undeclared exception!
      try { 
        IbanUtil.validate((String) null, ibanFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.toFormattedString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.replaceCheckDigit("KH", "KH");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.replaceCheckDigit((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getOwnerAccountType("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getOwnerAccountType("Australia");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getNationalCheckDigit("P");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getNationalCheckDigit("J8w:>tR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getIdentificationNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getIdentificationNumber("Country code is not supported.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CountryCode countryCode0 = CountryCode.SG;
      // Undeclared exception!
      try { 
        IbanUtil.getIbanLength(countryCode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getCountryCodeAndCheckDigit("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getCountryCodeAndCheckDigit((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getCountryCode("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getCountryCode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getCheckDigit((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getBranchCode("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getBranchCode("Country code is not supported.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getBban((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getBankCode("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getBankCode("zWV+^OW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getAccountType("DJI");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getAccountType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getAccountNumber(",Hc`]QJ'ImEP7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.calculateCheckDigit((Iban) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.calculateCheckDigit("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.calculateCheckDigit((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getBban("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = IbanUtil.getCountryCodeAndCheckDigit("org.iban4j.IbanUtil$1");
      assertEquals("org.", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getCheckDigit("%l");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Iban iban0 = Iban.random();
      iban0.getCountryCode();
      assertEquals("66", iban0.getCheckDigit());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      try { 
        IbanUtil.calculateCheckDigit("org.iban4j.IbanUtil$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid Character[6] = '-1'
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IbanFormat ibanFormat0 = IbanFormat.Default;
      try { 
        IbanUtil.validate("CZ79  000 0 00 000 000  0000  000 R", ibanFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // [000000000000000R] must contain only digits.
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      try { 
        IbanUtil.validate("AD66");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // [] length is 0, expected BBAN length is: 20
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IbanFormat ibanFormat0 = IbanFormat.Default;
      try { 
        Iban.valueOf("ES1V}d]", ibanFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Iban's check digit should contain only digits.
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      try { 
        IbanUtil.validate("BR?ct9A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Iban's check digit should contain only digits.
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      try { 
        IbanUtil.validate("TL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Iban must contain 2 digit check digit.
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      try { 
        IbanUtil.validate("TA5O\"y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Iban contains non existing country code.
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      try { 
        IbanUtil.validate("U^t/k2oJHdw?|V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Iban country code must contain upper case letters.
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      try { 
        IbanUtil.validate("&:I4<}{F8j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Iban country code must contain upper case letters.
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      try { 
        IbanUtil.validate("x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Iban must contain 2 char country code.
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      try { 
        IbanUtil.validate("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Empty string can't be a valid Iban.
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IbanFormat ibanFormat0 = IbanFormat.None;
      try { 
        Iban.valueOf((String) null, ibanFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null can't be a valid Iban.
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IbanFormat ibanFormat0 = IbanFormat.Default;
      try { 
        IbanUtil.validate("CZ79  000 0 00 000 300  0000  000 0", ibanFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // [CZ7900000000030000000000] has invalid check digit: 79, expected check digit is: 87
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CountryCode countryCode0 = CountryCode.SE;
      boolean boolean0 = IbanUtil.isSupportedCountry(countryCode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CountryCode countryCode0 = CountryCode.getByCode("org.iban4j.IbanUtil$1");
      boolean boolean0 = IbanUtil.isSupportedCountry(countryCode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      IbanFormat ibanFormat0 = IbanFormat.Default;
      try { 
        IbanUtil.validate("CZ79  000 0 00 00 0 000  0000  000 0", ibanFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Iban must be formatted using 4 characters and space combination. Instead of [CZ79  000 0 00 00 0 000  0000  000 0]
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      IbanFormat ibanFormat0 = IbanFormat.None;
      try { 
        IbanUtil.validate("Iban contains non existing country code.", ibanFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Iban country code must contain upper case letters.
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      IbanFormat ibanFormat0 = IbanFormat.Default;
      IbanUtil.validate("CZ79 0000 0000 0000 0000 0000", ibanFormat0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = IbanUtil.calculateCheckDigit("8DN)K37nH");
      assertEquals("07", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CountryCode countryCode0 = CountryCode.IT;
      Iban iban0 = Iban.random(countryCode0);
      String string0 = IbanUtil.calculateCheckDigit(iban0);
      assertEquals("83", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = IbanUtil.getAccountType("AD66 0000 0000 0000 0000 0000");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = IbanUtil.getBankCode("AD66 0000 0000 0000 0000 0000");
      assertEquals(" 000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = IbanUtil.getNationalCheckDigit("IT83 A000 0000 0000 0000 0000 000");
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = IbanUtil.getIdentificationNumber("AD66 0000 0000 0000 0000 0000");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        IbanUtil.getAccountNumber("2=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = IbanUtil.getBranchCode("AD66 0000 0000 0000 0000 0000");
      assertEquals("0 00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CountryCode countryCode0 = CountryCode.BH;
      int int0 = IbanUtil.getIbanLength(countryCode0);
      assertEquals(22, int0);
  }
}
