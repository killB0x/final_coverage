/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 20:44:51 GMT 2022
 */

package org.iban4j.bban;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.iban4j.bban.BbanStructureEntry;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BbanStructureEntry_ESTest extends BbanStructureEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.identificationNumber((-1), 'n');
      bbanStructureEntry0.getRandom();
      assertEquals((-1), bbanStructureEntry0.getLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.ownerAccountNumber(0, 'n');
      assertEquals(0, bbanStructureEntry0.getLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.ownerAccountNumber((-1093), 'n');
      assertEquals((-1093), bbanStructureEntry0.getLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.nationalCheckDigit(3, 'n');
      assertEquals(3, bbanStructureEntry0.getLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.identificationNumber(488, 'n');
      assertEquals(488, bbanStructureEntry0.getLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.branchCode(0, 'n');
      String string0 = bbanStructureEntry0.getRandom();
      assertEquals("", string0);
      assertEquals(0, bbanStructureEntry0.getLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.nationalCheckDigit((-33), 'n');
      int int0 = bbanStructureEntry0.getLength();
      assertEquals((-33), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.branchCode(0, 'n');
      int int0 = bbanStructureEntry0.getLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.branchCode((-1093), 'n');
      assertEquals((-1093), bbanStructureEntry0.getLength());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.bankCode(0, 'n');
      assertEquals(0, bbanStructureEntry0.getLength());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.bankCode((-545), 'n');
      assertEquals((-545), bbanStructureEntry0.getLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.accountType((-1758), 'n');
      assertEquals((-1758), bbanStructureEntry0.getLength());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.accountNumber(0, 'n');
      assertEquals(0, bbanStructureEntry0.getLength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.accountNumber(1065, 'a');
      assertEquals(1065, bbanStructureEntry0.getLength());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.accountType(1678, 'n');
      int int0 = bbanStructureEntry0.getLength();
      assertEquals(1678, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.accountNumber((-3423), 'n');
      assertEquals((-3423), bbanStructureEntry0.getLength());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.bankCode('n', 'n');
      assertEquals(110, bbanStructureEntry0.getLength());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.ownerAccountNumber('a', 'a');
      String string0 = bbanStructureEntry0.getRandom();
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.nationalCheckDigit(0, 'n');
      assertEquals(0, bbanStructureEntry0.getLength());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.identificationNumber(0, 'n');
      assertEquals(0, bbanStructureEntry0.getLength());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.accountType(0, 'n');
      assertEquals(0, bbanStructureEntry0.getLength());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.ownerAccountNumber('a', 'a');
      bbanStructureEntry0.getCharacterType();
      assertEquals(97, bbanStructureEntry0.getLength());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BbanStructureEntry bbanStructureEntry0 = BbanStructureEntry.branchCode(1636, 'n');
      bbanStructureEntry0.getEntryType();
      assertEquals(1636, bbanStructureEntry0.getLength());
  }
}
