/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 20:43:54 GMT 2022
 */

package org.iban4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.iban4j.CountryCode;
import org.iban4j.Iban;
import org.iban4j.IbanFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Iban_ESTest extends Iban_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Iban iban0 = Iban.valueOf("AD6600000000000000000000");
      assertEquals("AD6600000000000000000000", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CountryCode countryCode0 = CountryCode.BR;
      Iban iban0 = Iban.random(countryCode0);
      iban0.getOwnerAccountType();
      assertEquals("BR3100000000000000000000000A0", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Iban iban0 = Iban.random();
      iban0.getNationalCheckDigit();
      assertEquals("AD6600000000000000000000", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CountryCode countryCode0 = CountryCode.VG;
      Iban iban0 = Iban.random(countryCode0);
      iban0.getIdentificationNumber();
      assertEquals("VG53AAAA0000000000000000", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CountryCode countryCode0 = CountryCode.VG;
      Iban iban0 = Iban.random(countryCode0);
      iban0.getBranchCode();
      assertEquals("VG53AAAA0000000000000000", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CountryCode countryCode0 = CountryCode.VG;
      Iban iban0 = Iban.random(countryCode0);
      iban0.getAccountType();
      assertEquals("VG53AAAA0000000000000000", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IbanFormat ibanFormat0 = IbanFormat.Default;
      // Undeclared exception!
      try { 
        Iban.valueOf((String) null, ibanFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.Iban", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Iban.Builder iban_Builder0 = new Iban.Builder();
      iban_Builder0.buildRandom();
      Iban.Builder iban_Builder1 = iban_Builder0.accountNumber("LS");
      Iban iban0 = iban_Builder1.build(false);
      // Undeclared exception!
      try { 
        iban0.getOwnerAccountType();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Iban.Builder iban_Builder0 = new Iban.Builder();
      iban_Builder0.buildRandom();
      Iban iban0 = iban_Builder0.build(true);
      assertEquals("AD6600000000000000000000", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      try { 
        Iban.valueOf("uS6Z8K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Iban country code must contain upper case letters.
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Iban iban0 = Iban.random();
      String string0 = iban0.toFormattedString();
      assertEquals("AD66 0000 0000 0000 0000 0000", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CountryCode countryCode0 = CountryCode.BR;
      Iban.Builder iban_Builder0 = new Iban.Builder();
      Iban.Builder iban_Builder1 = iban_Builder0.ownerAccountType("`fEQE");
      iban_Builder1.countryCode(countryCode0);
      try { 
        iban_Builder0.buildRandom();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid Character[24] = '-1'
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Random.setNextRandom(7);
      Iban.Builder iban_Builder0 = new Iban.Builder();
      Iban.Builder iban_Builder1 = iban_Builder0.accountType("MD");
      try { 
        iban_Builder1.buildRandom();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // [MD] must contain only digits.
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Iban.Builder iban_Builder0 = new Iban.Builder();
      Iban.Builder iban_Builder1 = iban_Builder0.nationalCheckDigit("org.iban4j.Iban$1");
      CountryCode countryCode0 = CountryCode.TR;
      Iban.Builder iban_Builder2 = iban_Builder1.countryCode(countryCode0);
      try { 
        iban_Builder2.buildRandom();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid Character[8] = '-1'
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CountryCode countryCode0 = CountryCode.RW;
      // Undeclared exception!
      try { 
        Iban.random(countryCode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Country code is not supported.
         //
         verifyException("org.iban4j.Iban$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Iban.Builder iban_Builder0 = new Iban.Builder();
      Iban.Builder iban_Builder1 = iban_Builder0.bankCode("AD66 0000 0000 0000 0000 0000");
      CountryCode countryCode0 = CountryCode.NZ;
      Iban.Builder iban_Builder2 = iban_Builder1.countryCode(countryCode0);
      try { 
        iban_Builder2.build();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // accountNumber is required; it cannot be null
         //
         verifyException("org.iban4j.Iban$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Iban.Builder iban_Builder0 = new Iban.Builder();
      CountryCode countryCode0 = CountryCode.PN;
      Iban.Builder iban_Builder1 = iban_Builder0.countryCode(countryCode0);
      try { 
        iban_Builder1.build();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // bankCode is required; it cannot be null
         //
         verifyException("org.iban4j.Iban$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Iban.Builder iban_Builder0 = new Iban.Builder();
      try { 
        iban_Builder0.build(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // countryCode is required; it cannot be null
         //
         verifyException("org.iban4j.Iban$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Iban.Builder iban_Builder0 = new Iban.Builder();
      CountryCode countryCode0 = CountryCode.LK;
      Iban.Builder iban_Builder1 = iban_Builder0.countryCode(countryCode0);
      Iban.Builder iban_Builder2 = iban_Builder1.bankCode("Iban must be formatted using 4 characters and space combination. Instead of [%s]");
      Iban.Builder iban_Builder3 = iban_Builder2.accountNumber("Iban must be formatted using 4 characters and space combination. Instead of [%s]");
      try { 
        iban_Builder3.build();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Country code is not supported.
         //
         verifyException("org.iban4j.Iban$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CountryCode countryCode0 = CountryCode.DK;
      Iban iban0 = Iban.random(countryCode0);
      boolean boolean0 = iban0.equals(iban0);
      assertTrue(boolean0);
      assertEquals("DK1800000000000000", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Iban iban0 = Iban.random();
      boolean boolean0 = iban0.equals((Object) null);
      assertEquals("AD6600000000000000000000", iban0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IbanFormat ibanFormat0 = IbanFormat.Default;
      Iban iban0 = Iban.valueOf("AD66 0000 0000 0000 0000 0000", ibanFormat0);
      assertEquals("AD6600000000000000000000", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IbanFormat ibanFormat0 = IbanFormat.None;
      Iban iban0 = Iban.valueOf("AD6600000000000000000000", ibanFormat0);
      assertEquals("AD6600000000000000000000", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CountryCode countryCode0 = CountryCode.IS;
      Iban iban0 = Iban.random(countryCode0);
      iban0.getIdentificationNumber();
      assertEquals("IS460000000000000000000000", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Iban iban0 = Iban.random();
      iban0.getCountryCode();
      assertEquals("AD6600000000000000000000", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Iban.Builder iban_Builder0 = new Iban.Builder();
      Iban iban0 = iban_Builder0.buildRandom();
      String string0 = iban0.toString();
      assertEquals("AD6600000000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CountryCode countryCode0 = CountryCode.SC;
      Iban iban0 = Iban.random(countryCode0);
      iban0.getAccountType();
      assertEquals("SC30AAAA00000000000000000000AAA", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Iban iban0 = Iban.random();
      iban0.hashCode();
      assertEquals("AD6600000000000000000000", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Iban iban0 = Iban.random();
      String string0 = iban0.getCheckDigit();
      assertEquals("66", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CountryCode countryCode0 = CountryCode.SC;
      Iban iban0 = Iban.random(countryCode0);
      iban0.getOwnerAccountType();
      assertEquals("SC30AAAA00000000000000000000AAA", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Iban.Builder iban_Builder0 = new Iban.Builder();
      Iban iban0 = iban_Builder0.buildRandom();
      iban0.getBban();
      assertEquals("AD6600000000000000000000", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IbanFormat ibanFormat0 = IbanFormat.Default;
      try { 
        Iban.valueOf("AD6600000000000000000000", ibanFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Iban must be formatted using 4 characters and space combination. Instead of [AD6600000000000000000000]
         //
         verifyException("org.iban4j.Iban", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Iban iban0 = Iban.random();
      iban0.getBranchCode();
      assertEquals("AD6600000000000000000000", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CountryCode countryCode0 = CountryCode.BE;
      Iban iban0 = Iban.random(countryCode0);
      iban0.getNationalCheckDigit();
      assertEquals("BE54000000000000", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Iban iban0 = Iban.random();
      iban0.getBankCode();
      assertEquals("AD6600000000000000000000", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Iban.Builder iban_Builder0 = new Iban.Builder();
      Iban.Builder iban_Builder1 = iban_Builder0.branchCode("accountNumber is required; it cannot be null");
      try { 
        iban_Builder1.buildRandom();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid Character[17] = '-1'
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Iban.Builder iban_Builder0 = new Iban.Builder();
      Iban.Builder iban_Builder1 = iban_Builder0.identificationNumber("g2ttd6Zm%*=qs2e\"@8");
      CountryCode countryCode0 = CountryCode.IS;
      Iban.Builder iban_Builder2 = iban_Builder1.countryCode(countryCode0);
      try { 
        iban_Builder2.buildRandom();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid Character[20] = '-1'
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Iban.Builder iban_Builder0 = new Iban.Builder();
      iban_Builder0.accountNumber("GBR");
      try { 
        iban_Builder0.buildRandom();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // [00000000GBR] length is 11, expected BBAN length is: 20
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Iban.Builder iban_Builder0 = new Iban.Builder();
      Iban iban0 = iban_Builder0.buildRandom();
      iban0.getAccountNumber();
      assertEquals("AD6600000000000000000000", iban0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Iban.Builder iban_Builder0 = new Iban.Builder();
      Iban.Builder iban_Builder1 = iban_Builder0.bankCode("]R-ETS\"aQ'");
      try { 
        iban_Builder1.buildRandom();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid Character[0] = '-1'
         //
         verifyException("org.iban4j.IbanUtil", e);
      }
  }
}
