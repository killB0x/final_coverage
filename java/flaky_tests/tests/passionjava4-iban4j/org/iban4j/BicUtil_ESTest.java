/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 20:41:38 GMT 2022
 */

package org.iban4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.iban4j.BicUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BicUtil_ESTest extends BicUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = BicUtil.hasBranchCode("c^LA:`L}T8O8H?X@G_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        BicUtil.validate("Uv]Lrlt,axI7_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bic length must be 8 or 11
         //
         verifyException("org.iban4j.BicUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      try { 
        BicUtil.validate("<vGsA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bic length must be 8 or 11
         //
         verifyException("org.iban4j.BicUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = BicUtil.hasBranchCode("ODO2_-Q+IR~");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = BicUtil.hasBranchCode("Albania");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = BicUtil.getLocationCode("067Wz;V-40LDHF:");
      assertEquals(";V", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = BicUtil.getCountryCode("p<\"jmf/77l@;pLD'");
      assertEquals("mf", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = BicUtil.getBranchCode("|tMZD{ec%RWD");
      assertEquals("%RW", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = BicUtil.getBankCode("URz.)-(ITi%O");
      assertEquals("URz.", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        BicUtil.hasBranchCode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.BicUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        BicUtil.getLocationCode("RW");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        BicUtil.getLocationCode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.BicUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        BicUtil.getCountryCode("TON");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        BicUtil.getCountryCode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.BicUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        BicUtil.getBranchCode("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        BicUtil.getBranchCode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.BicUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        BicUtil.getBankCode("CPV");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        BicUtil.getBankCode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.iban4j.BicUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      try { 
        BicUtil.validate("NETHERLAN;S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Branch code must contain only letters or digits.
         //
         verifyException("org.iban4j.BicUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      try { 
        BicUtil.validate("NETFERL~>DS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Location code must contain only letters or digits.
         //
         verifyException("org.iban4j.BicUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      try { 
        BicUtil.validate("NETHENDS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Country code is not supported.
         //
         verifyException("org.iban4j.BicUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      try { 
        BicUtil.validate("NETHE\"LA4DS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bic country code must contain upper case letters
         //
         verifyException("org.iban4j.BicUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      try { 
        BicUtil.validate("ZATB)W}_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bic country code must contain upper case letters
         //
         verifyException("org.iban4j.BicUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      try { 
        BicUtil.validate("ISLE OF MAN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bic country code must contain upper case letters
         //
         verifyException("org.iban4j.BicUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      try { 
        BicUtil.validate("R(N%2SL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bank code must contain only letters.
         //
         verifyException("org.iban4j.BicUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      try { 
        BicUtil.validate("oDo2_-Q+iR~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bic must contain only upper case letters.
         //
         verifyException("org.iban4j.BicUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      try { 
        BicUtil.validate("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Empty string can't be a valid Bic.
         //
         verifyException("org.iban4j.BicUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      try { 
        BicUtil.validate((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null can't be a valid Bic.
         //
         verifyException("org.iban4j.BicUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BicUtil.validate("PARAGUAY");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BicUtil bicUtil0 = new BicUtil();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BicUtil.validate("NETHERLANDS");
  }
}
