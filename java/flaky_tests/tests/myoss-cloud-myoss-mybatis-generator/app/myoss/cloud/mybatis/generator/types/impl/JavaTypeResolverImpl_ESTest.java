/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 13:21:39 GMT 2022
 */

package app.myoss.cloud.mybatis.generator.types.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import app.myoss.cloud.mybatis.generator.db.Column;
import app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType;
import app.myoss.cloud.mybatis.generator.types.impl.JavaTypeResolverImpl;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JavaTypeResolverImpl_ESTest extends JavaTypeResolverImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      column0.setLength(4);
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getIntInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.calculateBigDecimalReplacement(column0, fullyQualifiedJavaType0);
      assertEquals("java.lang.Short", fullyQualifiedJavaType1.getBaseQualifiedName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Column column0 = new Column();
      column0.setLength(18);
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getObjectInstance();
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.calculateBigDecimalReplacement(column0, fullyQualifiedJavaType0);
      assertEquals("Long", fullyQualifiedJavaType1.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      column0.setScale((-3843));
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewHashMapInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.calculateBigDecimalReplacement(column0, fullyQualifiedJavaType0);
      assertEquals("Short", fullyQualifiedJavaType1.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = javaTypeResolverImpl0.overrideDefaultType(column0, (FullyQualifiedJavaType) null);
      assertNull(fullyQualifiedJavaType0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewIteratorInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.overrideDefaultType(column0, fullyQualifiedJavaType0);
      assertEquals("Iterator", fullyQualifiedJavaType1.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      column0.setJdbcType((-4));
      FullyQualifiedJavaType fullyQualifiedJavaType0 = javaTypeResolverImpl0.calculateJavaType(column0);
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.overrideDefaultType(column0, fullyQualifiedJavaType0);
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.overrideDefaultType(column0, fullyQualifiedJavaType0);
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = javaTypeResolverImpl0.calculateTimestampType(column0, (FullyQualifiedJavaType) null);
      assertNull(fullyQualifiedJavaType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.calculateTimestampType(column0, fullyQualifiedJavaType0);
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseQualifiedName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewHashMapInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.calculateTimestampType(column0, fullyQualifiedJavaType0);
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = javaTypeResolverImpl0.calculateTimeType(column0, (FullyQualifiedJavaType) null);
      assertNull(fullyQualifiedJavaType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.calculateTimeType(column0, fullyQualifiedJavaType0);
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseQualifiedName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      column0.setLength(828);
      column0.setJdbcType((-7));
      FullyQualifiedJavaType fullyQualifiedJavaType0 = javaTypeResolverImpl0.calculateJavaType(column0);
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.calculateTimeType(column0, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      assertEquals("byte[]", fullyQualifiedJavaType1.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = javaTypeResolverImpl0.calculateDateType(column0, (FullyQualifiedJavaType) null);
      assertNull(fullyQualifiedJavaType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.calculateDateType(column0, fullyQualifiedJavaType0);
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      column0.setJdbcType((-4));
      FullyQualifiedJavaType fullyQualifiedJavaType0 = javaTypeResolverImpl0.calculateJavaType(column0);
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.calculateDateType(column0, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      assertEquals("byte[]", fullyQualifiedJavaType1.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewHashMapInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.calculateDateType(column0, fullyQualifiedJavaType0);
      assertEquals("java.util.HashMap", fullyQualifiedJavaType1.getBaseQualifiedName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = javaTypeResolverImpl0.calculateBitReplacement(column0, (FullyQualifiedJavaType) null);
      assertNull(fullyQualifiedJavaType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.calculateBitReplacement(column0, fullyQualifiedJavaType0);
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewHashMapInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.calculateBitReplacement(column0, fullyQualifiedJavaType0);
      assertFalse(fullyQualifiedJavaType1.isArray());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      javaTypeResolverImpl0.forceBigDecimals = false;
      javaTypeResolverImpl0.forceBigDecimals = true;
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.calculateBigDecimalReplacement(column0, fullyQualifiedJavaType0);
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      column0.setLength(3373);
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getDateInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.calculateBigDecimalReplacement(column0, fullyQualifiedJavaType0);
      assertEquals("java.util.Date", fullyQualifiedJavaType1.getBaseQualifiedName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      column0.setJdbcType((-3));
      FullyQualifiedJavaType fullyQualifiedJavaType0 = javaTypeResolverImpl0.calculateJavaType(column0);
      column0.setLength(2013);
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.calculateBigDecimalReplacement(column0, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      assertEquals("byte[]", fullyQualifiedJavaType1.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      // Undeclared exception!
      try { 
        javaTypeResolverImpl0.overrideDefaultType((Column) null, fullyQualifiedJavaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.JavaTypeResolverImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      // Undeclared exception!
      try { 
        javaTypeResolverImpl0.calculateJdbcTypeName((Column) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.JavaTypeResolverImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      // Undeclared exception!
      try { 
        javaTypeResolverImpl0.calculateJavaType((Column) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.JavaTypeResolverImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      // Undeclared exception!
      try { 
        javaTypeResolverImpl0.calculateBitReplacement((Column) null, fullyQualifiedJavaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.JavaTypeResolverImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = javaTypeResolverImpl0.calculateJavaType(column0);
      // Undeclared exception!
      try { 
        javaTypeResolverImpl0.calculateBigDecimalReplacement((Column) null, fullyQualifiedJavaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.JavaTypeResolverImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      // Undeclared exception!
      try { 
        javaTypeResolverImpl0.addConfigurationProperties((Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewHashMapInstance();
      JavaTypeResolverImpl.JdbcTypeInformation javaTypeResolverImpl_JdbcTypeInformation0 = new JavaTypeResolverImpl.JdbcTypeInformation("vhMK0W'ZE%&1SJs", fullyQualifiedJavaType0);
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl_JdbcTypeInformation0.getFullyQualifiedJavaType();
      assertEquals("java.util.HashMap", fullyQualifiedJavaType1.getBaseQualifiedName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewHashMapInstance();
      JavaTypeResolverImpl.JdbcTypeInformation javaTypeResolverImpl_JdbcTypeInformation0 = new JavaTypeResolverImpl.JdbcTypeInformation("vhMK0W'ZE%&1SJs", fullyQualifiedJavaType0);
      String string0 = javaTypeResolverImpl_JdbcTypeInformation0.getJdbcTypeName();
      assertEquals("vhMK0W'ZE%&1SJs", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      HashMap<Integer, JavaTypeResolverImpl.JdbcTypeInformation> hashMap0 = new HashMap<Integer, JavaTypeResolverImpl.JdbcTypeInformation>();
      javaTypeResolverImpl0.typeMap = (Map<Integer, JavaTypeResolverImpl.JdbcTypeInformation>) hashMap0;
      String string0 = javaTypeResolverImpl0.calculateJdbcTypeName(column0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      column0.setLength(9);
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getDateInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.calculateBigDecimalReplacement(column0, fullyQualifiedJavaType0);
      assertEquals("Integer", fullyQualifiedJavaType1.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      javaTypeResolverImpl0.forceBigDecimals = false;
      javaTypeResolverImpl0.forceBigDecimals = true;
      FullyQualifiedJavaType fullyQualifiedJavaType0 = javaTypeResolverImpl0.calculateBigDecimalReplacement(column0, (FullyQualifiedJavaType) null);
      assertNull(fullyQualifiedJavaType0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      column0.setScale(3729);
      FullyQualifiedJavaType fullyQualifiedJavaType0 = javaTypeResolverImpl0.calculateJavaType(column0);
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.calculateBigDecimalReplacement(column0, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      column0.setLength(20);
      FullyQualifiedJavaType fullyQualifiedJavaType0 = javaTypeResolverImpl0.calculateJavaType(column0);
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.calculateBitReplacement(column0, fullyQualifiedJavaType0);
      FullyQualifiedJavaType fullyQualifiedJavaType2 = javaTypeResolverImpl0.calculateTimestampType(column0, fullyQualifiedJavaType1);
      assertTrue(fullyQualifiedJavaType2.isArray());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      javaTypeResolverImpl0.useJSR310Types = true;
      Column column0 = new Column();
      column0.setJdbcType(93);
      FullyQualifiedJavaType fullyQualifiedJavaType0 = javaTypeResolverImpl0.calculateJavaType(column0);
      assertNotNull(fullyQualifiedJavaType0);
      assertEquals("java.time.LocalDateTime", fullyQualifiedJavaType0.getBaseQualifiedName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getIntInstance();
      javaTypeResolverImpl0.useJSR310Types = true;
      FullyQualifiedJavaType fullyQualifiedJavaType1 = javaTypeResolverImpl0.calculateTimeType(column0, fullyQualifiedJavaType0);
      assertEquals("java.time", fullyQualifiedJavaType1.getPackageName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Column column0 = new Column();
      column0.setJdbcType(91);
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      javaTypeResolverImpl0.useJSR310Types = true;
      FullyQualifiedJavaType fullyQualifiedJavaType0 = javaTypeResolverImpl0.calculateJavaType(column0);
      assertEquals("LocalDate", fullyQualifiedJavaType0.getBaseShortName());
      assertNotNull(fullyQualifiedJavaType0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      column0.setJdbcType(92);
      FullyQualifiedJavaType fullyQualifiedJavaType0 = javaTypeResolverImpl0.calculateJavaType(column0);
      assertNotNull(fullyQualifiedJavaType0);
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      column0.setJdbcType(3);
      FullyQualifiedJavaType fullyQualifiedJavaType0 = javaTypeResolverImpl0.calculateJavaType(column0);
      assertNotNull(fullyQualifiedJavaType0);
      assertEquals("java.lang.Short", fullyQualifiedJavaType0.getBaseQualifiedName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      column0.setJdbcType(2);
      FullyQualifiedJavaType fullyQualifiedJavaType0 = javaTypeResolverImpl0.calculateJavaType(column0);
      assertNotNull(fullyQualifiedJavaType0);
      assertEquals("Short", fullyQualifiedJavaType0.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      HashMap<Integer, JavaTypeResolverImpl.JdbcTypeInformation> hashMap0 = new HashMap<Integer, JavaTypeResolverImpl.JdbcTypeInformation>();
      javaTypeResolverImpl0.typeMap = (Map<Integer, JavaTypeResolverImpl.JdbcTypeInformation>) hashMap0;
      FullyQualifiedJavaType fullyQualifiedJavaType0 = javaTypeResolverImpl0.calculateJavaType(column0);
      assertNull(fullyQualifiedJavaType0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      Column column0 = new Column();
      String string0 = javaTypeResolverImpl0.calculateJdbcTypeName(column0);
      assertEquals("NULL", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JavaTypeResolverImpl javaTypeResolverImpl0 = new JavaTypeResolverImpl();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        javaTypeResolverImpl0.addConfigurationProperties(hashMap0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/BooleanUtils
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.JavaTypeResolverImpl", e);
      }
  }
}
